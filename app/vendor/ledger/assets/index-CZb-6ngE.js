var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
(function() {
  "use strict";
  var buffer$2 = {};
  var base64Js$1 = {};
  base64Js$1.byteLength = byteLength$1;
  base64Js$1.toByteArray = toByteArray$1;
  base64Js$1.fromByteArray = fromByteArray$1;
  var lookup$1 = [];
  var revLookup$1 = [];
  var Arr$1 = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i$1 = 0, len$1 = code$1.length; i$1 < len$1; ++i$1) {
    lookup$1[i$1] = code$1[i$1];
    revLookup$1[code$1.charCodeAt(i$1)] = i$1;
  }
  revLookup$1["-".charCodeAt(0)] = 62;
  revLookup$1["_".charCodeAt(0)] = 63;
  function getLens$1(b64) {
    var len2 = b64.length;
    if (len2 % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len2;
    var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }
  function byteLength$1(b64) {
    var lens = getLens$1(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength$1(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray$1(b64) {
    var tmp;
    var lens = getLens$1(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr$1(_byteLength$1(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i2;
    for (i2 = 0; i2 < len2; i2 += 4) {
      tmp = revLookup$1[b64.charCodeAt(i2)] << 18 | revLookup$1[b64.charCodeAt(i2 + 1)] << 12 | revLookup$1[b64.charCodeAt(i2 + 2)] << 6 | revLookup$1[b64.charCodeAt(i2 + 3)];
      arr[curByte++] = tmp >> 16 & 255;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup$1[b64.charCodeAt(i2)] << 2 | revLookup$1[b64.charCodeAt(i2 + 1)] >> 4;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup$1[b64.charCodeAt(i2)] << 10 | revLookup$1[b64.charCodeAt(i2 + 1)] << 4 | revLookup$1[b64.charCodeAt(i2 + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64$1(num) {
    return lookup$1[num >> 18 & 63] + lookup$1[num >> 12 & 63] + lookup$1[num >> 6 & 63] + lookup$1[num & 63];
  }
  function encodeChunk$1(uint8, start, end) {
    var tmp;
    var output2 = [];
    for (var i2 = start; i2 < end; i2 += 3) {
      tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
      output2.push(tripletToBase64$1(tmp));
    }
    return output2.join("");
  }
  function fromByteArray$1(uint8) {
    var tmp;
    var len2 = uint8.length;
    var extraBytes = len2 % 3;
    var parts = [];
    var maxChunkLength = 16383;
    for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
      parts.push(encodeChunk$1(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len2 - 1];
      parts.push(
        lookup$1[tmp >> 2] + lookup$1[tmp << 4 & 63] + "=="
      );
    } else if (extraBytes === 2) {
      tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
      parts.push(
        lookup$1[tmp >> 10] + lookup$1[tmp >> 4 & 63] + lookup$1[tmp << 2 & 63] + "="
      );
    }
    return parts.join("");
  }
  var ieee754$1 = {};
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  ieee754$1.read = function(buffer2, offset, isLE2, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i2 = isLE2 ? nBytes - 1 : 0;
    var d = isLE2 ? -1 : 1;
    var s2 = buffer2[offset + i2];
    i2 += d;
    e = s2 & (1 << -nBits) - 1;
    s2 >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer2[offset + i2], i2 += d, nBits -= 8) {
    }
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer2[offset + i2], i2 += d, nBits -= 8) {
    }
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s2 ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  ieee754$1.write = function(buffer2, value, offset, isLE2, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i2 = isLE2 ? 0 : nBytes - 1;
    var d = isLE2 ? 1 : -1;
    var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer2[offset + i2] = m & 255, i2 += d, m /= 256, mLen -= 8) {
    }
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer2[offset + i2] = e & 255, i2 += d, e /= 256, eLen -= 8) {
    }
    buffer2[offset + i2 - d] |= s2 * 128;
  };
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  (function(exports) {
    const base642 = base64Js$1;
    const ieee754$1$1 = ieee754$1;
    const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer3;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    const K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    const { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;
    Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new GlobalUint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, GlobalUint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer3.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer3.isBuffer(this)) return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer3.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer3.isBuffer(this)) return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new GlobalUint8Array(length);
      Object.setPrototypeOf(buf, Buffer3.prototype);
      return buf;
    }
    function Buffer3(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer3.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (GlobalArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof GlobalSharedArrayBuffer !== "undefined" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer3.from(valueOf, encodingOrOffset, length);
      }
      const b = fromObject(value);
      if (b) return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer3.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer3.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer3.prototype, GlobalUint8Array.prototype);
    Object.setPrototypeOf(Buffer3, GlobalUint8Array);
    function assertSize(size2) {
      if (typeof size2 !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size2 < 0) {
        throw new RangeError('The value "' + size2 + '" is invalid for option "size"');
      }
    }
    function alloc(size2, fill, encoding2) {
      assertSize(size2);
      if (size2 <= 0) {
        return createBuffer(size2);
      }
      if (fill !== void 0) {
        return typeof encoding2 === "string" ? createBuffer(size2).fill(fill, encoding2) : createBuffer(size2).fill(fill);
      }
      return createBuffer(size2);
    }
    Buffer3.alloc = function(size2, fill, encoding2) {
      return alloc(size2, fill, encoding2);
    };
    function allocUnsafe(size2) {
      assertSize(size2);
      return createBuffer(size2 < 0 ? 0 : checked(size2) | 0);
    }
    Buffer3.allocUnsafe = function(size2) {
      return allocUnsafe(size2);
    };
    Buffer3.allocUnsafeSlow = function(size2) {
      return allocUnsafe(size2);
    };
    function fromString(string2, encoding2) {
      if (typeof encoding2 !== "string" || encoding2 === "") {
        encoding2 = "utf8";
      }
      if (!Buffer3.isEncoding(encoding2)) {
        throw new TypeError("Unknown encoding: " + encoding2);
      }
      const length = byteLength2(string2, encoding2) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string2, encoding2);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array2) {
      const length = array2.length < 0 ? 0 : checked(array2.length) | 0;
      const buf = createBuffer(length);
      for (let i2 = 0; i2 < length; i2 += 1) {
        buf[i2] = array2[i2] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, GlobalUint8Array)) {
        const copy = new GlobalUint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array2, byteOffset, length) {
      if (byteOffset < 0 || array2.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array2.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new GlobalUint8Array(array2);
      } else if (length === void 0) {
        buf = new GlobalUint8Array(array2, byteOffset);
      } else {
        buf = new GlobalUint8Array(array2, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer3.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer3.isBuffer(obj)) {
        const len2 = checked(obj.length) | 0;
        const buf = createBuffer(len2);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len2);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer3.alloc(+length);
    }
    Buffer3.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer3.prototype;
    };
    Buffer3.compare = function compare2(a, b) {
      if (isInstance(a, GlobalUint8Array)) a = Buffer3.from(a, a.offset, a.byteLength);
      if (isInstance(b, GlobalUint8Array)) b = Buffer3.from(b, b.offset, b.byteLength);
      if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b) return 0;
      let x = a.length;
      let y = b.length;
      for (let i2 = 0, len2 = Math.min(x, y); i2 < len2; ++i2) {
        if (a[i2] !== b[i2]) {
          x = a[i2];
          y = b[i2];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    Buffer3.isEncoding = function isEncoding(encoding2) {
      switch (String(encoding2).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer3.concat = function concat2(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer3.alloc(0);
      }
      let i2;
      if (length === void 0) {
        length = 0;
        for (i2 = 0; i2 < list.length; ++i2) {
          length += list[i2].length;
        }
      }
      const buffer2 = Buffer3.allocUnsafe(length);
      let pos = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        let buf = list[i2];
        if (isInstance(buf, GlobalUint8Array)) {
          if (pos + buf.length > buffer2.length) {
            if (!Buffer3.isBuffer(buf)) buf = Buffer3.from(buf);
            buf.copy(buffer2, pos);
          } else {
            GlobalUint8Array.prototype.set.call(
              buffer2,
              buf,
              pos
            );
          }
        } else if (!Buffer3.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer2, pos);
        }
        pos += buf.length;
      }
      return buffer2;
    };
    function byteLength2(string2, encoding2) {
      if (Buffer3.isBuffer(string2)) {
        return string2.length;
      }
      if (GlobalArrayBuffer.isView(string2) || isInstance(string2, GlobalArrayBuffer)) {
        return string2.byteLength;
      }
      if (typeof string2 !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string2
        );
      }
      const len2 = string2.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len2 === 0) return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding2) {
          case "ascii":
          case "latin1":
          case "binary":
            return len2;
          case "utf8":
          case "utf-8":
            return utf8ToBytes2(string2).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len2 * 2;
          case "hex":
            return len2 >>> 1;
          case "base64":
            return base64ToBytes(string2).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes2(string2).length;
            }
            encoding2 = ("" + encoding2).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer3.byteLength = byteLength2;
    function slowToString(encoding2, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding2) encoding2 = "utf8";
      while (true) {
        switch (encoding2) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding2);
            encoding2 = (encoding2 + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer3.prototype._isBuffer = true;
    function swap(b, n, m) {
      const i2 = b[n];
      b[n] = b[m];
      b[m] = i2;
    }
    Buffer3.prototype.swap16 = function swap16() {
      const len2 = this.length;
      if (len2 % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i2 = 0; i2 < len2; i2 += 2) {
        swap(this, i2, i2 + 1);
      }
      return this;
    };
    Buffer3.prototype.swap32 = function swap32() {
      const len2 = this.length;
      if (len2 % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i2 = 0; i2 < len2; i2 += 4) {
        swap(this, i2, i2 + 3);
        swap(this, i2 + 1, i2 + 2);
      }
      return this;
    };
    Buffer3.prototype.swap64 = function swap64() {
      const len2 = this.length;
      if (len2 % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i2 = 0; i2 < len2; i2 += 8) {
        swap(this, i2, i2 + 7);
        swap(this, i2 + 1, i2 + 6);
        swap(this, i2 + 2, i2 + 5);
        swap(this, i2 + 3, i2 + 4);
      }
      return this;
    };
    Buffer3.prototype.toString = function toString() {
      const length = this.length;
      if (length === 0) return "";
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
    Buffer3.prototype.equals = function equals(b) {
      if (!Buffer3.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
      if (this === b) return true;
      return Buffer3.compare(this, b) === 0;
    };
    Buffer3.prototype.inspect = function inspect() {
      let str = "";
      const max2 = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max2).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max2) str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;
    }
    Buffer3.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, GlobalUint8Array)) {
        target = Buffer3.from(target, target.offset, target.byteLength);
      }
      if (!Buffer3.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      let x = thisEnd - thisStart;
      let y = end - start;
      const len2 = Math.min(x, y);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i2 = 0; i2 < len2; ++i2) {
        if (thisCopy[i2] !== targetCopy[i2]) {
          x = thisCopy[i2];
          y = targetCopy[i2];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer2, val, byteOffset, encoding2, dir) {
      if (buffer2.length === 0) return -1;
      if (typeof byteOffset === "string") {
        encoding2 = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer2.length - 1;
      }
      if (byteOffset < 0) byteOffset = buffer2.length + byteOffset;
      if (byteOffset >= buffer2.length) {
        if (dir) return -1;
        else byteOffset = buffer2.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
      }
      if (typeof val === "string") {
        val = Buffer3.from(val, encoding2);
      }
      if (Buffer3.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer2, val, byteOffset, encoding2, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof GlobalUint8Array.prototype.indexOf === "function") {
          if (dir) {
            return GlobalUint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
          } else {
            return GlobalUint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer2, [val], byteOffset, encoding2, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding2, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding2 !== void 0) {
        encoding2 = String(encoding2).toLowerCase();
        if (encoding2 === "ucs2" || encoding2 === "ucs-2" || encoding2 === "utf16le" || encoding2 === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i3) {
        if (indexSize === 1) {
          return buf[i3];
        } else {
          return buf.readUInt16BE(i3 * indexSize);
        }
      }
      let i2;
      if (dir) {
        let foundIndex = -1;
        for (i2 = byteOffset; i2 < arrLength; i2++) {
          if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i2;
            if (i2 - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1) i2 -= i2 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i2 = byteOffset; i2 >= 0; i2--) {
          let found = true;
          for (let j = 0; j < valLength; j++) {
            if (read(arr, i2 + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found) return i2;
        }
      }
      return -1;
    }
    Buffer3.prototype.includes = function includes(val, byteOffset, encoding2) {
      return this.indexOf(val, byteOffset, encoding2) !== -1;
    };
    Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding2) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding2, true);
    };
    Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding2) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding2, false);
    };
    function hexWrite(buf, string2, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string2.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i2;
      for (i2 = 0; i2 < length; ++i2) {
        const parsed = parseInt(string2.substr(i2 * 2, 2), 16);
        if (numberIsNaN(parsed)) return i2;
        buf[offset + i2] = parsed;
      }
      return i2;
    }
    function utf8Write(buf, string2, offset, length) {
      return blitBuffer(utf8ToBytes2(string2, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string2, offset, length) {
      return blitBuffer(asciiToBytes(string2), buf, offset, length);
    }
    function base64Write(buf, string2, offset, length) {
      return blitBuffer(base64ToBytes(string2), buf, offset, length);
    }
    function ucs2Write(buf, string2, offset, length) {
      return blitBuffer(utf16leToBytes(string2, buf.length - offset), buf, offset, length);
    }
    Buffer3.prototype.write = function write(string2, offset, length, encoding2) {
      if (offset === void 0) {
        encoding2 = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding2 = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding2 === void 0) encoding2 = "utf8";
        } else {
          encoding2 = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset;
      if (length === void 0 || length > remaining) length = remaining;
      if (string2.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding2) encoding2 = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding2) {
          case "hex":
            return hexWrite(this, string2, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string2, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string2, offset, length);
          case "base64":
            return base64Write(this, string2, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string2, offset, length);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding2);
            encoding2 = ("" + encoding2).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer3.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base642.fromByteArray(buf);
      } else {
        return base642.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i2 = start;
      while (i2 < end) {
        const firstByte = buf[i2];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i2 + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i2 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              fourthByte = buf[i2 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i2 += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    const MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len2 = codePoints.length;
      if (len2 <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i2 = 0;
      while (i2 < len2) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len2 = buf.length;
      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len2) end = len2;
      let out = "";
      for (let i2 = start; i2 < end; ++i2) {
        out += hexSliceLookupTable[buf[i2]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes2 = buf.slice(start, end);
      let res = "";
      for (let i2 = 0; i2 < bytes2.length - 1; i2 += 2) {
        res += String.fromCharCode(bytes2[i2] + bytes2[i2 + 1] * 256);
      }
      return res;
    }
    Buffer3.prototype.slice = function slice(start, end) {
      const len2 = this.length;
      start = ~~start;
      end = end === void 0 ? len2 : ~~end;
      if (start < 0) {
        start += len2;
        if (start < 0) start = 0;
      } else if (start > len2) {
        start = len2;
      }
      if (end < 0) {
        end += len2;
        if (end < 0) end = 0;
      } else if (end > len2) {
        end = len2;
      }
      if (end < start) end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer3.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
      if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength3, this.length);
      let val = this[offset];
      let mul = 1;
      let i2 = 0;
      while (++i2 < byteLength3 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      return val;
    };
    Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength3, this.length);
      }
      let val = this[offset + --byteLength3];
      let mul = 1;
      while (byteLength3 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength3] * mul;
      }
      return val;
    };
    Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer3.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo) + (BigInt(hi) << BigInt(32));
    });
    Buffer3.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo);
    });
    Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength3, this.length);
      let val = this[offset];
      let mul = 1;
      let i2 = 0;
      while (++i2 < byteLength3 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength3, this.length);
      let i2 = byteLength3;
      let mul = 1;
      let val = this[offset + --i2];
      while (i2 > 0 && (mul *= 256)) {
        val += this[offset + --i2] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128)) return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer3.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
    });
    Buffer3.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first << 24) + // Overflow
      this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
    });
    Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754$1$1.read(this, offset, true, 23, 4);
    };
    Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754$1$1.read(this, offset, false, 23, 4);
    };
    Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754$1$1.read(this, offset, true, 52, 8);
    };
    Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754$1$1.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max2, min2) {
      if (!Buffer3.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max2 || value < min2) throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
    }
    Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset, byteLength3, maxBytes, 0);
      }
      let mul = 1;
      let i2 = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength3 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset, byteLength3, maxBytes, 0);
      }
      let i2 = byteLength3 - 1;
      let mul = 1;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value, offset, min2, max2) {
      checkIntBI(value, min2, max2, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset;
    }
    function wrtBigUInt64BE(buf, value, offset, min2, max2) {
      checkIntBI(value, min2, max2, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8;
    }
    Buffer3.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer3.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit2 = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset, byteLength3, limit2 - 1, -limit2);
      }
      let i2 = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength3 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit2 = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset, byteLength3, limit2 - 1, -limit2);
      }
      let i2 = byteLength3 - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
      if (value < 0) value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0) value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer3.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer3.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset, ext, max2, min2) {
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
      if (offset < 0) throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      ieee754$1$1.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      ieee754$1$1.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer3.isBuffer(target)) throw new TypeError("argument should be a Buffer");
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len2 = end - start;
      if (this === target && typeof GlobalUint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        GlobalUint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len2;
    };
    Buffer3.prototype.fill = function fill(val, start, end, encoding2) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding2 = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding2 = end;
          end = this.length;
        }
        if (encoding2 !== void 0 && typeof encoding2 !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding2 === "string" && !Buffer3.isEncoding(encoding2)) {
          throw new TypeError("Unknown encoding: " + encoding2);
        }
        if (val.length === 1) {
          const code2 = val.charCodeAt(0);
          if (encoding2 === "utf8" && code2 < 128 || encoding2 === "latin1") {
            val = code2;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      let i2;
      if (typeof val === "number") {
        for (i2 = start; i2 < end; ++i2) {
          this[i2] = val;
        }
      } else {
        const bytes2 = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding2);
        const len2 = bytes2.length;
        if (len2 === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i2 = 0; i2 < end - start; ++i2) {
          this[i2 + start] = bytes2[i2 % len2];
        }
      }
      return this;
    };
    const errors2 = {};
    function E(sym, getMessage, Base) {
      errors2[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name) {
        if (name) {
          return `${name} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E(
      "ERR_INVALID_ARG_TYPE",
      function(name, actual) {
        return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E(
      "ERR_OUT_OF_RANGE",
      function(str, range2, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range2}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i2 = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i2 >= start + 4; i2 -= 3) {
        res = `_${val.slice(i2 - 3, i2)}${res}`;
      }
      return `${val.slice(0, i2)}${res}`;
    }
    function checkBounds(buf, offset, byteLength3) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength3] === void 0) {
        boundsError(offset, buf.length - (byteLength3 + 1));
      }
    }
    function checkIntBI(value, min2, max2, buf, offset, byteLength3) {
      if (value > max2 || value < min2) {
        const n = typeof min2 === "bigint" ? "n" : "";
        let range2;
        {
          if (min2 === 0 || min2 === BigInt(0)) {
            range2 = `>= 0${n} and < 2${n} ** ${(byteLength3 + 1) * 8}${n}`;
          } else {
            range2 = `>= -(2${n} ** ${(byteLength3 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength3 + 1) * 8 - 1}${n}`;
          }
        }
        throw new errors2.ERR_OUT_OF_RANGE("value", range2, value);
      }
      checkBounds(buf, offset, byteLength3);
    }
    function validateNumber(value, name) {
      if (typeof value !== "number") {
        throw new errors2.ERR_INVALID_ARG_TYPE(name, "number", value);
      }
    }
    function boundsError(value, length, type) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors2.ERR_OUT_OF_RANGE("offset", "an integer", value);
      }
      if (length < 0) {
        throw new errors2.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors2.ERR_OUT_OF_RANGE(
        "offset",
        `>= ${0} and <= ${length}`,
        value
      );
    }
    const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2) return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes2(string2, units2) {
      units2 = units2 || Infinity;
      let codePoint;
      const length = string2.length;
      let leadSurrogate = null;
      const bytes2 = [];
      for (let i2 = 0; i2 < length; ++i2) {
        codePoint = string2.charCodeAt(i2);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units2 -= 3) > -1) bytes2.push(239, 191, 189);
              continue;
            } else if (i2 + 1 === length) {
              if ((units2 -= 3) > -1) bytes2.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units2 -= 3) > -1) bytes2.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units2 -= 3) > -1) bytes2.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units2 -= 1) < 0) break;
          bytes2.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units2 -= 2) < 0) break;
          bytes2.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units2 -= 3) < 0) break;
          bytes2.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units2 -= 4) < 0) break;
          bytes2.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes2;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        byteArray.push(str.charCodeAt(i2) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units2) {
      let c, hi, lo;
      const byteArray = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        if ((units2 -= 2) < 0) break;
        c = str.charCodeAt(i2);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base642.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      let i2;
      for (i2 = 0; i2 < length; ++i2) {
        if (i2 + offset >= dst.length || i2 >= src.length) break;
        dst[i2 + offset] = src[i2];
      }
      return i2;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    const hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i2 = 0; i2 < 16; ++i2) {
        const i16 = i2 * 16;
        for (let j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i2] + alphabet[j];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  })(buffer$2);
  const Buffer2 = buffer$2.Buffer;
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f2 = n.default;
    if (typeof f2 == "function") {
      var a = function a2() {
        if (this instanceof a2) {
          return Reflect.construct(f2, arguments, this.constructor);
        }
        return f2.apply(this, arguments);
      };
      a.prototype = f2.prototype;
    } else a = {};
    Object.defineProperty(a, "__esModule", { value: true });
    Object.keys(n).forEach(function(k) {
      var d = Object.getOwnPropertyDescriptor(n, k);
      Object.defineProperty(a, k, d.get ? d : {
        enumerable: true,
        get: function() {
          return n[k];
        }
      });
    });
    return a;
  }
  var events = { exports: {} };
  var R = typeof Reflect === "object" ? Reflect : null;
  var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };
  var ReflectOwnKeys;
  if (R && typeof R.ownKeys === "function") {
    ReflectOwnKeys = R.ownKeys;
  } else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys2(target) {
      return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
    };
  } else {
    ReflectOwnKeys = function ReflectOwnKeys2(target) {
      return Object.getOwnPropertyNames(target);
    };
  }
  function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
  }
  var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
    return value !== value;
  };
  function EventEmitter() {
    EventEmitter.init.call(this);
  }
  events.exports = EventEmitter;
  events.exports.once = once;
  EventEmitter.EventEmitter = EventEmitter;
  EventEmitter.prototype._events = void 0;
  EventEmitter.prototype._eventsCount = 0;
  EventEmitter.prototype._maxListeners = void 0;
  var defaultMaxListeners = 10;
  function checkListener(listener) {
    if (typeof listener !== "function") {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
  }
  Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
      }
      defaultMaxListeners = arg;
    }
  });
  EventEmitter.init = function() {
    if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || void 0;
  };
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    }
    this._maxListeners = n;
    return this;
  };
  function _getMaxListeners(that) {
    if (that._maxListeners === void 0)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }
  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
  };
  EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for (var i2 = 1; i2 < arguments.length; i2++) args.push(arguments[i2]);
    var doError = type === "error";
    var events2 = this._events;
    if (events2 !== void 0)
      doError = doError && events2.error === void 0;
    else if (!doError)
      return false;
    if (doError) {
      var er;
      if (args.length > 0)
        er = args[0];
      if (er instanceof Error) {
        throw er;
      }
      var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
      err.context = er;
      throw err;
    }
    var handler = events2[type];
    if (handler === void 0)
      return false;
    if (typeof handler === "function") {
      ReflectApply(handler, this, args);
    } else {
      var len2 = handler.length;
      var listeners = arrayClone(handler, len2);
      for (var i2 = 0; i2 < len2; ++i2)
        ReflectApply(listeners[i2], this, args);
    }
    return true;
  };
  function _addListener(target, type, listener, prepend) {
    var m;
    var events2;
    var existing;
    checkListener(listener);
    events2 = target._events;
    if (events2 === void 0) {
      events2 = target._events = /* @__PURE__ */ Object.create(null);
      target._eventsCount = 0;
    } else {
      if (events2.newListener !== void 0) {
        target.emit(
          "newListener",
          type,
          listener.listener ? listener.listener : listener
        );
        events2 = target._events;
      }
      existing = events2[type];
    }
    if (existing === void 0) {
      existing = events2[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === "function") {
        existing = events2[type] = prepend ? [listener, existing] : [existing, listener];
      } else if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
      m = _getMaxListeners(target);
      if (m > 0 && existing.length > m && !existing.warned) {
        existing.warned = true;
        var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
        w.name = "MaxListenersExceededWarning";
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        ProcessEmitWarning(w);
      }
    }
    return target;
  }
  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };
  EventEmitter.prototype.on = EventEmitter.prototype.addListener;
  EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
  };
  function onceWrapper() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      if (arguments.length === 0)
        return this.listener.call(this.target);
      return this.listener.apply(this.target, arguments);
    }
  }
  function _onceWrap(target, type, listener) {
    var state = { fired: false, wrapFn: void 0, target, type, listener };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
  }
  EventEmitter.prototype.once = function once2(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };
  EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
  };
  EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events2, position, i2, originalListener;
    checkListener(listener);
    events2 = this._events;
    if (events2 === void 0)
      return this;
    list = events2[type];
    if (list === void 0)
      return this;
    if (list === listener || list.listener === listener) {
      if (--this._eventsCount === 0)
        this._events = /* @__PURE__ */ Object.create(null);
      else {
        delete events2[type];
        if (events2.removeListener)
          this.emit("removeListener", type, list.listener || listener);
      }
    } else if (typeof list !== "function") {
      position = -1;
      for (i2 = list.length - 1; i2 >= 0; i2--) {
        if (list[i2] === listener || list[i2].listener === listener) {
          originalListener = list[i2].listener;
          position = i2;
          break;
        }
      }
      if (position < 0)
        return this;
      if (position === 0)
        list.shift();
      else {
        spliceOne(list, position);
      }
      if (list.length === 1)
        events2[type] = list[0];
      if (events2.removeListener !== void 0)
        this.emit("removeListener", type, originalListener || listener);
    }
    return this;
  };
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events2, i2;
    events2 = this._events;
    if (events2 === void 0)
      return this;
    if (events2.removeListener === void 0) {
      if (arguments.length === 0) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      } else if (events2[type] !== void 0) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else
          delete events2[type];
      }
      return this;
    }
    if (arguments.length === 0) {
      var keys = Object.keys(events2);
      var key2;
      for (i2 = 0; i2 < keys.length; ++i2) {
        key2 = keys[i2];
        if (key2 === "removeListener") continue;
        this.removeAllListeners(key2);
      }
      this.removeAllListeners("removeListener");
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
      return this;
    }
    listeners = events2[type];
    if (typeof listeners === "function") {
      this.removeListener(type, listeners);
    } else if (listeners !== void 0) {
      for (i2 = listeners.length - 1; i2 >= 0; i2--) {
        this.removeListener(type, listeners[i2]);
      }
    }
    return this;
  };
  function _listeners(target, type, unwrap) {
    var events2 = target._events;
    if (events2 === void 0)
      return [];
    var evlistener = events2[type];
    if (evlistener === void 0)
      return [];
    if (typeof evlistener === "function")
      return unwrap ? [evlistener.listener || evlistener] : [evlistener];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  }
  EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
  };
  EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
  };
  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };
  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events2 = this._events;
    if (events2 !== void 0) {
      var evlistener = events2[type];
      if (typeof evlistener === "function") {
        return 1;
      } else if (evlistener !== void 0) {
        return evlistener.length;
      }
    }
    return 0;
  }
  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
  };
  function arrayClone(arr, n) {
    var copy = new Array(n);
    for (var i2 = 0; i2 < n; ++i2)
      copy[i2] = arr[i2];
    return copy;
  }
  function spliceOne(list, index) {
    for (; index + 1 < list.length; index++)
      list[index] = list[index + 1];
    list.pop();
  }
  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i2 = 0; i2 < ret.length; ++i2) {
      ret[i2] = arr[i2].listener || arr[i2];
    }
    return ret;
  }
  function once(emitter, name) {
    return new Promise(function(resolve, reject) {
      function errorListener(err) {
        emitter.removeListener(name, resolver);
        reject(err);
      }
      function resolver() {
        if (typeof emitter.removeListener === "function") {
          emitter.removeListener("error", errorListener);
        }
        resolve([].slice.call(arguments));
      }
      eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
      if (name !== "error") {
        addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
      }
    });
  }
  function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") {
      eventTargetAgnosticAddListener(emitter, "error", handler, flags);
    }
  }
  function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
      if (flags.once) {
        emitter.once(name, listener);
      } else {
        emitter.on(name, listener);
      }
    } else if (typeof emitter.addEventListener === "function") {
      emitter.addEventListener(name, function wrapListener(arg) {
        if (flags.once) {
          emitter.removeEventListener(name, wrapListener);
        }
        listener(arg);
      });
    } else {
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
  }
  var eventsExports = events.exports;
  const EventEmitter$1 = /* @__PURE__ */ getDefaultExportFromCjs(eventsExports);
  const errorClasses = {};
  const deserializers = {};
  const addCustomErrorDeserializer = (name, deserializer) => {
    deserializers[name] = deserializer;
  };
  const createCustomErrorClass = (name) => {
    class CustomErrorClass extends Error {
      constructor(message, fields, options) {
        super(message || name, options);
        Object.setPrototypeOf(this, CustomErrorClass.prototype);
        this.name = name;
        if (fields) {
          for (const k in fields) {
            this[k] = fields[k];
          }
        }
        if (options && isObject$1(options) && "cause" in options && !("cause" in this)) {
          const cause = options.cause;
          this.cause = cause;
          if ("stack" in cause) {
            this.stack = this.stack + "\nCAUSE: " + cause.stack;
          }
        }
      }
    }
    errorClasses[name] = CustomErrorClass;
    return CustomErrorClass;
  };
  function isObject$1(value) {
    return typeof value === "object";
  }
  const deserializeError = (object) => {
    if (object && typeof object === "object") {
      try {
        if (typeof object.message === "string") {
          const msg = JSON.parse(object.message);
          if (msg.message && msg.name) {
            object = msg;
          }
        }
      } catch (e) {
      }
      let error2;
      if (typeof object.name === "string") {
        const { name } = object;
        const des = deserializers[name];
        if (des) {
          error2 = des(object);
        } else {
          let constructor = name === "Error" ? Error : errorClasses[name];
          if (!constructor) {
            console.warn("deserializing an unknown class '" + name + "'");
            constructor = createCustomErrorClass(name);
          }
          error2 = Object.create(constructor.prototype);
          try {
            for (const prop in object) {
              if (object.hasOwnProperty(prop)) {
                error2[prop] = object[prop];
              }
            }
          } catch (e) {
          }
        }
      } else {
        if (typeof object.message === "string") {
          error2 = new Error(object.message);
        }
      }
      if (error2 && !error2.stack && Error.captureStackTrace) {
        Error.captureStackTrace(error2, deserializeError);
      }
      return error2;
    }
    return new Error(String(object));
  };
  const serializeError = (value) => {
    if (!value)
      return value;
    if (typeof value === "object") {
      return destroyCircular(value, []);
    }
    if (typeof value === "function") {
      return `[Function: ${value.name || "anonymous"}]`;
    }
    return value;
  };
  function destroyCircular(from, seen) {
    const to = {};
    seen.push(from);
    for (const key2 of Object.keys(from)) {
      const value = from[key2];
      if (typeof value === "function") {
        continue;
      }
      if (!value || typeof value !== "object") {
        to[key2] = value;
        continue;
      }
      if (seen.indexOf(from[key2]) === -1) {
        to[key2] = destroyCircular(from[key2], seen.slice(0));
        continue;
      }
      to[key2] = "[Circular]";
    }
    if (typeof from.name === "string") {
      to.name = from.name;
    }
    if (typeof from.message === "string") {
      to.message = from.message;
    }
    if (typeof from.stack === "string") {
      to.stack = from.stack;
    }
    return to;
  }
  const AccountNameRequiredError = createCustomErrorClass("AccountNameRequired");
  const AccountNotSupported = createCustomErrorClass("AccountNotSupported");
  const AccountAwaitingSendPendingOperations = createCustomErrorClass("AccountAwaitingSendPendingOperations");
  const AmountRequired = createCustomErrorClass("AmountRequired");
  const BluetoothRequired = createCustomErrorClass("BluetoothRequired");
  const BtcUnmatchedApp = createCustomErrorClass("BtcUnmatchedApp");
  const CantOpenDevice = createCustomErrorClass("CantOpenDevice");
  const CashAddrNotSupported = createCustomErrorClass("CashAddrNotSupported");
  const ClaimRewardsFeesWarning = createCustomErrorClass("ClaimRewardsFeesWarning");
  const CurrencyNotSupported = createCustomErrorClass("CurrencyNotSupported");
  const DeviceAppVerifyNotSupported = createCustomErrorClass("DeviceAppVerifyNotSupported");
  const DeviceGenuineSocketEarlyClose = createCustomErrorClass("DeviceGenuineSocketEarlyClose");
  const DeviceNotGenuineError = createCustomErrorClass("DeviceNotGenuine");
  const DeviceOnDashboardExpected = createCustomErrorClass("DeviceOnDashboardExpected");
  const DeviceOnDashboardUnexpected = createCustomErrorClass("DeviceOnDashboardUnexpected");
  const DeviceInOSUExpected = createCustomErrorClass("DeviceInOSUExpected");
  const DeviceHalted = createCustomErrorClass("DeviceHalted");
  const DeviceNameInvalid = createCustomErrorClass("DeviceNameInvalid");
  const DeviceSocketFail = createCustomErrorClass("DeviceSocketFail");
  const DeviceSocketNoBulkStatus = createCustomErrorClass("DeviceSocketNoBulkStatus");
  const DeviceNeedsRestart = createCustomErrorClass("DeviceSocketNoBulkStatus");
  const UnresponsiveDeviceError = createCustomErrorClass("UnresponsiveDeviceError");
  const DisconnectedDevice = createCustomErrorClass("DisconnectedDevice");
  const DisconnectedDeviceDuringOperation = createCustomErrorClass("DisconnectedDeviceDuringOperation");
  const DeviceExtractOnboardingStateError = createCustomErrorClass("DeviceExtractOnboardingStateError");
  const DeviceOnboardingStatePollingError = createCustomErrorClass("DeviceOnboardingStatePollingError");
  const EnpointConfigError = createCustomErrorClass("EnpointConfig");
  const EthAppPleaseEnableContractData$1 = createCustomErrorClass("EthAppPleaseEnableContractData");
  const FeeEstimationFailed = createCustomErrorClass("FeeEstimationFailed");
  const FirmwareNotRecognized = createCustomErrorClass("FirmwareNotRecognized");
  const HardResetFail = createCustomErrorClass("HardResetFail");
  const InvalidXRPTag = createCustomErrorClass("InvalidXRPTag");
  const InvalidAddress = createCustomErrorClass("InvalidAddress");
  const InvalidNonce = createCustomErrorClass("InvalidNonce");
  const InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass("InvalidAddressBecauseDestinationIsAlsoSource");
  const LatestMCUInstalledError = createCustomErrorClass("LatestMCUInstalledError");
  const UnknownMCU = createCustomErrorClass("UnknownMCU");
  const LedgerAPIError = createCustomErrorClass("LedgerAPIError");
  const LedgerAPIErrorWithMessage = createCustomErrorClass("LedgerAPIErrorWithMessage");
  const LedgerAPINotAvailable = createCustomErrorClass("LedgerAPINotAvailable");
  const ManagerAppAlreadyInstalledError = createCustomErrorClass("ManagerAppAlreadyInstalled");
  const ManagerAppRelyOnBTCError = createCustomErrorClass("ManagerAppRelyOnBTC");
  const ManagerAppDepInstallRequired = createCustomErrorClass("ManagerAppDepInstallRequired");
  const ManagerAppDepUninstallRequired = createCustomErrorClass("ManagerAppDepUninstallRequired");
  const ManagerDeviceLockedError = createCustomErrorClass("ManagerDeviceLocked");
  const ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass("ManagerFirmwareNotEnoughSpace");
  const ManagerNotEnoughSpaceError = createCustomErrorClass("ManagerNotEnoughSpace");
  const ManagerUninstallBTCDep = createCustomErrorClass("ManagerUninstallBTCDep");
  const NetworkDown = createCustomErrorClass("NetworkDown");
  const NetworkError = createCustomErrorClass("NetworkError");
  const NoAddressesFound = createCustomErrorClass("NoAddressesFound");
  const NotEnoughBalance = createCustomErrorClass("NotEnoughBalance");
  const NotEnoughBalanceSwap = createCustomErrorClass("NotEnoughBalanceSwap");
  const NotEnoughBalanceToDelegate = createCustomErrorClass("NotEnoughBalanceToDelegate");
  const NotEnoughBalanceInParentAccount = createCustomErrorClass("NotEnoughBalanceInParentAccount");
  const NotEnoughSpendableBalance = createCustomErrorClass("NotEnoughSpendableBalance");
  const NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass("NotEnoughBalanceBecauseDestinationNotCreated");
  const NoAccessToCamera = createCustomErrorClass("NoAccessToCamera");
  const NotEnoughGas = createCustomErrorClass("NotEnoughGas");
  const NotEnoughGasSwap = createCustomErrorClass("NotEnoughGasSwap");
  const TronEmptyAccount = createCustomErrorClass("TronEmptyAccount");
  const MaybeKeepTronAccountAlive = createCustomErrorClass("MaybeKeepTronAccountAlive");
  const NotSupportedLegacyAddress = createCustomErrorClass("NotSupportedLegacyAddress");
  const GasLessThanEstimate = createCustomErrorClass("GasLessThanEstimate");
  const PriorityFeeTooLow = createCustomErrorClass("PriorityFeeTooLow");
  const PriorityFeeTooHigh = createCustomErrorClass("PriorityFeeTooHigh");
  const PriorityFeeHigherThanMaxFee = createCustomErrorClass("PriorityFeeHigherThanMaxFee");
  const MaxFeeTooLow = createCustomErrorClass("MaxFeeTooLow");
  const PasswordsDontMatchError = createCustomErrorClass("PasswordsDontMatch");
  const PasswordIncorrectError = createCustomErrorClass("PasswordIncorrect");
  const RecommendSubAccountsToEmpty = createCustomErrorClass("RecommendSubAccountsToEmpty");
  const RecommendUndelegation = createCustomErrorClass("RecommendUndelegation");
  const TimeoutTagged = createCustomErrorClass("TimeoutTagged");
  const UnexpectedBootloader = createCustomErrorClass("UnexpectedBootloader");
  const MCUNotGenuineToDashboard = createCustomErrorClass("MCUNotGenuineToDashboard");
  const RecipientRequired = createCustomErrorClass("RecipientRequired");
  const UnavailableTezosOriginatedAccountReceive = createCustomErrorClass("UnavailableTezosOriginatedAccountReceive");
  const UnavailableTezosOriginatedAccountSend = createCustomErrorClass("UnavailableTezosOriginatedAccountSend");
  const UpdateFetchFileFail = createCustomErrorClass("UpdateFetchFileFail");
  const UpdateIncorrectHash = createCustomErrorClass("UpdateIncorrectHash");
  const UpdateIncorrectSig = createCustomErrorClass("UpdateIncorrectSig");
  const UpdateYourApp = createCustomErrorClass("UpdateYourApp");
  const UserRefusedDeviceNameChange = createCustomErrorClass("UserRefusedDeviceNameChange");
  const UserRefusedAddress = createCustomErrorClass("UserRefusedAddress");
  const UserRefusedFirmwareUpdate = createCustomErrorClass("UserRefusedFirmwareUpdate");
  const UserRefusedAllowManager = createCustomErrorClass("UserRefusedAllowManager");
  const UserRefusedOnDevice = createCustomErrorClass("UserRefusedOnDevice");
  const PinNotSet = createCustomErrorClass("PinNotSet");
  const ExpertModeRequired = createCustomErrorClass("ExpertModeRequired");
  const TransportOpenUserCancelled = createCustomErrorClass("TransportOpenUserCancelled");
  const TransportInterfaceNotAvailable = createCustomErrorClass("TransportInterfaceNotAvailable");
  const TransportRaceCondition = createCustomErrorClass("TransportRaceCondition");
  const TransportWebUSBGestureRequired = createCustomErrorClass("TransportWebUSBGestureRequired");
  const TransactionHasBeenValidatedError = createCustomErrorClass("TransactionHasBeenValidatedError");
  const TransportExchangeTimeoutError = createCustomErrorClass("TransportExchangeTimeoutError");
  const DeviceShouldStayInApp = createCustomErrorClass("DeviceShouldStayInApp");
  const WebsocketConnectionError = createCustomErrorClass("WebsocketConnectionError");
  const WebsocketConnectionFailed = createCustomErrorClass("WebsocketConnectionFailed");
  const WrongDeviceForAccount = createCustomErrorClass("WrongDeviceForAccount");
  const WrongDeviceForAccountPayout = createCustomErrorClass("WrongDeviceForAccountPayout");
  const WrongDeviceForAccountRefund = createCustomErrorClass("WrongDeviceForAccountRefund");
  const WrongAppForCurrency = createCustomErrorClass("WrongAppForCurrency");
  const ETHAddressNonEIP = createCustomErrorClass("ETHAddressNonEIP");
  const CantScanQRCode = createCustomErrorClass("CantScanQRCode");
  const FeeNotLoaded = createCustomErrorClass("FeeNotLoaded");
  const FeeNotLoadedSwap = createCustomErrorClass("FeeNotLoadedSwap");
  const FeeRequired = createCustomErrorClass("FeeRequired");
  const FeeTooHigh = createCustomErrorClass("FeeTooHigh");
  const PendingOperation = createCustomErrorClass("PendingOperation");
  const SyncError = createCustomErrorClass("SyncError");
  const PairingFailed = createCustomErrorClass("PairingFailed");
  const PeerRemovedPairing = createCustomErrorClass("PeerRemovedPairing");
  const GenuineCheckFailed = createCustomErrorClass("GenuineCheckFailed");
  const LedgerAPI4xx = createCustomErrorClass("LedgerAPI4xx");
  const LedgerAPI5xx = createCustomErrorClass("LedgerAPI5xx");
  const FirmwareOrAppUpdateRequired = createCustomErrorClass("FirmwareOrAppUpdateRequired");
  const ReplacementTransactionUnderpriced = createCustomErrorClass("ReplacementTransactionUnderpriced");
  const OpReturnDataSizeLimit = createCustomErrorClass("OpReturnSizeLimit");
  const DustLimit = createCustomErrorClass("DustLimit");
  const LanguageNotFound = createCustomErrorClass("LanguageNotFound");
  const NoDBPathGiven = createCustomErrorClass("NoDBPathGiven");
  const DBWrongPassword = createCustomErrorClass("DBWrongPassword");
  const DBNotReset = createCustomErrorClass("DBNotReset");
  const SequenceNumberError = createCustomErrorClass("SequenceNumberError");
  const DisabledTransactionBroadcastError = createCustomErrorClass("DisabledTransactionBroadcastError");
  var HwTransportErrorType;
  (function(HwTransportErrorType2) {
    HwTransportErrorType2["Unknown"] = "Unknown";
    HwTransportErrorType2["LocationServicesDisabled"] = "LocationServicesDisabled";
    HwTransportErrorType2["LocationServicesUnauthorized"] = "LocationServicesUnauthorized";
    HwTransportErrorType2["BluetoothScanStartFailed"] = "BluetoothScanStartFailed";
  })(HwTransportErrorType || (HwTransportErrorType = {}));
  class HwTransportError extends Error {
    constructor(type, message) {
      super(message);
      this.name = "HwTransportError";
      this.type = type;
      Object.setPrototypeOf(this, HwTransportError.prototype);
    }
  }
  class TransportError extends Error {
    constructor(message, id2) {
      const name = "TransportError";
      super(message || name);
      this.name = name;
      this.message = message;
      this.stack = new Error(message).stack;
      this.id = id2;
    }
  }
  addCustomErrorDeserializer("TransportError", (e) => new TransportError(e.message, e.id));
  const StatusCodes = {
    ACCESS_CONDITION_NOT_FULFILLED: 38916,
    ALGORITHM_NOT_SUPPORTED: 38020,
    CLA_NOT_SUPPORTED: 28160,
    CODE_BLOCKED: 38976,
    CODE_NOT_INITIALIZED: 38914,
    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 27009,
    CONDITIONS_OF_USE_NOT_SATISFIED: 27013,
    CONTRADICTION_INVALIDATION: 38928,
    CONTRADICTION_SECRET_CODE_STATUS: 38920,
    DEVICE_IN_RECOVERY_MODE: 26159,
    CUSTOM_IMAGE_EMPTY: 26158,
    FILE_ALREADY_EXISTS: 27273,
    FILE_NOT_FOUND: 37892,
    GP_AUTH_FAILED: 25344,
    HALTED: 28586,
    INCONSISTENT_FILE: 37896,
    INCORRECT_DATA: 27264,
    INCORRECT_LENGTH: 26368,
    INCORRECT_P1_P2: 27392,
    INS_NOT_SUPPORTED: 27904,
    DEVICE_NOT_ONBOARDED: 27911,
    DEVICE_NOT_ONBOARDED_2: 26129,
    INVALID_KCV: 38021,
    INVALID_OFFSET: 37890,
    LICENSING: 28482,
    LOCKED_DEVICE: 21781,
    MAX_VALUE_REACHED: 38992,
    MEMORY_PROBLEM: 37440,
    MISSING_CRITICAL_PARAMETER: 26624,
    NO_EF_SELECTED: 37888,
    NOT_ENOUGH_MEMORY_SPACE: 27268,
    OK: 36864,
    PIN_REMAINING_ATTEMPTS: 25536,
    REFERENCED_DATA_NOT_FOUND: 27272,
    SECURITY_STATUS_NOT_SATISFIED: 27010,
    TECHNICAL_PROBLEM: 28416,
    UNKNOWN_APDU: 27906,
    USER_REFUSED_ON_DEVICE: 21761,
    NOT_ENOUGH_SPACE: 20738,
    APP_NOT_FOUND_OR_INVALID_CONTEXT: 20771,
    INVALID_APP_NAME_LENGTH: 26378,
    GEN_AES_KEY_FAILED: 21529,
    INTERNAL_CRYPTO_OPERATION_FAILED: 21530,
    INTERNAL_COMPUTE_AES_CMAC_FAILED: 21531,
    ENCRYPT_APP_STORAGE_FAILED: 21532,
    INVALID_BACKUP_STATE: 26178,
    PIN_NOT_SET: 21762,
    INVALID_BACKUP_LENGTH: 26419,
    INVALID_RESTORE_STATE: 26179,
    INVALID_CHUNK_LENGTH: 26420,
    INVALID_BACKUP_HEADER: 26698,
    // Not documented:
    TRUSTCHAIN_WRONG_SEED: 45063
  };
  function getAltStatusMessage(code2) {
    switch (code2) {
      case 26368:
        return "Incorrect length";
      case 26624:
        return "Missing critical parameter";
      case 27010:
        return "Security not satisfied (dongle locked or have invalid access rights)";
      case 27013:
        return "Condition of use not satisfied (denied by the user?)";
      case 27264:
        return "Invalid data received";
      case 27392:
        return "Invalid parameter received";
      case 21781:
        return "Locked device";
    }
    if (28416 <= code2 && code2 <= 28671) {
      return "Internal error, please report";
    }
  }
  class TransportStatusError extends Error {
    /**
     * @param statusCode The error status code coming from a Transport implementation
     * @param options containing:
     *  - canBeMappedToChildError: enable the mapping of TransportStatusError to an error extending/inheriting from it
     *  . Ex: LockedDeviceError. Default to true.
     */
    constructor(statusCode, { canBeMappedToChildError = true } = {}) {
      const statusText = Object.keys(StatusCodes).find((k) => StatusCodes[k] === statusCode) || "UNKNOWN_ERROR";
      const smsg = getAltStatusMessage(statusCode) || statusText;
      const statusCodeStr = statusCode.toString(16);
      const message = `Ledger device: ${smsg} (0x${statusCodeStr})`;
      super(message);
      this.name = "TransportStatusError";
      this.statusCode = statusCode;
      this.statusText = statusText;
      Object.setPrototypeOf(this, TransportStatusError.prototype);
      if (canBeMappedToChildError && statusCode === StatusCodes.LOCKED_DEVICE) {
        return new LockedDeviceError(message);
      }
    }
  }
  class LockedDeviceError extends TransportStatusError {
    constructor(message) {
      super(StatusCodes.LOCKED_DEVICE, { canBeMappedToChildError: false });
      if (message) {
        this.message = message;
      }
      this.name = "LockedDeviceError";
      Object.setPrototypeOf(this, LockedDeviceError.prototype);
    }
  }
  addCustomErrorDeserializer("TransportStatusError", (e) => new TransportStatusError(e.statusCode));
  const libEs$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    AccountAwaitingSendPendingOperations,
    AccountNameRequiredError,
    AccountNotSupported,
    AmountRequired,
    BluetoothRequired,
    BtcUnmatchedApp,
    CantOpenDevice,
    CantScanQRCode,
    CashAddrNotSupported,
    ClaimRewardsFeesWarning,
    CurrencyNotSupported,
    DBNotReset,
    DBWrongPassword,
    DeviceAppVerifyNotSupported,
    DeviceExtractOnboardingStateError,
    DeviceGenuineSocketEarlyClose,
    DeviceHalted,
    DeviceInOSUExpected,
    DeviceNameInvalid,
    DeviceNeedsRestart,
    DeviceNotGenuineError,
    DeviceOnDashboardExpected,
    DeviceOnDashboardUnexpected,
    DeviceOnboardingStatePollingError,
    DeviceShouldStayInApp,
    DeviceSocketFail,
    DeviceSocketNoBulkStatus,
    DisabledTransactionBroadcastError,
    DisconnectedDevice,
    DisconnectedDeviceDuringOperation,
    DustLimit,
    ETHAddressNonEIP,
    EnpointConfigError,
    EthAppPleaseEnableContractData: EthAppPleaseEnableContractData$1,
    ExpertModeRequired,
    FeeEstimationFailed,
    FeeNotLoaded,
    FeeNotLoadedSwap,
    FeeRequired,
    FeeTooHigh,
    FirmwareNotRecognized,
    FirmwareOrAppUpdateRequired,
    GasLessThanEstimate,
    GenuineCheckFailed,
    HardResetFail,
    HwTransportError,
    get HwTransportErrorType() {
      return HwTransportErrorType;
    },
    InvalidAddress,
    InvalidAddressBecauseDestinationIsAlsoSource,
    InvalidNonce,
    InvalidXRPTag,
    LanguageNotFound,
    LatestMCUInstalledError,
    LedgerAPI4xx,
    LedgerAPI5xx,
    LedgerAPIError,
    LedgerAPIErrorWithMessage,
    LedgerAPINotAvailable,
    LockedDeviceError,
    MCUNotGenuineToDashboard,
    ManagerAppAlreadyInstalledError,
    ManagerAppDepInstallRequired,
    ManagerAppDepUninstallRequired,
    ManagerAppRelyOnBTCError,
    ManagerDeviceLockedError,
    ManagerFirmwareNotEnoughSpaceError,
    ManagerNotEnoughSpaceError,
    ManagerUninstallBTCDep,
    MaxFeeTooLow,
    MaybeKeepTronAccountAlive,
    NetworkDown,
    NetworkError,
    NoAccessToCamera,
    NoAddressesFound,
    NoDBPathGiven,
    NotEnoughBalance,
    NotEnoughBalanceBecauseDestinationNotCreated,
    NotEnoughBalanceInParentAccount,
    NotEnoughBalanceSwap,
    NotEnoughBalanceToDelegate,
    NotEnoughGas,
    NotEnoughGasSwap,
    NotEnoughSpendableBalance,
    NotSupportedLegacyAddress,
    OpReturnDataSizeLimit,
    PairingFailed,
    PasswordIncorrectError,
    PasswordsDontMatchError,
    PeerRemovedPairing,
    PendingOperation,
    PinNotSet,
    PriorityFeeHigherThanMaxFee,
    PriorityFeeTooHigh,
    PriorityFeeTooLow,
    RecipientRequired,
    RecommendSubAccountsToEmpty,
    RecommendUndelegation,
    ReplacementTransactionUnderpriced,
    SequenceNumberError,
    StatusCodes,
    SyncError,
    TimeoutTagged,
    TransactionHasBeenValidatedError,
    TransportError,
    TransportExchangeTimeoutError,
    TransportInterfaceNotAvailable,
    TransportOpenUserCancelled,
    TransportRaceCondition,
    TransportStatusError,
    TransportWebUSBGestureRequired,
    TronEmptyAccount,
    UnavailableTezosOriginatedAccountReceive,
    UnavailableTezosOriginatedAccountSend,
    UnexpectedBootloader,
    UnknownMCU,
    UnresponsiveDeviceError,
    UpdateFetchFileFail,
    UpdateIncorrectHash,
    UpdateIncorrectSig,
    UpdateYourApp,
    UserRefusedAddress,
    UserRefusedAllowManager,
    UserRefusedDeviceNameChange,
    UserRefusedFirmwareUpdate,
    UserRefusedOnDevice,
    WebsocketConnectionError,
    WebsocketConnectionFailed,
    WrongAppForCurrency,
    WrongDeviceForAccount,
    WrongDeviceForAccountPayout,
    WrongDeviceForAccountRefund,
    addCustomErrorDeserializer,
    createCustomErrorClass,
    deserializeError,
    getAltStatusMessage,
    serializeError
  }, Symbol.toStringTag, { value: "Module" }));
  let id$1 = 0;
  const subscribers = [];
  const log = (type, message, data) => {
    const obj = {
      type,
      id: String(++id$1),
      date: /* @__PURE__ */ new Date()
    };
    if (message)
      obj.message = message;
    if (data)
      obj.data = data;
    dispatch(obj);
  };
  const trace = ({ type, message, data, context }) => {
    const obj = {
      type,
      id: String(++id$1),
      date: /* @__PURE__ */ new Date()
    };
    if (message)
      obj.message = message;
    if (data)
      obj.data = data;
    if (context)
      obj.context = context;
    dispatch(obj);
  };
  class LocalTracer {
    constructor(type, context) {
      this.type = type;
      this.context = context;
    }
    trace(message, data) {
      trace({
        type: this.type,
        message,
        data,
        context: this.context
      });
    }
    getContext() {
      return this.context;
    }
    setContext(context) {
      this.context = context;
    }
    updateContext(contextToAdd) {
      this.context = Object.assign(Object.assign({}, this.context), contextToAdd);
    }
    getType() {
      return this.type;
    }
    setType(type) {
      this.type = type;
    }
    /**
     * Create a new instance of the LocalTracer with an updated `type`
     *
     * It does not mutate the calling instance, but returns a new LocalTracer,
     * following a simple builder pattern.
     */
    withType(type) {
      return new LocalTracer(type, this.context);
    }
    /**
     * Create a new instance of the LocalTracer with a new `context`
     *
     * It does not mutate the calling instance, but returns a new LocalTracer,
     * following a simple builder pattern.
     *
     * @param context A TraceContext, that can undefined to reset the context
     */
    withContext(context) {
      return new LocalTracer(this.type, context);
    }
    /**
     * Create a new instance of the LocalTracer with an updated `context`,
     * on which an additional context is merged with the existing one.
     *
     * It does not mutate the calling instance, but returns a new LocalTracer,
     * following a simple builder pattern.
     */
    withUpdatedContext(contextToAdd) {
      return new LocalTracer(this.type, Object.assign(Object.assign({}, this.context), contextToAdd));
    }
  }
  const listen = (cb) => {
    subscribers.push(cb);
    return () => {
      const i2 = subscribers.indexOf(cb);
      if (i2 !== -1) {
        subscribers[i2] = subscribers[subscribers.length - 1];
        subscribers.pop();
      }
    };
  };
  function dispatch(log2) {
    for (let i2 = 0; i2 < subscribers.length; i2++) {
      try {
        subscribers[i2](log2);
      } catch (e) {
        console.error(e);
      }
    }
  }
  if (typeof window !== "undefined") {
    window.__ledgerLogsListen = listen;
  }
  const libEs = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    LocalTracer,
    listen,
    log,
    trace
  }, Symbol.toStringTag, { value: "Module" }));
  var __awaiter$3 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const DEFAULT_LOG_TYPE = "transport";
  class Transport {
    constructor({ context, logType } = {}) {
      this.exchangeTimeout = 3e4;
      this.unresponsiveTimeout = 15e3;
      this.deviceModel = null;
      this._events = new EventEmitter$1();
      this.send = (cla_1, ins_1, p1_1, p2_1, ...args_1) => __awaiter$3(this, [cla_1, ins_1, p1_1, p2_1, ...args_1], void 0, function* (cla, ins, p1, p2, data = Buffer2.alloc(0), statusList = [StatusCodes.OK], { abortTimeoutMs } = {}) {
        const tracer = this.tracer.withUpdatedContext({ function: "send" });
        if (data.length >= 256) {
          tracer.trace("data.length exceeded 256 bytes limit", { dataLength: data.length });
          throw new TransportError("data.length exceed 256 bytes limit. Got: " + data.length, "DataLengthTooBig");
        }
        tracer.trace("Starting an exchange", { abortTimeoutMs });
        const response = yield this.exchange(
          // The size of the data is added in 1 byte just before `data`
          Buffer2.concat([Buffer2.from([cla, ins, p1, p2]), Buffer2.from([data.length]), data]),
          { abortTimeoutMs }
        );
        tracer.trace("Received response from exchange");
        const sw = response.readUInt16BE(response.length - 2);
        if (!statusList.some((s2) => s2 === sw)) {
          throw new TransportStatusError(sw);
        }
        return response;
      });
      this._appAPIlock = null;
      this.tracer = new LocalTracer(logType !== null && logType !== void 0 ? logType : DEFAULT_LOG_TYPE, context);
    }
    /**
     * Send data to the device using a low level API.
     * It's recommended to use the "send" method for a higher level API.
     * @param {Buffer} apdu - The data to send.
     * @param {Object} options - Contains optional options for the exchange function
     *  - abortTimeoutMs: stop the exchange after a given timeout. Another timeout exists
     *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.
     * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.
     */
    exchange(_apdu, { abortTimeoutMs: _abortTimeoutMs } = {}) {
      throw new Error("exchange not implemented");
    }
    /**
     * Send apdus in batch to the device using a low level API.
     * The default implementation is to call exchange for each apdu.
     * @param {Array<Buffer>} apdus - array of apdus to send.
     * @param {Observer<Buffer>} observer - an observer that will receive the response of each apdu.
     * @returns {Subscription} A Subscription object on which you can call ".unsubscribe()" to stop sending apdus.
     */
    exchangeBulk(apdus, observer) {
      let unsubscribed = false;
      const unsubscribe = () => {
        unsubscribed = true;
      };
      const main = () => __awaiter$3(this, void 0, void 0, function* () {
        if (unsubscribed)
          return;
        for (const apdu of apdus) {
          const r2 = yield this.exchange(apdu);
          if (unsubscribed)
            return;
          const status = r2.readUInt16BE(r2.length - 2);
          if (status !== StatusCodes.OK) {
            throw new TransportStatusError(status);
          }
          observer.next(r2);
        }
      });
      main().then(() => !unsubscribed && observer.complete(), (e) => !unsubscribed && observer.error(e));
      return { unsubscribe };
    }
    /**
     * Set the "scramble key" for the next data exchanges with the device.
     * Each app can have a different scramble key and it is set internally during instantiation.
     * @param {string} key - The scramble key to set.
     * deprecated This method is no longer needed for modern transports and should be migrated away from.
     * no @ before deprecated as it breaks documentationjs on version 14.0.2
     * https://github.com/documentationjs/documentation/issues/1596
     */
    setScrambleKey(_key) {
    }
    /**
     * Close the connection with the device.
     *
     * Note: for certain transports (hw-transport-node-hid-singleton for ex), once the promise resolved,
     * the transport instance is actually still cached, and the device is disconnected only after a defined timeout.
     * But for the consumer of the Transport, this does not matter and it can consider the transport to be closed.
     *
     * @returns {Promise<void>} A promise that resolves when the transport is closed.
     */
    close() {
      return Promise.resolve();
    }
    /**
     * Listen for an event on the transport instance.
     * Transport implementations may have specific events. Common events include:
     * "disconnect" : triggered when the transport is disconnected.
     * @param {string} eventName - The name of the event to listen for.
     * @param {(...args: Array<any>) => any} cb - The callback function to be invoked when the event occurs.
     */
    on(eventName, cb) {
      this._events.on(eventName, cb);
    }
    /**
     * Stop listening to an event on an instance of transport.
     */
    off(eventName, cb) {
      this._events.removeListener(eventName, cb);
    }
    emit(event, ...args) {
      this._events.emit(event, ...args);
    }
    /**
     * Enable or not logs of the binary exchange
     */
    setDebugMode() {
      console.warn("setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.");
    }
    /**
     * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)
     */
    setExchangeTimeout(exchangeTimeout) {
      this.exchangeTimeout = exchangeTimeout;
    }
    /**
     * Define the delay before emitting "unresponsive" on an exchange that does not respond
     */
    setExchangeUnresponsiveTimeout(unresponsiveTimeout) {
      this.unresponsiveTimeout = unresponsiveTimeout;
    }
    /**
     * create() allows to open the first descriptor available or
     * throw if there is none or if timeout is reached.
     * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)
     * @example
    TransportFoo.create().then(transport => ...)
     */
    static create(openTimeout = 3e3, listenTimeout) {
      return new Promise((resolve, reject) => {
        let found = false;
        const sub = this.listen({
          next: (e) => {
            found = true;
            if (sub)
              sub.unsubscribe();
            if (listenTimeoutId)
              clearTimeout(listenTimeoutId);
            this.open(e.descriptor, openTimeout).then(resolve, reject);
          },
          error: (e) => {
            if (listenTimeoutId)
              clearTimeout(listenTimeoutId);
            reject(e);
          },
          complete: () => {
            if (listenTimeoutId)
              clearTimeout(listenTimeoutId);
            if (!found) {
              reject(new TransportError(this.ErrorMessage_NoDeviceFound, "NoDeviceFound"));
            }
          }
        });
        const listenTimeoutId = listenTimeout ? setTimeout(() => {
          sub.unsubscribe();
          reject(new TransportError(this.ErrorMessage_ListenTimeout, "ListenTimeout"));
        }, listenTimeout) : null;
      });
    }
    /**
     * Wrapper to make an exchange "atomic" (blocking any other exchange)
     *
     * It also handles "unresponsiveness" by emitting "unresponsive" and "responsive" events.
     *
     * @param f The exchange job, using the transport to run
     * @returns a Promise resolving with the output of the given job
     */
    exchangeAtomicImpl(f2) {
      return __awaiter$3(this, void 0, void 0, function* () {
        const tracer = this.tracer.withUpdatedContext({
          function: "exchangeAtomicImpl",
          unresponsiveTimeout: this.unresponsiveTimeout
        });
        if (this.exchangeBusyPromise) {
          tracer.trace("Atomic exchange is already busy");
          throw new TransportRaceCondition("An action was already pending on the Ledger device. Please deny or reconnect.");
        }
        let resolveBusy;
        const busyPromise = new Promise((r2) => {
          resolveBusy = r2;
        });
        this.exchangeBusyPromise = busyPromise;
        let unresponsiveReached = false;
        const timeout = setTimeout(() => {
          tracer.trace(`Timeout reached, emitting Transport event "unresponsive"`, {
            unresponsiveTimeout: this.unresponsiveTimeout
          });
          unresponsiveReached = true;
          this.emit("unresponsive");
        }, this.unresponsiveTimeout);
        try {
          const res = yield f2();
          if (unresponsiveReached) {
            tracer.trace("Device was unresponsive, emitting responsive");
            this.emit("responsive");
          }
          return res;
        } finally {
          tracer.trace("Finalize, clearing busy guard");
          clearTimeout(timeout);
          if (resolveBusy)
            resolveBusy();
          this.exchangeBusyPromise = null;
        }
      });
    }
    decorateAppAPIMethods(self2, methods, scrambleKey) {
      for (const methodName of methods) {
        self2[methodName] = this.decorateAppAPIMethod(methodName, self2[methodName], self2, scrambleKey);
      }
    }
    decorateAppAPIMethod(methodName, f2, ctx, scrambleKey) {
      return (...args) => __awaiter$3(this, void 0, void 0, function* () {
        const { _appAPIlock } = this;
        if (_appAPIlock) {
          return Promise.reject(new TransportError("Ledger Device is busy (lock " + _appAPIlock + ")", "TransportLocked"));
        }
        try {
          this._appAPIlock = methodName;
          this.setScrambleKey(scrambleKey);
          return yield f2.apply(ctx, args);
        } finally {
          this._appAPIlock = null;
        }
      });
    }
    /**
     * Sets the context used by the logging/tracing mechanism
     *
     * Useful when re-using (cached) the same Transport instance,
     * but with a new tracing context.
     *
     * @param context A TraceContext, that can undefined to reset the context
     */
    setTraceContext(context) {
      this.tracer = this.tracer.withContext(context);
    }
    /**
     * Updates the context used by the logging/tracing mechanism
     *
     * The update only overrides the key-value that are already defined in the current context.
     *
     * @param contextToAdd A TraceContext that will be added to the current context
     */
    updateTraceContext(contextToAdd) {
      this.tracer.updateContext(contextToAdd);
    }
    /**
     * Gets the tracing context of the transport instance
     */
    getTraceContext() {
      return this.tracer.getContext();
    }
  }
  Transport.ErrorMessage_ListenTimeout = "No Ledger device found (timeout)";
  Transport.ErrorMessage_NoDeviceFound = "No Ledger device found";
  const Transport$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    StatusCodes,
    TransportError,
    TransportStatusError,
    default: Transport,
    getAltStatusMessage
  }, Symbol.toStringTag, { value: "Module" }));
  const Tag = 5;
  function asUInt16BE(value) {
    const b = Buffer2.alloc(2);
    b.writeUInt16BE(value, 0);
    return b;
  }
  const initialAcc = {
    data: Buffer2.alloc(0),
    dataLength: 0,
    sequence: 0
  };
  const createHIDframing = (channel, packetSize) => {
    return {
      /**
       * Frames/encodes an APDU message into HID USB packets/frames
       *
       * @param apdu The APDU message to send, in a Buffer containing [cla, ins, p1, p2, data length, data(if not empty)]
       * @returns an array of HID USB frames ready to be sent
       */
      makeBlocks(apdu) {
        let data = Buffer2.concat([asUInt16BE(apdu.length), apdu]);
        const blockSize = packetSize - 5;
        const nbBlocks = Math.ceil(data.length / blockSize);
        data = Buffer2.concat([data, Buffer2.alloc(nbBlocks * blockSize - data.length + 1).fill(0)]);
        const blocks = [];
        for (let i2 = 0; i2 < nbBlocks; i2++) {
          const head = Buffer2.alloc(5);
          head.writeUInt16BE(channel, 0);
          head.writeUInt8(Tag, 2);
          head.writeUInt16BE(i2, 3);
          const chunk = data.slice(i2 * blockSize, (i2 + 1) * blockSize);
          blocks.push(Buffer2.concat([head, chunk]));
        }
        return blocks;
      },
      /**
       * Reduces HID USB packets/frames to one response.
       *
       * @param acc The value resulting from (accumulating) the previous call of reduceResponse.
       *   On first call initialized to `initialAcc`. The accumulator enables handling multi-frames messages.
       * @param chunk Current chunk to reduce into accumulator
       * @returns An accumulator value updated with the current chunk
       */
      reduceResponse(acc, chunk) {
        let { data, dataLength, sequence } = acc || initialAcc;
        if (chunk.readUInt16BE(0) !== channel) {
          throw new TransportError("Invalid channel", "InvalidChannel");
        }
        if (chunk.readUInt8(2) !== Tag) {
          throw new TransportError("Invalid tag", "InvalidTag");
        }
        if (chunk.readUInt16BE(3) !== sequence) {
          throw new TransportError("Invalid sequence", "InvalidSequence");
        }
        if (!acc) {
          dataLength = chunk.readUInt16BE(5);
        }
        sequence++;
        const chunkData = chunk.slice(acc ? 5 : 7);
        data = Buffer2.concat([data, chunkData]);
        if (data.length > dataLength) {
          data = data.slice(0, dataLength);
        }
        return {
          data,
          dataLength,
          sequence
        };
      },
      /**
       * Returns the response message that has been reduced from the HID USB frames
       *
       * @param acc The accumulator
       * @returns A Buffer containing the cleaned response message, or null if no response message, or undefined if the
       *   accumulator is incorrect (message length is not valid)
       */
      getReducedResult(acc) {
        if (acc && acc.dataLength === acc.data.length) {
          return acc.data;
        }
      }
    };
  };
  var re$2 = { exports: {} };
  const SEMVER_SPEC_VERSION = "2.0.0";
  const MAX_LENGTH$1 = 256;
  const MAX_SAFE_INTEGER$3 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
  9007199254740991;
  const MAX_SAFE_COMPONENT_LENGTH = 16;
  const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH$1 - 6;
  const RELEASE_TYPES = [
    "major",
    "premajor",
    "minor",
    "preminor",
    "patch",
    "prepatch",
    "prerelease"
  ];
  var constants$2 = {
    MAX_LENGTH: MAX_LENGTH$1,
    MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH,
    MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$3,
    RELEASE_TYPES,
    SEMVER_SPEC_VERSION,
    FLAG_INCLUDE_PRERELEASE: 1,
    FLAG_LOOSE: 2
  };
  var define_process_env_default = {};
  const debug$1 = typeof process === "object" && define_process_env_default && define_process_env_default.NODE_DEBUG && /\bsemver\b/i.test(define_process_env_default.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
  };
  var debug_1$1 = debug$1;
  (function(module, exports) {
    const {
      MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH2,
      MAX_SAFE_BUILD_LENGTH: MAX_SAFE_BUILD_LENGTH2,
      MAX_LENGTH: MAX_LENGTH2
    } = constants$2;
    const debug2 = debug_1$1;
    exports = module.exports = {};
    const re2 = exports.re = [];
    const safeRe = exports.safeRe = [];
    const src = exports.src = [];
    const t2 = exports.t = {};
    let R2 = 0;
    const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    const safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH2],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH2]
    ];
    const makeSafeRegex = (value) => {
      for (const [token, max2] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max2}}`).split(`${token}+`).join(`${token}{1,${max2}}`);
      }
      return value;
    };
    const createToken = (name, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R2++;
      debug2(name, index, value);
      t2[name] = index;
      src[index] = value;
      re2[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t2.NUMERICIDENTIFIER]}|${src[t2.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t2.NUMERICIDENTIFIERLOOSE]}|${src[t2.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t2.PRERELEASEIDENTIFIER]}(?:\\.${src[t2.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t2.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t2.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t2.BUILDIDENTIFIER]}(?:\\.${src[t2.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t2.MAINVERSION]}${src[t2.PRERELEASE]}?${src[t2.BUILD]}?`);
    createToken("FULL", `^${src[t2.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t2.MAINVERSIONLOOSE]}${src[t2.PRERELEASELOOSE]}?${src[t2.BUILD]}?`);
    createToken("LOOSE", `^${src[t2.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t2.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t2.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:${src[t2.PRERELEASE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:${src[t2.PRERELEASELOOSE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH2}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}}))?`);
    createToken("COERCE", `${src[t2.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src[t2.COERCEPLAIN] + `(?:${src[t2.PRERELEASE]})?(?:${src[t2.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t2.COERCE], true);
    createToken("COERCERTLFULL", src[t2.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t2.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t2.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t2.GTLT]}\\s*(${src[t2.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]}|${src[t2.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t2.XRANGEPLAIN]})\\s+-\\s+(${src[t2.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t2.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t2.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  })(re$2, re$2.exports);
  var reExports = re$2.exports;
  const looseOption = Object.freeze({ loose: true });
  const emptyOpts = Object.freeze({});
  const parseOptions$1 = (options) => {
    if (!options) {
      return emptyOpts;
    }
    if (typeof options !== "object") {
      return looseOption;
    }
    return options;
  };
  var parseOptions_1 = parseOptions$1;
  const numeric = /^[0-9]+$/;
  const compareIdentifiers$1 = (a, b) => {
    const anum2 = numeric.test(a);
    const bnum = numeric.test(b);
    if (anum2 && bnum) {
      a = +a;
      b = +b;
    }
    return a === b ? 0 : anum2 && !bnum ? -1 : bnum && !anum2 ? 1 : a < b ? -1 : 1;
  };
  const rcompareIdentifiers = (a, b) => compareIdentifiers$1(b, a);
  var identifiers$1 = {
    compareIdentifiers: compareIdentifiers$1,
    rcompareIdentifiers
  };
  const debug = debug_1$1;
  const { MAX_LENGTH, MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$2 } = constants$2;
  const { safeRe: re$1, t: t$1 } = reExports;
  const parseOptions = parseOptions_1;
  const { compareIdentifiers } = identifiers$1;
  let SemVer$d = class SemVer2 {
    constructor(version2, options) {
      options = parseOptions(options);
      if (version2 instanceof SemVer2) {
        if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
          return version2;
        } else {
          version2 = version2.version;
        }
      } else if (typeof version2 !== "string") {
        throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version2}".`);
      }
      if (version2.length > MAX_LENGTH) {
        throw new TypeError(
          `version is longer than ${MAX_LENGTH} characters`
        );
      }
      debug("SemVer", version2, options);
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      const m = version2.trim().match(options.loose ? re$1[t$1.LOOSE] : re$1[t$1.FULL]);
      if (!m) {
        throw new TypeError(`Invalid Version: ${version2}`);
      }
      this.raw = version2;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER$2 || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER$2 || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER$2 || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map((id2) => {
          if (/^[0-9]+$/.test(id2)) {
            const num = +id2;
            if (num >= 0 && num < MAX_SAFE_INTEGER$2) {
              return num;
            }
          }
          return id2;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    format() {
      this.version = `${this.major}.${this.minor}.${this.patch}`;
      if (this.prerelease.length) {
        this.version += `-${this.prerelease.join(".")}`;
      }
      return this.version;
    }
    toString() {
      return this.version;
    }
    compare(other) {
      debug("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer2)) {
        if (typeof other === "string" && other === this.version) {
          return 0;
        }
        other = new SemVer2(other, this.options);
      }
      if (other.version === this.version) {
        return 0;
      }
      return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
      if (!(other instanceof SemVer2)) {
        other = new SemVer2(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
      if (!(other instanceof SemVer2)) {
        other = new SemVer2(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      let i2 = 0;
      do {
        const a = this.prerelease[i2];
        const b = other.prerelease[i2];
        debug("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    }
    compareBuild(other) {
      if (!(other instanceof SemVer2)) {
        other = new SemVer2(other, this.options);
      }
      let i2 = 0;
      do {
        const a = this.build[i2];
        const b = other.build[i2];
        debug("build compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    }
    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier, identifierBase);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier, identifierBase);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier, identifierBase);
          this.inc("pre", identifier, identifierBase);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier, identifierBase);
          }
          this.inc("pre", identifier, identifierBase);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre": {
          const base2 = Number(identifierBase) ? 1 : 0;
          if (!identifier && identifierBase === false) {
            throw new Error("invalid increment argument: identifier is empty");
          }
          if (this.prerelease.length === 0) {
            this.prerelease = [base2];
          } else {
            let i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              if (identifier === this.prerelease.join(".") && identifierBase === false) {
                throw new Error("invalid increment argument: identifier already exists");
              }
              this.prerelease.push(base2);
            }
          }
          if (identifier) {
            let prerelease2 = [identifier, base2];
            if (identifierBase === false) {
              prerelease2 = [identifier];
            }
            if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = prerelease2;
              }
            } else {
              this.prerelease = prerelease2;
            }
          }
          break;
        }
        default:
          throw new Error(`invalid increment argument: ${release}`);
      }
      this.raw = this.format();
      if (this.build.length) {
        this.raw += `+${this.build.join(".")}`;
      }
      return this;
    }
  };
  var semver$2 = SemVer$d;
  const SemVer$c = semver$2;
  const parse$8 = (version2, options, throwErrors = false) => {
    if (version2 instanceof SemVer$c) {
      return version2;
    }
    try {
      return new SemVer$c(version2, options);
    } catch (er) {
      if (!throwErrors) {
        return null;
      }
      throw er;
    }
  };
  var parse_1 = parse$8;
  const parse$7 = parse_1;
  const valid$2 = (version2, options) => {
    const v = parse$7(version2, options);
    return v ? v.version : null;
  };
  var valid_1 = valid$2;
  const parse$6 = parse_1;
  const clean$1 = (version2, options) => {
    const s2 = parse$6(version2.trim().replace(/^[=v]+/, ""), options);
    return s2 ? s2.version : null;
  };
  var clean_1 = clean$1;
  const SemVer$b = semver$2;
  const inc$1 = (version2, release, options, identifier, identifierBase) => {
    if (typeof options === "string") {
      identifierBase = identifier;
      identifier = options;
      options = void 0;
    }
    try {
      return new SemVer$b(
        version2 instanceof SemVer$b ? version2.version : version2,
        options
      ).inc(release, identifier, identifierBase).version;
    } catch (er) {
      return null;
    }
  };
  var inc_1 = inc$1;
  const parse$5 = parse_1;
  const diff$1 = (version1, version2) => {
    const v1 = parse$5(version1, null, true);
    const v2 = parse$5(version2, null, true);
    const comparison = v1.compare(v2);
    if (comparison === 0) {
      return null;
    }
    const v1Higher = comparison > 0;
    const highVersion = v1Higher ? v1 : v2;
    const lowVersion = v1Higher ? v2 : v1;
    const highHasPre = !!highVersion.prerelease.length;
    const lowHasPre = !!lowVersion.prerelease.length;
    if (lowHasPre && !highHasPre) {
      if (!lowVersion.patch && !lowVersion.minor) {
        return "major";
      }
      if (highVersion.patch) {
        return "patch";
      }
      if (highVersion.minor) {
        return "minor";
      }
      return "major";
    }
    const prefix = highHasPre ? "pre" : "";
    if (v1.major !== v2.major) {
      return prefix + "major";
    }
    if (v1.minor !== v2.minor) {
      return prefix + "minor";
    }
    if (v1.patch !== v2.patch) {
      return prefix + "patch";
    }
    return "prerelease";
  };
  var diff_1 = diff$1;
  const SemVer$a = semver$2;
  const major$1 = (a, loose) => new SemVer$a(a, loose).major;
  var major_1 = major$1;
  const SemVer$9 = semver$2;
  const minor$1 = (a, loose) => new SemVer$9(a, loose).minor;
  var minor_1 = minor$1;
  const SemVer$8 = semver$2;
  const patch$1 = (a, loose) => new SemVer$8(a, loose).patch;
  var patch_1 = patch$1;
  const parse$4 = parse_1;
  const prerelease$1 = (version2, options) => {
    const parsed = parse$4(version2, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  };
  var prerelease_1 = prerelease$1;
  const SemVer$7 = semver$2;
  const compare$c = (a, b, loose) => new SemVer$7(a, loose).compare(new SemVer$7(b, loose));
  var compare_1 = compare$c;
  const compare$b = compare_1;
  const rcompare$1 = (a, b, loose) => compare$b(b, a, loose);
  var rcompare_1 = rcompare$1;
  const compare$a = compare_1;
  const compareLoose$1 = (a, b) => compare$a(a, b, true);
  var compareLoose_1 = compareLoose$1;
  const SemVer$6 = semver$2;
  const compareBuild$3 = (a, b, loose) => {
    const versionA = new SemVer$6(a, loose);
    const versionB = new SemVer$6(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  };
  var compareBuild_1 = compareBuild$3;
  const compareBuild$2 = compareBuild_1;
  const sort$1 = (list, loose) => list.sort((a, b) => compareBuild$2(a, b, loose));
  var sort_1 = sort$1;
  const compareBuild$1 = compareBuild_1;
  const rsort$1 = (list, loose) => list.sort((a, b) => compareBuild$1(b, a, loose));
  var rsort_1 = rsort$1;
  const compare$9 = compare_1;
  const gt$4 = (a, b, loose) => compare$9(a, b, loose) > 0;
  var gt_1 = gt$4;
  const compare$8 = compare_1;
  const lt$3 = (a, b, loose) => compare$8(a, b, loose) < 0;
  var lt_1 = lt$3;
  const compare$7 = compare_1;
  const eq$2 = (a, b, loose) => compare$7(a, b, loose) === 0;
  var eq_1 = eq$2;
  const compare$6 = compare_1;
  const neq$2 = (a, b, loose) => compare$6(a, b, loose) !== 0;
  var neq_1 = neq$2;
  const compare$5 = compare_1;
  const gte$3 = (a, b, loose) => compare$5(a, b, loose) >= 0;
  var gte_1 = gte$3;
  const compare$4 = compare_1;
  const lte$3 = (a, b, loose) => compare$4(a, b, loose) <= 0;
  var lte_1 = lte$3;
  const eq$1 = eq_1;
  const neq$1 = neq_1;
  const gt$3 = gt_1;
  const gte$2 = gte_1;
  const lt$2 = lt_1;
  const lte$2 = lte_1;
  const cmp$1 = (a, op, b, loose) => {
    switch (op) {
      case "===":
        if (typeof a === "object") {
          a = a.version;
        }
        if (typeof b === "object") {
          b = b.version;
        }
        return a === b;
      case "!==":
        if (typeof a === "object") {
          a = a.version;
        }
        if (typeof b === "object") {
          b = b.version;
        }
        return a !== b;
      case "":
      case "=":
      case "==":
        return eq$1(a, b, loose);
      case "!=":
        return neq$1(a, b, loose);
      case ">":
        return gt$3(a, b, loose);
      case ">=":
        return gte$2(a, b, loose);
      case "<":
        return lt$2(a, b, loose);
      case "<=":
        return lte$2(a, b, loose);
      default:
        throw new TypeError(`Invalid operator: ${op}`);
    }
  };
  var cmp_1 = cmp$1;
  const SemVer$5 = semver$2;
  const parse$3 = parse_1;
  const { safeRe: re, t } = reExports;
  const coerce$2 = (version2, options) => {
    if (version2 instanceof SemVer$5) {
      return version2;
    }
    if (typeof version2 === "number") {
      version2 = String(version2);
    }
    if (typeof version2 !== "string") {
      return null;
    }
    options = options || {};
    let match = null;
    if (!options.rtl) {
      match = version2.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
    } else {
      const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
      let next;
      while ((next = coerceRtlRegex.exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
        if (!match || next.index + next[0].length !== match.index + match[0].length) {
          match = next;
        }
        coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
      }
      coerceRtlRegex.lastIndex = -1;
    }
    if (match === null) {
      return null;
    }
    const major2 = match[2];
    const minor2 = match[3] || "0";
    const patch2 = match[4] || "0";
    const prerelease2 = options.includePrerelease && match[5] ? `-${match[5]}` : "";
    const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
    return parse$3(`${major2}.${minor2}.${patch2}${prerelease2}${build}`, options);
  };
  var coerce_1 = coerce$2;
  class LRUCache {
    constructor() {
      this.max = 1e3;
      this.map = /* @__PURE__ */ new Map();
    }
    get(key2) {
      const value = this.map.get(key2);
      if (value === void 0) {
        return void 0;
      } else {
        this.map.delete(key2);
        this.map.set(key2, value);
        return value;
      }
    }
    delete(key2) {
      return this.map.delete(key2);
    }
    set(key2, value) {
      const deleted = this.delete(key2);
      if (!deleted && value !== void 0) {
        if (this.map.size >= this.max) {
          const firstKey = this.map.keys().next().value;
          this.delete(firstKey);
        }
        this.map.set(key2, value);
      }
      return this;
    }
  }
  var lrucache = LRUCache;
  var range;
  var hasRequiredRange;
  function requireRange() {
    if (hasRequiredRange) return range;
    hasRequiredRange = 1;
    const SPACE_CHARACTERS = /\s+/g;
    class Range2 {
      constructor(range2, options) {
        options = parseOptions2(options);
        if (range2 instanceof Range2) {
          if (range2.loose === !!options.loose && range2.includePrerelease === !!options.includePrerelease) {
            return range2;
          } else {
            return new Range2(range2.raw, options);
          }
        }
        if (range2 instanceof Comparator2) {
          this.raw = range2.value;
          this.set = [[range2]];
          this.formatted = void 0;
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range2.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r2) => this.parseRange(r2.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i2 = 0; i2 < this.set.length; i2++) {
            if (i2 > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i2];
            for (let k = 0; k < comps.length; k++) {
              if (k > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range2) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range2;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re2[t2.HYPHENRANGELOOSE] : re2[t2.HYPHENRANGE];
        range2 = range2.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug2("hyphen replace", range2);
        range2 = range2.replace(re2[t2.COMPARATORTRIM], comparatorTrimReplace);
        debug2("comparator trim", range2);
        range2 = range2.replace(re2[t2.TILDETRIM], tildeTrimReplace);
        debug2("tilde trim", range2);
        range2 = range2.replace(re2[t2.CARETTRIM], caretTrimReplace);
        debug2("caret trim", range2);
        let rangeList = range2.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug2("loose invalid filter", comp, this.options);
            return !!comp.match(re2[t2.COMPARATORLOOSE]);
          });
        }
        debug2("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator2(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range2, options) {
        if (!(range2 instanceof Range2)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range2.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer2(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i2 = 0; i2 < this.set.length; i2++) {
          if (testSet(this.set[i2], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    }
    range = Range2;
    const LRU = lrucache;
    const cache = new LRU();
    const parseOptions2 = parseOptions_1;
    const Comparator2 = requireComparator();
    const debug2 = debug_1$1;
    const SemVer2 = semver$2;
    const {
      safeRe: re2,
      t: t2,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = reExports;
    const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = constants$2;
    const isNullSet = (c) => c.value === "<0.0.0-0";
    const isAny = (c) => c.value === "";
    const isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    const parseComparator = (comp, options) => {
      debug2("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug2("caret", comp);
      comp = replaceTildes(comp, options);
      debug2("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug2("xrange", comp);
      comp = replaceStars(comp, options);
      debug2("stars", comp);
      return comp;
    };
    const isX = (id2) => !id2 || id2.toLowerCase() === "x" || id2 === "*";
    const replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
    };
    const replaceTilde = (comp, options) => {
      const r2 = options.loose ? re2[t2.TILDELOOSE] : re2[t2.TILDE];
      return comp.replace(r2, (_, M, m, p, pr) => {
        debug2("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug2("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug2("tilde return", ret);
        return ret;
      });
    };
    const replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
    };
    const replaceCaret = (comp, options) => {
      debug2("caret", comp, options);
      const r2 = options.loose ? re2[t2.CARETLOOSE] : re2[t2.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r2, (_, M, m, p, pr) => {
        debug2("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug2("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug2("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug2("caret return", ret);
        return ret;
      });
    };
    const replaceXRanges = (comp, options) => {
      debug2("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
    };
    const replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r2 = options.loose ? re2[t2.XRANGELOOSE] : re2[t2.XRANGE];
      return comp.replace(r2, (ret, gtlt, M, m, p, pr) => {
        debug2("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug2("xRange return", ret);
        return ret;
      });
    };
    const replaceStars = (comp, options) => {
      debug2("replaceStars", comp, options);
      return comp.trim().replace(re2[t2.STAR], "");
    };
    const replaceGTE0 = (comp, options) => {
      debug2("replaceGTE0", comp, options);
      return comp.trim().replace(re2[options.includePrerelease ? t2.GTE0PRE : t2.GTE0], "");
    };
    const hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    const testSet = (set2, version2, options) => {
      for (let i2 = 0; i2 < set2.length; i2++) {
        if (!set2[i2].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i2 = 0; i2 < set2.length; i2++) {
          debug2(set2[i2].semver);
          if (set2[i2].semver === Comparator2.ANY) {
            continue;
          }
          if (set2[i2].semver.prerelease.length > 0) {
            const allowed = set2[i2].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
    return range;
  }
  var comparator;
  var hasRequiredComparator;
  function requireComparator() {
    if (hasRequiredComparator) return comparator;
    hasRequiredComparator = 1;
    const ANY2 = Symbol("SemVer ANY");
    class Comparator2 {
      static get ANY() {
        return ANY2;
      }
      constructor(comp, options) {
        options = parseOptions2(options);
        if (comp instanceof Comparator2) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug2("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY2) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug2("comp", this);
      }
      parse(comp) {
        const r2 = this.options.loose ? re2[t2.COMPARATORLOOSE] : re2[t2.COMPARATOR];
        const m = comp.match(r2);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY2;
        } else {
          this.semver = new SemVer2(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug2("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY2 || version2 === ANY2) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer2(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp2(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator2)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range2(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range2(this.value, options).test(comp.semver);
        }
        options = parseOptions2(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp2(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp2(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    }
    comparator = Comparator2;
    const parseOptions2 = parseOptions_1;
    const { safeRe: re2, t: t2 } = reExports;
    const cmp2 = cmp_1;
    const debug2 = debug_1$1;
    const SemVer2 = semver$2;
    const Range2 = requireRange();
    return comparator;
  }
  const Range$9 = requireRange();
  const satisfies$4 = (version2, range2, options) => {
    try {
      range2 = new Range$9(range2, options);
    } catch (er) {
      return false;
    }
    return range2.test(version2);
  };
  var satisfies_1 = satisfies$4;
  const Range$8 = requireRange();
  const toComparators$1 = (range2, options) => new Range$8(range2, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
  var toComparators_1 = toComparators$1;
  const SemVer$4 = semver$2;
  const Range$7 = requireRange();
  const maxSatisfying$1 = (versions2, range2, options) => {
    let max2 = null;
    let maxSV = null;
    let rangeObj = null;
    try {
      rangeObj = new Range$7(range2, options);
    } catch (er) {
      return null;
    }
    versions2.forEach((v) => {
      if (rangeObj.test(v)) {
        if (!max2 || maxSV.compare(v) === -1) {
          max2 = v;
          maxSV = new SemVer$4(max2, options);
        }
      }
    });
    return max2;
  };
  var maxSatisfying_1 = maxSatisfying$1;
  const SemVer$3 = semver$2;
  const Range$6 = requireRange();
  const minSatisfying$1 = (versions2, range2, options) => {
    let min2 = null;
    let minSV = null;
    let rangeObj = null;
    try {
      rangeObj = new Range$6(range2, options);
    } catch (er) {
      return null;
    }
    versions2.forEach((v) => {
      if (rangeObj.test(v)) {
        if (!min2 || minSV.compare(v) === 1) {
          min2 = v;
          minSV = new SemVer$3(min2, options);
        }
      }
    });
    return min2;
  };
  var minSatisfying_1 = minSatisfying$1;
  const SemVer$2 = semver$2;
  const Range$5 = requireRange();
  const gt$2 = gt_1;
  const minVersion$1 = (range2, loose) => {
    range2 = new Range$5(range2, loose);
    let minver = new SemVer$2("0.0.0");
    if (range2.test(minver)) {
      return minver;
    }
    minver = new SemVer$2("0.0.0-0");
    if (range2.test(minver)) {
      return minver;
    }
    minver = null;
    for (let i2 = 0; i2 < range2.set.length; ++i2) {
      const comparators = range2.set[i2];
      let setMin = null;
      comparators.forEach((comparator2) => {
        const compver = new SemVer$2(comparator2.semver.version);
        switch (comparator2.operator) {
          case ">":
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }
            compver.raw = compver.format();
          case "":
          case ">=":
            if (!setMin || gt$2(compver, setMin)) {
              setMin = compver;
            }
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error(`Unexpected operation: ${comparator2.operator}`);
        }
      });
      if (setMin && (!minver || gt$2(minver, setMin))) {
        minver = setMin;
      }
    }
    if (minver && range2.test(minver)) {
      return minver;
    }
    return null;
  };
  var minVersion_1 = minVersion$1;
  const Range$4 = requireRange();
  const validRange$1 = (range2, options) => {
    try {
      return new Range$4(range2, options).range || "*";
    } catch (er) {
      return null;
    }
  };
  var valid$1 = validRange$1;
  const SemVer$1 = semver$2;
  const Comparator$2 = requireComparator();
  const { ANY: ANY$1 } = Comparator$2;
  const Range$3 = requireRange();
  const satisfies$3 = satisfies_1;
  const gt$1 = gt_1;
  const lt$1 = lt_1;
  const lte$1 = lte_1;
  const gte$1 = gte_1;
  const outside$3 = (version2, range2, hilo, options) => {
    version2 = new SemVer$1(version2, options);
    range2 = new Range$3(range2, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt$1;
        ltefn = lte$1;
        ltfn = lt$1;
        comp = ">";
        ecomp = ">=";
        break;
      case "<":
        gtfn = lt$1;
        ltefn = gte$1;
        ltfn = gt$1;
        comp = "<";
        ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies$3(version2, range2, options)) {
      return false;
    }
    for (let i2 = 0; i2 < range2.set.length; ++i2) {
      const comparators = range2.set[i2];
      let high = null;
      let low = null;
      comparators.forEach((comparator2) => {
        if (comparator2.semver === ANY$1) {
          comparator2 = new Comparator$2(">=0.0.0");
        }
        high = high || comparator2;
        low = low || comparator2;
        if (gtfn(comparator2.semver, high.semver, options)) {
          high = comparator2;
        } else if (ltfn(comparator2.semver, low.semver, options)) {
          low = comparator2;
        }
      });
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }
      if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
        return false;
      }
    }
    return true;
  };
  var outside_1 = outside$3;
  const outside$2 = outside_1;
  const gtr$1 = (version2, range2, options) => outside$2(version2, range2, ">", options);
  var gtr_1 = gtr$1;
  const outside$1 = outside_1;
  const ltr$1 = (version2, range2, options) => outside$1(version2, range2, "<", options);
  var ltr_1 = ltr$1;
  const Range$2 = requireRange();
  const intersects$1 = (r1, r2, options) => {
    r1 = new Range$2(r1, options);
    r2 = new Range$2(r2, options);
    return r1.intersects(r2, options);
  };
  var intersects_1 = intersects$1;
  const satisfies$2 = satisfies_1;
  const compare$3 = compare_1;
  var simplify = (versions2, range2, options) => {
    const set2 = [];
    let first = null;
    let prev = null;
    const v = versions2.sort((a, b) => compare$3(a, b, options));
    for (const version2 of v) {
      const included = satisfies$2(version2, range2, options);
      if (included) {
        prev = version2;
        if (!first) {
          first = version2;
        }
      } else {
        if (prev) {
          set2.push([first, prev]);
        }
        prev = null;
        first = null;
      }
    }
    if (first) {
      set2.push([first, null]);
    }
    const ranges = [];
    for (const [min2, max2] of set2) {
      if (min2 === max2) {
        ranges.push(min2);
      } else if (!max2 && min2 === v[0]) {
        ranges.push("*");
      } else if (!max2) {
        ranges.push(`>=${min2}`);
      } else if (min2 === v[0]) {
        ranges.push(`<=${max2}`);
      } else {
        ranges.push(`${min2} - ${max2}`);
      }
    }
    const simplified = ranges.join(" || ");
    const original = typeof range2.raw === "string" ? range2.raw : String(range2);
    return simplified.length < original.length ? simplified : range2;
  };
  const Range$1 = requireRange();
  const Comparator$1 = requireComparator();
  const { ANY } = Comparator$1;
  const satisfies$1 = satisfies_1;
  const compare$2 = compare_1;
  const subset$1 = (sub, dom, options = {}) => {
    if (sub === dom) {
      return true;
    }
    sub = new Range$1(sub, options);
    dom = new Range$1(dom, options);
    let sawNonNull = false;
    OUTER: for (const simpleSub of sub.set) {
      for (const simpleDom of dom.set) {
        const isSub = simpleSubset(simpleSub, simpleDom, options);
        sawNonNull = sawNonNull || isSub !== null;
        if (isSub) {
          continue OUTER;
        }
      }
      if (sawNonNull) {
        return false;
      }
    }
    return true;
  };
  const minimumVersionWithPreRelease = [new Comparator$1(">=0.0.0-0")];
  const minimumVersion = [new Comparator$1(">=0.0.0")];
  const simpleSubset = (sub, dom, options) => {
    if (sub === dom) {
      return true;
    }
    if (sub.length === 1 && sub[0].semver === ANY) {
      if (dom.length === 1 && dom[0].semver === ANY) {
        return true;
      } else if (options.includePrerelease) {
        sub = minimumVersionWithPreRelease;
      } else {
        sub = minimumVersion;
      }
    }
    if (dom.length === 1 && dom[0].semver === ANY) {
      if (options.includePrerelease) {
        return true;
      } else {
        dom = minimumVersion;
      }
    }
    const eqSet = /* @__PURE__ */ new Set();
    let gt2, lt2;
    for (const c of sub) {
      if (c.operator === ">" || c.operator === ">=") {
        gt2 = higherGT(gt2, c, options);
      } else if (c.operator === "<" || c.operator === "<=") {
        lt2 = lowerLT(lt2, c, options);
      } else {
        eqSet.add(c.semver);
      }
    }
    if (eqSet.size > 1) {
      return null;
    }
    let gtltComp;
    if (gt2 && lt2) {
      gtltComp = compare$2(gt2.semver, lt2.semver, options);
      if (gtltComp > 0) {
        return null;
      } else if (gtltComp === 0 && (gt2.operator !== ">=" || lt2.operator !== "<=")) {
        return null;
      }
    }
    for (const eq2 of eqSet) {
      if (gt2 && !satisfies$1(eq2, String(gt2), options)) {
        return null;
      }
      if (lt2 && !satisfies$1(eq2, String(lt2), options)) {
        return null;
      }
      for (const c of dom) {
        if (!satisfies$1(eq2, String(c), options)) {
          return false;
        }
      }
      return true;
    }
    let higher, lower;
    let hasDomLT, hasDomGT;
    let needDomLTPre = lt2 && !options.includePrerelease && lt2.semver.prerelease.length ? lt2.semver : false;
    let needDomGTPre = gt2 && !options.includePrerelease && gt2.semver.prerelease.length ? gt2.semver : false;
    if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt2.operator === "<" && needDomLTPre.prerelease[0] === 0) {
      needDomLTPre = false;
    }
    for (const c of dom) {
      hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
      hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
      if (gt2) {
        if (needDomGTPre) {
          if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
            needDomGTPre = false;
          }
        }
        if (c.operator === ">" || c.operator === ">=") {
          higher = higherGT(gt2, c, options);
          if (higher === c && higher !== gt2) {
            return false;
          }
        } else if (gt2.operator === ">=" && !satisfies$1(gt2.semver, String(c), options)) {
          return false;
        }
      }
      if (lt2) {
        if (needDomLTPre) {
          if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
            needDomLTPre = false;
          }
        }
        if (c.operator === "<" || c.operator === "<=") {
          lower = lowerLT(lt2, c, options);
          if (lower === c && lower !== lt2) {
            return false;
          }
        } else if (lt2.operator === "<=" && !satisfies$1(lt2.semver, String(c), options)) {
          return false;
        }
      }
      if (!c.operator && (lt2 || gt2) && gtltComp !== 0) {
        return false;
      }
    }
    if (gt2 && hasDomLT && !lt2 && gtltComp !== 0) {
      return false;
    }
    if (lt2 && hasDomGT && !gt2 && gtltComp !== 0) {
      return false;
    }
    if (needDomGTPre || needDomLTPre) {
      return false;
    }
    return true;
  };
  const higherGT = (a, b, options) => {
    if (!a) {
      return b;
    }
    const comp = compare$2(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
  };
  const lowerLT = (a, b, options) => {
    if (!a) {
      return b;
    }
    const comp = compare$2(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
  };
  var subset_1 = subset$1;
  const internalRe = reExports;
  const constants$1 = constants$2;
  const SemVer = semver$2;
  const identifiers = identifiers$1;
  const parse$2 = parse_1;
  const valid = valid_1;
  const clean = clean_1;
  const inc = inc_1;
  const diff = diff_1;
  const major = major_1;
  const minor = minor_1;
  const patch = patch_1;
  const prerelease = prerelease_1;
  const compare$1 = compare_1;
  const rcompare = rcompare_1;
  const compareLoose = compareLoose_1;
  const compareBuild = compareBuild_1;
  const sort = sort_1;
  const rsort = rsort_1;
  const gt = gt_1;
  const lt = lt_1;
  const eq = eq_1;
  const neq = neq_1;
  const gte = gte_1;
  const lte = lte_1;
  const cmp = cmp_1;
  const coerce$1 = coerce_1;
  const Comparator = requireComparator();
  const Range = requireRange();
  const satisfies = satisfies_1;
  const toComparators = toComparators_1;
  const maxSatisfying = maxSatisfying_1;
  const minSatisfying = minSatisfying_1;
  const minVersion = minVersion_1;
  const validRange = valid$1;
  const outside = outside_1;
  const gtr = gtr_1;
  const ltr = ltr_1;
  const intersects = intersects_1;
  const simplifyRange = simplify;
  const subset = subset_1;
  var semver = {
    parse: parse$2,
    valid,
    clean,
    inc,
    diff,
    major,
    minor,
    patch,
    prerelease,
    compare: compare$1,
    rcompare,
    compareLoose,
    compareBuild,
    sort,
    rsort,
    gt,
    lt,
    eq,
    neq,
    gte,
    lte,
    cmp,
    coerce: coerce$1,
    Comparator,
    Range,
    satisfies,
    toComparators,
    maxSatisfying,
    minSatisfying,
    minVersion,
    validRange,
    outside,
    gtr,
    ltr,
    intersects,
    simplifyRange,
    subset,
    SemVer,
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: constants$1.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: constants$1.RELEASE_TYPES,
    compareIdentifiers: identifiers.compareIdentifiers,
    rcompareIdentifiers: identifiers.rcompareIdentifiers
  };
  const semver$1 = /* @__PURE__ */ getDefaultExportFromCjs(semver);
  var DeviceModelId;
  (function(DeviceModelId2) {
    DeviceModelId2["blue"] = "blue";
    DeviceModelId2["nanoS"] = "nanoS";
    DeviceModelId2["nanoSP"] = "nanoSP";
    DeviceModelId2["nanoX"] = "nanoX";
    DeviceModelId2["stax"] = "stax";
    DeviceModelId2["europa"] = "europa";
  })(DeviceModelId || (DeviceModelId = {}));
  const devices = {
    [DeviceModelId.blue]: {
      id: DeviceModelId.blue,
      productName: "Ledger Blue",
      productIdMM: 0,
      legacyUsbProductId: 0,
      usbOnly: true,
      memorySize: 480 * 1024,
      masks: [822083584, 822149120],
      getBlockSize: (_firwareVersion) => 4 * 1024
    },
    [DeviceModelId.nanoS]: {
      id: DeviceModelId.nanoS,
      productName: "Ledger Nano S",
      productIdMM: 16,
      legacyUsbProductId: 1,
      usbOnly: true,
      memorySize: 320 * 1024,
      masks: [823132160],
      getBlockSize: (firmwareVersion) => {
        var _a;
        return semver$1.lt((_a = semver$1.coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : "", "2.0.0") ? 4 * 1024 : 2 * 1024;
      }
    },
    [DeviceModelId.nanoX]: {
      id: DeviceModelId.nanoX,
      productName: "Ledger Nano X",
      productIdMM: 64,
      legacyUsbProductId: 4,
      usbOnly: false,
      memorySize: 2 * 1024 * 1024,
      masks: [855638016],
      getBlockSize: (_firwareVersion) => 4 * 1024,
      bluetoothSpec: [
        {
          serviceUuid: "13d63400-2c97-0004-0000-4c6564676572",
          notifyUuid: "13d63400-2c97-0004-0001-4c6564676572",
          writeUuid: "13d63400-2c97-0004-0002-4c6564676572",
          writeCmdUuid: "13d63400-2c97-0004-0003-4c6564676572"
        }
      ]
    },
    [DeviceModelId.nanoSP]: {
      id: DeviceModelId.nanoSP,
      productName: "Ledger Nano S Plus",
      productIdMM: 80,
      legacyUsbProductId: 5,
      usbOnly: true,
      memorySize: 1533 * 1024,
      masks: [856686592],
      getBlockSize: (_firmwareVersion) => 32
    },
    [DeviceModelId.stax]: {
      id: DeviceModelId.stax,
      productName: "Ledger Stax",
      productIdMM: 96,
      legacyUsbProductId: 6,
      usbOnly: false,
      memorySize: 1533 * 1024,
      masks: [857735168],
      getBlockSize: (_firmwareVersion) => 32,
      bluetoothSpec: [
        {
          serviceUuid: "13d63400-2c97-6004-0000-4c6564676572",
          notifyUuid: "13d63400-2c97-6004-0001-4c6564676572",
          writeUuid: "13d63400-2c97-6004-0002-4c6564676572",
          writeCmdUuid: "13d63400-2c97-6004-0003-4c6564676572"
        }
      ]
    },
    [DeviceModelId.europa]: {
      id: DeviceModelId.europa,
      productName: "Ledger Flex",
      productIdMM: 112,
      legacyUsbProductId: 7,
      usbOnly: false,
      memorySize: 1533 * 1024,
      masks: [858783744],
      getBlockSize: (_firmwareVersion) => 32,
      bluetoothSpec: [
        {
          serviceUuid: "13d63400-2c97-3004-0000-4c6564676572",
          notifyUuid: "13d63400-2c97-3004-0001-4c6564676572",
          writeUuid: "13d63400-2c97-3004-0002-4c6564676572",
          writeCmdUuid: "13d63400-2c97-3004-0003-4c6564676572"
        }
      ]
    }
  };
  const devicesList = Object.values(devices);
  const ledgerUSBVendorId = 11415;
  const identifyUSBProductId = (usbProductId) => {
    const legacy = devicesList.find((d) => d.legacyUsbProductId === usbProductId);
    if (legacy)
      return legacy;
    const mm = usbProductId >> 8;
    const deviceModel = devicesList.find((d) => d.productIdMM === mm);
    return deviceModel;
  };
  const serviceUuidToInfos = {};
  for (const id2 in devices) {
    const deviceModel = devices[id2];
    const { bluetoothSpec } = deviceModel;
    if (bluetoothSpec) {
      for (let i2 = 0; i2 < bluetoothSpec.length; i2++) {
        const spec = bluetoothSpec[i2];
        serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, "")] = Object.assign({ deviceModel }, spec);
      }
    }
  }
  var __awaiter$2 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const ledgerDevices$1 = [
    {
      vendorId: ledgerUSBVendorId
    }
  ];
  function requestLedgerDevice() {
    return __awaiter$2(this, void 0, void 0, function* () {
      const device = yield navigator.usb.requestDevice({
        filters: ledgerDevices$1
      });
      return device;
    });
  }
  function getLedgerDevices$1() {
    return __awaiter$2(this, void 0, void 0, function* () {
      const devices2 = yield navigator.usb.getDevices();
      return devices2.filter((d) => d.vendorId === ledgerUSBVendorId);
    });
  }
  function getFirstLedgerDevice$1() {
    return __awaiter$2(this, void 0, void 0, function* () {
      const existingDevices = yield getLedgerDevices$1();
      if (existingDevices.length > 0)
        return existingDevices[0];
      return requestLedgerDevice();
    });
  }
  const isSupported$2 = () => Promise.resolve(!!navigator && !!navigator.usb && typeof navigator.usb.getDevices === "function");
  var __awaiter$1 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const configurationValue = 1;
  const endpointNumber = 3;
  class TransportWebUSB extends Transport {
    constructor(device, interfaceNumber) {
      super();
      this.channel = Math.floor(Math.random() * 65535);
      this.packetSize = 64;
      this._disconnectEmitted = false;
      this._emitDisconnect = (e) => {
        if (this._disconnectEmitted)
          return;
        this._disconnectEmitted = true;
        this.emit("disconnect", e);
      };
      this.device = device;
      this.interfaceNumber = interfaceNumber;
      this.deviceModel = identifyUSBProductId(device.productId);
    }
    /**
     * Similar to create() except it will always display the device permission (even if some devices are already accepted).
     */
    static request() {
      return __awaiter$1(this, void 0, void 0, function* () {
        const device = yield requestLedgerDevice();
        return TransportWebUSB.open(device);
      });
    }
    /**
     * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).
     */
    static openConnected() {
      return __awaiter$1(this, void 0, void 0, function* () {
        const devices2 = yield getLedgerDevices$1();
        if (devices2.length === 0)
          return null;
        return TransportWebUSB.open(devices2[0]);
      });
    }
    /**
     * Create a Ledger transport with a USBDevice
     */
    static open(device) {
      return __awaiter$1(this, void 0, void 0, function* () {
        yield device.open();
        if (device.configuration === null) {
          yield device.selectConfiguration(configurationValue);
        }
        yield gracefullyResetDevice(device);
        const iface = device.configurations[0].interfaces.find(({ alternates }) => alternates.some((a) => a.interfaceClass === 255));
        if (!iface) {
          throw new TransportInterfaceNotAvailable("No WebUSB interface found for your Ledger device. Please upgrade firmware or contact techsupport.");
        }
        const interfaceNumber = iface.interfaceNumber;
        try {
          yield device.claimInterface(interfaceNumber);
        } catch (e) {
          yield device.close();
          throw new TransportInterfaceNotAvailable(e.message);
        }
        const transport = new TransportWebUSB(device, interfaceNumber);
        const onDisconnect = (e) => {
          if (device === e.device) {
            navigator.usb.removeEventListener("disconnect", onDisconnect);
            transport._emitDisconnect(new DisconnectedDevice());
          }
        };
        navigator.usb.addEventListener("disconnect", onDisconnect);
        return transport;
      });
    }
    /**
     * Release the transport device
     */
    close() {
      return __awaiter$1(this, void 0, void 0, function* () {
        yield this.exchangeBusyPromise;
        yield this.device.releaseInterface(this.interfaceNumber);
        yield gracefullyResetDevice(this.device);
        yield this.device.close();
      });
    }
    /**
     * Exchange with the device using APDU protocol.
     * @param apdu
     * @returns a promise of apdu response
     */
    exchange(apdu) {
      return __awaiter$1(this, void 0, void 0, function* () {
        const b = yield this.exchangeAtomicImpl(() => __awaiter$1(this, void 0, void 0, function* () {
          const { channel, packetSize } = this;
          log("apdu", "=> " + apdu.toString("hex"));
          const framing = createHIDframing(channel, packetSize);
          const blocks = framing.makeBlocks(apdu);
          for (let i2 = 0; i2 < blocks.length; i2++) {
            yield this.device.transferOut(endpointNumber, blocks[i2]);
          }
          let result;
          let acc;
          while (!(result = framing.getReducedResult(acc))) {
            const r2 = yield this.device.transferIn(endpointNumber, packetSize);
            const buffer2 = Buffer2.from(r2.data.buffer);
            acc = framing.reduceResponse(acc, buffer2);
          }
          log("apdu", "<= " + result.toString("hex"));
          return result;
        })).catch((e) => {
          if (e && e.message && e.message.includes("disconnected")) {
            this._emitDisconnect(e);
            throw new DisconnectedDeviceDuringOperation(e.message);
          }
          throw e;
        });
        return b;
      });
    }
    setScrambleKey() {
    }
  }
  TransportWebUSB.isSupported = isSupported$2;
  TransportWebUSB.list = getLedgerDevices$1;
  TransportWebUSB.listen = (observer) => {
    let unsubscribed = false;
    getFirstLedgerDevice$1().then((device) => {
      if (!unsubscribed) {
        const deviceModel = identifyUSBProductId(device.productId);
        observer.next({
          type: "add",
          descriptor: device,
          deviceModel
        });
        observer.complete();
      }
    }, (error2) => {
      if (window.DOMException && error2 instanceof window.DOMException && error2.code === 18) {
        observer.error(new TransportWebUSBGestureRequired(error2.message));
      } else {
        observer.error(new TransportOpenUserCancelled(error2.message));
      }
    });
    function unsubscribe() {
      unsubscribed = true;
    }
    return {
      unsubscribe
    };
  };
  function gracefullyResetDevice(device) {
    return __awaiter$1(this, void 0, void 0, function* () {
      try {
        yield device.reset();
      } catch (err) {
        console.warn(err);
      }
    });
  }
  var __awaiter = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const ledgerDevices = [
    {
      vendorId: ledgerUSBVendorId
    }
  ];
  const isSupported$1 = () => Promise.resolve(!!(window.navigator && window.navigator.hid));
  const getHID = () => {
    const { hid } = navigator;
    if (!hid)
      throw new TransportError("navigator.hid is not supported", "HIDNotSupported");
    return hid;
  };
  function requestLedgerDevices() {
    return __awaiter(this, void 0, void 0, function* () {
      const device = yield getHID().requestDevice({
        filters: ledgerDevices
      });
      if (Array.isArray(device))
        return device;
      return [device];
    });
  }
  function getLedgerDevices() {
    return __awaiter(this, void 0, void 0, function* () {
      const devices2 = yield getHID().getDevices();
      return devices2.filter((d) => d.vendorId === ledgerUSBVendorId);
    });
  }
  function getFirstLedgerDevice() {
    return __awaiter(this, void 0, void 0, function* () {
      const existingDevices = yield getLedgerDevices();
      if (existingDevices.length > 0)
        return existingDevices[0];
      const devices2 = yield requestLedgerDevices();
      return devices2[0];
    });
  }
  class TransportWebHID extends Transport {
    constructor(device) {
      super();
      this.channel = Math.floor(Math.random() * 65535);
      this.packetSize = 64;
      this.inputs = [];
      this.read = () => {
        if (this.inputs.length) {
          return Promise.resolve(this.inputs.shift());
        }
        return new Promise((success) => {
          this.inputCallback = success;
        });
      };
      this.onInputReport = (e) => {
        const buffer2 = Buffer2.from(e.data.buffer);
        if (this.inputCallback) {
          this.inputCallback(buffer2);
          this.inputCallback = null;
        } else {
          this.inputs.push(buffer2);
        }
      };
      this._disconnectEmitted = false;
      this._emitDisconnect = (e) => {
        if (this._disconnectEmitted)
          return;
        this._disconnectEmitted = true;
        this.emit("disconnect", e);
      };
      this.exchange = (apdu) => __awaiter(this, void 0, void 0, function* () {
        const b = yield this.exchangeAtomicImpl(() => __awaiter(this, void 0, void 0, function* () {
          const { channel, packetSize } = this;
          log("apdu", "=> " + apdu.toString("hex"));
          const framing = createHIDframing(channel, packetSize);
          const blocks = framing.makeBlocks(apdu);
          for (let i2 = 0; i2 < blocks.length; i2++) {
            yield this.device.sendReport(0, blocks[i2]);
          }
          let result;
          let acc;
          while (!(result = framing.getReducedResult(acc))) {
            try {
              const buffer2 = yield this.read();
              acc = framing.reduceResponse(acc, buffer2);
            } catch (e) {
              if (e instanceof TransportError && e.id === "InvalidChannel") {
                continue;
              }
              throw e;
            }
          }
          log("apdu", "<= " + result.toString("hex"));
          return result;
        })).catch((e) => {
          if (e && e.message && e.message.includes("write")) {
            this._emitDisconnect(e);
            throw new DisconnectedDeviceDuringOperation(e.message);
          }
          throw e;
        });
        return b;
      });
      this.device = device;
      this.deviceModel = typeof device.productId === "number" ? identifyUSBProductId(device.productId) : void 0;
      device.addEventListener("inputreport", this.onInputReport);
    }
    /**
     * Similar to create() except it will always display the device permission (even if some devices are already accepted).
     */
    static request() {
      return __awaiter(this, void 0, void 0, function* () {
        const [device] = yield requestLedgerDevices();
        return TransportWebHID.open(device);
      });
    }
    /**
     * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).
     */
    static openConnected() {
      return __awaiter(this, void 0, void 0, function* () {
        const devices2 = yield getLedgerDevices();
        if (devices2.length === 0)
          return null;
        return TransportWebHID.open(devices2[0]);
      });
    }
    /**
     * Create a Ledger transport with a HIDDevice
     */
    static open(device) {
      return __awaiter(this, void 0, void 0, function* () {
        yield device.open();
        const transport = new TransportWebHID(device);
        const onDisconnect = (e) => {
          if (device === e.device) {
            getHID().removeEventListener("disconnect", onDisconnect);
            transport._emitDisconnect(new DisconnectedDevice());
          }
        };
        getHID().addEventListener("disconnect", onDisconnect);
        return transport;
      });
    }
    /**
     * Release the transport device
     */
    close() {
      return __awaiter(this, void 0, void 0, function* () {
        yield this.exchangeBusyPromise;
        this.device.removeEventListener("inputreport", this.onInputReport);
        yield this.device.close();
      });
    }
    setScrambleKey() {
    }
  }
  TransportWebHID.isSupported = isSupported$1;
  TransportWebHID.list = getLedgerDevices;
  TransportWebHID.listen = (observer) => {
    let unsubscribed = false;
    getFirstLedgerDevice().then((device) => {
      if (!device) {
        observer.error(new TransportOpenUserCancelled("Access denied to use Ledger device"));
      } else if (!unsubscribed) {
        const deviceModel = typeof device.productId === "number" ? identifyUSBProductId(device.productId) : void 0;
        observer.next({
          type: "add",
          descriptor: device,
          deviceModel
        });
        observer.complete();
      }
    }, (error2) => {
      observer.error(new TransportOpenUserCancelled(error2.message));
    });
    function unsubscribe() {
      unsubscribed = true;
    }
    return {
      unsubscribe
    };
  };
  var isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER$1 = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
  function clone(configObject) {
    var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
      prefix: "",
      groupSize: 3,
      secondaryGroupSize: 0,
      groupSeparator: ",",
      decimalSeparator: ".",
      fractionGroupSize: 0,
      fractionGroupSeparator: " ",
      // non-breaking space
      suffix: ""
    }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
    function BigNumber2(v, b) {
      var alphabet, c, caseChanged, e, i2, isNum, len2, str, x = this;
      if (!(x instanceof BigNumber2)) return new BigNumber2(v, b);
      if (b == null) {
        if (v && v._isBigNumber === true) {
          x.s = v.s;
          if (!v.c || v.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (v.e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = v.e;
            x.c = v.c.slice();
          }
          return;
        }
        if ((isNum = typeof v == "number") && v * 0 == 0) {
          x.s = 1 / v < 0 ? (v = -v, -1) : 1;
          if (v === ~~v) {
            for (e = 0, i2 = v; i2 >= 10; i2 /= 10, e++) ;
            if (e > MAX_EXP) {
              x.c = x.e = null;
            } else {
              x.e = e;
              x.c = [v];
            }
            return;
          }
          str = String(v);
        } else {
          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
        }
        if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
        if ((i2 = str.search(/e/i)) > 0) {
          if (e < 0) e = i2;
          e += +str.slice(i2 + 1);
          str = str.substring(0, i2);
        } else if (e < 0) {
          e = str.length;
        }
      } else {
        intCheck(b, 2, ALPHABET.length, "Base");
        if (b == 10 && alphabetHasNormalDecimalDigits) {
          x = new BigNumber2(v);
          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
        }
        str = String(v);
        if (isNum = typeof v == "number") {
          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
          if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
            throw Error(tooManyDigits + v);
          }
        } else {
          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
        }
        alphabet = ALPHABET.slice(0, b);
        e = i2 = 0;
        for (len2 = str.length; i2 < len2; i2++) {
          if (alphabet.indexOf(c = str.charAt(i2)) < 0) {
            if (c == ".") {
              if (i2 > e) {
                e = len2;
                continue;
              }
            } else if (!caseChanged) {
              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                caseChanged = true;
                i2 = -1;
                e = 0;
                continue;
              }
            }
            return parseNumeric(x, String(v), isNum, b);
          }
        }
        isNum = false;
        str = convertBase(str, b, 10, x.s);
        if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
        else e = str.length;
      }
      for (i2 = 0; str.charCodeAt(i2) === 48; i2++) ;
      for (len2 = str.length; str.charCodeAt(--len2) === 48; ) ;
      if (str = str.slice(i2, ++len2)) {
        len2 -= i2;
        if (isNum && BigNumber2.DEBUG && len2 > 15 && (v > MAX_SAFE_INTEGER$1 || v !== mathfloor(v))) {
          throw Error(tooManyDigits + x.s * v);
        }
        if ((e = e - i2 - 1) > MAX_EXP) {
          x.c = x.e = null;
        } else if (e < MIN_EXP) {
          x.c = [x.e = 0];
        } else {
          x.e = e;
          x.c = [];
          i2 = (e + 1) % LOG_BASE;
          if (e < 0) i2 += LOG_BASE;
          if (i2 < len2) {
            if (i2) x.c.push(+str.slice(0, i2));
            for (len2 -= LOG_BASE; i2 < len2; ) {
              x.c.push(+str.slice(i2, i2 += LOG_BASE));
            }
            i2 = LOG_BASE - (str = str.slice(i2)).length;
          } else {
            i2 -= len2;
          }
          for (; i2--; str += "0") ;
          x.c.push(+str);
        }
      } else {
        x.c = [x.e = 0];
      }
    }
    BigNumber2.clone = clone;
    BigNumber2.ROUND_UP = 0;
    BigNumber2.ROUND_DOWN = 1;
    BigNumber2.ROUND_CEIL = 2;
    BigNumber2.ROUND_FLOOR = 3;
    BigNumber2.ROUND_HALF_UP = 4;
    BigNumber2.ROUND_HALF_DOWN = 5;
    BigNumber2.ROUND_HALF_EVEN = 6;
    BigNumber2.ROUND_HALF_CEIL = 7;
    BigNumber2.ROUND_HALF_FLOOR = 8;
    BigNumber2.EUCLID = 9;
    BigNumber2.config = BigNumber2.set = function(obj) {
      var p, v;
      if (obj != null) {
        if (typeof obj == "object") {
          if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            DECIMAL_PLACES = v;
          }
          if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
            v = obj[p];
            intCheck(v, 0, 8, p);
            ROUNDING_MODE = v;
          }
          if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -1e9, 0, p);
              intCheck(v[1], 0, MAX, p);
              TO_EXP_NEG = v[0];
              TO_EXP_POS = v[1];
            } else {
              intCheck(v, -1e9, MAX, p);
              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
            }
          }
          if (obj.hasOwnProperty(p = "RANGE")) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -1e9, -1, p);
              intCheck(v[1], 1, MAX, p);
              MIN_EXP = v[0];
              MAX_EXP = v[1];
            } else {
              intCheck(v, -1e9, MAX, p);
              if (v) {
                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
              } else {
                throw Error(bignumberError + p + " cannot be zero: " + v);
              }
            }
          }
          if (obj.hasOwnProperty(p = "CRYPTO")) {
            v = obj[p];
            if (v === !!v) {
              if (v) {
                if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = v;
                } else {
                  CRYPTO = !v;
                  throw Error(bignumberError + "crypto unavailable");
                }
              } else {
                CRYPTO = v;
              }
            } else {
              throw Error(bignumberError + p + " not true or false: " + v);
            }
          }
          if (obj.hasOwnProperty(p = "MODULO_MODE")) {
            v = obj[p];
            intCheck(v, 0, 9, p);
            MODULO_MODE = v;
          }
          if (obj.hasOwnProperty(p = "POW_PRECISION")) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            POW_PRECISION = v;
          }
          if (obj.hasOwnProperty(p = "FORMAT")) {
            v = obj[p];
            if (typeof v == "object") FORMAT = v;
            else throw Error(bignumberError + p + " not an object: " + v);
          }
          if (obj.hasOwnProperty(p = "ALPHABET")) {
            v = obj[p];
            if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
              alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
              ALPHABET = v;
            } else {
              throw Error(bignumberError + p + " invalid: " + v);
            }
          }
        } else {
          throw Error(bignumberError + "Object expected: " + obj);
        }
      }
      return {
        DECIMAL_PLACES,
        ROUNDING_MODE,
        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
        RANGE: [MIN_EXP, MAX_EXP],
        CRYPTO,
        MODULO_MODE,
        POW_PRECISION,
        FORMAT,
        ALPHABET
      };
    };
    BigNumber2.isBigNumber = function(v) {
      if (!v || v._isBigNumber !== true) return false;
      if (!BigNumber2.DEBUG) return true;
      var i2, n, c = v.c, e = v.e, s2 = v.s;
      out: if ({}.toString.call(c) == "[object Array]") {
        if ((s2 === 1 || s2 === -1) && e >= -1e9 && e <= MAX && e === mathfloor(e)) {
          if (c[0] === 0) {
            if (e === 0 && c.length === 1) return true;
            break out;
          }
          i2 = (e + 1) % LOG_BASE;
          if (i2 < 1) i2 += LOG_BASE;
          if (String(c[0]).length == i2) {
            for (i2 = 0; i2 < c.length; i2++) {
              n = c[i2];
              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
            }
            if (n !== 0) return true;
          }
        }
      } else if (c === null && e === null && (s2 === null || s2 === 1 || s2 === -1)) {
        return true;
      }
      throw Error(bignumberError + "Invalid BigNumber: " + v);
    };
    BigNumber2.maximum = BigNumber2.max = function() {
      return maxOrMin(arguments, -1);
    };
    BigNumber2.minimum = BigNumber2.min = function() {
      return maxOrMin(arguments, 1);
    };
    BigNumber2.random = function() {
      var pow2_53 = 9007199254740992;
      var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
        return mathfloor(Math.random() * pow2_53);
      } : function() {
        return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
      };
      return function(dp) {
        var a, b, e, k, v, i2 = 0, c = [], rand2 = new BigNumber2(ONE);
        if (dp == null) dp = DECIMAL_PLACES;
        else intCheck(dp, 0, MAX);
        k = mathceil(dp / LOG_BASE);
        if (CRYPTO) {
          if (crypto.getRandomValues) {
            a = crypto.getRandomValues(new Uint32Array(k *= 2));
            for (; i2 < k; ) {
              v = a[i2] * 131072 + (a[i2 + 1] >>> 11);
              if (v >= 9e15) {
                b = crypto.getRandomValues(new Uint32Array(2));
                a[i2] = b[0];
                a[i2 + 1] = b[1];
              } else {
                c.push(v % 1e14);
                i2 += 2;
              }
            }
            i2 = k / 2;
          } else if (crypto.randomBytes) {
            a = crypto.randomBytes(k *= 7);
            for (; i2 < k; ) {
              v = (a[i2] & 31) * 281474976710656 + a[i2 + 1] * 1099511627776 + a[i2 + 2] * 4294967296 + a[i2 + 3] * 16777216 + (a[i2 + 4] << 16) + (a[i2 + 5] << 8) + a[i2 + 6];
              if (v >= 9e15) {
                crypto.randomBytes(7).copy(a, i2);
              } else {
                c.push(v % 1e14);
                i2 += 7;
              }
            }
            i2 = k / 7;
          } else {
            CRYPTO = false;
            throw Error(bignumberError + "crypto unavailable");
          }
        }
        if (!CRYPTO) {
          for (; i2 < k; ) {
            v = random53bitInt();
            if (v < 9e15) c[i2++] = v % 1e14;
          }
        }
        k = c[--i2];
        dp %= LOG_BASE;
        if (k && dp) {
          v = POWS_TEN[LOG_BASE - dp];
          c[i2] = mathfloor(k / v) * v;
        }
        for (; c[i2] === 0; c.pop(), i2--) ;
        if (i2 < 0) {
          c = [e = 0];
        } else {
          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) ;
          for (i2 = 1, v = c[0]; v >= 10; v /= 10, i2++) ;
          if (i2 < LOG_BASE) e -= LOG_BASE - i2;
        }
        rand2.e = e;
        rand2.c = c;
        return rand2;
      };
    }();
    BigNumber2.sum = function() {
      var i2 = 1, args = arguments, sum = new BigNumber2(args[0]);
      for (; i2 < args.length; ) sum = sum.plus(args[i2++]);
      return sum;
    };
    convertBase = /* @__PURE__ */ function() {
      var decimal = "0123456789";
      function toBaseOut(str, baseIn, baseOut, alphabet) {
        var j, arr = [0], arrL, i2 = 0, len2 = str.length;
        for (; i2 < len2; ) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;
          arr[0] += alphabet.indexOf(str.charAt(i2++));
          for (j = 0; j < arr.length; j++) {
            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }
        return arr.reverse();
      }
      return function(str, baseIn, baseOut, sign, callerIsToString) {
        var alphabet, d, e, k, r2, x, xc, y, i2 = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
        if (i2 >= 0) {
          k = POW_PRECISION;
          POW_PRECISION = 0;
          str = str.replace(".", "");
          y = new BigNumber2(baseIn);
          x = y.pow(str.length - i2);
          POW_PRECISION = k;
          y.c = toBaseOut(
            toFixedPoint(coeffToString(x.c), x.e, "0"),
            10,
            baseOut,
            decimal
          );
          y.e = y.c.length;
        }
        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
        e = k = xc.length;
        for (; xc[--k] == 0; xc.pop()) ;
        if (!xc[0]) return alphabet.charAt(0);
        if (i2 < 0) {
          --e;
        } else {
          x.c = xc;
          x.e = e;
          x.s = sign;
          x = div(x, y, dp, rm, baseOut);
          xc = x.c;
          r2 = x.r;
          e = x.e;
        }
        d = e + dp + 1;
        i2 = xc[d];
        k = baseOut / 2;
        r2 = r2 || d < 0 || xc[d + 1] != null;
        r2 = rm < 4 ? (i2 != null || r2) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i2 > k || i2 == k && (rm == 4 || r2 || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
        if (d < 1 || !xc[0]) {
          str = r2 ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
        } else {
          xc.length = d;
          if (r2) {
            for (--baseOut; ++xc[--d] > baseOut; ) {
              xc[d] = 0;
              if (!d) {
                ++e;
                xc = [1].concat(xc);
              }
            }
          }
          for (k = xc.length; !xc[--k]; ) ;
          for (i2 = 0, str = ""; i2 <= k; str += alphabet.charAt(xc[i2++])) ;
          str = toFixedPoint(str, e, alphabet.charAt(0));
        }
        return str;
      };
    }();
    div = /* @__PURE__ */ function() {
      function multiply(x, k, base2) {
        var m, temp, xlo, xhi, carry = 0, i2 = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
        for (x = x.slice(); i2--; ) {
          xlo = x[i2] % SQRT_BASE;
          xhi = x[i2] / SQRT_BASE | 0;
          m = khi * xlo + xhi * klo;
          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
          carry = (temp / base2 | 0) + (m / SQRT_BASE | 0) + khi * xhi;
          x[i2] = temp % base2;
        }
        if (carry) x = [carry].concat(x);
        return x;
      }
      function compare2(a, b, aL, bL) {
        var i2, cmp2;
        if (aL != bL) {
          cmp2 = aL > bL ? 1 : -1;
        } else {
          for (i2 = cmp2 = 0; i2 < aL; i2++) {
            if (a[i2] != b[i2]) {
              cmp2 = a[i2] > b[i2] ? 1 : -1;
              break;
            }
          }
        }
        return cmp2;
      }
      function subtract(a, b, aL, base2) {
        var i2 = 0;
        for (; aL--; ) {
          a[aL] -= i2;
          i2 = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i2 * base2 + a[aL] - b[aL];
        }
        for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
      }
      return function(x, y, dp, rm, base2) {
        var cmp2, e, i2, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s2 = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
        if (!xc || !xc[0] || !yc || !yc[0]) {
          return new BigNumber2(
            // Return NaN if either NaN, or both Infinity or 0.
            !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
              // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
              xc && xc[0] == 0 || !yc ? s2 * 0 : s2 / 0
            )
          );
        }
        q = new BigNumber2(s2);
        qc = q.c = [];
        e = x.e - y.e;
        s2 = dp + e + 1;
        if (!base2) {
          base2 = BASE;
          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
          s2 = s2 / LOG_BASE | 0;
        }
        for (i2 = 0; yc[i2] == (xc[i2] || 0); i2++) ;
        if (yc[i2] > (xc[i2] || 0)) e--;
        if (s2 < 0) {
          qc.push(1);
          more = true;
        } else {
          xL = xc.length;
          yL = yc.length;
          i2 = 0;
          s2 += 2;
          n = mathfloor(base2 / (yc[0] + 1));
          if (n > 1) {
            yc = multiply(yc, n, base2);
            xc = multiply(xc, n, base2);
            yL = yc.length;
            xL = xc.length;
          }
          xi = yL;
          rem = xc.slice(0, yL);
          remL = rem.length;
          for (; remL < yL; rem[remL++] = 0) ;
          yz = yc.slice();
          yz = [0].concat(yz);
          yc0 = yc[0];
          if (yc[1] >= base2 / 2) yc0++;
          do {
            n = 0;
            cmp2 = compare2(yc, rem, yL, remL);
            if (cmp2 < 0) {
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base2 + (rem[1] || 0);
              n = mathfloor(rem0 / yc0);
              if (n > 1) {
                if (n >= base2) n = base2 - 1;
                prod = multiply(yc, n, base2);
                prodL = prod.length;
                remL = rem.length;
                while (compare2(prod, rem, prodL, remL) == 1) {
                  n--;
                  subtract(prod, yL < prodL ? yz : yc, prodL, base2);
                  prodL = prod.length;
                  cmp2 = 1;
                }
              } else {
                if (n == 0) {
                  cmp2 = n = 1;
                }
                prod = yc.slice();
                prodL = prod.length;
              }
              if (prodL < remL) prod = [0].concat(prod);
              subtract(rem, prod, remL, base2);
              remL = rem.length;
              if (cmp2 == -1) {
                while (compare2(yc, rem, yL, remL) < 1) {
                  n++;
                  subtract(rem, yL < remL ? yz : yc, remL, base2);
                  remL = rem.length;
                }
              }
            } else if (cmp2 === 0) {
              n++;
              rem = [0];
            }
            qc[i2++] = n;
            if (rem[0]) {
              rem[remL++] = xc[xi] || 0;
            } else {
              rem = [xc[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] != null) && s2--);
          more = rem[0] != null;
          if (!qc[0]) qc.splice(0, 1);
        }
        if (base2 == BASE) {
          for (i2 = 1, s2 = qc[0]; s2 >= 10; s2 /= 10, i2++) ;
          round(q, dp + (q.e = i2 + e * LOG_BASE - 1) + 1, rm, more);
        } else {
          q.e = e;
          q.r = +more;
        }
        return q;
      };
    }();
    function format(n, i2, rm, id2) {
      var c0, e, ne, len2, str;
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      if (!n.c) return n.toString();
      c0 = n.c[0];
      ne = n.e;
      if (i2 == null) {
        str = coeffToString(n.c);
        str = id2 == 1 || id2 == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
      } else {
        n = round(new BigNumber2(n), i2, rm);
        e = n.e;
        str = coeffToString(n.c);
        len2 = str.length;
        if (id2 == 1 || id2 == 2 && (i2 <= e || e <= TO_EXP_NEG)) {
          for (; len2 < i2; str += "0", len2++) ;
          str = toExponential(str, e);
        } else {
          i2 -= ne;
          str = toFixedPoint(str, e, "0");
          if (e + 1 > len2) {
            if (--i2 > 0) for (str += "."; i2--; str += "0") ;
          } else {
            i2 += e - len2;
            if (i2 > 0) {
              if (e + 1 == len2) str += ".";
              for (; i2--; str += "0") ;
            }
          }
        }
      }
      return n.s < 0 && c0 ? "-" + str : str;
    }
    function maxOrMin(args, n) {
      var k, y, i2 = 1, x = new BigNumber2(args[0]);
      for (; i2 < args.length; i2++) {
        y = new BigNumber2(args[i2]);
        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
          x = y;
        }
      }
      return x;
    }
    function normalise(n, c, e) {
      var i2 = 1, j = c.length;
      for (; !c[--j]; c.pop()) ;
      for (j = c[0]; j >= 10; j /= 10, i2++) ;
      if ((e = i2 + e * LOG_BASE - 1) > MAX_EXP) {
        n.c = n.e = null;
      } else if (e < MIN_EXP) {
        n.c = [n.e = 0];
      } else {
        n.e = e;
        n.c = c;
      }
      return n;
    }
    parseNumeric = /* @__PURE__ */ function() {
      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
      return function(x, str, isNum, b) {
        var base2, s2 = isNum ? str : str.replace(whitespaceOrPlus, "");
        if (isInfinityOrNaN.test(s2)) {
          x.s = isNaN(s2) ? null : s2 < 0 ? -1 : 1;
        } else {
          if (!isNum) {
            s2 = s2.replace(basePrefix, function(m, p1, p2) {
              base2 = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
              return !b || b == base2 ? p1 : m;
            });
            if (b) {
              base2 = b;
              s2 = s2.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
            }
            if (str != s2) return new BigNumber2(s2, base2);
          }
          if (BigNumber2.DEBUG) {
            throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
          }
          x.s = null;
        }
        x.c = x.e = null;
      };
    }();
    function round(x, sd, rm, r2) {
      var d, i2, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
      if (xc) {
        out: {
          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) ;
          i2 = sd - d;
          if (i2 < 0) {
            i2 += LOG_BASE;
            j = sd;
            n = xc[ni = 0];
            rd = mathfloor(n / pows10[d - j - 1] % 10);
          } else {
            ni = mathceil((i2 + 1) / LOG_BASE);
            if (ni >= xc.length) {
              if (r2) {
                for (; xc.length <= ni; xc.push(0)) ;
                n = rd = 0;
                d = 1;
                i2 %= LOG_BASE;
                j = i2 - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              n = k = xc[ni];
              for (d = 1; k >= 10; k /= 10, d++) ;
              i2 %= LOG_BASE;
              j = i2 - LOG_BASE + d;
              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
            }
          }
          r2 = r2 || sd < 0 || // Are there any non-zero digits after the rounding digit?
          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
          r2 = rm < 4 ? (rd || r2) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r2 || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
          (i2 > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
          if (sd < 1 || !xc[0]) {
            xc.length = 0;
            if (r2) {
              sd -= x.e + 1;
              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
              x.e = -sd || 0;
            } else {
              xc[0] = x.e = 0;
            }
            return x;
          }
          if (i2 == 0) {
            xc.length = ni;
            k = 1;
            ni--;
          } else {
            xc.length = ni + 1;
            k = pows10[LOG_BASE - i2];
            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
          }
          if (r2) {
            for (; ; ) {
              if (ni == 0) {
                for (i2 = 1, j = xc[0]; j >= 10; j /= 10, i2++) ;
                j = xc[0] += k;
                for (k = 1; j >= 10; j /= 10, k++) ;
                if (i2 != k) {
                  x.e++;
                  if (xc[0] == BASE) xc[0] = 1;
                }
                break;
              } else {
                xc[ni] += k;
                if (xc[ni] != BASE) break;
                xc[ni--] = 0;
                k = 1;
              }
            }
          }
          for (i2 = xc.length; xc[--i2] === 0; xc.pop()) ;
        }
        if (x.e > MAX_EXP) {
          x.c = x.e = null;
        } else if (x.e < MIN_EXP) {
          x.c = [x.e = 0];
        }
      }
      return x;
    }
    function valueOf(n) {
      var str, e = n.e;
      if (e === null) return n.toString();
      str = coeffToString(n.c);
      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
      return n.s < 0 ? "-" + str : str;
    }
    P.absoluteValue = P.abs = function() {
      var x = new BigNumber2(this);
      if (x.s < 0) x.s = 1;
      return x;
    };
    P.comparedTo = function(y, b) {
      return compare(this, new BigNumber2(y, b));
    };
    P.decimalPlaces = P.dp = function(dp, rm) {
      var c, n, v, x = this;
      if (dp != null) {
        intCheck(dp, 0, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);
        return round(new BigNumber2(x), dp + x.e + 1, rm);
      }
      if (!(c = x.c)) return null;
      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) ;
      if (n < 0) n = 0;
      return n;
    };
    P.dividedBy = P.div = function(y, b) {
      return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    };
    P.dividedToIntegerBy = P.idiv = function(y, b) {
      return div(this, new BigNumber2(y, b), 0, 1);
    };
    P.exponentiatedBy = P.pow = function(n, m) {
      var half, isModExp, i2, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
      n = new BigNumber2(n);
      if (n.c && !n.isInteger()) {
        throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
      }
      if (m != null) m = new BigNumber2(m);
      nIsBig = n.e > 14;
      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
        y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
        return m ? y.mod(m) : y;
      }
      nIsNeg = n.s < 0;
      if (m) {
        if (m.c ? !m.c[0] : !m.s) return new BigNumber2(NaN);
        isModExp = !nIsNeg && x.isInteger() && m.isInteger();
        if (isModExp) x = x.mod(m);
      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
        k = x.s < 0 && isOdd(n) ? -0 : 0;
        if (x.e > -1) k = 1 / k;
        return new BigNumber2(nIsNeg ? 1 / k : k);
      } else if (POW_PRECISION) {
        k = mathceil(POW_PRECISION / LOG_BASE + 2);
      }
      if (nIsBig) {
        half = new BigNumber2(0.5);
        if (nIsNeg) n.s = 1;
        nIsOdd = isOdd(n);
      } else {
        i2 = Math.abs(+valueOf(n));
        nIsOdd = i2 % 2;
      }
      y = new BigNumber2(ONE);
      for (; ; ) {
        if (nIsOdd) {
          y = y.times(x);
          if (!y.c) break;
          if (k) {
            if (y.c.length > k) y.c.length = k;
          } else if (isModExp) {
            y = y.mod(m);
          }
        }
        if (i2) {
          i2 = mathfloor(i2 / 2);
          if (i2 === 0) break;
          nIsOdd = i2 % 2;
        } else {
          n = n.times(half);
          round(n, n.e + 1, 1);
          if (n.e > 14) {
            nIsOdd = isOdd(n);
          } else {
            i2 = +valueOf(n);
            if (i2 === 0) break;
            nIsOdd = i2 % 2;
          }
        }
        x = x.times(x);
        if (k) {
          if (x.c && x.c.length > k) x.c.length = k;
        } else if (isModExp) {
          x = x.mod(m);
        }
      }
      if (isModExp) return y;
      if (nIsNeg) y = ONE.div(y);
      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
    };
    P.integerValue = function(rm) {
      var n = new BigNumber2(this);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      return round(n, n.e + 1, rm);
    };
    P.isEqualTo = P.eq = function(y, b) {
      return compare(this, new BigNumber2(y, b)) === 0;
    };
    P.isFinite = function() {
      return !!this.c;
    };
    P.isGreaterThan = P.gt = function(y, b) {
      return compare(this, new BigNumber2(y, b)) > 0;
    };
    P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
      return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
    };
    P.isInteger = function() {
      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };
    P.isLessThan = P.lt = function(y, b) {
      return compare(this, new BigNumber2(y, b)) < 0;
    };
    P.isLessThanOrEqualTo = P.lte = function(y, b) {
      return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
    };
    P.isNaN = function() {
      return !this.s;
    };
    P.isNegative = function() {
      return this.s < 0;
    };
    P.isPositive = function() {
      return this.s > 0;
    };
    P.isZero = function() {
      return !!this.c && this.c[0] == 0;
    };
    P.minus = function(y, b) {
      var i2, j, t2, xLTy, x = this, a = x.s;
      y = new BigNumber2(y, b);
      b = y.s;
      if (!a || !b) return new BigNumber2(NaN);
      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }
      var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
      if (!xe || !ye) {
        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
        if (!xc[0] || !yc[0]) {
          return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
            // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
            ROUNDING_MODE == 3 ? -0 : 0
          ));
        }
      }
      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();
      if (a = xe - ye) {
        if (xLTy = a < 0) {
          a = -a;
          t2 = xc;
        } else {
          ye = xe;
          t2 = yc;
        }
        t2.reverse();
        for (b = a; b--; t2.push(0)) ;
        t2.reverse();
      } else {
        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
        for (a = b = 0; b < j; b++) {
          if (xc[b] != yc[b]) {
            xLTy = xc[b] < yc[b];
            break;
          }
        }
      }
      if (xLTy) {
        t2 = xc;
        xc = yc;
        yc = t2;
        y.s = -y.s;
      }
      b = (j = yc.length) - (i2 = xc.length);
      if (b > 0) for (; b--; xc[i2++] = 0) ;
      b = BASE - 1;
      for (; j > a; ) {
        if (xc[--j] < yc[j]) {
          for (i2 = j; i2 && !xc[--i2]; xc[i2] = b) ;
          --xc[i2];
          xc[j] += BASE;
        }
        xc[j] -= yc[j];
      }
      for (; xc[0] == 0; xc.splice(0, 1), --ye) ;
      if (!xc[0]) {
        y.s = ROUNDING_MODE == 3 ? -1 : 1;
        y.c = [y.e = 0];
        return y;
      }
      return normalise(y, xc, ye);
    };
    P.modulo = P.mod = function(y, b) {
      var q, s2, x = this;
      y = new BigNumber2(y, b);
      if (!x.c || !y.s || y.c && !y.c[0]) {
        return new BigNumber2(NaN);
      } else if (!y.c || x.c && !x.c[0]) {
        return new BigNumber2(x);
      }
      if (MODULO_MODE == 9) {
        s2 = y.s;
        y.s = 1;
        q = div(x, y, 0, 3);
        y.s = s2;
        q.s *= s2;
      } else {
        q = div(x, y, 0, MODULO_MODE);
      }
      y = x.minus(q.times(y));
      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
      return y;
    };
    P.multipliedBy = P.times = function(y, b) {
      var c, e, i2, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base2, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
      if (!xc || !yc || !xc[0] || !yc[0]) {
        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
          y.c = y.e = y.s = null;
        } else {
          y.s *= x.s;
          if (!xc || !yc) {
            y.c = y.e = null;
          } else {
            y.c = [0];
            y.e = 0;
          }
        }
        return y;
      }
      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
      y.s *= x.s;
      xcL = xc.length;
      ycL = yc.length;
      if (xcL < ycL) {
        zc = xc;
        xc = yc;
        yc = zc;
        i2 = xcL;
        xcL = ycL;
        ycL = i2;
      }
      for (i2 = xcL + ycL, zc = []; i2--; zc.push(0)) ;
      base2 = BASE;
      sqrtBase = SQRT_BASE;
      for (i2 = ycL; --i2 >= 0; ) {
        c = 0;
        ylo = yc[i2] % sqrtBase;
        yhi = yc[i2] / sqrtBase | 0;
        for (k = xcL, j = i2 + k; j > i2; ) {
          xlo = xc[--k] % sqrtBase;
          xhi = xc[k] / sqrtBase | 0;
          m = yhi * xlo + xhi * ylo;
          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
          c = (xlo / base2 | 0) + (m / sqrtBase | 0) + yhi * xhi;
          zc[j--] = xlo % base2;
        }
        zc[j] = c;
      }
      if (c) {
        ++e;
      } else {
        zc.splice(0, 1);
      }
      return normalise(y, zc, e);
    };
    P.negated = function() {
      var x = new BigNumber2(this);
      x.s = -x.s || null;
      return x;
    };
    P.plus = function(y, b) {
      var t2, x = this, a = x.s;
      y = new BigNumber2(y, b);
      b = y.s;
      if (!a || !b) return new BigNumber2(NaN);
      if (a != b) {
        y.s = -b;
        return x.minus(y);
      }
      var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
      if (!xe || !ye) {
        if (!xc || !yc) return new BigNumber2(a / 0);
        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
      }
      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();
      if (a = xe - ye) {
        if (a > 0) {
          ye = xe;
          t2 = yc;
        } else {
          a = -a;
          t2 = xc;
        }
        t2.reverse();
        for (; a--; t2.push(0)) ;
        t2.reverse();
      }
      a = xc.length;
      b = yc.length;
      if (a - b < 0) {
        t2 = yc;
        yc = xc;
        xc = t2;
        b = a;
      }
      for (a = 0; b; ) {
        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
      }
      if (a) {
        xc = [a].concat(xc);
        ++ye;
      }
      return normalise(y, xc, ye);
    };
    P.precision = P.sd = function(sd, rm) {
      var c, n, v, x = this;
      if (sd != null && sd !== !!sd) {
        intCheck(sd, 1, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);
        return round(new BigNumber2(x), sd, rm);
      }
      if (!(c = x.c)) return null;
      v = c.length - 1;
      n = v * LOG_BASE + 1;
      if (v = c[v]) {
        for (; v % 10 == 0; v /= 10, n--) ;
        for (v = c[0]; v >= 10; v /= 10, n++) ;
      }
      if (sd && x.e + 1 > n) n = x.e + 1;
      return n;
    };
    P.shiftedBy = function(k) {
      intCheck(k, -9007199254740991, MAX_SAFE_INTEGER$1);
      return this.times("1e" + k);
    };
    P.squareRoot = P.sqrt = function() {
      var m, n, r2, rep, t2, x = this, c = x.c, s2 = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
      if (s2 !== 1 || !c || !c[0]) {
        return new BigNumber2(!s2 || s2 < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
      }
      s2 = Math.sqrt(+valueOf(x));
      if (s2 == 0 || s2 == 1 / 0) {
        n = coeffToString(c);
        if ((n.length + e) % 2 == 0) n += "0";
        s2 = Math.sqrt(+n);
        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
        if (s2 == 1 / 0) {
          n = "5e" + e;
        } else {
          n = s2.toExponential();
          n = n.slice(0, n.indexOf("e") + 1) + e;
        }
        r2 = new BigNumber2(n);
      } else {
        r2 = new BigNumber2(s2 + "");
      }
      if (r2.c[0]) {
        e = r2.e;
        s2 = e + dp;
        if (s2 < 3) s2 = 0;
        for (; ; ) {
          t2 = r2;
          r2 = half.times(t2.plus(div(x, t2, dp, 1)));
          if (coeffToString(t2.c).slice(0, s2) === (n = coeffToString(r2.c)).slice(0, s2)) {
            if (r2.e < e) --s2;
            n = n.slice(s2 - 3, s2 + 1);
            if (n == "9999" || !rep && n == "4999") {
              if (!rep) {
                round(t2, t2.e + DECIMAL_PLACES + 2, 0);
                if (t2.times(t2).eq(x)) {
                  r2 = t2;
                  break;
                }
              }
              dp += 4;
              s2 += 4;
              rep = 1;
            } else {
              if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                round(r2, r2.e + DECIMAL_PLACES + 2, 1);
                m = !r2.times(r2).eq(x);
              }
              break;
            }
          }
        }
      }
      return round(r2, r2.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    };
    P.toExponential = function(dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp++;
      }
      return format(this, dp, rm, 1);
    };
    P.toFixed = function(dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp = dp + this.e + 1;
      }
      return format(this, dp, rm);
    };
    P.toFormat = function(dp, rm, format2) {
      var str, x = this;
      if (format2 == null) {
        if (dp != null && rm && typeof rm == "object") {
          format2 = rm;
          rm = null;
        } else if (dp && typeof dp == "object") {
          format2 = dp;
          dp = rm = null;
        } else {
          format2 = FORMAT;
        }
      } else if (typeof format2 != "object") {
        throw Error(bignumberError + "Argument not an object: " + format2);
      }
      str = x.toFixed(dp, rm);
      if (x.c) {
        var i2, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len2 = intDigits.length;
        if (g2) {
          i2 = g1;
          g1 = g2;
          g2 = i2;
          len2 -= i2;
        }
        if (g1 > 0 && len2 > 0) {
          i2 = len2 % g1 || g1;
          intPart = intDigits.substr(0, i2);
          for (; i2 < len2; i2 += g1) intPart += groupSeparator + intDigits.substr(i2, g1);
          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i2);
          if (isNeg) intPart = "-" + intPart;
        }
        str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
          new RegExp("\\d{" + g2 + "}\\B", "g"),
          "$&" + (format2.fractionGroupSeparator || "")
        ) : fractionPart) : intPart;
      }
      return (format2.prefix || "") + str + (format2.suffix || "");
    };
    P.toFraction = function(md) {
      var d, d0, d1, d2, e, exp, n, n0, n1, q, r2, s2, x = this, xc = x.c;
      if (md != null) {
        n = new BigNumber2(md);
        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
          throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
        }
      }
      if (!xc) return new BigNumber2(x);
      d = new BigNumber2(ONE);
      n1 = d0 = new BigNumber2(ONE);
      d1 = n0 = new BigNumber2(ONE);
      s2 = coeffToString(xc);
      e = d.e = s2.length - x.e - 1;
      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
      exp = MAX_EXP;
      MAX_EXP = 1 / 0;
      n = new BigNumber2(s2);
      n0.c[0] = 0;
      for (; ; ) {
        q = div(n, d, 0, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.comparedTo(md) == 1) break;
        d0 = d1;
        d1 = d2;
        n1 = n0.plus(q.times(d2 = n1));
        n0 = d2;
        d = n.minus(q.times(d2 = d));
        n = d2;
      }
      d2 = div(md.minus(d0), d1, 0, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      e = e * 2;
      r2 = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
      ) < 1 ? [n1, d1] : [n0, d0];
      MAX_EXP = exp;
      return r2;
    };
    P.toNumber = function() {
      return +valueOf(this);
    };
    P.toPrecision = function(sd, rm) {
      if (sd != null) intCheck(sd, 1, MAX);
      return format(this, sd, rm, 2);
    };
    P.toString = function(b) {
      var str, n = this, s2 = n.s, e = n.e;
      if (e === null) {
        if (s2) {
          str = "Infinity";
          if (s2 < 0) str = "-" + str;
        } else {
          str = "NaN";
        }
      } else {
        if (b == null) {
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
          n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
          str = toFixedPoint(coeffToString(n.c), n.e, "0");
        } else {
          intCheck(b, 2, ALPHABET.length, "Base");
          str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s2, true);
        }
        if (s2 < 0 && n.c[0]) str = "-" + str;
      }
      return str;
    };
    P.valueOf = P.toJSON = function() {
      return valueOf(this);
    };
    P._isBigNumber = true;
    P[Symbol.toStringTag] = "BigNumber";
    P[Symbol.for("nodejs.util.inspect.custom")] = P.valueOf;
    if (configObject != null) BigNumber2.set(configObject);
    return BigNumber2;
  }
  function bitFloor(n) {
    var i2 = n | 0;
    return n > 0 || n === i2 ? i2 : i2 - 1;
  }
  function coeffToString(a) {
    var s2, z, i2 = 1, j = a.length, r2 = a[0] + "";
    for (; i2 < j; ) {
      s2 = a[i2++] + "";
      z = LOG_BASE - s2.length;
      for (; z--; s2 = "0" + s2) ;
      r2 += s2;
    }
    for (j = r2.length; r2.charCodeAt(--j) === 48; ) ;
    return r2.slice(0, j + 1 || 1);
  }
  function compare(x, y) {
    var a, b, xc = x.c, yc = y.c, i2 = x.s, j = y.s, k = x.e, l = y.e;
    if (!i2 || !j) return null;
    a = xc && !xc[0];
    b = yc && !yc[0];
    if (a || b) return a ? b ? 0 : -j : i2;
    if (i2 != j) return i2;
    a = i2 < 0;
    b = k == l;
    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
    if (!b) return k > l ^ a ? 1 : -1;
    j = (k = xc.length) < (l = yc.length) ? k : l;
    for (i2 = 0; i2 < j; i2++) if (xc[i2] != yc[i2]) return xc[i2] > yc[i2] ^ a ? 1 : -1;
    return k == l ? 0 : k > l ^ a ? 1 : -1;
  }
  function intCheck(n, min2, max2, name) {
    if (n < min2 || n > max2 || n !== mathfloor(n)) {
      throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min2 || n > max2 ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
    }
  }
  function isOdd(n) {
    var k = n.c.length - 1;
    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
  }
  function toExponential(str, e) {
    return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
  }
  function toFixedPoint(str, e, z) {
    var len2, zs;
    if (e < 0) {
      for (zs = z + "."; ++e; zs += z) ;
      str = zs + str;
    } else {
      len2 = str.length;
      if (++e > len2) {
        for (zs = z, e -= len2; --e; zs += z) ;
        str += zs;
      } else if (e < len2) {
        str = str.slice(0, e) + "." + str.slice(e);
      }
    }
    return str;
  }
  var BigNumber$1 = clone();
  const version$9 = "logger/5.8.0";
  let _permanentCensorErrors = false;
  let _censorErrors = false;
  const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
  let _logLevel = LogLevels["default"];
  let _globalLogger = null;
  function _checkNormalize() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error2) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
        throw new Error("broken implementation");
      }
    } catch (error2) {
      return error2.message;
    }
    return null;
  }
  const _normalizeError = _checkNormalize();
  var LogLevel;
  (function(LogLevel2) {
    LogLevel2["DEBUG"] = "DEBUG";
    LogLevel2["INFO"] = "INFO";
    LogLevel2["WARNING"] = "WARNING";
    LogLevel2["ERROR"] = "ERROR";
    LogLevel2["OFF"] = "OFF";
  })(LogLevel || (LogLevel = {}));
  var ErrorCode;
  (function(ErrorCode2) {
    ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
    ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
    ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
    ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
    ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
    ErrorCode2["TIMEOUT"] = "TIMEOUT";
    ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
    ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
    ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
    ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
    ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
    ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
    ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
    ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
    ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
    ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
    ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
    ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
    ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
  })(ErrorCode || (ErrorCode = {}));
  const HEX = "0123456789abcdef";
  class Logger {
    constructor(version2) {
      Object.defineProperty(this, "version", {
        enumerable: true,
        value: version2,
        writable: false
      });
    }
    _log(logLevel, args) {
      const level = logLevel.toLowerCase();
      if (LogLevels[level] == null) {
        this.throwArgumentError("invalid log level name", "logLevel", logLevel);
      }
      if (_logLevel > LogLevels[level]) {
        return;
      }
      console.log.apply(console, args);
    }
    debug(...args) {
      this._log(Logger.levels.DEBUG, args);
    }
    info(...args) {
      this._log(Logger.levels.INFO, args);
    }
    warn(...args) {
      this._log(Logger.levels.WARNING, args);
    }
    makeError(message, code2, params) {
      if (_censorErrors) {
        return this.makeError("censored error", code2, {});
      }
      if (!code2) {
        code2 = Logger.errors.UNKNOWN_ERROR;
      }
      if (!params) {
        params = {};
      }
      const messageDetails = [];
      Object.keys(params).forEach((key2) => {
        const value = params[key2];
        try {
          if (value instanceof Uint8Array) {
            let hex2 = "";
            for (let i2 = 0; i2 < value.length; i2++) {
              hex2 += HEX[value[i2] >> 4];
              hex2 += HEX[value[i2] & 15];
            }
            messageDetails.push(key2 + "=Uint8Array(0x" + hex2 + ")");
          } else {
            messageDetails.push(key2 + "=" + JSON.stringify(value));
          }
        } catch (error3) {
          messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
        }
      });
      messageDetails.push(`code=${code2}`);
      messageDetails.push(`version=${this.version}`);
      const reason = message;
      let url = "";
      switch (code2) {
        case ErrorCode.NUMERIC_FAULT: {
          url = "NUMERIC_FAULT";
          const fault = message;
          switch (fault) {
            case "overflow":
            case "underflow":
            case "division-by-zero":
              url += "-" + fault;
              break;
            case "negative-power":
            case "negative-width":
              url += "-unsupported";
              break;
            case "unbound-bitwise-result":
              url += "-unbound-result";
              break;
          }
          break;
        }
        case ErrorCode.CALL_EXCEPTION:
        case ErrorCode.INSUFFICIENT_FUNDS:
        case ErrorCode.MISSING_NEW:
        case ErrorCode.NONCE_EXPIRED:
        case ErrorCode.REPLACEMENT_UNDERPRICED:
        case ErrorCode.TRANSACTION_REPLACED:
        case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
          url = code2;
          break;
      }
      if (url) {
        message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
      }
      if (messageDetails.length) {
        message += " (" + messageDetails.join(", ") + ")";
      }
      const error2 = new Error(message);
      error2.reason = reason;
      error2.code = code2;
      Object.keys(params).forEach(function(key2) {
        error2[key2] = params[key2];
      });
      return error2;
    }
    throwError(message, code2, params) {
      throw this.makeError(message, code2, params);
    }
    throwArgumentError(message, name, value) {
      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
        argument: name,
        value
      });
    }
    assert(condition, message, code2, params) {
      if (!!condition) {
        return;
      }
      this.throwError(message, code2, params);
    }
    assertArgument(condition, message, name, value) {
      if (!!condition) {
        return;
      }
      this.throwArgumentError(message, name, value);
    }
    checkNormalize(message) {
      if (_normalizeError) {
        this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "String.prototype.normalize",
          form: _normalizeError
        });
      }
    }
    checkSafeUint53(value, message) {
      if (typeof value !== "number") {
        return;
      }
      if (message == null) {
        message = "value not safe";
      }
      if (value < 0 || value >= 9007199254740991) {
        this.throwError(message, Logger.errors.NUMERIC_FAULT, {
          operation: "checkSafeInteger",
          fault: "out-of-safe-range",
          value
        });
      }
      if (value % 1) {
        this.throwError(message, Logger.errors.NUMERIC_FAULT, {
          operation: "checkSafeInteger",
          fault: "non-integer",
          value
        });
      }
    }
    checkArgumentCount(count, expectedCount, message) {
      if (message) {
        message = ": " + message;
      } else {
        message = "";
      }
      if (count < expectedCount) {
        this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
          count,
          expectedCount
        });
      }
      if (count > expectedCount) {
        this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
          count,
          expectedCount
        });
      }
    }
    checkNew(target, kind) {
      if (target === Object || target == null) {
        this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
      }
    }
    checkAbstract(target, kind) {
      if (target === kind) {
        this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
      } else if (target === Object || target == null) {
        this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
      }
    }
    static globalLogger() {
      if (!_globalLogger) {
        _globalLogger = new Logger(version$9);
      }
      return _globalLogger;
    }
    static setCensorship(censorship, permanent) {
      if (!censorship && permanent) {
        this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setCensorship"
        });
      }
      if (_permanentCensorErrors) {
        if (!censorship) {
          return;
        }
        this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setCensorship"
        });
      }
      _censorErrors = !!censorship;
      _permanentCensorErrors = !!permanent;
    }
    static setLogLevel(logLevel) {
      const level = LogLevels[logLevel.toLowerCase()];
      if (level == null) {
        Logger.globalLogger().warn("invalid log level - " + logLevel);
        return;
      }
      _logLevel = level;
    }
    static from(version2) {
      return new Logger(version2);
    }
  }
  Logger.errors = ErrorCode;
  Logger.levels = LogLevel;
  const version$8 = "bytes/5.8.0";
  const logger$c = new Logger(version$8);
  function isHexable(value) {
    return !!value.toHexString;
  }
  function addSlice(array2) {
    if (array2.slice) {
      return array2;
    }
    array2.slice = function() {
      const args = Array.prototype.slice.call(arguments);
      return addSlice(new Uint8Array(Array.prototype.slice.apply(array2, args)));
    };
    return array2;
  }
  function isBytesLike(value) {
    return isHexString$1(value) && !(value.length % 2) || isBytes$5(value);
  }
  function isInteger(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes$5(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger(value.length) || value.length < 0) {
      return false;
    }
    for (let i2 = 0; i2 < value.length; i2++) {
      const v = value[i2];
      if (!isInteger(v) || v < 0 || v >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger$c.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice(new Uint8Array(result));
    }
    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (isHexable(value)) {
      value = value.toHexString();
    }
    if (isHexString$1(value)) {
      let hex2 = value.substring(2);
      if (hex2.length % 2) {
        if (options.hexPad === "left") {
          hex2 = "0" + hex2;
        } else if (options.hexPad === "right") {
          hex2 += "0";
        } else {
          logger$c.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i2 = 0; i2 < hex2.length; i2 += 2) {
        result.push(parseInt(hex2.substring(i2, i2 + 2), 16));
      }
      return addSlice(new Uint8Array(result));
    }
    if (isBytes$5(value)) {
      return addSlice(new Uint8Array(value));
    }
    return logger$c.throwArgumentError("invalid arrayify value", "value", value);
  }
  function concat(items) {
    const objects = items.map((item) => arrayify(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice(result);
  }
  function stripZeros(value) {
    let result = arrayify(value);
    if (result.length === 0) {
      return result;
    }
    let start = 0;
    while (start < result.length && result[start] === 0) {
      start++;
    }
    if (start) {
      result = result.slice(start);
    }
    return result;
  }
  function zeroPad(value, length) {
    value = arrayify(value);
    if (value.length > length) {
      logger$c.throwArgumentError("value out of range", "value", arguments[0]);
    }
    const result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice(result);
  }
  function isHexString$1(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  const HexCharacters = "0123456789abcdef";
  function hexlify(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger$c.checkSafeUint53(value, "invalid hexlify value");
      let hex2 = "";
      while (value) {
        hex2 = HexCharacters[value & 15] + hex2;
        value = Math.floor(value / 16);
      }
      if (hex2.length) {
        if (hex2.length % 2) {
          hex2 = "0" + hex2;
        }
        return "0x" + hex2;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (isHexable(value)) {
      return value.toHexString();
    }
    if (isHexString$1(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger$c.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes$5(value)) {
      let result = "0x";
      for (let i2 = 0; i2 < value.length; i2++) {
        let v = value[i2];
        result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
      }
      return result;
    }
    return logger$c.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataLength(data) {
    if (typeof data !== "string") {
      data = hexlify(data);
    } else if (!isHexString$1(data) || data.length % 2) {
      return null;
    }
    return (data.length - 2) / 2;
  }
  function hexDataSlice(data, offset, endOffset) {
    if (typeof data !== "string") {
      data = hexlify(data);
    } else if (!isHexString$1(data) || data.length % 2) {
      logger$c.throwArgumentError("invalid hexData", "value", data);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
      return "0x" + data.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data.substring(offset);
  }
  function hexConcat(items) {
    let result = "0x";
    items.forEach((item) => {
      result += hexlify(item).substring(2);
    });
    return result;
  }
  function hexZeroPad(value, length) {
    if (typeof value !== "string") {
      value = hexlify(value);
    } else if (!isHexString$1(value)) {
      logger$c.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
      logger$c.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }
    return value;
  }
  function splitSignature(signature2) {
    const result = {
      r: "0x",
      s: "0x",
      _vs: "0x",
      recoveryParam: 0,
      v: 0,
      yParityAndS: "0x",
      compact: "0x"
    };
    if (isBytesLike(signature2)) {
      let bytes2 = arrayify(signature2);
      if (bytes2.length === 64) {
        result.v = 27 + (bytes2[32] >> 7);
        bytes2[32] &= 127;
        result.r = hexlify(bytes2.slice(0, 32));
        result.s = hexlify(bytes2.slice(32, 64));
      } else if (bytes2.length === 65) {
        result.r = hexlify(bytes2.slice(0, 32));
        result.s = hexlify(bytes2.slice(32, 64));
        result.v = bytes2[64];
      } else {
        logger$c.throwArgumentError("invalid signature string", "signature", signature2);
      }
      if (result.v < 27) {
        if (result.v === 0 || result.v === 1) {
          result.v += 27;
        } else {
          logger$c.throwArgumentError("signature invalid v byte", "signature", signature2);
        }
      }
      result.recoveryParam = 1 - result.v % 2;
      if (result.recoveryParam) {
        bytes2[32] |= 128;
      }
      result._vs = hexlify(bytes2.slice(32, 64));
    } else {
      result.r = signature2.r;
      result.s = signature2.s;
      result.v = signature2.v;
      result.recoveryParam = signature2.recoveryParam;
      result._vs = signature2._vs;
      if (result._vs != null) {
        const vs2 = zeroPad(arrayify(result._vs), 32);
        result._vs = hexlify(vs2);
        const recoveryParam = vs2[0] >= 128 ? 1 : 0;
        if (result.recoveryParam == null) {
          result.recoveryParam = recoveryParam;
        } else if (result.recoveryParam !== recoveryParam) {
          logger$c.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
        }
        vs2[0] &= 127;
        const s2 = hexlify(vs2);
        if (result.s == null) {
          result.s = s2;
        } else if (result.s !== s2) {
          logger$c.throwArgumentError("signature v mismatch _vs", "signature", signature2);
        }
      }
      if (result.recoveryParam == null) {
        if (result.v == null) {
          logger$c.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
        } else if (result.v === 0 || result.v === 1) {
          result.recoveryParam = result.v;
        } else {
          result.recoveryParam = 1 - result.v % 2;
        }
      } else {
        if (result.v == null) {
          result.v = 27 + result.recoveryParam;
        } else {
          const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
          if (result.recoveryParam !== recId) {
            logger$c.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
          }
        }
      }
      if (result.r == null || !isHexString$1(result.r)) {
        logger$c.throwArgumentError("signature missing or invalid r", "signature", signature2);
      } else {
        result.r = hexZeroPad(result.r, 32);
      }
      if (result.s == null || !isHexString$1(result.s)) {
        logger$c.throwArgumentError("signature missing or invalid s", "signature", signature2);
      } else {
        result.s = hexZeroPad(result.s, 32);
      }
      const vs = arrayify(result.s);
      if (vs[0] >= 128) {
        logger$c.throwArgumentError("signature s out of range", "signature", signature2);
      }
      if (result.recoveryParam) {
        vs[0] |= 128;
      }
      const _vs = hexlify(vs);
      if (result._vs) {
        if (!isHexString$1(result._vs)) {
          logger$c.throwArgumentError("signature invalid _vs", "signature", signature2);
        }
        result._vs = hexZeroPad(result._vs, 32);
      }
      if (result._vs == null) {
        result._vs = _vs;
      } else if (result._vs !== _vs) {
        logger$c.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
      }
    }
    result.yParityAndS = result._vs;
    result.compact = result.r + result.yParityAndS.substring(2);
    return result;
  }
  var bn$1 = { exports: {} };
  const __viteBrowserExternal = {};
  const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    default: __viteBrowserExternal
  }, Symbol.toStringTag, { value: "Module" }));
  const require$$0$2 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
  (function(module) {
    (function(module2, exports) {
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number2, base2, endian) {
        if (BN2.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number2 || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN2;
      } else {
        exports.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer3;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer3 = window.Buffer;
        } else {
          Buffer3 = require$$0$2.Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num) {
        if (num instanceof BN2) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
      };
      BN2.max = function max2(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN2.min = function min2(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN2.prototype._init = function init(number2, base2, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base2, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base2 === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number2, base2, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN2.prototype._initArray = function _initArray(number2, base2, endian) {
        assert2(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i2 = number2.length - 1, j = 0; i2 >= 0; i2 -= 3) {
            w = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j = 0; i2 < number2.length; i2 += 3) {
            w = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string2, index) {
        var c = string2.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert2(false, "Invalid character in " + string2);
        }
      }
      function parseHexByte2(string2, lowerBound, index) {
        var r2 = parseHex4Bits(string2, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string2, index - 1) << 4;
        }
        return r2;
      }
      BN2.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
            w = parseHexByte2(number2, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
            w = parseHexByte2(number2, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var b = 0;
        var len2 = Math.min(str.length, end);
        for (var i2 = start; i2 < len2; i2++) {
          var c = str.charCodeAt(i2) - 48;
          r2 *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert2(c >= 0 && b < mul, "Invalid character");
          r2 += b;
        }
        return r2;
      }
      BN2.prototype._parseBase = function _parseBase(number2, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number2.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number2, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow3 = 1;
          word = parseBase(number2, i2, number2.length, base2);
          for (i2 = 0; i2 < mod2; i2++) {
            pow3 *= base2;
          }
          this.imuln(pow3);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN2.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN2.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN2.prototype.clone = function clone2() {
        var r2 = new BN2(null);
        this.copy(r2);
        return r2;
      };
      BN2.prototype._expand = function _expand(size2) {
        while (this.length < size2) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN2.prototype.inspect = inspect;
        }
      } else {
        BN2.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN2.prototype.toString = function toString(base2, padding) {
        base2 = base2 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w = this.words[i2];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN2.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer3) {
        BN2.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer3, endian, length);
        };
      }
      BN2.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size2) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size2);
        }
        return new ArrayType(size2);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength2 = this.byteLength();
        var reqLength = length || Math.max(1, byteLength2);
        assert2(byteLength2 <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength2);
        return res;
      };
      BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength2) {
        var position = 0;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength2) {
        var position = res.length - 1;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t2 = w;
          var r2 = 0;
          if (t2 >= 4096) {
            r2 += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r2 += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r2 += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r2 += 2;
            t2 >>>= 2;
          }
          return r2 + t2;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t2 = w;
        var r2 = 0;
        if ((t2 & 8191) === 0) {
          r2 += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r2 += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r2 += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r2 += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b = this._zeroBits(this.words[i2]);
          r2 += b;
          if (b !== 26) break;
        }
        return r2;
      };
      BN2.prototype.byteLength = function byteLength2() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this._strip();
      };
      BN2.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN2.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b.length;
        return this._strip();
      };
      BN2.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN2.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = a.words[i2] ^ b.words[i2];
        }
        if (this !== a) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN2.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN2.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN2.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN2.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r2 = (a.words[i2] | 0) + (b.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        return this;
      };
      BN2.prototype.add = function add2(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp2 = this.cmp(num);
        if (cmp2 === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp2 > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r2 = (a.words[i2] | 0) - (b.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a.length && a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN2.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len2 = self2.length + num.length | 0;
        out.length = len2;
        len2 = len2 - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len2; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j | 0;
            a = self2.words[i2] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j;
            var a = self2.words[i2] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN2.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len2 = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len2 < 63) {
          res = smallMulTo(this, num, out);
        } else if (len2 < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      BN2.prototype.mul = function mul(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN2.prototype.mulf = function mulf(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN2.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN2.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w = (this.words[i2] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow3(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN2(1);
        var res = this;
        for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
          if (w[i2] !== 0) break;
        }
        if (++i2 < w.length) {
          for (var q = res.sqr(); i2 < w.length; i2++, q = q.sqr()) {
            if (w[i2] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this._strip();
      };
      BN2.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s2;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) ;
        else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask2;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN2.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN2.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN2.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN2.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN2.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2) return false;
        var w = this.words[s2];
        return !!(w & q);
      };
      BN2.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask2;
        }
        return this._strip();
      };
      BN2.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN2.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN2.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN2.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN2.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len2 = num.length + shift;
        var i2;
        this._expand(len2);
        var w;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i2 + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w = -(this.words[i2] | 0) + carry;
          carry = w >> 26;
          this.words[i2] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN2(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i2 = 0; i2 < q.length; i2++) {
            q.words[i2] = 0;
          }
        }
        var diff2 = a.clone()._ishlnsubmul(b, 1, m);
        if (diff2.negative === 0) {
          a = diff2;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN2.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN2(0),
            mod: new BN2(0)
          };
        }
        var div, mod2, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num);
            }
          }
          return {
            div,
            mod: mod2
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN2(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN2(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN2(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN2.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN2.prototype.mod = function mod2(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp2 = mod2.cmp(half);
        if (cmp2 < 0 || r2 === 1 && cmp2 === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p * acc + (this.words[i2] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN2.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN2.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN2.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN2(1);
        var B = new BN2(0);
        var C = new BN2(0);
        var D = new BN2(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i2 = 0, im = 1; (x.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            x.iushrn(i2);
            while (i2-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN2.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            a.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t2 = a;
            a = b;
            b = t2;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd2() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q;
          return this;
        }
        var carry = q;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w = this.words[i2] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i2] = w;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp2(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a = this.words[i2] | 0;
          var b = num.words[i2] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN2.prototype.gt = function gt2(num) {
        return this.cmp(num) === 1;
      };
      BN2.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN2.prototype.gte = function gte2(num) {
        return this.cmp(num) >= 0;
      };
      BN2.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN2.prototype.lt = function lt2(num) {
        return this.cmp(num) === -1;
      };
      BN2.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN2.prototype.lte = function lte2(num) {
        return this.cmp(num) <= 0;
      };
      BN2.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN2.prototype.eq = function eq2(num) {
        return this.cmp(num) === 0;
      };
      BN2.red = function red(num) {
        return new Red(num);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN2.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN2.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN2.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN2.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN2.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN2.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN2(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp2 = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp2 === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp2 > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split2(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits2(K256, MPrime);
      K256.prototype.split = function split2(input, output2) {
        var mask2 = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output2.words[i2] = input.words[i2];
        }
        output2.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output2.words[output2.length++] = prev & mask2;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask2) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w = num.words[i2] | 0;
          lo += w * 977;
          num.words[i2] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits2(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits2(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits2(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN2._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN2._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add2(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow3 = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow3);
        }
        var q = this.m.subn(1);
        var s2 = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s2++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN2(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t2 = this.pow(a, q);
        var m = s2;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert2(i2 < m);
          var b = this.pow(c, new BN2(1).iushln(m - i2 - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t2 = t2.redMul(c);
          m = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow3(a, num) {
        if (num.isZero()) return new BN2(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits2(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t2 = a.imul(b);
        var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t2.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
        var t2 = a.mul(b);
        var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t2.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, globalThis);
  })(bn$1);
  var bnExports$1 = bn$1.exports;
  const _BN = /* @__PURE__ */ getDefaultExportFromCjs(bnExports$1);
  const version$7 = "bignumber/5.8.0";
  var BN$1 = _BN.BN;
  const logger$b = new Logger(version$7);
  const _constructorGuard$1 = {};
  const MAX_SAFE = 9007199254740991;
  let _warnedToStringRadix = false;
  class BigNumber {
    constructor(constructorGuard, hex2) {
      if (constructorGuard !== _constructorGuard$1) {
        logger$b.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new (BigNumber)"
        });
      }
      this._hex = hex2;
      this._isBigNumber = true;
      Object.freeze(this);
    }
    fromTwos(value) {
      return toBigNumber(toBN(this).fromTwos(value));
    }
    toTwos(value) {
      return toBigNumber(toBN(this).toTwos(value));
    }
    abs() {
      if (this._hex[0] === "-") {
        return BigNumber.from(this._hex.substring(1));
      }
      return this;
    }
    add(other) {
      return toBigNumber(toBN(this).add(toBN(other)));
    }
    sub(other) {
      return toBigNumber(toBN(this).sub(toBN(other)));
    }
    div(other) {
      const o = BigNumber.from(other);
      if (o.isZero()) {
        throwFault("division-by-zero", "div");
      }
      return toBigNumber(toBN(this).div(toBN(other)));
    }
    mul(other) {
      return toBigNumber(toBN(this).mul(toBN(other)));
    }
    mod(other) {
      const value = toBN(other);
      if (value.isNeg()) {
        throwFault("division-by-zero", "mod");
      }
      return toBigNumber(toBN(this).umod(value));
    }
    pow(other) {
      const value = toBN(other);
      if (value.isNeg()) {
        throwFault("negative-power", "pow");
      }
      return toBigNumber(toBN(this).pow(value));
    }
    and(other) {
      const value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault("unbound-bitwise-result", "and");
      }
      return toBigNumber(toBN(this).and(value));
    }
    or(other) {
      const value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault("unbound-bitwise-result", "or");
      }
      return toBigNumber(toBN(this).or(value));
    }
    xor(other) {
      const value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault("unbound-bitwise-result", "xor");
      }
      return toBigNumber(toBN(this).xor(value));
    }
    mask(value) {
      if (this.isNegative() || value < 0) {
        throwFault("negative-width", "mask");
      }
      return toBigNumber(toBN(this).maskn(value));
    }
    shl(value) {
      if (this.isNegative() || value < 0) {
        throwFault("negative-width", "shl");
      }
      return toBigNumber(toBN(this).shln(value));
    }
    shr(value) {
      if (this.isNegative() || value < 0) {
        throwFault("negative-width", "shr");
      }
      return toBigNumber(toBN(this).shrn(value));
    }
    eq(other) {
      return toBN(this).eq(toBN(other));
    }
    lt(other) {
      return toBN(this).lt(toBN(other));
    }
    lte(other) {
      return toBN(this).lte(toBN(other));
    }
    gt(other) {
      return toBN(this).gt(toBN(other));
    }
    gte(other) {
      return toBN(this).gte(toBN(other));
    }
    isNegative() {
      return this._hex[0] === "-";
    }
    isZero() {
      return toBN(this).isZero();
    }
    toNumber() {
      try {
        return toBN(this).toNumber();
      } catch (error2) {
        throwFault("overflow", "toNumber", this.toString());
      }
      return null;
    }
    toBigInt() {
      try {
        return BigInt(this.toString());
      } catch (e) {
      }
      return logger$b.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
        value: this.toString()
      });
    }
    toString() {
      if (arguments.length > 0) {
        if (arguments[0] === 10) {
          if (!_warnedToStringRadix) {
            _warnedToStringRadix = true;
            logger$b.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
          }
        } else if (arguments[0] === 16) {
          logger$b.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
        } else {
          logger$b.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
        }
      }
      return toBN(this).toString(10);
    }
    toHexString() {
      return this._hex;
    }
    toJSON(key2) {
      return { type: "BigNumber", hex: this.toHexString() };
    }
    static from(value) {
      if (value instanceof BigNumber) {
        return value;
      }
      if (typeof value === "string") {
        if (value.match(/^-?0x[0-9a-f]+$/i)) {
          return new BigNumber(_constructorGuard$1, toHex$1(value));
        }
        if (value.match(/^-?[0-9]+$/)) {
          return new BigNumber(_constructorGuard$1, toHex$1(new BN$1(value)));
        }
        return logger$b.throwArgumentError("invalid BigNumber string", "value", value);
      }
      if (typeof value === "number") {
        if (value % 1) {
          throwFault("underflow", "BigNumber.from", value);
        }
        if (value >= MAX_SAFE || value <= -9007199254740991) {
          throwFault("overflow", "BigNumber.from", value);
        }
        return BigNumber.from(String(value));
      }
      const anyValue = value;
      if (typeof anyValue === "bigint") {
        return BigNumber.from(anyValue.toString());
      }
      if (isBytes$5(anyValue)) {
        return BigNumber.from(hexlify(anyValue));
      }
      if (anyValue) {
        if (anyValue.toHexString) {
          const hex2 = anyValue.toHexString();
          if (typeof hex2 === "string") {
            return BigNumber.from(hex2);
          }
        } else {
          let hex2 = anyValue._hex;
          if (hex2 == null && anyValue.type === "BigNumber") {
            hex2 = anyValue.hex;
          }
          if (typeof hex2 === "string") {
            if (isHexString$1(hex2) || hex2[0] === "-" && isHexString$1(hex2.substring(1))) {
              return BigNumber.from(hex2);
            }
          }
        }
      }
      return logger$b.throwArgumentError("invalid BigNumber value", "value", value);
    }
    static isBigNumber(value) {
      return !!(value && value._isBigNumber);
    }
  }
  function toHex$1(value) {
    if (typeof value !== "string") {
      return toHex$1(value.toString(16));
    }
    if (value[0] === "-") {
      value = value.substring(1);
      if (value[0] === "-") {
        logger$b.throwArgumentError("invalid hex", "value", value);
      }
      value = toHex$1(value);
      if (value === "0x00") {
        return value;
      }
      return "-" + value;
    }
    if (value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (value === "0x") {
      return "0x00";
    }
    if (value.length % 2) {
      value = "0x0" + value.substring(2);
    }
    while (value.length > 4 && value.substring(0, 4) === "0x00") {
      value = "0x" + value.substring(4);
    }
    return value;
  }
  function toBigNumber(value) {
    return BigNumber.from(toHex$1(value));
  }
  function toBN(value) {
    const hex2 = BigNumber.from(value).toHexString();
    if (hex2[0] === "-") {
      return new BN$1("-" + hex2.substring(3), 16);
    }
    return new BN$1(hex2.substring(2), 16);
  }
  function throwFault(fault, operation, value) {
    const params = { fault, operation };
    if (value != null) {
      params.value = value;
    }
    return logger$b.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
  }
  function _base36To16(value) {
    return new BN$1(value, 36).toString(16);
  }
  var sha3$3 = { exports: {} };
  /**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.9.3
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2023
   * @license MIT
   */
  (function(module) {
    (function() {
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      const root = globalThis;
      /*
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = globalThis;
      } else if (WEB_WORKER) {
        root = self;
      }
      */
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && true && module.exports;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      var isArray = root.JS_SHA3_NO_NODE_JS || !Array.isArray ? function(obj) {
        return Object.prototype.toString.call(obj) === "[object Array]";
      } : Array.isArray;
      var isView = ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView) ? function(obj) {
        return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
      } : ArrayBuffer.isView;
      var formatMessage = function(message) {
        var type = typeof message;
        if (type === "string") {
          return [message, true];
        }
        if (type !== "object" || message === null) {
          throw new Error(INPUT_ERROR);
        }
        if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          return [new Uint8Array(message), false];
        }
        if (!isArray(message) && !isView(message)) {
          throw new Error(INPUT_ERROR);
        }
        return [message, false];
      };
      var empty2 = function(message) {
        return formatMessage(message)[0].length === 0;
      };
      var cloneArray = function(array2) {
        var newArray = [];
        for (var i3 = 0; i3 < array2.length; ++i3) {
          newArray[i3] = array2[i3];
        }
        return newArray;
      };
      var createOutputMethod = function(bits2, padding, outputType) {
        return function(message) {
          return new Keccak2(bits2, padding, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits) {
          return new Keccak2(bits2, padding, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits, n, s2) {
          return methods["cshake" + bits2].update(message, outputBits, n, s2)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding, outputType) {
        return function(key2, message, outputBits, s2) {
          return methods["kmac" + bits2].update(key2, message, outputBits, s2)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding) {
        for (var i3 = 0; i3 < OUTPUT_TYPES.length; ++i3) {
          var type = OUTPUT_TYPES[i3];
          method[type] = createMethod2(bits2, padding, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding) {
        var method = createOutputMethod(bits2, padding, "hex");
        method.create = function() {
          return new Keccak2(bits2, padding, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding);
      };
      var createShakeMethod = function(bits2, padding) {
        var method = createShakeOutputMethod(bits2, padding, "hex");
        method.create = function(outputBits) {
          return new Keccak2(bits2, padding, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding);
      };
      var createCshakeMethod = function(bits2, padding) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding, "hex");
        method.create = function(outputBits, n, s2) {
          if (empty2(n) && empty2(s2)) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak2(bits2, padding, outputBits).bytepad([n, s2], w);
          }
        };
        method.update = function(message, outputBits, n, s2) {
          return method.create(outputBits, n, s2).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding);
      };
      var createKmacMethod = function(bits2, padding) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding, "hex");
        method.create = function(key2, outputBits, s2) {
          return new Kmac(bits2, padding, outputBits).bytepad(["KMAC", s2], w).bytepad([key2], w);
        };
        method.update = function(key2, message, outputBits, s2) {
          return method.create(key2, outputBits, s2).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i2 = 0; i2 < algorithms.length; ++i2) {
        var algorithm = algorithms[i2];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + "_" + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak2(bits2, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i3 = 0; i3 < 50; ++i3) {
          this.s[i3] = 0;
        }
      }
      Keccak2.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var result = formatMessage(message);
        message = result[0];
        var isString = result[1];
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s2 = this.s, i3, code2;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i3 = 1; i3 < blockCount + 1; ++i3) {
              blocks[i3] = 0;
            }
          }
          if (isString) {
            for (i3 = this.start; index < length && i3 < byteCount; ++index) {
              code2 = message.charCodeAt(index);
              if (code2 < 128) {
                blocks[i3 >> 2] |= code2 << SHIFT[i3++ & 3];
              } else if (code2 < 2048) {
                blocks[i3 >> 2] |= (192 | code2 >> 6) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code2 & 63) << SHIFT[i3++ & 3];
              } else if (code2 < 55296 || code2 >= 57344) {
                blocks[i3 >> 2] |= (224 | code2 >> 12) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code2 >> 6 & 63) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code2 & 63) << SHIFT[i3++ & 3];
              } else {
                code2 = 65536 + ((code2 & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i3 >> 2] |= (240 | code2 >> 18) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code2 >> 12 & 63) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code2 >> 6 & 63) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code2 & 63) << SHIFT[i3++ & 3];
              }
            }
          } else {
            for (i3 = this.start; index < length && i3 < byteCount; ++index) {
              blocks[i3 >> 2] |= message[index] << SHIFT[i3++ & 3];
            }
          }
          this.lastByteIndex = i3;
          if (i3 >= byteCount) {
            this.start = i3 - byteCount;
            this.block = blocks[blockCount];
            for (i3 = 0; i3 < blockCount; ++i3) {
              s2[i3] ^= blocks[i3];
            }
            f2(s2);
            this.reset = true;
          } else {
            this.start = i3;
          }
        }
        return this;
      };
      Keccak2.prototype.encode = function(x, right) {
        var o = x & 255, n = 1;
        var bytes2 = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes2.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes2.push(n);
        } else {
          bytes2.unshift(n);
        }
        this.update(bytes2);
        return bytes2.length;
      };
      Keccak2.prototype.encodeString = function(str) {
        var result = formatMessage(str);
        str = result[0];
        var isString = result[1];
        var bytes2 = 0, length = str.length;
        if (isString) {
          for (var i3 = 0; i3 < str.length; ++i3) {
            var code2 = str.charCodeAt(i3);
            if (code2 < 128) {
              bytes2 += 1;
            } else if (code2 < 2048) {
              bytes2 += 2;
            } else if (code2 < 55296 || code2 >= 57344) {
              bytes2 += 3;
            } else {
              code2 = 65536 + ((code2 & 1023) << 10 | str.charCodeAt(++i3) & 1023);
              bytes2 += 4;
            }
          }
        } else {
          bytes2 = length;
        }
        bytes2 += this.encode(bytes2 * 8);
        this.update(str);
        return bytes2;
      };
      Keccak2.prototype.bytepad = function(strs, w) {
        var bytes2 = this.encode(w);
        for (var i3 = 0; i3 < strs.length; ++i3) {
          bytes2 += this.encodeString(strs[i3]);
        }
        var paddingBytes = (w - bytes2 % w) % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };
      Keccak2.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i3 = this.lastByteIndex, blockCount = this.blockCount, s2 = this.s;
        blocks[i3 >> 2] |= this.padding[i3 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i3 = 1; i3 < blockCount + 1; ++i3) {
            blocks[i3] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i3 = 0; i3 < blockCount; ++i3) {
          s2[i3] ^= blocks[i3];
        }
        f2(s2);
      };
      Keccak2.prototype.toString = Keccak2.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j2 = 0;
        var hex2 = "", block;
        while (j2 < outputBlocks) {
          for (i3 = 0; i3 < blockCount && j2 < outputBlocks; ++i3, ++j2) {
            block = s2[i3];
            hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j2 % blockCount === 0) {
            s2 = cloneArray(s2);
            f2(s2);
            i3 = 0;
          }
        }
        if (extraBytes) {
          block = s2[i3];
          hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex2 += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex2 += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex2;
      };
      Keccak2.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j2 = 0;
        var bytes2 = this.outputBits >> 3;
        var buffer2;
        if (extraBytes) {
          buffer2 = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer2 = new ArrayBuffer(bytes2);
        }
        var array2 = new Uint32Array(buffer2);
        while (j2 < outputBlocks) {
          for (i3 = 0; i3 < blockCount && j2 < outputBlocks; ++i3, ++j2) {
            array2[j2] = s2[i3];
          }
          if (j2 % blockCount === 0) {
            s2 = cloneArray(s2);
            f2(s2);
          }
        }
        if (extraBytes) {
          array2[j2] = s2[i3];
          buffer2 = buffer2.slice(0, bytes2);
        }
        return buffer2;
      };
      Keccak2.prototype.buffer = Keccak2.prototype.arrayBuffer;
      Keccak2.prototype.digest = Keccak2.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j2 = 0;
        var array2 = [], offset, block;
        while (j2 < outputBlocks) {
          for (i3 = 0; i3 < blockCount && j2 < outputBlocks; ++i3, ++j2) {
            offset = j2 << 2;
            block = s2[i3];
            array2[offset] = block & 255;
            array2[offset + 1] = block >> 8 & 255;
            array2[offset + 2] = block >> 16 & 255;
            array2[offset + 3] = block >> 24 & 255;
          }
          if (j2 % blockCount === 0) {
            s2 = cloneArray(s2);
            f2(s2);
          }
        }
        if (extraBytes) {
          offset = j2 << 2;
          block = s2[i3];
          array2[offset] = block & 255;
          if (extraBytes > 1) {
            array2[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array2[offset + 2] = block >> 16 & 255;
          }
        }
        return array2;
      };
      function Kmac(bits2, padding, outputBits) {
        Keccak2.call(this, bits2, padding, outputBits);
      }
      Kmac.prototype = new Keccak2();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak2.prototype.finalize.call(this);
      };
      var f2 = function(s2) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
          c1 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
          c2 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
          c3 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
          c4 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
          c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
          c6 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
          c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
          c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
          c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s2[0] ^= h;
          s2[1] ^= l;
          s2[10] ^= h;
          s2[11] ^= l;
          s2[20] ^= h;
          s2[21] ^= l;
          s2[30] ^= h;
          s2[31] ^= l;
          s2[40] ^= h;
          s2[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s2[2] ^= h;
          s2[3] ^= l;
          s2[12] ^= h;
          s2[13] ^= l;
          s2[22] ^= h;
          s2[23] ^= l;
          s2[32] ^= h;
          s2[33] ^= l;
          s2[42] ^= h;
          s2[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s2[4] ^= h;
          s2[5] ^= l;
          s2[14] ^= h;
          s2[15] ^= l;
          s2[24] ^= h;
          s2[25] ^= l;
          s2[34] ^= h;
          s2[35] ^= l;
          s2[44] ^= h;
          s2[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s2[6] ^= h;
          s2[7] ^= l;
          s2[16] ^= h;
          s2[17] ^= l;
          s2[26] ^= h;
          s2[27] ^= l;
          s2[36] ^= h;
          s2[37] ^= l;
          s2[46] ^= h;
          s2[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s2[8] ^= h;
          s2[9] ^= l;
          s2[18] ^= h;
          s2[19] ^= l;
          s2[28] ^= h;
          s2[29] ^= l;
          s2[38] ^= h;
          s2[39] ^= l;
          s2[48] ^= h;
          s2[49] ^= l;
          b0 = s2[0];
          b1 = s2[1];
          b32 = s2[11] << 4 | s2[10] >>> 28;
          b33 = s2[10] << 4 | s2[11] >>> 28;
          b14 = s2[20] << 3 | s2[21] >>> 29;
          b15 = s2[21] << 3 | s2[20] >>> 29;
          b46 = s2[31] << 9 | s2[30] >>> 23;
          b47 = s2[30] << 9 | s2[31] >>> 23;
          b28 = s2[40] << 18 | s2[41] >>> 14;
          b29 = s2[41] << 18 | s2[40] >>> 14;
          b20 = s2[2] << 1 | s2[3] >>> 31;
          b21 = s2[3] << 1 | s2[2] >>> 31;
          b2 = s2[13] << 12 | s2[12] >>> 20;
          b3 = s2[12] << 12 | s2[13] >>> 20;
          b34 = s2[22] << 10 | s2[23] >>> 22;
          b35 = s2[23] << 10 | s2[22] >>> 22;
          b16 = s2[33] << 13 | s2[32] >>> 19;
          b17 = s2[32] << 13 | s2[33] >>> 19;
          b48 = s2[42] << 2 | s2[43] >>> 30;
          b49 = s2[43] << 2 | s2[42] >>> 30;
          b40 = s2[5] << 30 | s2[4] >>> 2;
          b41 = s2[4] << 30 | s2[5] >>> 2;
          b22 = s2[14] << 6 | s2[15] >>> 26;
          b23 = s2[15] << 6 | s2[14] >>> 26;
          b4 = s2[25] << 11 | s2[24] >>> 21;
          b5 = s2[24] << 11 | s2[25] >>> 21;
          b36 = s2[34] << 15 | s2[35] >>> 17;
          b37 = s2[35] << 15 | s2[34] >>> 17;
          b18 = s2[45] << 29 | s2[44] >>> 3;
          b19 = s2[44] << 29 | s2[45] >>> 3;
          b10 = s2[6] << 28 | s2[7] >>> 4;
          b11 = s2[7] << 28 | s2[6] >>> 4;
          b42 = s2[17] << 23 | s2[16] >>> 9;
          b43 = s2[16] << 23 | s2[17] >>> 9;
          b24 = s2[26] << 25 | s2[27] >>> 7;
          b25 = s2[27] << 25 | s2[26] >>> 7;
          b6 = s2[36] << 21 | s2[37] >>> 11;
          b7 = s2[37] << 21 | s2[36] >>> 11;
          b38 = s2[47] << 24 | s2[46] >>> 8;
          b39 = s2[46] << 24 | s2[47] >>> 8;
          b30 = s2[8] << 27 | s2[9] >>> 5;
          b31 = s2[9] << 27 | s2[8] >>> 5;
          b12 = s2[18] << 20 | s2[19] >>> 12;
          b13 = s2[19] << 20 | s2[18] >>> 12;
          b44 = s2[29] << 7 | s2[28] >>> 25;
          b45 = s2[28] << 7 | s2[29] >>> 25;
          b26 = s2[38] << 8 | s2[39] >>> 24;
          b27 = s2[39] << 8 | s2[38] >>> 24;
          b8 = s2[48] << 14 | s2[49] >>> 18;
          b9 = s2[49] << 14 | s2[48] >>> 18;
          s2[0] = b0 ^ ~b2 & b4;
          s2[1] = b1 ^ ~b3 & b5;
          s2[10] = b10 ^ ~b12 & b14;
          s2[11] = b11 ^ ~b13 & b15;
          s2[20] = b20 ^ ~b22 & b24;
          s2[21] = b21 ^ ~b23 & b25;
          s2[30] = b30 ^ ~b32 & b34;
          s2[31] = b31 ^ ~b33 & b35;
          s2[40] = b40 ^ ~b42 & b44;
          s2[41] = b41 ^ ~b43 & b45;
          s2[2] = b2 ^ ~b4 & b6;
          s2[3] = b3 ^ ~b5 & b7;
          s2[12] = b12 ^ ~b14 & b16;
          s2[13] = b13 ^ ~b15 & b17;
          s2[22] = b22 ^ ~b24 & b26;
          s2[23] = b23 ^ ~b25 & b27;
          s2[32] = b32 ^ ~b34 & b36;
          s2[33] = b33 ^ ~b35 & b37;
          s2[42] = b42 ^ ~b44 & b46;
          s2[43] = b43 ^ ~b45 & b47;
          s2[4] = b4 ^ ~b6 & b8;
          s2[5] = b5 ^ ~b7 & b9;
          s2[14] = b14 ^ ~b16 & b18;
          s2[15] = b15 ^ ~b17 & b19;
          s2[24] = b24 ^ ~b26 & b28;
          s2[25] = b25 ^ ~b27 & b29;
          s2[34] = b34 ^ ~b36 & b38;
          s2[35] = b35 ^ ~b37 & b39;
          s2[44] = b44 ^ ~b46 & b48;
          s2[45] = b45 ^ ~b47 & b49;
          s2[6] = b6 ^ ~b8 & b0;
          s2[7] = b7 ^ ~b9 & b1;
          s2[16] = b16 ^ ~b18 & b10;
          s2[17] = b17 ^ ~b19 & b11;
          s2[26] = b26 ^ ~b28 & b20;
          s2[27] = b27 ^ ~b29 & b21;
          s2[36] = b36 ^ ~b38 & b30;
          s2[37] = b37 ^ ~b39 & b31;
          s2[46] = b46 ^ ~b48 & b40;
          s2[47] = b47 ^ ~b49 & b41;
          s2[8] = b8 ^ ~b0 & b2;
          s2[9] = b9 ^ ~b1 & b3;
          s2[18] = b18 ^ ~b10 & b12;
          s2[19] = b19 ^ ~b11 & b13;
          s2[28] = b28 ^ ~b20 & b22;
          s2[29] = b29 ^ ~b21 & b23;
          s2[38] = b38 ^ ~b30 & b32;
          s2[39] = b39 ^ ~b31 & b33;
          s2[48] = b48 ^ ~b40 & b42;
          s2[49] = b49 ^ ~b41 & b43;
          s2[0] ^= RC[n];
          s2[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i2 = 0; i2 < methodNames.length; ++i2) {
          root[methodNames[i2]] = methods[methodNames[i2]];
        }
      }
    })();
  })(sha3$3);
  var sha3Exports = sha3$3.exports;
  const sha3$2 = /* @__PURE__ */ getDefaultExportFromCjs(sha3Exports);
  function keccak256(data) {
    return "0x" + sha3$2.keccak_256(arrayify(data));
  }
  const version$6 = "rlp/5.8.0";
  const logger$a = new Logger(version$6);
  function arrayifyInteger(value) {
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value >>= 8;
    }
    return result;
  }
  function unarrayifyInteger(data, offset, length) {
    let result = 0;
    for (let i2 = 0; i2 < length; i2++) {
      result = result * 256 + data[offset + i2];
    }
    return result;
  }
  function _encode(object) {
    if (Array.isArray(object)) {
      let payload = [];
      object.forEach(function(child) {
        payload = payload.concat(_encode(child));
      });
      if (payload.length <= 55) {
        payload.unshift(192 + payload.length);
        return payload;
      }
      const length2 = arrayifyInteger(payload.length);
      length2.unshift(247 + length2.length);
      return length2.concat(payload);
    }
    if (!isBytesLike(object)) {
      logger$a.throwArgumentError("RLP object must be BytesLike", "object", object);
    }
    const data = Array.prototype.slice.call(arrayify(object));
    if (data.length === 1 && data[0] <= 127) {
      return data;
    } else if (data.length <= 55) {
      data.unshift(128 + data.length);
      return data;
    }
    const length = arrayifyInteger(data.length);
    length.unshift(183 + length.length);
    return length.concat(data);
  }
  function encode$1(object) {
    return hexlify(_encode(object));
  }
  function _decodeChildren(data, offset, childOffset, length) {
    const result = [];
    while (childOffset < offset + 1 + length) {
      const decoded = _decode$1(data, childOffset);
      result.push(decoded.result);
      childOffset += decoded.consumed;
      if (childOffset > offset + 1 + length) {
        logger$a.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
      }
    }
    return { consumed: 1 + length, result };
  }
  function _decode$1(data, offset) {
    if (data.length === 0) {
      logger$a.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    if (data[offset] >= 248) {
      const lengthLength = data[offset] - 247;
      if (offset + 1 + lengthLength > data.length) {
        logger$a.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const length = unarrayifyInteger(data, offset + 1, lengthLength);
      if (offset + 1 + lengthLength + length > data.length) {
        logger$a.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
    } else if (data[offset] >= 192) {
      const length = data[offset] - 192;
      if (offset + 1 + length > data.length) {
        logger$a.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      return _decodeChildren(data, offset, offset + 1, length);
    } else if (data[offset] >= 184) {
      const lengthLength = data[offset] - 183;
      if (offset + 1 + lengthLength > data.length) {
        logger$a.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const length = unarrayifyInteger(data, offset + 1, lengthLength);
      if (offset + 1 + lengthLength + length > data.length) {
        logger$a.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
      return { consumed: 1 + lengthLength + length, result };
    } else if (data[offset] >= 128) {
      const length = data[offset] - 128;
      if (offset + 1 + length > data.length) {
        logger$a.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const result = hexlify(data.slice(offset + 1, offset + 1 + length));
      return { consumed: 1 + length, result };
    }
    return { consumed: 1, result: hexlify(data[offset]) };
  }
  function decode$1(data) {
    const bytes2 = arrayify(data);
    const decoded = _decode$1(bytes2, 0);
    if (decoded.consumed !== bytes2.length) {
      logger$a.throwArgumentError("invalid rlp data", "data", data);
    }
    return decoded.result;
  }
  const version$5 = "address/5.8.0";
  const logger$9 = new Logger(version$5);
  function getChecksumAddress(address2) {
    if (!isHexString$1(address2, 20)) {
      logger$9.throwArgumentError("invalid address", "address", address2);
    }
    address2 = address2.toLowerCase();
    const chars = address2.substring(2).split("");
    const expanded = new Uint8Array(40);
    for (let i2 = 0; i2 < 40; i2++) {
      expanded[i2] = chars[i2].charCodeAt(0);
    }
    const hashed = arrayify(keccak256(expanded));
    for (let i2 = 0; i2 < 40; i2 += 2) {
      if (hashed[i2 >> 1] >> 4 >= 8) {
        chars[i2] = chars[i2].toUpperCase();
      }
      if ((hashed[i2 >> 1] & 15) >= 8) {
        chars[i2 + 1] = chars[i2 + 1].toUpperCase();
      }
    }
    return "0x" + chars.join("");
  }
  const MAX_SAFE_INTEGER = 9007199254740991;
  function log10(x) {
    if (Math.log10) {
      return Math.log10(x);
    }
    return Math.log(x) / Math.LN10;
  }
  const ibanLookup = {};
  for (let i2 = 0; i2 < 10; i2++) {
    ibanLookup[String(i2)] = String(i2);
  }
  for (let i2 = 0; i2 < 26; i2++) {
    ibanLookup[String.fromCharCode(65 + i2)] = String(10 + i2);
  }
  const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  function ibanChecksum(address2) {
    address2 = address2.toUpperCase();
    address2 = address2.substring(4) + address2.substring(0, 2) + "00";
    let expanded = address2.split("").map((c) => {
      return ibanLookup[c];
    }).join("");
    while (expanded.length >= safeDigits) {
      let block = expanded.substring(0, safeDigits);
      expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }
    let checksum2 = String(98 - parseInt(expanded, 10) % 97);
    while (checksum2.length < 2) {
      checksum2 = "0" + checksum2;
    }
    return checksum2;
  }
  function getAddress(address2) {
    let result = null;
    if (typeof address2 !== "string") {
      logger$9.throwArgumentError("invalid address", "address", address2);
    }
    if (address2.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
      if (address2.substring(0, 2) !== "0x") {
        address2 = "0x" + address2;
      }
      result = getChecksumAddress(address2);
      if (address2.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address2) {
        logger$9.throwArgumentError("bad address checksum", "address", address2);
      }
    } else if (address2.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
      if (address2.substring(2, 4) !== ibanChecksum(address2)) {
        logger$9.throwArgumentError("bad icap checksum", "address", address2);
      }
      result = _base36To16(address2.substring(4));
      while (result.length < 40) {
        result = "0" + result;
      }
      result = getChecksumAddress("0x" + result);
    } else {
      logger$9.throwArgumentError("invalid address", "address", address2);
    }
    return result;
  }
  const AddressZero = "0x0000000000000000000000000000000000000000";
  const NegativeOne = /* @__PURE__ */ BigNumber.from(-1);
  const Zero = /* @__PURE__ */ BigNumber.from(0);
  const One = /* @__PURE__ */ BigNumber.from(1);
  const MaxUint256 = /* @__PURE__ */ BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  const version$4 = "properties/5.8.0";
  const logger$8 = new Logger(version$4);
  function defineReadOnly(object, name, value) {
    Object.defineProperty(object, name, {
      enumerable: true,
      value,
      writable: false
    });
  }
  function getStatic(ctor, key2) {
    for (let i2 = 0; i2 < 32; i2++) {
      if (ctor[key2]) {
        return ctor[key2];
      }
      if (!ctor.prototype || typeof ctor.prototype !== "object") {
        break;
      }
      ctor = Object.getPrototypeOf(ctor.prototype).constructor;
    }
    return null;
  }
  const opaque$1 = { bigint: true, boolean: true, "function": true, number: true, string: true };
  function _isFrozen(object) {
    if (object === void 0 || object === null || opaque$1[typeof object]) {
      return true;
    }
    if (Array.isArray(object) || typeof object === "object") {
      if (!Object.isFrozen(object)) {
        return false;
      }
      const keys = Object.keys(object);
      for (let i2 = 0; i2 < keys.length; i2++) {
        let value = null;
        try {
          value = object[keys[i2]];
        } catch (error2) {
          continue;
        }
        if (!_isFrozen(value)) {
          return false;
        }
      }
      return true;
    }
    return logger$8.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
  }
  function _deepCopy(object) {
    if (_isFrozen(object)) {
      return object;
    }
    if (Array.isArray(object)) {
      return Object.freeze(object.map((item) => deepCopy(item)));
    }
    if (typeof object === "object") {
      const result = {};
      for (const key2 in object) {
        const value = object[key2];
        if (value === void 0) {
          continue;
        }
        defineReadOnly(result, key2, deepCopy(value));
      }
      return result;
    }
    return logger$8.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
  }
  function deepCopy(object) {
    return _deepCopy(object);
  }
  class Description {
    constructor(info) {
      for (const key2 in info) {
        this[key2] = deepCopy(info[key2]);
      }
    }
  }
  var bn = { exports: {} };
  (function(module) {
    (function(module2, exports) {
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number2, base2, endian) {
        if (BN2.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number2 || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN2;
      } else {
        exports.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer3;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer3 = window.Buffer;
        } else {
          Buffer3 = require$$0$2.Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num) {
        if (num instanceof BN2) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
      };
      BN2.max = function max2(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN2.min = function min2(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN2.prototype._init = function init(number2, base2, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base2, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base2 === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number2, base2, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN2.prototype._initArray = function _initArray(number2, base2, endian) {
        assert2(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i2 = number2.length - 1, j = 0; i2 >= 0; i2 -= 3) {
            w = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j = 0; i2 < number2.length; i2 += 3) {
            w = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string2, index) {
        var c = string2.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert2(false, "Invalid character in " + string2);
        }
      }
      function parseHexByte2(string2, lowerBound, index) {
        var r2 = parseHex4Bits(string2, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string2, index - 1) << 4;
        }
        return r2;
      }
      BN2.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
            w = parseHexByte2(number2, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
            w = parseHexByte2(number2, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var b = 0;
        var len2 = Math.min(str.length, end);
        for (var i2 = start; i2 < len2; i2++) {
          var c = str.charCodeAt(i2) - 48;
          r2 *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert2(c >= 0 && b < mul, "Invalid character");
          r2 += b;
        }
        return r2;
      }
      BN2.prototype._parseBase = function _parseBase(number2, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number2.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number2, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow3 = 1;
          word = parseBase(number2, i2, number2.length, base2);
          for (i2 = 0; i2 < mod2; i2++) {
            pow3 *= base2;
          }
          this.imuln(pow3);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN2.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN2.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN2.prototype.clone = function clone2() {
        var r2 = new BN2(null);
        this.copy(r2);
        return r2;
      };
      BN2.prototype._expand = function _expand(size2) {
        while (this.length < size2) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN2.prototype.inspect = inspect;
        }
      } else {
        BN2.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN2.prototype.toString = function toString(base2, padding) {
        base2 = base2 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w = this.words[i2];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN2.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer3) {
        BN2.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer3, endian, length);
        };
      }
      BN2.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size2) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size2);
        }
        return new ArrayType(size2);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength2 = this.byteLength();
        var reqLength = length || Math.max(1, byteLength2);
        assert2(byteLength2 <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength2);
        return res;
      };
      BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength2) {
        var position = 0;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength2) {
        var position = res.length - 1;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t2 = w;
          var r2 = 0;
          if (t2 >= 4096) {
            r2 += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r2 += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r2 += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r2 += 2;
            t2 >>>= 2;
          }
          return r2 + t2;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t2 = w;
        var r2 = 0;
        if ((t2 & 8191) === 0) {
          r2 += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r2 += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r2 += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r2 += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b = this._zeroBits(this.words[i2]);
          r2 += b;
          if (b !== 26) break;
        }
        return r2;
      };
      BN2.prototype.byteLength = function byteLength2() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this._strip();
      };
      BN2.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN2.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b.length;
        return this._strip();
      };
      BN2.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN2.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = a.words[i2] ^ b.words[i2];
        }
        if (this !== a) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN2.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN2.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN2.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN2.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r2 = (a.words[i2] | 0) + (b.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        return this;
      };
      BN2.prototype.add = function add2(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp2 = this.cmp(num);
        if (cmp2 === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp2 > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r2 = (a.words[i2] | 0) - (b.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a.length && a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN2.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len2 = self2.length + num.length | 0;
        out.length = len2;
        len2 = len2 - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len2; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j | 0;
            a = self2.words[i2] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j;
            var a = self2.words[i2] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN2.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len2 = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len2 < 63) {
          res = smallMulTo(this, num, out);
        } else if (len2 < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      BN2.prototype.mul = function mul(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN2.prototype.mulf = function mulf(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN2.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN2.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w = (this.words[i2] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow3(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN2(1);
        var res = this;
        for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
          if (w[i2] !== 0) break;
        }
        if (++i2 < w.length) {
          for (var q = res.sqr(); i2 < w.length; i2++, q = q.sqr()) {
            if (w[i2] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this._strip();
      };
      BN2.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s2;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) ;
        else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask2;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN2.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN2.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN2.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN2.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN2.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2) return false;
        var w = this.words[s2];
        return !!(w & q);
      };
      BN2.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask2;
        }
        return this._strip();
      };
      BN2.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN2.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN2.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN2.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN2.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len2 = num.length + shift;
        var i2;
        this._expand(len2);
        var w;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i2 + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w = -(this.words[i2] | 0) + carry;
          carry = w >> 26;
          this.words[i2] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN2(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i2 = 0; i2 < q.length; i2++) {
            q.words[i2] = 0;
          }
        }
        var diff2 = a.clone()._ishlnsubmul(b, 1, m);
        if (diff2.negative === 0) {
          a = diff2;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN2.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN2(0),
            mod: new BN2(0)
          };
        }
        var div, mod2, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num);
            }
          }
          return {
            div,
            mod: mod2
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN2(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN2(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN2(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN2.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN2.prototype.mod = function mod2(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp2 = mod2.cmp(half);
        if (cmp2 < 0 || r2 === 1 && cmp2 === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p * acc + (this.words[i2] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN2.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN2.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN2.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN2(1);
        var B = new BN2(0);
        var C = new BN2(0);
        var D = new BN2(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i2 = 0, im = 1; (x.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            x.iushrn(i2);
            while (i2-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN2.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            a.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t2 = a;
            a = b;
            b = t2;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd2() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q;
          return this;
        }
        var carry = q;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w = this.words[i2] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i2] = w;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp2(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a = this.words[i2] | 0;
          var b = num.words[i2] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN2.prototype.gt = function gt2(num) {
        return this.cmp(num) === 1;
      };
      BN2.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN2.prototype.gte = function gte2(num) {
        return this.cmp(num) >= 0;
      };
      BN2.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN2.prototype.lt = function lt2(num) {
        return this.cmp(num) === -1;
      };
      BN2.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN2.prototype.lte = function lte2(num) {
        return this.cmp(num) <= 0;
      };
      BN2.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN2.prototype.eq = function eq2(num) {
        return this.cmp(num) === 0;
      };
      BN2.red = function red(num) {
        return new Red(num);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN2.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN2.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN2.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN2.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN2.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN2.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN2(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp2 = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp2 === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp2 > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split2(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits2(K256, MPrime);
      K256.prototype.split = function split2(input, output2) {
        var mask2 = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output2.words[i2] = input.words[i2];
        }
        output2.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output2.words[output2.length++] = prev & mask2;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask2) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w = num.words[i2] | 0;
          lo += w * 977;
          num.words[i2] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits2(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits2(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits2(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN2._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN2._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add2(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow3 = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow3);
        }
        var q = this.m.subn(1);
        var s2 = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s2++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN2(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t2 = this.pow(a, q);
        var m = s2;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert2(i2 < m);
          var b = this.pow(c, new BN2(1).iushln(m - i2 - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t2 = t2.redMul(c);
          m = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow3(a, num) {
        if (num.isZero()) return new BN2(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits2(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t2 = a.imul(b);
        var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t2.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
        var t2 = a.mul(b);
        var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t2.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, globalThis);
  })(bn);
  var bnExports = bn.exports;
  const BN = /* @__PURE__ */ getDefaultExportFromCjs(bnExports);
  var hash$2 = {};
  var utils$h = {};
  var minimalisticAssert$1 = assert$b;
  function assert$b(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert$b.equal = function assertEqual(l, r2, msg) {
    if (l != r2)
      throw new Error(msg || "Assertion failed: " + l + " != " + r2);
  };
  var inherits_browser$1 = { exports: {} };
  if (typeof Object.create === "function") {
    inherits_browser$1.exports = function inherits2(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    inherits_browser$1.exports = function inherits2(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
  var inherits_browserExports = inherits_browser$1.exports;
  var assert$a = minimalisticAssert$1;
  var inherits = inherits_browserExports;
  utils$h.inherits = inherits;
  function isSurrogatePair(msg, i2) {
    if ((msg.charCodeAt(i2) & 64512) !== 55296) {
      return false;
    }
    if (i2 < 0 || i2 + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i2 + 1) & 64512) === 56320;
  }
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === "string") {
      if (!enc) {
        var p = 0;
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c = msg.charCodeAt(i2);
          if (c < 128) {
            res[p++] = c;
          } else if (c < 2048) {
            res[p++] = c >> 6 | 192;
            res[p++] = c & 63 | 128;
          } else if (isSurrogatePair(msg, i2)) {
            c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i2) & 1023);
            res[p++] = c >> 18 | 240;
            res[p++] = c >> 12 & 63 | 128;
            res[p++] = c >> 6 & 63 | 128;
            res[p++] = c & 63 | 128;
          } else {
            res[p++] = c >> 12 | 224;
            res[p++] = c >> 6 & 63 | 128;
            res[p++] = c & 63 | 128;
          }
        }
      } else if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      }
    } else {
      for (i2 = 0; i2 < msg.length; i2++)
        res[i2] = msg[i2] | 0;
    }
    return res;
  }
  utils$h.toArray = toArray;
  function toHex(msg) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++)
      res += zero2(msg[i2].toString(16));
    return res;
  }
  utils$h.toHex = toHex;
  function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
  }
  utils$h.htonl = htonl;
  function toHex32(msg, endian) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++) {
      var w = msg[i2];
      if (endian === "little")
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  utils$h.toHex32 = toHex32;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  utils$h.zero2 = zero2;
  function zero8(word) {
    if (word.length === 7)
      return "0" + word;
    else if (word.length === 6)
      return "00" + word;
    else if (word.length === 5)
      return "000" + word;
    else if (word.length === 4)
      return "0000" + word;
    else if (word.length === 3)
      return "00000" + word;
    else if (word.length === 2)
      return "000000" + word;
    else if (word.length === 1)
      return "0000000" + word;
    else
      return word;
  }
  utils$h.zero8 = zero8;
  function join32(msg, start, end, endian) {
    var len2 = end - start;
    assert$a(len2 % 4 === 0);
    var res = new Array(len2 / 4);
    for (var i2 = 0, k = start; i2 < res.length; i2++, k += 4) {
      var w;
      if (endian === "big")
        w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
      else
        w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
      res[i2] = w >>> 0;
    }
    return res;
  }
  utils$h.join32 = join32;
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i2 = 0, k = 0; i2 < msg.length; i2++, k += 4) {
      var m = msg[i2];
      if (endian === "big") {
        res[k] = m >>> 24;
        res[k + 1] = m >>> 16 & 255;
        res[k + 2] = m >>> 8 & 255;
        res[k + 3] = m & 255;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = m >>> 16 & 255;
        res[k + 1] = m >>> 8 & 255;
        res[k] = m & 255;
      }
    }
    return res;
  }
  utils$h.split32 = split32;
  function rotr32$1(w, b) {
    return w >>> b | w << 32 - b;
  }
  utils$h.rotr32 = rotr32$1;
  function rotl32$2(w, b) {
    return w << b | w >>> 32 - b;
  }
  utils$h.rotl32 = rotl32$2;
  function sum32$3(a, b) {
    return a + b >>> 0;
  }
  utils$h.sum32 = sum32$3;
  function sum32_3$1(a, b, c) {
    return a + b + c >>> 0;
  }
  utils$h.sum32_3 = sum32_3$1;
  function sum32_4$2(a, b, c, d) {
    return a + b + c + d >>> 0;
  }
  utils$h.sum32_4 = sum32_4$2;
  function sum32_5$2(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
  }
  utils$h.sum32_5 = sum32_5$2;
  function sum64$1(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  utils$h.sum64 = sum64$1;
  function sum64_hi$1(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  utils$h.sum64_hi = sum64_hi$1;
  function sum64_lo$1(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  utils$h.sum64_lo = sum64_lo$1;
  function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  utils$h.sum64_4_hi = sum64_4_hi$1;
  function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  utils$h.sum64_4_lo = sum64_4_lo$1;
  function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  utils$h.sum64_5_hi = sum64_5_hi$1;
  function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }
  utils$h.sum64_5_lo = sum64_5_lo$1;
  function rotr64_hi$1(ah, al, num) {
    var r2 = al << 32 - num | ah >>> num;
    return r2 >>> 0;
  }
  utils$h.rotr64_hi = rotr64_hi$1;
  function rotr64_lo$1(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  utils$h.rotr64_lo = rotr64_lo$1;
  function shr64_hi$1(ah, al, num) {
    return ah >>> num;
  }
  utils$h.shr64_hi = shr64_hi$1;
  function shr64_lo$1(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  utils$h.shr64_lo = shr64_lo$1;
  var common$6 = {};
  var utils$g = utils$h;
  var assert$9 = minimalisticAssert$1;
  function BlockHash$4() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  common$6.BlockHash = BlockHash$4;
  BlockHash$4.prototype.update = function update(msg, enc) {
    msg = utils$g.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r2 = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r2, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils$g.join32(msg, 0, msg.length - r2, this.endian);
      for (var i2 = 0; i2 < msg.length; i2 += this._delta32)
        this._update(msg, i2, i2 + this._delta32);
    }
    return this;
  };
  BlockHash$4.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert$9(this.pending === null);
    return this._digest(enc);
  };
  BlockHash$4.prototype._pad = function pad() {
    var len2 = this.pendingTotal;
    var bytes2 = this._delta8;
    var k = bytes2 - (len2 + this.padLength) % bytes2;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for (var i2 = 1; i2 < k; i2++)
      res[i2] = 0;
    len2 <<= 3;
    if (this.endian === "big") {
      for (var t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = len2 >>> 24 & 255;
      res[i2++] = len2 >>> 16 & 255;
      res[i2++] = len2 >>> 8 & 255;
      res[i2++] = len2 & 255;
    } else {
      res[i2++] = len2 & 255;
      res[i2++] = len2 >>> 8 & 255;
      res[i2++] = len2 >>> 16 & 255;
      res[i2++] = len2 >>> 24 & 255;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      for (t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
    }
    return res;
  };
  var sha = {};
  var common$5 = {};
  var utils$f = utils$h;
  var rotr32 = utils$f.rotr32;
  function ft_1$1(s2, x, y, z) {
    if (s2 === 0)
      return ch32$1(x, y, z);
    if (s2 === 1 || s2 === 3)
      return p32(x, y, z);
    if (s2 === 2)
      return maj32$1(x, y, z);
  }
  common$5.ft_1 = ft_1$1;
  function ch32$1(x, y, z) {
    return x & y ^ ~x & z;
  }
  common$5.ch32 = ch32$1;
  function maj32$1(x, y, z) {
    return x & y ^ x & z ^ y & z;
  }
  common$5.maj32 = maj32$1;
  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  common$5.p32 = p32;
  function s0_256$1(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }
  common$5.s0_256 = s0_256$1;
  function s1_256$1(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }
  common$5.s1_256 = s1_256$1;
  function g0_256$1(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
  }
  common$5.g0_256 = g0_256$1;
  function g1_256$1(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
  }
  common$5.g1_256 = g1_256$1;
  var utils$e = utils$h;
  var common$4 = common$6;
  var shaCommon$1 = common$5;
  var rotl32$1 = utils$e.rotl32;
  var sum32$2 = utils$e.sum32;
  var sum32_5$1 = utils$e.sum32_5;
  var ft_1 = shaCommon$1.ft_1;
  var BlockHash$3 = common$4.BlockHash;
  var sha1_K = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
  ];
  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();
    BlockHash$3.call(this);
    this.h = [
      1732584193,
      4023233417,
      2562383102,
      271733878,
      3285377520
    ];
    this.W = new Array(80);
  }
  utils$e.inherits(SHA1, BlockHash$3);
  var _1 = SHA1;
  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;
  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W[i2] = msg[start + i2];
    for (; i2 < W.length; i2++)
      W[i2] = rotl32$1(W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for (i2 = 0; i2 < W.length; i2++) {
      var s2 = ~~(i2 / 20);
      var t2 = sum32_5$1(rotl32$1(a, 5), ft_1(s2, b, c, d), e, W[i2], sha1_K[s2]);
      e = d;
      d = c;
      c = rotl32$1(b, 30);
      b = a;
      a = t2;
    }
    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
  };
  SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$e.toHex32(this.h, "big");
    else
      return utils$e.split32(this.h, "big");
  };
  var utils$d = utils$h;
  var common$3 = common$6;
  var shaCommon = common$5;
  var assert$8 = minimalisticAssert$1;
  var sum32$1 = utils$d.sum32;
  var sum32_4$1 = utils$d.sum32_4;
  var sum32_5 = utils$d.sum32_5;
  var ch32 = shaCommon.ch32;
  var maj32 = shaCommon.maj32;
  var s0_256 = shaCommon.s0_256;
  var s1_256 = shaCommon.s1_256;
  var g0_256 = shaCommon.g0_256;
  var g1_256 = shaCommon.g1_256;
  var BlockHash$2 = common$3.BlockHash;
  var sha256_K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ];
  function SHA256$3() {
    if (!(this instanceof SHA256$3))
      return new SHA256$3();
    BlockHash$2.call(this);
    this.h = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils$d.inherits(SHA256$3, BlockHash$2);
  var _256 = SHA256$3;
  SHA256$3.blockSize = 512;
  SHA256$3.outSize = 256;
  SHA256$3.hmacStrength = 192;
  SHA256$3.padLength = 64;
  SHA256$3.prototype._update = function _update(msg, start) {
    var W = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W[i2] = msg[start + i2];
    for (; i2 < W.length; i2++)
      W[i2] = sum32_4$1(g1_256(W[i2 - 2]), W[i2 - 7], g0_256(W[i2 - 15]), W[i2 - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f2 = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert$8(this.k.length === W.length);
    for (i2 = 0; i2 < W.length; i2++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f2, g), this.k[i2], W[i2]);
      var T2 = sum32$1(s0_256(a), maj32(a, b, c));
      h = g;
      g = f2;
      f2 = e;
      e = sum32$1(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$1(T1, T2);
    }
    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
    this.h[5] = sum32$1(this.h[5], f2);
    this.h[6] = sum32$1(this.h[6], g);
    this.h[7] = sum32$1(this.h[7], h);
  };
  SHA256$3.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$d.toHex32(this.h, "big");
    else
      return utils$d.split32(this.h, "big");
  };
  var utils$c = utils$h;
  var SHA256$2 = _256;
  function SHA224$2() {
    if (!(this instanceof SHA224$2))
      return new SHA224$2();
    SHA256$2.call(this);
    this.h = [
      3238371032,
      914150663,
      812702999,
      4144912697,
      4290775857,
      1750603025,
      1694076839,
      3204075428
    ];
  }
  utils$c.inherits(SHA224$2, SHA256$2);
  var _224 = SHA224$2;
  SHA224$2.blockSize = 512;
  SHA224$2.outSize = 224;
  SHA224$2.hmacStrength = 192;
  SHA224$2.padLength = 64;
  SHA224$2.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$c.toHex32(this.h.slice(0, 7), "big");
    else
      return utils$c.split32(this.h.slice(0, 7), "big");
  };
  var utils$b = utils$h;
  var common$2 = common$6;
  var assert$7 = minimalisticAssert$1;
  var rotr64_hi = utils$b.rotr64_hi;
  var rotr64_lo = utils$b.rotr64_lo;
  var shr64_hi = utils$b.shr64_hi;
  var shr64_lo = utils$b.shr64_lo;
  var sum64 = utils$b.sum64;
  var sum64_hi = utils$b.sum64_hi;
  var sum64_lo = utils$b.sum64_lo;
  var sum64_4_hi = utils$b.sum64_4_hi;
  var sum64_4_lo = utils$b.sum64_4_lo;
  var sum64_5_hi = utils$b.sum64_5_hi;
  var sum64_5_lo = utils$b.sum64_5_lo;
  var BlockHash$1 = common$2.BlockHash;
  var sha512_K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
  ];
  function SHA512$1() {
    if (!(this instanceof SHA512$1))
      return new SHA512$1();
    BlockHash$1.call(this);
    this.h = [
      1779033703,
      4089235720,
      3144134277,
      2227873595,
      1013904242,
      4271175723,
      2773480762,
      1595750129,
      1359893119,
      2917565137,
      2600822924,
      725511199,
      528734635,
      4215389547,
      1541459225,
      327033209
    ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils$b.inherits(SHA512$1, BlockHash$1);
  var _512 = SHA512$1;
  SHA512$1.blockSize = 1024;
  SHA512$1.outSize = 512;
  SHA512$1.hmacStrength = 192;
  SHA512$1.padLength = 128;
  SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    for (var i2 = 0; i2 < 32; i2++)
      W[i2] = msg[start + i2];
    for (; i2 < W.length; i2 += 2) {
      var c0_hi = g1_512_hi(W[i2 - 4], W[i2 - 3]);
      var c0_lo = g1_512_lo(W[i2 - 4], W[i2 - 3]);
      var c1_hi = W[i2 - 14];
      var c1_lo = W[i2 - 13];
      var c2_hi = g0_512_hi(W[i2 - 30], W[i2 - 29]);
      var c2_lo = g0_512_lo(W[i2 - 30], W[i2 - 29]);
      var c3_hi = W[i2 - 32];
      var c3_lo = W[i2 - 31];
      W[i2] = sum64_4_hi(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo
      );
      W[i2 + 1] = sum64_4_lo(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo
      );
    }
  };
  SHA512$1.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert$7(this.k.length === W.length);
    for (var i2 = 0; i2 < W.length; i2 += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i2];
      var c3_lo = this.k[i2 + 1];
      var c4_hi = W[i2];
      var c4_lo = W[i2 + 1];
      var T1_hi = sum64_5_hi(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo,
        c4_hi,
        c4_lo
      );
      var T1_lo = sum64_5_lo(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo,
        c4_hi,
        c4_lo
      );
      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };
  SHA512$1.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$b.toHex32(this.h, "big");
    else
      return utils$b.split32(this.h, "big");
  };
  function ch64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ ~xh & zh;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ ~xl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ xh & zh ^ yh & zh;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ xl & zl ^ yl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);
    var c2_hi = rotr64_hi(xl, xh, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);
    var c2_lo = rotr64_lo(xl, xh, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);
    var c2_hi = shr64_hi(xh, xl, 6);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);
    var c2_lo = shr64_lo(xh, xl, 6);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  var utils$a = utils$h;
  var SHA512 = _512;
  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();
    SHA512.call(this);
    this.h = [
      3418070365,
      3238371032,
      1654270250,
      914150663,
      2438529370,
      812702999,
      355462360,
      4144912697,
      1731405415,
      4290775857,
      2394180231,
      1750603025,
      3675008525,
      1694076839,
      1203062813,
      3204075428
    ];
  }
  utils$a.inherits(SHA384, SHA512);
  var _384 = SHA384;
  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;
  SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$a.toHex32(this.h.slice(0, 12), "big");
    else
      return utils$a.split32(this.h.slice(0, 12), "big");
  };
  sha.sha1 = _1;
  sha.sha224 = _224;
  sha.sha256 = _256;
  sha.sha384 = _384;
  sha.sha512 = _512;
  var ripemd = {};
  var utils$9 = utils$h;
  var common$1 = common$6;
  var rotl32 = utils$9.rotl32;
  var sum32 = utils$9.sum32;
  var sum32_3 = utils$9.sum32_3;
  var sum32_4 = utils$9.sum32_4;
  var BlockHash = common$1.BlockHash;
  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();
    BlockHash.call(this);
    this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    this.endian = "little";
  }
  utils$9.inherits(RIPEMD160, BlockHash);
  ripemd.ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32(
        rotl32(
          sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
          s[j]
        ),
        E
      );
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(
        rotl32(
          sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
          sh[j]
        ),
        Eh
      );
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };
  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$9.toHex32(this.h, "little");
    else
      return utils$9.split32(this.h, "little");
  };
  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return x & y | ~x & z;
    else if (j <= 47)
      return (x | ~y) ^ z;
    else if (j <= 63)
      return x & z | y & ~z;
    else
      return x ^ (y | ~z);
  }
  function K(j) {
    if (j <= 15)
      return 0;
    else if (j <= 31)
      return 1518500249;
    else if (j <= 47)
      return 1859775393;
    else if (j <= 63)
      return 2400959708;
    else
      return 2840853838;
  }
  function Kh(j) {
    if (j <= 15)
      return 1352829926;
    else if (j <= 31)
      return 1548603684;
    else if (j <= 47)
      return 1836072691;
    else if (j <= 63)
      return 2053994217;
    else
      return 0;
  }
  var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
  ];
  var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
  ];
  var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
  ];
  var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
  ];
  var utils$8 = utils$h;
  var assert$6 = minimalisticAssert$1;
  function Hmac(hash2, key2, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash2, key2, enc);
    this.Hash = hash2;
    this.blockSize = hash2.blockSize / 8;
    this.outSize = hash2.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils$8.toArray(key2, enc));
  }
  var hmac$1 = Hmac;
  Hmac.prototype._init = function init(key2) {
    if (key2.length > this.blockSize)
      key2 = new this.Hash().update(key2).digest();
    assert$6(key2.length <= this.blockSize);
    for (var i2 = key2.length; i2 < this.blockSize; i2++)
      key2.push(0);
    for (i2 = 0; i2 < key2.length; i2++)
      key2[i2] ^= 54;
    this.inner = new this.Hash().update(key2);
    for (i2 = 0; i2 < key2.length; i2++)
      key2[i2] ^= 106;
    this.outer = new this.Hash().update(key2);
  };
  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
  (function(exports) {
    var hash2 = exports;
    hash2.utils = utils$h;
    hash2.common = common$6;
    hash2.sha = sha;
    hash2.ripemd = ripemd;
    hash2.hmac = hmac$1;
    hash2.sha1 = hash2.sha.sha1;
    hash2.sha256 = hash2.sha.sha256;
    hash2.sha224 = hash2.sha.sha224;
    hash2.sha384 = hash2.sha.sha384;
    hash2.sha512 = hash2.sha.sha512;
    hash2.ripemd160 = hash2.ripemd.ripemd160;
  })(hash$2);
  const hash$1 = /* @__PURE__ */ getDefaultExportFromCjs(hash$2);
  function createCommonjsModule(fn, basedir, module) {
    return module = {
      path: basedir,
      exports: {},
      require: function(path, base2) {
        return commonjsRequire$1();
      }
    }, fn(module, module.exports), module.exports;
  }
  function commonjsRequire$1() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
  }
  var minimalisticAssert = assert$4;
  function assert$4(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert$4.equal = function assertEqual(l, r2, msg) {
    if (l != r2)
      throw new Error(msg || "Assertion failed: " + l + " != " + r2);
  };
  var utils_1$9 = createCommonjsModule(function(module, exports) {
    var utils2 = exports;
    function toArray2(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i2 = 0; i2 < msg.length; i2++)
          res[i2] = msg[i2] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      } else {
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c = msg.charCodeAt(i2);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils2.toArray = toArray2;
    function zero22(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils2.zero2 = zero22;
    function toHex2(msg) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++)
        res += zero22(msg[i2].toString(16));
      return res;
    }
    utils2.toHex = toHex2;
    utils2.encode = function encode2(arr, enc) {
      if (enc === "hex")
        return toHex2(arr);
      else
        return arr;
    };
  });
  var utils_1$1$1 = createCommonjsModule(function(module, exports) {
    var utils2 = exports;
    utils2.assert = minimalisticAssert;
    utils2.toArray = utils_1$9.toArray;
    utils2.zero2 = utils_1$9.zero2;
    utils2.toHex = utils_1$9.toHex;
    utils2.encode = utils_1$9.encode;
    function getNAF2(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      var i2;
      for (i2 = 0; i2 < naf.length; i2 += 1) {
        naf[i2] = 0;
      }
      var ws = 1 << w + 1;
      var k = num.clone();
      for (i2 = 0; i2 < naf.length; i2++) {
        var z;
        var mod2 = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod2 > (ws >> 1) - 1)
            z = (ws >> 1) - mod2;
          else
            z = mod2;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i2] = z;
        k.iushrn(1);
      }
      return naf;
    }
    utils2.getNAF = getNAF2;
    function getJSF2(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils2.getJSF = getJSF2;
    function cachedProperty(obj, name, computer) {
      var key2 = "_" + name;
      obj.prototype[name] = function cachedProperty2() {
        return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
      };
    }
    utils2.cachedProperty = cachedProperty;
    function parseBytes(bytes2) {
      return typeof bytes2 === "string" ? utils2.toArray(bytes2, "hex") : bytes2;
    }
    utils2.parseBytes = parseBytes;
    function intFromLE(bytes2) {
      return new BN(bytes2, "hex", "le");
    }
    utils2.intFromLE = intFromLE;
  });
  var getNAF = utils_1$1$1.getNAF;
  var getJSF = utils_1$1$1.getJSF;
  var assert$1$1 = utils_1$1$1.assert;
  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  var base = BaseCurve;
  BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype.validate = function validate2() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$1$1(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    var repr = [];
    var j;
    var nafW;
    for (j = 0; j < naf.length; j += doubles.step) {
      nafW = 0;
      for (var l = j + doubles.step - 1; l >= j; l--)
        nafW = (nafW << 1) + naf[l];
      repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i2 = I; i2 > 0; i2--) {
      for (j = 0; j < repr.length; j++) {
        nafW = repr[j];
        if (nafW === i2)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i2)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k, w, this._bitLength);
    var acc = this.jpoint(null, null, null);
    for (var i2 = naf.length - 1; i2 >= 0; i2--) {
      for (var l = 0; i2 >= 0 && naf[i2] === 0; i2--)
        l++;
      if (i2 >= 0)
        l++;
      acc = acc.dblp(l);
      if (i2 < 0)
        break;
      var z = naf[i2];
      assert$1$1(z !== 0);
      if (p.type === "affine") {
        if (z > 0)
          acc = acc.mixedAdd(wnd[z - 1 >> 1]);
        else
          acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
      } else {
        if (z > 0)
          acc = acc.add(wnd[z - 1 >> 1]);
        else
          acc = acc.add(wnd[-z - 1 >> 1].neg());
      }
    }
    return p.type === "affine" ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len2, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max2 = 0;
    var i2;
    var j;
    var p;
    for (i2 = 0; i2 < len2; i2++) {
      p = points[i2];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i2] = nafPoints.wnd;
      wnd[i2] = nafPoints.points;
    }
    for (i2 = len2 - 1; i2 >= 1; i2 -= 2) {
      var a = i2 - 1;
      var b = i2;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
        naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
        max2 = Math.max(naf[a].length, max2);
        max2 = Math.max(naf[b].length, max2);
        continue;
      }
      var comb = [
        points[a],
        /* 1 */
        null,
        /* 3 */
        null,
        /* 5 */
        points[b]
        /* 7 */
      ];
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }
      var index = [
        -3,
        /* -1 -1 */
        -1,
        /* -1 0 */
        -5,
        /* -1 1 */
        -7,
        /* 0 -1 */
        0,
        /* 0 0 */
        7,
        /* 0 1 */
        5,
        /* 1 -1 */
        1,
        /* 1 0 */
        3
        /* 1 1 */
      ];
      var jsf = getJSF(coeffs[a], coeffs[b]);
      max2 = Math.max(jsf[0].length, max2);
      naf[a] = new Array(max2);
      naf[b] = new Array(max2);
      for (j = 0; j < max2; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;
        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i2 = max2; i2 >= 0; i2--) {
      var k = 0;
      while (i2 >= 0) {
        var zero = true;
        for (j = 0; j < len2; j++) {
          tmp[j] = naf[j][i2] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i2--;
      }
      if (i2 >= 0)
        k++;
      acc = acc.dblp(k);
      if (i2 < 0)
        break;
      for (j = 0; j < len2; j++) {
        var z = tmp[j];
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][z - 1 >> 1];
        else if (z < 0)
          p = wnd[j][-z - 1 >> 1].neg();
        if (p.type === "affine")
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    for (i2 = 0; i2 < len2; i2++)
      wnd[i2] = null;
    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };
  function BasePoint(curve2, type) {
    this.curve = curve2;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.eq = function eq2() {
    throw new Error("Not implemented");
  };
  BasePoint.prototype.validate = function validate2() {
    return this.curve.validate(this);
  };
  BaseCurve.prototype.decodePoint = function decodePoint(bytes2, enc) {
    bytes2 = utils_1$1$1.toArray(bytes2, enc);
    var len2 = this.p.byteLength();
    if ((bytes2[0] === 4 || bytes2[0] === 6 || bytes2[0] === 7) && bytes2.length - 1 === 2 * len2) {
      if (bytes2[0] === 6)
        assert$1$1(bytes2[bytes2.length - 1] % 2 === 0);
      else if (bytes2[0] === 7)
        assert$1$1(bytes2[bytes2.length - 1] % 2 === 1);
      var res = this.point(
        bytes2.slice(1, 1 + len2),
        bytes2.slice(1 + len2, 1 + 2 * len2)
      );
      return res;
    } else if ((bytes2[0] === 2 || bytes2[0] === 3) && bytes2.length - 1 === len2) {
      return this.pointFromX(bytes2.slice(1, 1 + len2), bytes2[0] === 3);
    }
    throw new Error("Unknown point format");
  };
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };
  BasePoint.prototype._encode = function _encode2(compact) {
    var len2 = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len2);
    if (compact)
      return [this.getY().isEven() ? 2 : 3].concat(x);
    return [4].concat(x, this.getY().toArray("be", len2));
  };
  BasePoint.prototype.encode = function encode2(enc, compact) {
    return utils_1$1$1.encode(this._encode(compact), enc);
  };
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i2 = 0; i2 < power; i2 += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step,
      points: doubles
    };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    var res = [this];
    var max2 = (1 << wnd) - 1;
    var dbl = max2 === 1 ? null : this.dbl();
    for (var i2 = 1; i2 < max2; i2++)
      res[i2] = res[i2 - 1].add(dbl);
    return {
      wnd,
      points: res
    };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  BasePoint.prototype.dblp = function dblp(k) {
    var r2 = this;
    for (var i2 = 0; i2 < k; i2++)
      r2 = r2.dbl();
    return r2;
  };
  var inherits_browser = createCommonjsModule(function(module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  });
  var assert$2$1 = utils_1$1$1.assert;
  function ShortCurve(conf) {
    base.call(this, "short", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits_browser(ShortCurve, base);
  var short_1 = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new BN(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new BN(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert$2$1(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new BN(vec.a, 16),
          b: new BN(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
    return {
      beta,
      lambda,
      basis
    };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s2 = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s2).fromRed();
    var l2 = ntinv.redSub(s2).fromRed();
    return [l1, l2];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a2;
    var b2;
    var prevR;
    var i2 = 0;
    var r2;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r2 = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));
      if (!a1 && r2.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r2.neg();
        b1 = x;
      } else if (a1 && ++i2 === 2) {
        break;
      }
      prevR = r2;
      v = u;
      u = r2;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r2.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }
    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 }
    ];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1, k2 };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red)
      x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd2 = y.fromRed().isOdd();
    if (odd && !isOdd2 || !odd && isOdd2)
      y = y.redNeg();
    return this.point(x, y);
  };
  ShortCurve.prototype.validate = function validate2(point) {
    if (point.inf)
      return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i2 = 0; i2 < points.length; i2++) {
      var split2 = this._endoSplit(coeffs[i2]);
      var p = points[i2];
      var beta = p._getBeta();
      if (split2.k1.negative) {
        split2.k1.ineg();
        p = p.neg(true);
      }
      if (split2.k2.negative) {
        split2.k2.ineg();
        beta = beta.neg(true);
      }
      npoints[i2 * 2] = p;
      npoints[i2 * 2 + 1] = beta;
      ncoeffs[i2 * 2] = split2.k1;
      ncoeffs[i2 * 2 + 1] = split2.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i2 * 2, jacobianResult);
    for (var j = 0; j < i2 * 2; j++) {
      npoints[j] = null;
      ncoeffs[j] = null;
    }
    return res;
  };
  function Point(curve2, x, y, isRed) {
    base.BasePoint.call(this, curve2, "affine");
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits_browser(Point, base.BasePoint);
  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };
  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve2 = this.curve;
      var endoMul = function(p) {
        return curve2.point(p.x.redMul(curve2.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };
  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [this.x, this.y];
    return [this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    }];
  };
  Point.fromJSON = function fromJSON(curve2, obj, red) {
    if (typeof obj === "string")
      obj = JSON.parse(obj);
    var res = curve2.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
    function obj2point(obj2) {
      return curve2.point(obj2[0], obj2[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [res].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [res].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  Point.prototype.add = function add2(p) {
    if (this.inf)
      return p;
    if (p.inf)
      return this;
    if (this.eq(p))
      return this.dbl();
    if (this.neg().eq(p))
      return this.curve.point(null, null);
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([this], [k]);
    else
      return this.curve._wnafMul(this, k);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  Point.prototype.eq = function eq2(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };
  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };
  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  function JPoint(curve2, x, y, z) {
    base.BasePoint.call(this, curve2, "jacobian");
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN(0);
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);
      this.z = new BN(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  inherits_browser(JPoint, base.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add2(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    if (this.isInfinity())
      return p.toJ();
    if (p.isInfinity())
      return this;
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp(pow3) {
    if (pow3 === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow3)
      return this.dbl();
    var i2;
    if (this.curve.zeroA || this.curve.threeA) {
      var r2 = this;
      for (i2 = 0; i2 < pow3; i2++)
        r2 = r2.dbl();
      return r2;
    }
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for (i2 = 0; i2 < pow3; i2++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i2 + 1 < pow3)
        jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m = xx.redAdd(xx).redIAdd(xx);
      var t2 = m.redSqr().redISub(s2).redISub(s2);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t2;
      ny = m.redMul(s2.redISub(t2)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = b.redSqr();
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      var e = a.redAdd(a).redIAdd(a);
      var f2 = e.redSqr();
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);
      nx = f2.redISub(d).redISub(d);
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t2 = m.redSqr().redISub(s2).redISub(s2);
      nx = t2;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s2.redISub(t2)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m = xx.redAdd(xx).redIAdd(xx);
    var mm = m.redSqr();
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    var ee = e.redSqr();
    var t2 = yyyy.redIAdd(yyyy);
    t2 = t2.redIAdd(t2);
    t2 = t2.redIAdd(t2);
    t2 = t2.redIAdd(t2);
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t2);
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u.redMul(t2.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
  };
  JPoint.prototype.eq = function eq2(p) {
    if (p.type === "affine")
      return this.eq(p.toJ());
    if (this === p)
      return true;
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };
  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x.clone();
    var t2 = this.curve.redN.redMul(zs);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t2);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
  };
  JPoint.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  var curve_1 = createCommonjsModule(function(module, exports) {
    var curve2 = exports;
    curve2.base = base;
    curve2.short = short_1;
    curve2.mont = /*RicMoo:ethers:require(./mont)*/
    null;
    curve2.edwards = /*RicMoo:ethers:require(./edwards)*/
    null;
  });
  var curves_1 = createCommonjsModule(function(module, exports) {
    var curves = exports;
    var assert2 = utils_1$1$1.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve_1.short(options);
      else if (options.type === "edwards")
        this.curve = new curve_1.edwards(options);
      else
        this.curve = new curve_1.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert2(this.g.validate(), "Invalid curve");
      assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve2
          });
          return curve2;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash$1.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash$1.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash$1.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash$1.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash$1.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash$1.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash$1.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/
      null.crash();
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash$1.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  });
  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils_1$9.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils_1$9.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils_1$9.toArray(options.pers, options.persEnc || "hex");
    minimalisticAssert(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._init(entropy, nonce, pers);
  }
  var hmacDrbg = HmacDRBG;
  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i2 = 0; i2 < this.V.length; i2++) {
      this.K[i2] = 0;
      this.V[i2] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656;
  };
  HmacDRBG.prototype._hmac = function hmac2() {
    return new hash$1.hmac(this.hash, this.K);
  };
  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([0]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
    this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add2, addEnc) {
    if (typeof entropyEnc !== "string") {
      addEnc = add2;
      add2 = entropyEnc;
      entropyEnc = null;
    }
    entropy = utils_1$9.toArray(entropy, entropyEnc);
    add2 = utils_1$9.toArray(add2, addEnc);
    minimalisticAssert(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._update(entropy.concat(add2 || []));
    this._reseed = 1;
  };
  HmacDRBG.prototype.generate = function generate(len2, enc, add2, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error("Reseed is required");
    if (typeof enc !== "string") {
      addEnc = add2;
      add2 = enc;
      enc = null;
    }
    if (add2) {
      add2 = utils_1$9.toArray(add2, addEnc || "hex");
      this._update(add2);
    }
    var temp = [];
    while (temp.length < len2) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len2);
    this._update(add2);
    this._reseed++;
    return utils_1$9.encode(res, enc);
  };
  var assert$3$1 = utils_1$1$1.assert;
  function KeyPair(ec2, options) {
    this.ec = ec2;
    this.priv = null;
    this.pub = null;
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  var key = KeyPair;
  KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(ec2, {
      pub,
      pubEnc: enc
    });
  };
  KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;
    return new KeyPair(ec2, {
      priv,
      privEnc: enc
    });
  };
  KeyPair.prototype.validate = function validate2() {
    var pub = this.getPublic();
    if (pub.isInfinity())
      return { result: false, reason: "Invalid public key" };
    if (!pub.validate())
      return { result: false, reason: "Public key is not a point" };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: "Public key * N != O" };
    return { result: true, reason: null };
  };
  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    if (typeof compact === "string") {
      enc = compact;
      compact = null;
    }
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
    if (!enc)
      return this.pub;
    return this.pub.encode(enc, compact);
  };
  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex")
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
    this.priv = new BN(key2, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
  };
  KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
    if (key2.x || key2.y) {
      if (this.ec.curve.type === "mont") {
        assert$3$1(key2.x, "Need x coordinate");
      } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
        assert$3$1(key2.x && key2.y, "Need both x and y coordinate");
      }
      this.pub = this.ec.curve.point(key2.x, key2.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key2, enc);
  };
  KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) {
      assert$3$1(pub.validate(), "public point not validated");
    }
    return pub.mul(this.priv).getX();
  };
  KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };
  KeyPair.prototype.verify = function verify(msg, signature2, options) {
    return this.ec.verify(msg, signature2, this, void 0, options);
  };
  KeyPair.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
  };
  var assert$4$1 = utils_1$1$1.assert;
  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;
    if (this._importDER(options, enc))
      return;
    assert$4$1(options.r && options.s, "Signature without r or s");
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === void 0)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  var signature$1 = Signature;
  function Position() {
    this.place = 0;
  }
  function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 128)) {
      return initial;
    }
    var octetLen = initial & 15;
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }
    if (buf[p.place] === 0) {
      return false;
    }
    var val = 0;
    for (var i2 = 0, off = p.place; i2 < octetLen; i2++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }
    if (val <= 127) {
      return false;
    }
    p.place = off;
    return val;
  }
  function rmPadding(buf) {
    var i2 = 0;
    var len2 = buf.length - 1;
    while (!buf[i2] && !(buf[i2 + 1] & 128) && i2 < len2) {
      i2++;
    }
    if (i2 === 0) {
      return buf;
    }
    return buf.slice(i2);
  }
  Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils_1$1$1.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 48) {
      return false;
    }
    var len2 = getLength(data, p);
    if (len2 === false) {
      return false;
    }
    if (len2 + p.place !== data.length) {
      return false;
    }
    if (data[p.place++] !== 2) {
      return false;
    }
    var rlen = getLength(data, p);
    if (rlen === false) {
      return false;
    }
    if ((data[p.place] & 128) !== 0) {
      return false;
    }
    var r2 = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 2) {
      return false;
    }
    var slen = getLength(data, p);
    if (slen === false) {
      return false;
    }
    if (data.length !== slen + p.place) {
      return false;
    }
    if ((data[p.place] & 128) !== 0) {
      return false;
    }
    var s2 = data.slice(p.place, slen + p.place);
    if (r2[0] === 0) {
      if (r2[1] & 128) {
        r2 = r2.slice(1);
      } else {
        return false;
      }
    }
    if (s2[0] === 0) {
      if (s2[1] & 128) {
        s2 = s2.slice(1);
      } else {
        return false;
      }
    }
    this.r = new BN(r2);
    this.s = new BN(s2);
    this.recoveryParam = null;
    return true;
  };
  function constructLength(arr, len2) {
    if (len2 < 128) {
      arr.push(len2);
      return;
    }
    var octets = 1 + (Math.log(len2) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while (--octets) {
      arr.push(len2 >>> (octets << 3) & 255);
    }
    arr.push(len2);
  }
  Signature.prototype.toDER = function toDER(enc) {
    var r2 = this.r.toArray();
    var s2 = this.s.toArray();
    if (r2[0] & 128)
      r2 = [0].concat(r2);
    if (s2[0] & 128)
      s2 = [0].concat(s2);
    r2 = rmPadding(r2);
    s2 = rmPadding(s2);
    while (!s2[0] && !(s2[1] & 128)) {
      s2 = s2.slice(1);
    }
    var arr = [2];
    constructLength(arr, r2.length);
    arr = arr.concat(r2);
    arr.push(2);
    constructLength(arr, s2.length);
    var backHalf = arr.concat(s2);
    var res = [48];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils_1$1$1.encode(res, enc);
  };
  var rand = (
    /*RicMoo:ethers:require(brorand)*/
    function() {
      throw new Error("unsupported");
    }
  );
  var assert$5 = utils_1$1$1.assert;
  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);
    if (typeof options === "string") {
      assert$5(
        Object.prototype.hasOwnProperty.call(curves_1, options),
        "Unknown curve " + options
      );
      options = curves_1[options];
    }
    if (options instanceof curves_1.PresetCurve)
      options = { curve: options };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  var ec = EC;
  EC.prototype.keyPair = function keyPair(options) {
    return new key(this, options);
  };
  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return key.fromPrivate(this, priv, enc);
  };
  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return key.fromPublic(this, pub, enc);
  };
  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
    var drbg = new hmacDrbg({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || "utf8",
      entropy: options.entropy || rand(),
      entropyEnc: options.entropy && options.entropyEnc || "utf8",
      nonce: this.n.toArray()
    });
    var bytes2 = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for (; ; ) {
      var priv = new BN(drbg.generate(bytes2));
      if (priv.cmp(ns2) > 0)
        continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };
  EC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {
    var byteLength2;
    if (BN.isBN(msg) || typeof msg === "number") {
      msg = new BN(msg, 16);
      byteLength2 = msg.byteLength();
    } else if (typeof msg === "object") {
      byteLength2 = msg.length;
      msg = new BN(msg, 16);
    } else {
      var str = msg.toString();
      byteLength2 = str.length + 1 >>> 1;
      msg = new BN(str, 16);
    }
    if (typeof bitLength !== "number") {
      bitLength = byteLength2 * 8;
    }
    var delta = bitLength - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  EC.prototype.sign = function sign(msg, key2, enc, options) {
    if (typeof enc === "object") {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
    if (typeof msg !== "string" && typeof msg !== "number" && !BN.isBN(msg)) {
      assert$5(
        typeof msg === "object" && msg && typeof msg.length === "number",
        "Expected message to be an array-like, a hex string, or a BN instance"
      );
      assert$5(msg.length >>> 0 === msg.length);
      for (var i2 = 0; i2 < msg.length; i2++) assert$5((msg[i2] & 255) === msg[i2]);
    }
    key2 = this.keyFromPrivate(key2, enc);
    msg = this._truncateToN(msg, false, options.msgBitLength);
    assert$5(!msg.isNeg(), "Can not sign a negative message");
    var bytes2 = this.n.byteLength();
    var bkey = key2.getPrivate().toArray("be", bytes2);
    var nonce = msg.toArray("be", bytes2);
    assert$5(new BN(nonce).eq(msg), "Can not sign message");
    var drbg = new hmacDrbg({
      hash: this.hash,
      entropy: bkey,
      nonce,
      pers: options.pers,
      persEnc: options.persEnc || "utf8"
    });
    var ns1 = this.n.sub(new BN(1));
    for (var iter = 0; ; iter++) {
      var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;
      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;
      var kpX = kp.getX();
      var r2 = kpX.umod(this.n);
      if (r2.cmpn(0) === 0)
        continue;
      var s2 = k.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));
      s2 = s2.umod(this.n);
      if (s2.cmpn(0) === 0)
        continue;
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
      if (options.canonical && s2.cmp(this.nh) > 0) {
        s2 = this.n.sub(s2);
        recoveryParam ^= 1;
      }
      return new signature$1({ r: r2, s: s2, recoveryParam });
    }
  };
  EC.prototype.verify = function verify(msg, signature$1$1, key2, enc, options) {
    if (!options)
      options = {};
    msg = this._truncateToN(msg, false, options.msgBitLength);
    key2 = this.keyFromPublic(key2, enc);
    signature$1$1 = new signature$1(signature$1$1, "hex");
    var r2 = signature$1$1.r;
    var s2 = signature$1$1.s;
    if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
      return false;
    if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
      return false;
    var sinv = s2.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r2).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
      p = this.g.mulAdd(u1, key2.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.getX().umod(this.n).cmp(r2) === 0;
    }
    p = this.g.jmulAdd(u1, key2.getPublic(), u2);
    if (p.isInfinity())
      return false;
    return p.eqXToP(r2);
  };
  EC.prototype.recoverPubKey = function(msg, signature$1$1, j, enc) {
    assert$5((3 & j) === j, "The recovery param is more than two bits");
    signature$1$1 = new signature$1(signature$1$1, enc);
    var n = this.n;
    var e = new BN(msg);
    var r2 = signature$1$1.r;
    var s2 = signature$1$1.s;
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error("Unable to find sencond key candinate");
    if (isSecondKey)
      r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
    else
      r2 = this.curve.pointFromX(r2, isYOdd);
    var rInv = signature$1$1.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s22 = s2.mul(rInv).umod(n);
    return this.g.mulAdd(s1, r2, s22);
  };
  EC.prototype.getKeyRecoveryParam = function(e, signature$1$1, Q, enc) {
    signature$1$1 = new signature$1(signature$1$1, enc);
    if (signature$1$1.recoveryParam !== null)
      return signature$1$1.recoveryParam;
    for (var i2 = 0; i2 < 4; i2++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature$1$1, i2);
      } catch (e2) {
        continue;
      }
      if (Qprime.eq(Q))
        return i2;
    }
    throw new Error("Unable to find valid recovery factor");
  };
  var elliptic_1 = createCommonjsModule(function(module, exports) {
    var elliptic = exports;
    elliptic.version = /*RicMoo:ethers*/
    { version: "6.6.1" }.version;
    elliptic.utils = utils_1$1$1;
    elliptic.rand = /*RicMoo:ethers:require(brorand)*/
    function() {
      throw new Error("unsupported");
    };
    elliptic.curve = curve_1;
    elliptic.curves = curves_1;
    elliptic.ec = ec;
    elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/
    null;
  });
  var EC$1 = elliptic_1.ec;
  const version$3 = "signing-key/5.8.0";
  const logger$7 = new Logger(version$3);
  let _curve = null;
  function getCurve() {
    if (!_curve) {
      _curve = new EC$1("secp256k1");
    }
    return _curve;
  }
  class SigningKey {
    constructor(privateKey) {
      defineReadOnly(this, "curve", "secp256k1");
      defineReadOnly(this, "privateKey", hexlify(privateKey));
      if (hexDataLength(this.privateKey) !== 32) {
        logger$7.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
      }
      const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
      defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
      defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
      defineReadOnly(this, "_isSigningKey", true);
    }
    _addPoint(other) {
      const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
      const p1 = getCurve().keyFromPublic(arrayify(other));
      return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
    }
    signDigest(digest) {
      const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
      const digestBytes = arrayify(digest);
      if (digestBytes.length !== 32) {
        logger$7.throwArgumentError("bad digest length", "digest", digest);
      }
      const signature2 = keyPair.sign(digestBytes, { canonical: true });
      return splitSignature({
        recoveryParam: signature2.recoveryParam,
        r: hexZeroPad("0x" + signature2.r.toString(16), 32),
        s: hexZeroPad("0x" + signature2.s.toString(16), 32)
      });
    }
    computeSharedSecret(otherKey) {
      const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
      const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
      return hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
    }
    static isSigningKey(value) {
      return !!(value && value._isSigningKey);
    }
  }
  function recoverPublicKey$1(digest, signature2) {
    const sig = splitSignature(signature2);
    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
    return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
  }
  function computePublicKey(key2, compressed) {
    const bytes2 = arrayify(key2);
    if (bytes2.length === 32) {
      const signingKey = new SigningKey(bytes2);
      return signingKey.publicKey;
    } else if (bytes2.length === 33) {
      return "0x" + getCurve().keyFromPublic(bytes2).getPublic(false, "hex");
    } else if (bytes2.length === 65) {
      {
        return hexlify(bytes2);
      }
    }
    return logger$7.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
  }
  const version$2 = "transactions/5.8.0";
  const logger$6 = new Logger(version$2);
  var TransactionTypes;
  (function(TransactionTypes2) {
    TransactionTypes2[TransactionTypes2["legacy"] = 0] = "legacy";
    TransactionTypes2[TransactionTypes2["eip2930"] = 1] = "eip2930";
    TransactionTypes2[TransactionTypes2["eip1559"] = 2] = "eip1559";
  })(TransactionTypes || (TransactionTypes = {}));
  function handleAddress(value) {
    if (value === "0x") {
      return null;
    }
    return getAddress(value);
  }
  function handleNumber(value) {
    if (value === "0x") {
      return Zero;
    }
    return BigNumber.from(value);
  }
  function computeAddress(key2) {
    const publicKey = computePublicKey(key2);
    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
  }
  function recoverAddress(digest, signature2) {
    return computeAddress(recoverPublicKey$1(arrayify(digest), signature2));
  }
  function formatNumber(value, name) {
    const result = stripZeros(BigNumber.from(value).toHexString());
    if (result.length > 32) {
      logger$6.throwArgumentError("invalid length for " + name, "transaction:" + name, value);
    }
    return result;
  }
  function accessSetify(addr, storageKeys) {
    return {
      address: getAddress(addr),
      storageKeys: (storageKeys || []).map((storageKey, index) => {
        if (hexDataLength(storageKey) !== 32) {
          logger$6.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
        }
        return storageKey.toLowerCase();
      })
    };
  }
  function accessListify(value) {
    if (Array.isArray(value)) {
      return value.map((set2, index) => {
        if (Array.isArray(set2)) {
          if (set2.length > 2) {
            logger$6.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set2);
          }
          return accessSetify(set2[0], set2[1]);
        }
        return accessSetify(set2.address, set2.storageKeys);
      });
    }
    const result = Object.keys(value).map((addr) => {
      const storageKeys = value[addr].reduce((accum, storageKey) => {
        accum[storageKey] = true;
        return accum;
      }, {});
      return accessSetify(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a, b) => a.address.localeCompare(b.address));
    return result;
  }
  function formatAccessList(value) {
    return accessListify(value).map((set2) => [set2.address, set2.storageKeys]);
  }
  function _serializeEip1559(transaction, signature2) {
    if (transaction.gasPrice != null) {
      const gasPrice = BigNumber.from(transaction.gasPrice);
      const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
      if (!gasPrice.eq(maxFeePerGas)) {
        logger$6.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
          gasPrice,
          maxFeePerGas
        });
      }
    }
    const fields = [
      formatNumber(transaction.chainId || 0, "chainId"),
      formatNumber(transaction.nonce || 0, "nonce"),
      formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
      formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
      formatNumber(transaction.gasLimit || 0, "gasLimit"),
      transaction.to != null ? getAddress(transaction.to) : "0x",
      formatNumber(transaction.value || 0, "value"),
      transaction.data || "0x",
      formatAccessList(transaction.accessList || [])
    ];
    if (signature2) {
      const sig = splitSignature(signature2);
      fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
      fields.push(stripZeros(sig.r));
      fields.push(stripZeros(sig.s));
    }
    return hexConcat(["0x02", encode$1(fields)]);
  }
  function _serializeEip2930(transaction, signature2) {
    const fields = [
      formatNumber(transaction.chainId || 0, "chainId"),
      formatNumber(transaction.nonce || 0, "nonce"),
      formatNumber(transaction.gasPrice || 0, "gasPrice"),
      formatNumber(transaction.gasLimit || 0, "gasLimit"),
      transaction.to != null ? getAddress(transaction.to) : "0x",
      formatNumber(transaction.value || 0, "value"),
      transaction.data || "0x",
      formatAccessList(transaction.accessList || [])
    ];
    if (signature2) {
      const sig = splitSignature(signature2);
      fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
      fields.push(stripZeros(sig.r));
      fields.push(stripZeros(sig.s));
    }
    return hexConcat(["0x01", encode$1(fields)]);
  }
  function _parseEipSignature(tx, fields, serialize) {
    try {
      const recid = handleNumber(fields[0]).toNumber();
      if (recid !== 0 && recid !== 1) {
        throw new Error("bad recid");
      }
      tx.v = recid;
    } catch (error2) {
      logger$6.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
    }
    tx.r = hexZeroPad(fields[1], 32);
    tx.s = hexZeroPad(fields[2], 32);
    try {
      const digest = keccak256(serialize(tx));
      tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
    } catch (error2) {
    }
  }
  function _parseEip1559(payload) {
    const transaction = decode$1(payload.slice(1));
    if (transaction.length !== 9 && transaction.length !== 12) {
      logger$6.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
    }
    const maxPriorityFeePerGas = handleNumber(transaction[2]);
    const maxFeePerGas = handleNumber(transaction[3]);
    const tx = {
      type: 2,
      chainId: handleNumber(transaction[0]).toNumber(),
      nonce: handleNumber(transaction[1]).toNumber(),
      maxPriorityFeePerGas,
      maxFeePerGas,
      gasPrice: null,
      gasLimit: handleNumber(transaction[4]),
      to: handleAddress(transaction[5]),
      value: handleNumber(transaction[6]),
      data: transaction[7],
      accessList: accessListify(transaction[8])
    };
    if (transaction.length === 9) {
      return tx;
    }
    tx.hash = keccak256(payload);
    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
    return tx;
  }
  function _parseEip2930(payload) {
    const transaction = decode$1(payload.slice(1));
    if (transaction.length !== 8 && transaction.length !== 11) {
      logger$6.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
    }
    const tx = {
      type: 1,
      chainId: handleNumber(transaction[0]).toNumber(),
      nonce: handleNumber(transaction[1]).toNumber(),
      gasPrice: handleNumber(transaction[2]),
      gasLimit: handleNumber(transaction[3]),
      to: handleAddress(transaction[4]),
      value: handleNumber(transaction[5]),
      data: transaction[6],
      accessList: accessListify(transaction[7])
    };
    if (transaction.length === 8) {
      return tx;
    }
    tx.hash = keccak256(payload);
    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
    return tx;
  }
  function _parse(rawTransaction) {
    const transaction = decode$1(rawTransaction);
    if (transaction.length !== 9 && transaction.length !== 6) {
      logger$6.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
    }
    const tx = {
      nonce: handleNumber(transaction[0]).toNumber(),
      gasPrice: handleNumber(transaction[1]),
      gasLimit: handleNumber(transaction[2]),
      to: handleAddress(transaction[3]),
      value: handleNumber(transaction[4]),
      data: transaction[5],
      chainId: 0
    };
    if (transaction.length === 6) {
      return tx;
    }
    try {
      tx.v = BigNumber.from(transaction[6]).toNumber();
    } catch (error2) {
      return tx;
    }
    tx.r = hexZeroPad(transaction[7], 32);
    tx.s = hexZeroPad(transaction[8], 32);
    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
      tx.chainId = tx.v;
      tx.v = 0;
    } else {
      tx.chainId = Math.floor((tx.v - 35) / 2);
      if (tx.chainId < 0) {
        tx.chainId = 0;
      }
      let recoveryParam = tx.v - 27;
      const raw = transaction.slice(0, 6);
      if (tx.chainId !== 0) {
        raw.push(hexlify(tx.chainId));
        raw.push("0x");
        raw.push("0x");
        recoveryParam -= tx.chainId * 2 + 8;
      }
      const digest = keccak256(encode$1(raw));
      try {
        tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam });
      } catch (error2) {
      }
      tx.hash = keccak256(rawTransaction);
    }
    tx.type = null;
    return tx;
  }
  function parse$1(rawTransaction) {
    const payload = arrayify(rawTransaction);
    if (payload[0] > 127) {
      return _parse(payload);
    }
    switch (payload[0]) {
      case 1:
        return _parseEip2930(payload);
      case 2:
        return _parseEip1559(payload);
    }
    return logger$6.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "parseTransaction",
      transactionType: payload[0]
    });
  }
  const EthAppPleaseEnableContractData = createCustomErrorClass("EthAppPleaseEnableContractData");
  const EthAppNftNotSupported = createCustomErrorClass("EthAppNftNotSupported");
  function isBytes$4(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
  }
  function bytes$4(b, ...lengths) {
    if (!isBytes$4(b))
      throw new Error("Uint8Array expected");
    if (lengths.length > 0 && !lengths.includes(b.length))
      throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
  }
  function exists$1(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function output$1(out, instance) {
    bytes$4(out);
    const min2 = instance.outputLen;
    if (out.length < min2) {
      throw new Error(`digestInto() expects output buffer of length at least ${min2}`);
    }
  }
  const crypto$3 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  function isBytes$3(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
  }
  const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
  const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  const rotr = (word, shift) => word << 32 - shift | word >>> shift;
  const rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
  const isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
  const byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
  const byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);
  function byteSwap32(arr) {
    for (let i2 = 0; i2 < arr.length; i2++) {
      arr[i2] = byteSwap(arr[i2]);
    }
  }
  const hexes$1 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i2) => i2.toString(16).padStart(2, "0"));
  function bytesToHex$2(bytes2) {
    bytes$4(bytes2);
    let hex2 = "";
    for (let i2 = 0; i2 < bytes2.length; i2++) {
      hex2 += hexes$1[bytes2[i2]];
    }
    return hex2;
  }
  const asciis$1 = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
  function asciiToBase16$1(char) {
    if (char >= asciis$1._0 && char <= asciis$1._9)
      return char - asciis$1._0;
    if (char >= asciis$1._A && char <= asciis$1._F)
      return char - (asciis$1._A - 10);
    if (char >= asciis$1._a && char <= asciis$1._f)
      return char - (asciis$1._a - 10);
    return;
  }
  function hexToBytes$2(hex2) {
    if (typeof hex2 !== "string")
      throw new Error("hex string expected, got " + typeof hex2);
    const hl = hex2.length;
    const al = hl / 2;
    if (hl % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + hl);
    const array2 = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
      const n1 = asciiToBase16$1(hex2.charCodeAt(hi));
      const n2 = asciiToBase16$1(hex2.charCodeAt(hi + 1));
      if (n1 === void 0 || n2 === void 0) {
        const char = hex2[hi] + hex2[hi + 1];
        throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
      }
      array2[ai] = n1 * 16 + n2;
    }
    return array2;
  }
  const nextTick$1 = async () => {
  };
  async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for (let i2 = 0; i2 < iters; i2++) {
      cb(i2);
      const diff2 = Date.now() - ts;
      if (diff2 >= 0 && diff2 < tick)
        continue;
      await nextTick$1();
      ts += diff2;
    }
  }
  function utf8ToBytes$2(str) {
    if (typeof str !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str));
  }
  function toBytes$1(data) {
    if (typeof data === "string")
      data = utf8ToBytes$2(data);
    bytes$4(data);
    return data;
  }
  function concatBytes$2(...arrays) {
    let sum = 0;
    for (let i2 = 0; i2 < arrays.length; i2++) {
      const a = arrays[i2];
      bytes$4(a);
      sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i2 = 0, pad = 0; i2 < arrays.length; i2++) {
      const a = arrays[i2];
      res.set(a, pad);
      pad += a.length;
    }
    return res;
  }
  class Hash {
    // Safe version that clones internal state
    clone() {
      return this._cloneInto();
    }
  }
  const toStr = {}.toString;
  function checkOpts(defaults, opts) {
    if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
      throw new Error("Options should be object or undefined");
    const merged = Object.assign(defaults, opts);
    return merged;
  }
  function wrapConstructor(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes$1(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
  }
  function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes$1(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
  }
  function wrapXOFConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes$1(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
  }
  function randomBytes(bytesLength = 32) {
    if (crypto$3 && typeof crypto$3.getRandomValues === "function") {
      return crypto$3.getRandomValues(new Uint8Array(bytesLength));
    }
    throw new Error("crypto.getRandomValues must be defined");
  }
  const utils$7 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    Hash,
    asyncLoop,
    byteSwap,
    byteSwap32,
    byteSwapIfBE,
    bytesToHex: bytesToHex$2,
    checkOpts,
    concatBytes: concatBytes$2,
    createView,
    hexToBytes: hexToBytes$2,
    isBytes: isBytes$3,
    isLE,
    nextTick: nextTick$1,
    randomBytes,
    rotl,
    rotr,
    toBytes: toBytes$1,
    u32,
    u8,
    utf8ToBytes: utf8ToBytes$2,
    wrapConstructor,
    wrapConstructorWithOpts,
    wrapXOFConstructorWithOpts
  }, Symbol.toStringTag, { value: "Module" }));
  function setBigUint64$1(view, byteOffset, value, isLE2) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE2);
    const _32n2 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n2 & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE2 ? 4 : 0;
    const l = isLE2 ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE2);
    view.setUint32(byteOffset + l, wl, isLE2);
  }
  const Chi$1 = (a, b, c) => a & b ^ ~a & c;
  const Maj$1 = (a, b, c) => a & b ^ a & c ^ b & c;
  let HashMD$1 = class HashMD extends Hash {
    constructor(blockLen, outputLen, padOffset, isLE2) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.padOffset = padOffset;
      this.isLE = isLE2;
      this.finished = false;
      this.length = 0;
      this.pos = 0;
      this.destroyed = false;
      this.buffer = new Uint8Array(blockLen);
      this.view = createView(this.buffer);
    }
    update(data) {
      exists$1(this);
      const { view, buffer: buffer2, blockLen } = this;
      data = toBytes$1(data);
      const len2 = data.length;
      for (let pos = 0; pos < len2; ) {
        const take = Math.min(blockLen - this.pos, len2 - pos);
        if (take === blockLen) {
          const dataView = createView(data);
          for (; blockLen <= len2 - pos; pos += blockLen)
            this.process(dataView, pos);
          continue;
        }
        buffer2.set(data.subarray(pos, pos + take), this.pos);
        this.pos += take;
        pos += take;
        if (this.pos === blockLen) {
          this.process(view, 0);
          this.pos = 0;
        }
      }
      this.length += data.length;
      this.roundClean();
      return this;
    }
    digestInto(out) {
      exists$1(this);
      output$1(out, this);
      this.finished = true;
      const { buffer: buffer2, view, blockLen, isLE: isLE2 } = this;
      let { pos } = this;
      buffer2[pos++] = 128;
      this.buffer.subarray(pos).fill(0);
      if (this.padOffset > blockLen - pos) {
        this.process(view, 0);
        pos = 0;
      }
      for (let i2 = pos; i2 < blockLen; i2++)
        buffer2[i2] = 0;
      setBigUint64$1(view, blockLen - 8, BigInt(this.length * 8), isLE2);
      this.process(view, 0);
      const oview = createView(out);
      const len2 = this.outputLen;
      if (len2 % 4)
        throw new Error("_sha2: outputLen should be aligned to 32bit");
      const outLen = len2 / 4;
      const state = this.get();
      if (outLen > state.length)
        throw new Error("_sha2: outputLen bigger than state");
      for (let i2 = 0; i2 < outLen; i2++)
        oview.setUint32(4 * i2, state[i2], isLE2);
    }
    digest() {
      const { buffer: buffer2, outputLen } = this;
      this.digestInto(buffer2);
      const res = buffer2.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      to || (to = new this.constructor());
      to.set(...this.get());
      const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
      to.length = length;
      to.pos = pos;
      to.finished = finished;
      to.destroyed = destroyed;
      if (length % blockLen)
        to.buffer.set(buffer2);
      return to;
    }
  };
  const SHA256_K$1 = /* @__PURE__ */ new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  const SHA256_IV$1 = /* @__PURE__ */ new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ]);
  const SHA256_W$1 = /* @__PURE__ */ new Uint32Array(64);
  let SHA256$1 = class SHA256 extends HashMD$1 {
    constructor() {
      super(64, 32, 8, false);
      this.A = SHA256_IV$1[0] | 0;
      this.B = SHA256_IV$1[1] | 0;
      this.C = SHA256_IV$1[2] | 0;
      this.D = SHA256_IV$1[3] | 0;
      this.E = SHA256_IV$1[4] | 0;
      this.F = SHA256_IV$1[5] | 0;
      this.G = SHA256_IV$1[6] | 0;
      this.H = SHA256_IV$1[7] | 0;
    }
    get() {
      const { A, B, C, D, E, F, G, H } = this;
      return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
      this.E = E | 0;
      this.F = F | 0;
      this.G = G | 0;
      this.H = H | 0;
    }
    process(view, offset) {
      for (let i2 = 0; i2 < 16; i2++, offset += 4)
        SHA256_W$1[i2] = view.getUint32(offset, false);
      for (let i2 = 16; i2 < 64; i2++) {
        const W15 = SHA256_W$1[i2 - 15];
        const W2 = SHA256_W$1[i2 - 2];
        const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
        const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
        SHA256_W$1[i2] = s1 + SHA256_W$1[i2 - 7] + s0 + SHA256_W$1[i2 - 16] | 0;
      }
      let { A, B, C, D, E, F, G, H } = this;
      for (let i2 = 0; i2 < 64; i2++) {
        const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
        const T1 = H + sigma1 + Chi$1(E, F, G) + SHA256_K$1[i2] + SHA256_W$1[i2] | 0;
        const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
        const T2 = sigma0 + Maj$1(A, B, C) | 0;
        H = G;
        G = F;
        F = E;
        E = D + T1 | 0;
        D = C;
        C = B;
        B = A;
        A = T1 + T2 | 0;
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      E = E + this.E | 0;
      F = F + this.F | 0;
      G = G + this.G | 0;
      H = H + this.H | 0;
      this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
      SHA256_W$1.fill(0);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
      this.buffer.fill(0);
    }
  };
  let SHA224$1 = class SHA224 extends SHA256$1 {
    constructor() {
      super();
      this.A = 3238371032 | 0;
      this.B = 914150663 | 0;
      this.C = 812702999 | 0;
      this.D = 4144912697 | 0;
      this.E = 4290775857 | 0;
      this.F = 1750603025 | 0;
      this.G = 1694076839 | 0;
      this.H = 3204075428 | 0;
      this.outputLen = 28;
    }
  };
  const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224$1());
  const version$1 = "strings/5.8.0";
  const logger$5 = new Logger(version$1);
  var UnicodeNormalizationForm;
  (function(UnicodeNormalizationForm2) {
    UnicodeNormalizationForm2["current"] = "";
    UnicodeNormalizationForm2["NFC"] = "NFC";
    UnicodeNormalizationForm2["NFD"] = "NFD";
    UnicodeNormalizationForm2["NFKC"] = "NFKC";
    UnicodeNormalizationForm2["NFKD"] = "NFKD";
  })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
  var Utf8ErrorReason;
  (function(Utf8ErrorReason2) {
    Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
    Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
    Utf8ErrorReason2["OVERRUN"] = "string overrun";
    Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
    Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
    Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
    Utf8ErrorReason2["OVERLONG"] = "overlong representation";
  })(Utf8ErrorReason || (Utf8ErrorReason = {}));
  function errorFunc(reason, offset, bytes2, output2, badCodepoint) {
    return logger$5.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes2);
  }
  function ignoreFunc(reason, offset, bytes2, output2, badCodepoint) {
    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
      let i2 = 0;
      for (let o = offset + 1; o < bytes2.length; o++) {
        if (bytes2[o] >> 6 !== 2) {
          break;
        }
        i2++;
      }
      return i2;
    }
    if (reason === Utf8ErrorReason.OVERRUN) {
      return bytes2.length - offset - 1;
    }
    return 0;
  }
  function replaceFunc(reason, offset, bytes2, output2, badCodepoint) {
    if (reason === Utf8ErrorReason.OVERLONG) {
      output2.push(badCodepoint);
      return 0;
    }
    output2.push(65533);
    return ignoreFunc(reason, offset, bytes2);
  }
  const Utf8ErrorFuncs = Object.freeze({
    error: errorFunc,
    ignore: ignoreFunc,
    replace: replaceFunc
  });
  function getUtf8CodePoints(bytes2, onError) {
    if (onError == null) {
      onError = Utf8ErrorFuncs.error;
    }
    bytes2 = arrayify(bytes2);
    const result = [];
    let i2 = 0;
    while (i2 < bytes2.length) {
      const c = bytes2[i2++];
      if (c >> 7 === 0) {
        result.push(c);
        continue;
      }
      let extraLength = null;
      let overlongMask = null;
      if ((c & 224) === 192) {
        extraLength = 1;
        overlongMask = 127;
      } else if ((c & 240) === 224) {
        extraLength = 2;
        overlongMask = 2047;
      } else if ((c & 248) === 240) {
        extraLength = 3;
        overlongMask = 65535;
      } else {
        if ((c & 192) === 128) {
          i2 += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i2 - 1, bytes2, result);
        } else {
          i2 += onError(Utf8ErrorReason.BAD_PREFIX, i2 - 1, bytes2, result);
        }
        continue;
      }
      if (i2 - 1 + extraLength >= bytes2.length) {
        i2 += onError(Utf8ErrorReason.OVERRUN, i2 - 1, bytes2, result);
        continue;
      }
      let res = c & (1 << 8 - extraLength - 1) - 1;
      for (let j = 0; j < extraLength; j++) {
        let nextChar = bytes2[i2];
        if ((nextChar & 192) != 128) {
          i2 += onError(Utf8ErrorReason.MISSING_CONTINUE, i2, bytes2, result);
          res = null;
          break;
        }
        res = res << 6 | nextChar & 63;
        i2++;
      }
      if (res === null) {
        continue;
      }
      if (res > 1114111) {
        i2 += onError(Utf8ErrorReason.OUT_OF_RANGE, i2 - 1 - extraLength, bytes2, result, res);
        continue;
      }
      if (res >= 55296 && res <= 57343) {
        i2 += onError(Utf8ErrorReason.UTF16_SURROGATE, i2 - 1 - extraLength, bytes2, result, res);
        continue;
      }
      if (res <= overlongMask) {
        i2 += onError(Utf8ErrorReason.OVERLONG, i2 - 1 - extraLength, bytes2, result, res);
        continue;
      }
      result.push(res);
    }
    return result;
  }
  function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
    if (form != UnicodeNormalizationForm.current) {
      logger$5.checkNormalize();
      str = str.normalize(form);
    }
    let result = [];
    for (let i2 = 0; i2 < str.length; i2++) {
      const c = str.charCodeAt(i2);
      if (c < 128) {
        result.push(c);
      } else if (c < 2048) {
        result.push(c >> 6 | 192);
        result.push(c & 63 | 128);
      } else if ((c & 64512) == 55296) {
        i2++;
        const c2 = str.charCodeAt(i2);
        if (i2 >= str.length || (c2 & 64512) !== 56320) {
          throw new Error("invalid utf-8 string");
        }
        const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
        result.push(pair >> 18 | 240);
        result.push(pair >> 12 & 63 | 128);
        result.push(pair >> 6 & 63 | 128);
        result.push(pair & 63 | 128);
      } else {
        result.push(c >> 12 | 224);
        result.push(c >> 6 & 63 | 128);
        result.push(c & 63 | 128);
      }
    }
    return arrayify(result);
  }
  function _toUtf8String(codePoints) {
    return codePoints.map((codePoint) => {
      if (codePoint <= 65535) {
        return String.fromCharCode(codePoint);
      }
      codePoint -= 65536;
      return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
    }).join("");
  }
  function toUtf8String(bytes2, onError) {
    return _toUtf8String(getUtf8CodePoints(bytes2, onError));
  }
  function id(text) {
    return keccak256(toUtf8Bytes(text));
  }
  const EIP712$1 = {
    "42161:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "3044022020da162d81217220a0ae92baec05c5e99cbb391469186e27b2609740980c7dff0220285603f10f261ae8a02779cb97033906c5a7901c9e3acae041c2385d17182290"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3044022060df9e42841cef20df24776b08774abf84cdeac36925b5c5817b02a57138718702200b8d4d0c56f01cbbee2334c9b62d05324382acc3e6ee0b5426871ee1117d921e"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3045022100de035d8c1fd5f7f03b113053bf0076b562faadaf767b86ad4cdde63cc7983daa0220422ad10026c955f944b4869b0018957682bb31a79918b6d9f01034ccfaf83a5c"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3045022100ff3a4e5bfefc86a65c1d24732f435f593b7f034254ed8d5c49ad837a09e30762022027e9f17d658dd815d40e7010eafe5a7f3da7d1d0f532471247a4490d04fcc473"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100f30c4f92e576a0aab8b3a86369fd68892bafd4920f47087c772b396ef125c4f40220023a0f6d598e64c64c731fb86a1a331d48558462422f85088d420872b386e367"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304502210086c4f94eb3334026efaf73cc99cdf0b63818eb259e1ccb52b143e9cf47465c79022036532d7b42c4fdf502b53f074d98aec07fa752ca324946917c3ba8f92ff7293e"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3044022050a705227d3b7b1ae5fb8bb170171b47ba7f54243df6b417f669bec5c6ae072902206d293823929e946f2207efea226dfa0e0e6f153729d5351e664da007bc75a6a1"
        }
      ]
    },
    "42161:0x7f069df72b7a39bce9806e3afaf579e54d8cf2b9:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "304502210086b3dfc9a254c1bedf6f227a6ba373df5830ed15c8cd076ab81ccdfa1d9704ea02201a322596fd79104092cfdf1bb50e625de21a5ae6621d324893533b5fd09bdf73"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "304402207836e75bba70bff3ac5c36cea8bba78c5ce37aeedaddee4d96f23ebdab274e2a022036076d9f85a3c5fab437e72dd64d12f12507ff34ee73828d5639a848dbac1f85"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3044022067f37bfce6e054bdeb307b7949eae73359f65fbe85eb79b8d88e6ac65169a06502207e9a91bac7ab6c0af97ba245a322dd64c8e6297cdfd85445b89f592b1e158d21"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "30440220435a279ff85928b3b0b16bc0a92cc7dbf4ab76d6d173d67f28588f131930ad7102207b433afc9626e1fbb4305a12a45d1895506b84ff02d80a6c132d8f4f9820bb87"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30440220411a6efe5337858634ba91743cb534e6748336d276a50cb0e0d15c31956cc82f02204e7306db34a14c64284d87fafc89a7b9ea58d0eca755034e1f6dd137671137fb"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402200f76c7710af7ef186f5673ab73685de1ae8af493a45d96bc83995cecf9824e030220576058fc7dd68808458730612078b92e65bb589aa1770a96ddac6ffc55cf6e05"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3045022100cd448518044c4bfd4a0773c00d700b62a35fe208d27771caaa4239743736f09102204064886c6f5272ea4545977fa1c9d075e3abba0655de494cc81bf969ade063bf"
        }
      ]
    },
    "42161:0x7f069df72b7a39bce9806e3afaf579e54d8cf2b9:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3044022017457b1725fc3af0932818d7f2e727510326094bebf470c313c726104201f4160220233662309328ebf5acf57c1a23384beb8d29b6c026c3084113b3d42e16ad3094"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100f26083b8baa79070fe0424f6b6f0cbe1a6c49a6f7aa00c322f1de5bc6634144202205f49700d5f3360654764353c9ef75a6bcb9940c2cc7a8d0fa3bca82c40ce96c3"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3045022100e4527604bde8bcc397947c9d1b3936b19aee70ea2eb702ae55dfc071efeccef3022033eeb350bf4f03741b3d0d420816a338f449ec7df33608f057038931c1f84fe9"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3045022100902220e354b11ccd4a16b4a4e91e3c2d4e8fd8448df6b41b8466c90c81bc2f2d02205a8dea6307bfda2b0b108c29c35e6a99ad2042a83fa70b8931f244a83c57cb51"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100eabd1e9fed349c12c341846d084b3a67898490bbd2adf0199452a2835faea5f60220017baf11b3d7c12982e2958befb485e15396ca7f6f7d1ee6ab758801ee5a4d16"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402204f4953b728d0776fdd0de8424bf611bfa89daaec9f7352d087eb86eb951130a3022030f94ca49d256a91dd3ccabae63d5acaf053ece9e9b103ac9b3529f49b58cd29"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304402203bdfeec857a64ca1eafba51d77d090936bed9dafc09ba461ced6c058b02758d402202546dd5ab8a003490c5fdc4a789ffeedb9656622ed2ac867d2c712c68ccab104"
        }
      ]
    },
    "42161:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "304502210085c3d02e3f1d2d9dc6bb9975e46e8b90e514d578d9e6974b10b3cc1bf4a2fe7f02205d2257c30412b9067a707f8cfa8da92b0336faa39a2bd7099d2b55e0a085b8cc"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3045022100ff187b0adc9b9e2b9aea716d4047d2ac92c44cd0d0f2b6ac09ec4b52d89e9dcb02200b18d913b72125c7a2d6083e2097f786979c04056b881e44957242982a81931f"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3044022038ca4d34df27f672a40cea96f4397c70148e07a29662601ad765e01c71a5aaf502203c88823e913193f5eff4b8f5eee72463b660b6d146f589151af2164de4d6bb28"
        },
        {
          label: "Maker asset address",
          path: "makerAsset",
          signature: "3044022058de4c432c785035fe20e160f7a98a9ebfb1152df0c61d679b0bf8cf838a3412022006447e72822301ca0fdd56cfeedd0ca04cdf018bb600df3f9b28d633e90b65a4"
        },
        {
          label: "Taker asset address",
          path: "takerAsset",
          signature: "3045022100dd48da4bd40c2ae4e389462e9792c67bf699749fcabf954e0121c7759a499ba4022011b3c12c7d356a8ec62a57643eea50fed6d831b9fe95f94a7b31c4d1ba8fd887"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "3044022074fb2c7f1569c685e740015a91deb0cfaf771d71ba0fffcd14c24d59023878fd02202488ff10efbf225f1750ba334dd885f7966b3be7d57b87bce966aa3aec7fc3b4"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "3045022100ec75b1e6c770ab39c3dec4c827af340b13750d55436002504e8d27872284749d022048dde24cfa5b564e04c3880febbe40650687ea0e85fc634d27f18b95c14f8e59"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402205ee3c0ebf4735b3e7209237a2c4a745ecaa8e0310a7e0b33651aaff4baadd10102205aab92e8cc4444f900e368502e8424d5d05d1216a71e8b4dfa1a30d7ecf29e01"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402202da05529a3b7efb5120658b02f7de224887517b67c26f6cae85c3b4a52d9dcdd022071ecb8acf9bb2ec27d3ef5564394a48192692c1214e3c98f87e651c7c6353994"
        }
      ]
    },
    "42161:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "304402205aa1d43c376b38e68d4cf0d9fa51da49572de9a7d5c8e2fa6f0bb1430b522abf02201e8c73865ecd95e36d106a2fd58e3eaa7a73d6181879aab9254d66e45dfbf16c"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "304402205cc7b36d3b1cf49f956486ba56c571474b1c2dc74776f3d73d1720f402578c9a0220781edc10e5ee70a56a65881b9a4510f2dc0227899664d6ff3c5ca0465ca4b6ef"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100d3d524282bcacd494cd6b72b148033f17fe05789032f5da58944863d24259ecc0220228df613f5d2d2f3662c3c35ad3316ba5a231d95b9fe95cfc39d433b9e0201d7"
        },
        {
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100c8e4bc97eabdd4b267c6733652b735c011cb353bcb14b61ca8b2c732a701db9302204f35ce83dc85008afd0a93608b531f0ea5d680472c077d8dc2a32cc5ccf581c4"
        },
        {
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "3045022100aeadd32775d3d63a1dde73c23fab6d7fef0375d5210728fd8f2ed56adbee5b220220462f3c126c78dd0fc9499005b5ce3b81c995f11c55e9cdaf55d19fb1686f853e"
        },
        {
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "3045022100f6ee6ab28521c9f282fcc897f165e780ec9b0fe9268f2a18beeb3c67922ca679022055a2d60bbc05145e3b55483b502c576066469c6d6fbb9ee3336a16b7b5df4900"
        },
        {
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "304402203c84ee7655fd53fbe7eefb9e7522eeceb29bb7f03559d5e0a92b1ee55e711dcb02200c99dd941f9e58b6b0f28e592c089dbcb245f73ebeddbab9e2e88defacd186df"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "30440220109b530322d864a1e29d431a00f0dcde1cd165a2ad11b021eef605074d4c9758022052f04b7e2a2cd70cae54a881c7f783fcc2058d5b2791b24bc557e4e231cc2dff"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "3045022100f85a6ad793151886d7b4fe8902f55b81e4db1ee73589e1ed180a3f9b2285288b022023d061e2f9694a086229fff173f351c630e907806e8e7f80e9fc154a510962ee"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100d97b6d8cadff2e066b43c0bf3cc363741dd3227c9989ead29a51466f2f1d9cf302205b76c51c2e2d2e75855acf5416be5e3a066b2e671884ae81343cedf9eb42b7c7"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "30440220249407bacec2053557a7360ec596daf931fd002c31f77acd94b151a035728bb7022050769d692217e817efb3f6845dfa293cfbeaa39f93b97dac2d063a4be7c44cf6"
        }
      ]
    },
    "42161:0x912ce59144191c1204e64559fe8253a0e49e6548:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Arbitrum transfers",
        signature: "304402200f7f97c35bb60e6f4052b2a129740c55e716fef26eb0a83a834bbe03d7d82c9e022047b2d37e4149990d28cf1b1b1f9caf803259cae2a343ff72000eddfa319de15f"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3045022100db5520b82af16dd2ac45775fe3db20db5c9829b47b847616b39fa1744685d13202202d1a2c60d5c500eb1119ea52951983c686327f81a0f08d06e58e18ee84486883"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220556ec93aa29917934f4a3626de9b9a2e9ec589446201981a05a860696d33e97d02207792c8caa52e5bc7236d81d11e71bdf9d2845a3b2d7b3a3e99e7371736152374"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "304402206874b15e518f42bcfdde97f409cf86624598ce619890f2c927506c36e1c70bc2022072a649d004485b701e95bdf16b0d7880852df6f3821a3fade0ecb99d947b2157"
        },
        {
          label: "Aproval expire",
          path: "deadline",
          signature: "30440220154b8581a690ee98338540152de43f833571c53113698d4c210745abc5883ac2022022d38615c362d630672aa9cdaa57d799824862e79ac356511055c0f989d80deb"
        }
      ]
    },
    "42161:0xff970a61a04b1ca14834a43f5de4533ebddb5cc8:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit USDC",
        signature: "3044022028314adc36ce0808ecb88517feae3291408503877c3bd9abcdb8b4b24de83f5102207a92d8ea367676eccba14c0aff75efd66b141debac865dd7749013cc306645de"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3045022100d2b596afa0df5133f55d692928734bd15d46fdab388a6f4f69df43420bc99a64022066c087594da4c6d57c24e2bb7c333e78290a1f7f8f9f8262aa4da0812bea1f60"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100834772d8adc519f3a5bd4a6ef33e45c8ef3dfd2c9290afe8e33cc57aa56c4dd802200d7306bf364284118da4710e9a9fae3a0e7e3579206cde4543158e85c3ff4b5b"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100ba188c9fa149de6daeb42904ccd2abc828da911585f983deb669b9bef2fa61a702204e2573968e6d1f61a4e608da485243ef946ce1ab9adab19c0a37514d4971cc5c"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100a72fb1d0a80c68a07076d873613f1f4152c9565a14c54a653a240b6c2f0ea38f02203534a46e31fba5f5c9db78b3f4eeb728b6c7b9580f270bfb1619dc28246c53e1"
        }
      ]
    },
    "42161:0x789fc99093b09ad01c34dc7251d0c89ce743e5a4:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e": {
      contractName: {
        label: "Arbitrum Foundation: Treasury Governor",
        signature: "304402200fa08b5ce686eaf6bb708211bd4bbfe2d4e278f6966ad2e481be73a472bb4b46022067481a8a0d0357e42592498b0e099f8b1313003c423595972bfbf19add008e58"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "3045022100a464daba1b2a7a35336e03fe0c68977597df0917dd14d40b5b794dc12dd1696a0220594ce98bf0fffd98a6717c26465b1c67f14955cd0013f0b9817d85d771ec0acc"
        },
        {
          label: "Support",
          path: "support",
          signature: "3044022051f41d12c90d0e82d9724f7fe43d5b9d035ba46c160fed7a9d6026b8317f80f7022057f325aaae71c60bdaa9bc371a5af9a1d4a5354a7f7dd6865c36faaa4ecf929d"
        }
      ]
    },
    "42161:0x912ce59144191c1204e64559fe8253a0e49e6548:2c3e6b3e91e39ef9bb3c1b1cd2b4d8da76bf433179c8042962671278": {
      contractName: {
        label: "ARB token",
        signature: "3045022100d083aa12bc96ed7568942bad291c90fa0710b984b6d8693021be961d99df15b702200d29db9c738e3fbd7dc3d21612833e32b5e2f197f8273662ce16e20058276a47"
      },
      fields: [
        {
          label: "Delegatee",
          path: "delegatee",
          signature: "304402205274148210b7cc92e2714d33d5c7c280ace94b9d09b41539af5056ddcb588b9b02204b104de75d5fb03f4ec1b455b9785a3c6f41a897142c40f88bd0e27a51ac940d"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "3045022100fdab6f7a16e999d0b0bd2fd4be92682a0c65cd5ae928ed3cd071b11ebe5fbc7702207cf139627f6e2aeee8b0b22fde9c1025cb847b2ba3b4d27a4726e596c284d62e"
        },
        {
          label: "Expiry",
          path: "expiry",
          signature: "30450221009d00f19bd6bc9f14502c0ab2ff54f372f00c6a153083898505f1b9fea585b70002205c1b4afbc7efc4fd027528917d107a95b5f24caba816806fd393d4e419dbdcde"
        }
      ]
    },
    "42161:0xf07ded9dc292157749b6fd268e37df6ea38395b9:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e": {
      contractName: {
        label: "Arbitrum Foundation: Core Governor",
        signature: "3045022100e328451e523340c7f0c6229d69a9196703d33a9aa4920cc775ef4c254eba08b402204d3c4a0be0a1aa383c6895db61ff07623fb000773713a62e56bf107fa8a852d4"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "304502210087d449414d2e9d6466e5b9fc5a2a4c0f93e13b6674fb6f3b5673ad3fcc8780f802204b9e8b83c62042f4f4326d975b0f7e9ac8490d19a2d04f2e26568c3433444783"
        },
        {
          label: "Support",
          path: "support",
          signature: "3044022023b69aa0f439df05ae5be7d03df5fd69ce8a01fce764bc1c8455d2c92106bc85022027866dbb7c5e09eb70f90329dcb59c90a87da90f2b77d17c1f74a9c2e0f663db"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "30440220699737c39cd9763b66d094ef1d30d3985c4f11bc77007df7fdfe3fd5f3d80ec8022003eca58128646ba5cc121bb97c12ab5c9bf36bb9c5f9146377edd55845d4aff2"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100efa855d1d8d09a5234f3e8b307c84ef59871baf73d3233faaecc3a4e1c3747c502203f452a44cc4e298f43a23599291fd21b7048c1003b9e936433c1c3162af7ef9b"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402203d79ec67dc90bc4313a635f4b36295d4c15f3bfea21c92597e968e67573cc5fe02201530a640ddbea23cfc968d9e869ed510b15552343c34ebd01bfa07a1b1c29100"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30450221008eecd0e1f432daf722fd00c54038a4cd4d96624cc117ddfb12c7ed10a59b260d02203d34c811a5918c2654e301a071b624088aa9a0813f19dbfa1c803f3dcec64557"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "304402205f583663ca8fb88b0cc9e507ec6fc86f2fb4815a79bf1b0c551ea5b812019152022054bbea380363ef360d49b07d441a54ee5cd82f207efd855edef221a62109e4ea"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100e322fbcf244d817c6af9e807d36f5a0eb2db21309c07963e826ab5d20c7dc278022068ecb28b65f9844d40ef09e7b141bb220d30d25a42f6ba4a648110901a79c191"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b9f0229134290af4cfeb549204eb02bf34f084b1d0a7c8f161e6beace10dcf1b02203ef40e4c9e88b83a85f0af47b54fa142741bb52ef26302c8aa46b0b274d02fd2"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022000fa125d0c29fbf34da4a6f690857aee73185f5eac7bd8aa5a30f89c91a0e0d2022000bd77b100224b5a89c1aec387dc5a252588a1086958afa1764224da0209bd1a"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100baaccc98644dde5f8cc244e052d8c826e3c1431f444f1f6db3f79413f0f5612302201b6e4b36e8eded626dc04f5d5b4260c83cf43a203e040259cb38f145e13632dc"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022011b7def88426cb6b1b9f6aed60d260774c3f9c2772edc20fb9d678eafecf1d8a02200e8dbacc49e39edf3f04cfd4467f3abc25e6de1e26619a931ee9cd4e28d26b1e"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "304402203623c139b4a7b2b887fbcd197fd35efed9577f7a097e4b4796c35db809e257a802207494069d25e1891a6e846cdaf7d8deb55d9c4e7d2d0cb9455ace4d840a5a86cb"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402202b9e93d841f3f81b63f31cc974d7204bd9c7c00ff57e7021ce3296225b605f04022026293bf2777b6b1971b5fee2c6aeb5e07623f6acd715f39de88796774d931dab"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100b927a3639c291f1c5f5a4459ee6e9eeb172e4fff2639cf2417a0ee22668ee785022016f22532a98ce38d2fec2956118eb67b80c748e012e2e9cc119a84618fd356c3"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022070df47bd9af9e8f70ba486b5188cd24ff2a6a7b7963a628608936986713eb108022023440cee1a31e3d73489a849ec925a85da16d1c096b3029d4337eeaf46a26d4a"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022034c36e86566f7ad86131fdd1f1d2f1b203bbb8f0c80f90ef7b828b603b383a8f02207944fdfc150467a83b580314ee2935df5e22cc8c8e70924755f24e0f48fd6070"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304502210087b5fd4ca85d8d902459aabf0cfb97c676809c967b84c8a8301838f54d2f144602200d268e03f892d81b35ac1bd493310f4fb65a202c2ad2ebec3f427978756b3106"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b5e936abd5df8c51ae2ee04b8f06e58162c5702083fddce3494b19c9bc9c2e01022032e9c8fdfd04c78d70d0f1e03e1fe716afc7bb2d2f643cb4586316e87a7c2150"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30450221008f6d92026f956e9a4635ea2877fcff52b58349050e14e446175d668464090fed022051ace7037868f8984aa208c8d9b7d8a94cd22a93b83e9ca8911227d0f5e5747b"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220659cebc0ec70ec020a1c0ec8dd6a4ce650a836ceddda28d9c26d01404ce03bf402205ff6c87cace6b7b575a341347d81927a8fb0650d53cfa2020eb13b542ce68780"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022100d2a7086532e5076845eef95cd717a59527499db3e32081bc54f1d194cb03091c021f2a2c5b8062b9b48bce8993ba878bd516d6123a022537319a3671be2554f4f9"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022039f099a0c207376807f176374b8ddd15b4b0d54396915ecf071e120e4002c8e4022024478aa5c1074cda3755894674a55e21e773b83fc6b74e55822b2d05cab29cce"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402205cb992ba630452b43cc31c19df9a6dd6287a31fe3e8b67ca27880acfd89cce65022009b13c4746edad9a5bd39b82911a68b0be7f772c51df6617f7cfd2ffe0645bc1"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402205d4def0d4820dec59e1705730f3a18a5ca3ddb6b8580265420049c7a522ba0cd0220737132ba1352c7b8dd8463d871cabf53a5dedf5aee68c7b1172e833806aea572"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100eb5d8a309b9b9865377f4b430acc4ac5845c6b4339ce2bb9228fc76947904e3b02207530da05e41c522a6385d0cb586cb459305e98b45d32d0decc078081781986ae"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220641f8f08fd8041a66afbeaced49baebf1b9da777154391dc73c65bea935579c1022042d5bd8a956823bf2640618c1ec9781e198ff2e139674c9cff1ea5c795219cd0"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100b3750d69ba1ceb422b418946d10e3cb101b19c28040300628622cfaf2e3984c5022003f355a155850073b1511f6109fe1d2d0d178f81f229659b5b4277a1a322c06e"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b7d9aaad264938c68c358c81da5a0bfece07b718b547b82a421ec2958dfe8cce02201a58b6f6cec2a232cb9f974b0186ffb7d2ebedd2899c81c8774cb4be9358a289"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022040492fcba100a05d3d62a15a165912603b866151d5437fa5985a3893eddcd97f02202f1cca4cb81db6e199b5f39e73153db2114781201c7d1c39809f4a1da323543d"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100ec73657edad99aff8303f81c094141ebaa9bd95fcad237ce9992539a0449c4f30220641c172f4c4fa386cbb73b94c501e7f7f1eb192fdfe3846c08040d09c669c868"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304502210089dd4d93ee46dbfce828aff080df592be27d90da889f24471accdbbba93d222a02207529a91c4adef2576bae26536fb152ffa8d611665b3302299e646709b87d7e57"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "30450221009c8a318956245ff5b253baa80fd81b5bf9f5628453de4f54c953f8e2112e4f6f02207b740e1eee2e61786136f3c3aeb53a05d1f908d9ad2d21813b1fed8828c3e6aa"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100cbc2390f81a6af67d5225c34c51b2289d0aba65ccfff6cb03acf3b54f2334cc5022010fdebe0e5a601ba1ec521391805bf13dbaced0c707475b05ccaadaa82acce61"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100ebb9f99820a07f27860036adb3ba27eb37bcc0024e79e38c0f39066f1973fb0c022054873d3322dd59dc5ef11e252ee2e6f9d9bcbf9aad645732cd601a3a74145181"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022023711cac25abd661c6078cb2efd72795ccfc94da57c136c11569369c381be82c02206a616167025ddbab91ab5796ff5be6745b1929772597bab447e57baca50d411d"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100868bc53f10623bd59e3b04f68bc24e170e33cd4b76bb702f665d0a5fadd02bc102201bcf6f84e27bd37d4494523a2a5653a8be91ca3db9bcfd733e7d7fc16d57a619"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3045022100963447dd2d0e26370bfc88c42fa2b3cb1b2220c985d281aaed627a14732cf4b802207fd61acb22cace24228c1bb89143f2ae6d9b0f0bd1cf28e64b6bcd37b45bd4c3"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "304402206e991c4580062c63ac181c586f0ad351ba39736eaf14a79fe342ccb71abbc8d202202bd402efa3f806fe726fb2c503d7851e908751005ee640f9f02a16bbe8dce5d2"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3044022046a474f26e60b84e4faa75234eaeb5b0540d0389dce081a908bb3c25604b1bb00220579a712778b93574a43300f2e98ea75dbb9a300dd1379006d72f7066e6df5e5d"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100a13f58bb5a24056fe745a8e8d395ae68f0cb4df88faefc2e5e06f94aba87dafe022039f1ca74ab9d53ab274dd45a53aaaf54f84bdd3502ee862a9e9641b256476a5d"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "3044022039c480029a814fd8be055a98e73b48fa026163b142bfe3e57ebe30c9d08f6c0d02200c05fee7089faa7c177dde268acbf82301267ef1fce78134f7dc1cf7f1a2484b"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3044022056ddb8be9857a616ac0fd8d07ef87ba9585adfa5f8a70e39de39e9421e3158d4022063f5d63bab0252445849a2ff57c17060f14028e0b6e4752ce0ee3c38cc3606d1"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100e52d8026ec5618bf67ad9286db3003b7c86c2c133ee353b9abe45382a87509dd02203a6be936b97685161a61684d3a21cb5e722aca7df0fdb0832a6eb8579631f77b"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100db278e0559e796fff15fc53f1da019fb41d027bc69bbe7019b5dfae07299d941022047468894f23d515170ae4faad586573fa56d646b6e2ec645098ffc6420bcce77"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100a2e778396529cb86a62f170193ee6f095672405ffe42ec861ca37f3693b3914902205ca96fec39821b896040678a5b71c012cc68f22afa7127e4fa1a8f9f65967b23"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100b5882d4ad02d12eae534f9d1ff1b78a05a92b7f0373c7ac197f2b1a54f288b85022001173f03288d4bd5389474686c3e8c2ecb9477d1f6bb538b336f3baefacbab77"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "304402205ffcf7767735a1b90c4d83622c5682166d81ed6b985d833da7cde22b6ed61ca902200a86fc5ec8e86385756cc01209e6debea94fd5f0a71bec9d374aa9b2f8aef548"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100c653dac1de42e9a06e91982e7395670fc31213804fdad1aab5f80b48a3878bc502204a13ccfb0442383bc6e5a8848a14a8fc403f18d673581f0987562483d756adda"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100d6b3200366bc308fa9f51f9d11e987a7893fff7e74e1b74be9560398e3de143c02201530b59f0fe68b61d730e139e536f8006289ce785fa5336bcf36f80cced7c1f4"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220467adf22e4e7c7429f91bebc3f472e55239faf3e2416351c832c122781faaa9402201015d31677212841b284d59f4f5e79666bbdc72965d01021a2560097752355c0"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022052326001b48bfcd1c21b2f024bba59f98218e3589a8f8503eba321204b0074ff02202e5881562e3bdc84b0f646a8c142aa5b369b1c87d5b35616adcdaad234c238cb"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022037ab41e91701a005e4370b9e4d08cd48ad6b7ad2370c05fe2a1e91442b98ca00022053b91091753675a3521d6dd3bb862ea75d41f0737bf256ddae9abc1f82b9d381"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022050fd436716794cbe59d75015a7b1ae8f831807df2c6d91723bf433e8262ee50002204edfbd14add2c0794529359430e5b1cae049212f473742c06a78f968ed01323f"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402205f817f897ffea3fcba2828da564bef1ca4c79c0ae11d3dcf21defa7451696f23022006deb403fb005f92c01524725c21df16fd20a9e0a0200d7bd98c0f61255d8b94"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100bc9240ad550da04e1587783e34b370ce79609a4b8f057aee85cccb3a33b5e3e1022013097401f3ddfad2314a56b6b5db611c773608b85892a2b143eb3f7f0de4868f"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402200759bb654909486bc6b6f4e61351f8d8f2fdde3829180aab49cc980d5a8c8b61022028a38a444daa256a45154b41d7b4a324e8ce4b24c40fc0f67c714ee190a8fbb2"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "30450221008073007555659c2d8c09421bb56610f8f8e8493441c0be8371f734451c61472e022046176ae6e0493b90b61afb4fe9731e59abccaf9bfe5dcadbbe155d854c427f6a"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022025d4c29f2bf3190ac638a8c44252881f9fd7c119d9792a186a993beda543979102202e553a2ff762e0b4421b5b94f6a09b39bd80b51ccca621bde18c1d020295e1e7"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402206bc4e8a63d673119b11c62367dc9f91d7cac4750b11a18a49910fc8c8dabe9da02202e5b2724e6f09ae4d1c6bb768217ee0b4b433e4d0f8c10c899cd59f2f0d6ab5e"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e4b0447e17f8405fa5dcce533203a1b261d85e4303feba4cc6172f431b4fca1f02203901d0cf8198bffb13f60fb63a1b7ec29b436ad0e074aa9336e2a53a725a1c85"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220523a3a3966d1f133d943da71e28b85beb2abe91af1ad16eb279beae62c16f20402207632131e5be4fc33e9807c39c2634c497883f32fe29ef66af85678ee218846a5"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100a006282860410afbee02a5635a7ef399e6f68359c6d6519b4d16f907e9abd8a802204b50d873637823d10544ab286a96a763e747c206b538e46c8b03f752a38f1474"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ed0d3d08389c58dca517c3e7b354562deac1988cc4e76c09e5bd092571c99d91022034a9b44485220f2c7c35d8e35e050ac1bd16c12277825a97449ce0405d5b240a"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022031e65ca731446c9f0696f2e2650fd874d2f03875f8333bfbc96a50db1fd5e2f50220784cbadf9b5736d014ae3ec6d629b19d2b2a9393b392d873c5850af32cba003f"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022012d6ed3fd29623ece01c31db7f2d4bbbd4d80e5eb031f39f751bafd6831d45500220549141a3ca4cc291cba898c246674fea1b89a4f1652b6f4f4bf3aa8f1a4f29da"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100939a434c73b4eafa718cacb6189034a38ed5e244b223d92561fb64a5ccc0442b0220251923a7698a3addd3891535d21866fda8d2a3d22b27b83a305b769db864c312"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100cfc79bb01f8b71e4a5b20be80b1d1cf6c914d0649172ec03d68b1a5d1bc9677402201b557f2880caa79f89e871f2121fab24553c21cb8d75b39a4c745943573d242c"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100c1d34447ee07cbb18e09cab3912af57a37ce1f11f00787bf46d7484b806c7aef022033754a8fe682a62e78a60c0a469d29a9a5bcaaaef08b8def7af28a55a8628d2a"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100868a44e4c25b04b725a176b8f7b4eef46901da86f06b415cffaab28a3ab0b20602205a81621e8257c061154daea2240faf2d17841b9dc60bee6b4f258d5bf8b69d42"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402201a965cff40403691f6a160869a7771ca1cf0d1070ab7f3b7205487bc1629ddd70220522c0135a82d8f0a0ee789d5c779e44e81558525e8df54e1777acff5d328e451"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100d59aec3a10916d15dae521d51e843205adf123ea2bd8ff6b889f755f6a5e68d202200240ad074371b9a8fc663fa457ce76900f2000b4d20e8e40865342a50a8542bc"
        }
      ]
    },
    "43114:0x488f73cddda1de3664775ffd91623637383d6404:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit YetiSwap transfers",
        signature: "3044022061c93c53b0c2335ca5f757d908f74a4905721eb250673a29c69a698860552f1402203f2650df17b5efebd1a11f4de73f8a87031f60736b6dcd64b148785f1bc07452"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "304402201eae20831519d5af947c9a5396ea2836827fc0a5fa00a2a0839c975e853c1bbd0220719b5eea76f03cb0391341dbf77a3d093b8a625a109d5770ead2b72a8d72e49f"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402203bf42146dd0e211e081696f99e8f4a6b9df06b29f5ca420ac2d16a23067b538f022016987f7351bfa2c43d0aecef6e9ad11cb48ac6719131238c0fef62e26852f7f6"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3044022008f42be03d19c27e69cc988bb80b7785cf4f15bafe5bb7a53073fc970ac227df02201ba67d6b90fcd7e27b2f326f80bff070a32541e32e4856dd4214c54c741318b2"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e09f56a657e9c15df6903f296ff156d1fdc33f2c779a0ab2e33f584c391f278c02202a677ae818a70d9e28615892d248ae3803ad2a6c44924d90bb1b9eb026c9db9b"
        }
      ]
    },
    "43114:0x60781c2586d68229fde47564546784ab3faca982:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Pangolin transfers",
        signature: "30440220770892c4d4e2e277b8121044cb7b5756d5406aabbbc7a50056da06aa6df68f470220689a5eaa6da11691510377fbb6b7e03350b219ca0365fdec23af1b10e301f918"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "304402204e1a437dd77b3ffa34ee991ca19e17661de82c458923a42d75875df82e360ccb0220719ad40a493290ab6c009a5e88e1da06f4aa1d0ce625a8d4c573f7730673e56a"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ceb969e775648a8ce730b42ca117980836855ddcc8d251d0fddb9763e520ba9302205020f115396bb7acd2d6358dff6c3637841fabd08aa5bf191bb83ff727aff5c3"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100db330d00212e40c1f7fc1ce35805a00774c4eb199a9a3b1dec15bf642c9908ed022016bff276700446af1931dabb2790578f3da7ebf944f53abaca777ff4431a7d25"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100a7c52ccf78516b9ff19706684e596606c7cb08bade810be15a99c9dbffbc39a4022026f15337ad91d0ab7352a3a97eee65e3f4796fc8fba62ff25a9885496ff0c4df"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022003ee948f9c65d57cdd893fb060db8dba8e4d13a8625b3f3e57095d2f8d42faa602207e7e8772cdfc984d9bedd1ddbd47147414e66de635a8e3bb8ac820a8a9246e52"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "304402207a0f2573ccec193fbda1e2bdb2ec9e2b72c619daef9e18f095f12705d2ffe04002207161fe261ae2c7f447941ac4d6c648a75a15107d4d2dc85663a347e64f79d012"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402205a8682c70edda76d020ae2414152fd409875aac0e79a7ae9193bcff7e02c0c23022067e9bd85f332ee6b6bbc222eab60b4ca4ad9b83fc4aa7dcc0c33640fe29b73e8"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022017022e5bf63fb42f68c6c46ebc2f3335b928070017b6d5ffd58cf7bfa713a22502202850975f985f4668029660914d07452c01b3017e29f419f99f691a7091fa7468"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "304402202608b0a1237b79dd283250fb90a4217eea1dab6f495c225cb71d798511fc9afe02202d6787dc7467a4adf7b3d1ef93dbb71da78d03ba50d1aaa815435517e988e791"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "30440220349868288837e7a698727e0f563945ed4cb2dd1dd4cd5d481f17014413337e1a02204c56f13d6c0e0d7e656ada6ea92ec7acb1cd0b01194eb5622c63afef19b53952"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402204d1b1637dfbac199b25c1185a3b7f0320c339b0e870db4229090e7078f96a04e02207a255306bd55d54b6ed1f4e392e12cb943077748f76d987c7bb9e52f3e17fc77"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220089c48867e0bacb54a312589e081a1e6a318cecf4965aff1ca891a5bac887a60022067bc539179ea7ce9f92763500430fa9695f8fbdafcfd49a541780bfd75d676a3"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220508494f844f41d1cbd318e7dcede62ed5784fbf003a770ccb504810a7a8883a10220745ace703b8b8821d131d203b96b10be99b3c71ce91f385f63435168a6d5648b"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022054ba2a6445a842ec43ba21800fc049f5137dcf2ee36767e57a2984b535750cad0220069c1d56d50d8799e64d7b4bac700fc086623910991d9d7779e5e7ec020c5c48"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100c8d4a428005b8b2e45e9775825a0361a834f667f4c19240c9a3f2de2bc49fc2002203855b1367af0f3b67c9475007a29b620c77716b72ddf7212316c7fdc4b18549a"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220608f164bb66487e40b58a0c04d9d44d8d183bf7f972f17b5447a6fc904521c35022058e107a79d22481cd94cc0478af4073acedad872b3392543af29ce89173d4944"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "30440220568ff6fb360044e769d02905ae3ee24278d160a5ca91b6060eeb188c6af2273502201cc668921cb26cef253aca531ecc5d46c3af788bbac3a97e751bf811963f2465"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e1ad96f1bfee5a1818087b61a8a1a6ff99a0a2065407f405dc935d0b7bdeae370220785d8713228cab5c9bc24bf0f2c3289fc9c12cdda65c179ce2a46c7f8f54ae95"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100dfd334762cf1022191fc42f860de2087b06560a0cfa9d0d598b4e5a38d595e8902202b6bf6493324aee1523186b0b6de3007e0d0fc1becdeb8c5a30f84d538c8ef9a"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402205e6eb8bb7f353c47228734fe6a5b6903cc9a1acb617ce5133c679520a88f996b0220651328d2ffc2f36284dd1bf69557b960c6d5135eccd6fda600f87dd563b891fb"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304302205662abd6f6ff0f413a45994d310c3d657bac78a1fb70f73e82da358ca6c5ba45021f7f607412527bb58d4a61fc38affadcff12dda584bfe5a8431a86a7fc627b08"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220091b504f45eaca754a9ae775af50a4b127a2a67d9e27060bc80eb567da81836602203cc4b53c007487895e2df977a705e080e1c8a086aa9f21ac2770facf37d62a0b"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022004f35a959016e4d65f03c47489ee6c1552306d53f97355e1179171aa3676f900022018df4a31e1e568efc8ee42b1e78824b014044b9a4e91f69b78a0433f30cde574"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022073cfec5d22ba9a1fe4d4495561005e49e1d3afc2edb9721a8e915365f9e82d9f02202397afb9a07a8750b9f884d2a099543cbdceedb4295677ee70658c5bac63c958"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "30440220114565b8914636898107985ed93a4c642d97fa8b1fdf852e7da42400d3b39c6f02201208dc71fddff8c1d2b3ac6dfc05d9ff228567dd1ccef53b45842026f20371c8"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022014b946f532fc2b94334e2bfae4033b880ce7337534a1317e7e37a35a337efd4f02206c586e8866dc274cbf05c87cb99f7ca4cfa024f22af333de7bbcbf6555171734"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402201372c5ad1476c5ea685e6c446e0f59fc4840b26477f1c33ffd3ce61ffe81707002201488c5197d6f6496fa2cee35c00b684d1d0b1b2560c4d997a52dd2c1973325c4"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100867601927ebe4188c3bf88b0832be2d08336c7619d32ccd838ff4a2dc856b052022033092c29c3ba304313f0bee2c0a056eb26187aa2bf3c10c8023642e59a4cbf0a"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30450221008948e1f74ba96ea2f588f9408f6bf9786b8ce40432846196efb0280aaae47f8202206fc6f8b38bc1745babea8b708cba0ce91a4f7484f4a0b0e52c31709284c7a06a"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3044022007e15ad9f225b84f7e0e45ebe2d39389fc20a334164506260e0276e18b6e756902205da894ed8cf30d8b018e03f69b67463f46cbd7575c4bef0f8529e51db0f86bd9"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402201f900fb0163542f7311ebfe33b4269caab8e0315a66d3e48116a5f94a96e2b10022050c31c3e77efa383eeb843462e6d3f95ab62d0ad594bf19f572205eed60f254e"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100c140c7c7fbf1806e3201fa9dc1a9d6294a85e1e30c83a67c5f6470e4dd41aabc022053a08d25bd768da259f528fa229b3e549fa4addd12af70501300ae391ba34b20"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100c6fbfcc974c8abd48c3c4b492959e901818c1a06c29afe72583b62ee98d1b1b902202a73f396021e5967d541405239fcbdccfbccd8886be2efe6ec8b73204e15d267"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "30440220307e34ec7564a949149fb69d188a5900d56400fd0aba162e47383b8ad0e1a2bd022064bb89bd5ba641981d901d6764a7d28b6163a0da66972ce742bf024afee7c5da"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100f0d725cc6efd2119dd7dd7a5e5eea02273fb29c4cb8d9ce11df473c30a232d3e02206c81eb49b1512cc96a76f56b4da59f7ad85edcb527b4bd0e86fb8b5ced99c37d"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022060b25a3b2ce80ec450c3da93b4f355d0631373c1059013347419338a74e764e6022054e30b696f317bb323d1ab2565e998a9476cbdcd8b67db8a57ca9f45de294368"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100c6df0535500f31424657e310c37a60157319609aeee74e073b2609fd6b1c134202204f7039c1bb76f0de7e1c448e01135010d436a6e2573a780eea3c896f88ea0b52"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022057e68f6b4693885fcce2e68333fe9d1f9d9ddcf8b1c342ce27c04d396a8e798102201b5e9656718840318e7fea4fed2774f549d74c0897ac249cc8c74d7d78f6df6a"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402207fcfb17e921d219c95fd1e3f6d39f7ca8228cc0e54ec0e37ddc989324d26f2da02203850147a828a5499136ccb3502f1114f19c8811018f5db4c628306963591bc37"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402204b1c78db814ee83d9d87e88f7ef89f0f1074690fa6327f4d445634b24448beb4022030ae3f55cf0530aa104eb394e444b95c87777e798ec1e1550c668cd0e0e41749"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100ae9bff1ecad5f816e8c26e1a32bce5388e863f266bbe4ac6669ee83f4ad86b300220682bca33140307f043b816bc1819a72189645d5f4450d2fa03d9e88cb174389e"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "30440220524175675a92912d4d9e2dd556edbc75e92fe77790a5fd49e28bd7433e5d8855022025fa8ec3d0f4fdece10615b27d2cb196b8a2bd2666db8ed0b693fcbcf9226cdb"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220237184fbd16a92abb8b733794db859ac5544164221f476352d86e952e1433f00022045d9a3f360452425093e746cba27b6c5952749d3fa83e8595cc5d92cb9b0cd12"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100ad4b0852e457406162aa12c25f4742b344731a8fbb8465cc1831433f1d198978022062102ed269c936d46b415ca60b5a876d2c19361236ba18fa54ccd698f340ccb5"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100d8b5c3c8fe2f7acdcdf905da6c7001e0cd6487ec062135c15b85cd933c556ed402200a399ed01b57b97d2b19b4daccb52f272c7bde9014b7d41d79b8a085f3a79d73"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ec153713441eaf40cd0204e9cbbc33cd3d7c59fb3b1477c3b53220f40119dd63022069991f07b246ea82b63414e08fe59ca35099f8785b878b1edddaebb6324554c4"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100ef0d614c37b53b773e409c12e09b97f23dbef86dfdbc295c0e83881fe16026b1022079a2ee65b87e0d1bed440865305f43f104a11c987c796c44021b0e92b5b29aec"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022045ccf9d82286c00fdc49ebe07e6eec106d1216d9906520f6dc956c096bee810d0220062402bdc7806f44b904fd7becb78185b85b492ef7ededffe46c67816871a475"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100f8b53c697dc5293ee5155755da6fb43fd9a6950955443942fd626a616654b7d702205e362395afb2413ba2234ba1d30e20f27b21bc22d0f038fd5e40426288819608"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3044022029e71de3686ea2383fc36cdc0afd56930da76749e207b748382c4a58da63f6cd02203adb858e49b0b3b7de5b2b1737e00da820a572de92f96f8f6e3619b1a5382de0"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022028a31a24e9634d9f73b8cd7b66293a8ff55d169231a4b99cf5e31104053c2b5502202b13da42fa9fda0300276deeb8201e8c7f32e8e9e91b3017da2a09a92961a26f"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3044022004ececb7a100d7bdd4496978fbc6b6b1ea2dc7500c2aaf7ebac524c4b6063c9f0220345c604f3cae26c08fd309dd92df5f82cb433e30bd8af93b50d10a9b9e3bb4dc"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402206245a83c1e904563c959f5313917e62d3c6981c908267d1ebec3fad50304dd7b02204d7e70b181c829848cfec91404ab34d78818e5b20e3f952da118114864ae1943"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304502210082e5f15ab93979000c09cb5099ec739f2aa6a450f05d0006e673608c1181cbaa02200ed16df15b10f0f9952fb650f26a51de6c66f3ae1e132cd63cb42f65cc85a2e0"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022025de3dc4a6c31c0ff18772802c4701dd23ea7e7cba9edd8ddbf96cca3a3938c60220472b2c75a6ee54201f9214d99fd9cf184bca8136129e00e4361017eb5c451f1a"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b9fd6e4e25d4c9fc61d82e0aff4b84323160151e9adb3016a1289e496b20aa8a02202366d365fe6fcd63e3d9d4d4523e16e6495dddc98f5ca5ce8cd2e87626ea282e"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100b9b906ca0d81e0bcc5cde2c976d5b8d169b2462525ac1f22d08cd4a611798443022069217754e79676186584c95807c62e5e3db169edd535ad74bfc17e483e535f99"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100cc9fd13001e29970a5059a27dbdcacba28e7a9aa8367f1beb1b259b06935d971022029f27b0b5a0e4479724b8982f4bd1c9257a086b405bccb00893cf03287d65310"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "30440220596d7453f5d8d1fd0f22db5cbb566b62a73312b9e8c0fc071636a0c65e7ade55022001ab01736562cf509adff844ba079a85a990776c379423f50251bf61e7022320"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100aec8458711993d020c5ced905548b810c9fc99495d73b8489b31ccde8cfe639402206b6d85c7a202b61bbbe9036bf5bed43a85fa732c287b1ea2dbf64b37e2dc2808"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022048fa80368d01103c90e027729b47294bc7dde4e8bccf29289300e2dd6586b5a102206af70d016afb13480ba6d3b14d89557e2a7f486e2d98d1e7d09fca047c853e26"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100d6356531f31daceb8e3b2793c2e6dd0e529768d13c8ecc9ff4d6f89cf574c26102203760bb9f2fc5fc4db772fbcf233923e262f00aeb25849bbc0fc4b999466f0b0a"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022044001f5a950e400513e1b6a9f20832e37417397bbcfc41af622be5e977be9a3f022014c711ebe6b30afb347cedcef5e1f738ce4a4d4840e6ea1ed2e425ec9e602869"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022012649ae0ec4dd5a2b8416bd2a785d3636822e2c6623d8cfe1a39a51ef395c4510220422344c804ea5474845d744f73b94528d43160489d5acdb87c6defe1cb1e8df0"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100be418fe8d24c526cbeb610530571ca02ae8c6eb0199af96858ac3db97d3ce0e5022036fc1acec0f0a679ca891d0fbfe88582750566c081006bba515b6fcfc77c48f2"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30450221008fed313823073739177e4c13f2fad99e6b47de5d1f1c3a36cb1da35658ff852302202f9293fe1b8cefaf55fc5ce08e3bc1592b37ed7de44a749e1ac0d698190f2dbb"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402202a9be1f7f7a079b6ba25b06de2e84664b663e034e724e299fa370c8e2da8c8a9022066dfc6d0aebf143e5bc3abb3199dff40c63b055b2e2f99d13f7c96b4fe41c460"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100fb142a0f902db3eb071e446a248bcae665279bed6868672d22f6e70ce90ab74102207c3fdaa13a90f754f0d2f6c79a9697e6064fabeed86a1316119921d26cbc623c"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402202a6cf3cb2c35ad87ba1c0c41221c692221eaf1d3544343de8bd3f4adee678877022065e521b8bffb3946340b661eff728bed9682f625b20aeb039f00cfc5ae55a52b"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304502210093df12c52c1be2e7845bde29678384988e95a18b77dcde5ca9c1f17be758153302204a23bc7fa7b20421406517cc8a5796deadd4eb09bda848211529be3fcdda0186"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402203d08277d359d1b89035442b8b2fdac96ffcef1d566be51a76f45ef9a5dbdb206022033fcbabcf6b64633c9dc7ea75eaea489cf0b20aae2bbbbed4feac5d930d58060"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "30440220573094a76824fbcf48f9590e4a83f1aa10898aae9e1e7143073a46a1cebc7db2022043976e109401e2a9aa383094cb3cb660550c4bebf796122001d8df044ab8dadc"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220757cccccc2037820c96d861ba58033cf5fc2a9b97fe19340006d7b3a165203a2022055f505404c8219bbf366bd2263cae3ef8327a015ec78f7ef5113ed15ee1e6434"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e27c845e942afcc9051dde9910494e75482c8684ec390e823920a860f50de6fc022066409c5d2eefc4bbdda04d367d76f90a8ea6425972c21ad371440f7704d3fb95"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402201b8930a6d2fd3e52b70112e18b18f05707b39d5a6775cd95933d93f205c869e50220597a310ea8d5afd889151db8093b62785488aedbd46fc748c46c41496800fb1d"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "30450221009e89ca8f4e26912823c5140907a6d7c65a090a91606f0d0ecc405e6c33ff00200220564fbfb329e5c2e3128ae5495546f9bc138a0bc2fb7c8d15ad886bd76026d110"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402203eca221b2e6791bd43195c38fd540e2881bbdb9e838f9f712d958c63dd128f760220532ecc18dfc800b34b06329ba8fc9056de5626c379e32e43860f9a98327de68f"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304502210084c37d4b27a48d2c3fc4cc3692c0997a495437662c15e82a62cb6837280e6ec802207e76e35c206bad884c042e3203eb77a94e26dacd64c85554adcb4cab130c7d46"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "304402206e7b877d386d880e26dbdd341f7ae4ce6c88ed2c5c92737edf3c85968d30116302203a196c18f84fb714ee4b89c2af8ef729ae017ecd21a43d1c183a41ef38017fef"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100ae27a2ce7c21ab6b878fa87199ff74b9c280e0f71f6be84f32becd012a672aa802204f35357cc1bf66e81369288298d1aa8003bed3814ea971fe93a18b16d1955981"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100f196398d9bfa19c49c4d805abeb4a165da4d1a6fc3299ba0f4af2b8434a8d84202203a3ecaf227a071afada4a8c039d2cd333724542a29f89713ab1d48e848fe4dc6"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d64375b327b5ce16a033b8eca8ed918d84e476f4275c56b7f78ead45caec77b002205920ba8053ce630632d85ec8040b5c4891bf0317931fb18c9487d7fb735e39a4"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402206ea47b5f9b6c281b8f7fb430c552197846f745c5f54809e64c69493411ead43e02202864274641b3d17e3b6521b1ae933dde4df3961f48b2487b3fd6bd68d8e6da1d"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "30450221008d86ac72cfc5923017f7d43bb5f35ee349719402fef749a582a4d935067c471402203f030688d1cc8409bbb8ae992394ca6eddb55799e159bec2d50d9eb0e32db85c"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100ca7b1f74d5a77d77bce9b385e177202a3356ca9e72cdef6b52128002a62eba62022074b56f79f006f3821865a659eef8c4da6d8773c5b815ade163915514b3786760"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022019697b8585ce1a047cd67b57a248e254f44c2d19fd5146c0f6f6b8cb0e7c63af02207140315222c9d8ee1fc10cb69ec22c47ec1d8c6e26c6c38064896dc13c8c0256"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "30440220297f11265bc8c5d7f88159f8e35d8ca67af5a7bc553ecc045949f76643588a360220280e3235460b4d7aa70e01543b5700bc35232cff797d4ea947cc62f1b75e5a99"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022063d1ad0bee9c6c242ce49b69aa92428397b347b3557a09758f122765109cb5230220342cc9110766eaca071721220290aa635ef71d61b742e92423e086af0fb04b59"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402202514bd523dbcd517606fb485a735f29d37b4a3317553e071f6ff9fe90ee49cda0220340768fb723be53e9f9f4c84167c46bf1b5c1809cdb0fef406aade6eba91da70"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022049e302c1b6b56751508711de1040ec01f1d7937de6d49fbd23be661686b19b290220245d58ae8f7fe389b9b1e138ce044114f4684df84770089f2879b27c6b8b7f6d"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402203aed848b5b759f22593f9b12aa74d7f81027aff827feb3849397b62f3c4cd84b0220468ce42a6e53043d5e112d4b51f3c9c4ba3d87b5004af872d279231da7d06f88"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30450221008dce444c5f2f3ef16204faab270419c2e5cb40b975b5741f77594c015e32a137022064009664a535bf0bd82bc72c0230f7bc21c6ad8eb3e323d5c3faf3c9225ca050"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100b402667eaabb0e32b38eb4a2eeeb9e9ece86d6db9d273f54f14f55e57a8c78ef02203442ee943e576b74774d793a0ddc2e81b4368efd2a89b98b901cfeecd5be9690"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "30440220772bd816346e36c57da7a18065076c60f08b132b8b2e2eea20b5fdf47a68349a02205f32577f52990d3422ea22996c260f7bfe9a57b54b37e3a1dd9ed5b435950cf0"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100a08889583cc1f8d6440cecccaf49a5370b0685e20d9f8e8fae60f66d3660159502200ca68d67a9e48c8f210a00af5dfb400adb4ac2779d2eb839ad6f04c077969ccd"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402201d58deac9bac044520c912ab926d05e399391b4adffb1a79a6eaddca7174c2a20220180b25d9491de0e732a27617f3377b30283ac0a242e2fbbabb177b3d5f417962"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402206978d529c025061fff4af0a6a8c6c5200d419c89cf77fcc1a8b567f4f49cb7a1022061b5a74e8923b8d74ebc14d8787c8f8f41984d0ffb8d3bb80a42ce4931c03992"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100fc9227cd0cf747b5ce1229cdc61a2fd2eee6c92537b9f712b3704ec51564a4fb02207f4652444666c529860464b0f022ec754ea69f7d7e157406121b7ca9a664a943"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402202882db2ce4ddcebc3b50a94fdaf013a400352910de439520a342193467425ed0022071e86b1e7c0c816fceccde51db6e915dee9bad8daab3d6b7fb6520566846ca94"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402205ceb238ae7d7e5924567075726e458a1721cb87fa860e8b93a33d20ffb5fe5c10220077f45136c66450212ae888654bfe5b88e05dcf294939601674bbed2533129a6"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220348a323febb87cb3e2e8dbee6c9126ef332e5bf9f0d246e7ff5f7f6240c44905022075b4d2e20ecb372334239b3904dceb30e8f911cc9b17223f917dbcc86b7d8cfa"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402202b5001577cf615dc5ddcea11d606f1cb5a7d7631028c2fcff85de3879758516202203c987c264c64e3bb275552eb76492dc02d9c2c127bedcd5934f4cb00c679dadb"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402200e8c079a47d32e5d6669ffad323b898621c37e8e89e3b8e5bd6d866e406974e8022007f12de8159c8a4fa9a918f858d86b25b99d533ff21b41b9734493d06128f5cf"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100ae2dde9ab89c2a6c7f974327064ba8f8e97020f75f9f97bef09ffe7ae85eb05902201609703da8263fcea0fea780ae90a8f2599b6ce676204c6a56c1d0821dafdba2"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100ee0dd499114b5dc68069aa557aa22d08ac4b796d6771d75593922752bbd4affe0220790cd6480a28199ca551bc5a2710f6ae9a6585015d5fe4678034276733f48056"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100bb95fc54481be412c9dbcc591208a41a26ba817eb4335bd3717ef7c6850752db02202758a350b0a20fa0131c30916c994eea456869be69e205b7c9c3360104cb28d8"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100a092009d45e163fffb0b444c6e3d6fb65e713e215556f58fca3c2aefa4fb90ab02207f806681a01844d5b8a71adb7c4916c6328e6d3031f9452df0448b5ee89563c0"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402205e9660746916629f22d2ee192f12e3fdbe0843b4d92f7ba0c590835ba42e6adb022044493521b43807c7a788edd0d9f4eb21ca1d67838aa3f5d245806fdbdb5e372b"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304502210090b6eef7e5f9afa42c2796fa9a0cd48b31362f528f1ab01258f393d346875fa302201f45edc697a5a0436a96ce98f1aef8c037f6b980ada4b6e910753192d62f18a0"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402202db28b94aa0c8cb8669f39c1a9a5cfb34c1701cf37d1c2d3b9560a54965e55ca02202a06eff39eb12ad39f9fb6283dfa9c57e169f241bf87a52be30364a445b6c298"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100ba45089f25514861544402a91bd0aa7977cf99cce2d7c1b6b6e7226a3c1921a802201bcd326f725b7fe23fa56642471fec0493286a25b9bdaf6a0d510e5c6c8dd518"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3044022054fcbe3bded824a9e4d62841bbd8aff9a870fc0a9ee02540655007e1ff399c430220349d155d294b5215e5c9674c48132321f5f2da963fa17f169be16968655fa1d3"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022079acd9fcec5d59d470ae58b7d8245483569c5ed36fab7f3f74cf69bba748434d0220794de13f70511156246b5cc41a2492ebc49274254d49d4f68abea2344cfdd445"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "30450221008f71912e7880042de7a9482215a9adc79aa10c70b57fd653ebe0a790bd4d9d91022052790cc472695212c4ba6a1640bcc60a48f38c7c2537cfdf3feec501abaca266"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100be55a55fd64c0e1fc95855798e76f3f74cae6508ec2437092e0b1c6a717114470220153cdb7d3b5e12e3afe39ca006815c7bd7915f664968e4991973eff1f7f7d621"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100c47c6aee9caeded33210b25e03722d98dd03f1919eb8ee70e1e2f08807ed1efe02204e0f7409a7782d00e7654cb2e497e486c5396688121e76b0e47dd6d6873de48c"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "30440220227f4ee39f6304a70ba60851194d045cc1ad2e1bb0a3203c6a5354fa33f2506c022031e6432df07fe528d7323fd24ecb946b61ab33ea9049a7c56e437b9f34026237"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100d13fd444236e790a4badeaa44b73757181d76f25bcb59221cc88d871ea61c0ad0220490936484916780e0537edd6a5105abacbcb87965fd99f5899d5df4dd88d666d"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100aec531e28917dd06db3ae6ac215d01fd159d6fe0559a4b857b3305395776c19f02204f7fa74fff259549209c91c176ce0ae1cdf314bae077dc0e36a7c2639aa849e0"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3044022074aa54f62a9d7f186d9a40aa0c27f2a0d8dfd071201d49a246b647e23e1b7db3022003c17ae6877d74cfef6f95f6cbc478030fe5a7815e115c8268361dabfcb57c00"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100cf95d21cda04d030f6a9565329c4c21131ab144c4c5362fb007ccd4a0ca68e040220572707e5372d45663617204bfff56dbd45e19030d9edca7f6e165e2df9732c58"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100f9e1ded6051392c91d9ebd96c7088984d60b52b9ca5ef649ea9fa7fcfeca69f302207f9c0e5fe03b60beea467b98045e183b38e08d6105079eda81c73412f7f7afb4"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402200e852f3a10a27da0959c7838ffa13918d8c040fffb004a4895176dae562becdd02207744ead3b3867520352d373089a5a2e9133e2b6cf80e73bc6a3018e3cb97b66a"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022026d5fe8e3ce00930ef5e6570edd4f41353be08dc88348cd952fd446d0d1df8be0220016c8bc785e8400d0577256242bfcdb84292395c10e7febe5a33ee31959e16e0"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402206682ca8cdd3919bde89591adf3b3557a0d2250ca14090302577621262119cc180220032e6be3a31385955cbc7fd92c272918ce3837856ca861111cdae4aaa891693e"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220551ff5382c4dd8a6ff94d019b7d8ca4c4699da5256a8f8d88ccc3172e12e288202201b3e157cbda19d1faacf0786e03db74e378e29de36bdbdcb9f93c1af9a1cd167"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "304402203edbd69ed1b9cbb4047628ff122ddfd50445ba044f7f31404dee64feb9aa4ef502206e9f932cff0e0e2177cf52c5d796814f80a75185e7e2538b4ff6bbc7c26663ad"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "304402200aa3c1e642a387c25b206d54e499c1e36145528b7e386e24943cb3e98532a51602201bcd77d048876da549cd9f66f7a8d6ab45a3e5da23a3b1c6f6247428b9bc9c3a"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100cc53c3507f2f5d0ed621fe7022ee61f1e5e4da2f0a7f5d01e8a8eb37829b5d3102201086205ff1ad67e1864ab8c8fe2e1b9b03c164a3b7310874a1dffb98ee221cdf"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022079894a18deb78660d152edf61b58f8163aeeaed75296d682a950ded169b0eb1a0220634b07b660c11003b26bead49501a0e6c3ee155337c8fc5e91c7607cf90b11d9"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100cb198982728a85c9fe6212f49568246b3305b2f75dc2a5745d63947d6413caf702200f27d60a13425e3455693a46f165dd6b3dc2c31f19b99a5a9e1fa80f67df72cd"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "30440220067fb9fd3ac8659a9696e7db4bf1232cb151b56bc8bd2290e108547277b0f4ce022053181ba8521cdf59ae0d9aeb3de4f67c6d4d3848c42cc3d2656ae32c5552c125"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e22603eeebcd353c5997deb30bd1a9849ea98a2e8f1a34502664e2cf304eeb5c022058425fded67ef3020e33235fcc2cfe4d9fb54bcdf821af4982cc84d9eee3e439"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402200698b60bf5ad885d2c034a2fc7590a41c53c76eb0ac43d2bcc0ecd2d9a88d9f50220117637d14dc577772f9a98fac31af37e0fb7f98ac3353f7ba2017b87f431ebdf"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3044022059de8867f4c71cbd68942d33a0815c687a34559b401c8f9ea536f7636da7594f022044a0265b452c56d59ac1766e491f3af5ccedba92d7050bd5b26361690c57b604"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220267966c2680bb8bc4e11e5f36cce971f3705df698a358bc1157424d360e9c5fe02207be8dc337f700c574910190327bb22454ed5ea505b344689745ab9915b2e3b99"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "30440220761e743bdf5da76a9ee06c2aa014b69b1e93b73a3297f2cec57e29ef34977e43022003b0b5d60c8ea75f590bcaa6618ba39d601f9d218e2e5639d2aed184ab6c4035"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100ea0bd22b41d69831c52642b308151bd8befc1ac8959441fa6171269faf65424f02206555b206493d83634d6e15870e3b8e705aac82fb6292f959cb7f587093c5af9e"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "30440220207b05a1cdce09168273678ff891b2fc40833a722922e9255e4dadb4685a7c3e0220327bf2930ea1c9f0679c50ad18693ed7a2ec78cc41b75f0fd747cdea37245a1c"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100a1a98b23d7be8e23f9a1b941781496ccdcde4fcf5a270cfda72e361b22fe5fa002203a64ae2ebe2d565965487951c748006609dc4ff9efe15cd1ee00879591195397"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022038f3afd661023a0ad536236314f045447c0562bf2b5c9c91e3276fb86603114802201d55a2b564f0309fbea9ee54751e0d3545ecb78c4c60c130e34b0ad3e22d6331"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402202c9b4beea5271aed5353b41fe5656887577bea31fd9f50585ae38afafdfd8ddf02207325fc56931c91863bb862708de2c1d03b4ef870874b8d5ae0bb96c257d6051e"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402205ff928098d8370cd6a22c178ca0e671e594d9e2bf2bd96da1ac03c5d4b9697c50220243871ca02532d058f0a754e8cc255bdb4cbfb383360fc23a14597dc8bbde47b"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402203f7f6de0497da145ccb25d36a0568f45b11d0ee93f50b558a0264505c455a7ef02204aa5b7def9960550bf0f92b2a51d5db925af2143eb1992da524a9a5daac27ea5"
        }
      ]
    },
    "56:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "30450221008ca7069d4bfe28e696182e615d80653533684c3a60a47cb9866fd00dafa0698102202758b4b80484f73584345367167cab655aad8be09051ca695f2a07c7900b6e1e"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "304402200ec2c38d3bf7fbb9bceca392237e6c681670f4d244cc2a07aef68b8ff8520bd202205a09e80f9fc667a0e20430a6eb426a63797ccb4fb6daf9e339b8dc91d7cd840d"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3044022006061d9f6c1536e34057d49034cff50e5b7aa888996f56a6b330deca100893ec0220092fbac88ecdfc7414ab4234efe8756068800e8ba991d31611c501b11cf99684"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "30450221008e65b57e831f4147c10f5b5fa1df156b244fd519b97f8ebd66c1d4aafea3986b02204370dfdf9c494f0bb36098d19b8158c4472c546f788148ac121de2621800d9fa"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30450221009b9f5be699a1cf348687b2b47d0783a3191b25ee739e1beb3a9af1bafacef6310220612eaa3ad1270074e1b6be57d645afe96ca58249b6cb17df3c8d768ca9489700"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022023b3d924443b10e486ed99e1c7a3bf20d877b3bb54d787d21e227c1be6db345402201eecb1b2945dcfdd717ead307db40dffb996d2fa0ea7f0b811855b35fa051a8d"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304502210087b92858f43caebadf20ed8741da081c0ffcf34676eb81ae4338ea2328fb26fd022035c215d867684139a6720b4fe15d2e77272a0873074823bf7cd48a07ec9550b6"
        }
      ]
    },
    "56:0x1e38eff998df9d3669e32f4ff400031385bf6362:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "30440220461a9ba62577bf43ea41d862cec0764de9389c0a601bfd69940565b19b2bbc3502202d7e2b88f2e6ae6cdabec4de8ef587bcbcadbb3ce0f6904f15accd9be866d3fa"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100faa5b3f2b1b0a7f74d4500ee44479ed1d91124afaf33ff35311ad0e6624276ce0220304b5380d2b3f47be9da6a3296f5c18b4dccc8b161997610aaee3b4357f5c5d3"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "304402205d0fa20f58adf7042b63d1670a0608fe224b18d6f8a9f19d8b3912aaf431e8ee0220555bb83fafe46361c703c81b501b8fc93c6279a9ab46c2f7d4ce9a09cd1d8a27"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3045022100f006075164431b4f55544c1ae9895a2b5fafb6dd1095b7afc6cea12d0ec3bba1022026e191106a8f3eaa94b5ee253f742d262acd500aeae40759345c748069fc0d90"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100d4dced7fb1790fa8aea1fd9963da5bc4be87af7468c360221cf1e253d0b38b5e0220175d2e3f2c4c25db5d3f2bb4a21d8bef7a801b604dc9be48e80ae70b6c7bd410"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022075930e46a9e8a103d310d2569f7a1adc3c5bfb7df1f56af4e95b0ff05952dec902204f29902627328099c161e379dab0e0dc0a5d72fd3d80c60bfec183b29d0f1d34"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304402203737e60321ad30f5a865ab29494545893c6339629cc2aca3f0d4042f9a0ad87c022062bbcb34c0210e5c1cdc6a08791b73fbfda35a516dd94967fae3dc5482e6e0cc"
        }
      ]
    },
    "56:0x1e38eff998df9d3669e32f4ff400031385bf6362:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100d6bc531ec620b3a2464dd2a78bf13fec64c39e9577cc7dacdc09869fdff447490220032a6299809fc13be25d6778c365dfe8a2441f78c6d9dc0a349f2f9ebc57c141"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100d10b34ea91dfc4ee22ffe5337bc8131a7f3eb21851317cd1a4f0f4499e0b7590022023b39908f6fd615b88ce59fb335fcc78c1aa1dfc784657128593aff716328c54"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3045022100eb70602ace9685478727ab2f12d03c9210cc9f5ee32580af0eeb467a7577de5c02200b4b67bc66181a17a2c1c603b2e0dd3fcf385b3fa2169605bad7ddd25c022ca1"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3044022100ce65ab26827ccc2e79ff04abdc3d05b0e4fd19be0d2619e12c3db8854de62bcb021f4e78b8b9399a3f30ff7e9cac37798c1c4dc598067717e7328793f6359c48e5"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100be2e9fe8302374e9bc32ed3e977d66fb1835dd8db252d1b3a3d66c9b3a4412da022079750784ab3280bbc0ef6dc6e67d9552349887541120c9dfb4e50e6908bde40f"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022061509cdba73f94eac1a1aa1d6e609956512aaf1d036aae20051409ea6b3ac57702202a4beefe376253d982d3492fc0d363010395c8d0a87c633b91c257c52b677d5d"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3045022100b126627250c5a18b36529103d398f5f5f86bd07f97979d481486ae0bb7bc87ea02207664b33b6f13a7614bd821a76cb19dc2c8f21e4ae00575917b3d7892a4da00f3"
        }
      ]
    },
    "56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3045022100cdd6ed9272614ffdedb2b2aa22418386928f1174a6214451d67b82c06b637d4102205ee814ca52cfbdab011e337727cfe91fa272b98246ecbfb1683bfc0de3086efc"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3044022056e3fdb59c9ece3d411d03963edfcb9a186ccb753b4e984366e7ca6baa99b38902206a7267e31543659ba3bf8b796edec2d1c6f174a810b89862e43541f94b191eca"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100a4cc77374944e947748dd36408f48f43a94e67436231fad62191554d1ea5ff0e022001baa4fc0587af310bebe1c0044d7b4280bb5537192736fa3805584c735a6710"
        },
        {
          label: "Maker asset address",
          path: "makerAsset",
          signature: "30440220770b731ffb6091493ce2fcdb4163ad872add409a9c66e88e29b0d7a82b0ee79c02201e0130c1841c484e816b9f9ff3694eea3601e1569c1ddb87319b08d86e9823d5"
        },
        {
          label: "Taker asset address",
          path: "takerAsset",
          signature: "304502210094b700c3383bf0d8740e09d23dac120addc1c21029746f672d8f8c8b3a2a2995022008b5d3af862f7fb0510321cd9ae4f7172ab3b347f6556b3da79e2a95950ff34b"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "304402202dafdefb2181e5bbdf5816fc710400bae0846bc08dfc389ef8008048228e2fd0022002b89786ea578488cf6c6b751dac0c13dd6c2c57c8d6bb0fcb47a28d2b07b1b6"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "304402204c27aac1c07e8bde8a998bf06acd5eaf40e874a9b128a4f19ee8c39ce45c9cbe0220380d9438d10ce81f7545f3de8530a19c1eda78e4683fc2145b9715eb260f1d66"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100e7f19c15b49e6f40eddd2c8a24d8c55e9224262aa0b856a413f842fc5c0fc7d00220341e5eaf45d8335bb6143768b1c961b6c7e97897bda5ef485457020661ac3ae3"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "3045022100e36cd43f82fc0f99ec2770a26b245f6af13623cee69670d68dd696ff76d4630e02202057a0dd1faee909037429ba7489ccf3891a38d29a4da04648441105c1e89048"
        }
      ]
    },
    "56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "3044022045bb3ce0d61f428537754555a0d69cfc5554de2dd58c1c5cc7ae81abe073b1df022039ba8d7e1230c3851fc08db58cda6222c420dce4b8cf96725891906fc5f7539b"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3044022020d30ebe13aa1235ea25dcc247a1c494a6aa2ac4f121aadc3beb874b9de4b75e022078efc82c2343d6165960fc252d10313550b6d9d1faeb6f2ff611c288fb53f364"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100ee126c98d8ad5b000090d6c16131709618d803878a72ceb1f58f2b11b2e52324022076403ce3d181511afc9b59b3f4a0ce4de9ee76dd60c78eb61660d623294d4070"
        },
        {
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100ed1f432fe0c33307e397f846970f7de0fc18098f3d5b4cc1a25844f75dbbfb9902204075ef8e6d6dae438dac2a7e3aace3e27bc7c67fe22728395f92888e68361f20"
        },
        {
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "3044022022be34e598b158445f7ff6a5565b04627b61789339aa956b03f5c8dcb81e0ca102201b970d57742618204906414d7d23dc42e9e566776e7bda9060bcde335817a8ce"
        },
        {
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "304402203ec8a77927b84388d5a0ba1bb0bfa38fcb862b8c43d988bbbbccbd547a4ae38e022002f2f736d3cfbf42829b750af704323f29b1eedcbde789c49052521ec47bafee"
        },
        {
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "304402205defad5bc1514f254cece6e8dfbfe3b68c3818bef6d4268b40c59858a6a2187502206767bb96c040e523dfd88724a0ce4b4f6bde73c02a286772f2a73c973dab0bab"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "3045022100a273a21625a130728e0448f53a047d50867a9ba5e4a285d7e06d98fb3bd655c2022061e93ce13cedef0ebe9bc9340b988d0fc7353e99e2ec28b77102a14b3a129479"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "3045022100b74529d5cab0055f80732bcf7864f03db98bb9f779fa56171f3faafdfee2719e0220757505e2ba5df6184002e921f678f9f5bb073197652a45d86c6edf003067ce2c"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100c14e1f90619be9cc92da927b1c908a18133b043e138d908bf81117e1fc73fe000220503047ae5e75ee53c0ed60601644ec09f430c613edc6ec72cdae4021d29438ce"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402201096ca9ff9b886a77fcbc7fdc8ddfc0f42a9c8e7fccb783581ca3abc75ba61dd0220191d21eed8b4eed56975b580832a8b1891a5b674fe1a0e5d7314b7b6486d7104"
        }
      ]
    },
    "56:0x111111111117dc0aa78b770fa6a738034120c302:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit 1INCH Token transfers",
        signature: "3045022100aa4cd645694179ca07ae32f7b9e940ef3268cab34bb2a67d4c4f31d0ccac76be02201a98adc704ff642bae02e8566470b83e98f95a70ece9a4589d1e7c865ffbe06a"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "30440220379cbc9fde04d67f3bb79f0559aa097ac10cc5f3581ad5ee7b2d32babc95298202207e0fd82eef66dec1f39ebff087ef36affa96e6d70c15a3ed57f820d08a11111c"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402204a8c834e5fcbc352bddfc02f932f2a068d3fdb134caa710ea472a37f1e8e3a1d022064452eb834e0ef14bdcb574c68c120d950a04af9062a4333d886ec6919dadbea"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100a088cba51cb5b8f2990bb945e9e927e0bfc11e76c8385adb7b2fc51e07a0281e022044f8a9d52181488e0e01fb88bb5634a2119845658869a66d2ad4860be1b1bb27"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304502210090d04cc0125bb3c6dab234122400aaf545065c6b9500df29da1e3544e2c7a3b7022036ced41cee57f6342c50ef32524fba068f470448054a50521d4bd51aa6c9bf14"
        }
      ]
    },
    "56:0x7e624fa0e1c4abfd309cc15719b7e2580887f570:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit PolkastarterToken transfers",
        signature: "3044022070d11eddf5a69c484c2db1d472abcaf3a4a3c5c9bb821b7b5adcf24ca658110a0220227670ef7ced8b0f603bc997967b67b12ba6a1d8022b29e4292d8b6aad14cf05"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "304402207f0fe68dc0d1b965726ed17a6f4eeb8a5643387dae6afd4d64a10ec1e5dafbda02200d4ea50dc2c96a73d8e2b868414ee83d8003c21fa5399279704756803e1ede10"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402202bba41fde065250b92e68333ca0abf62e596be683f777a70e68ede89bb72ea2c02202a8c58eeb203db1c42559234a8a6f271fa36c1a14762ae84d88721d741978bf8"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "304502210082b117a6d962e4ebd7149b49b078d2d66b86103c8ddb82279d9dc78258cc2bbd02203edf8667c304058056553ecb3f4436d578abdafbe0225e0742196d367dddcdcb"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100b57b1f68bcc9ed8cf405aadfc9542a7082ff870b1e4b9eccadd4ac3da8a16d6a022049d2fe4d0506764f6be7e6389b54dc936a517600cd3e7c640b781a2102142491"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022039764daffb73a12d21ffa77c263d071d00bc1dc310ce4cc9060c5330730709820220123a0e20ffc1cbcbc9537556ad29c04ec8e19dde7e7eea47afdee360fe09d242"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3044022014a44eab1d24466ab29b61bcd263dfa466e45d9f03cc11cb5b121c941271fd3d02203e5e85227f53465dde124fa0ebc0692bd2b1cf5b90bfac44fe9d536b7a4b4a96"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100922910c61d22377a87ef85dee6da9e29c100ac9876bc6c9cdb9881eb3d0e131802200cd42f4698d4d679da31474cd4ea4296e7094ec17e06adc3c133f1a8dc41669d"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402204cc4c139386164490893d3d2f2933effed82ed5daa0e0ee4d23ce9176705441202202ba382b1639ae0826ee0bff9cce3ef2c7943f32c45ff4584bd55b3a49b0f4c95"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "30440220686ad6284ef0d911254be7711cb1ac23633723aeab62a7165cb4b98999ccbb9c02207e9829c804557417dca25c7e23f005b13c851beaa6bb93b42e9f07aa1a210667"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "304402206be53d7a3bdafd6e4bdb86e3d1b3767900986bdd6a10d6075963c21b4ab0992e02201220cd9023788f36704f3b62fca65de422605ba68b833964c0792ec719ba837e"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022026ab43885c98f433ad1424f572718fbd548d56b2c02354d512a0b5e4466f4c750220677b8d7ee647b4b483a66274adf2afdae3bff55edbfcb5d005d20a5ae3026228"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30450221008e26defd212f1f8e9d537a13709a882614f1bc342efc8b7db9e61ff29df1466602201e4c948dc25397dec005f49ed4edac675707c248f3289ffea6f481bcdf474e8f"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022026b4e495aa2d354c03e15295606dececc983e5e285ccea63582e02af02f407dd022029f4377378a3548c9b2dbc37df374d5d4af8cdc6d8a97ded5ba10f212902f91c"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402205df3ca33c7c47b4f60ff51af10d9ddc3537015ddc22f374c2c192470ebe1e61f022070025d90624fd305bc893f0284f6673761b7318381b30899c0576fc89692b38b"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100c7a4dd786407dcae4d3cb167f1594dcc76e83760bdbb5b21dd08d550b18093a0022074819e0600908ef7ac7c81be5029486d7b0b4383884cab6df8966802766be2a1"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100feee7fef4693c181917b5aaebcd8d8933c9f7522ac5eebb13a8612c4eefae23b0220498b1180915442e73ac2770f63df86a781c645356b5218241a265770501ed4a1"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100a951f388b18ed053e69fea412e90e01c12bb5e1e4c20beaa29c2a94e871d667202204702861a2921c92a11f60a6e7ea6a82d1f67a254ef8ae89aa80376ea0a1c7d63"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100dd21a591bf52a2fcd8a87e63e1f920455b87e71b124cd2613371b2421cc64d4d02202ab80b9b2cb4c647123fd967e133b33eef3eb685d6d9a8028427501fa2db4a32"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e734637a14265d0a682d28205a964f2e632981ae39c49dfd022339bac8982daf02203662dfe1cc6e99a6b1679a68eaa00eb7157b0334ee2f68474c9d7832396de6e0"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3045022100960422217afa9fdd640240ce7e5be69848669bc6d63e92615f7dee6c0a4a42be02205abdfaf049823bb5c97bae109f73987713cbedcfd7019ee5a930106df816b900"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022051c30857bcbd3f70280d7c896a016da0ad49dff1722d25ca0cf3f0acd0703bd20220105ef2f7e1710d0f89e2e5117c28a305923127435c12b5ea1f30277ce7b230bd"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d366a3ee4f420bc5f959c929570dc2546955b9466c141514fac7d051712d80b102203c23b3de82773af68e15d78dbc87edec398a28bff8436716af0369fcb3860e44"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30450221008b10f9234382c1efc5d294d98975a25a16c9027604cd083ecd05af20851b04e202200de68027bc4951fbac1fa434a663c8ab89134fb9d8236e77fa5dc16c5178c9c7"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100e58442d4ad3a6b3d73c6e9a1f7cfe96d98179bcc4e3ad926ae9c544bb2cca940022027bf7d44027e967ccda7b0b0e077194eb9c2499f31e75efe1895cd10f28f0a99"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "304402202fb5009434c51b55f88b48fe62be378a22e8ab82d895ea66d877f4ab94010dfd02204564388184db20c182dea67978d9de519533473280b37a7f2b9f911dab1671d4"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100dce11b4a8cfc9847bdfaa3e0f38ef3632f57e5188177f4c17dd8a531bff652e50220050c59b5f67c0d4f59ba37b2e0f578915a44ef055693d92aca43c0c2570d79cd"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022001fedbc154eed1d9a1628dfa85eeddd9abb91b18d49a59e8c7fb3c4cc55f1ba4022042ba188fe844feb40d5bccce05c1296fc9acb19f92331f592413bec294926940"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402201bc1cfe7677b63fe456cb3a78ff032122d9353af812c68a07052dd8b63a62a73022079c4a25e1a1d3a3d3630490174a9adbed8351488c98b7e6e1b055a4600d38df6"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100cb619f27b93e791f667f780925b1647f49faff0bd3a8f3f126444e1860ecab95022000f156774aff76c8db348a0a5677b7a99a630f0c6ba55f9f2805bd363df1be50"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402203d2fd78eec8d725bfb69586e5d588174860d2e962b0659440d8c6f2a0cef6611022059dc7fe99f8fd6f89a15b5534c71e7571c485fe9f3d21d0a5d2b0437f92186c2"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100edef138680959b2ea2ba9c336988fe47c4e6078b19a94e64d53a80cc654bf3c002205a9a78c89421cd27eaba1b07c9beb47eac621396c19d79ba02c5d6be277a0401"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402203041ac9f31682911a83b11ee0cc13c225e4be455be045fbf8b0a5741c6863a3f022075863f0396604e2c74027e8fef019433d681fcff3ae546b1d59c33f1c585ed28"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100fcc91d0d928ddc5d34ba6ebfbaf512c01f93a8abc53f1ad0a76eca84aa78a701022010525ef9569401b1680592415c9b4507d484d59bb37095f204c3a7d5f647f329"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100cb4c66d1a45af4bd6d116b77fb66b926bff56afb8a550c3e28582f5e436761d102202aac75fdcf2e4713257e41e91e8df5fcb7e16937c74a61d0c2398ade9611fa80"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100c87c215918f308eed7462ccfe005907d17cb841267ead035340e8f9eb2d87db602205ace7a0b47150b3f423a679fbfb2a00b015b5014ac8c3ca3e885499a300cb5a6"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100c62059c35d7644eaa5fde91b0e7e110273229d01dcb8aec96afc13d01f404f220220674b885b86399f953f824185d70df46e92142518a8f4950ed2d7ed54af34f677"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100e5bf376e10e5f64a253d43489f38b8eb4fb2135c04078709e90c8ca49e20b9a7022078e48814760f2df95dc8d45d3c7a438674db223f6b727828c2784fc2bb2eaf29"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e62d51d254f6d76c0333cef9ed6af8dff443b4879ece411f18b408e24c65b40302207cf8df390dbfa6a0997047d97fd57eab184210e0819addff6a3e91fab8f7922a"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022001a89b05eb7f2c0eb520e8e9152af5a2bee435d4ca84912ecb16cfdc9e2b36f202207a19b3b63a6311cbc3ff21c587f4622adb0856174c26d444c063b825d981b16d"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022026254c5b6903c27b62b2f0678ba4d99e853842af501bce7d6cce9e01448d76bf0220517550421f2c67d7486fafbcba486513287cc3797d45cca7cf0c3d904c598f7c"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100e88f44eed7b2fb491aa4bcd8fc96907cf09a8f8aa194b099dc0fe7668d7c303702203099d5b55a43752a4e6777ed448b6a96d2e5da2ee7149620322c66c72248f154"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "30440220162d4f3fd7a5c8e19d1b70aff5448914ac7082230e1e1c6472462640bc97e4f6022022ba8773c06cbea23b13e6953c8a0f7a98ffdebceaa5542b9c3e330ee474003c"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402203ce7919144ad501982f67d07e5f14ac966643ebd85306bfd2ed01a0b195bee6b02207ec812a2d0bab9ed1b9a83f669a291ee0571249950a8f0be1164af9da79780a3"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "30440220610736904a597ab55bacc2821c8701670d08ef91661a148a425fcac47657926302202f83060b29d4623d0d13ad80d8057a19ef50986d243609bb3fdad0b93b7320a6"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100e72714fb3004f389173e1e396dfb953163ebd1f8427e390e6b6787cfd02ef54902207d4ea7e366753356e0c4d9ef1c124f20636c0b76a2040d51abe29aca5781611d"
      },
      fields: [
        {
          label: "Spender",
          path: "spender",
          signature: "3044022066ee1bb3c08d1c38278427508027778ab802d61f09023c8549977282d884a5bb022048bb50f5631e49354a7bf63f5801c1402eefed99d2b74e775854c64a77b2283f"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100976a51db9cb1b52023660a375533f1fc1cdcd6b7887dbe37d8232a863fd320c902201f0613a22c2cdb74fe98f8ae254d77c56ad9bbe7c15012c82975cb0d81857240"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402207a2fa57613c73382cc1214387c355d097baac6a4bf82c33054b4593ec50514c8022049bae1f0bda8f1594a37ad118eb48ac48ec53c562d37a7a5775b409584dbcfc3"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402207ffae59782b65f421908a2ee34ab165ff2734c678413458e875d235978362df102200863ed5ff10a08de0f175726ef2af9ba476c57077b89cedf2d9d13eb90a77c7a"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100a100d0b7b6494837e9162f26c08e8554969be1e212097ae974edfca5d63fffee022016fe8082a1ff56b71cd80fa54ac6d7bd21958ada0b664a6e0be7580b6b65d9ea"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100bd5ce8b79974823bdb9a7188b2d300ab5ac346578b0c73b10fdb0ee98d68a14302207f405deda89efed5b9aef4d2911a90481770e48db7a4ef02a209da55bb750f85"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3044022069e268580149f3806e0fbe3cd09b54fddf16805ca901de001a115ad2330eeab9022051e808755f106f96ced721d1e510cf6dedd341759a0e362b18e747ff54982c69"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402204a9c020d1fdee5156097f946327eb4977e5d2e9208b25dcb90e7b383fbdce26402204378adef26d05e8287c328ef2d09651b9b4c1b26cdebbcf776286847ee2f4913"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100d47b1423b880c60c932876e15749cd082acfe2fe32a661617ca8270feb7743e40220335191829d6a3b1a27dee3ef704c0cf92b6c0a14aecfb3a8e314c7b3e5f569f7"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022020a162731ec93ee7f98027a5feb5e03807818be464b00affa750a4558a99f98102202578eb63dadc6b18743a96ee393384ef40fdae8029941931a84b039c19c933c8"
      },
      fields: [
        {
          label: "Spender",
          path: "spender",
          signature: "3044022070bcfabeb93910982344547495147294072e624f0134a0eaa195e73f0a1b7268022030ac8cdac2076a43b304ba29cedf90674147000b3b37ed9b28ca1348d679e92d"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022033591b50b9b1f62d550f9d2ad404003a516e6b85ded26936b8ae51d037bdf600022039c27bc86b448a2e3cae64006c4cc1cda73ccb3c683fe0ceb61bc3ada16362b4"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100eafa8d03750d6ff10950d8e41bac1c1a23de0754d4d2fce1c98d3f6d548c15580220447ea101241ae8086d83f2c2e190d23b660b790d905db80ac782b4dc7752399a"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402206f8fd6a67e26cfabae4117fe67bab3184a8b493389c84e1249b7f9ca7a62a69c02204e00b017befe02baac4e1dcd3b64bdc1436401c5d58f8f54e0d44b9af65552eb"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022034fade1f5e208a71196e268fd3a1aee8cfa01c707ea163cd74d7afefecca6461022000d66770d077d17cc655a8263eb1317f30012f169c8068e865b19b6321706431"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100d45ba12fa943bc8c48a5085d4241c964a1f65823ed3b5f7a288c6885fc0b12e402207b5310e046215438da64cb370514f642d097030575a9497cb7cb82ef393d09c3"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100da37ad4b694bc7ee59f0dfe9f37ce8100b2fbd1d22fe866ab90fcb5a75c9071a02203927e28b4df2e583c70f6e15272ca813ffe4d3971afab27ef3f403730aa48c59"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022020be4365768b961d019a3bd11f3c72b52b093252d8b0c692ef03dcfd9f8d648102203a793e8cae971cf3fbd53518d0c2b77b15417657ca2c3b0bb24754c70c372574"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402203d728a67ff37efa4d431b1d682b3bb13535818f3e0338b47c863f5a8d80d138f02206d0b0d51a8ea7cd751f0599906f82dbf40da64603b376321dc4112a10b36a791"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402206a03800c227fead9cf18053d5cd9f282f1c86122c257075589094526f02adea00220193bd64c8d0c04045f8cb3367da07adc0121c9b35a30895b62333e1ff58d00a2"
      },
      fields: [
        {
          label: "Spender",
          path: "spender",
          signature: "30440220731aff0ad876d81442c75102cb83fff4139d74cd9cbed9f31850a7f1a0fc643602201fd344d75222883622706ea73e0d2c9067cd1f744f17ba716cf37e04bf5eed28"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022002876096e574d655f029dafcb9c356dcc2d8fb2dcd3bdf3fce15564e3d50ce8a02203b2a4c99c7113b784465c741bd1456fd598edcf5f0af772d6766606901b46a32"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402207c902bdcdb3709c8a1aa3c1e52b9ffe85c1c6468fb42e542c67d371a29ce1c560220289e633566912180b531e66e147de1eb59dd6d7d3d0d4e2eae22dd369f2dc507"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100ac31cae76a61aa434d6fcf7230abfea0ea868292640f607129d20cc310b61bf602202a70073a17ed6ebe2676816febd37f488435cba843ffbb184e14dcff207bc213"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100e58823841f5b5ae04b011af5d1546d3514254c39af4c5f140371d40d2db9534302206333652326ee585116844754351feb73189345cbf2bed596e92bcb5c73d37fc8"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100f4707993b6c3ad2702ca775cade1ff69bd4f6dac7ee3e6cfee9eef71f9088f900220189696a9ae7371fd16cda5147d6f282d416d2956651ac0361ca1fc0d60504d6e"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100c3b0891248431134809b5e5383aacf261eb56018fff48dcbbd043e5551888ee702207b1b8ce28cba1aefa9a6c95821346422b466b05ad4784b5461afb874dc0fbd9b"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402203640de985c876c17d297a73ba553aa55e517ea36838d9fd235c1b94f9a805c3302204e1e64b95f27416bb1dc4c823ecf9f1bc4e25791b6c7338035f58ab8fae59170"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402207e78eade3c5caa49976eb8d06dcf60c5268e9a0af3ec3a23c686b718c744ea1e022067e283c42fa55edce36d01cba872198011dc91c849044a119f34d951ab067163"
        }
      ]
    },
    "1:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100e1f7e1db3081ebad48f85b6443892986b2048bde4dcc8e7be4c926923ef6de0a02203d042c0caf4ba241f1a9715ab2e18bd6d581d8383a5ac41b9e29e2fa247ea21e"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "304502210084df0994694c4f28ce49b11ca4d04c961e50a723393e1e62e7fa62f3460649340220489ea716160dadd85eeca97e8dd42945c95e5d5b02e6b1abc0d6292049783e72"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3045022100963859d2192e1d9ee9541cd7fcd7e10c305ad0dc18d132f17a8904cd61510067022077ada6acd906aa77fd25ae8e09bb1d71c8d04655f4a3eb30d847b1174292ca36"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "304402206e991015ec3d74a70cb091b070f9c980209767246bfaee40e19343e6e558e60502205ea0e5eb238706500b23e9dd94da24ff6caec60fb9996fb2fbe4140151f47409"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "304502210099b30c9ca05ac710efec2d7d21bedf063446da29a7e5864c0bc8cbe30d2e6031022054d5257fe0f4d2624b4650361048b642dd269592acd19cc8801035b91b7774fe"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "30440220760e20dac71d010d9a93c3d34a6847469fbe21807b539d5bf9302325073f59fb02202c876f4105fb051e6f69430ebf2ea2e7ad77c63eed86e699eed863ae0a8407aa"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3045022100c23f20e9c3cea7e06b6642635884b11ba3653805327413f0e779dd2148faae3b02206c613e4f4470527b6ef0304b09396ec915045116607901d1c2337b5f04b87634"
        }
      ]
    },
    "1:0x119c71d3bbac22029622cbaec24854d3d32d2828:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100ea11ec08e4ee7178eb6121d603d00e6c6e62d0d94e6d4098abc22d709c47b5d7022041c0c9a56c14a783c02a8ff358b0162ac1f743c3f8fbfe8726d125d041a55a04"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3044022062d5d76cb58f4b20f6516df1154c983610b57fa7a2d65be91915012075ccf19902201b5b86649fceb99cab590143133b535ac0455505fd70e94ccc5d6712bf1cc963"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3044022016261940797159c32ca0d8f646e3994fbaece31f143d5978c04ca680419bead6022004f2a06f87a7a857ab78cc64f8bfa15a188ae8606a0989cb411c3ac86fa3a7d3"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3044022055fedebdae7b379c3ccaac3b27c8104a67fb4966befa270366ce79cfa0115620022074b785487894db3445f9584db078d6718c7a3f63d1d8e1324c37b4eac80c40f4"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30450221008e8094c8fdb71ed55f71526c77d58b4331f057f97253dc318b42dd985f2131a202203b910fb2f7fd7cf8abf43b7457544df3322a1c4fff60b4e1f1a96f88f889bae3"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100eae49be17c711d0833b8e4e05c5a0a1655d0522c2cdac8f174d32db86e6f778902205a1608d20bcbd0e18f3abbfe717ae248328468853d952ebe63d0787535fb6296"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3045022100a372339b731529e6315864744dae1826fc136eb899925e46826faeaf6ad5b10f022062ced218ac80dbb3bf8d25203de72c7d06ee20e39115bde37de3f3a50e9f1868"
        }
      ]
    },
    "1:0x119c71d3bbac22029622cbaec24854d3d32d2828:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100f2bc7298d431b6f742100623febe6824eea30e37b2d89093c9cfa933a053878102207332846b67bfdde820103d7d775c51a1c2b0fcaf48f2a9a19cad9364e12fde13"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "304402202c13c39d9be77721727b3920ecf3e856503d952caf07a74496984b6bac252567022057cbbabfff5bf7a00ca18d4ff9ecb0c5215d779a4750daa96fd3a257838d7907"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "304402203f4e208ce3eaf2cdc9c892c3579ecfcdea71936d7931695294d4242a31b05cf20220370f8d5f60500e7219e6e18d3d0ad89eace7bc19506b51a192f4b285db0647bc"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3044022078b8702255d94aa9013dafe99cc2ef96b7a6c30fa5cc3f7d2c47541e193b47cd0220492a89c9bf72e0236d57449008407b2a5ddd20ba3a0abbe2cf851d9bbd7c1aa4"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100f50a715d4590f892c74d417c2d2727d7bc5ab3f7406ba00fd1e15b539368fa66022026c8e8af1802cb5f0fb71d91c8341ff54bc00afc9141e883ce0a38a24136952d"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402204b5fc646ef012cf525b8e2a85113e532e16d805c7abb899175d40eb0bdb6bd2f0220586bca533943916d742c4a12cd8f82da5f93b6990acbb240e6d559edf6f23167"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3045022100d116efa90828b9a139cb8b54c3665db8e58cc2af118bab85042705b6f0cf997a022006429fe8762194100330515341dfdca029e5284ca44f57d50e8c1d8cecdf81e7"
        }
      ]
    },
    "1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:08c2ba593f6e0e80b8fd2bb1da6923135c173094f9cb6ecdea6ea144": {
      contractName: {
        label: "DeGate Withdrawal",
        signature: "30440220089127ef62e67a3d075a2c0d645c06ce98e6cd373bca7ac89217b2919d718b9902202b4fc6a5488200db6a51ef2193febf8023770e44d361a5c85907c1f6864e3ae4"
      },
      fields: [
        {
          label: "Owner",
          path: "owner",
          signature: "304502210085a5f94d365f90e93bced9bfdea6f3a762abfeec8d77b070905e46368f0db7970220042075c4a50ea30b63308a3d4ef5cd72703c7447d4d296e3fc90e3872aa54259"
        },
        {
          label: "AccountID",
          path: "accountID",
          signature: "30450221008d1561da0d5464ae0173b2a6ab1fb7c9fadec3429b9d068f464062cda6a721840220169a240b04d50866f8250860c82b01e664d4bb1262f7782a454d3341312d7831"
        },
        {
          label: "TokenID",
          path: "tokenID",
          signature: "304402203da24c741ee39f2c353d6e38386af0ad7b38a2568663f562e084247b618410b702205054378fd255b5077310009af3ce2507c29f5c3a8b651b64519982ed502b4090"
        },
        {
          label: "Amount",
          path: "amount",
          signature: "3045022100c2d5d4aeed590ec6bd2116f83eb334023d5bf01374700e49d73af5875059c0c10220286ce6cc46a4d5e9ce71462b9431bb69c55f060a65fbdb2728b526cbecec0046"
        },
        {
          label: "FeeTokenID",
          path: "feeTokenID",
          signature: "3045022100e50a065542008fa67af23b0091e5962e89deca43cc4cfa55fdea4ba86873846d02204d3ef27ca382008596cf584a8169a925a9cc4608ba16fc4673cdc539dd85a29a"
        },
        {
          label: "MaxFee",
          path: "maxFee",
          signature: "3045022100a79503f04eafa7afb97bce7df13dc697d7ad03532be221da27d596ba5c4f9be502205ae99bd27a8f1c92cf78fec9952845342ed93625d07ef878043af48eaaa4b093"
        },
        {
          label: "To",
          path: "to",
          signature: "3045022100c689e1d30113b842b9fc468cc4e26308a6df924818b9fd89431627c8a42c57af02200225d6cef4578c9e4c46c48afe459a7037aedbfda03195ad0252cba5b41b502c"
        },
        {
          label: "MinGas",
          path: "minGas",
          signature: "30440220464c332bf0455c61102f4884218190994094d7c9808411c00fa6fd6ef5763cc002202e3324eaa0bac01d96738a8a9ffcf531ab59aa03911f2031182d8b9de97a4f06"
        },
        {
          label: "ValidUntil",
          path: "validUntil",
          signature: "304402200ec81207eb0079bdd15905bbdd9b98660d705aa08df96e9ef990774d2f1103cf022035926ba6cf460783122664b1a25849638ffe34f42c38177276c3bc7b10ad9cae"
        },
        {
          label: "StorageID",
          path: "storageID",
          signature: "304402206d33f0bdb8b370afb15f212aed98da5ad1d2c41362f9ade1360f86ae9ed15cbb02201204be822aac5c18a09f0baee45c5bc3295c8c085a391355e5ebb8a3242c9cca"
        }
      ]
    },
    "1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:3ff1c601fe26dd56c4fc5d773d7e24b17caf0754a14f5eb033636388": {
      contractName: {
        label: "DeGate Transfer",
        signature: "3044022043833156814430e372cc93d7540835c0ba00e298359bd1296425f42b40c477ea02206416e6bc158f72bcb300fa468fedd42394ecdff897494869cf1f9679b6c2769a"
      },
      fields: [
        {
          label: "Owner",
          path: "owner",
          signature: "3044022018ba034d2e60f07b388cde680072eca4b0815ee5f479e165626c51b84321c6790220793475c2711d3aeefe5ec4d5ec89be59c840ffb2d51d013c8d86c2b5d7e96a8f"
        },
        {
          label: "AccountID",
          path: "accountID",
          signature: "3045022100aad3a5a7ba18bb2cb73d647bc0a573eadf97b62bc08b7656dbacb982aa341d7002203a4f6e50a3f386b10d0377debe312d5a1462108563e18807fa8d45c4edd7615a"
        },
        {
          label: "TokenID",
          path: "tokenID",
          signature: "3044022002c7d20b128cd4703230f199371f6ccd18f2e3311ff3b431cfdba8ed69b8a9a602203a5be9d165adb244c9c9e0100bfb559fea69b7a91a9c4805d3cab7bbf649e2ba"
        },
        {
          label: "Amount",
          path: "amount",
          signature: "3044022048ed7a7e1860df3c118a9e0bc25ca8085ca4c4981d00d8a4a25bb26ee905d23702206cfe29c63e4da5415b402f1576466f6c629b44c733e3d4a4a46b61cf1f0ecc12"
        },
        {
          label: "FeeTokenID",
          path: "feeTokenID",
          signature: "304502210085ec5b05794e239114ee6dd75453cde566ea74286cfe76122ff69c230f54f3690220668392a6f480c2eff108cdb7cf3aeb287bac88abe59914ccd6932717e14d2758"
        },
        {
          label: "MaxFee",
          path: "maxFee",
          signature: "304502210098019a9ac20d02984196a508ca27d29c2654feb0ad161b1500ec7051c0ccb95c02203920ddf0bf7e17f31dd59994043bb0a21a3f91c9674f164d63df5cbd42e926ce"
        },
        {
          label: "To",
          path: "to",
          signature: "3044022067324800e3b2353a4ccf8faeebc4abfef0cecf550da5afa292dd12820e05602202203fa883cd57d057a3463d149117490ae889173e867b54279c488abba636357029"
        },
        {
          label: "ValidUntil",
          path: "validUntil",
          signature: "3045022100ebd27a8311ce197bf3bbb72856362853081faa55048d186a15017c998b164edb02204bff1cf694d3195d4c82a2c8d6f6b1d4db842e9fc891eeaff2d4ec4d8d64836e"
        },
        {
          label: "StorageID",
          path: "storageID",
          signature: "3044022058b6542b5fd416c8c321eeeca445df10141187fe956363d7053a90debea15abe022039b14b0f608f4b1c8757e5de2bef2f80741df2a85beb559d4ba710af9284e953"
        }
      ]
    },
    "1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:4decdb2662378b6612b240fda08f6d00412f088ccdf3023095323de2": {
      contractName: {
        label: "DeGate AccountUpdate",
        signature: "3044022059026d8aa3f81272e4b4b72f0094cd0fd04ac862e3e8ebc3e73ca7b923a45f70022046a1f7323da99a3dac0d4cc603c9db38b64ac3fa7519a1248e111abf926664d1"
      },
      fields: [
        {
          label: "Owner",
          path: "owner",
          signature: "304402205f7fae43ba4d7a0e5bed7bd9cecab4f2b55bf6ba6b3e33962ace5fabef269c0b02207bc89e0acf86b7593b18ff9d865820956508bb1dc3d8551dbd9f6745029cfb3e"
        },
        {
          label: "AccountID",
          path: "accountID",
          signature: "3045022100e580811e1e6b2e40fd4cbf4eb1a3f4baa934e6d96e80674431b2a6fe93581dec022010447ecd9023c4a028142d2e34f217b96a65ba030052c20eda6b3f4428ff109d"
        },
        {
          label: "FeeTokenID",
          path: "feeTokenID",
          signature: "30440220387d9f50b9af4dc0c2ff7dc73d513e1d816a55aafe1ffdc88827176907c3a5f0022007d64ad6946f932190bb352b5aa3360b4be0d1b50faee29010f5fbf132cbcc31"
        },
        {
          label: "MaxFee",
          path: "maxFee",
          signature: "30440220395dfa14a44c006079ec38d901b71e839ad10e1f9642b37246e4544302299f1a0220216a9b71a26e1a8ecd87f7f16d7a04aba42a68c18da25e8b608cb4493731ad2a"
        },
        {
          label: "PublicKey",
          path: "publicKey",
          signature: "3045022100db2cd9ef2becd6bd902458e4c3661be2f98db0943ca0b1d074eb249cac7139ee02203d011e51879b69be2ddcbd215242dd9e70f0cfd92c59fbc5089aee56bb51c7dc"
        },
        {
          label: "ValidUntil",
          path: "validUntil",
          signature: "30450221009d4db9f47704967c5fef69f7255e9dfd19abd928adeb7a5a06abe2fb8b3adcde02200ed93b341bc629b132313b1e8c47db096145898b3a741d165b21b653ef14c3b3"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "30450221008e187640c09a34fdda18f022ece0f1632315392192876af7df895c6245ee506102205f149a22b0eb3d9bcdc3e65db8a0e1b6494266c721c1bd4248e7de7bb8a4dce6"
        }
      ]
    },
    "1:0x7f268357a8c2552623316e2562d90e642bb538e5:d8e4f2bd77f7562e99ea5df4adb127291a2bfbc225ae55450038f27f": {
      contractName: {
        label: "OpenSea Listing",
        signature: "304402205f01e62b2331ecb9f1cb3f49a764d66015937cb20cb4c3af625146905ca4832402205076eeb4a74619b4552278836b548c8e525813faa9008399e43bfed7db016408"
      },
      fields: [
        {
          label: "Contract address",
          path: "exchange",
          signature: "3044022069df3b1c82dda9849a3df4cd0dd263d2b6c35e4fb8946865a35f5555830971b802201880d72b3d956867b597a2f5097d7f8799bad6e636d3de4030515634bba47155"
        },
        {
          label: "Price",
          path: "basePrice",
          signature: "3045022100db49dbd8426193b6012781f43c3b445d1cf845d99d738091c1f068951728333402204326a2da5203f25deec049deba760bb31a86507c73fe6828c68e0db2eabfc966"
        },
        {
          label: "Offer expiration",
          path: "expirationTime",
          signature: "3045022100e71a4921740fcdf4e489c517fc82f9b7e83cfbd675dff318acb91fbf8eaf175402203fac43650771c6523dad8d995ef414d035a92d262a9cf95885ef2704337a2382"
        }
      ]
    },
    "1:0xe92b586627cca7a83dc919cc7127196d70f55a06:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3044022043fb323d3a064faa38bcabad3a3f797dff60f55b49c19e350a9d0b1f980818e202205c3dc14efcc49adf915f195ff29fa02dfd9d08fca532b76086e501f9e0d133ed"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "304402205b674138eb50ddbfdd05768f2c641109f6c8f341d27e10ea12d59e083746cb330220521d739a49ee57ff9a41cf00adc631d3dd33e9ce2b23ce50759fb33c0ffce0a5"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "304402203ba8d470649ae7cb5d02764fa48899ec0414075ed85cb9fd95e89ac5b3bb073e02200183233f30de996a8b87417a6febcbb56a544c38fd62b6f7702efa7e0d7b2ee3"
        },
        {
          label: "Maker asset address",
          path: "makerAsset",
          signature: "304402206f3c4055bd431c1ceddce5b147c3b5acec950b267205da655fb3d331b9c070830220570c9cfdcc02b10abbf9a335ab6a4067ab7cae2ae8a443f795225a7c3981cc0a"
        },
        {
          label: "Taker asset address",
          path: "takerAsset",
          signature: "3045022100fb93cbca6ee524729b138319a92316a37c56ae5f89b3d652af7f680c3f160df002203d1fc525b11cd30d2907f844d7774f49995b2be7e3ba2896dcd4a6e73c8a59d5"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "3044022002e75adf4733bf28d532647c54fb0000415737db37b7e5674f9bb20179d01eea02203834ebcfe81d98e745572349bb0da4ffdc8ec846d35e3812119e9a3491462724"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "3045022100966a77a69a7e0c060f154a8c7ed36087d8ba7da111d9bacc90b873421fe6a75c02207d92956d938a966cb98ddb6e8b3a56e4d8e7725182cf1bb02f03f67512460485"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402207ece45c0993fa46316022cffbdf64307cef2caede370f27fdfd78471c3550dd002200da74e8b3b5201e654e7e4674f7471a333a104288fdf8cf80fc3122126113d1b"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "3044022014183f10973ddc0ccb12472d2437e33f368f627b99022735044e5c4ebb4e345802203a3f5e8aa5c928981d2dabd0442342c605db1626dcd0d3ad5e3afcd98bb8c673"
        }
      ]
    },
    "1:0xe92b586627cca7a83dc919cc7127196d70f55a06:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "304402206dfa1d54ee0a7ab236252618a5fac9c752152304f31838eab4ba4c6d2d3f844b02206658b1e9b2503577619080909be0f4c1d2a899b3d0085ed8c3f2a4309762dd94"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3045022100ed9b0b91a8cace4d312f6d1bab076c057e954a9cd33c3dc5c350d030e41edd230220230e3050131157f6fc2fc578df7b1108f69d55d25ab837c661045877b148765b"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "304402205d4913092612fe78d75c181f3ed28ac7808e25ab0131e73bebd91c08aac65e7902203d63f1fd4d5cc11b1f8aa2af0ec6a8440a0ed59d440237bce96ed87874c2a26d"
        },
        {
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "304402205f9fb08bef206518e5bf48cb7fd968709a0ae317e903d9c87a41c934a0983af3022066264858ae4a1338d4daa1b4f9dc7376335ce9e57d4bed320b0d4c27a0012deb"
        },
        {
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "3045022100ac653732f2acece7c47588bfff9a1059dc69bd3fa7e387cfef8246eb0ae2a70902204ffd7f89cd7223f8e52b7c44b02ac4fa1d06017015304f1a3a7459b20d54a5e7"
        },
        {
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "30450221008e59dfbed2dd4d1e2738b829d7a57fa23be737b652c0b01299f3d9482174aea80220138c8e948becda6dc1e7564358e574e7ac8d7016f2a1795059977f401535b27f"
        },
        {
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "304402203408e2bf0210fa4454baf46374cf876299578df056ddaaf5a907306804ca41cb0220056f910e3c500e4a8f55d5c09dceed9753a2ca7b49a9ade1955a598f4e64d657"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "3045022100ce5db907819f4f36c77f1e3a849a3a6ac9483970128998d5add5941e1fcf6dc102200e1f26e08a3f48ef6fe1d40a4149cb8603c5e70e076755ddcf76894d31f2adc0"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "30440220015799beef248e4eb12f95368ef44cfbaf65e43da1a4110623006e46157ab22c022055f962e02e4cbdc05bab79cfbee523da8ff9d16529c4e98755b15d45bb34a16b"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "30450221008048cec54417376b3a659e3aeeb349a4352751a099443ea203b59e9d2cd954b702201b32704d89bd028a6794ef315bf2a204b7293f547d14282440f5aea041a27ee1"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "3045022100dad584a953b3c56c67913e76f1a6626cb72620e23bd16f41b2817a95ddb0bccb02206189e3b49d9f3475bd52baff2a40c7f026daf1d2dad9cfaa403eb08030836090"
        }
      ]
    },
    "1:0x6b175474e89094c44da98b954eedeac495271d0f:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Dai Stablecoin v2.0 transfers",
        signature: "30440220692d38bbcbab753738d0c75d87efba7b93a88d4e225e73c7e4d0b54e4e8b548302205000ffda67117043bce94c327837053e2b6bdb888b3d2bac3c1c3b79997c1f90"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3044022067e97af5110ed4a8a5e8731a04c07192042b5ef4fdc598cb10256363c4bd503302205fc2e4b4dbc178b3bcd8412deb66f4b99b4506197bb046ad618457a1aadd09ad"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304502210099c45a68aaa7656be36f74fa0831546de4e7b94909143853bf678313b580963902202b01f4e8fa9f6f5621027c1147fc435430f22eae8a91bbd6e27b053e61a69d8e"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "304402200bd61453c0b2ba4d132e33928521c8f9aeef41ac38dea457adc578e36b14995402200da4596ef58d8dbef3bed208ebd8436fdf74a392c261a7a0a779525311282060"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402202fd903bb26f5f89667c1382b26f64cddcfea77434f75bcbf5a381271b7da027202203baa46ae7d78f4d32af367f430deb738dcd5dfe05b04d56ba4404989d308633f"
        }
      ]
    },
    "1:0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Aave transfers",
        signature: "3045022100b90cde117f034f5ac3cc1563397a65a88b65814c4eb4757d232b70f1c7731d6f022069394d2683d3230e7549c4763bf10ddaeb2cd9d48661b818605bd318220b9f8f"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "30440220671740c2ec59c9bf30287a9ec559ee15f5f10dbabeb97e4bbb1756ead6efa4fd0220607931e7d5e48150946b5d674831381304a51c756eabed869fbe28d6075cad17"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100c85534d029bed7daaed9dc5db7677efa56ac772a01b715934c94eec529cff88d02206947c5e45f9b60d76a41c20a2feca0bb06c19fa99863fabdebf842b7a5c088d9"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100bcc7ae5fb36f596f7d2076be3cbae4b87a3c74e331c121bb8ca2a356fd54f89c02207cdfbc183b64be14699f27ea696edd007589dae91c5ddc8bcdadcbb41223ab65"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100b4b6235742a1b4d41c0177f228ddb7a6720ccb6cbd97da5b013c9c6a8e07ad2402203e274f76ce9d462ad7782380db3cb0cf3e7730a77633e0a534b50f84770d8928"
        }
      ]
    },
    "1:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit USDC transfers",
        signature: "30440220206a52ce36fb75683481981c6f1f2e1cc405da8b7172b4fe3b465b19139bd66602200d5d2a800a253881fe4d87ebaf57fffbc7fbb8591ebe251ac69d650469b51d16"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3044022048b3e79d00220b5fb5908cb13264f0a10ab1faa1f9c95702c4dcb91aefa2475a02204096676422035d37f30a9fea09553d5d1751413e5a2cb60d1b9919aa33e166b1"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100da7a47dbc3c943c29f2211e139c5dc43b6c54d79d4aec205694155a8a2bed5b902202f1a885a2a6de6b705f8cfe87d6994e470c779f8bb8e6e52166c4e41437e605f"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100fc3e850699e3abfcbca2f4258f248573b43c91b2dd8d59d423804518b2e5f79502200868300f4a75b3f77b35e7f45511fdd4e7717604d416841052b9a0a27b1087e1"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e809928ed622936a7a8d03141dd7b477ec92243918293e6ea48d32c0f90b70ea022054065681702e458131a18cb8e8eb588618bda83b1a24ff5bddacdfc060ce851d"
        }
      ]
    },
    "1:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b": {
      contractName: {
        label: "List Order",
        signature: "3045022100cfd82c26631445df34b327b31ad55ad7f26e0480ea7838ae83274ad83b8f9cd1022044b5a3db6b6052a5b818b1bc6cb28d523115033ca7ab3c4a269ec37e3cde890f"
      },
      fields: [
        {
          label: "Order maker address",
          path: "maker",
          signature: "30450221008ab1ef7012cf407a80348d6be16a98d375bf959de72f260cb92520dbb30fc2ce02200d9c0e02c8375d94077ebe16c849df5745654a1c499100286201407be47688f9"
        },
        {
          label: "Order make asset value",
          path: "makeAsset.value",
          signature: "3044022018c3ea3b1768f348094f151f8e28171d1325d5cc1621478b23474f4695acf2d3022040ad4bb4c8c138857e426128488ee5a3df8fa0a7cfaf58e9858765a0f72a8a02"
        },
        {
          label: "Order taker address",
          path: "taker",
          signature: "30440220482e1c1439ea879f243fdd47cf043bd271c7fb73ba095463e920ab34c38076c002207c095ec3307fa3a3ebcd125238caf3f7c50d196db444559d31c79916e514f370"
        },
        {
          label: "Order take asset value",
          path: "takeAsset.value",
          signature: "304402205d33c23ab575fa613d37d7fabaa719f5aa4dacf8de0f299e83dd189eeabfc31d0220535f67346b8ed7d175193929aebead42b92921465c1474f482fce88bfd00323a"
        },
        {
          label: "Order start time",
          path: "start",
          signature: "3045022100c178033effb772f141b46a9d5b5bcfc48468c6e5c499d8865043535947b1bb490220687dc9018a38c62e01c91e90fecf9e18febe995267d1bea27d3368f12f04bc9b"
        },
        {
          label: "Order end time",
          path: "end",
          signature: "3044022074ecdea3c58a28565af3336de33390aa7e592e5108f6d9151dd000a90a5eb60a0220163362373d11f177e41b914dc10c93b76adfa4c27f4662179329e66b32f8f139"
        }
      ]
    },
    "1:0x9757f2d2b135150bbeb65308d4a91804107cd8d6:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b": {
      contractName: {
        label: "List Order",
        signature: "3045022100892ab54a425fa1306df530b5ffeab2944133f1fbc68b99b92e61abf5c5051d1002205eff72d6f2c65f7835bcb2c6593b772d0a45e152988b4379cdb52327ce5da382"
      },
      fields: [
        {
          label: "Order maker address",
          path: "maker",
          signature: "304402205990b238b291ad1bb3cce7d2acce868761c6a73fa79e87c05530813aac8eba5f02207408c5e30e840195677fa60d411d2c2bc76fbe15a7ad2506a4636f001708bec5"
        },
        {
          label: "Order make asset value",
          path: "makeAsset.value",
          signature: "30440220646b1bd068a229a75f7f0558f03d2fbbe7dd441d318480dc8eb532c3452ed6a00220642fe4f065198bab191c682e55487cd6464a90c9527983dcd672d15a0a083d80"
        },
        {
          label: "Order taker address",
          path: "taker",
          signature: "3044022014dff71fc22c0b53e918ceed99de5aa86cc49fffc22f271a9586a9db1197e413022001125d415ad2eef46353bd8e812248fbf3fc2b60fb5fc7dad3853c9d2c85c6a1"
        },
        {
          label: "Order take asset value",
          path: "takeAsset.value",
          signature: "304402202416cd3b9b1b9b7fc4bd5434f0f8c54638d0f29e87f1f92de7006747f4e856aa02207afb4547d03de6247628f93c5ed49f9122e2780507bc601f5211c89c8905b93e"
        },
        {
          label: "Order start time",
          path: "start",
          signature: "304502210095c5b1927e171ce8f0b74bd311cb0f66bff5e3d23a7eb52e1d6b696378defb2502204114def9ce15f2b698ea00d43bee8e8692568a6394e24c8e0b53c90c29ab7ad0"
        },
        {
          label: "Order end time",
          path: "end",
          signature: "304402203f435338d8130399eaa6939c0cc8f4fc5efc92a34256ac450d6d55b0ac2e816f02204c116eb40b3c07810facd9117572147216fdb175b2ce31c6ef277501dff7f6d1"
        }
      ]
    },
    "1:0xb66a603f4cfe17e3d27b87a8bfcad319856518b8:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9": {
      contractName: {
        label: "Lazy Mint ERC-1155",
        signature: "304402206bd24ac8c5cfa2b75e16ea0c315295368a7f780c4ec062555079cfe48d583a8602204300f968037f9ea84919cdc8ad3a22103b04e00b9c4dffe5c34ebf13d1b769cc"
      },
      fields: [
        {
          label: "Token ID",
          path: "tokenId",
          signature: "304402206e18eac55b89b17b4706547807a864f6c1b37eee09fff4ccad54e9842eb1abaf02204ef2984f87d6c0ebab26352ce82f8040aae5bd259ae55d9921d609b3936d15dc"
        },
        {
          label: "Token URI",
          path: "tokenURI",
          signature: "3044022067c04bf2be50a7660b11742d10dbcc84655c22a0d359c20b2abb54a4d23f2846022030bded842ae4208854c0d11d655b234465e2c9ee9fe9b1eb5074778ddcfa9426"
        },
        {
          label: "Token Supply",
          path: "supply",
          signature: "3045022100fc4ab75ab184e564ea297da785d4a749b913e58706dff4e6c7ae49f72a7e9701022067bfead2e11a323beca3821a3ba310d705ebb128f45bee1f394dcc7e60af8043"
        },
        {
          label: "Creator account address",
          path: "creators.[].account",
          signature: "304402203e5e5fe4636b283df4e4d027e8ba5e43d912f53125b052e603548fff051b37d702207ceae4257ccc801de3943fb68b1a0e2af546e12d3bc74481b7695a12de7eebd2"
        },
        {
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "3044022065a51fd2cafd0013215fb703e27052320d35951e5f9d26a3c3d03a050b7088340220193e98ad9282a96e3e7b5e6813bb5989c31cded994fed35d5383e68738905c1e"
        },
        {
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "304502210092d8aa5743b9fa52cc1d5caf4f83e65cf232b02394dae8e3056d29606377caf902205119918948d39a165950efb998e19aecb3bde611065e92fd5f5c10bafaacda22"
        },
        {
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "3045022100b7cc93e7abfcc00efbfeeb49cef4d2ceb5521e1c97b2bdee882e011292964be902203d7ebd7c328961e1ca66aa16e8c61aeefa3bbbcad419bc65315658cdb425e5b9"
        }
      ]
    },
    "1:0xc9154424b823b10579895ccbe442d41b9abd96ed:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b": {
      contractName: {
        label: "Lazy Mint ERC-721",
        signature: "3044022001ca2f9abb569b76bfb8398ba150999d93fc6a02f5e637f4ac3a125b6c48b528022007ab8f1b776d1b2f5a0b44f90214b02f71c3535e468f03b681f133c3bc217946"
      },
      fields: [
        {
          label: "Token ID",
          path: "tokenId",
          signature: "3045022100e762ea781d76c81e5f3b28269e03f1cfe7e33b847dbe20a56289841579b0fb4f022033c6249fc155deb94850e6e30fd7fb854f07c63c2b8ffc8b3c7d412c01b8398d"
        },
        {
          label: "Token URI",
          path: "tokenURI",
          signature: "3045022100dc369275a5b2d6a3c934221e9f7483082cd5c52bb1b41a802d260c54757cf29002206dfcd13e32357144ed68b90c2308208bfa699d95d917a97d8bf438aed08269bc"
        },
        {
          label: "Creator account address",
          path: "creators.[].account",
          signature: "304502210089448beccdb19e680a7f8a6dd4f1e0dc8319b3458f0d5a491518bb97af0e1f5002200dc01550cc4d0d3398049938d2a498c142e2e82eb9086c7d6d6a8f1f90d1d25e"
        },
        {
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "3044022026ebacc1dce44b2815c6e53d9030836a4768ba0019c4b6f9d8eb83d8699ffac3022076b9bc2f89daa7e5e21b294163e64ed25d2bdfe5f2373f6aefba4f6da1d92d3f"
        },
        {
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "30440220626fdb56db8c34a282917aab1f7fddd36a060eb35f117ded7b675be946acfac002206770d35391e086e1ab31e9fd9cea07e90b09d38f0b882857e394283ecd6575a9"
        },
        {
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "3045022100e22f440fe2bb06d77a0afc50366689ede59570dc91796305ea62e5ca5da5286c022074bdc3dc840c7314abcf6bbaf35fe5e20318c54a911e7508942fecd38b70db9e"
        }
      ]
    },
    "1:0x72e9d9038ce484ee986fea183f8d8df93f9ada13:65b962ff5c94fe989fdc9169a5dbf3662e79747c3932616d9f0a39cc": {
      contractName: {
        label: "SmartCredit.io",
        signature: "304402200fbcc50090e799ff0ce08f08ff8085c162210bc9ac9d599aa9dfb7a3bdfd716e0220555ea5626806f7756660657459d15120dec6fc45865f64d653cf850fbbfa1068"
      },
      fields: [
        {
          label: "Collateral address",
          path: "collateralAddress",
          signature: "304402207545402a92f3eed973e15d3fb43107e2b241a403796189def24abbb4ab59932b02207d258e006f51f0fa9cdde54dfe7e9145619b7041dc4481e24e125c31754df0a6"
        },
        {
          label: "Initial Collateral Amount",
          path: "initialCollateralAmount",
          signature: "304402206b7167d76ed863ab7d3346b0394518d1b23600aa94224c49c601264180bf5cf602207a712ca9c28e328905b9d6a29f908dd7a8ccda408c8e7c1671926ab0de5a012f"
        },
        {
          label: "Loan Amount",
          path: "loanAmount",
          signature: "3045022100dd03f4bd05938c7a0f5c8a5d4ec36687179f1cc1df63149e5a144d5d54a7de65022063433c2a0103f1afbebd2bf2a9a817d608874532af4a6a23bde475ce2ced6795"
        },
        {
          label: "Loan ID",
          path: "loanId",
          signature: "3045022100ba34308137ad49140a12444f123886eedcf0b56e02c84236f262278cd2de0e9002204e0e0854e50fb5eb297d53274cb4e37c25cca8782bc5b74ed7bc0190dd9777bd"
        },
        {
          label: "Loan interest rate",
          path: "loanInterestRate",
          signature: "3045022100c3194f33a59b71f01f5495e90c876fabc2637cd506706c20813aec5a2f97437b02200cb59271ad955ec23c2c3bcdcad8bb073c887b4331628319d0576a6b23fdaaad"
        },
        {
          label: "Load Term",
          path: "loanTerm",
          signature: "3044022029fca7f97f2a6ba63f9b90aa69fed3627d172b653cc92f58cc60fae16095c4d80220717d03ed8b35c29db91c1c7160cc4dc51b3cd78c70bbcf33238b8c78ee6c2bc7"
        },
        {
          label: "Underlying Address",
          path: "underlyingAddress",
          signature: "3045022100ae88653e0cd0a991b3b85b383770b590c8df16768ae90edfdaac379bd1ccbefe02200129a19bbcfabd47a9c660d3521549e05dead453d62527294ca312ac67b14b0c"
        }
      ]
    },
    "1:0x0cec1a9154ff802e7934fc916ed7ca50bde6844e:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "POOL token",
        signature: "3045022100cfb4916219e3694b46154274e51034ec625ca0d6473d6f092e2bade002629c8902204be001bf270bf5c1876e953476289439fc2260ff784c412002a395ea4339858d"
      },
      fields: [
        {
          label: "Delegatee",
          path: "delegatee",
          signature: "304402207860961035527e594b1ff79e81bdb65fa46787448952110edaf251d56f9f286002201b4830a368cc521e1cb73ed22e5ddb4a926d5d2acaf6d509f35c7fde009d223d"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "304402207049e4d2ec11fea46e4f306a65d90a4ee638e8eafdf5bb7e54661275d4899bca0220757516a4ac3098cfdea23e706f84c0c49be17b8bae343bce14cdd9f6c6ff9787"
        },
        {
          label: "Expiry",
          path: "expiry",
          signature: "304402201d635d39c2f3be12d24a7af1e8d7153c95f9c2afbb756c9b9762cfb89cc606d6022006590a2f50273ce004aba41ee48bf35a0ae7ba80e08b0f9b4cce9cc281df60b5"
        }
      ]
    },
    "1:0x1f9840a85d5af5bf1d1762f925bdaddc4201f984:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "UNI token",
        signature: "30450221009599eb72fde2d45adc2e0beadf055d1f5e8f65090e153ddb6fb02a7343c96268022015e9dc0eb7e7d733edae86bfa10fad3ac3ec38c23b3a9ec67fc82f53c6eaf5ba"
      },
      fields: [
        {
          label: "Delegatee",
          path: "delegatee",
          signature: "304402200a22c41784587dfc574c2d12346f16fc5669e3e89d118d021eee3e688c6a3ba10220569497a6447c74db8eac7e7c62ece12b2e604cb5fb0cc7f1ae51a005a9d8c7d9"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "304402203a967682891c28f9a24c824326fd48624b24204ff7438a97968fedf2e67ae38b0220066a33eee179bee5b45cef00de03039db1e80ec0590b30057258464ccf5b4b23"
        },
        {
          label: "Expiry",
          path: "expiry",
          signature: "3045022100fb2f59ec83f2a962b990dac7a4823a619ee3a67b72e29bab86e317d36bdbe665022052c113fd0b7e45cee1a428c838be4d38d7110e3eac1f45064c74b721b8b67974"
        }
      ]
    },
    "1:0x323a76393544d5ecca80cd6ef2a560c6a395b7e3:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e": {
      contractName: {
        label: "ENS Governor",
        signature: "3045022100e965ef559df040f2880366aa603d75e610261946912a663a5b33e17708da817102202b4d6130c5ba34195663877cf1d9679b811acf9048b9ed8625ed5c2ea65db40d"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "30440220644deea26170aa4a8057c70f769d35ab36522ccb0f6f85564450d46c11061c370220687d778df87c7dff5e3ad58a9e36952a9904e6389c41f4f8e8044c679a224847"
        },
        {
          label: "Support",
          path: "support",
          signature: "3045022100c5109877ecea9a94096b612925e090d1aea128609d7ec466ec589daa3dc2f1e702206b7c8eec5e9351539fc164f576ee4ace65b776c051e0efdad21d51e42447dc87"
        }
      ]
    },
    "1:0x408ed6354d4973f66138c91495f2f2fcbd8724c3:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Uniswap Governor",
        signature: "3044022046d278627a7b68020ecda5e20d249bd9d141a404267acb8dec4726f30de5694e022073397f8438fad45b78813a7161eea60dbaaa1b421beea742efc8c07acb63fa63"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "304402205a033bfcd10718388897e99752081c0a4133b3c959b7b75a3568d585041e849a02205e2c1fb537fc0ff8e6b68a636215fbb4741d3df7c8202a83622063c77bc3e587"
        },
        {
          label: "Support",
          path: "support",
          signature: "304402205894cbf601c96ca164ae7e5d0aab17fbbcec4aaa1d032274800d5a46eba8184002204c195d6936a05b162d5bba655f726f08337e23e10bda06b2f0a3f052522bdfbf"
        }
      ]
    },
    "1:0xb3a87172f555ae2a2ab79be60b336d2f7d0187f0:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Hop Governor",
        signature: "3045022100f708c71ae38defcaa58de06c664d79f18651aa3df1ecefeb18012a81897c70a10220587d6e2590ab6dfc6e6a563a2460619cd49d73dbe8bef4ed20b6a50f47068c79"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "30440221008a361a02a91db3ec96eebea92c3228c620d21f8004813e35f3b99872da81816e021f27f972bb44cb1a1fa033be2398c80c6d1b4890f0b81d022ef4bf346d61af25"
        },
        {
          label: "Support",
          path: "support",
          signature: "3044022053b84095ce71d0e6ab15af8d979c46dc47ff6a169a88bdf3eab573892785122c02201c6c9d5570a581e42c1341f36edcbbaa173d701e6b93f424493125cc96e83d18"
        }
      ]
    },
    "1:0xc18360217d8f7ab5e7c516566761ea12ce7f9d72:2c3e6b3e91e39ef9bb3c1b1cd2b4d8da76bf433179c8042962671278": {
      contractName: {
        label: "ENS token",
        signature: "304402205b42ed5c642f2d98115b1ebdc98fcdd63ee259b14b896af1c1e78c8df480141c0220679cf0ef775ea5543f65f2249df9de807b02c17aa507d9e89dedde00b2852320"
      },
      fields: [
        {
          label: "Delegatee",
          path: "delegatee",
          signature: "304402202984c1b8b2c2be40fbb0b197b8666f309d16c10d4a737befcafa5887904462240220177c3d4ea462a56880e46e08ee5f8e8f0eafd87e97d287dee353aa21fb4db8ad"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "3044022009e1668b67786c2258d75f93297be950f3812ae757068c5407915fddea878c5c022066b9ef8571d300abee4d18d4cd0d59a5b2cd18bf78f3db80b6d4183e284e2ad2"
        },
        {
          label: "Expiry",
          path: "expiry",
          signature: "3044022070e6d8b8085472782a55f11ebcf9492ecf3a9eb423b37dc6b79ae17588e7da4402200e610027d5fd12d3b32df3ff7d951afed068bc26fb56e541b97a0622555a46ff"
        }
      ]
    },
    "1:0xc5102fe9359fd9a28f877a67e36b0f050d81a3cc:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "HOP token",
        signature: "3044022072ff099831505d99d7c73d930e720d0a3e28ae8932229289c1f1acc9b92190a9022049d78cce53e621f91cd7a11a1d6ec118b9f0fef6e16059e8f856fdfea8133f3d"
      },
      fields: [
        {
          label: "Delegatee",
          path: "delegatee",
          signature: "30450221008418fa1807d28769b22f0243f9e547905cfdfd66b19dca60eb2f3778149e8d3c022064c06eda3c8cd943486f52c064a91e0078a3be9777143a5b5925506554f20c9e"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "304402201de5084ebad45b344cacfa987c7b7fedcd438898c2cfeaed83921a9f66c78f7b02201bfe268f95c9d75484117d1439b2e968a5c9894a24c7fd751755a5b5c0da78e9"
        },
        {
          label: "Expiry",
          path: "expiry",
          signature: "304402205d3f2a2d51af5696c6b9905cb6f020fb450e24e2e4b4cb7a15fe1a622267fba202207cb11decd982dab1bd3322311a16264e54e00cc365cbd98b490750a324c0c30b"
        }
      ]
    },
    "1:0xdbd27635a534a3d3169ef0498beb56fb9c937489:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Gitcoin Governor",
        signature: "3044022010877c4c71832b3b1e52742ef0702837c162751458cfed684db4f9bf3dd9720f0220650921e5b88bdd0a9626ca7c86eed40c2b3f2e49e024f6cb643a7833367220fb"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "3045022100b608eb5bb848602950e6d1e0bcfc39bb07f465e110c2e6a1dfb0d0423c300bdf022079a4173b66a72e21c0e46e79a5a9a4dfb71af8dcfa181669c7a555733c0f9528"
        },
        {
          label: "Support",
          path: "support",
          signature: "3045022100dfc160c48ba326093acb0a5674d2083c60a3f6db68605e4ddb62b179fd4aada0022070e0d09aac5335705a18abd5e287e8d0ec8ad06e2a8dfd4b24ec2c615407aa69"
        }
      ]
    },
    "1:0xde30da39c46104798bb5aa3fe8b9e0e1f348163f:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "GTK token",
        signature: "304402205df7c1169cecd36740080c772349d6665bde2a640ba4c2abbe1db07d575ccc0f02204e0be7975f8053e091f79019301e4202b97e611c4a2404e24c462afa3df7257c"
      },
      fields: [
        {
          label: "Delegatee",
          path: "delegatee",
          signature: "3045022100c8221f284e448a3c344036f3252eab8fb7e383a25782d38e579cc50e2e996f480220594f34a6c5a86948536be2d0c92315fbe8f812704ce96c405dd223bba18e82f9"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "304402204b28da4752953b61b09ba02640eb88d11f906502088ac8460b1764b820edff1b02204e6c5e6a5dfe32658e17f1365ee7d2344aff54140577a5ef1a3f55631c3af576"
        },
        {
          label: "Expiry",
          path: "expiry",
          signature: "304402200c3083a36deb4ae67a6adba07622cb382846e5f61bbc9a24d2d5d2233546083e0220693029f53ea4d6f862e86c0b6b86df7bdcecf9eefcafe0c33671b300b5d64506"
        }
      ]
    },
    "1:0xed8bdb5895b8b7f9fdb3c087628fd8410e853d48:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Hop Governor",
        signature: "3045022100e09179a98da340acd99714b47febef674162a2114dccd1e39b11b49b4e1609c5022012a31e4db15edec68ccc64b17ee8f5e7e693fc32c721ffa5169a89243f5d5069"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "3044022065b5f880626a3f9ebf117edfbc5f489d4fb80b9cd53674fefa7632d5c8a0911f022018dcac007b98e8b996b21ca3ab478855e040537beca824a146bec1ea51ed751b"
        },
        {
          label: "Support",
          path: "support",
          signature: "3045022100aed88d7b174625aa5b4a84a5054ed0ae28a2a768eded543130ca80e05fd2234d02204343eb88dd232c5317f73d889554728802f4953ce0c2e794107a8a9c604767ca"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3045022100e3c597d13d28a87a88b0239404c668373cf5063362f2a81d09eed4582941dfe802207669aabb504fd5b95b2734057f6b8bbf51f14a69a5f9bdf658a5952cefbf44d3"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100c98bae217208d9ba8e3649163d8ee9ed2f69518b4ab7204dba15eda4b3ff32aa02205f03f9a6fac8ae4eceb6b61703bfd7f27f58a83bf21b2f815aec2ad766ba7009"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100bb9bb0c71678a39ba8ed764a67bae0998b992850b7dd1dfefc2fbb7cf6036b170220041568fbd2f58b4cca4012a48ab3b4ddab54fbbc5280fe854ec92ca92dcd9ded"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022033e5713d9cb9bc375b56a9fb53b736c81ea3c4ac5cfb2d3ca7f8b8f0558fe2430220543ca4fef6d6f725f29e343f167fe9dd582aa856ecb5797259050eb990a1befb"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "304502210094deb9cc390f9a507ace0c3b32a33c1a3388960f673e8f4fe019b203c3c4918902206363885ee3b37fe441b50a47de18ae2a4feddf001454dbb93a3800565cc11fa9"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3044022052d2511ac923e69b1fb7ce984af1b3ac5dbb6a246d0d13eaf48bb742e46f70d0022075cd607e944328fe34cd20b83be1f29c7d17ff69d6bba3767d10784f68963c47"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022059c5ee5b2a73eb5fd8d3559da1d062b7b2487afa8ad7a60e37e61018a03d2bf10220009e228650ddf2355066e14fca9e28cbca3db4f9af69ddd2a446709cdced2660"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100b77d2c9b4fbe4b04408ebec9a479a75260ab290462de557dc9340528c2115c9702201533234e8bca9ce16baf69e67ed69293ba09d003bf515ffeec9ce934784baa83"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402202ef4a78bb3606a008c2183d22fe28b7dd81eddb09d645a6e153377ff5856244c022003fd992a719826e286adc3f6fc7fd1567305a0dbfc1524afb10330099dc986c5"
        },
        {
          label: "Send",
          path: "witness.inputToken",
          signature: "304402204a889814075abb0af60bfa953b82eaab7f8311381465f239f85b20cc16fd25f2022036252fa9bd004876955f22a24203ec8b07ec2099456690a1383aed4692fb2c73"
        },
        {
          label: "Send",
          path: "witness.inputAmount",
          signature: "304402205a7af025781c1f2134b8f936b0a4a33f0f4f818302d0693ab66e3b5f80fa8352022011c5f68f8d4f688a09b611b8a91c70fcafda1443b5bb833a3b1f3af5ff00ac3c"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100d321fe73987030ee4d72468cafe21845fb97b08dbc7a9b14e3421b050a5c4b810220755232e20dd1684e3a70964f838d7cf2ff458020eaef2736ed0febdecc4a4a10"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "304502210097a2271a3d7d20cd585511473d552b8a84c2b6128bbea3118ebfa1efd102f943022077cb0dce5ba07c69dc44795e2e339aee83a88616b80288172916d686664fd827"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022024f5c03f820b9c52aee938ffe7a5dbd882f45f0826307baeb81af8c6aa0ec07a0220464f90ced2bde27dc8c9cf1eea43ed23553213a784a7ad56cfdf9c92e1902846"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022030cac5a085e8b3685909687a9f1cab44717453429b73d4dbdce4a31fdf969883022056b1949c9a730caf1344841a96fe48ca65dc590da427f44dc9af2a29491dc819"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402204571e829b58a2c3d66fdaabb99bcc1b8ecab4941a1f3374a1b29a7c41d5165270220573c71719815aaf0eed481d128cb2a7b77a20de261771149c8b427690a2cd19a"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304302203b64f5975002aeb73db0a392fce0a706bf1a4f7aa062649c685a601e701c5c50021f3631a4a6213f01320ece3576b91b2f244bb127c79f1cb7c1a64eb25a9db377"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "3044022028fbb411aafaa7e1a9e9feef8fdadc5a2cded97931f95657e2ce3e2cc52e42cb022011139d7b8f986ef854c067a531c8f180161ec890a7798c9f6108d0f671bdec96"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "304402201eb248f72afa3820c97f4c7252d59e262942b6515af65b72fbe18db658a37b65022000feb48ebf0387a4db6740f81ba10c63e3dfe76aa956a45abefdcb2f9ff3eb98"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "30450221009969f0557702433262d12ae6d6b390f4534852e24fd47def97ed9e0977187f7d022006265aab295f3aa5fa10a4ed5f9dc806b20e583a9936f6d30cc60ea97ebb65d4"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022010782ddf795c6a3037dd269151a8dff9617291f33b433a41dca3eae5f9eaead1022062444f2d2270f69c0885b6790b26e5fb0035af35213daff30b8d9d34d13ac48d"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022026ad09b7426cb6990ac9814f57f135f9fa34515f4fbbfae23b27973f8acab2c202203f9720e91c8837e04b18431b7bdcd57acc1ccd7b7c62442f0feb791a1dda62eb"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022016b38151bd2469157548fb0b681d6e428a527c88f4b36fb862b7623a6b40dbb702201143008909039c6c393e49a99b6efe002b55485be80e663e15aa39513cd074a6"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100c6fdae9d879d2c20c3b7a66f44b2e60d6e781f0b0da2c21c5ca612b0a34ac3860220282196259c1d0bad4695f77a653ba03704785ad7a4d6007ea3055c5c4084a8d5"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022057f7d23d5af40bf3a603f5651282ea39103133118c71199781d3e5879d8ef09d0220488f1b89303b21e25f6e5f66a0de31bf34ed990ea9ad4003958f555d1f4834a1"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100ecc369027c550864d7e27b14045a83b1fb8bd5f617e91fc7cce67fdbcfe23d0102207807e1041516d9af307285b3693c0455e97694463c7ef465c021b5e123e2f9b2"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022029821cabe9b7b8ad34e577763e3b3b73e1d46d7745f176c0b197d45ca5120a3902203f6e4d8fb46b08b0f29aca1d7a843384f67f9543c0d6463bd506ed68830975cc"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100ed674ee1a345ea8576b953083dc8c75a2366271a12346dbaf1cd64c3131b02c602200403e9026d6939cd15b4c18de15603825540890050b66f88da924d9c57f672f9"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100ec94de446b5595e40cc7800452a5ef8fffcaf9986153d6296960ae6b9c50614e022015d8cd577c84cfbd27aaa35b532fd121b7ffbc3ef7a90af80804a16337d22c05"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402207787a94a07b570758d8ba07f5c41d5a9a1b3eeb0261cba9407dc0df7e6907a8f02206a5802c457a6f4f6a5c9e85ccfd435d79d7e1148112265c1f7767065dbc41f8c"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402204b56e389bcd0d843ac36454d6e698859123624b326f2b4bf95a1f49cbf937df1022064068401dda39780b3617fecbf84eb25ebf07da7c356d7a285963cc98ceadb62"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220760c804178f8c1a084d4af7a91e77efd62eddf8df8c7d0aa2dff467330bb2e50022038f6a01b11e2efb2a4fffc8b9cb6adc8c1514e3cb37e1316a8f26f8d67bc95af"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022070e61333c1124c089407305d8e421506543b630cbea8bf51bb470639e99f788502202ad716dbe7b6bb19c7f13853b0808d98c577b835428e4bd69c076982f7af3f01"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220794c4834a6ae2591cf29b65951d07112bfc4644f2a1d287dcf918f7a890b689b0220259892526b885585d613996d8e5caae98dc25e540f46857ce68009e02d419956"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402204cd2b4a346f9c1e214768075b97b6ed84acae86f45e2296f2fa35515eeb4496202203f9013404c89d3988f98340b7c53feab587a0c85f9aa783159e3c05a2c6e16fe"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402206461309dbca9e52a41982a7e552c82bc4c9af6bfaf86eb80075dc6b1ed29280202203bf174d6746f7a0d9c9cb4a1f3c265505168e77a11d6520fc48b564505913590"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100b0c589164391fec444b7fd850d2a3aaa49ba812dccac35640851a6961e4cfb41022032395cd70225daf677e38ebf61eb360e5ce93cd9389e73ca5c4e7476122a2c18"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100f95d3b874e7ec4c3bb3d9fcc95bd1f174c8d19936f6fa3ec4016d1fe62c11225022037f7ecafa98bc14385354bc8abc93f109e06f88b1ec84998dce6e6d6ef099505"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100f68b77f9abab174444dd6591cb0b9d27cea7f9ab6b505e18845021632cdfe428022077dd13be21f966ffa667b8d183d9b73b2862948ecaf07758e6296c3a91d19c8c"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "30440220758077438cfb447d21774e44b53d90ef4e9c2a9c85583aaae02f2b77f37659280220504e7008c6c729bad72bb8c5d9769a9d913c038cf36bee1309fc56116337b29f"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100a295338f63ca379908708d63cb7d42b09ba81deaa7d9c3547018aaaf25a3d06c0220309fc1107c3e64054c70b34bc18f93829378810884dc7b68497fa7a6fa4924df"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402205b25d1cb7ef6bbb8f6e02879e09117d0b94d527d365574f063dcad1fbd2d31ef0220095b3558bd1950abbdd6b6581a1920327382fe915b2e5a26c471412b670b4560"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d30947f51d252ff81d6df67273324c9beb899a210bcd4938b2afdef01bccd63c02205525e11b1edc17cde2657708c642976223cdebe96a519059e583c3d52e2fe185"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100e8ba89f6fc3ab418ea417ca412d1ca6fa2b0c7e8c025b657ffcacd4eee2a97850220584d307fa34074f281ce25b2ab90316ae555d63159eff4379f4ce4927560279a"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100a18748b2ea36741801fa9d1b8485c86587e44a0e6410e20eca60cde12813864402202dbf6e4f7b0caae43739f89c741412acf2ecf5619ae69bba423214f9ded5ae43"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "304402203a72fe6e5ac3854f4ff92d9e12e96ee64edc2aac39083a8a2f169badbd11996f02205f2d73771db877787b20368e267a258f29a1f90526c45c5326c88e64c924ba72"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100e8e4429d8ac6399463a70723bc8fe6ee781744051dc90cc7a219d7760c8c42c1022068dc3fc2e0931a72cd4aeacfcf05069c490958ffd8e01445d6dbe777912f8a81"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "30450221008f6e5cf2998edb97928157e4ee6f115735048b4443cb81d663c01d122b385d210220556955bea75a72150add3794231b9d2c09f755e7ca24f3b56b274f90b1986945"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022007fb9c8cc0284496623ac2addf6965f0d3590f6c665750ecc70da2e7d10e3781022021754691d2b82526303d862ac93c6bf430c7ed0de4120d6686651569e0d1949e"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100ab60ef76e789c924cd522ff99b48852c9185db44fddf3c4817acae9430ca245502202636c7c9835eaec17e39ef11fc132853a8b2800b48225a06e47b77bde065d6ec"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022063612f2a7eeb596c7cf2342ec096a375b57f199eca9129e25e858049a18d36d9022078780da67893f8cb573a9ae13b06fae73725007ebad1ff8401d5fdb35111d942"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ba696f054c313316a45f7f7dcc32ee194cd540ba7dda0371923330342f639198022045a95216bbe7f6849de1f9dd239148a1200c3ee1f85680ef9c3c5cbc2f0d0cdc"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304502210085d1838d8b2a010fe12da82eafd954d6a630218ef1bc56c9a62f410e1a7b58d0022054105e33e15cc6aa42b6241698e6f5d98453517002a7f478331ee69e42f7eac1"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022021716dd7a5bade40e886760a2ad868e2078bb09f09923b01a7320a0ab9630fe602201e6eb774c26ab374c09b4dfb03693d8dfd1fed7ffcb940e208df8271bed10c20"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402203af2c86db8d55c4ad7acb531260a73e526c451c7860cbc8874ebf7754cbc50df022072bedc43dbef6be5354ce6f907536a015431782e5c655200c57861125a6688c0"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100f62eed388a9debe6cc702e1ab70e1ac67b6a2625c037cec296d5ada7c6afb7d902205c0e40b074f4abbbe5a18d79eea412564bf80d934410bbc88932321e04a61720"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402207fa6c9184be3a43376dab2dbbea9a4d9bf122204d36952a674f12f2d706c055f02203782f7ac3835e2b27d79ffa86bd9d9fcc74527cd336356f690e3ec6e1f7a41cc"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100db97a1fa941cdc11f36e3c4f52a38a1d1356b05ad54d760f6ec9a6b0d7e1333302207c5a3082ab5efe025b53156bfe331284472f846d6bdf6bef266ffdd8c09fd2e2"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e2ba5f96a043ae4aac90cedf218743089bb91561050987cc58caba9698a439ab022073a4165b051af7b5c554dbb179a66a2bf51fca69b7f08dc59797d1a49c4ba0c6"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e77c1f64268d6b8a30bb1f5696611f3007f59b486c9b33e3286a50a65248286b0220299a17c19f9447ed361fafd01605600fe9653f63ca7f16288342d4ab85f22304"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "30440220086d1e2bcccc09cef4281b7768b18ef06e90c10f70137b8f8bc4aa3b87705abc022001cff702dd8732f6efd68c24b4f75d6f51a6070064aafb3ae3e497dcdedce5a6"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304502210082d054fe78c4a8c696b8a3304a3f77fefa498c0e28d8dc3ae07dc32917b1bc27022072dd8a83defe29060404e216cce22c0df554962b41d643ff5348134ce6e66811"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100ba4e0d3801ee7d6f0c31739f6d91f0f3203eb1e046477e74655ea7ff0f9b051f0220205683255968f7c18137492044006d6df6deca76656b20d05d611681140bb213"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100f4b6a6fd84f9f6f9c3add959a5855f58e294b39dfc6e0acbe218a5f35f67583902202f1564d9175e125fd0ec139ba00222a896c5035670e8be472e6617b5bd138c61"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3044022034649ae7b3482e7eeb42546093598f79fa1043e23d73f88df5c9d51626a8b75702207d811ba7a3f823e9f07f1e0acf15936cb7e34b69d77bb2e70fbc9e71f8afa436"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100a1318c352c41498114a8e280f112a75a4b0193e4abba43047eb821a42939a4cf02202eacc071910fc9b37f5559f9f5520cf828e8a39e68c467a9e0e5a7a98e528931"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022045d7133d3f02e471bb17dba73dcfc0e474f9d35f489f41743d5922cfbfa1d8190220261ebfa97d11ecd8a712a4d027ec8602cb3fec902219eb02d15a978d38c60bd3"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100a79b22e04c565e1772cab5838f0d43ec4fe780b0ece6e3b8179acd226ea23d0f02205dd2aa9bb775a54fb1369691f520f02364213a4b83f6a11b74a570feb6e52e8f"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402207b233cee21d578b71199b88abd481759f9432aaa4e8bff82b95571662810ede402201f80c06b23b4188e5d14a78a27f95a659ab52c58c3571d7b74321c2e579fa09b"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100ae449947ad952a7908053311f335b11dae3175974a8ef28400343b0e9df34d3b022063849be2d8d4cfb342d602b7078d8681bbda16e430bcd04ee531a85c39ea3186"
        }
      ]
    },
    "250:0x6626c47c00f1d87902fc13eecfac3ed06d5e8d8a:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Wootrade Network transfers",
        signature: "30450221008cc1354ce071cf6fca73c04ac748e19c8f38059890ca8edd24997fc8eee0d421022075a65c4313296d58b394db560977203f92c4d3257a446b883707857baa701ce0"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3044022009821ff0b77c78535056f438d07921ce0dbd7fec6803d5d03ee4b01734353f7702207f8217ca8b546664e16641b1ecd2938ce7c13b2479bedd177cbac01ea726ac35"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100e05871b3c8ea11e281cf51c4a92cfd3d011895d267fe45ad5bae990eb4f6eba902201a3ec731f73bb832b0f4f6a2064736b7665f962b79e78f8f418455653361ead6"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100c0074e8a8faeaa4ee5246c4e33205c4348b1ed41bb66b1c3e065672c26e3c0850220596bad33f89492ae4117691bb70ea3ad71feb75ad363f207a8cd258b0e013eda"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402200164c57cf66a929ff53553cecb1ec863027cc1a3527ea5dee45d6b5d8a6c05fb02203baaa316de65ca96652427ba82f74b3d91412e46f7febfd12a21cbc34e0bd04b"
        }
      ]
    },
    "250:0xfb98b335551a418cd0737375a2ea0ded62ea213b:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit miMATIC transfers",
        signature: "30440220474c475b4d9801f530cec16033b33931942e10e0e6545815887a57ca063a658d02200c5d6424af0cdf3ac6d955306012e3d993d92e0d46ab82a3a20826ab8124a701"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3045022100d39fb35bcfa51b98602bf4a9c22488fda16b71b5bf65ab813d40c8b0c88be6ee0220034fd5b163764ca381a1380893acb6f20dbda5bcaf39577089ca2ed13df6ea32"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022011499af7bcdcde93c2b01cf992ac4e9b4b27eab58c19880e9ecccdb7ad4783b802207a2577e336ce3bc7f88644a88e7cee2488607f923b36deb2ad3bc23dadc110c8"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "304502210086cce3cdf178ae4ba2182822914610eacee96665af8fc87b4588c5067672483402201b5b1080b0a13ccb2a1c0f10cac2992b86504a27e744896a4092bc1ff3a83b07"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220179cabc0034bb1343aa8bb04878517ad2d5468194a9994f40ddfbf57ee7afbdf022039fd330441e62543094b2756b8b87912b09fb8ac4fe751864f0508a498507a49"
        }
      ]
    },
    "10:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "304402206cedf6d4feb10bd266dcdedb134bfe41bc915a7523af8afea57577115bf6e00e022053d8d852c11d3cd7ac72f8628dbd81176d7d3f3b94022890db40f2bdc623c33e"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100f73875d13abd7e873e8efb7286e4a6f03d587b62378e4bc9b99f0ab7cf12c61502201f0f83bfe5d3ec2074bab7090869adeb28a4b8ca1708edeaca2ee86917fd1e7c"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "30440220589746ecc3b02348741b7b4ebe46c0b7b3464a2628a18b47b965f10030b80a7202200c8ff1f1946d47d0a2401c1e73c589f99e4b2cadb312abea268ab27da6127c09"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "304402201a3dc636e6f77dee381997bf763765a3db4be417d74ae6d3cd92e58b638b2629022075ce2812d5baec45f9b638279a62a290dfc2e9c70e0f07d56d45051f38728d45"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30440220464b8c5a50346b52bda483c96da5413aa030d1c4421fa12d800637ac8674f99a02206f9050b5b8890618062e44a80c1adb61b1b9eb4704c7598193d8902fe85d7bad"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "30440220279a07578078a32d44b8d72eed74cdbf1f36703f1dbecb12253650aa85409bb602200d5f18bed1334b0eb21bc9240a70f48b719d428ef3cface7b8af06830dda5de1"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304402201b262b0175a6f4f614087f27f3470a4864063109f98ff378252e6b3e24c10cc8022032864a549b280ee714e5cdda0c82ed3be1b543f80dfc3482d7ea6f935e4e97b7"
        }
      ]
    },
    "10:0x11431a89893025d2a48dca4eddc396f8c8117187:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "304402201f04375e9e11c524b30bb0ee376da39b8a3154554c23596381f475fde0d98ecc022003b62ea220df2d9f142f7ed1833027e62c3ae792daf763977ab552f9a897b7e6"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "304402201e7b6591a30d29b73962b253c14ef29237776c7c31c45e628fc0c0c337bd2d85022038742407431502920c210039681c983fd5136c66f7441e60d33e1323a401b672"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3045022100ce131085c5b7c48609feedf3f53fc58f80623050da851eb07f69cc1c518b21c002204e94f1b0ffc08044776ba684346d2ed0ca3381294eb309c51c4a89c2bfeb34a1"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3045022100dae19e5048d68af80b795c9c8d7dcaae40cb1129d9f1208e8a544c3409ba318202201b3f1202d90c014eeef5f5a72bdfad5dd048bd5a045cf59a2c8f3b782fefc38f"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100ad118c6998aae25ffeb497a3bbcbe587b17d8c3340b45b88e8f57439da96f89f02202d91da60ded4ab977eb3d8c4c8ad4daff6a8eb972c61dc5a549e77a1be692c9b"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022047fc8ebbd31ced62a7ccee4a82a9dce13cecd9a8d95e547fd8fe2deba8a51be202206b4a3d28348b799125bf7329aa7863e2e16404af18dcee02fb882abd51079ff8"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3045022100b100b3d1f922e40319ad9025bce6c60f4393e7651dc3ad3e631e7f53a818b57f022023a50bf850381f9c21bf28b2364b8c8c1e18e90a7cee46a493b46d493796b06a"
        }
      ]
    },
    "10:0x11431a89893025d2a48dca4eddc396f8c8117187:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "304402204313086063aacc52b9ae3b3ea026e0bb927634dde0d381a1b679789ce5341aa4022000bad10cd082f96999c05eabda4fc3fc3348c8b8a3ff3960078654f26c4fd28a"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3044022059b5e764e094ebc42cd2acb05a5e6cb86d034cb245e7f3f41c39cc01e33fb0fb02204e0b4899a3685ab3b0e8e47378d3ddeee18f0fe6ea614eb43bfd8288a884b0b0"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "30450221009ab45ae04b528bd0571356e6b7fae6d82cda10a66b8d358b907ccc335a140a400220503ee824016fe32e5fbfceb80c37c93da03139721931e5aee2fdcb0f423cd9b4"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3045022100ec81b8819b69107962d71efec8dd11d4c3f64d9cb7f35c151d6bec3abfa7ac60022063096fce59785822f99a8beb9c1c0c7974d859379720557c725391b3e5f6c74b"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100fb376ff6e22bb4bafc500c7183d2537f54e59e881e73888b273473c22470a0d10220081e92b88d5873229b0adc186c892e8103a83789c50d1c2c6f9c9b9122458307"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100cd7e4468fb1350ed6d6b8c7c91c61cd933aa7bf3df8dcf48226d49685e4d2efe022056f4bf6218b95b707ea26af1795b614f58c80c958e1c62e4d4bf83663b55a0ca"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3044022026d8378c54aad02a863f9ed4ce8eaf92c62027e9353d47dd11b34ac06f0e27930220374c5f31be01e8a68a71ffb0f61537912f7f1c3f9e117c8b3a2935b6b3f92d2c"
        }
      ]
    },
    "10:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3045022100d4bcbf1df97f94d85402caee1799badf5fd6dfd9926981c389436d306dbda5c2022019ad7fe4ca5b2c8e63fd51bf70437b786e0b1cc2c0f3070e3cfdf70e75d6bbdf"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3044022009e356dfa8f01c37d5fbcb2ba06e72a2a0ffeb3251055f3c686a0244401aa7e702207e65bafdb36f491931261c08fd583f329c2ea903de28327bfb069e1fe7ab5471"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3044022025dfd47b46b43125781d1e4b63161eea0eeeaef93af87e95162b2601516cdbe5022060156847137356e6ff66ef5a5d72ce232ffac323be43e71cd2ccc410b55ec047"
        },
        {
          label: "Maker asset address",
          path: "makerAsset",
          signature: "3045022100e2ffc41ce9f722d7381689bd9ca2d0bd4598fdd543e7529d7f0bf2ae28abb3da02206a43996780b13ff0fbf346d7cd5520c759abf58461c42b7bea51d5b6032eb946"
        },
        {
          label: "Taker asset address",
          path: "takerAsset",
          signature: "304502210080af3a8d3c3e683a503975519535ee054af035a7ba136f2e981b01d7c6dc518b022012ca47f1301c7c439180c29e13bae36cacc03bb1c1b9ba8a505b9d035660aa79"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "304402203600b6973b833d904521bde12b73f52a1f1eb71b45a0174e1e579b33db55d55e02201daac27bb0e1d278dd34fac1be2205f38888c829fba922f7e3f48347e0a98b1a"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "3045022100e6937b6f434efccde4c4ddb2fa2c577fb9f4fba61bf2fdda3bb27b0b49e7274102205fb3e281767d845b230633092cd17e6b5ab928e341a588d79055602cf3aa29fb"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402201c1cb8f2cc362d6f10998948ee009df1912550cb4cf059d00447adf321a97f9e022051f2d887cd8a6a6ac26ab2afe8016eaa5a130661da74f7e482940278423b98fb"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402206b842fc4910a1bdc77ebc9b2523d7b1ead75f9d187c42a80ac87e980112020d702202b4c2b9cb8ce85712afe63a71cb542c5e5d3fdcbe33b9ae746fcfac13fca18aa"
        }
      ]
    },
    "10:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "3045022100c66935874c1f07e7ebf05ea2774b4ef970aa431001c655f0d6341e0c4d142af602207083981aa538efdedaf13bae8e04ecf0bf2bf1fb03843bebd8ddd44c4048aa81"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "30450221009a560c4f10e3b3d91d78d08b69cd2c8bcc48abb9d5a6da1bca1aa5a843d5e82302203cb5df5d1676286617dd169942b42530a422328a358e8b143f62c4c024547e16"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100ad531d0297f9561bb4077cda4896e1506104fdbefc05d1cfe360cd0e4810a98b022013ecd430ad3773ceca05ccd82794272768be0ceb3f1d30e12d331a73d1e9080a"
        },
        {
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100cb9280d868175b9645dd9417790419343e5cfbb481bad8e2d3c826d9b301b261022058010b98a71b91a75804672dd67361ee4f96dd7f5cb938f00e355a3aabcd8f9d"
        },
        {
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "304402200a7e0a5503d87ca2489dc26cfabbd0fea9b2e2aefec9c6bf4e18fe837c7a6ba00220273c59c30647aa17d4cddfd85c3d360e8659818d05382b3e288b696cf518ae29"
        },
        {
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "3045022100ce510ba8811ddada61a9695cb85ed202ff9af125f07f2f7995ebf1d1bb33798002204bbb2bee209860fd01a72df16c07e4903164cc2a3c535561437d63970b1ef8d4"
        },
        {
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "3045022100eb69ad54131f20195cfb2c304804405974123c2eed471c3fb6b3476ee33a904d02206c17f1c4ef4eed0df5c733331579004e3828287c5d22f19b43fd26d09600132d"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "304402207e358ef75ba3cbe3998df005e03ad4a8c2bdbdfaf9777d737242d1c63f5247f502201c2e916ef67cb4452d1b226faf1a4e38230a052865aeef6437e0a287441d0ad9"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "304502210081d61e89adc9bdf731e843903c80d4a42236c4fefa4782b912068d3ff12dfd7d02206c2c7569eb61cbdc7b842cd9a8c173cc7d90ad3be3537dab8373da4422adc2fa"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402205117307916d734323402185a37f2880822dc7cf386903688e57a4904a17891f502200e1061ce50bd198ef722159530c48217b93e2093afd48c1a0fa30aaeaf488ba0"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "30440220740a659e7855befa06833ccbd0aa48acfcacdef7c6a1035fbf30263a19576b5802200c46e51e89f469a121a31de0bd32e1ca9f3910413950415548e13d4c7c2a65d3"
        }
      ]
    },
    "10:0x4200000000000000000000000000000000000042:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Optimism transfers",
        signature: "304502210097b5f9c605c8649a848deefb70692f9df06dae6be89281311c03eaecc6749993022077d04b2d8bd22116067e5751a36b2b5bda5893dc05c701acadbb0a94bf98a3d3"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3044022068b87a8aafe0ac8591976c69c4e2dfb8ceb78723c8a01ca31893e91c4ee194c30220204c2cb5a401bb34b81a2794db238e522c67e5c9cc4b40a6c5a20a8ea05a7d59"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402204bd9534236d84bc4c066e9361ac77527236cd070fa55dff80156394a3cad0b6102203a1db664de0ff29ae87d1dbecef5162df0e85b84b5e7188f892d974849855063"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "304402201d24bc3916c564959d8db3e03012f5665110b4bd916bb1012e1f9f572597da8a0220260d5de23a970565b0c5afc485a1ae4d0d9a55d21926d8be300c1cd0f7794110"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402202ef609ebdcea759f3c8d6a0586ef1e71e25297baa8dd382c70ee17bf77339e5102207afe0311ec11e87440290734870b294265def0fab7e4b764d0c13fbbd32ddef4"
        }
      ]
    },
    "10:0xb0b195aefa3650a6908f15cdac7d92f8a5791b0b:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit BOB transfers",
        signature: "3045022100ff23c421cf1e8bcf786a1a7812951b1086ea8e76bc6509415279460f03cd1d260220759b1f0e1d701c8778fd1a856b1c956e389ee2e70b8e5e0a57b56bfec1d31702"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3045022100921dc162a5bb3196f691a111df75007b16081bd9646baca74dcc70d16e7cb45d02203b6a2cb04c443a0740992b621cd69a6ad8760ec6e41cf433d34bc3abf481d76a"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100fa0c6662d99d0cc3436d88a9b20e5241e77432a58c1e2dd57de70b4615ac10d2022069c75349a829594ba80774c553d5467f6c911c29e3590552c54cf8514e64581d"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100adfedcade1a854ff121aa5b7097c24dcac624f8ebfcdeae8727ca0b665b096620220053c185999214775db9f9b5a72b22b3c994530b98907ca9f94964ce797ffd696"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402202d943c7e03d2413e3114d185ad144f90ef754104b907c647de088544ec7a3347022016996136356a8483b3d0045a9c4ada3aff66c904ab113484794583b6d99d5dee"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "30440220089be7e339efb6b42b8e12dae2aa08f3d510d7a38b52e8d91c4f29053be1d28d0220766f9f63ee8e184a757c926b98e1121b04d34f276ea4d1cffd95d923290b24f3"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "30440220454fe102d49e4f419ce0fdce0d6dcdac0217d6312ef8596d6836c1e0b0d0d2b502207e03426f84eecf21938023e5c6cef0ced72e8a968cab0db1fce7dc6b2cd2056f"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3044022029e81765df506b964b5b858efc45bf8c475ef920396d6d8ead5ff6b0acdaed1a0220756d6ae8fb545869a7a4af6dedd9ef448535a8677c7c928e97e78c9c7f5404d4"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ce732c41e83e74cd48b2491e3a2bd1be2b0f090d8a41ff546d252f86b2bd89510220280153a526dac2f1f6e0abf8871e826a3d0a9a1490bf55559f9ad0d4cfc7a9c0"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "30450221009c37789c76b1524a3a507532caf4cbbc2130ee4512ac2ba4447afd52593394a002206dc0edca1946405a4b7e28239b5e3d11a42e71004003882c64c72394d116a4a5"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100f607f91959ba77569e1bbc520fd61ebd0cf2c6b0b4bfa449c45e86ac49f048e602200a1f105838d380ef60f765dcb0d3bcfd2eb9af8dee82994a942bf804eb5c144c"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402203ae7648a1fcc87edd672587dcd9c4222aef9b119eb5573945982eb4763c9c110022072d0a4d1e23db36c3b4852bc61b8500e0a9b4a58d56ed6b71d8491e154e1773d"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "304402201b7f2c276feb67d6fc687c04e1d546cd1d3f5c68932e11f094eeea12b7ed90e0022048eebb2d00568a29c93fe3401a43c1b33ff0a6652ace6b9a69c94231e0b1dcc1"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "30450221008c461fb3355c78482d37f2f8176743e10b11eb4955b9825ccd5fb013711db35802207c9ead1f31f276e25510567f44b590265a7be85a2431ba029bde6f85031cc2ff"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022064e76b541255e6dabbdec711e1bbd7393c75f4a8441550cb1416fb2f994633f8022073c96adf8a03c62d1425569b395b65f2d520861e617ace808a1bba54fbd34dc5"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30450221008059602cd190351f330a268264e0c6bf02c43d329fb3ed98a9e812c74b045a2d02205c69e72c2bca12c4aad97b157b1665f0f098f8ba3694b38debc3b491d0f9c116"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022053bc0c1caba1f2a589ced91e416486419aa499e625d8fb4256675a3216bec772022057698f1ed49eb612601479aaa33ab77b635ab38dcce54f8d354e46f08a36a566"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100f1748b0339fccd0dc2e7780d701816b551b92c01c9a582387c9c5f19310c4d48022070a3ab6e0d49b285ca87f58ccb4eeccc979389382ffd6390e0d0398771cd3cff"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100cd701a6cf3d4150d9ac6efd79e72f790772433dbde62cf4b537b5ae2c51e0d44022009372e93db760ff9d6fe88c9a912d1e1595fe0fa85aa53ef759e13ccf95ca87f"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022044d818ed8b91d7b30d213c4b3276bd95e748c773d3da675105600671870554c302207a68b143eb9e3a5a692e5c68196190c270aa1fd36a36626064394ef6e6df1d72"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402203e43ecd4ec2084760949aa56b7fafc59c251a4167d23282c143fb656e336ffca0220470c45ce3711bf8de3be65c5dd969cbf3cfb48ac9ccca4570c08dfe331839326"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ee88e0e7b6a5d06bf2a5cbd4e20e18a7ab32b6a6992855922666fd09b0f7f52a022058ce3cef7ed4d460011cdae06235e6ec5b0198f73488ec079618fecfe96f6820"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100d9116245b4b4bb7872223aeaea356c6b9d632c6ef21b43dbb4558572f7d3f18e02202149a5174d8097814dcbc1222ffee9154ad25e20fbe54ff44f5dd9ce2fae72c0"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100dd95bbf100f7ec9d490ea5a5cd486df677e675de52c818e719c74a7c1416eb370220313f717fcb8391eae721667a34ab836ffd1d4704ae86aad8af3edf8c4ea34df7"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402205b4e7dc13e181b49d251713005eae2894a2e47ca2585cef99f69ba08ab850e4d02200adf0b812c7cc6aee7b7ef4a0ce612b7088a01aecad8beeeab1b15b3ec2895e7"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "304402205210aa4fc81cfea7eca2b21c2d6945e1a6debed43eddc8347cabbbf49282d09e02200eae68ff8f13bef2bd6d6ef0b96b690dafdafa76409df4baf8c5f277230ecf42"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100d9ebaacf12930a25b5d71a83f4961e6be38a92fdc195c80d1f387a65620a9e48022034528f3903c1750d88f3072a7f370251edc0afae2e3dec64104ab48b8c4c9e05"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402207bc1311206829d507968b3e84dd0dee4ab691d421af49140529529dcb100398c02204dbc969c87e22b6c49d0a4e380a39d4bc0fb38cbfc6d7c1dc7d3e99b205d5770"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402205fa34253eacaa7d0dedc81c750bb6ad845b3963ce55c69284a83e615e9b11451022048df383dbf5d2eeec025da0cdb2bec2f85a3aa71eb6c0304fb04febdc38aa97e"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304502210097a560ab7165c6f75baa71d48ef2d8aef011d62bcf40804c32c67ef0a0a9dcc10220510694b7e1403c1d401a5c25f02665935f3d65d67e01def0777a3d7b1523ad87"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100cb246a5f272fabec7b7d66d24b5a0daa0965a3eeab2fbb34876d50a88723400e0220561a0b4b024e52b8f385eb06fe5e1b3d473532724e57ce9866d22816c519d422"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220057cc51cbcb260461c1142343632ae7b3e0e1203f6e6b2ff65d2db026a05fabb022073aa96aebbc3809efc58222cb3f9699e06d04a593ba971764d8680b4dc02323f"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100dcc452ff04ae777b59477673da3213e68d439f98b514a15826825f1860a5599f02200c6e20a143891f3be65c5c57968c27424be4d612c449ceffb6f0d2271fc64f6c"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "304402206681e14fc01ee3967694130f0c21e809bf96d0e48e6ca250640de0b9a58c69a20220241da7144605af656d24aedcdea5a120d3f290ee3a2762023403423f396dfec6"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402200c5b47cb8ce9433c050697b8d897d367e0fe20e9a1cb8e0f0d7630a9740c52fd022029104817d218b4a76c4e9800b615a15b4a703707ebd187a047f8ad35b2450457"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402202184fb17a734bbb560979b46759083ae6c7c00ed62aa6ef70976d4a7792942a302200c1b0aac85894fdedf5174d71e0b64be0ad288cdb4d9f9c5d8b1e1cc8980c718"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402205d4f3c21a2ee2533a1738bfa13f5dbfdfea54cb74bec14963f3b98b1a081b39402207e4e6670289f83a4c9c7a34ab7e3ac8c3cfdb3e5a2064194a5591d1f0b378e8f"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402202843f21aae62bba18af01ec031ef1d4a7ec4187d3c111933913bbdbdac36a9a402202ca64ad80ec886752955ab7d8b05f5ae1b8927577da52eeee9ded32133901fa3"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100cd8897444bd4e942309a88278bd980bf04c28ef47d3d5084b09a1239db0d1747022046f871ef50a4b70c350dc07362838df1c82c6900b474b045d2b773e7111c7e99"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220316c2659d1f5da38cd36785a35569e5df3a8a4e37a9c06b36f93e52136e42c6902207f17d8f47c4bad7961ee6e60dbd1320af95151f263e1a1a20ac6f74df994e328"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "30450221009bbfbee758402c58c94964a1c05b0025619dbcbba2cbc3f1804194074086932802205cba2cecbad6e4a1e742d8f97a15a9aa267e331d9bca94a3a3a3fee833df5d46"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3043022070dd8a0435348956f95f5cd0a781acf4d69559963e9bd44c45854d94222ce30c021f74ae458bcc17b1a48a7466f3e042a122d0f6b1afd0b0668c736f6ebedc4450"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "30440220641ef248bfaf1195445c4d9a0cddd59ece024080e8a85a4a0193517a5ea06007022013b554c0b9b509040c82815906d4db4a484ea91146eb552ff1a9d20d3b31b955"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022070de1aed086e82cd1074c672da6f345cde3f38b0bc3bb589b79283add3a39f6d02207e19e2e44d856616d47c32f378bc6b53e2115ec183747cd1832a829faefa44fd"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100b9a26cf1367296f188198aa97f39940826205e4a2dee9022325a46476733851a022055e1d8daf451a4d3d165494bd0b9753deaa1545445dfc0c42157586848dbc7cb"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "30440220722143608b4d0dacc5ae754eb195202ad6f0a6206cb93eb0b474148c05bfa76902204df25ed00be2c86433cd13313635e8859e7225227fd8d1daa6afce6b57cb01a1"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022018ab2bd85743520bac0f1a12ae2e507dc5213a5dae15ab9d4cb96abd75a10c7d02206b111247d5ca66460b80458037dfb1cf94dc419aeb0c893afc111b3e7dcc9f73"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100c63cf7120324a01891c7b325c7d81c896a811a59c23bfdd1a88ff6e5f914006402200fd5150da538848662d981104141323c61ae6bb69c776bb8b22e9f73307535ce"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100f6d209689d5d1c2d89a25a856ea655c9c7da60a4281df90f3a64a637e58c62560220061a14420473ee9a501d2410b171df7a3dd8bb40e8fa521ab869dc02d6fe4548"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100c57228a0612a39650312cc19f68f0f8cf7b0212e4ee9b26b4968afa7e66737e90220627b20500da23f69a0d30f42fe2c833ccd7f666262b843bb7b3debb3105a49e1"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3044022063ca9c030a0fabcd188c8060697724c6d37a2daf696e6b1e874429f524f78a3b022046af7cfa2d3d631538fdb107b722466c49fe81e4e9c99d1e58e9bdaeaa44e4bb"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220394e133ce4dbedd8dc671de0efdebf6879db547b75edbdc9f99a3e2a48da803902207721d57f8afac58a41dc46d5a0508cd8de5aaa6abb8911e00895b6838d620420"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "304402204c003890b5df1bb86519ec0a035921b850d50c1b28be2fe6888eec813dd95b8c02205a9915ffd8706ee9ad1dad003b025e5500ebb513b96d3b263805d5c00ee10778"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220206fe6edb38f47699a313c39d450d3e1734dee42f1e80d3bde46b4a328e2842802207dc1b99a14403d2820e4b49a50d74d12d5002c24938c87d9e818579398c3d7d1"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022036cfaea3784982325867c1911653346d8a410c220ff81e839ecab24d8f6b949402204a3e52d96cd31a7a44c673670bc48a8fa788fb049c31d8a2013b495347c4303e"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402200eae2991ae611a1943fe8abfe04cb2e3e04330628fefc2824cabc48348a72c0c0220174bc06c3d0e197027eb8a760ad9aca3f0df8f77ab910a09ef8390c49b98c2be"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402205fa727d29151c9830043b6512c61159c1ea8ea8fd44b87c0596b5bdafde82243022017d97ef8e14639e37fe3b613b70504aa43a05c41c8cd5b03229e55036610ecb9"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "30440220014302e1492ce418819bb60ba7da423176c6c462fdbc3556280dfb39d56ff75c022017eff4dc5f05ca2a050bdfc76cacea4339576c9df2ecd188034c9813a3b74984"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100f399baf0da8a4059b20d8edade9dca402efd43b3a2c9593b8a247e14d8b29a550220695480181db8b4f087c18005c1c9a4843ff1070d208d4779cc62ca72f4e860a1"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022009a8f1da3ded0fdd317f39850c5f2e1418b01dc9c341b6fe01cdb79ef5e82aca0220108517c15e79334d2099b8cab033e339f8388c9f721e4301a966a6b1d9543f75"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "304402200701ea4a00b26d7b1baba23f0c572e5d2812faefb095163c2020cdcd07b299e102205292602812713e325b8878b10929cddb6cd2280700d4330bb9c19a2e4c8d57cd"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100ba06a297e0758ca99a5278e6fc854cd6684183501421de6db85c9b9d7d43fd5202203caadad0392f98b8cd4749ad2e7b47d0a8a25581374109cf33ae4a78c74facfe"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100ed72ddc67dd730a9c06f128b1ea5073a6d78a6c4f4f76ef6e140c5298cbc11d4022037bbd5706a289e0f540c48ebb48bb1dc6037eed5696a65297fff2c0f38813872"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402206357c271bb041a30604462b90dc60ada77d030eeae1fc29a80c4ab02c2644b3b0220514f5ee06a02abfb743eb98f583b679255570908b8193759bde14d39930f944c"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220164ba29159ea4ed916dc85ec92319a7974e0c3a79cef48c7abe2c1d42a4708b102205ed2516c60f680371aba2a2525d1edf9155cfa31de59988c3fe34780963cf2f1"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402201c8f5b0c36fb939b541b89ce363184880e729a9458421f09474acbe3ddca80af0220418c39c98965751cb693b0f0f85397b824bfaf13552f6f3404d994551a73a1df"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b9c663e4d3a395b429e0a08d4f72f6667ac0a347a30aec6e190ce92665dddde902203ea26aeb292dcf2f4bc8004d02c125182d5fd2692085e40addbc43c90184f4aa"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "304402204e0c6642b71c97d91bdc843a13663329afcbf9df61c1710c51f0df1e631ca3bd022045a5d5e1f806e5cb69c04713cf70f9cbe8b8a468f1314684f09c9a8166d8bd69"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3044022024226bf9f1ac2d346b3463b2096686f9fdf09c97c3de2d4665d8b470d46aaafd02207d8832c58b6acaca0ad1a32a250df01a1847402432363803afee80fbd5130d55"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3044022001abdbd0f9d840767a41b6fae15e13e17064320c90f652f68064422370364cf90220700c02b7a534288c49cfc36815543fd75dcd10c23f6493f0a00bf4da9d7cae56"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3044022056d1d0491ee91c4ec0d43ec210e3cbce8431ba743218a0fadf89a538144daca502203787744cfdf00c4e556d7e1f5cad46562b68669e01851721f1c21b8a07c553bf"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402203ee1f20cafedfcb944ea8c2e0bc7556a718c03929b7d94cf4ecca22d765994b1022079f358095f150c5e4d59ddb036c34e3ab4557561bbe64ab40c6b91567aac9b00"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304502210097f76005925a78c18ecc5df1bfd730963a1988e67009e319a4348afe768986df02206e1b4e5c75b65bbd06ce70fb50d4a54b3bf6af3db8ecf2f29fc8f0b5b538ceb7"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100c975df466b0ca53d729c8631d162b42a65119e0a26a116b2f72fb4e800b282a602202a964d338ad50adc7b66d9a263cc19c8fe662381c029783b622bf081629a9f23"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220565a884d5cba616f4fdf38e1d69f3a9aa226527e1348f230498b971339445011022010f97ace3640a56ada9ace2f48320acd26cfcd40530e9dd850090e225bcb2596"
        }
      ]
    },
    "137:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "30440220295e0aeb17ca0929b2a94c324d67d0b5528aba268177f3ac297b563141e0002702203ac360d9fd0c9c0c12279d1e73bea5d549a1e8141f454d88fbe1e8ef970e6802"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100b820e4dfb1a0cde6dc97d9a34eebb1a4eef0b226262e6788118ab3c7fb79fe3502202d426a388b4c3a8096b3f84412a702ea537770e61ee0727ec1b710c1da520c44"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "304402201500b44b1eb5b016ebe5bd7d5cc74b011544b357411a608c3a9f14f259ccfd1c0220617cdeaf7b72edc69aa4ce33828b2ae1bf9d80f62af064ed206d348de5ce67dc"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3045022100b1df6581805f596ed6ead231bad279f2f512ed1fffdc2ff082c381b63b5eeb7a02201363fe8f5b9904f338bc1e7d2dc9adece3d33c224c68f2fd669dd943ccd32080"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "304402203329dae6e283d1b00829fd0fdbd4f753ebdf2bd911183af250bacc80341dd3d302205de19c3a200b3e49597a9f02664a262827a64e28d8f24b37808c7c78f727588b"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022019d6a6cd953447adf2cb0202ecfb0282d3d4bee6aec4c1a2a14e1e8a1e7f732b02201dd3a8b47cda33159a331335c5ac1136e36b5d8e4b29edd99f65cdaf5f5e0c4a"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304402205c5b1740d2e74513a9332e3160ebfe5996186c68141055a95d733d51eb51dff402201a1e085dcd9487bdabe9e04426cd8b043c5bf158843fed944affdeef0768ad43"
        }
      ]
    },
    "137:0x94bc2a1c732bcad7343b25af48385fe76e08734f:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "304402201b1d17eea87fdbb8e54353a452304fd67862441df16d610f532ab06ebaa5ecf802205a18cdb6cb6b6825670f04aa7aa2ebeb26436922898f4d25f8ad4a947417cc00"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100e1a47b49e860b2be7f7325e5b5c00607e883ee4d167cbd85e5a85ab8e41b1a2602203f2a7442cbb889624d51e4e33bc1b2a4f11aabf495d0dd40fc903148432d9bcc"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3045022100970dc43ad05e879b50f1ccacbf35eb545e208a63be32ffbb670e01f7f051416d022075a7cbed6ac5234f51ee73949ad9d3d01803fdd9cbafe7f3d9954255f8d81b16"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "304402202a7459ec0706b2db1bce92953e8bfac39eac0670987c712f964ebdcf2aa6cc1b0220387eef7cfbe5457a46b34f222e760c3cb8d65b00b42fadfd28eb923db53c0b11"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100f192c16fe51b725eb7dab77c47bb36868eea3a7dff92439e1b05e31c059e5c1902203f14e30626547300c39ed83a2a854f5bb334be36af7aa8402c153716e4989d5c"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402200ad790ac99c964ee63527c153c188a87bb3bfc5306d0baf838f8e4cde2cf6b0a02204260214abaadbde3382e0237d0e870880e2b4ccf24639f45af80e0a5dc4551aa"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304402203a2f8cc5b18e596424e3303dac52abbf1becc37f652aad68b1a587d422f4a49d022063bcd24256241623c9ca134c31a2faddb793d85b8f47be34bff3b46dd5576157"
        }
      ]
    },
    "137:0x94bc2a1c732bcad7343b25af48385fe76e08734f:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100b2fef9ccda3203d4d711b37b8c21dc777d31a09653ac849a1e16ba669a785895022019501ee864d298c314a0e596b1a3e938d7a8ddf1befdaae0c221e8354729ba5c"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100cf26f3f40e07db7986b82bc30685023775e69a06d6130f266a231269a418a06902200ca684076d0b8c364e3eccc772e96e28ee09783f3d6962f5a655e26e1d93e4c4"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3044022069fd43233b2e1af4323099021e0d97806ecd67c23b9d4efa0ebef0c387f373ea02202e0492fd4bcb5b6366777d2c2d5207fbddfaa816565564188dc3c355ab329bd7"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3044022029e8a29f75eebb7e934ca0687f4d559503260708cad2bfe72e67c99a193503fc0220679e35dedf372a63abb3da541d69f06f660842f455420ba6944fb414148cf20f"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100cc30245de3390e8eb898ed8d5f64fd1c177c9b8ec909dbeb7f37646ebf2564520220776e3e5cf4b8cfd32f669ddc0022bff772bd0de18b5693ae4769431d570d9b1c"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402205509f05a408197037cd5d224f28886d7f64b0d6598507a737e37a7aae4a135db0220439d033aae7a8896a47313bbad00cfdf52ab2e69fb5734069b8809e146457f9c"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304402202f22d2ebc0588d08c34348ac50a8e7be90dd3eee6b6692c9e4abb5040d119dc9022059039e0abf6973ad32c72a6f333c3f370d7d0b24492444000dbc222e0ad859ea"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:9e97b4d1d211350352bdbb5ef45c4cb52f988d93a2d4a8ec6e675d14": {
      contractName: {
        label: "Dispatch.xyz Follow Profile",
        signature: "3044022008ad0a8cfe8c2630848f05e54ab93cfd1f5c301eb52cc74537d67a56751932bc02206dd3e78f5055b6c65a73905f840963b2f696afd04d6d472f4185dce9f6262821"
      },
      fields: [
        {
          label: "Profile Ids",
          path: "profileIds",
          signature: "3044022079ab31498b3ef74e744d5414f4c51334e00b20a5ad7c0a0ea6f463462d0a3699022079b29776df1f5243794cc128f19478ba586cd3b9378b5809740e9980763f8d8c"
        },
        {
          label: "Data",
          path: "datas",
          signature: "3045022100c04fb22aecc349de63571095782ea34cde05e576095c980d5c86f054c1a248cc02207f5a41199516bed46221aebed4f0f377508d39d661ef7f6ea7b16877709aa4ce"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "304502210090109424df964562737fd1b5ce2f06b427856ae933c37f279af199f64fc530760220290cf4491328fc947f4d73f0032e151aa09caf8e085d0f0306fa355c0624dcac"
        },
        {
          label: "Expiration Date",
          path: "deadline",
          signature: "3044022060825e02b00e4487917d073f701639b1ca812f21f1cf588fa8eb545a59b1fec8022073ca7918a322dfeb966dfe5239cc1a213c14e67a32f5f51e14e53c05f4149783"
        }
      ]
    },
    "137:0x33c6eec1723b12c46732f7ab41398de45641fa42:2a4e40fa701836b6f11303b841424a6f3a47a5313c810b6651517fd1": {
      contractName: {
        label: "Mint",
        signature: "30440220513be6e618840924202f319870537e0c1f1eb2e684c0a2c61152fc4c20b41c550220026e22f2cd2e12a6b48f97bbe362600556ce3fe5e8b292c05c89c591ea446e2b"
      },
      fields: [
        {
          label: "Receiver",
          path: "receiver",
          signature: "304502210089eeb41d1ba1235fe8319c6a248e1ac66d2598979d265e2d4cf16abc34ba47f302205a59e802e42b3268441980b4708600ab6e05e4c55de7407610987532cf73462e"
        },
        {
          label: "Quest Type",
          path: "categoryId",
          signature: "3045022100bc6cc7ae4c2b3b4d43acea4c513e09d11736275fade4c0bd834d94f6ebd3893302203045ae14bfbaa4ef3bc0d9cf76f29cd4c90859464290632ee72b20f4b5c37f8b"
        },
        {
          label: "Collection",
          path: "collectionId",
          signature: "304402207537d928b803882aac63dadb7fd512f4b959c0e1a737ce7594c9b9e0a0c661170220587298e0e8e2eae94da28564b1bdd7f62273d7e3707665a7966f1b04a15f061b"
        }
      ]
    },
    "137:0xd4f2f33680fccb36748fa9831851643781608844:0b5bbfa7b0d5b8429992c11126083752c3db3fac6030859c390e1ed8": {
      contractName: {
        label: "unlink",
        signature: "30450221008beed58a311bd0968844684d3e090349ad8f4c4a203b7d907f17ec9d1dfced03022040304ccd72921e0b13f0b8844cc513a35f8bcdb6d088385a57c29d848b3e1fef"
      },
      fields: [
        {
          label: "handleId",
          path: "handleId",
          signature: "3045022100da2826956b2b8863be618eec516387f3ab418181ffdc37a5a196f9effa632a31022040f75d126f4a757e0ce18917b74a9470e23848eb54060981d49efceb281ee3fe"
        },
        {
          label: "profileId",
          path: "profileId",
          signature: "3044022064739575b6ac7bcaf48de8a5d9c260b8ef97dfcbad8309dd1d95196e18c505a302200a334a67c975aff07d285f0ebdbaa5101049e0e331ef0f26a1755709bfdd304b"
        },
        {
          label: "nonce",
          path: "uint256",
          signature: "30440220471ef79574484f61b5e525aeb61f25d06eb997073a34bdcd68e3130c429e81cb02203fb9eed967e176c7029a3aed0ef503c83e61167b91c4507c8ac6304457754398"
        }
      ]
    },
    "137:0xd4f2f33680fccb36748fa9831851643781608844:4103a5bc367237260ab8658d746773f02cb95cb8daaf8d5b54182316": {
      contractName: {
        label: "unlink_with_sig",
        signature: "3045022100f1a743e8adbdf6ef1cf1d16eb1017b16b52266b367c53fe2d22483b846f26fbd02203d87aeca769b75b0096cd5bf4bcdb1dc71132516ca79dd86bba57594ef41c686"
      },
      fields: [
        {
          label: "handle_id",
          path: "handle_id",
          signature: "3045022100ceb4eb671f78a9cf0e46b3b447224fe23fd92b1f950ba762e53779cc9225cd7702204313ddd62a34e8a6128f3431ad9742ae27771e1b5f9a7f012b792bb7cdf67bea"
        },
        {
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100b7c748f3aa456cdc798b86f5ac3b59af56532278fd3ce0b8f8f7da1d7cd2bf5c0220672445bba4c5d42dc077d79712c344458656dce0a92d28bda1d81272c2410193"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100b7c86333951cd2371f0d94e39fcb9e349355580fe8fce42221a99bef49c0938e0220197a33b34f029674ff19575918919a28a0848d4328057eeeb633c150b4825113"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:070dde6ec3e5d5e7d8f92290760b7f3ab566049489976120347b7d4e": {
      contractName: {
        label: "collect",
        signature: "30440220274cb9f97529180cf59bc0ecba64e9f19f2a18df3df7653138fa5c4c68d5224502206b635afa415cbde57cebdebc2a0b5518be6d426634f09ed89664ac448ee31c37"
      },
      fields: [
        {
          label: "Publication Collected ProfileId",
          path: "publicationCollectedProfileId",
          signature: "3045022100f341665ec8c569bf59fa6c6e5dd568a7b5d0e8ed9d7b01268aa1cb9d18cfa9ac02204168045cf639e516096d89d91f9cf53d8b447a27007428a4bf4b0737b1af843c"
        },
        {
          label: "Publication CollectedId",
          path: "publicationCollectedId",
          signature: "3045022100c173358226f9841b57a93d2f7d622dd3f05f819a3e7f99249ae49917724c75d002205d4ccef5f16105c6d11fd2ffdd35b9e8154e404be39fa058e73dd0381b746c8e"
        },
        {
          label: "collector ProfileId",
          path: "collectorProfileId",
          signature: "304402206e73779691817f11b71f50c685075fd03e187a48e2c7f0754746cc61251e4dae0220233691543c3c35e99f83988753b3026beece6e26f13bf1fa197fb53638945242"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:21b483c455b899eb2e03e330261c2968719ee51273fe888f749b4952": {
      contractName: {
        label: "post_with_sign",
        signature: "3044022015ed7869eb391191dbded78689682b0cad3c7edd16e7512c868c5caacdfdc8dc0220685602e1c8982b96aae0578cfaca26f006a834c54fd7ca5b76c95a4087881648"
      },
      fields: [
        {
          label: "profile_id",
          path: "profile_id",
          signature: "3044022053c07fd41770b4c39a5122296fb110fcb466e42b7339b1f3b16842a6bb78d53e02207e5dfc7aa10aba6110888afc880543065aa5f07e822001d82a896d53c5f51335"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100b6727e222313381f043a0d83dc273cf2cc86207bfb6f00912da59a46ae3d6caf022022b20251dede2884f32070b53fcbb66617be8a0698f080adefb0331ed66f75bd"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:25313c662aeae5b5367783c654b0b41d2fd819940290fd26da4520c7": {
      contractName: {
        label: "link_with_sig",
        signature: "304402207ae80206eacb28604a57c9257543b43028d03535bafc53b965cbe15e6736ad340220474f63f7657f3607be38c4f9c88a95a2331ca168782803a35ae95a44825c281d"
      },
      fields: [
        {
          label: "handle_id",
          path: "handle_id",
          signature: "304402203066a8e761ae5459bd8d07a2d85e012cc6db178e00c47a75a43d081ecd43c45c0220387ebdb7c0f44df75cb5b2b9da79f2cd356c73f6b2e92b9eb037d87c12d16c05"
        },
        {
          label: "profile_id",
          path: "profile_id",
          signature: "30450221009c4b4d4399f2d315aa5651f4fd2dfa7313c949f493774dabf1be9fcf89b99cc702204dfe454f6ff07ce87f0825066b7b31ac2987576c107c7583e07fbc045153811c"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "304402203c0fc15b249263368185e82d4385909a63f8094217c147627965b558069d730802200d2d416f4a73be0429e1184328529a1fa60863259b708e70c0640fc6fee1afbd"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:2c4da863a51b4bcbcc6c55ccf1f22685c5bfc5d9fdc2b091a4979c57": {
      contractName: {
        label: "mirror_with_sig",
        signature: "3045022100eb0a2dff271a17bb6d79da946637bc29a660d601191d70e1d32bf1d4a2cd34e302207833823dfbef232f9af68c6fb63ed4e7f3d359a2258baee90b9d5fb43879b819"
      },
      fields: [
        {
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100e1b2f2be8ed230b81f373bdec95e5ad9301f62ef08f98eb67e43defde27f52ea0220442c2bfbfb88286e11b43fa43e72e2f3734e282c8742ca7d49cfde026fd70508"
        },
        {
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "3044022072f532eaba3a90bd4eeedbee606bc7bf9d30f9c320a3d8c222156810fcac113d02202837a1063dacb5af39ff3371cec6f38dfa8be419fb96424fe393e98962355732"
        },
        {
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "3044022076def7f6c5c9b4d18d388894cb177717baab28ef0694f7aca6b8d01ab6e005a402207c30ceb8b83363069d6020cb203716a08596d2c21373ff334ba3d99225613295"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "30450221008d476b24f0f3f7559979397b6145f42fcd68d4ac285b1ad20ffdb0f85b5b65ae02204f68b4b385c5121585f7c0cd9d83c0a8e7a97a4c867e2ea14f327f732d2e7745"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:34bcec6283bd50c6742687fbe45ca3b54007977acd70504fd3a664b7": {
      contractName: {
        label: "set_block_status_with_sig",
        signature: "3045022100b15db144c953121c0291aee97a12cc9fd3fb78de8f2827dfd1fc72f130f7117c02203d756ddd8bf1a21b99e20e0c8508f95c425eb10ccd224381715cbc7fb22c01cd"
      },
      fields: [
        {
          label: "byProfileId",
          path: "byProfileId",
          signature: "3045022100a6f5390228f0d665487302ffb088c50e91220f018a5e3834fe921440594663aa02202e37d859ac67fdca45182a59ac1c888c799135fb7bbf96dc0f0dafe8d69a81fe"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "30440220701fa22235fbaf8e58711d8162de37e37b9ae416e607e4f191744c4d0064ec1d0220502da2bee6317d330323a0c979e9bf0cf74fb070ea67a4f17981c40664c21a39"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:3e5cf36b8ef5bdfbdb5645a7ac102ff44c1ece4e4027578f82a35e5c": {
      contractName: {
        label: "mirror",
        signature: "3045022100d75b35ba1454fe2acc30b447afad603caa5e112262015fbd840d32314926560e02207b0e765cd1fec69eecba2aee14d6e613beac19183c807e3b3eb21bd96b818b58"
      },
      fields: [
        {
          label: "profileId",
          path: "profileId",
          signature: "3044022026aac4b7c09b4b20c3144e2e9fc59a8384f4f6539cbdc567e2dff46dd0b1f40f02204c9c1de93a68b0b44da0f44d91d60d804de70934e3847b548379faf2eaee6685"
        },
        {
          label: "metadataURI",
          path: "metadataURI",
          signature: "3045022100e19e723f2d64afa383c89674c04ebb7208d6584106ecc2ddb4d76aec5e16c2df02202e5a8fa79792908de5804d15bf8b8baad74e43262f6fba18dd77286b5d9cf6d0"
        },
        {
          label: "pointedProfileId",
          path: "pointedProfileId",
          signature: "304402200e5b144cbf64182aa82802662e9589ccee6f8b6514f8ff40b2918d47438b586602207cf688e2b60bdcaff0fb4bac630949fb1ed8534688c294218c880f4a31ee0b7f"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3045022100d7579329ab85e0924f5cf656b1810b2106c9773baa9e5032c78af8b2a273fa53022018f030b62fe33bae8f0218453ebc09ded25e2a459f833cc395c61f559730ab30"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:47c475ce8bb65720c4f1e1719d21bd6c0f89d0e424318caef9473886": {
      contractName: {
        label: "link",
        signature: "3045022100beff5d608bab21dae867915578745515773ff2ac555848d7b5e5b21a3c7b67aa02200eb85429369afc29d8eb3b26f2290662af490bcae00216f50a98317a1e2512b4"
      },
      fields: [
        {
          label: "handle_id",
          path: "handle_id",
          signature: "3045022100be71019383ed910e9069478219c1c0e594b8abf1488502b1f01d697ae8a75f1402207809eedde5955c65362cf68dc7dc8d6dee11016a75d15278eb2d943c8414efb3"
        },
        {
          label: "profile_id",
          path: "profile_id",
          signature: "30450221008301a955b2e48d0b7b795cf86afe07fa52d01b7eeae95bec4c0a86776c40d00e02206578edb54793f5d68ad5c77282c7abb5951b6cdf0597db3f02adc96682e61fdc"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:487bd6f6e6253dea7aec4388c9c9a59a6cee6cbc9865eb72511cbedf": {
      contractName: {
        label: "comment_with_sign",
        signature: "3045022100966e8fbcd85a94d0347d75e2f63f8f6523941f954795d77908110f9995446c5a02201b133f6025d7b9c8a7aa6e9f6cbb9c29384a3fe5c7cc2d7e245aaf8a811f07a7"
      },
      fields: [
        {
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100feb57572c991ec538ead71637af3e9c20fc0f8ff55ae96db111970626362031c02202f69b09a4c298ef8360283429b4ceeeaea31b4e59a7be465b72b125803fb5f28"
        },
        {
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "304502210092c92442c3bf2111477ef3f5f004fb9bfe5b65aead802cd0130edb3b2b8fbd65022042280fddd1138e474543dcfc4cd49adf3e382946dfe9dae46bf23125aa274763"
        },
        {
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "304402203f100d6fe2a7ab17727ba751589902c47a5492d5e60b0eea4c762fca9de7a828022031f803a7acdc380d6b3e844e0df3119922555567d16116430b1c743500c68ec4"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "30450221009c02cc897c262a2749a5a2c61fc8751c55139c4a17758ec70b0728849d73c1250220029b6d4901fdcc1a1840a735943651c224b8df47caab536b6938616168116ee5"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:62759482010064bf87244ddf3f52f851af87304da45274e8ffbdb099": {
      contractName: {
        label: "burn",
        signature: "304402206cb91707bf94bc392806cdb14d85877353fd647485fce098f041e5ade6134ce10220683811ec5809e15d419909322f03ed1b6ec5b68c38717ad06c6b0385ee3c3b96"
      },
      fields: [
        {
          label: "tokenId",
          path: "tokenId",
          signature: "304402205d18ec3a8003bc0fbb26de752b163e0bbbd77f8fb0b9017bea4619cb87de39190220743a256a6c6ded87db1b01894de3f2608e3553a96a327313047485ef965b18d9"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:62aa4609df2dcd990bacc19b61fa8cf0744b18d1dc85ceeea0ac5649": {
      contractName: {
        label: "act",
        signature: "3045022100d9ff204caa00262cbdad544c05c86426ae116fc7386e88380bdf49c259ae89ea02201bb18df1cc680a5ed73c084eab591438ec2477e4a7bd9894681bf797e09acba2"
      },
      fields: [
        {
          label: "pubprofileId",
          path: "pubprofileId",
          signature: "30450221009b4332e63f5199d668ec9303f97670628d6b122af5043ebf45d717b1184b6e5f022020ea22e28394812a4cbb1cf48a1d614fb8020fa777066145f5ddf98d057668a4"
        },
        {
          label: "publicationId",
          path: "publicationId",
          signature: "304402203669ca8c2cdabd36876e5ed39b3d5295148191035974d0f228176b0aeabac7d30220384ab6461fac2d5fb1e44012c7cd74f038e01d08f71c1fdd460e0c3bd9ad36ab"
        },
        {
          label: "actorprofileId",
          path: "actorprofileId",
          signature: "304402206bf788d79bf178cda6601da33912bebab43ad0329a4d765500ac6668a89679ce02203fcc328d872791cde23e53b485d4631ad4efa36bedf262abb3a3bad89e4b7199"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:64e0600665b7d148b3f8c7cac3c67c06a40c23a92b92b64d43ed854b": {
      contractName: {
        label: "Quote",
        signature: "30440220562b1faf7c3a9ab9b9093ad3f5cf25086049cbb3b5e382e728da1543f3fb3f5c022073e9e798bd8281bef4ab6f4e007519d63ab763c915f499e5be79eaff7c873e41"
      },
      fields: [
        {
          label: "profileId",
          path: "profileId",
          signature: "3044022057b03e53c61af58368ef1dc6d1d8d4db64482a06e5e64583912ab83dab7d7fe9022028bd197ff13afa320eef95074cb704d82d06b2415cb847258706d156e26ed63e"
        },
        {
          label: "contentURI",
          path: "contentURI",
          signature: "30450221008637c2745ef73d773bff78cda34c82edd7c1cb08487e3923fa2f7e116a95687a022059fb08b50ac82f6e550c07a7192bc537c444ec2ab95d45d35c033a5c1640f5dc"
        },
        {
          label: "pointedProfileId",
          path: "pointedProfileId",
          signature: "304402204203d284d8cd55980f1b1c7fb5a38f27a8382c521ae3091d1e3bdb5d3be4b097022023f637143703c499b166ef74303263ce777b46730e7dece60fbb4700b530617a"
        },
        {
          label: "pointedPubId",
          path: "pointedPubId",
          signature: "3045022100a125fc5a7f1a4537eb3f87e13328af81ea70003ffc3328058cd2526eb70561a40220476f098654315e370e33bab8bebd2b69abdae6a1c7aff30a13a0858c4909b462"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3045022100ca3fb45ffe7eae84ac9e8205e35ec97bf88dbbca94956d69aa68e81d953fbcf002207ad391a23e30a161a7e35799863157b85bdb55d14be61889a04e932f5c9b118a"
        },
        {
          label: "deadline",
          path: "deadline",
          signature: "304502210080a56b342258c626275ef0c372739414e8b59d4e7ae0ca8e7dd4df791469cf4d0220710a46b65970278bad1958cc65f7f1304986c2146e89053b906f25c6b666efc6"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:75a2ca238fb86566fe4ba12d8fef0a9852f577baee3fc9bfbaf678ea": {
      contractName: {
        label: "set_block_status",
        signature: "304402201a047f27b7afb027556821085b651f952d731bda71209c7857cc60d836836d0d02204c47493d1df372a9dfb0c6af5c4502181834a61cc46b0a85010eb740221b3727"
      },
      fields: [
        {
          label: "byProfileId",
          path: "byProfileId",
          signature: "3045022100a7d9e701ec6f27a56e9a32e988f08ca2bdd1e0e0649b6370eafa5b73727d6e690220490bd16ea293448fc7c2e9c8e7d4c3732a61793fed6e57bfb10fd69136483c44"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100ddab91289c73a6fcff65cce812acd56edf5bbb8b9b3d4490a474e36ceee04f600220279ce728d12cad2cef6d51524d0ee2bf6fd77533ea5c22f52c4eb906b433f1ab"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:7e13093933733b6e355959c0f05dcdf096291225677986f58b855f92": {
      contractName: {
        label: "Follow",
        signature: "304402203d05d3af2857144d7d6719a434209fb86b4e31a23a972a30b48a63012b859aad02203a1c9fd6e77bf01ee54e523545c0b534d956529d8b500adda5ac84cb53adba07"
      },
      fields: [
        {
          label: "follower ProfileId",
          path: "followerProfileId",
          signature: "304502210086ce10d201f2bcd07ce0696d09fb0edb6c310976c590728779b215c3b06e350902202b9abe2522e9587c6c80f18bc05d3b55aa24b78a6b512ca52eef73b320807c50"
        },
        {
          label: "ids Of Profiles To Follow",
          path: "idsOfProfilesToFollow.[]",
          signature: "304402203ba6e0b34e003918518babd31d60b67b9bd4b056fb061fbbe9787b7b35572d1b0220790db643b94787886311042444c4ee3a6dd0bf45739127f601633a81305aab68"
        },
        {
          label: "follow TokenIds",
          path: "followTokenIds.[]",
          signature: "3045022100d4d6baf19d62a115ff05056915f5854862bc9b4953faa70dbb89dd8af2d3b58a0220560d12216c5bd899338b7423966274476914b2a46735fc5a461423a11d522436"
        },
        {
          label: "datas",
          path: "datas",
          signature: "3045022100a3a40f4c17b37186d4fb96502fea483c0837d89dba2d86e950959142b19403d1022018bcb3029746d4fc0467d7f5c0d261ebe5d0bae6f502a74013dd096acfdad373"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "304402200666208fca07d5cb575ba6343820aa555a57ce43facce4830f92908813d974e5022023167cbcec528a72e296336613e5354678fe3f2cd00f7e2a8bf574a6d8a486a0"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:80c176be42decedd0ce1d10963034b678ce2c9a781ef457be4eeaaea": {
      contractName: {
        label: "Unfollow",
        signature: "30440220138ca52d637f7c86067c5fffa161f3903f24d778cca96a30c4548be8776c5c81022033aeae1247a4b5e38d1cae7797fd38b0abddd02e8dbca3b67f4cd1976c996563"
      },
      fields: [
        {
          label: "Unfollower ProfileId",
          path: "unfollowerProfileId",
          signature: "304402201694f3f51d449d10d120fb31e2711c486ba1e664821d8f074ccd3a1f4c28fc6102207a8e7a137973e64929ee4356dae0040ed71691cd7ab6d05e2da8b7a19e6302d6"
        },
        {
          label: "ids Of Profiles To Unfollow",
          path: "idsOfProfilesToUnfollow.[]",
          signature: "304402206cc14f7124cc54c692569b1e0e6ceeb54d565cd900b91efeb97790bfc8d3727602203e69a94df5c1ac37fe304aec1b0ce7f319ff09466c57a19b64d878c9ad6d84d2"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "304402205eb026dbe9c4e370c950cbfb1f5eca8008a85b0530626d18d032a5e039f95344022000c5c9fcc8552dea7353b7665a09591767e277bfba7c3481b16e2ae5b17edb76"
        },
        {
          label: "deadline",
          path: "deadline",
          signature: "30450221008fd2f449dd33406c1808e3fb316b6c821ecd28f53a424d9aec648424bd7914e20220247a46d5452c33e0a5b75925ee8ea77596020f21ad033201411f4204e597770e"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:8af86ea269c2fa5628d4e7c2ddf1e62bf6f5bd5a07f17856db0aa8ee": {
      contractName: {
        label: "quote_with_sign",
        signature: "3044022066ce14f394f03dc964c40540c4497e8beb0ccb9e23fd425671c61539aca6ed52022029933a6b4ebe3ddaa601c41a48e3836353f98564c4aa6007188f74aca2e1b98b"
      },
      fields: [
        {
          label: "profile_id",
          path: "profile_id",
          signature: "3044022033d729504a577e04d98d13b6d84c86d25d88a236557cd2effbe65be55aba7e9802204c62ab51a7bbb6603323c72f3e24b94544d936107deb2c343928d4e60ddefe58"
        },
        {
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "304402201326f878e1d9148d07b9801afd2d8b61ec6af1867aa6bdbb0eb359593548e9ed0220320c96fb026447f1af62fbeaff9e4ecf117bf8e58dde2c14e2714bfe8c1b9a32"
        },
        {
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "304502210089373f933d7951c60b47da9e709ec0fc28c50366dad2cd5b3e588b6a00ab207d02203f4ec2b735cdee2b6c06bcedbd4ac221356bd21d9e41b0992328b7c1d1258273"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100a076dec0c7feb81cc9669b3130d6ab6a98948ccd9566b9aaf1a6a63f86848631022072cf9a4d6b96a163b4262dc58e46405b5234d730c14646f19a272d8454616b19"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:9909de3ee56263be0d231b3590af5ea9616f13ff9ad1ff2889b375b1": {
      contractName: {
        label: "Comment",
        signature: "3045022100ed2c4aa6c95f02f9235c25a4ffa22bd7b17b94491ed6ae515d051060a16148d0022056d2002a24999109d2828685bb5808cfa8f24325c232611ed7813139b9c2e404"
      },
      fields: [
        {
          label: "Profile Id",
          path: "profileId",
          signature: "3044022012bb9c82d1778ba93755cad0ef5ae60d16cd031e4518a977ac52bbfbfcda5c2a02204ae859e24c8f72ea90b175462bad13377537cdd06ecb2c918c26487bceb8776f"
        },
        {
          label: "content URI",
          path: "contentURI",
          signature: "3045022100a6cced0672cd5e3f71c8acbbbb7fbbde9af46d38855b3c084007e466ebcc1da30220585c60120da86a91a475a7c77043d254368a3336538a518ede750313cc573b9d"
        },
        {
          label: "Pointed Profile Id",
          path: "pointedProfileId",
          signature: "30450221008bf5103548be1e4dfb70302d55600f1630f2a71440a32c1679309f729a90f2230220463b62310d865628eeaf8339ca0249306b0a58c05057a1bbbed32c6f96533e83"
        },
        {
          label: "Pointed Pub Id",
          path: "pointedPubId",
          signature: "304402203080c0a486bf69aa5e6c0b5242187f05b0c331510c50cca02e4721663923916102204e5c8ac70425ff2a3addb437cd0302b09fd769cf31b38b9914c6be2a00e0f3eb"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3044022021ec722852ebc53bdff303a327ac9fb8ca85d3c1b7331f3a74e36224a03f26a302200754e591c0e4c2420f4045d9f72b86829cb374572dfea7ebf9c2b02d1cb18720"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:a99363f790ad883fe3bb241d3de4b3afcdcb29d04018e7f3b858e123": {
      contractName: {
        label: "unfollow_with_sign",
        signature: "304402200e0488184cf4faf9d7942148e518530f3777676ac0c32ec9500e1def858c42fd0220716264c7be429bea5acf111c58c4fe7836933f13a1a87a8581fac110ff7ec52e"
      },
      fields: [
        {
          label: "unfollowerProfileId",
          path: "unfollowerProfileId",
          signature: "3045022100a01ea12793326480182402c1742d526592eb7c3605704488568c8a5bc6b879ac02206f8d48159f83c9acee651473315be799cf0a8d945685fd4cf80ef7815e94d101"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "304402204a2f85d72695d14300907aad0cdf2fef138ecece23e2284b32af8dfb456e5d47022003a31e07c9104a9302f52b7e5896f8e4988a96f8fdb4b6ae8463125c2a711a4f"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:bb16dbc5aec39ac7140b2be7560b53dc69091ac405d0dc9c9944cf43": {
      contractName: {
        label: "create_profile",
        signature: "3045022100c8bc13779d4affa2535364c67fd0fdfdcfdcb91bfda2ee29645df5b10c0ce021022043679732fba8f9a4f2195bde7f9cc3008de2c3f5e5969e7a198b3765a013d92f"
      },
      fields: [
        {
          label: "to",
          path: "to",
          signature: "3045022100e29d5ee58e92a1f8640b0a87b9e148f9d1f453c5825bd98a6a3efb21569f8ba002203a3efee9b6a581135cbf2e02fab5297bfe84124c7b53c9a6c490e67902d99ab2"
        },
        {
          label: "followModule",
          path: "followModule",
          signature: "3045022100ccefa65f301b19a11738d62082ab7717df57ce9ae834c85654324c2e96d0688402200c035b906f30b68be520a180de42313ad174e25ecda1a5f6953975ce824a39ad"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:c4318961bcd5f60585b391b40af279843ef5987b4de1c021a1099852": {
      contractName: {
        label: "set_profile_metadata_with_sign",
        signature: "304402205cbd8d6179fe4f3b58e89fdcb235973be3d43bf38c48b227212e50fab2ebad8002205bf98bdd1aae44d31d4e7d11cad5c5355796efca410a4079eb9a5fd79eac4b7c"
      },
      fields: [
        {
          label: "profileId",
          path: "profileId",
          signature: "304402206d3dc1a9ce664aabc49b5a9da69c973de34aa2a910965387948134155d5cb7fe0220057ce81243f25e6286f790cca12db07a27ebc83fcbb0878b6f9ddd44cd6d7122"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3044022069389e62eeeb0ded581ce91e752fb61b3db7c05d28ce95ea944b0b671987242c02202ec474a18cd966d8d9e20c9634fbe3e372478c5a5381efd369e14e1fbccadf7e"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:c9c7f3c34b7e22b2e08c9df904034aa7a66d2805bbb76ed439b35990": {
      contractName: {
        label: "follow_with_sign",
        signature: "304402202ee99ddeae71395ed85a710f1bde875a69d110d48d9942be8bfe5e1884199feb02206a230978387b6026ee9c97d0ce4b1c6f5ce40c7d44d57eafdf9a75718d432c84"
      },
      fields: [
        {
          label: "followerProfileId",
          path: "followerProfileId",
          signature: "3044022066e3535230da7c373f2913e833146befe76247d65db282385065e9023aa2ac8302202516f12f249c3739027b5d9ba43c5059da13773346197d7953c92340014e324a"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "304402201c9d931d8a0333ccde8d4545f4561e2716576197d825f03c71979d9da51f3db70220546538fe354c9309dbdc1e86cc87a5f2b57f15d04a2909a99b1d1000151df3c6"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:d071f8811ba8d8972da7e2982b8796f9ef8623acd4d9efb47ea517b3": {
      contractName: {
        label: "collect_with_sign",
        signature: "3045022100ffc5e96ea59fcd16c7baa3dfe1cc1d6692d6c96e26cb2459df3dd91b6e861247022075fcff9df082a3a6976411144a96bf1020ef21355a83e7958399d52cf0ed6974"
      },
      fields: [
        {
          label: "publicationCollectedProfileId",
          path: "publicationCollectedProfileId",
          signature: "304502210099436784574bf76acbc0fc0545e906e8aa926602e885065783c2707812070e5c0220072ea4073ce3a6ae2a5a233482cf4d44825bc2cd194b1b4953ad9e508ba669e0"
        },
        {
          label: "publicationCollectedId",
          path: "publicationCollectedId",
          signature: "3045022100bb04f580b5db9b6a4e52b6204dfa292339d89f22dba32519ca67b9defe20d96502201e7754b257580e553cd1ab13df0efb76356430d4867d820d76ad24addfb577bd"
        },
        {
          label: "collectorProfileId",
          path: "collectorProfileId",
          signature: "304402205146b54e4c4e1f177f7eb14f2c3aea4d85099047a570685a106cc107ce9ad8d30220748afed65ae98795ff8d1c4421d003afb45920a52f3959dd86b70aea25f89f27"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3044022074f936c0bb1dd1ebc38eb6dc4bfd965a12eb3a76aff1d010d7f0852d1e3b04bc0220095f7dcc6a816fa38f4292618ab991a0eea1b69c9825f7d926621a79b8126fb8"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:e16be30e76d1fe7d10df971f8669e616e11b70590ef4002bb58f7d86": {
      contractName: {
        label: "ChangeDelegatedExecutorsConfig",
        signature: "3045022100ccb92e84fee211f1e1fd47abee3a39fad87e97988d15c468dd074b32629cec9302205f52145220b3285e3f9528be1797511f56ced0d2a22704ccc2dd4bfa7fb9b767"
      },
      fields: [
        {
          label: "Delegator ProfileId",
          path: "delegatorProfileId",
          signature: "304502210098f9f759088ad8ce5383a15004c738d8c3a39bf5418b0b65cd0e93ff4e5c86ed0220746604eb87ccfaf0877b531cbc296b50037718b57aa13f0201c14cc883f2dee1"
        },
        {
          label: "Delegated Executors",
          path: "delegatedExecutors.[]",
          signature: "3044022020865f47450696ae64a2c628e35ed54ce4d8f13de1aed2065c87d5c9658f5a5e022008e511f727828e94a5709365389f20cc9d4378233767d639445cc17a46a87581"
        },
        {
          label: "Approvals",
          path: "approvals.[]",
          signature: "3045022100ddf33e1b7793dca98a966cdbb83d0ca6d191708125a6c50bc52cd388f51c57ed02206ad81605cc962b0626b37bbe3ddc2023f22d8097ed828d395c31106063acfd15"
        },
        {
          label: "configNumber",
          path: "configNumber",
          signature: "304402200b6e2d9ca322469d0d866a1d22a2b6fa23ae0d2dec7f8d5a51022163f2d0987902201d1e02f30cc9798115d5e2704165bee82afe69f2bb9af3ed626268803ee6517a"
        },
        {
          label: "switchToGivenConfig",
          path: "switchToGivenConfig",
          signature: "3045022100b2157446fb6c5205c8fc6b97ea444083531b40fc95059d298829bb96e4d7ba8502207aa09aa16328195ad1e11cf5ed775c4bce5ded678157ae0ae47ee976e00daa30"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3045022100c7836dd3d52c1940889ebd8e377616fa52834f0822b7ea3c75bb6e01c2b4657a02207c4bba14de8df6a291ba01a76ac58ff13ef077ffe04481703ad189740bb9db63"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f0cf3d3b7ed7ba54e5dfe70cd7822ec56431596fa9d1c3e2cd2b4e6d": {
      contractName: {
        label: "mint",
        signature: "304402206639bbb45b91a9c309742451e2bf73a29bc75fd32c428ee60d58fb001353da8002200b4aef1c912feaf73e3a45323a7df3b8b2df44afdbd0237a64b3723c7053f72d"
      },
      fields: [
        {
          label: "to",
          path: "to",
          signature: "3045022100af1ae8906e120f6783c5fb2518696ca60332ae1128de9b2478ab45c789bb05650220417ec699e96bab47c26d8d37b2feabac7810946d5de7987dcf5af3c95e04ec73"
        },
        {
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100d339951d42fd3c3b90c389dc703af3093bd3fd16dee7f9f4239192f2b44f5cfe022054426b5ca70bc65e1703026c12b5dbf8d2e79928c9aa478f693388eaae1edb26"
        },
        {
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "304402204eeccfddfa2f9bf4dd9b9e1db1a9c91cc2f7bf22115c6b74676f2bfc53d820c802200bf3068effc45575b8b08fb809329a9c14769b23acb0b55012dd83df19533ec5"
        },
        {
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "3044022010452fa9f43371405fd88f66eeb50ddd95dbef93180ad5b147f9b368866d4034022012e23a825920c903a5fcb18db53c664a943e442cf79258536bcb576d4c839416"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f2d2c19e66c050722ce388552dc6bed2ed5487f7cf4128054d3d4b7f": {
      contractName: {
        label: "SetProfileMetadataURI",
        signature: "3044022037f24dc90ef82099d00622929b8ed180ff73cc92998160d234060f5e74f76cf6022068bff3003c656eec1aa2c5f7719e9d42993f64e46b72663257ecba783673182b"
      },
      fields: [
        {
          label: "profileId",
          path: "profileId",
          signature: "30450221008ed21c3944a3ef93c8cf1db94deec88844a51d6404933fbad3b72f0dc8f4e5e902200f5fe8234ae704a754ca5f90cd54329bb808b5f4e85cf37e0c7bae2c1965763d"
        },
        {
          label: "metadataURI",
          path: "metadataURI",
          signature: "304402205ac0d9389e90ccdba173fd9b5bc206ff7afe5f94aa97e6be83542e74c1883030022072ca6572f6b91d65f00976c46aa9ab24cfb87773da72c6bd5df007c34adac3d6"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3045022100cb681a895a6b4fc2e0fb4648ee3fb398134b4cc8dfa8387e04616bf87261ee270220067b327a33ab2c24efd989d15694e6066597c6070179fb33199dd9d203b28a30"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f48d14ae14ca8663b397fafc56d53833a2eea3e8a6450961e58f274a": {
      contractName: {
        label: "Post",
        signature: "304402204c6f0130681c8166f9f89c73ec30aa48d5cbea6d3f65e222d1c27feaf3f303a202200f138d210c299d234c527eff77064b37883f57ef8263942c871101b49ffe136c"
      },
      fields: [
        {
          label: "Profile Id",
          path: "profileId",
          signature: "3045022100ef075942ff80ffd16ab5aee79178e68d453573937830cb309649d5bcbe07ee61022055d84b6b081ce5aa88d5f89db163b87e617d181ae6f8b859d70f06026bb19954"
        },
        {
          label: "Post URI",
          path: "contentURI",
          signature: "3045022100aa09a0f04edac5f9241f187dfde4b0370091b3ba0bbbba37daec73246ee1b7ed0220265d8c8242e9cfb645ce0a18217ddab8b1c312aa513c9af1662c8b91b72920e3"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3045022100ac7a9acf7f5008efc137f632f5603e36541f1347a8cf2aeeafee7ce98f4f32e302202cbd3fbf86bdd772bb646febd6b5fa426dead4a840ff24e77d5fed9a7ea26d4b"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:fa764abeb889b33c2dd4e1396f1316d8cf49e87d0b5b341ced7b7f04": {
      contractName: {
        label: "Set Follow Module",
        signature: "30450221008d7d0ecaa7ae3d5c4d6ab9119e14ed55962722252addf490298fe3be29c8fc95022056f88897d6a0da3b495275071b8ca3a32f6d9b47b4f420d9bd2a1c2229b807a0"
      },
      fields: [
        {
          label: "profileId",
          path: "profileId",
          signature: "304402200a819ea2e5f20eeee5787138f2a7b32f3f237b48a014d049be742b52967c2d5902204cc6a95c24c2436b4e22a34ae5d3ad68d995ca9998f3a073056af98e8fb6dd0b"
        },
        {
          label: "followModule",
          path: "followModule",
          signature: "3044022050576104c1505e117d9acb5e71cdb28c26b34b1cf2bd91cf617a47a838a4d4a60220034626740cf27f0a9c2d4f3e6ce53e0d612cc2c8e48cd5999616e2817cb57022"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3045022100946b8bcb1606ecaa3786b80c7dcf08f8c0343ec2a756c48408d617f4b341fd9402200375a2e3c3be53320ffddf1caaed5fd4c12b61cb25e35afc94cdc29c253dc316"
        }
      ]
    },
    "137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3045022100a887a8b2f40695509ac6e040feb1a4a088fee459fd7e76cb137ea7c06b0a0b930220617b514271c05679e7ce04860ffca703ad2a21f4a45cce34b40e38624cf7ec13"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "30450221009fcaf300fef36d00f64c3d5e92991e67fd93862f8eddba0b8472568b5c66e38d02203a26f3aad1c0cf6638dea961f8f5e4ba5f72272bc7f1e33afac897a3b5b51604"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100984f166ee1744b4b69e24ed1e49fbaf43a24e82dd5b7d2103cf8ca854ff49e0a0220326ab17879b902521fa032a89c5c984e52bf3e31c8336cd67a1ce198d7c36e2d"
        },
        {
          label: "Maker asset address",
          path: "makerAsset",
          signature: "3045022100f4ec14863e0512804fc69d82fe17bf576340ae8005d0c48520cefb3254b102f702205fea57ba3919071157ff3ee0c93472e936f1dc079bcb0c447bb87ad86e505ea2"
        },
        {
          label: "Taker asset address",
          path: "takerAsset",
          signature: "3045022100957771ad2eced04af9750c1df10cc5b5b913fd3f9fe83408baa766573ed34221022055a1ba30b3a8895a011719ac54adaf7bfd24fe2c5041a90348097f719bed0dc7"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "3045022100f25edb42b652d5c645de567c201a1e6a64b0d6b23274cde08046d955cd2573860220129bbded4e33150cc38b93033b2d70d5fa141066f1ed7c603b5515ab8cdb2fca"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "3045022100c8790938f88557986c769102d31603849dc8c560cc03a45db99ddc90d69306690220295950348fffc22fbb898d75e768edb1edcb1c8772cc3518ff9687e957a87e50"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100b5e1dc4e5f69fd80611a4f5c7d306ac6aca4a2a2103515d761557e532884ca8702204b86dd5c323345242f1c1b263ba035932a10a5b0eeaddbc79fa10db27aa9d7d4"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "3045022100bd1de29559311612a7d0bca3c61b10d9ddf0753be7c372ebb95e0b69b674c01102207d685aa2b0a2309ad094a5fc8e09210681781f9a4294e4c7973d0ecf1adabcbd"
        }
      ]
    },
    "137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "3045022100b9798555ab901ed3cefcdec4aabd9418f3561fba299833ceadbf9d3043a996a7022037388e3956ce02764088733d92384fb4e669754b037e8a913995d761ac0d5cdf"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3045022100b57c5877ce124196316dde0e2fb0f18258521cc2c7c27405bde78008bca27d8d02202053d4696b28b40fd1a16e7a179020c7d633e4548da0bd92f9442c24da12d510"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100b35db3057953f7b747d4423f688d8a3fb3101729f37af65c4ac4fc9a7ee8fb8d022033f4d70422b437593f00af75828ff067f914f825bd3075f8462080bf4e0f9ae0"
        },
        {
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100e2e0f280d333692a776343669d6f17dac3ded8935d5875964d5ac6b05bb093f80220589afeaf7a7baf3b5964b439111d07deafe25be8a32b43640a2cc073a7257aa6"
        },
        {
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "304302201e35015cc3bbd6ca28bd57eb970cf1eb05826a4988c1238e951574f8804f28c2021f0cae62ed8199b725a39e714e60c92fe522ac7992c3dc1a27866f749547de89"
        },
        {
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "304502210094d2c3de8a61bf940dc5c8132070ee0566ab6d0059f1eff5aec3ba1ec04740a202200fb41470f2693427466a9ce580d5c9ff12243f848351c7aa2ac070c1618896e2"
        },
        {
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "3045022100f9b55eafa8d519298960b040f36a7479ace9d43b677d243d22c3194147dfa033022025f7a2962e342ee1572f814cd8b8cba1382deb20054475ba9df9dd321bc9fcc7"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "304402201aa4061287e14289ff1c4fdffe8ddd811775aae4bb6577970ebb87735102a5ba02207d9c89254e9698a7aff849a87c2a163ce9793212a5fe3745e446393c6a71ec46"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "304402207ca92ed4b465b4fe1d4b2dd65561165a70b54c8dd132dcf15031c799c8ab22fe022041d7bd664003c62e949cdb0ed09a744ac6adce7d6e676e4de22437a830edcf74"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "3044022038901c22513acf13bac39f553c763d26ee32c3e6e215ca3cb69da0274ca901c702204fce716fc91f3cb7ac7da446bd3432020d002c5a62c48d199d7b4379fe93c9f1"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402203361ee1439f545c9664035be586925b2fb4878de9dbcdc7a519b5eb95a44ca6e02205f905942febcf5342577b5af149ea4deea5e6d0e1ae17356bb1d0628d8ccf8ff"
        }
      ]
    },
    "137:0x27f8d03b3a2196956ed754badc28d73be8830a6e:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Aave Matic Market DAI transfers",
        signature: "304402200ac5ab94c126dde729e0159a1eed721dc3caa04f908312aa74c66af16004fc7602201aea814d65a8fa0554432cde24c032faac6a773fc00cd4c9db5a0e7f22d7c99c"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3045022100aee488b860fd511c87449f2a833590a501850564f4613eb5cf03466303653f4002204c4ed53c89bb8fcc4a065a3bebc2c70c3fbca495edfa74c7f76b4e7297229713"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30450221009514d69c48b51d1524fcdd437abf7db5144750ea606f48e9577a2d578bf4fb1f022020f9ef88c2ef73eb31bc05e4082030473ffb7b466770fc853736bfc82fb44aae"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100ff632293010430e41ab30acdb0be9cbf9aee0c4d59003d9bb0fedfc0b06ea47902203a60c5f8db639d26dc283b6923ece5d24e040e905da0ac89c748b445ceacfdd5"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402202ea95fb0d6207919da555251ee616125da07e64d71c2052d719be012f0b18d90022047344eb1821ee042ada2007ebfe04c8cec9e695305a3153b8be8748ba34a0126"
        }
      ]
    },
    "137:0x28424507fefb6f7f8e9d3860f56504e4e5f5f390:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Aave Matic Market WETH transfers",
        signature: "3045022100d82c58e57d3d4040972e93cd45dfde23f59291603f0f6e77911f4d25210e532102200f1500ebf2516f1051190a05641219627ff2ac78aaeea2f67d723990089a0890"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "304402200fd95d9d23b7f6e91d3bdeba89da05b66391f8883b9f7f66b30cf645b6baf5c802202ca600bd52e3ed1cd580713ee3d6f0b96d47e09d195979ac4b023ad8d06bf16a"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220720a40e847932e9d428749631d4086ab7b3986473c98ec54e09bd116717d3ee502200c4f39dee8066fa918f4e364d3e3c7331fb2ef495bc01cd24138b8df6b49bd44"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3044022070173b1f7dcbee008689dc5cfc54e227fb2ace5a728c3a769f9a27dd7ffebf94022045e91c91f9479da1fd55dcf68aef25df49c13281c73d8e7cd8b9f1a0c37528f3"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100926af4150d1cf51f5f890be5c14f0ecc5d0a15032c0db4185fe864352c5b83040220021281e74f3a9a0701686a5ab97ef3fd547d25a41d83e00936b630dacf461c57"
        }
      ]
    },
    "137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b": {
      contractName: {
        label: "Lazy Mint ERC-721",
        signature: "3045022100977ad189fb3f8c809caef784ca6c66fcda1c98274d92219b07416e43f43187af022051b069af307aef8d7b3b3aaf815eaf0e7e91c55f994616f3ea88293dd69f217c"
      },
      fields: [
        {
          label: "Token ID",
          path: "tokenId",
          signature: "30440220403fc14ad30f3f3ea597f75d88371c83ef2e10130a5143faeda87dc507fb9aa2022056202bc01b283e0f625b82c73db84ca3f17eef6d9eea89709aa0a88eae17096c"
        },
        {
          label: "Token URI",
          path: "tokenURI",
          signature: "3045022100ce280997a6b39acd5dc3522401c205eb4719b4b43e7e673958f1c7b7b97a8f59022042eb6a70f1f45c771a697eb85b71ba58acc8074ac436d27840ec1325423d7e0c"
        },
        {
          label: "Creator account address",
          path: "creators.[].account",
          signature: "3045022100f072042cace3b6ce605bbf0db7c3941928cb1ac5b6011bf47e04d76f57bbf392022054eb24e12319d88144a5e4d15a22271f2f1285d51f1b7f48bfc46ff1724c1741"
        },
        {
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "3045022100b5517383a1f9f7281859e1e3ebcc588770ac08fe7961d83ebff3ff922674fa3302204c490c86d4d987875aa55c089a6c8bab4414a742bc7df19f67261a319d4d8c17"
        },
        {
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "304402203660c0f0da24c89206e992e46c399d75d4e0981dd86bc145f4ed0d0ef469b47402200948f415f220225eaa67fb03749b2d5ea1ca8dfa76eda34d15c8f95746e30bd4"
        },
        {
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "30440220747d86766a08b5bf78182dadf5ace3813cb8190266e5d1a72f2d94a387fd6ba5022006c69b8171a47fa15ef906fac4546856dd9467a8e1036d89e323614e64d29715"
        }
      ]
    },
    "137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8": {
      contractName: {
        label: "Meta Transaction",
        signature: "304402203e256b1407f82dbe395bee10e34bf5b995c3fa91737172b58fb41bcf8e006eea0220046543fdb21b8f65e050b57081915c083fab2abc1cdd663ce53b1c792dbfdfb2"
      },
      fields: [
        {
          label: "User Address",
          path: "from",
          signature: "304402204576c4999dd6a70df131dfd032667a42695d333a07b3599ec6d72843c54b48b502202cf424d057bffceadbbcd9023b2241bab6d2faf8b7324fbdf87f5daa9789fe38"
        },
        {
          label: "Meta Transaction Nonce",
          path: "nonce",
          signature: "3045022100e094b23ebe8102c3c1aa5f802c33ed56f48bc94f6446b289ce358ea60ac375c0022013255aba7dc03fcfe30c7eacdf7a14ad0c51f389ddd51f7c4ba6e8d9bbf3dbb7"
        }
      ]
    },
    "137:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b": {
      contractName: {
        label: "List Order",
        signature: "30450221008b4ee6f1b492d19243afc4715d1f0cd9bf79a1aeb61fbf58f0e1323bce9dbc99022001a8a548f081eba23f33f03e20f478c33bd264efb3d8bfa16ce96e0b69ad5428"
      },
      fields: [
        {
          label: "Order maker address",
          path: "maker",
          signature: "3045022100f9851e9dfd9706740307e7829705b3e049390755e36b26a059f28d6bb47ac949022029a4efc35a2264fbe8f88eee1f83c430fb5e96bbf55e6deb31a60826cb0203b3"
        },
        {
          label: "Order make asset value",
          path: "makeAsset.value",
          signature: "304402203bf13f37325f60973b02d5433857676ce135f94011047bbfdd2b97c30db1a069022029f409c7689891c222cdec4e63d143938ff73a4f6cffb0c5d56228d572d25fc2"
        },
        {
          label: "Order taker address",
          path: "taker",
          signature: "3045022100bcdc72ba9f16a3ac3b73ad04f445a60958a7ea644511d9b917c5ae52be52c76b02206a68b66cc24c79e45687c07a201f7e910444a66a657c615c5854ac7065b0c6fc"
        },
        {
          label: "Order take asset value",
          path: "takeAsset.value",
          signature: "3045022100c23622dc64172dfedc8fae04d5fa24e25f598bea659e703839dccf19736ba13a02207554a945d0e9c2816860ec7a6c4aab9088fb58f5316c1007d82f0add61693954"
        },
        {
          label: "Order start time",
          path: "start",
          signature: "304402200cfe7613b90190a2c4dafaa661e5778a7756444e593a8e16105da315231df264022025e1daecd1752763decb7c51389a5eb97037536ecea3781e70ab428d75e1278b"
        },
        {
          label: "Order end time",
          path: "end",
          signature: "3045022100d0047bfc769190c5a173c8bdf79a2fdef008f0674ac04f3a7fe100553f41dafc022030e7ef0a1dd8f6f4131da237f6c33a331add85dd747f7f9749806759767d0880"
        }
      ]
    },
    "137:0x7f19564c35c681099c0c857a7141836cf7edaa53:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8": {
      contractName: {
        label: "Meta Transaction",
        signature: "3045022100a2f95042a915f8ae76b54b1f012271a44356484ea6d4963b81e6806ed6fe80500220564155498a275d3fe5eec595fad3858cb2d7fa85178b98208d09a886a1485257"
      },
      fields: [
        {
          label: "User Address",
          path: "from",
          signature: "3044022051a39f6c809110faf6aa95fde98315c0c2b2cac34c31d927c058a2c0ebc158cd02206ccfac20b0327ac6e2ca08d5d53aef189b2bbe8bc010ae9002b25edcf43c2f06"
        },
        {
          label: "Meta Transaction Nonce",
          path: "nonce",
          signature: "3045022100c1e15f064b9cf3d8cb2c6b297318c543066a12868419121c7062ccb7fb2f619b02202c3079f47124d6a25178d4b8431acd0bb08f44e9a0ec302e71bb4cc9b49a05a9"
        }
      ]
    },
    "137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9": {
      contractName: {
        label: "Lazy Mint ERC-1155",
        signature: "3045022100b85f48fd591345542f9e2271b4f33e71287a703eda9f9f7b54458dea60fb59fa0220661f4281eff16352e5e8db92a254b6b74ac0f20e3d41c9042a3c7c9f7397bd08"
      },
      fields: [
        {
          label: "Token ID",
          path: "tokenId",
          signature: "304402203dfd604170efb9379c36e17439f15f441b437aecf2d9abd0dc8b0c757c15d1fa022007fde07992c2b3797e7aacb7309cb60d494856d7a9d5866981a8948abf4d6a9c"
        },
        {
          label: "Token URI",
          path: "tokenURI",
          signature: "3045022100a334814c15bfe1474472e56201aa83aa7016648b2a92aa2ae7c4d86b8a412eaf0220416654d59af289a253a96cbe4f5c9b75c2129d603d94cb3c7966cbea682f542a"
        },
        {
          label: "Token Supply",
          path: "supply",
          signature: "3045022100a180585fc34f26b83b50c1d7609a0623b85b76267e393bf2871f41790487bf5902206c296108c56f2a1557a66a04f05bbcd7f0e0e0cd7a7a9764783673c0cda21d1f"
        },
        {
          label: "Creator account address",
          path: "creators.[].account",
          signature: "304402200a32f52a36f61e3b62af734ceea6e02ebf44e9bbafccb92b2570b7ae9666638e02205e8a0ee1634919bab75369b611257e17c12cf379a4b83e3da2089de13863baa0"
        },
        {
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "304502210092c988b7806250d99ca2760167a0c72f4c7e20f8f9174c519421bba8adc03c0a022032f33a3843e31b8ad17991e8eb3e3b922c5c2b9570d930fa9456b6f59b8974d3"
        },
        {
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "304502210081e5ed5701d2bb497c4b1cadd0ca61220b1078357f7e3ace908c01fcfcd3abad02203b03cb75eeabcd49777362466e3af9a461ad39059238748ed7d902f988db3318"
        },
        {
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "3045022100cc555652ef532386da9ad2405536aaa7adbe4cdac73ae9b2a8d4b0659eb4013a0220030799c1a813bef66c6395c7305a1f98e3bfc0bd045917d63bf7bd24e09fbebf"
        }
      ]
    },
    "137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8": {
      contractName: {
        label: "Meta Transaction",
        signature: "304402202e2b7810798bb8d8094ff46e47ae09c820b374420984f5c9845139f7995b5266022050244aa907e45d7ff4ffc0b383262c4425d32aee4190bfc09fff359163268b73"
      },
      fields: [
        {
          label: "User Address",
          path: "from",
          signature: "3045022100da2c6c45ce4014375aec27ce7dfc470a066a53a3ba812da7f4fac641fc48334502202ce049c05a76e19fc4195a323464383f3eca62f33a435ad5807716af1a83af4e"
        },
        {
          label: "Meta Transaction Nonce",
          path: "nonce",
          signature: "304402207b53dc30da4e7360a2deb22ab0ee2ddca9dda1c807095a57751dc395d7d503c602200f464f277a17558cab3b891fe8d4fb232b5783f26f6813da77ceeba527bbe1c5"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3045022100d259cbf0306cda1fbd842725394b29020aaa05159884cdff8c256ad87e6d55ea02205e5c7bbbbc030c2e1362e41185312aa8140802495fed2325031da2af79dde7a4"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100b0c62b0c9e085b87332b8a32a7106ca20027f41501abf28f2ef6eddcfee70cb2022048fc3ff7d0e8840f4f6581f0026d2099034011b572a9b87804e2e5b4559a708e"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402206f542985fa2aa16417942f0daceb72b951c2c485088cb8dfa79cba7358f1cc0a02202d31f11b13df2f15c143c727dafc2aee2c34d6df8eba28e8c44d9a5d16493c49"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402207d9c68450fd568c07e5b5ecffe29747c64d247cc1ccc8cce83d4112d029317d202206c631ddb8ea90ad75aa1339f2e966b72193758615f303af6c8f94c733f6e877c"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "304402206a2fffb754431f7c4bccf3e9e4d0685d90717e995e4c719dcf56fa55d0601dad022021f53e18abaa4ac5ecbccbe2e87d16acae1883e78ff6de3427ba0c2a306bae81"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3044022056450131868b314ca4a0644588bbef0223365b771c7d530c5d522216c3f6acaa0220648f89fca96da29e3049ab69fc3d5a97e42a749c60b1cb78daa3acfacbe577f3"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402203502b372181142404d4f77015f2fdffda0a4696039b5b7a8120e7692878a9fa902201d5731834b8dcdb805a1201caeadcf284117cc5613db44c401475641263dcbfb"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022002082a79a98c769ab699fcbf16a2dbe466ad07de8da7e85142f22fa2e9d4f6cd02205f3456700eb673aa0d3576ff086886dbe6d46a2bc47a383e5f25eab8495f64b5"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402202b2fbb0d1a344c360125ec9403fc6ce42148824d86fd939138c1ce28d6a1fbc1022015542187af47278a9bcef98772eed3f5dc305cf53828e27e82358cd55da30e9d"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "30440220088a0461f791327b18760ce42ea1ce6074f35412aa5fcdd940125bf36b283cff022051c26c42f6e2339a502b7a0234f5d1ffaa065e11c282d5c2355b22796266e987"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30440220273fd834432c1375ad939115e8964c7324d1011136ff8ef68372b21b9d8e85cf022037a9e00b0ce34c74ea89c647ae68cbb80c9fb6ebf93326c1b6bfc167758503c4"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220431f8d9a182a7d233d23b6c7279c86032a0f67ca12a3e60e8dd1fee0dcfc896202205af02a1dcd72dc193e87e73bf35dcc5aea1adf4c05da0404dd287951188bf193"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100c5f09dbe6709756a1fda5e5f2829cd4c88c2a8a12112ecb2db1a6fd69b48941102202d1a58cf6b072a8b75527f2e7f1bf3b6500d2cd22c44eb09516eebbd4b5bbbfb"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e8ad0d17420a31ede8ea9a1bcf1b4a74602016fce59f1d2f448268356bca1102022035f7a6e24c73611965e3a9424403c3c56f65bce994761d130f0205ddaf859ab0"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100fa254d017be4d4c433d49975bd9f9b2e3af9728b2d53810bf281ba5c1505fd7b022078afe919327a763738314b447afa91cf42c2c186961ae12d56a8fdab14b57ca9"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3045022100f3a91aadffab51d26e5dded9b00d0a447eb3efefc3aaeff52805b3f42636de5502202766d3e6a86eaf5a28968bdcc71ae55f35bc4a88d816223094397976a6f23cdd"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402207518cd346517944c31b81019f3af5dab9945c074a0b1ecff4af822a5d9e7f98b0220053975c4e589dd3594f4e584306b7f3f6f79a356af1eb6c740d1cd3b880125a5"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402206a31980f0bbe30ed5768e8c2761560879cd1a9a840d22edd869e727bf2239ef802204d278590f5ff29cb9282e14d4ee198c3b7ed9f72ba5daf5747a5fc7e01b9d721"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022026b69ac92550360282aed1e73826cec75e42c5137c893bbb1ce3f9e2bd88bbe402203af214d3c3dc91dcee4fd1d919805193462ddcd411459d413beb4aecd10858b0"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402204a9980955247fa0f2ce62be0862f70881a74ade55439e511d612c4acaba1d5830220048602d5b17ddf377366110267c7f994ce4bd9280f871ce6037d22ef9a8a390c"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "304402201dd26b80be7890a44ce323c4c98c2978d96f4d25fc6465be7c4a079af701694102203b5097e5d1f1f58600ca14c052f7c686ade4579650ba15008faf094bba528e9d"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402206eb54ec964fa667fb6a130710c6770e84fda83078c2a877ede8d817d00329ea8022030970ebe404e2f4739359e44a1581ab89b391122a91e58b225b007235454c173"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022009cf5c5c08e8e8022a7ff466218156653ae123dba81277b5e6c1bc7f0615dc5e022053a53758115bbec371aeaf5b1ed209d9c013299cc81227a76c926c5a84c46c7c"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e3970afb8a471b9fc6834332077fae22791cc45451da4180f48ec29f97eb259102201c57886609f9763e18a3de24e3a310dd0616f2333c47bc8ccc5dd35923e677ff"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100c68f181ca5d964a86c20914162f894b55651013505341de7724608533a9e08e902200a4f7e1b5eb98dee87830a821922427d30aaa1ec7c7368f1f894a43912a60365"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3044022074d08efc6e2defb1cdd7dbbf0ce076cad0fdadff5f64cf9ee03b2a601cc1564d022057d1c94befc8cae1c631e601b7079a473e0a0d5e65b7967018caead0bda47d14"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220214343c3d61640d1060c8c77e87a4f1c2049a42608ac27e1677aafc959f2683c02207d097d9336cd21cf842e1105dbfe19f10e15089cb2b43e456a7812e742435be1"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402207ca78ff2071f4ac7747b8c38add54a53fe94f36dc7f47c7012a32386e4e56024022024408cd0187979768428be8aca20016a30af8fa1f64c8d90b1aa1bb4ce455c76"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220303ea2dfd29482368d0416da1a5941ed0bd57c4728d0ff6bfb7f3586e757243e0220669e8db841cbe6e49634362711a05cf6ebd855aab48f66e12bb8b11d387d5a18"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402201088939cde93435e30a6ba67e4ada48886748003acf304b535a6980cd7e273c902202f1f4d56f577e0f0eaa13a2208c4a85bbab9de77c08f7f3bceefa35a27ebf752"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402206f6100efbf09c7cace10a0cb2d283741e090c0c5bf2410b36c7d5dfc7b394d3702204bf09d2c6e6d728fa8451f553f9d4678d004dc00bdc05510f33c6c9a0412f144"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022043c32d3e1b5b644799aa8c8a5813cecb40956c282c227c87b6d692a1cef5e7f00220077a6e81cece0f12a9309918028060eb03842d3742ce65e8b364819bd1051650"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402203b079692e3c22218c0db1e14bfb3158901d89d466716f42aecd1737cd7857221022016ad9291aaf0a3388e4f21f6068d6610d560905175826e5b6fddd34b5b06e40c"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022079391bb740cf2e4a878e31cbf4c41940c5b312985245079aa3ea2ada4cb2862c022032c106c5981577447738eefa31216c734fb0c908a817b545aa7be529b1c29734"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220106d3b46029248c9f503a22050f4535f38c4287a426305c73b8651b1bca6baaa022015ec4e929e24353c13015118255deba0e1f38b012f16f6b7de4c375cc5da8da9"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022015e91522c1c70a6d7f7b6fba1585ed3822af2f245f54805669d5897f8e8804c302204ac0b96383ec1fa0157be86de551cb9972600d6f58774af45194b708d61cc4b0"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "304402206a011e76441d5f7894469c9dc6c06ab8c4ceac6589a822aee7f9aebf32bab0880220566573f29f38b1ec187d94d502f588643c0a90f4d8ea1cb0dd187d7be2954106"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100fb61f9c489e4d2128d4d0d438e29af17816400ac86087469ea7b30dc6202afc202206c2db87231d177800d7dfd3acb22e4a085953ff8d1ff42b6413c1aeaa1151c1e"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100c19dd8af5d23240c2437f7eb3a082fc1c8ae9195c178bdafa119d370ff33499802201d67589fae70268a7080f09c162bb1777bba7281523d34c37dfcb496e3cda151"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100905b18f59d5eef6ca650a587e6bd6e97832107013424fd2be585e364cdf12106022078d776b0480fe4fdc4e3b64e7b9a38a951c4ea3d7afb105ec76a66f08d1590e0"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "30450221009d336e41e39830bc5fb01567468404ca6371f13c75e8102647a77fcd7e1327a10220696e5f853b1fa5a19d6caf30859cd4e17981f2e0b34755e1e1e588c440998f38"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402205cbae5501a5041672f937fccf36d87d19ba998b90a61ae26d3c4b4282551414e022037bcc80671ada5e3076281ebc6de328331846968571146f002708245da890a81"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402206c49952615651455531d71250c7e51dc8a04d4799a343ac3bdd732399cba586e02203b8777e4fba7d0e153f3a2d0e80da3f8c6d861c2d3c724550937297e78efd72b"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402202bc9b18aacc8d3b7acdd87659aa556e872ddbfbf18ec1646a5f479fe4f9e22db02203ab72937ceb9235bfda2442102295b7f6fb8852e91782cc746ddc556be81e2bd"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100a41526ffd13f1555151ab6b470df7fccd306944eb22296bfdaf42a2f8866c34702202fb75b9ae194092f7771f19f89d01cd6d5368c8cfe9215a28469d8ddc3a350c2"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100ee6ac2814e535771cb8ae42632470946b3aeb5dad23c81df803d6a3ccb53b5af0220431f9b18c425ad88ba8d5df656c90faabbdc57b15f47922b8e0732727643194d"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402204a899d971e708e9f4be3e7044b3ccc0407babbdf35dbadd6d912a6bd691656df02201e4a7d528901ff5dc58a812f8e6c8b1ad08aa16e42336a2e682111be13d5b47d"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100c77b95a129d17f1c163a54db3260cc6aee8d9a686b9c9686d615a7e23390d7cd02203bc102e5e05182501adfde070fd6caf75cb26292c242846131512314f2a49219"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220428d1a58e563f844783b7ccd1ad5e5fde891c7df3c68a9462c16c2473cccf6f502203102a61a14c3cff284054fe2c0be781b5a1fd94fb41a27fb0f4d22c940a4f166"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e5e48a7d1971032330a12639260ddfeac1a691e5bb595f0d69ad82929cfa757f02206ad372e4fb67f0261ddf69732e7552dfbf987acb64862bc7e68ff594eee85497"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "30450221008e02c726bf26cf868c71259a42b689a44f9831959d0ddcc5ac383c84bb0bbff10220703c3f4703639b9419171a58e089c7e51ee700aac154b160991b2085a90f2170"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30450221008129174f55689c87a4ab3bc85460c2ad3ba932bcd17c320c838f49ecbc356bcf02200fbfa2cd5d7cf2adc1d4fe510915ca868c0a561b4eb998f353e055638c424add"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402202a0bf116d4154b33114b0be1c7aa85d252905fecb5be1c489e7668bf82dfea58022036cf082026a3996873d42437aaa9c1fbf19f700aec2ebc4a6ac5a00970661b4c"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402200c2673c6b42993111017fc5833201c80379c9bc28f881a3a38ca28be39853f31022077121421678b7ecaedfcb48fdae63cc1ecb466197fd7ed4175a42c922ddfa8d7"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402205f32f17f74c43a1e9c8aa74ac1cb89de40635b4d889741640312811d55cfb7740220367e54d0f0a6bc2a700bf2225a6bbaf1f4f513a434fe051c4b4813214ea08c96"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "304402207a64c86f6486e36798a3f4b8bff7150c4557e3053cb7be62a631b59d9f92bc8202200747e18e9d61ea9b5fc5a71634ad0dfd945b7250f99a2743c1cd467f4038955b"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402206e2786d2a7c562a6827a8592815e65d9d05361a1ec93960ec551567fed92a63b0220453ed621d94f50995f5dcf643b43c5578bc7113ef6de28a3a6b0a339b5fb7820"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100f325ca8bdb8cde9ab52819c8a42cbf4a56fc7c76c1ce360fce9a9cec9dabbc6f02201ebfec336a311bc0c048563dbb7f6ab4813c74dcd6e523adcf7daa36f960e3da"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100f9ea4f723651a6330c8d7b0f86b576eaf5361f3195399f2a4ac4c491f57af19302202d568abd40baba609d09770725cc8082aff931e4479c088c5fe4a8955a7bf0f7"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402200086597e47c7904b3c09b0c56b9ceb6fb4dca06a15be4403dd49453c72bcce1002207fdf13e03f995d979b3267ba54811b37f4581c8589b5b42077a7134f4ddf4385"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100aaf3d94f2a63c782c0c1363827ad6516e5c5ed77350bde5d1dbdde75a302fb1c02201fe0dbafcd6fe5d4207c5db5b9e9d5e6e9022fcd8ac2d4d0c5c94d95923b692d"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304502210097c9fc26409515773823ebbace587b2c040f78db00869eae59edd5f56a88e72802207eec9db2e4a0833ffe59a7844315e17fbd61f0eb8765fc8d949f0ec6ae6b396b"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d58d63c10f6511ccbdc33b8cb8488781058a1bdf3928e64bb36bccbfd44a4e96022021a4100d03e77be004257b8f1b4c33d9f9b69ae412c7775172839ee2230dd686"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402204a0694f24bdeab3eed5ffca98067732394adb6481f5f2dd06f5a56d1b77e46d0022012bd7ade8fcc824119d4503f9b8a8957bb1b60780824463a200200a7fc9e53c6"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100d4d1199abb383ca579c0716cb3367f0ce1d05a2adcee57a3e48c74a0de0ab98502203ea437971339956bc78b05ef230ece1e092aff7ba9a1c3a3d0724fdf022b6d39"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "30440220258a912e86b9a3e73ec551693b63fc37e1bcce2a37a297744922d0446403b2fa022068429c027867e879e7696cb0303aa497dcc75d24673eb5a4fcbccb8a9652462b"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100ae64e162a06dae806c8d9d3bab0b4db4414adcb9319d7c619c5a39dfbb705f44022038f88abc2a18f8dcf58708a0818df060b27c35484185100068e0b1c579ceebea"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "30440220682d1d814608a2d680aad01bd2b7b7a02a413617339488f2607333cbc1978af0022028412797455cb32181b5e29e9b4f7680b4334f8a7c02aa0f18de0b48d139ceac"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022031fb26b688bdf77b431d294f406f7a2895354ce5ee8276d85a1f12e05234d0bd022021f6f9c04c05da8aca0fd552278384a2f87b16166028dad951e6c281c5cfca0c"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022003dfa8b8d04150e6a11de1e7f4453cf9abcb7efac92b0e900ebaba9ee5db31a202206a3608beb43d3a86b0cf66fb711acc3d27d61cbdbe47b7085e91b8f5fb9cb75d"
        }
      ]
    }
  };
  const EIP712 = {
    "42161:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "3044022020da162d81217220a0ae92baec05c5e99cbb391469186e27b2609740980c7dff0220285603f10f261ae8a02779cb97033906c5a7901c9e3acae041c2385d17182290"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3044022060df9e42841cef20df24776b08774abf84cdeac36925b5c5817b02a57138718702200b8d4d0c56f01cbbee2334c9b62d05324382acc3e6ee0b5426871ee1117d921e"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "3045022100c72efd4fb5d926b6ccd016f43b77da6a4de3c7632b45f3f24ecc63bbe4a16af60220068812c772486ca2637242dbadad9f8f205a86aed091812bcff79d93bc4f35dd"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "30440220717854aba5ba0b46dc63c80f47958976f3a947eefd6cde16cb929caf3ad09e7302205e6bf8d1cc989de5c016caddbc068bb48664e258af1f9ca5a87d756efe6fb967"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30440220531b40393dad97352a420de7d6018fceb014d5065c415e92981cce45e0ad553102205d6ea2ca4c7f6b6d77cc06882507aaf76fac6b5bcfb5d53325a54be1273bbbd6"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100df54d3f147f984f8065804e4d549bcd65660e627d1a7022f4893ee0c4a9c51e202206b468260ccf25d84294a6f20691a982701f7e290d71b46ee5464e13e4adaf41d"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3044022050a705227d3b7b1ae5fb8bb170171b47ba7f54243df6b417f669bec5c6ae072902206d293823929e946f2207efea226dfa0e0e6f153729d5351e664da007bc75a6a1"
        }
      ]
    },
    "42161:0x7f069df72b7a39bce9806e3afaf579e54d8cf2b9:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "304502210086b3dfc9a254c1bedf6f227a6ba373df5830ed15c8cd076ab81ccdfa1d9704ea02201a322596fd79104092cfdf1bb50e625de21a5ae6621d324893533b5fd09bdf73"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "304402207836e75bba70bff3ac5c36cea8bba78c5ce37aeedaddee4d96f23ebdab274e2a022036076d9f85a3c5fab437e72dd64d12f12507ff34ee73828d5639a848dbac1f85"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "30440220571888fe4f3506e4b1bc43275c554155d341920de4a278a0800f549b2aa6a255022068966b9c660a49b2c716fed81456c86f44fe35c3d3754935276cb068f16df5c2"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "304402205f609a2961506951faad4dc13aec38d58d5080db8a27ee1c1952c3f1214ba98b02202dc979a8570e5de74eaaea90a5ee6fdf5b53cd6595fdec01d5abf0f0a07c18df"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100901ba5eb97a5605c0df7679c786fdce430c77609f99d659d77ed7531e219052d022032c7a24f21c267cb59bc06a5185249c446a728cfd9986ea8e3b3c1be565a7dd8"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402201c104d5b690224cfa88a5850e36da4fb4a6505f573eeae7243d42d5e8034e35c022064905c462daa8ef7288401420f293404196eade3878eb79f974276ac65fdaf7a"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3045022100cd448518044c4bfd4a0773c00d700b62a35fe208d27771caaa4239743736f09102204064886c6f5272ea4545977fa1c9d075e3abba0655de494cc81bf969ade063bf"
        }
      ]
    },
    "42161:0x7f069df72b7a39bce9806e3afaf579e54d8cf2b9:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3044022017457b1725fc3af0932818d7f2e727510326094bebf470c313c726104201f4160220233662309328ebf5acf57c1a23384beb8d29b6c026c3084113b3d42e16ad3094"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100f26083b8baa79070fe0424f6b6f0cbe1a6c49a6f7aa00c322f1de5bc6634144202205f49700d5f3360654764353c9ef75a6bcb9940c2cc7a8d0fa3bca82c40ce96c3"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "30450221009645af0129c1eef48fe493097a53d65edfd0c5ae98d629c0df620cf614be733b0220678b62c889c3fd0f603c649ff14dcb73aaf35e9fb1a83f6973dce08124d83f6a"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3045022100f125cd7411d56490993a59761dde9ca23059e0c58b9377002eadfd6c9d43d06302200c897ba6b5b1117fef1b1ffac8a6bdfa7757708d807c57e7e33399da7e26d6e7"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "304402200184ccb2ea4401e0270aacd1e86c8b4f9202b810d75394b8edbcf9e2c132ec4502200095fca182cc6b43493ab19dea133a18196dbdcdf88b7d0bec1a4c44b724dc41"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100f5201cd05e1cb877d50b357038c53a2d214ec4c696fd0bcfebb004870ecef389022061fc6a4d236df3ccb6c1296f8583296e54db8e73310178a265b1c65b3b932b41"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304402203bdfeec857a64ca1eafba51d77d090936bed9dafc09ba461ced6c058b02758d402202546dd5ab8a003490c5fdc4a789ffeedb9656622ed2ac867d2c712c68ccab104"
        }
      ]
    },
    "42161:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "304502210085c3d02e3f1d2d9dc6bb9975e46e8b90e514d578d9e6974b10b3cc1bf4a2fe7f02205d2257c30412b9067a707f8cfa8da92b0336faa39a2bd7099d2b55e0a085b8cc"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3045022100ff187b0adc9b9e2b9aea716d4047d2ac92c44cd0d0f2b6ac09ec4b52d89e9dcb02200b18d913b72125c7a2d6083e2097f786979c04056b881e44957242982a81931f"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3044022038ca4d34df27f672a40cea96f4397c70148e07a29662601ad765e01c71a5aaf502203c88823e913193f5eff4b8f5eee72463b660b6d146f589151af2164de4d6bb28"
        },
        {
          format: "raw",
          label: "Maker asset address",
          path: "makerAsset",
          signature: "3044022058de4c432c785035fe20e160f7a98a9ebfb1152df0c61d679b0bf8cf838a3412022006447e72822301ca0fdd56cfeedd0ca04cdf018bb600df3f9b28d633e90b65a4"
        },
        {
          format: "raw",
          label: "Taker asset address",
          path: "takerAsset",
          signature: "3045022100dd48da4bd40c2ae4e389462e9792c67bf699749fcabf954e0121c7759a499ba4022011b3c12c7d356a8ec62a57643eea50fed6d831b9fe95f94a7b31c4d1ba8fd887"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "3044022074fb2c7f1569c685e740015a91deb0cfaf771d71ba0fffcd14c24d59023878fd02202488ff10efbf225f1750ba334dd885f7966b3be7d57b87bce966aa3aec7fc3b4"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "3045022100ec75b1e6c770ab39c3dec4c827af340b13750d55436002504e8d27872284749d022048dde24cfa5b564e04c3880febbe40650687ea0e85fc634d27f18b95c14f8e59"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402205ee3c0ebf4735b3e7209237a2c4a745ecaa8e0310a7e0b33651aaff4baadd10102205aab92e8cc4444f900e368502e8424d5d05d1216a71e8b4dfa1a30d7ecf29e01"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402202da05529a3b7efb5120658b02f7de224887517b67c26f6cae85c3b4a52d9dcdd022071ecb8acf9bb2ec27d3ef5564394a48192692c1214e3c98f87e651c7c6353994"
        }
      ]
    },
    "42161:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "304402205aa1d43c376b38e68d4cf0d9fa51da49572de9a7d5c8e2fa6f0bb1430b522abf02201e8c73865ecd95e36d106a2fd58e3eaa7a73d6181879aab9254d66e45dfbf16c"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "304402205cc7b36d3b1cf49f956486ba56c571474b1c2dc74776f3d73d1720f402578c9a0220781edc10e5ee70a56a65881b9a4510f2dc0227899664d6ff3c5ca0465ca4b6ef"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100d3d524282bcacd494cd6b72b148033f17fe05789032f5da58944863d24259ecc0220228df613f5d2d2f3662c3c35ad3316ba5a231d95b9fe95cfc39d433b9e0201d7"
        },
        {
          format: "raw",
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100c8e4bc97eabdd4b267c6733652b735c011cb353bcb14b61ca8b2c732a701db9302204f35ce83dc85008afd0a93608b531f0ea5d680472c077d8dc2a32cc5ccf581c4"
        },
        {
          format: "raw",
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "3045022100aeadd32775d3d63a1dde73c23fab6d7fef0375d5210728fd8f2ed56adbee5b220220462f3c126c78dd0fc9499005b5ce3b81c995f11c55e9cdaf55d19fb1686f853e"
        },
        {
          format: "raw",
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "3045022100f6ee6ab28521c9f282fcc897f165e780ec9b0fe9268f2a18beeb3c67922ca679022055a2d60bbc05145e3b55483b502c576066469c6d6fbb9ee3336a16b7b5df4900"
        },
        {
          format: "raw",
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "304402203c84ee7655fd53fbe7eefb9e7522eeceb29bb7f03559d5e0a92b1ee55e711dcb02200c99dd941f9e58b6b0f28e592c089dbcb245f73ebeddbab9e2e88defacd186df"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "30440220109b530322d864a1e29d431a00f0dcde1cd165a2ad11b021eef605074d4c9758022052f04b7e2a2cd70cae54a881c7f783fcc2058d5b2791b24bc557e4e231cc2dff"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "3045022100f85a6ad793151886d7b4fe8902f55b81e4db1ee73589e1ed180a3f9b2285288b022023d061e2f9694a086229fff173f351c630e907806e8e7f80e9fc154a510962ee"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100d97b6d8cadff2e066b43c0bf3cc363741dd3227c9989ead29a51466f2f1d9cf302205b76c51c2e2d2e75855acf5416be5e3a066b2e671884ae81343cedf9eb42b7c7"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "30440220249407bacec2053557a7360ec596daf931fd002c31f77acd94b151a035728bb7022050769d692217e817efb3f6845dfa293cfbeaa39f93b97dac2d063a4be7c44cf6"
        }
      ]
    },
    "42161:0x912ce59144191c1204e64559fe8253a0e49e6548:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Arbitrum transfers",
        signature: "304402200f7f97c35bb60e6f4052b2a129740c55e716fef26eb0a83a834bbe03d7d82c9e022047b2d37e4149990d28cf1b1b1f9caf803259cae2a343ff72000eddfa319de15f"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3045022100db5520b82af16dd2ac45775fe3db20db5c9829b47b847616b39fa1744685d13202202d1a2c60d5c500eb1119ea52951983c686327f81a0f08d06e58e18ee84486883"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220556ec93aa29917934f4a3626de9b9a2e9ec589446201981a05a860696d33e97d02207792c8caa52e5bc7236d81d11e71bdf9d2845a3b2d7b3a3e99e7371736152374"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100b93ece9ecc26af9239403bf579b2e522e68b44b384258e1d8f50b7a8a229f93402205a619e93f65ede98eb3b9319e0ce7fe417a789bee3263c244ebcd7e9f83d10f5"
        },
        {
          format: "datetime",
          label: "Aproval expire",
          path: "deadline",
          signature: "3045022100e975f5f3542c32803c99b5ee32a5778e3a519efeaaf39c73aa5ec05c6d17725902203db48f7cc8b78d76fb83bed5cc158427193632557621914d8b1f8d4d48098e68"
        }
      ]
    },
    "42161:0xff970a61a04b1ca14834a43f5de4533ebddb5cc8:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit USDC",
        signature: "3044022028314adc36ce0808ecb88517feae3291408503877c3bd9abcdb8b4b24de83f5102207a92d8ea367676eccba14c0aff75efd66b141debac865dd7749013cc306645de"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3045022100d2b596afa0df5133f55d692928734bd15d46fdab388a6f4f69df43420bc99a64022066c087594da4c6d57c24e2bb7c333e78290a1f7f8f9f8262aa4da0812bea1f60"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100834772d8adc519f3a5bd4a6ef33e45c8ef3dfd2c9290afe8e33cc57aa56c4dd802200d7306bf364284118da4710e9a9fae3a0e7e3579206cde4543158e85c3ff4b5b"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "304402205fca3403098b44021edd93cb6d5ed5d89bd19a4f49f72a97de154097c66df3cf022070d298dd840764be6e50ecf7e1d264ce9c8c791af5ecc18512a0d26ad5b38e80"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e24a48144599316d7b8f05801c5f28951c67eac9a0ce594ef6b835796a775e260220624f84246321314053e0756f638d2ae46ca54bc1f6e07c24685d7c301a8d496d"
        }
      ]
    },
    "42161:0x789fc99093b09ad01c34dc7251d0c89ce743e5a4:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e": {
      contractName: {
        label: "Arbitrum Foundation: Treasury Governor",
        signature: "304402200fa08b5ce686eaf6bb708211bd4bbfe2d4e278f6966ad2e481be73a472bb4b46022067481a8a0d0357e42592498b0e099f8b1313003c423595972bfbf19add008e58"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "3045022100a464daba1b2a7a35336e03fe0c68977597df0917dd14d40b5b794dc12dd1696a0220594ce98bf0fffd98a6717c26465b1c67f14955cd0013f0b9817d85d771ec0acc"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "3044022051f41d12c90d0e82d9724f7fe43d5b9d035ba46c160fed7a9d6026b8317f80f7022057f325aaae71c60bdaa9bc371a5af9a1d4a5354a7f7dd6865c36faaa4ecf929d"
        }
      ]
    },
    "42161:0x912ce59144191c1204e64559fe8253a0e49e6548:2c3e6b3e91e39ef9bb3c1b1cd2b4d8da76bf433179c8042962671278": {
      contractName: {
        label: "ARB token",
        signature: "3045022100d083aa12bc96ed7568942bad291c90fa0710b984b6d8693021be961d99df15b702200d29db9c738e3fbd7dc3d21612833e32b5e2f197f8273662ce16e20058276a47"
      },
      fields: [
        {
          format: "raw",
          label: "Delegatee",
          path: "delegatee",
          signature: "304402205274148210b7cc92e2714d33d5c7c280ace94b9d09b41539af5056ddcb588b9b02204b104de75d5fb03f4ec1b455b9785a3c6f41a897142c40f88bd0e27a51ac940d"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "3045022100fdab6f7a16e999d0b0bd2fd4be92682a0c65cd5ae928ed3cd071b11ebe5fbc7702207cf139627f6e2aeee8b0b22fde9c1025cb847b2ba3b4d27a4726e596c284d62e"
        },
        {
          format: "raw",
          label: "Expiry",
          path: "expiry",
          signature: "30450221009d00f19bd6bc9f14502c0ab2ff54f372f00c6a153083898505f1b9fea585b70002205c1b4afbc7efc4fd027528917d107a95b5f24caba816806fd393d4e419dbdcde"
        }
      ]
    },
    "42161:0xf07ded9dc292157749b6fd268e37df6ea38395b9:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e": {
      contractName: {
        label: "Arbitrum Foundation: Core Governor",
        signature: "3045022100e328451e523340c7f0c6229d69a9196703d33a9aa4920cc775ef4c254eba08b402204d3c4a0be0a1aa383c6895db61ff07623fb000773713a62e56bf107fa8a852d4"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "304502210087d449414d2e9d6466e5b9fc5a2a4c0f93e13b6674fb6f3b5673ad3fcc8780f802204b9e8b83c62042f4f4326d975b0f7e9ac8490d19a2d04f2e26568c3433444783"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "3044022023b69aa0f439df05ae5be7d03df5fd69ce8a01fce764bc1c8455d2c92106bc85022027866dbb7c5e09eb70f90329dcb59c90a87da90f2b77d17c1f74a9c2e0f663db"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "30440220699737c39cd9763b66d094ef1d30d3985c4f11bc77007df7fdfe3fd5f3d80ec8022003eca58128646ba5cc121bb97c12ab5c9bf36bb9c5f9146377edd55845d4aff2"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "304402203b28bb137a21a6f08903489c6b158fd54280367d6bb72f87bf3e2f287a92440f02207ecc609b12b363cd0e8cbef7079776dfb363cef2fc11da39750598ee4cda4877"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "30440220574f7322c9cd212d295c15d92a48aeb6b490978cb87d61fe8afb71b97053ceb7022016489970af3ff80903a45a966ea07dd9ca1435f6b6da9124e03f3087485d1c5b"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30450221008eecd0e1f432daf722fd00c54038a4cd4d96624cc117ddfb12c7ed10a59b260d02203d34c811a5918c2654e301a071b624088aa9a0813f19dbfa1c803f3dcec64557"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3044022028b138c9282bf40e9e0bed34748c90d44b35708658a5fe4f896ba1420fdb62af022026e992a5bc05b455771c7c3706960b271de08ac063561936f2b2a2e90cccbf27"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100e322fbcf244d817c6af9e807d36f5a0eb2db21309c07963e826ab5d20c7dc278022068ecb28b65f9844d40ef09e7b141bb220d30d25a42f6ba4a648110901a79c191"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b9f0229134290af4cfeb549204eb02bf34f084b1d0a7c8f161e6beace10dcf1b02203ef40e4c9e88b83a85f0af47b54fa142741bb52ef26302c8aa46b0b274d02fd2"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220499a5568fc3fcfbddd904caef7ed16253e147d5382c0181246f9412f965c802c02200d9ed682e53b5d2f85afc84b74a842618f72840837f352afde4c1a73266f96a8"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100f0b0c01c84bc6139867685ef53afc3c2f16824a3549130b97e2d274c83a5aad80220780ed890bd5542e2d22478e6e51bfff578627dc39e82aa2539d904f67fbcb444"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100e54a786bfce193e6dc5235ab0822b3c59e6bb43ee0cb380d9fcea28e7e304d26022027ac09ac82735d20cf536a1913e385a30c57b1aea7aa681474423ee84af4d00e"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30440220151f7cf9eec316456b5c37ead9c2bb01ef02a55cf801a79d69cd185c8214531902203e30972666c6bbd4786daf27a73a05191cf8d08e2c4e0ae7b30b93ffccb2988c"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402202b9e93d841f3f81b63f31cc974d7204bd9c7c00ff57e7021ce3296225b605f04022026293bf2777b6b1971b5fee2c6aeb5e07623f6acd715f39de88796774d931dab"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100b927a3639c291f1c5f5a4459ee6e9eeb172e4fff2639cf2417a0ee22668ee785022016f22532a98ce38d2fec2956118eb67b80c748e012e2e9cc119a84618fd356c3"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022070df47bd9af9e8f70ba486b5188cd24ff2a6a7b7963a628608936986713eb108022023440cee1a31e3d73489a849ec925a85da16d1c096b3029d4337eeaf46a26d4a"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100aa75f292c3029cc67e36c91233b1f3a968b487fdebff9b179f0cf80dda60e274022065e8cbbaa2a25c73477c76edfba684fb3ece14a390ed05fc6d07e258ef777def"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304502210087b5fd4ca85d8d902459aabf0cfb97c676809c967b84c8a8301838f54d2f144602200d268e03f892d81b35ac1bd493310f4fb65a202c2ad2ebec3f427978756b3106"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b5e936abd5df8c51ae2ee04b8f06e58162c5702083fddce3494b19c9bc9c2e01022032e9c8fdfd04c78d70d0f1e03e1fe716afc7bb2d2f643cb4586316e87a7c2150"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220125f3c8832b05bc42e224f0607516500d37871d13a417b5726995fcc2d046370022072bb072b344a1b426a8d2d80572e95bba4e3113f73e32d5da63243847068dced"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30450221008b6d55b1299546ce1c95f1c2aa9ac5587a565f8972d16af11d0818a42ab01f2e02200120350300078049199f8429ac0dcd326f17aa76890c4e5b033ec976cfab1819"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402205298d4af21719f53590aece55ed00ddead2c2d779e07543100d7444e3633088402205e956e92d57fb05cf467c331c59cbb067ed1f5bbf75eeaa9b1875a0970c14354"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022070db1a59aa095548e0c834d7e9181d3df598f01432ce1fac9dd92f6d09d8954c022003f24e083a744c767f7b693b2f05988d57b8746750013eb4bba5071a1bf75f1e"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402205cb992ba630452b43cc31c19df9a6dd6287a31fe3e8b67ca27880acfd89cce65022009b13c4746edad9a5bd39b82911a68b0be7f772c51df6617f7cfd2ffe0645bc1"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402205d4def0d4820dec59e1705730f3a18a5ca3ddb6b8580265420049c7a522ba0cd0220737132ba1352c7b8dd8463d871cabf53a5dedf5aee68c7b1172e833806aea572"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100eb5d8a309b9b9865377f4b430acc4ac5845c6b4339ce2bb9228fc76947904e3b02207530da05e41c522a6385d0cb586cb459305e98b45d32d0decc078081781986ae"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "30450221009f9fcc4fd4ede454b777009af42cbf3ef775c25093569172de07e54cf5adab82022032c15d56b5d2168a5412645f45af3b1cfb37afe499798561e4269ff4be8db15e"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100b3750d69ba1ceb422b418946d10e3cb101b19c28040300628622cfaf2e3984c5022003f355a155850073b1511f6109fe1d2d0d178f81f229659b5b4277a1a322c06e"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b7d9aaad264938c68c358c81da5a0bfece07b718b547b82a421ec2958dfe8cce02201a58b6f6cec2a232cb9f974b0186ffb7d2ebedd2899c81c8774cb4be9358a289"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402202b0d437ee057d72d44355f2dc3a7deacda38e0a2ced71991518fbea9b90960f70220391ddb375c73d69fe9ab7813ed053321692d7a299d8915775a60ea0119f0dcd1"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402206bdc4e0b58904700da7ac3efc8ac7184fc9440cf8a0ef2d2b32575b15e76ac1c022022d242877ae28521223cb3c1af1ee1bfdec437767c0ad0dad507299d22a35d4f"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402200bedd78431804f42108d7b7d234d738674eeeeeb31f937cc38db1385d9da037802207067059d63c01a8f8fa45eca2fa533cecf8fd3553c7893f72348859a5b91decf"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100c95b822cbb4c7a80faadd150e5f8e88ae01f25330e70a0f28671ea495ae8f7ca02207221c33dd32e571c0c192a5a7789ddea2bb776f7c6080ddfb54d3dbc022034a5"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100cbc2390f81a6af67d5225c34c51b2289d0aba65ccfff6cb03acf3b54f2334cc5022010fdebe0e5a601ba1ec521391805bf13dbaced0c707475b05ccaadaa82acce61"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100ebb9f99820a07f27860036adb3ba27eb37bcc0024e79e38c0f39066f1973fb0c022054873d3322dd59dc5ef11e252ee2e6f9d9bcbf9aad645732cd601a3a74145181"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022023711cac25abd661c6078cb2efd72795ccfc94da57c136c11569369c381be82c02206a616167025ddbab91ab5796ff5be6745b1929772597bab447e57baca50d411d"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304502210083434620c922f238354ebccb1c9805bfd819e3d4d53a392dc669ca5d4dc2e22002204df1126d105ca0c904cd6b3a0fb824f7c8a04583a1320cc240b312258b387a08"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3045022100963447dd2d0e26370bfc88c42fa2b3cb1b2220c985d281aaed627a14732cf4b802207fd61acb22cace24228c1bb89143f2ae6d9b0f0bd1cf28e64b6bcd37b45bd4c3"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100a53643cdf02e0ea5b8e3af8e95c4886aadc58b301a6998a534ffc4c6f46a6e3502201a9cbe45b27e22b5ed7e407a18e1e7ae1eb8fb71bd8b41376120af9959f10af7"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402200eb64f6891a2eb7ae9ada0e270a390542e799ab13f943017c13f3ce20c05e289022006cf2e8be17e5a26692ae4523e275b9b9aac7cd2b188cf8805af1ea74b67d477"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100a13f58bb5a24056fe745a8e8d395ae68f0cb4df88faefc2e5e06f94aba87dafe022039f1ca74ab9d53ab274dd45a53aaaf54f84bdd3502ee862a9e9641b256476a5d"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "304402203be58e94aff13fc37521246358d270ff53594d304787de4cec5806523c8dac26022033b0db55a67a345f6db243a9c47cb10c257ccc987878f0f9c211dc904f29c4bc"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3044022056ddb8be9857a616ac0fd8d07ef87ba9585adfa5f8a70e39de39e9421e3158d4022063f5d63bab0252445849a2ff57c17060f14028e0b6e4752ce0ee3c38cc3606d1"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100e52d8026ec5618bf67ad9286db3003b7c86c2c133ee353b9abe45382a87509dd02203a6be936b97685161a61684d3a21cb5e722aca7df0fdb0832a6eb8579631f77b"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100a7240ad705d52a8b36aebba31b7a44f825de1f2745314fdd780862aa79fa0bad0220696c3dd360f0c87b7cbffe881e42aeb61df839a24f174d2a063464c27df8c2e1"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022017106c59ebe8949c98ad66509aa8410fcb3431c1bed7318ab38ce23370e9276702205d886c5dacb52a6f06ac0053c057af671a0a115f79fd8c0d39696a994968322c"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022037f20f92910e9f73f6b14c8cd48d3d0d163fe9b3deb87357ec331cb2355e43e6022050cd5fb2cfd7dc71457a10ad2af04dcac63f519d0ebe3d42b3fa0dd4447d4328"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30440220336b7e6ff73fbc946df332da5d3e3869bce84aaec26842e81b7660af428f11b902202ecee1b791fe077938dbff76472bbfdc772dd5c1dad754ba4427a1758074d565"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100c653dac1de42e9a06e91982e7395670fc31213804fdad1aab5f80b48a3878bc502204a13ccfb0442383bc6e5a8848a14a8fc403f18d673581f0987562483d756adda"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100d6b3200366bc308fa9f51f9d11e987a7893fff7e74e1b74be9560398e3de143c02201530b59f0fe68b61d730e139e536f8006289ce785fa5336bcf36f80cced7c1f4"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220467adf22e4e7c7429f91bebc3f472e55239faf3e2416351c832c122781faaa9402201015d31677212841b284d59f4f5e79666bbdc72965d01021a2560097752355c0"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402203d27cb836e2e16e6024713e81c08ec1749c572ccfdfa21f99b02b8463f859fd802203892cf579d167486d9b301969fa4c536c7114423bdb187384c1bc250ce3b7b22"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022037ab41e91701a005e4370b9e4d08cd48ad6b7ad2370c05fe2a1e91442b98ca00022053b91091753675a3521d6dd3bb862ea75d41f0737bf256ddae9abc1f82b9d381"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022050fd436716794cbe59d75015a7b1ae8f831807df2c6d91723bf433e8262ee50002204edfbd14add2c0794529359430e5b1cae049212f473742c06a78f968ed01323f"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022011a4f43a11fc810627c39495ae0a2a791f3d047a6bc5abfcc5a6ce899c57c61202202e83c6d913a02856d4469be71df1010d296b12e3c7850b424fbb5ac133af3538"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100bbf71a0c481ccb366e823afc0af92f27c9e34b490b69c3a8b2081758ccfbac26022062bcd16bc0be5d18ed125822850766b8b3471fa6a590df3fabaaab75d5d85c0b"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022031e68245c40678d1dfe779872ab40e7fee3847c97a4f9b8d7a3d3209f0beaaa9022064a085cb28aaefe6f7aff7ca7a3ba5fb6795ccb319c82068ef554aa840c7b0bc"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022016106c023503e6971830501b7917170aba46d752c5dcab2c03e8001558d70ba602203b84f821c301d8c76808ecd28125880d2b67fd18f8c9789f59a254b71f1103b6"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022025d4c29f2bf3190ac638a8c44252881f9fd7c119d9792a186a993beda543979102202e553a2ff762e0b4421b5b94f6a09b39bd80b51ccca621bde18c1d020295e1e7"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402206bc4e8a63d673119b11c62367dc9f91d7cac4750b11a18a49910fc8c8dabe9da02202e5b2724e6f09ae4d1c6bb768217ee0b4b433e4d0f8c10c899cd59f2f0d6ab5e"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e4b0447e17f8405fa5dcce533203a1b261d85e4303feba4cc6172f431b4fca1f02203901d0cf8198bffb13f60fb63a1b7ec29b436ad0e074aa9336e2a53a725a1c85"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100c16340dca02b248381232632fcd37b3f8a340d6beec7bd221c7ed3e6f404960d02205750f4090748bcf7f1e3d62a76a65d0f5692cb76857c65aec98bd88ea8db29f5"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100a006282860410afbee02a5635a7ef399e6f68359c6d6519b4d16f907e9abd8a802204b50d873637823d10544ab286a96a763e747c206b538e46c8b03f752a38f1474"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ed0d3d08389c58dca517c3e7b354562deac1988cc4e76c09e5bd092571c99d91022034a9b44485220f2c7c35d8e35e050ac1bd16c12277825a97449ce0405d5b240a"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100bda885efe70df34180641b40119b4c1ecb6ab2f6eb0f0901c0cf51340b5a848f02201b81df5ed60d4646a7ffcc6b9c7d73a7dfa85b7de94bc4d0d6b28a9b343489d3"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022041c2f6e90562da84da84f478686678bb363ebcde969642b0159242b6bbf9083802201f386947f02f5e0eb2c9b752f3684c7ce58a3789c20e1e1605a6c7a8cfdd75e4"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100dda0afd4b606832d1dd6c0b689a01c12e137bc79b2302a9acad05934f517d6b402202e0eb8bc26a499dae5ddbe6c7f0f170b6b69e1ae32a509fc03c5a027e58d74ec"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3044022070d4a142665ab0e7305d09d83e8146593079cf9422e2fabb33a3172545d920c702207511c07b12af5e886b5cce631bf42f1315d6e5a01905075c8fb4654d947a837f"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100c1d34447ee07cbb18e09cab3912af57a37ce1f11f00787bf46d7484b806c7aef022033754a8fe682a62e78a60c0a469d29a9a5bcaaaef08b8def7af28a55a8628d2a"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100868a44e4c25b04b725a176b8f7b4eef46901da86f06b415cffaab28a3ab0b20602205a81621e8257c061154daea2240faf2d17841b9dc60bee6b4f258d5bf8b69d42"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402201a965cff40403691f6a160869a7771ca1cf0d1070ab7f3b7205487bc1629ddd70220522c0135a82d8f0a0ee789d5c779e44e81558525e8df54e1777acff5d328e451"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "30440220582ce1fb28d598b1192c1e11828ec9c26628db5de0a98ddc18d91d56749e7d32022027f8d90ca2461274278ac866a85d67ddcc662c5bf61de2d8e076b752c66fd9f5"
        }
      ]
    },
    "43114:0x488f73cddda1de3664775ffd91623637383d6404:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit YetiSwap transfers",
        signature: "3044022061c93c53b0c2335ca5f757d908f74a4905721eb250673a29c69a698860552f1402203f2650df17b5efebd1a11f4de73f8a87031f60736b6dcd64b148785f1bc07452"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "304402201eae20831519d5af947c9a5396ea2836827fc0a5fa00a2a0839c975e853c1bbd0220719b5eea76f03cb0391341dbf77a3d093b8a625a109d5770ead2b72a8d72e49f"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402203bf42146dd0e211e081696f99e8f4a6b9df06b29f5ca420ac2d16a23067b538f022016987f7351bfa2c43d0aecef6e9ad11cb48ac6719131238c0fef62e26852f7f6"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100c7ccfa8f7fa06c02f18d0a5c063dd172e680615f9104c2e3206183f21b023a4d0220040cd55acbb6d3f2ae1702d424ce8fb4705350607754d703dfa5c4704ba4d205"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304502210096139847197e938bda1c4bd88d6510eafd7ab42cb044a4673896ac75d5761d32022035eb28f156f09a7c34882a1e25460b0da17862be9cfd2ce108f8621b89ba118b"
        }
      ]
    },
    "43114:0x60781c2586d68229fde47564546784ab3faca982:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Pangolin transfers",
        signature: "30440220770892c4d4e2e277b8121044cb7b5756d5406aabbbc7a50056da06aa6df68f470220689a5eaa6da11691510377fbb6b7e03350b219ca0365fdec23af1b10e301f918"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "304402204e1a437dd77b3ffa34ee991ca19e17661de82c458923a42d75875df82e360ccb0220719ad40a493290ab6c009a5e88e1da06f4aa1d0ce625a8d4c573f7730673e56a"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ceb969e775648a8ce730b42ca117980836855ddcc8d251d0fddb9763e520ba9302205020f115396bb7acd2d6358dff6c3637841fabd08aa5bf191bb83ff727aff5c3"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "304402204b53d3376b699e1244683eae305344b7c76b282478a75d0916724f7fdab4bc0e0220072220dab9922d81cc6a8fa70efc40a4a7b386e7abc689da518f6cd672b66445"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402201dae53c93870f56d7eb5d8305b3c2b89fe6136329b231dfda2decc43a4bdeaca0220540303a29a72454ff8b1b722066a8c3fc99cb31ac30d44a8d3bdc36e8566edca"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022003ee948f9c65d57cdd893fb060db8dba8e4d13a8625b3f3e57095d2f8d42faa602207e7e8772cdfc984d9bedd1ddbd47147414e66de635a8e3bb8ac820a8a9246e52"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "304402202b820062c9fba51c9a9630b10822b9090ded1f20132469cfd8b86ef6b5ff9b180220188b061a1f10f42a2a109349e03f6c3072a45c7317d5cc8ba4804161bd3f5120"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100b90156b74860fd63dc360370809fa291ef7e9c677f4aa976bec3883c1ee6d28d022060135ef6601583db8f4b8fd13ed8d1da98215a065522d5353051d88481c12956"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022017022e5bf63fb42f68c6c46ebc2f3335b928070017b6d5ffd58cf7bfa713a22502202850975f985f4668029660914d07452c01b3017e29f419f99f691a7091fa7468"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100f6ba2fc3decaa942f8f43ada10f1118073086e1c779e97ee36f98258038bf92902200f49748a1efdd15468efa51118ba3720bc637325bcd56bc10f00ebd9da88dd40"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "30440220349868288837e7a698727e0f563945ed4cb2dd1dd4cd5d481f17014413337e1a02204c56f13d6c0e0d7e656ada6ea92ec7acb1cd0b01194eb5622c63afef19b53952"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402204d1b1637dfbac199b25c1185a3b7f0320c339b0e870db4229090e7078f96a04e02207a255306bd55d54b6ed1f4e392e12cb943077748f76d987c7bb9e52f3e17fc77"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402203d62c40f7dc97bcf1094b63ea42dfdf6d93fa810fe4135b68c98d4bbf008355702207763186f22961cdf6f6edaf54870e1712bcef9004d8a70523516c47df2708379"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100feb5120846a35764c0bcd0af55b69518b85714e840de5f03682c6a19142ce8ea02204a87c60b01b2952b149a8505fc3e553db35cdb3d92695dd87259972afdaf650d"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100fdcf2d06ac3900c78d1c84b54a2eb40da3b9d8db95d107420fe21e13406607d002207f38c6496e5b8def6fe8c24823c3ed0b039883c239b7ef3d043b58c2293b1453"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100d852355928712d8815b47acdec2a1fda631c3a828e7342603930de3827cdc92a022048598eb4e6d90897824683ee56bb123dc754972501ce07fd5149c29623f94ff8"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220608f164bb66487e40b58a0c04d9d44d8d183bf7f972f17b5447a6fc904521c35022058e107a79d22481cd94cc0478af4073acedad872b3392543af29ce89173d4944"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "30440220568ff6fb360044e769d02905ae3ee24278d160a5ca91b6060eeb188c6af2273502201cc668921cb26cef253aca531ecc5d46c3af788bbac3a97e751bf811963f2465"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e1ad96f1bfee5a1818087b61a8a1a6ff99a0a2065407f405dc935d0b7bdeae370220785d8713228cab5c9bc24bf0f2c3289fc9c12cdda65c179ce2a46c7f8f54ae95"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100957fc7ea168a383e55b7a745f75419a98644158ad71cdaae10f43736a784f73302206352c5734b77888768ce264c76dc634f4c64be9594b73c440887d1dfdec98979"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402205e6eb8bb7f353c47228734fe6a5b6903cc9a1acb617ce5133c679520a88f996b0220651328d2ffc2f36284dd1bf69557b960c6d5135eccd6fda600f87dd563b891fb"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304302205662abd6f6ff0f413a45994d310c3d657bac78a1fb70f73e82da358ca6c5ba45021f7f607412527bb58d4a61fc38affadcff12dda584bfe5a8431a86a7fc627b08"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100b8845159c26ab28de85d9fe3fe391600c377f412d477b88cc040ae36ed5e78e702205b3aed13fb48a7650e64b5d64160aa17d350ad502367d83260418399a45a00d7"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022077aa118280341537b155dc7e268b0210afeac4c3b9600b9102d86d5c159da2c502205c39a3993d139369799351ab11ace33d15437f690fe99f6fd4bb82374b06bc23"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "30450221009941627074ff9edf200f0831e7a1138c76e400ce5d81c52677a405362e5b9056022007f9a8392f0290e765e12e8cd665f20c1e262c6e24a37a8b298b5944e94399e5"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100b8b16e09f965ca6f58a5d4ac427a7c9d8a5aa2ccbb727d3895ffa651bdf478f602202a8ecccea26c7068ce240649b89ca9c87f5404ad3bd9d45162532b218580e7a1"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022014b946f532fc2b94334e2bfae4033b880ce7337534a1317e7e37a35a337efd4f02206c586e8866dc274cbf05c87cb99f7ca4cfa024f22af333de7bbcbf6555171734"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402201372c5ad1476c5ea685e6c446e0f59fc4840b26477f1c33ffd3ce61ffe81707002201488c5197d6f6496fa2cee35c00b684d1d0b1b2560c4d997a52dd2c1973325c4"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100867601927ebe4188c3bf88b0832be2d08336c7619d32ccd838ff4a2dc856b052022033092c29c3ba304313f0bee2c0a056eb26187aa2bf3c10c8023642e59a4cbf0a"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100ed2f0756080edd6b85b0f997eecc6bc2b0d88aac533023b69b9a00e1b317011602205b5459d0bbe244562169419af54c91ab14c88dfa320ae58c6709a8394e3e2751"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3044022007e15ad9f225b84f7e0e45ebe2d39389fc20a334164506260e0276e18b6e756902205da894ed8cf30d8b018e03f69b67463f46cbd7575c4bef0f8529e51db0f86bd9"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402201f900fb0163542f7311ebfe33b4269caab8e0315a66d3e48116a5f94a96e2b10022050c31c3e77efa383eeb843462e6d3f95ab62d0ad594bf19f572205eed60f254e"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100b8486763a7a95769ab096313bc39933c24717f18b39ffacd28e253c4c049104e02201211b21a5fd4d46f58dd3755f8924331089be53220a41e267f9431d8fd7e644c"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402204f35fe499aac945224dfe015ccf35eda3cac70196bc7979b200ca54a931483b4022057bd20fe5883f841f54510a622a00d8143d09dcb9e215fd264ba053b978b346e"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402206b25ac471491dff8af71c0b5d8da387bb94a5a85dd2395b369453b1198131d7c022025030238778b83451dea398875ff90b08b4d378cacfc1be7910af7bfeb3eccfc"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100ef2114b94bb44835f588e4eb84dd82d658c4b599f481b94707215408f356cf8502200bb3a79e2c7b0131ec5b48914401834aa0b93424c17e9c90dac6455af58c6599"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022060b25a3b2ce80ec450c3da93b4f355d0631373c1059013347419338a74e764e6022054e30b696f317bb323d1ab2565e998a9476cbdcd8b67db8a57ca9f45de294368"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100c6df0535500f31424657e310c37a60157319609aeee74e073b2609fd6b1c134202204f7039c1bb76f0de7e1c448e01135010d436a6e2573a780eea3c896f88ea0b52"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022057e68f6b4693885fcce2e68333fe9d1f9d9ddcf8b1c342ce27c04d396a8e798102201b5e9656718840318e7fea4fed2774f549d74c0897ac249cc8c74d7d78f6df6a"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100c0dd968f27305b74f7bc7bb0bde9ec7f32812a87d513d728b68e635ed07c693a02205189d56f91761765cc4d514efcdcd8d7ce5a37bd374e596c945bf1c598d5db2f"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402204b1c78db814ee83d9d87e88f7ef89f0f1074690fa6327f4d445634b24448beb4022030ae3f55cf0530aa104eb394e444b95c87777e798ec1e1550c668cd0e0e41749"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100b51ee5a33e2e0d77d027e8e20b6d681c79c7942eaa9a6299bc67a03156b1ad4402206597d3a6bf9043b71e0225998638bd7d00c9259da941ef3bb55d4f813d75cd75"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402200c6baa9d3c3fa94044ce4350f41440ac54f2895d689470e9ae1336884b39320902201a8c2763a5d9ae2fd8ce410b0541ff707e05e179620573805d188f38bd74fa67"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220237184fbd16a92abb8b733794db859ac5544164221f476352d86e952e1433f00022045d9a3f360452425093e746cba27b6c5952749d3fa83e8595cc5d92cb9b0cd12"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100972811f2bb581f2e08482dd766627d1b318050fd3019dbc4807b7e0c02b2875002206a2760fc74f9f6195a287702debe4f88452d2be08d5098a5d25eb92be01750ca"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100d8b5c3c8fe2f7acdcdf905da6c7001e0cd6487ec062135c15b85cd933c556ed402200a399ed01b57b97d2b19b4daccb52f272c7bde9014b7d41d79b8a085f3a79d73"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ec153713441eaf40cd0204e9cbbc33cd3d7c59fb3b1477c3b53220f40119dd63022069991f07b246ea82b63414e08fe59ca35099f8785b878b1edddaebb6324554c4"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100faed02db54b862fe8e7370b228452f7f3305a1cf680915f4641f5dffd0c936f6022037931d474b10a28e0b903bc7a78973c39dace44e85ead65d9417e38c91747385"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402204a384401296a49a2b2c297353ced3bebc66bc71f0810e4145d12a153f54c947202200e137e37904c9c2b7d9c691fa7fdda1d1882f184c85772fc5667fbd7a98346c6"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022012b12f665b396623211dbf67cb78e202147da7650ec856b128d6846f41f9709c022040de446130b2ca804e07775d46cef613b6c1cb902c003c624653add94cf151e5"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3044022036df0a56d9b4661d5c9b5f5e5167c63f212029889d963a05977cca0d2a62cda80220154f8b750cd48e3277846d7775ef03d825a46e9b51cb7ddd0543dda717fd8e35"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022028a31a24e9634d9f73b8cd7b66293a8ff55d169231a4b99cf5e31104053c2b5502202b13da42fa9fda0300276deeb8201e8c7f32e8e9e91b3017da2a09a92961a26f"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3044022004ececb7a100d7bdd4496978fbc6b6b1ea2dc7500c2aaf7ebac524c4b6063c9f0220345c604f3cae26c08fd309dd92df5f82cb433e30bd8af93b50d10a9b9e3bb4dc"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402206245a83c1e904563c959f5313917e62d3c6981c908267d1ebec3fad50304dd7b02204d7e70b181c829848cfec91404ab34d78818e5b20e3f952da118114864ae1943"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022008c3624caac3a314fa907d2158a43f6214ce4bb9b7b55f1e33bca712923b6d150220455cb39c594ac5b88fcdde86c12e34db4c3e4f1fb04b654b7083416782d94697"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022025de3dc4a6c31c0ff18772802c4701dd23ea7e7cba9edd8ddbf96cca3a3938c60220472b2c75a6ee54201f9214d99fd9cf184bca8136129e00e4361017eb5c451f1a"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b9fd6e4e25d4c9fc61d82e0aff4b84323160151e9adb3016a1289e496b20aa8a02202366d365fe6fcd63e3d9d4d4523e16e6495dddc98f5ca5ce8cd2e87626ea282e"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d2fc1aea5326038a4f9ff655e45c113415b1623802894e2161dfb1b3c6b95fa002203149ec3cb392fb8f211f24886099d0dfad20c2f7a16b132df47d701509f4248b"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220374554b6d767d5c64556091b7cd0bd46b2102c4fcf0e06b7f40cc35ffb22f31302201ef02778110e2feff3e91f7735974fe853e5647c62c5931aca90734ae0f0e88f"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304502210088dcc9377339158f7d85b323e11192080669616d4ec6a91bd2d540cdd37265a70220091f6e5ba2a02f111dfaa5ddc90016bfa10fd19e35e9ccc42a9c43b42abc16f5"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100850b00604daf1e1ca872b2c64a04f0f2f09596e724d42ff637d91ae783ed08fa02202db8c9294adb852171ea28f1465e3d3f02d30ba685c1184c4ebe6508e0348e08"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022048fa80368d01103c90e027729b47294bc7dde4e8bccf29289300e2dd6586b5a102206af70d016afb13480ba6d3b14d89557e2a7f486e2d98d1e7d09fca047c853e26"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100d6356531f31daceb8e3b2793c2e6dd0e529768d13c8ecc9ff4d6f89cf574c26102203760bb9f2fc5fc4db772fbcf233923e262f00aeb25849bbc0fc4b999466f0b0a"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022044001f5a950e400513e1b6a9f20832e37417397bbcfc41af622be5e977be9a3f022014c711ebe6b30afb347cedcef5e1f738ce4a4d4840e6ea1ed2e425ec9e602869"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022007d462a64487301f91fd5ebfbe5bf3d24029f29879fdb42718db10dae8dfee700220305d315a145198911a5a2a429736764ca4dd736b56af78830afcbc70c06ef171"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100be418fe8d24c526cbeb610530571ca02ae8c6eb0199af96858ac3db97d3ce0e5022036fc1acec0f0a679ca891d0fbfe88582750566c081006bba515b6fcfc77c48f2"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30450221008fed313823073739177e4c13f2fad99e6b47de5d1f1c3a36cb1da35658ff852302202f9293fe1b8cefaf55fc5ce08e3bc1592b37ed7de44a749e1ac0d698190f2dbb"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d540310dec64783745a7693f0d32b2fdb8e202c62bb8acf4ace75dceb52cfb880220297e7fecb90d317c7ed889ab493724cce2e4c4a8e8421b0a0feb9cbce1552717"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304502210080a86d196d7ea9c8c574dcc6daa011fbb9c567894de698ca90bbbe28b82de52a022041d38d51313bc3ad1836b980ce0d214c0aa66d23255a01322d749b4de4ba61ce"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402204399b477c60f7948d3982bf2b7c42df9e23605108122f44c25b48ee5f6b3ca2e0220648f9d2981d5b0d972089924979dd6a910854b3c0034a3a66adeef389e40383c"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402205513dc9c790760a5bcc74c713551bfcade50022c5184cb349a82bb2ffe738d02022005e7f7534178dee24e1de10c1c5e3f25c834b6f191f64fae88c9c1c83afb875b"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402203d08277d359d1b89035442b8b2fdac96ffcef1d566be51a76f45ef9a5dbdb206022033fcbabcf6b64633c9dc7ea75eaea489cf0b20aae2bbbbed4feac5d930d58060"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "30440220573094a76824fbcf48f9590e4a83f1aa10898aae9e1e7143073a46a1cebc7db2022043976e109401e2a9aa383094cb3cb660550c4bebf796122001d8df044ab8dadc"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220757cccccc2037820c96d861ba58033cf5fc2a9b97fe19340006d7b3a165203a2022055f505404c8219bbf366bd2263cae3ef8327a015ec78f7ef5113ed15ee1e6434"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e4ae2632a3823a10f2566feadd22f14e5e4796bd26e28c94cd4b9507ed4365c60220253cf59daa93ef54494c825e806a81e65b378fd1d6e2a68c8caed6bfd98daad5"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402201b8930a6d2fd3e52b70112e18b18f05707b39d5a6775cd95933d93f205c869e50220597a310ea8d5afd889151db8093b62785488aedbd46fc748c46c41496800fb1d"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "304402203e35e0f1829818a96e3dbd401b584e2cc5bdffd969c656dcb267c4f7c9b8f12502204dc13a4e2d2cabd25a9402ec16d4926bf97099689f06656d72767c7c70d888d0"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402207e2cb39eb8e627f8c9c49c5e381b54ced6e48c334ded09289d4ccbb074e49bb502204eacb755085a06e98cf0a0ad19ffa60d08d28e67fa40e757b7f9dee9b38388fb"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304502210084c37d4b27a48d2c3fc4cc3692c0997a495437662c15e82a62cb6837280e6ec802207e76e35c206bad884c042e3203eb77a94e26dacd64c85554adcb4cab130c7d46"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100a2c66711ed6d50c95738914d407acb2aa84018681a683fbc8bee0eeb9d19c3b4022078295cd42089a77f02249f9338a13057b903db52090751a5dd3eab37c16f05a5"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100ae27a2ce7c21ab6b878fa87199ff74b9c280e0f71f6be84f32becd012a672aa802204f35357cc1bf66e81369288298d1aa8003bed3814ea971fe93a18b16d1955981"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100f196398d9bfa19c49c4d805abeb4a165da4d1a6fc3299ba0f4af2b8434a8d84202203a3ecaf227a071afada4a8c039d2cd333724542a29f89713ab1d48e848fe4dc6"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220394bc4e7cefd2dd37757980985b361626a4fcb2a1e03971996b19d6eed614ada022011ef0e43538e186ab4d722cccaf17e50f32f2c45a28e528b11f28560f9bace6c"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100df993534e5c45156ffa0b3d3b0f214c3b264db44999c344fdc8f34e67fd95071022012d3adc36ed86aa3b5f744e9480fb35d33eb659b3ff59d978d1aa32981102042"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022078e6e92d8413c4ed406e6b538028d7a6f85d27f465937d64f38347b62d6df5b5022008d79e9bfd916b7e887e83b3864ffc5c8ce3a3bc13ce42ed371e0afbb3392d91"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30440220060a155452e73ac0241d5931bac0883c1ba77a84840574c1a555d5a6cdfdcead02201d6e1f24586cc19db79218ce75b107d0c3f2f5936d41fd7c7601cc13c7557366"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022019697b8585ce1a047cd67b57a248e254f44c2d19fd5146c0f6f6b8cb0e7c63af02207140315222c9d8ee1fc10cb69ec22c47ec1d8c6e26c6c38064896dc13c8c0256"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "30440220297f11265bc8c5d7f88159f8e35d8ca67af5a7bc553ecc045949f76643588a360220280e3235460b4d7aa70e01543b5700bc35232cff797d4ea947cc62f1b75e5a99"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022063d1ad0bee9c6c242ce49b69aa92428397b347b3557a09758f122765109cb5230220342cc9110766eaca071721220290aa635ef71d61b742e92423e086af0fb04b59"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100d264a4e03b4278e1eb9977d811493982e10812da43eb048a95ccda01aa6c9bd102200431883689e428558ceaacdf4abfae77578087957a89c955373c04c2a28f96bc"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022049e302c1b6b56751508711de1040ec01f1d7937de6d49fbd23be661686b19b290220245d58ae8f7fe389b9b1e138ce044114f4684df84770089f2879b27c6b8b7f6d"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402203aed848b5b759f22593f9b12aa74d7f81027aff827feb3849397b62f3c4cd84b0220468ce42a6e53043d5e112d4b51f3c9c4ba3d87b5004af872d279231da7d06f88"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220580f5858797da94ae48dc32d6f8fe6b1fdf2d32a7f84438f2ff5025cda315b9402205b4f8fb5b961c20eb5d57469e0798659767caf70f7f6e38dbe9f806005693621"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220399a992df76e19aea56bf24de660f5f3920d536c3641715074c84c22bc04511902206766d299dd2e92f03175caae8a7573f92646dde7a63abbffd3effbbc0f171773"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100ba43e270b1e163f5e608e0963e01902025c15d7916b1b0e15f2efde559e89ac1022040ea3a3b2cba9bebc15ba767d43a0ea440ef9b7ae4992fd3e68dffb1f25acc9f"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100c9439cde390fbcc46cb9cad5d7abc04f7ca52cf2706185a2ed900880e7ee1cc60220785c4777b57d12ee5fc28ebd7fe19ce618031d2e0aead01452a94d83a4c4201c"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402201d58deac9bac044520c912ab926d05e399391b4adffb1a79a6eaddca7174c2a20220180b25d9491de0e732a27617f3377b30283ac0a242e2fbbabb177b3d5f417962"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402206978d529c025061fff4af0a6a8c6c5200d419c89cf77fcc1a8b567f4f49cb7a1022061b5a74e8923b8d74ebc14d8787c8f8f41984d0ffb8d3bb80a42ce4931c03992"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100fc9227cd0cf747b5ce1229cdc61a2fd2eee6c92537b9f712b3704ec51564a4fb02207f4652444666c529860464b0f022ec754ea69f7d7e157406121b7ca9a664a943"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100fcfe1848c74306e4c8ff5db66930f714b5759b71f72cc1043327a282c56bb70b022064c091ad6179bb74c1ea4427ac0b6860c8e734eaa322542d4011d24f95e22e98"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402205ceb238ae7d7e5924567075726e458a1721cb87fa860e8b93a33d20ffb5fe5c10220077f45136c66450212ae888654bfe5b88e05dcf294939601674bbed2533129a6"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220348a323febb87cb3e2e8dbee6c9126ef332e5bf9f0d246e7ff5f7f6240c44905022075b4d2e20ecb372334239b3904dceb30e8f911cc9b17223f917dbcc86b7d8cfa"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d3f21c084be69d3527ffbdfce6a3d977a89763697304e01b47d59f4d7d5841ae022042ebb0f0568f447e2a80358b6fa660994dbd6d754d0c58ada978c5b718d928d4"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100e2c01258e261b0c9c74d85742082f91451bd17dc317355c9fb6c38b57e49747f022011636cd171697b4f740e920f8763fa71838b5ee1f1559120231f089078685574"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3044022067e895b4ee5712000744ec80ae15ef156d0de8bb30225a9bd4896aaf1d5e6e9f022000c2919ff68c37a70b2fafe5dee50f10003536cc4ab0fff5a4443ca6bfedcb3f"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402204f94d7be664f87af6673d3809fbb96e63211fe5d8024a0fda0e8cb9aba00792d02203ed221855d1a88b6da3e002ab592bb3b052f54cf428f365426ceda073b7d7f1a"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100bb95fc54481be412c9dbcc591208a41a26ba817eb4335bd3717ef7c6850752db02202758a350b0a20fa0131c30916c994eea456869be69e205b7c9c3360104cb28d8"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100a092009d45e163fffb0b444c6e3d6fb65e713e215556f58fca3c2aefa4fb90ab02207f806681a01844d5b8a71adb7c4916c6328e6d3031f9452df0448b5ee89563c0"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402205e9660746916629f22d2ee192f12e3fdbe0843b4d92f7ba0c590835ba42e6adb022044493521b43807c7a788edd0d9f4eb21ca1d67838aa3f5d245806fdbdb5e372b"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402203db9e6af77b0a77eea1d33213e5f8c81b4e48b48bf68ddf6e826ece8f0768ddb02204fb60a890c19abbad6b626317143a86222d0bb74164038dd1d6bb12544e8092d"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402202db28b94aa0c8cb8669f39c1a9a5cfb34c1701cf37d1c2d3b9560a54965e55ca02202a06eff39eb12ad39f9fb6283dfa9c57e169f241bf87a52be30364a445b6c298"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3044022057d3a43498085f51999d96878364d8c98ea1259ae9e6edfd6821260efdc7626b022001ec41c69a779b54bd8870d9c80a23ee595a1fcaaf543f6dd31cd29380bdb935"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100efb329c8b90d59c714cd41077d690ae119c5a3b5b0716e528b1bf3149655371c022070222653eb2377b2e26bba4ba406dca3df4d0c43877ee7d74149e2f25acc2c1f"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022079acd9fcec5d59d470ae58b7d8245483569c5ed36fab7f3f74cf69bba748434d0220794de13f70511156246b5cc41a2492ebc49274254d49d4f68abea2344cfdd445"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "304402206d21319b7250470b8be9b72548fddda88e4f1f891353dab51d676286d08c6dae0220348602ca01ddba360ca752290e425288d5b04c6cd3b7f6b6d83558dfce037124"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100be55a55fd64c0e1fc95855798e76f3f74cae6508ec2437092e0b1c6a717114470220153cdb7d3b5e12e3afe39ca006815c7bd7915f664968e4991973eff1f7f7d621"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100c47c6aee9caeded33210b25e03722d98dd03f1919eb8ee70e1e2f08807ed1efe02204e0f7409a7782d00e7654cb2e497e486c5396688121e76b0e47dd6d6873de48c"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "304402207590816c354826f7ebf5749125f7aca9192ed6c8670b7e60378af81902e0de7a0220268d35abdb69e7fdab961b8ea8663bfc86a1febed3df38ef6fb002fa8cd2ce65"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "30440220124279da6b7983508beceff29ed465c77b4cb4cdcddbf3974598a91652f75d95022024ac9d2608d40c5b402ff84bb9d0cc691d793ee2b827147369985cc731cace16"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "30440220209e7237f3d5a4f8f67e9cc867fda32bed54bd25dcdaccd82c0c536e8c547dfd02207cf83ff175de6b879f532bde94513a0b03d5401e3626831e5b189c2406b1fe4e"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3044022020032693679d4cf6cfff7dfe3d9d771713306506f525cb480bfbbb7294c2f87402201fa3cf8f0cae0c7910a9b5f7da64d1c9d1eb2e4a96f92725fb6a82167d0cab14"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100cf95d21cda04d030f6a9565329c4c21131ab144c4c5362fb007ccd4a0ca68e040220572707e5372d45663617204bfff56dbd45e19030d9edca7f6e165e2df9732c58"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100f9e1ded6051392c91d9ebd96c7088984d60b52b9ca5ef649ea9fa7fcfeca69f302207f9c0e5fe03b60beea467b98045e183b38e08d6105079eda81c73412f7f7afb4"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402200e852f3a10a27da0959c7838ffa13918d8c040fffb004a4895176dae562becdd02207744ead3b3867520352d373089a5a2e9133e2b6cf80e73bc6a3018e3cb97b66a"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100ba75b21282dd297449500011966a4cba3dd9f7b926a0698fee629020e31bd3490220194957aa0772ca3ca64098660464eab3453a3e1fa5da928fd5c38eb0f9fe4d3a"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402206682ca8cdd3919bde89591adf3b3557a0d2250ca14090302577621262119cc180220032e6be3a31385955cbc7fd92c272918ce3837856ca861111cdae4aaa891693e"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220551ff5382c4dd8a6ff94d019b7d8ca4c4699da5256a8f8d88ccc3172e12e288202201b3e157cbda19d1faacf0786e03db74e378e29de36bdbdcb9f93c1af9a1cd167"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100923f90d7ff51a58b6078831dd51b6e1b9f558819bc4b758af0d980caa9889ee50220697637d27c55a588c60c2bd99091020836644f02731921e3dbaab04c6961f598"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100a84092287cf5a984a0e0acdd56bad30b2c2b1e0b4e2ff5ae186948753c6a0529022053ead81120cc017e09028d118854ef00ff3b7d8dfe3e478d0683847e1c2944c0"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304502210097cafe24a7eaf4c8c1a728016c463d7cd20e8e1144b065802eb6251d9520401002202951dfcb61f707b01713dff6cc28145acbc0b5c23c88c014c0f6dc63812fc9f8"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022037d7aa6dbb8a53451ecb4c6041dfa62bc627adc7ba42edc69ea33179a8254ea30220776f044efc7af128bbb0090439619a14af9e9ea968cb761a66dc98845a346f19"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100cb198982728a85c9fe6212f49568246b3305b2f75dc2a5745d63947d6413caf702200f27d60a13425e3455693a46f165dd6b3dc2c31f19b99a5a9e1fa80f67df72cd"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "30440220067fb9fd3ac8659a9696e7db4bf1232cb151b56bc8bd2290e108547277b0f4ce022053181ba8521cdf59ae0d9aeb3de4f67c6d4d3848c42cc3d2656ae32c5552c125"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e22603eeebcd353c5997deb30bd1a9849ea98a2e8f1a34502664e2cf304eeb5c022058425fded67ef3020e33235fcc2cfe4d9fb54bcdf821af4982cc84d9eee3e439"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402202225ececce8f631113f04854e0190d549c0f00a8745b4e4c88a91c46bdd12a7102205ecde00332f3b3988f4a00709d4197466b8f3c9b1f621854668138b7d2d280c7"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3044022059de8867f4c71cbd68942d33a0815c687a34559b401c8f9ea536f7636da7594f022044a0265b452c56d59ac1766e491f3af5ccedba92d7050bd5b26361690c57b604"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220267966c2680bb8bc4e11e5f36cce971f3705df698a358bc1157424d360e9c5fe02207be8dc337f700c574910190327bb22454ed5ea505b344689745ab9915b2e3b99"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100af237dbe194dd606eb4c4ea0ba3081c08987dfd20d020f31d5d82f9b3fb8726d022036a351110c01e3f70436d5b24e9dc037cc1c15a90fecc7cba7450c5e3c2d1500"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3044022058568c47e51e32af71f615409221cf4ea59f777173c0c07de6c0f3a78f376ef50220481841dac91e7570f86de6f50b92bfe4202d0fd1471881c4e440095723769121"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402200f0956ea594297744f4172c187a937c97f8616a07b2f90a450968aac091c805e0220290cd844be0bda0f5b89c6bf4c36ab045570c6fb3dfd7e3d53c863ff585c9dee"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100d28d3090040571c6ebb43f3c2004947ebc93ff5b2570e11cec9aa929cab1bd59022038bf48bada25145de3a20d31559e356096954b49b3d95c61539f4191b0f3895f"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022038f3afd661023a0ad536236314f045447c0562bf2b5c9c91e3276fb86603114802201d55a2b564f0309fbea9ee54751e0d3545ecb78c4c60c130e34b0ad3e22d6331"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402202c9b4beea5271aed5353b41fe5656887577bea31fd9f50585ae38afafdfd8ddf02207325fc56931c91863bb862708de2c1d03b4ef870874b8d5ae0bb96c257d6051e"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402205ff928098d8370cd6a22c178ca0e671e594d9e2bf2bd96da1ac03c5d4b9697c50220243871ca02532d058f0a754e8cc255bdb4cbfb383360fc23a14597dc8bbde47b"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100a5ac59efdf76cd8aee6d58e43053f39ee93c07b546067428ce4cc7eac6b7fea002200c8afd7bfca738f32adfa5f4b599bc079cf326e372202d6b5117784ca45b7f49"
        }
      ]
    },
    "56:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "30450221008ca7069d4bfe28e696182e615d80653533684c3a60a47cb9866fd00dafa0698102202758b4b80484f73584345367167cab655aad8be09051ca695f2a07c7900b6e1e"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "304402200ec2c38d3bf7fbb9bceca392237e6c681670f4d244cc2a07aef68b8ff8520bd202205a09e80f9fc667a0e20430a6eb426a63797ccb4fb6daf9e339b8dc91d7cd840d"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "3045022100ed35d6e643ef1337e5b0358fe25f1a176aec125880d2f11a3779f0ce2be421f2022075e6cae27a4d1ab55aeb3e2f95e1e1964615775ea63c4cce72ca6a2996efe3f4"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3045022100c9a3bacd0653f35ccfd8483dda1be1f240ef3829af195fd978c2cb78fe8d224f0220303db61d77bc3e632e2c8a8529177091c58bb7376658a3ee8f73df7e0bab2134"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100d4d84a41e55f141acdfbc5ba7169bc96eb48b4323ad3f302259d4bc102caf3270220024e701e69719a3fb143411db1a59e64441318042235251552ae394d086f9d47"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100af6dc540129745fc4a5f5d37d7a2ee8185aa8bab4e9500b91a6ead4f8b7e11e1022055ced07e0790c1595d3929b10cf0850d0b3721c4f6c016f1d4c6d84dc6d479cf"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304502210087b92858f43caebadf20ed8741da081c0ffcf34676eb81ae4338ea2328fb26fd022035c215d867684139a6720b4fe15d2e77272a0873074823bf7cd48a07ec9550b6"
        }
      ]
    },
    "56:0x1e38eff998df9d3669e32f4ff400031385bf6362:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "30440220461a9ba62577bf43ea41d862cec0764de9389c0a601bfd69940565b19b2bbc3502202d7e2b88f2e6ae6cdabec4de8ef587bcbcadbb3ce0f6904f15accd9be866d3fa"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100faa5b3f2b1b0a7f74d4500ee44479ed1d91124afaf33ff35311ad0e6624276ce0220304b5380d2b3f47be9da6a3296f5c18b4dccc8b161997610aaee3b4357f5c5d3"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "304502210090eaf9ebbe2b2cde688ad73ba2d63257fcc44b3771fe61258157b0f3ab6a6f00022062e74ac8a640cba37062e88bf00b5f612039bc74aa5e3fc3f69ea2f5e412686e"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "30440220012c3602f5dade51c41c326c551858f4dab6ecfc2428920e20322e60c6706de10220320494116238f04ab59ee7117222c50905acaa0683d842829062e8b1fd3e6b69"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100c50e5a8d24dd9e2ea4186d810818b5c23cb3c26230481da4429cc18e335938a502200f889440fa8f18e3121027d270de1d5fe60c5c607607dc05bf5552972d684ca8"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100c84761e0f0df83ca931cea77a4336fc93e6265918da34f78bf948381aeb901da022021b63fe2bc8cadcd36928b2f8f15ce0fb4fc13e101cae749102b603203241dee"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304402203737e60321ad30f5a865ab29494545893c6339629cc2aca3f0d4042f9a0ad87c022062bbcb34c0210e5c1cdc6a08791b73fbfda35a516dd94967fae3dc5482e6e0cc"
        }
      ]
    },
    "56:0x1e38eff998df9d3669e32f4ff400031385bf6362:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100d6bc531ec620b3a2464dd2a78bf13fec64c39e9577cc7dacdc09869fdff447490220032a6299809fc13be25d6778c365dfe8a2441f78c6d9dc0a349f2f9ebc57c141"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100d10b34ea91dfc4ee22ffe5337bc8131a7f3eb21851317cd1a4f0f4499e0b7590022023b39908f6fd615b88ce59fb335fcc78c1aa1dfc784657128593aff716328c54"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "3045022100a319971b510f9dfd4d39a67df0b184e7842096829eea2bde03f4d137831903bc02202a1f8343a2ce5498cad84d2fab95e6f75b72670376f74050583460edcd5e9f53"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "30440220261e47b2e8933c6331e77fd0f3c1554d8011c749ee955c0bf1f8dd09fab53a910220190ee7f88fb52067d77b6201dcd0af870803dc540e45f98189a5c46307e5d7ae"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30440220407b148dbcb9d491e1403abd308b35189debec6017959558ff1997f39d9b466e02203b7d2ff8a48fe63e411d4b01b4039d2d524f4406c77634a0d0d107f2434c46cc"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304502210092cf643a2dc0ef137b257f2927bda814c4ea41e674c6e92a9348c94ea5cdd38402200e87cf68a0c454c5dca5cafb49cbfe3057afec77676a646a8e8d545d5b5aac94"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3045022100b126627250c5a18b36529103d398f5f5f86bd07f97979d481486ae0bb7bc87ea02207664b33b6f13a7614bd821a76cb19dc2c8f21e4ae00575917b3d7892a4da00f3"
        }
      ]
    },
    "56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3045022100cdd6ed9272614ffdedb2b2aa22418386928f1174a6214451d67b82c06b637d4102205ee814ca52cfbdab011e337727cfe91fa272b98246ecbfb1683bfc0de3086efc"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3044022056e3fdb59c9ece3d411d03963edfcb9a186ccb753b4e984366e7ca6baa99b38902206a7267e31543659ba3bf8b796edec2d1c6f174a810b89862e43541f94b191eca"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100a4cc77374944e947748dd36408f48f43a94e67436231fad62191554d1ea5ff0e022001baa4fc0587af310bebe1c0044d7b4280bb5537192736fa3805584c735a6710"
        },
        {
          format: "raw",
          label: "Maker asset address",
          path: "makerAsset",
          signature: "30440220770b731ffb6091493ce2fcdb4163ad872add409a9c66e88e29b0d7a82b0ee79c02201e0130c1841c484e816b9f9ff3694eea3601e1569c1ddb87319b08d86e9823d5"
        },
        {
          format: "raw",
          label: "Taker asset address",
          path: "takerAsset",
          signature: "304502210094b700c3383bf0d8740e09d23dac120addc1c21029746f672d8f8c8b3a2a2995022008b5d3af862f7fb0510321cd9ae4f7172ab3b347f6556b3da79e2a95950ff34b"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "304402202dafdefb2181e5bbdf5816fc710400bae0846bc08dfc389ef8008048228e2fd0022002b89786ea578488cf6c6b751dac0c13dd6c2c57c8d6bb0fcb47a28d2b07b1b6"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "304402204c27aac1c07e8bde8a998bf06acd5eaf40e874a9b128a4f19ee8c39ce45c9cbe0220380d9438d10ce81f7545f3de8530a19c1eda78e4683fc2145b9715eb260f1d66"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100e7f19c15b49e6f40eddd2c8a24d8c55e9224262aa0b856a413f842fc5c0fc7d00220341e5eaf45d8335bb6143768b1c961b6c7e97897bda5ef485457020661ac3ae3"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "3045022100e36cd43f82fc0f99ec2770a26b245f6af13623cee69670d68dd696ff76d4630e02202057a0dd1faee909037429ba7489ccf3891a38d29a4da04648441105c1e89048"
        }
      ]
    },
    "56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "3044022045bb3ce0d61f428537754555a0d69cfc5554de2dd58c1c5cc7ae81abe073b1df022039ba8d7e1230c3851fc08db58cda6222c420dce4b8cf96725891906fc5f7539b"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3044022020d30ebe13aa1235ea25dcc247a1c494a6aa2ac4f121aadc3beb874b9de4b75e022078efc82c2343d6165960fc252d10313550b6d9d1faeb6f2ff611c288fb53f364"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100ee126c98d8ad5b000090d6c16131709618d803878a72ceb1f58f2b11b2e52324022076403ce3d181511afc9b59b3f4a0ce4de9ee76dd60c78eb61660d623294d4070"
        },
        {
          format: "raw",
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100ed1f432fe0c33307e397f846970f7de0fc18098f3d5b4cc1a25844f75dbbfb9902204075ef8e6d6dae438dac2a7e3aace3e27bc7c67fe22728395f92888e68361f20"
        },
        {
          format: "raw",
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "3044022022be34e598b158445f7ff6a5565b04627b61789339aa956b03f5c8dcb81e0ca102201b970d57742618204906414d7d23dc42e9e566776e7bda9060bcde335817a8ce"
        },
        {
          format: "raw",
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "304402203ec8a77927b84388d5a0ba1bb0bfa38fcb862b8c43d988bbbbccbd547a4ae38e022002f2f736d3cfbf42829b750af704323f29b1eedcbde789c49052521ec47bafee"
        },
        {
          format: "raw",
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "304402205defad5bc1514f254cece6e8dfbfe3b68c3818bef6d4268b40c59858a6a2187502206767bb96c040e523dfd88724a0ce4b4f6bde73c02a286772f2a73c973dab0bab"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "3045022100a273a21625a130728e0448f53a047d50867a9ba5e4a285d7e06d98fb3bd655c2022061e93ce13cedef0ebe9bc9340b988d0fc7353e99e2ec28b77102a14b3a129479"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "3045022100b74529d5cab0055f80732bcf7864f03db98bb9f779fa56171f3faafdfee2719e0220757505e2ba5df6184002e921f678f9f5bb073197652a45d86c6edf003067ce2c"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100c14e1f90619be9cc92da927b1c908a18133b043e138d908bf81117e1fc73fe000220503047ae5e75ee53c0ed60601644ec09f430c613edc6ec72cdae4021d29438ce"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402201096ca9ff9b886a77fcbc7fdc8ddfc0f42a9c8e7fccb783581ca3abc75ba61dd0220191d21eed8b4eed56975b580832a8b1891a5b674fe1a0e5d7314b7b6486d7104"
        }
      ]
    },
    "56:0x111111111117dc0aa78b770fa6a738034120c302:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit 1INCH Token transfers",
        signature: "3045022100aa4cd645694179ca07ae32f7b9e940ef3268cab34bb2a67d4c4f31d0ccac76be02201a98adc704ff642bae02e8566470b83e98f95a70ece9a4589d1e7c865ffbe06a"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "30440220379cbc9fde04d67f3bb79f0559aa097ac10cc5f3581ad5ee7b2d32babc95298202207e0fd82eef66dec1f39ebff087ef36affa96e6d70c15a3ed57f820d08a11111c"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402204a8c834e5fcbc352bddfc02f932f2a068d3fdb134caa710ea472a37f1e8e3a1d022064452eb834e0ef14bdcb574c68c120d950a04af9062a4333d886ec6919dadbea"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100fc0a3ef2dd46f2c4dd31fce3f40facc37740a38f2c1f65bfa408afe3e07a78d502202b9ef22926fc5f3999eadfd1beac7bf36a00b3d18e13939c3a97a8be8e282823"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402204279a86f4d8a7268e5ef69cbf3f15294837288c32b64e03170b13d85812cde85022020e79e9afdeac2bd931bedd8c1eddc45a6e38659e04eb53b91c3c68b141d2de6"
        }
      ]
    },
    "56:0x7e624fa0e1c4abfd309cc15719b7e2580887f570:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit PolkastarterToken transfers",
        signature: "3044022070d11eddf5a69c484c2db1d472abcaf3a4a3c5c9bb821b7b5adcf24ca658110a0220227670ef7ced8b0f603bc997967b67b12ba6a1d8022b29e4292d8b6aad14cf05"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "304402207f0fe68dc0d1b965726ed17a6f4eeb8a5643387dae6afd4d64a10ec1e5dafbda02200d4ea50dc2c96a73d8e2b868414ee83d8003c21fa5399279704756803e1ede10"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402202bba41fde065250b92e68333ca0abf62e596be683f777a70e68ede89bb72ea2c02202a8c58eeb203db1c42559234a8a6f271fa36c1a14762ae84d88721d741978bf8"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "30440220377b86bf7e220a1885ba2599ac279d3c446cbc83f41576c4740ed1222adb59a10220121cdec7b08c496dc2843a91834fd50e21efef40c81f0a718edfb602cd411ad3"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100d8cca3767efec9db06d52a0aca60f4847c451d5d78e3711679422c6d9e089d52022048fe050ffa74d1be563edab0989a9d56722276e177e7be6b7cb44d95bd0eea51"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022039764daffb73a12d21ffa77c263d071d00bc1dc310ce4cc9060c5330730709820220123a0e20ffc1cbcbc9537556ad29c04ec8e19dde7e7eea47afdee360fe09d242"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "304402205581571cf4a3136222263b4f00b4d4c055a100b63bd1f7f04d09a0133ec9b38002203a7c8947be3075a7990173d5ca0ecd5daea6f8ecad5cdb23d1fdaec8c3648e6d"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "30450221008304191a0fda5fd9496075030b7ec7d0140b3fc5f6428dbfa08bc0b0b99a8b0102206e2b72f9fb1ad69797b27b49353aad994a3cf4078877731cb7edbe7bba805fd0"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402204cc4c139386164490893d3d2f2933effed82ed5daa0e0ee4d23ce9176705441202202ba382b1639ae0826ee0bff9cce3ef2c7943f32c45ff4584bd55b3a49b0f4c95"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100d0a789a3e81551d55a580658635422970c89e1dc1d50c2e3e3eede6c8f592bfa02201b0d335aba72fdaf137a8ca9eb49eb7782f7bc0992ea269fc19dc890d66435b0"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "304402206be53d7a3bdafd6e4bdb86e3d1b3767900986bdd6a10d6075963c21b4ab0992e02201220cd9023788f36704f3b62fca65de422605ba68b833964c0792ec719ba837e"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022026ab43885c98f433ad1424f572718fbd548d56b2c02354d512a0b5e4466f4c750220677b8d7ee647b4b483a66274adf2afdae3bff55edbfcb5d005d20a5ae3026228"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100bf7fb026be19e1f6392dad6dedd5f324aeb03e14d9caaddc86a977c231b3f90b022008310450a6b7229c1ecf0a688bcd43b588a471a69e4056798c444b9d98935b38"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402207bb62be1ddff68705f7fbe6c622ba79fdc608b10f02a157ae4c7c2623c696d1d02201b6ee7553588ddec6c02690ecf2f246de293db422510d662521f9b24ea806e16"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022018cd297b191edc23f55cf6a993288ffdb3b67502bcfd06ece8fb71e88cf5dbe702201e53c252a6584834c51c96cd7c571048ce54a4699e0d8cfc9b81fb43a533a532"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30450221008a60ed50f831e181cefb6130f916f614bebcd37418de1836c20f9ef7dc21038c0220623287297f9149ffa69dd2462ecebc0197ad90b8e0895a9430f1573334c2bc17"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100feee7fef4693c181917b5aaebcd8d8933c9f7522ac5eebb13a8612c4eefae23b0220498b1180915442e73ac2770f63df86a781c645356b5218241a265770501ed4a1"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100a951f388b18ed053e69fea412e90e01c12bb5e1e4c20beaa29c2a94e871d667202204702861a2921c92a11f60a6e7ea6a82d1f67a254ef8ae89aa80376ea0a1c7d63"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100dd21a591bf52a2fcd8a87e63e1f920455b87e71b124cd2613371b2421cc64d4d02202ab80b9b2cb4c647123fd967e133b33eef3eb685d6d9a8028427501fa2db4a32"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "30440220132d2faae56a13f79026572cb9e11e8dabcd3168a09912b63c50c0e1cbfdb13602203f570c5a92ab0a7dd4ed570b2abaf0fc03fde1156a44f1a94b8b8ff4a759dba6"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3045022100960422217afa9fdd640240ce7e5be69848669bc6d63e92615f7dee6c0a4a42be02205abdfaf049823bb5c97bae109f73987713cbedcfd7019ee5a930106df816b900"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022051c30857bcbd3f70280d7c896a016da0ad49dff1722d25ca0cf3f0acd0703bd20220105ef2f7e1710d0f89e2e5117c28a305923127435c12b5ea1f30277ce7b230bd"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402207d066e3aed9d224ed6bf1e6c117ce57f8304dd482bd195cb0c9b0f523bbee2e20220302301f56651a11a23e9fe700b15accef9d6bb62705e996b27f1c834d8bfff25"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402207b334b72b4bfb2fa0f2e8f25cb8e135ad053ff9ef6b4ae346c9a04d8d87b0f70022035894d7ce9f94163b555891f830c97c33df6d460a105809d7d6258cac611a753"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402204713b5837980a38dcae6653c7428873511595be0ec8783fb7c73f45e55d358b7022000b2d46830038f826435903e6599a8240f8387a7c2d2c48a7e953f8ad95d9035"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100cb26252dfeff8e4ebbdb94bb011231ef72866cdfeb42190bc5f0886e4103b1f702202bc251b7a6aa3ff433d0704e65f42d7abd75ef23df6d2369126e0f2476b2b670"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100dce11b4a8cfc9847bdfaa3e0f38ef3632f57e5188177f4c17dd8a531bff652e50220050c59b5f67c0d4f59ba37b2e0f578915a44ef055693d92aca43c0c2570d79cd"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022001fedbc154eed1d9a1628dfa85eeddd9abb91b18d49a59e8c7fb3c4cc55f1ba4022042ba188fe844feb40d5bccce05c1296fc9acb19f92331f592413bec294926940"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402201bc1cfe7677b63fe456cb3a78ff032122d9353af812c68a07052dd8b63a62a73022079c4a25e1a1d3a3d3630490174a9adbed8351488c98b7e6e1b055a4600d38df6"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100d3e01837488659951622a0b8edeeb4d7571dd05e47e8c771f95fd07381dfd1d4022054a0469a833d71c17a02b68f08b77b84f2c957b0556a56c4af5810ce61388851"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402203d2fd78eec8d725bfb69586e5d588174860d2e962b0659440d8c6f2a0cef6611022059dc7fe99f8fd6f89a15b5534c71e7571c485fe9f3d21d0a5d2b0437f92186c2"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100edef138680959b2ea2ba9c336988fe47c4e6078b19a94e64d53a80cc654bf3c002205a9a78c89421cd27eaba1b07c9beb47eac621396c19d79ba02c5d6be277a0401"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100a545dc35ecd2edd288aa9446f760bbde00722a546a5e6b966532d01711dd97e202204daddd8b0c7502ff95fad0d99655ace2d946d47f322fe2baabf789c718de1f68"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100c809271f4717f853c03f6fc3ce796d046fc330bfedccc3e90200741b00fcc3dd022002ec64e734acde7d811b528c750ac8ad7d44e4161e6eb5524318c643941378ed"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100dc22632e95c660cff99bc1d6b21ab87ac471a323c2036b7ac7c01326b426add102207770c2e0b4985609d554af42b89f0579547cb6225d2e5ef0ed2eedb6cabadcc3"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402201bdfb08bdfcfb3587de64c57981f6970d7eb2aba5ac2680282a154dfe8a2b7ee0220145fe0ddc50ef7754a82c469899ac70e07ef9b3fe5b076b29fed2a0c6b07ebf8"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100c62059c35d7644eaa5fde91b0e7e110273229d01dcb8aec96afc13d01f404f220220674b885b86399f953f824185d70df46e92142518a8f4950ed2d7ed54af34f677"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100e5bf376e10e5f64a253d43489f38b8eb4fb2135c04078709e90c8ca49e20b9a7022078e48814760f2df95dc8d45d3c7a438674db223f6b727828c2784fc2bb2eaf29"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e62d51d254f6d76c0333cef9ed6af8dff443b4879ece411f18b408e24c65b40302207cf8df390dbfa6a0997047d97fd57eab184210e0819addff6a3e91fab8f7922a"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402201978d2f31b9d02c7f067168c42ba32cfa1cf8cce4eb588b5d1053b99be9548920220536e7ece1883045319cdd13eb7e7ca27306972c1657186ae8d85f3d3d2100a20"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022026254c5b6903c27b62b2f0678ba4d99e853842af501bce7d6cce9e01448d76bf0220517550421f2c67d7486fafbcba486513287cc3797d45cca7cf0c3d904c598f7c"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "30440220486dac6101905d78433c0ae31566e65cda9e603f0cbe06f8d6cb86f0ac402d3f0220769a9107e0c963f0d22222ba7ff46c39137f533f66e79723c7cba1fcfd0c2983"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100b51b1b32763a66fe56cccc1f01ec9a197b67aa29ca2a6cfc41689cf041c049370220224e9117db58c6aabe79f9b1d0b5239da6ee82a2c273d22526cdb15d26f3be56"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402203ce7919144ad501982f67d07e5f14ac966643ebd85306bfd2ed01a0b195bee6b02207ec812a2d0bab9ed1b9a83f669a291ee0571249950a8f0be1164af9da79780a3"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100923483245a9d17b8143664ad01773c26b7b72cc9b04c5e7f452c8a84995b4e6302203d49025be372f1d0b456e3ffdee962f398feec6f9e241cb1378fc0a4ed88eeb6"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100e72714fb3004f389173e1e396dfb953163ebd1f8427e390e6b6787cfd02ef54902207d4ea7e366753356e0c4d9ef1c124f20636c0b76a2040d51abe29aca5781611d"
      },
      fields: [
        {
          format: "raw",
          label: "Spender",
          path: "spender",
          signature: "3044022066ee1bb3c08d1c38278427508027778ab802d61f09023c8549977282d884a5bb022048bb50f5631e49354a7bf63f5801c1402eefed99d2b74e775854c64a77b2283f"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022052dcf2e649e98b1725820985c6bd6719104de0819eb65d3920d250932ef760160220699566255cfe8070e9462c15b78f6913f51ba3d8dcd653c848df9af8f21e0c9b"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100a0789ec1c91a3566adc242405d7ddfb2ae006c33d31a76021236e37d0fd52fb6022010e844f0badd27df3772c8318c66d76ee58474064d348c72b75c159739a3eba4"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100ab855bf0749b4448a1e203f8ca8318c29e6095ee95be36f5de695e0e24c04c3302203863023f13aaae6bfae39bd1993bc058be037a4e1b9ecaef91754365360512d8"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "304502210094cb4047f854cc88fc265ba3d928340a51e09551555869ed813879b731752849022056966f3ed375253d7994005290014be01033e032e3e6d37ed3b34bd2be7cbca5"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100bd5ce8b79974823bdb9a7188b2d300ab5ac346578b0c73b10fdb0ee98d68a14302207f405deda89efed5b9aef4d2911a90481770e48db7a4ef02a209da55bb750f85"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3044022069e268580149f3806e0fbe3cd09b54fddf16805ca901de001a115ad2330eeab9022051e808755f106f96ced721d1e510cf6dedd341759a0e362b18e747ff54982c69"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402204a9c020d1fdee5156097f946327eb4977e5d2e9208b25dcb90e7b383fbdce26402204378adef26d05e8287c328ef2d09651b9b4c1b26cdebbcf776286847ee2f4913"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402202f047262a9e84adb2bb2f6fb828cc167dd592deace7d8c9385ddb64597802b9a0220590e85daa61a809716195347e1a29298a1bc6de391929af407024d45aae2e33c"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022020a162731ec93ee7f98027a5feb5e03807818be464b00affa750a4558a99f98102202578eb63dadc6b18743a96ee393384ef40fdae8029941931a84b039c19c933c8"
      },
      fields: [
        {
          format: "raw",
          label: "Spender",
          path: "spender",
          signature: "3044022070bcfabeb93910982344547495147294072e624f0134a0eaa195e73f0a1b7268022030ac8cdac2076a43b304ba29cedf90674147000b3b37ed9b28ca1348d679e92d"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402204fe219dbaa70e9555537f1c6f9f24419290753c997f9d7cc499bbfc06e90b072022050bc100f4244a05d7ea3e8a6f17e47532593bc562bd3130223b71ad57b8b7359"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220606aee893e8cf3e24354bcb78c6f310a8f5fc39fe6f2d725cccc9a915859caa302200f78ca9fbd05ac11c6aa1fecdcb255c9ece8155aa54157fbe014170b5accf2a2"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022042283598f742fa814e03f3ca05ec7c7eb7142de7617c51bae5b6fdbf61b4fcb3022057f93761c10ee4c30fe121617f5c788058a654419bb9bfe3f48e22cb95d1ba3c"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022019e7e56c524b99c53f1607b101b86c4f935b3e9fa133c523e431c308846e7456022069900dc4f34e164c100f9c052f082139cf6d918b72f503d93b99381d676e0ffe"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100d45ba12fa943bc8c48a5085d4241c964a1f65823ed3b5f7a288c6885fc0b12e402207b5310e046215438da64cb370514f642d097030575a9497cb7cb82ef393d09c3"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100da37ad4b694bc7ee59f0dfe9f37ce8100b2fbd1d22fe866ab90fcb5a75c9071a02203927e28b4df2e583c70f6e15272ca813ffe4d3971afab27ef3f403730aa48c59"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022020be4365768b961d019a3bd11f3c72b52b093252d8b0c692ef03dcfd9f8d648102203a793e8cae971cf3fbd53518d0c2b77b15417657ca2c3b0bb24754c70c372574"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "30440220502f2785c8304a83367412fdc3344b29aa1f19aec18ae946c6d5da3b4752b6b902202a672effe830db5af3817536582af5e4937806e58bacf1730c26476a5c08e332"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402206a03800c227fead9cf18053d5cd9f282f1c86122c257075589094526f02adea00220193bd64c8d0c04045f8cb3367da07adc0121c9b35a30895b62333e1ff58d00a2"
      },
      fields: [
        {
          format: "raw",
          label: "Spender",
          path: "spender",
          signature: "30440220731aff0ad876d81442c75102cb83fff4139d74cd9cbed9f31850a7f1a0fc643602201fd344d75222883622706ea73e0d2c9067cd1f744f17ba716cf37e04bf5eed28"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220272032cf8eec500a5f25890861d4c513fb19a5384622628c4cd5e26442bb0df702206dbe3ecc9f908eafb027658f9e11d8b87e7b67ed50b30f4c314f076385e8f1c9"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220689a2b7d34b81d7ec33df240731ac7a98ceca867180d10d6358b33c8ea8eccc8022039ca9f9bdaf22b15eb562b78ac723327c7639d6bd7dfab22c6b9acd906776f67"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304502210086eea834b3ae54fa55939fabcacbabe0d0a623bc4d8b9c31a76cd964c8ff8a6b02207e4c5e453385952e9441ed6a9eb562d10f7b255f7ac5485ff05a39e6997a1b50"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3044022001ed942f8764c396a2a72be95e1ede5e2a4d9ca30ff6a46b9ebcf2cce6760f3c022036b39587979d6bb05ebfcc8f6c61c4af383a0b6b9067b6e43622f60e33308260"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100f4707993b6c3ad2702ca775cade1ff69bd4f6dac7ee3e6cfee9eef71f9088f900220189696a9ae7371fd16cda5147d6f282d416d2956651ac0361ca1fc0d60504d6e"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100c3b0891248431134809b5e5383aacf261eb56018fff48dcbbd043e5551888ee702207b1b8ce28cba1aefa9a6c95821346422b466b05ad4784b5461afb874dc0fbd9b"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402203640de985c876c17d297a73ba553aa55e517ea36838d9fd235c1b94f9a805c3302204e1e64b95f27416bb1dc4c823ecf9f1bc4e25791b6c7338035f58ab8fae59170"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100df2481af3d60f76831590012186282dec18c40ef18c25c47c60767d9c1b560a602206d48e4ebfba892c333a289cf2ab49db38fc30304240578e79a54981d8dbb0ee5"
        }
      ]
    },
    "1:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100e1f7e1db3081ebad48f85b6443892986b2048bde4dcc8e7be4c926923ef6de0a02203d042c0caf4ba241f1a9715ab2e18bd6d581d8383a5ac41b9e29e2fa247ea21e"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "304502210084df0994694c4f28ce49b11ca4d04c961e50a723393e1e62e7fa62f3460649340220489ea716160dadd85eeca97e8dd42945c95e5d5b02e6b1abc0d6292049783e72"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "304402207f1bad60a614c6a36c31aabfa5d86ef58ec1e5e055e78577972fff4254a59e3f02202261833b5799c72693ff6084e5f9a39f491eba89cd755a6c348ddba26e2e4f51"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3045022100a59f82153d54ee2635c15adcc070f2d32be5ca8e1724442fcf9385aa1350a14402203030da0cc46b5ce7f71de8b52b8965fa90c795b39dda58d7291ac653b92389ee"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30450221008683bd04cbf3b1f992a57fb1fdb3be96fb932ddf3a86db8b873dd4716d6d02b7022055c2f80fd063f33c958676eb4c8c7e915d6e0538dcd05d6cd94cafe05c229adb"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100d3bca016cc8776987b71a08359baf39378703f92e443e657a058fddcdcea100d02207621b441d4c79236a666f4ebd163e9f4f34a6ce33f5ae14ae468a311e81584a2"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3045022100c23f20e9c3cea7e06b6642635884b11ba3653805327413f0e779dd2148faae3b02206c613e4f4470527b6ef0304b09396ec915045116607901d1c2337b5f04b87634"
        }
      ]
    },
    "1:0x119c71d3bbac22029622cbaec24854d3d32d2828:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100ea11ec08e4ee7178eb6121d603d00e6c6e62d0d94e6d4098abc22d709c47b5d7022041c0c9a56c14a783c02a8ff358b0162ac1f743c3f8fbfe8726d125d041a55a04"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3044022062d5d76cb58f4b20f6516df1154c983610b57fa7a2d65be91915012075ccf19902201b5b86649fceb99cab590143133b535ac0455505fd70e94ccc5d6712bf1cc963"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "30450221009ae13c9db1fab6622b474e80366dea12be8f03bcca320f0b9ab29bc8d4afe0c902205edfa3683c639e6989dd4b00a3c37fa91495ce95155b65edce43a15ef9d6fe79"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3045022100b281ebbc426a329301a9b2962bc5ad0a09b4d7fa585763a1ed876b689246e23802203ca2a7452d2b410b4fb67caaaa1d4ab70a7073b34c2334352acaadc5e3da3d09"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3044022009e7512395741e5e54f9c6d9086585deecf1b993f1309b67cb40c4fbf172412702205324dbe94ef03a58972eff71df312723ad8364fe42a226b24931561d6c95dbcb"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "30440220721c35ae89f778131dfe9e1ea71e5d553f90009113e39ec379b16e910521df1402207fd8dc0be2cc10e8f2e95cf080df6cbbe57388b0921931d0edcc25a01ba08db6"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3045022100a372339b731529e6315864744dae1826fc136eb899925e46826faeaf6ad5b10f022062ced218ac80dbb3bf8d25203de72c7d06ee20e39115bde37de3f3a50e9f1868"
        }
      ]
    },
    "1:0x119c71d3bbac22029622cbaec24854d3d32d2828:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100f2bc7298d431b6f742100623febe6824eea30e37b2d89093c9cfa933a053878102207332846b67bfdde820103d7d775c51a1c2b0fcaf48f2a9a19cad9364e12fde13"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "304402202c13c39d9be77721727b3920ecf3e856503d952caf07a74496984b6bac252567022057cbbabfff5bf7a00ca18d4ff9ecb0c5215d779a4750daa96fd3a257838d7907"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "3044022062acb004a7d9308bdd0cfb127fecd2f39410c87470753a872bfb3b3e4514486702200952fa8a3152414ec408413352fa03600d089c8a88f541930abb9d97a6e534ae"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "304502210097eb2d5a8cd54748c6f228ace568ff742bc4d87bf01b601580c342fe5ec1763902206ff4c683bf4cf5f6a92b9663e341a1bc5d06ff91b4ba963f4df534aaf249be04"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100ff758c9dae36b78fefa634bc720c78f0ab38f5f38cdd2db5d40c6fa98640ca5a02201768ccd8e22e396f0c0022bab161158b8ef679782fb9eda7c2ee966c23856b3b"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022022b529a549bba76a32946faab986a40af90c92e355ce9600db325d3ca37bb03902200118dac2a9a9d7504870d210fdc4a3993c438467bc0d17e02348dcec18e13151"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3045022100d116efa90828b9a139cb8b54c3665db8e58cc2af118bab85042705b6f0cf997a022006429fe8762194100330515341dfdca029e5284ca44f57d50e8c1d8cecdf81e7"
        }
      ]
    },
    "1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:08c2ba593f6e0e80b8fd2bb1da6923135c173094f9cb6ecdea6ea144": {
      contractName: {
        label: "DeGate Withdrawal",
        signature: "30440220089127ef62e67a3d075a2c0d645c06ce98e6cd373bca7ac89217b2919d718b9902202b4fc6a5488200db6a51ef2193febf8023770e44d361a5c85907c1f6864e3ae4"
      },
      fields: [
        {
          format: "raw",
          label: "Owner",
          path: "owner",
          signature: "304502210085a5f94d365f90e93bced9bfdea6f3a762abfeec8d77b070905e46368f0db7970220042075c4a50ea30b63308a3d4ef5cd72703c7447d4d296e3fc90e3872aa54259"
        },
        {
          format: "raw",
          label: "AccountID",
          path: "accountID",
          signature: "30450221008d1561da0d5464ae0173b2a6ab1fb7c9fadec3429b9d068f464062cda6a721840220169a240b04d50866f8250860c82b01e664d4bb1262f7782a454d3341312d7831"
        },
        {
          format: "raw",
          label: "TokenID",
          path: "tokenID",
          signature: "304402203da24c741ee39f2c353d6e38386af0ad7b38a2568663f562e084247b618410b702205054378fd255b5077310009af3ce2507c29f5c3a8b651b64519982ed502b4090"
        },
        {
          format: "raw",
          label: "Amount",
          path: "amount",
          signature: "3045022100c2d5d4aeed590ec6bd2116f83eb334023d5bf01374700e49d73af5875059c0c10220286ce6cc46a4d5e9ce71462b9431bb69c55f060a65fbdb2728b526cbecec0046"
        },
        {
          format: "raw",
          label: "FeeTokenID",
          path: "feeTokenID",
          signature: "3045022100e50a065542008fa67af23b0091e5962e89deca43cc4cfa55fdea4ba86873846d02204d3ef27ca382008596cf584a8169a925a9cc4608ba16fc4673cdc539dd85a29a"
        },
        {
          format: "raw",
          label: "MaxFee",
          path: "maxFee",
          signature: "3045022100a79503f04eafa7afb97bce7df13dc697d7ad03532be221da27d596ba5c4f9be502205ae99bd27a8f1c92cf78fec9952845342ed93625d07ef878043af48eaaa4b093"
        },
        {
          format: "raw",
          label: "To",
          path: "to",
          signature: "3045022100c689e1d30113b842b9fc468cc4e26308a6df924818b9fd89431627c8a42c57af02200225d6cef4578c9e4c46c48afe459a7037aedbfda03195ad0252cba5b41b502c"
        },
        {
          format: "raw",
          label: "MinGas",
          path: "minGas",
          signature: "30440220464c332bf0455c61102f4884218190994094d7c9808411c00fa6fd6ef5763cc002202e3324eaa0bac01d96738a8a9ffcf531ab59aa03911f2031182d8b9de97a4f06"
        },
        {
          format: "raw",
          label: "ValidUntil",
          path: "validUntil",
          signature: "304402200ec81207eb0079bdd15905bbdd9b98660d705aa08df96e9ef990774d2f1103cf022035926ba6cf460783122664b1a25849638ffe34f42c38177276c3bc7b10ad9cae"
        },
        {
          format: "raw",
          label: "StorageID",
          path: "storageID",
          signature: "304402206d33f0bdb8b370afb15f212aed98da5ad1d2c41362f9ade1360f86ae9ed15cbb02201204be822aac5c18a09f0baee45c5bc3295c8c085a391355e5ebb8a3242c9cca"
        }
      ]
    },
    "1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:3ff1c601fe26dd56c4fc5d773d7e24b17caf0754a14f5eb033636388": {
      contractName: {
        label: "DeGate Transfer",
        signature: "3044022043833156814430e372cc93d7540835c0ba00e298359bd1296425f42b40c477ea02206416e6bc158f72bcb300fa468fedd42394ecdff897494869cf1f9679b6c2769a"
      },
      fields: [
        {
          format: "raw",
          label: "Owner",
          path: "owner",
          signature: "3044022018ba034d2e60f07b388cde680072eca4b0815ee5f479e165626c51b84321c6790220793475c2711d3aeefe5ec4d5ec89be59c840ffb2d51d013c8d86c2b5d7e96a8f"
        },
        {
          format: "raw",
          label: "AccountID",
          path: "accountID",
          signature: "3045022100aad3a5a7ba18bb2cb73d647bc0a573eadf97b62bc08b7656dbacb982aa341d7002203a4f6e50a3f386b10d0377debe312d5a1462108563e18807fa8d45c4edd7615a"
        },
        {
          format: "raw",
          label: "TokenID",
          path: "tokenID",
          signature: "3044022002c7d20b128cd4703230f199371f6ccd18f2e3311ff3b431cfdba8ed69b8a9a602203a5be9d165adb244c9c9e0100bfb559fea69b7a91a9c4805d3cab7bbf649e2ba"
        },
        {
          format: "raw",
          label: "Amount",
          path: "amount",
          signature: "3044022048ed7a7e1860df3c118a9e0bc25ca8085ca4c4981d00d8a4a25bb26ee905d23702206cfe29c63e4da5415b402f1576466f6c629b44c733e3d4a4a46b61cf1f0ecc12"
        },
        {
          format: "raw",
          label: "FeeTokenID",
          path: "feeTokenID",
          signature: "304502210085ec5b05794e239114ee6dd75453cde566ea74286cfe76122ff69c230f54f3690220668392a6f480c2eff108cdb7cf3aeb287bac88abe59914ccd6932717e14d2758"
        },
        {
          format: "raw",
          label: "MaxFee",
          path: "maxFee",
          signature: "304502210098019a9ac20d02984196a508ca27d29c2654feb0ad161b1500ec7051c0ccb95c02203920ddf0bf7e17f31dd59994043bb0a21a3f91c9674f164d63df5cbd42e926ce"
        },
        {
          format: "raw",
          label: "To",
          path: "to",
          signature: "3044022067324800e3b2353a4ccf8faeebc4abfef0cecf550da5afa292dd12820e05602202203fa883cd57d057a3463d149117490ae889173e867b54279c488abba636357029"
        },
        {
          format: "raw",
          label: "ValidUntil",
          path: "validUntil",
          signature: "3045022100ebd27a8311ce197bf3bbb72856362853081faa55048d186a15017c998b164edb02204bff1cf694d3195d4c82a2c8d6f6b1d4db842e9fc891eeaff2d4ec4d8d64836e"
        },
        {
          format: "raw",
          label: "StorageID",
          path: "storageID",
          signature: "3044022058b6542b5fd416c8c321eeeca445df10141187fe956363d7053a90debea15abe022039b14b0f608f4b1c8757e5de2bef2f80741df2a85beb559d4ba710af9284e953"
        }
      ]
    },
    "1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:4decdb2662378b6612b240fda08f6d00412f088ccdf3023095323de2": {
      contractName: {
        label: "DeGate AccountUpdate",
        signature: "3044022059026d8aa3f81272e4b4b72f0094cd0fd04ac862e3e8ebc3e73ca7b923a45f70022046a1f7323da99a3dac0d4cc603c9db38b64ac3fa7519a1248e111abf926664d1"
      },
      fields: [
        {
          format: "raw",
          label: "Owner",
          path: "owner",
          signature: "304402205f7fae43ba4d7a0e5bed7bd9cecab4f2b55bf6ba6b3e33962ace5fabef269c0b02207bc89e0acf86b7593b18ff9d865820956508bb1dc3d8551dbd9f6745029cfb3e"
        },
        {
          format: "raw",
          label: "AccountID",
          path: "accountID",
          signature: "3045022100e580811e1e6b2e40fd4cbf4eb1a3f4baa934e6d96e80674431b2a6fe93581dec022010447ecd9023c4a028142d2e34f217b96a65ba030052c20eda6b3f4428ff109d"
        },
        {
          format: "raw",
          label: "FeeTokenID",
          path: "feeTokenID",
          signature: "30440220387d9f50b9af4dc0c2ff7dc73d513e1d816a55aafe1ffdc88827176907c3a5f0022007d64ad6946f932190bb352b5aa3360b4be0d1b50faee29010f5fbf132cbcc31"
        },
        {
          format: "raw",
          label: "MaxFee",
          path: "maxFee",
          signature: "30440220395dfa14a44c006079ec38d901b71e839ad10e1f9642b37246e4544302299f1a0220216a9b71a26e1a8ecd87f7f16d7a04aba42a68c18da25e8b608cb4493731ad2a"
        },
        {
          format: "raw",
          label: "PublicKey",
          path: "publicKey",
          signature: "3045022100db2cd9ef2becd6bd902458e4c3661be2f98db0943ca0b1d074eb249cac7139ee02203d011e51879b69be2ddcbd215242dd9e70f0cfd92c59fbc5089aee56bb51c7dc"
        },
        {
          format: "raw",
          label: "ValidUntil",
          path: "validUntil",
          signature: "30450221009d4db9f47704967c5fef69f7255e9dfd19abd928adeb7a5a06abe2fb8b3adcde02200ed93b341bc629b132313b1e8c47db096145898b3a741d165b21b653ef14c3b3"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "30450221008e187640c09a34fdda18f022ece0f1632315392192876af7df895c6245ee506102205f149a22b0eb3d9bcdc3e65db8a0e1b6494266c721c1bd4248e7de7bb8a4dce6"
        }
      ]
    },
    "1:0x7f268357a8c2552623316e2562d90e642bb538e5:d8e4f2bd77f7562e99ea5df4adb127291a2bfbc225ae55450038f27f": {
      contractName: {
        label: "OpenSea Listing",
        signature: "304402205f01e62b2331ecb9f1cb3f49a764d66015937cb20cb4c3af625146905ca4832402205076eeb4a74619b4552278836b548c8e525813faa9008399e43bfed7db016408"
      },
      fields: [
        {
          format: "raw",
          label: "Contract address",
          path: "exchange",
          signature: "3044022069df3b1c82dda9849a3df4cd0dd263d2b6c35e4fb8946865a35f5555830971b802201880d72b3d956867b597a2f5097d7f8799bad6e636d3de4030515634bba47155"
        },
        {
          format: "raw",
          label: "Price",
          path: "basePrice",
          signature: "3045022100db49dbd8426193b6012781f43c3b445d1cf845d99d738091c1f068951728333402204326a2da5203f25deec049deba760bb31a86507c73fe6828c68e0db2eabfc966"
        },
        {
          format: "raw",
          label: "Offer expiration",
          path: "expirationTime",
          signature: "3045022100e71a4921740fcdf4e489c517fc82f9b7e83cfbd675dff318acb91fbf8eaf175402203fac43650771c6523dad8d995ef414d035a92d262a9cf95885ef2704337a2382"
        }
      ]
    },
    "1:0xe92b586627cca7a83dc919cc7127196d70f55a06:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3044022043fb323d3a064faa38bcabad3a3f797dff60f55b49c19e350a9d0b1f980818e202205c3dc14efcc49adf915f195ff29fa02dfd9d08fca532b76086e501f9e0d133ed"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "304402205b674138eb50ddbfdd05768f2c641109f6c8f341d27e10ea12d59e083746cb330220521d739a49ee57ff9a41cf00adc631d3dd33e9ce2b23ce50759fb33c0ffce0a5"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "304402203ba8d470649ae7cb5d02764fa48899ec0414075ed85cb9fd95e89ac5b3bb073e02200183233f30de996a8b87417a6febcbb56a544c38fd62b6f7702efa7e0d7b2ee3"
        },
        {
          format: "raw",
          label: "Maker asset address",
          path: "makerAsset",
          signature: "304402206f3c4055bd431c1ceddce5b147c3b5acec950b267205da655fb3d331b9c070830220570c9cfdcc02b10abbf9a335ab6a4067ab7cae2ae8a443f795225a7c3981cc0a"
        },
        {
          format: "raw",
          label: "Taker asset address",
          path: "takerAsset",
          signature: "3045022100fb93cbca6ee524729b138319a92316a37c56ae5f89b3d652af7f680c3f160df002203d1fc525b11cd30d2907f844d7774f49995b2be7e3ba2896dcd4a6e73c8a59d5"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "3044022002e75adf4733bf28d532647c54fb0000415737db37b7e5674f9bb20179d01eea02203834ebcfe81d98e745572349bb0da4ffdc8ec846d35e3812119e9a3491462724"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "3045022100966a77a69a7e0c060f154a8c7ed36087d8ba7da111d9bacc90b873421fe6a75c02207d92956d938a966cb98ddb6e8b3a56e4d8e7725182cf1bb02f03f67512460485"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402207ece45c0993fa46316022cffbdf64307cef2caede370f27fdfd78471c3550dd002200da74e8b3b5201e654e7e4674f7471a333a104288fdf8cf80fc3122126113d1b"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "3044022014183f10973ddc0ccb12472d2437e33f368f627b99022735044e5c4ebb4e345802203a3f5e8aa5c928981d2dabd0442342c605db1626dcd0d3ad5e3afcd98bb8c673"
        }
      ]
    },
    "1:0xe92b586627cca7a83dc919cc7127196d70f55a06:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "304402206dfa1d54ee0a7ab236252618a5fac9c752152304f31838eab4ba4c6d2d3f844b02206658b1e9b2503577619080909be0f4c1d2a899b3d0085ed8c3f2a4309762dd94"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3045022100ed9b0b91a8cace4d312f6d1bab076c057e954a9cd33c3dc5c350d030e41edd230220230e3050131157f6fc2fc578df7b1108f69d55d25ab837c661045877b148765b"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "304402205d4913092612fe78d75c181f3ed28ac7808e25ab0131e73bebd91c08aac65e7902203d63f1fd4d5cc11b1f8aa2af0ec6a8440a0ed59d440237bce96ed87874c2a26d"
        },
        {
          format: "raw",
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "304402205f9fb08bef206518e5bf48cb7fd968709a0ae317e903d9c87a41c934a0983af3022066264858ae4a1338d4daa1b4f9dc7376335ce9e57d4bed320b0d4c27a0012deb"
        },
        {
          format: "raw",
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "3045022100ac653732f2acece7c47588bfff9a1059dc69bd3fa7e387cfef8246eb0ae2a70902204ffd7f89cd7223f8e52b7c44b02ac4fa1d06017015304f1a3a7459b20d54a5e7"
        },
        {
          format: "raw",
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "30450221008e59dfbed2dd4d1e2738b829d7a57fa23be737b652c0b01299f3d9482174aea80220138c8e948becda6dc1e7564358e574e7ac8d7016f2a1795059977f401535b27f"
        },
        {
          format: "raw",
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "304402203408e2bf0210fa4454baf46374cf876299578df056ddaaf5a907306804ca41cb0220056f910e3c500e4a8f55d5c09dceed9753a2ca7b49a9ade1955a598f4e64d657"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "3045022100ce5db907819f4f36c77f1e3a849a3a6ac9483970128998d5add5941e1fcf6dc102200e1f26e08a3f48ef6fe1d40a4149cb8603c5e70e076755ddcf76894d31f2adc0"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "30440220015799beef248e4eb12f95368ef44cfbaf65e43da1a4110623006e46157ab22c022055f962e02e4cbdc05bab79cfbee523da8ff9d16529c4e98755b15d45bb34a16b"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "30450221008048cec54417376b3a659e3aeeb349a4352751a099443ea203b59e9d2cd954b702201b32704d89bd028a6794ef315bf2a204b7293f547d14282440f5aea041a27ee1"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "3045022100dad584a953b3c56c67913e76f1a6626cb72620e23bd16f41b2817a95ddb0bccb02206189e3b49d9f3475bd52baff2a40c7f026daf1d2dad9cfaa403eb08030836090"
        }
      ]
    },
    "1:0x6b175474e89094c44da98b954eedeac495271d0f:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Dai Stablecoin v2.0 transfers",
        signature: "30440220692d38bbcbab753738d0c75d87efba7b93a88d4e225e73c7e4d0b54e4e8b548302205000ffda67117043bce94c327837053e2b6bdb888b3d2bac3c1c3b79997c1f90"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3044022067e97af5110ed4a8a5e8731a04c07192042b5ef4fdc598cb10256363c4bd503302205fc2e4b4dbc178b3bcd8412deb66f4b99b4506197bb046ad618457a1aadd09ad"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304502210099c45a68aaa7656be36f74fa0831546de4e7b94909143853bf678313b580963902202b01f4e8fa9f6f5621027c1147fc435430f22eae8a91bbd6e27b053e61a69d8e"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100a14d33c52e05746bb401190223a9056922671bc57298c50d58e4353dc72c598e022027dc8ae70e8e304f8436fabe626c2e39be4f2f03af71badcb273b32909a55daa"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100b6228fc8fec28b708fd63809e6ba0f950086a60729acaa7e3bfb33789e798e9502200e6f2a82c69edf0ee2f532081fe8692b88536d7cf6a7800579d87e6333b98e2a"
        }
      ]
    },
    "1:0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Aave transfers",
        signature: "3045022100b90cde117f034f5ac3cc1563397a65a88b65814c4eb4757d232b70f1c7731d6f022069394d2683d3230e7549c4763bf10ddaeb2cd9d48661b818605bd318220b9f8f"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "30440220671740c2ec59c9bf30287a9ec559ee15f5f10dbabeb97e4bbb1756ead6efa4fd0220607931e7d5e48150946b5d674831381304a51c756eabed869fbe28d6075cad17"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100c85534d029bed7daaed9dc5db7677efa56ac772a01b715934c94eec529cff88d02206947c5e45f9b60d76a41c20a2feca0bb06c19fa99863fabdebf842b7a5c088d9"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100d0e0d997bdf8103b8e7be6cc25e42477939692e3dc7dee410483303f3cecc01302207afdd633bfc842e19606a56968bd89cf556c7d01a8d50f07a1dce59c394c2b41"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402201d9e37c5e86e26acadba91ccae71bbc7cc582768323dd00542e579bdd9bbe6dd022069d5f52d008457fcad8ebceb4a31871f601626323d064326d258043e5170216c"
        }
      ]
    },
    "1:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit USDC transfers",
        signature: "30440220206a52ce36fb75683481981c6f1f2e1cc405da8b7172b4fe3b465b19139bd66602200d5d2a800a253881fe4d87ebaf57fffbc7fbb8591ebe251ac69d650469b51d16"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3044022048b3e79d00220b5fb5908cb13264f0a10ab1faa1f9c95702c4dcb91aefa2475a02204096676422035d37f30a9fea09553d5d1751413e5a2cb60d1b9919aa33e166b1"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100da7a47dbc3c943c29f2211e139c5dc43b6c54d79d4aec205694155a8a2bed5b902202f1a885a2a6de6b705f8cfe87d6994e470c779f8bb8e6e52166c4e41437e605f"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "304402204051e74e9df5f2f42d4f41e3753ceed3cd98a7061c64caf7d6042de668e6b26e02204a277db67a39a5db5aee910a4086482c76e13fe39793049c40514be6dcde27b0"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402204c15b30fec2f9f4724326abaa390a08ec626b4ada487d0ed3c6adb32a54da73f02205c6484d3e5ebb3d5a05d5286bc1443c69960771e44d392a16f6cf029325adc62"
        }
      ]
    },
    "1:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b": {
      contractName: {
        label: "List Order",
        signature: "3045022100cfd82c26631445df34b327b31ad55ad7f26e0480ea7838ae83274ad83b8f9cd1022044b5a3db6b6052a5b818b1bc6cb28d523115033ca7ab3c4a269ec37e3cde890f"
      },
      fields: [
        {
          format: "raw",
          label: "Order maker address",
          path: "maker",
          signature: "30450221008ab1ef7012cf407a80348d6be16a98d375bf959de72f260cb92520dbb30fc2ce02200d9c0e02c8375d94077ebe16c849df5745654a1c499100286201407be47688f9"
        },
        {
          format: "raw",
          label: "Order make asset value",
          path: "makeAsset.value",
          signature: "3044022018c3ea3b1768f348094f151f8e28171d1325d5cc1621478b23474f4695acf2d3022040ad4bb4c8c138857e426128488ee5a3df8fa0a7cfaf58e9858765a0f72a8a02"
        },
        {
          format: "raw",
          label: "Order taker address",
          path: "taker",
          signature: "30440220482e1c1439ea879f243fdd47cf043bd271c7fb73ba095463e920ab34c38076c002207c095ec3307fa3a3ebcd125238caf3f7c50d196db444559d31c79916e514f370"
        },
        {
          format: "raw",
          label: "Order take asset value",
          path: "takeAsset.value",
          signature: "304402205d33c23ab575fa613d37d7fabaa719f5aa4dacf8de0f299e83dd189eeabfc31d0220535f67346b8ed7d175193929aebead42b92921465c1474f482fce88bfd00323a"
        },
        {
          format: "raw",
          label: "Order start time",
          path: "start",
          signature: "3045022100c178033effb772f141b46a9d5b5bcfc48468c6e5c499d8865043535947b1bb490220687dc9018a38c62e01c91e90fecf9e18febe995267d1bea27d3368f12f04bc9b"
        },
        {
          format: "raw",
          label: "Order end time",
          path: "end",
          signature: "3044022074ecdea3c58a28565af3336de33390aa7e592e5108f6d9151dd000a90a5eb60a0220163362373d11f177e41b914dc10c93b76adfa4c27f4662179329e66b32f8f139"
        }
      ]
    },
    "1:0x9757f2d2b135150bbeb65308d4a91804107cd8d6:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b": {
      contractName: {
        label: "List Order",
        signature: "3045022100892ab54a425fa1306df530b5ffeab2944133f1fbc68b99b92e61abf5c5051d1002205eff72d6f2c65f7835bcb2c6593b772d0a45e152988b4379cdb52327ce5da382"
      },
      fields: [
        {
          format: "raw",
          label: "Order maker address",
          path: "maker",
          signature: "304402205990b238b291ad1bb3cce7d2acce868761c6a73fa79e87c05530813aac8eba5f02207408c5e30e840195677fa60d411d2c2bc76fbe15a7ad2506a4636f001708bec5"
        },
        {
          format: "raw",
          label: "Order make asset value",
          path: "makeAsset.value",
          signature: "30440220646b1bd068a229a75f7f0558f03d2fbbe7dd441d318480dc8eb532c3452ed6a00220642fe4f065198bab191c682e55487cd6464a90c9527983dcd672d15a0a083d80"
        },
        {
          format: "raw",
          label: "Order taker address",
          path: "taker",
          signature: "3044022014dff71fc22c0b53e918ceed99de5aa86cc49fffc22f271a9586a9db1197e413022001125d415ad2eef46353bd8e812248fbf3fc2b60fb5fc7dad3853c9d2c85c6a1"
        },
        {
          format: "raw",
          label: "Order take asset value",
          path: "takeAsset.value",
          signature: "304402202416cd3b9b1b9b7fc4bd5434f0f8c54638d0f29e87f1f92de7006747f4e856aa02207afb4547d03de6247628f93c5ed49f9122e2780507bc601f5211c89c8905b93e"
        },
        {
          format: "raw",
          label: "Order start time",
          path: "start",
          signature: "304502210095c5b1927e171ce8f0b74bd311cb0f66bff5e3d23a7eb52e1d6b696378defb2502204114def9ce15f2b698ea00d43bee8e8692568a6394e24c8e0b53c90c29ab7ad0"
        },
        {
          format: "raw",
          label: "Order end time",
          path: "end",
          signature: "304402203f435338d8130399eaa6939c0cc8f4fc5efc92a34256ac450d6d55b0ac2e816f02204c116eb40b3c07810facd9117572147216fdb175b2ce31c6ef277501dff7f6d1"
        }
      ]
    },
    "1:0xb66a603f4cfe17e3d27b87a8bfcad319856518b8:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9": {
      contractName: {
        label: "Lazy Mint ERC-1155",
        signature: "304402206bd24ac8c5cfa2b75e16ea0c315295368a7f780c4ec062555079cfe48d583a8602204300f968037f9ea84919cdc8ad3a22103b04e00b9c4dffe5c34ebf13d1b769cc"
      },
      fields: [
        {
          format: "raw",
          label: "Token ID",
          path: "tokenId",
          signature: "304402206e18eac55b89b17b4706547807a864f6c1b37eee09fff4ccad54e9842eb1abaf02204ef2984f87d6c0ebab26352ce82f8040aae5bd259ae55d9921d609b3936d15dc"
        },
        {
          format: "raw",
          label: "Token URI",
          path: "tokenURI",
          signature: "3044022067c04bf2be50a7660b11742d10dbcc84655c22a0d359c20b2abb54a4d23f2846022030bded842ae4208854c0d11d655b234465e2c9ee9fe9b1eb5074778ddcfa9426"
        },
        {
          format: "raw",
          label: "Token Supply",
          path: "supply",
          signature: "3045022100fc4ab75ab184e564ea297da785d4a749b913e58706dff4e6c7ae49f72a7e9701022067bfead2e11a323beca3821a3ba310d705ebb128f45bee1f394dcc7e60af8043"
        },
        {
          format: "raw",
          label: "Creator account address",
          path: "creators.[].account",
          signature: "304402203e5e5fe4636b283df4e4d027e8ba5e43d912f53125b052e603548fff051b37d702207ceae4257ccc801de3943fb68b1a0e2af546e12d3bc74481b7695a12de7eebd2"
        },
        {
          format: "raw",
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "3044022065a51fd2cafd0013215fb703e27052320d35951e5f9d26a3c3d03a050b7088340220193e98ad9282a96e3e7b5e6813bb5989c31cded994fed35d5383e68738905c1e"
        },
        {
          format: "raw",
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "304502210092d8aa5743b9fa52cc1d5caf4f83e65cf232b02394dae8e3056d29606377caf902205119918948d39a165950efb998e19aecb3bde611065e92fd5f5c10bafaacda22"
        },
        {
          format: "raw",
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "3045022100b7cc93e7abfcc00efbfeeb49cef4d2ceb5521e1c97b2bdee882e011292964be902203d7ebd7c328961e1ca66aa16e8c61aeefa3bbbcad419bc65315658cdb425e5b9"
        }
      ]
    },
    "1:0xc9154424b823b10579895ccbe442d41b9abd96ed:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b": {
      contractName: {
        label: "Lazy Mint ERC-721",
        signature: "3044022001ca2f9abb569b76bfb8398ba150999d93fc6a02f5e637f4ac3a125b6c48b528022007ab8f1b776d1b2f5a0b44f90214b02f71c3535e468f03b681f133c3bc217946"
      },
      fields: [
        {
          format: "raw",
          label: "Token ID",
          path: "tokenId",
          signature: "3045022100e762ea781d76c81e5f3b28269e03f1cfe7e33b847dbe20a56289841579b0fb4f022033c6249fc155deb94850e6e30fd7fb854f07c63c2b8ffc8b3c7d412c01b8398d"
        },
        {
          format: "raw",
          label: "Token URI",
          path: "tokenURI",
          signature: "3045022100dc369275a5b2d6a3c934221e9f7483082cd5c52bb1b41a802d260c54757cf29002206dfcd13e32357144ed68b90c2308208bfa699d95d917a97d8bf438aed08269bc"
        },
        {
          format: "raw",
          label: "Creator account address",
          path: "creators.[].account",
          signature: "304502210089448beccdb19e680a7f8a6dd4f1e0dc8319b3458f0d5a491518bb97af0e1f5002200dc01550cc4d0d3398049938d2a498c142e2e82eb9086c7d6d6a8f1f90d1d25e"
        },
        {
          format: "raw",
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "3044022026ebacc1dce44b2815c6e53d9030836a4768ba0019c4b6f9d8eb83d8699ffac3022076b9bc2f89daa7e5e21b294163e64ed25d2bdfe5f2373f6aefba4f6da1d92d3f"
        },
        {
          format: "raw",
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "30440220626fdb56db8c34a282917aab1f7fddd36a060eb35f117ded7b675be946acfac002206770d35391e086e1ab31e9fd9cea07e90b09d38f0b882857e394283ecd6575a9"
        },
        {
          format: "raw",
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "3045022100e22f440fe2bb06d77a0afc50366689ede59570dc91796305ea62e5ca5da5286c022074bdc3dc840c7314abcf6bbaf35fe5e20318c54a911e7508942fecd38b70db9e"
        }
      ]
    },
    "1:0x72e9d9038ce484ee986fea183f8d8df93f9ada13:65b962ff5c94fe989fdc9169a5dbf3662e79747c3932616d9f0a39cc": {
      contractName: {
        label: "SmartCredit.io",
        signature: "304402200fbcc50090e799ff0ce08f08ff8085c162210bc9ac9d599aa9dfb7a3bdfd716e0220555ea5626806f7756660657459d15120dec6fc45865f64d653cf850fbbfa1068"
      },
      fields: [
        {
          format: "raw",
          label: "Collateral address",
          path: "collateralAddress",
          signature: "304402207545402a92f3eed973e15d3fb43107e2b241a403796189def24abbb4ab59932b02207d258e006f51f0fa9cdde54dfe7e9145619b7041dc4481e24e125c31754df0a6"
        },
        {
          format: "raw",
          label: "Initial Collateral Amount",
          path: "initialCollateralAmount",
          signature: "304402206b7167d76ed863ab7d3346b0394518d1b23600aa94224c49c601264180bf5cf602207a712ca9c28e328905b9d6a29f908dd7a8ccda408c8e7c1671926ab0de5a012f"
        },
        {
          format: "raw",
          label: "Loan Amount",
          path: "loanAmount",
          signature: "3045022100dd03f4bd05938c7a0f5c8a5d4ec36687179f1cc1df63149e5a144d5d54a7de65022063433c2a0103f1afbebd2bf2a9a817d608874532af4a6a23bde475ce2ced6795"
        },
        {
          format: "raw",
          label: "Loan ID",
          path: "loanId",
          signature: "3045022100ba34308137ad49140a12444f123886eedcf0b56e02c84236f262278cd2de0e9002204e0e0854e50fb5eb297d53274cb4e37c25cca8782bc5b74ed7bc0190dd9777bd"
        },
        {
          format: "raw",
          label: "Loan interest rate",
          path: "loanInterestRate",
          signature: "3045022100c3194f33a59b71f01f5495e90c876fabc2637cd506706c20813aec5a2f97437b02200cb59271ad955ec23c2c3bcdcad8bb073c887b4331628319d0576a6b23fdaaad"
        },
        {
          format: "raw",
          label: "Load Term",
          path: "loanTerm",
          signature: "3044022029fca7f97f2a6ba63f9b90aa69fed3627d172b653cc92f58cc60fae16095c4d80220717d03ed8b35c29db91c1c7160cc4dc51b3cd78c70bbcf33238b8c78ee6c2bc7"
        },
        {
          format: "raw",
          label: "Underlying Address",
          path: "underlyingAddress",
          signature: "3045022100ae88653e0cd0a991b3b85b383770b590c8df16768ae90edfdaac379bd1ccbefe02200129a19bbcfabd47a9c660d3521549e05dead453d62527294ca312ac67b14b0c"
        }
      ]
    },
    "1:0x0cec1a9154ff802e7934fc916ed7ca50bde6844e:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "POOL token",
        signature: "3045022100cfb4916219e3694b46154274e51034ec625ca0d6473d6f092e2bade002629c8902204be001bf270bf5c1876e953476289439fc2260ff784c412002a395ea4339858d"
      },
      fields: [
        {
          format: "raw",
          label: "Delegatee",
          path: "delegatee",
          signature: "304402207860961035527e594b1ff79e81bdb65fa46787448952110edaf251d56f9f286002201b4830a368cc521e1cb73ed22e5ddb4a926d5d2acaf6d509f35c7fde009d223d"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "304402207049e4d2ec11fea46e4f306a65d90a4ee638e8eafdf5bb7e54661275d4899bca0220757516a4ac3098cfdea23e706f84c0c49be17b8bae343bce14cdd9f6c6ff9787"
        },
        {
          format: "raw",
          label: "Expiry",
          path: "expiry",
          signature: "304402201d635d39c2f3be12d24a7af1e8d7153c95f9c2afbb756c9b9762cfb89cc606d6022006590a2f50273ce004aba41ee48bf35a0ae7ba80e08b0f9b4cce9cc281df60b5"
        }
      ]
    },
    "1:0x1f9840a85d5af5bf1d1762f925bdaddc4201f984:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "UNI token",
        signature: "30450221009599eb72fde2d45adc2e0beadf055d1f5e8f65090e153ddb6fb02a7343c96268022015e9dc0eb7e7d733edae86bfa10fad3ac3ec38c23b3a9ec67fc82f53c6eaf5ba"
      },
      fields: [
        {
          format: "raw",
          label: "Delegatee",
          path: "delegatee",
          signature: "304402200a22c41784587dfc574c2d12346f16fc5669e3e89d118d021eee3e688c6a3ba10220569497a6447c74db8eac7e7c62ece12b2e604cb5fb0cc7f1ae51a005a9d8c7d9"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "304402203a967682891c28f9a24c824326fd48624b24204ff7438a97968fedf2e67ae38b0220066a33eee179bee5b45cef00de03039db1e80ec0590b30057258464ccf5b4b23"
        },
        {
          format: "raw",
          label: "Expiry",
          path: "expiry",
          signature: "3045022100fb2f59ec83f2a962b990dac7a4823a619ee3a67b72e29bab86e317d36bdbe665022052c113fd0b7e45cee1a428c838be4d38d7110e3eac1f45064c74b721b8b67974"
        }
      ]
    },
    "1:0x323a76393544d5ecca80cd6ef2a560c6a395b7e3:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e": {
      contractName: {
        label: "ENS Governor",
        signature: "3045022100e965ef559df040f2880366aa603d75e610261946912a663a5b33e17708da817102202b4d6130c5ba34195663877cf1d9679b811acf9048b9ed8625ed5c2ea65db40d"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "30440220644deea26170aa4a8057c70f769d35ab36522ccb0f6f85564450d46c11061c370220687d778df87c7dff5e3ad58a9e36952a9904e6389c41f4f8e8044c679a224847"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "3045022100c5109877ecea9a94096b612925e090d1aea128609d7ec466ec589daa3dc2f1e702206b7c8eec5e9351539fc164f576ee4ace65b776c051e0efdad21d51e42447dc87"
        }
      ]
    },
    "1:0x408ed6354d4973f66138c91495f2f2fcbd8724c3:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Uniswap Governor",
        signature: "3044022046d278627a7b68020ecda5e20d249bd9d141a404267acb8dec4726f30de5694e022073397f8438fad45b78813a7161eea60dbaaa1b421beea742efc8c07acb63fa63"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "304402205a033bfcd10718388897e99752081c0a4133b3c959b7b75a3568d585041e849a02205e2c1fb537fc0ff8e6b68a636215fbb4741d3df7c8202a83622063c77bc3e587"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "304402205894cbf601c96ca164ae7e5d0aab17fbbcec4aaa1d032274800d5a46eba8184002204c195d6936a05b162d5bba655f726f08337e23e10bda06b2f0a3f052522bdfbf"
        }
      ]
    },
    "1:0xb3a87172f555ae2a2ab79be60b336d2f7d0187f0:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Hop Governor",
        signature: "3045022100f708c71ae38defcaa58de06c664d79f18651aa3df1ecefeb18012a81897c70a10220587d6e2590ab6dfc6e6a563a2460619cd49d73dbe8bef4ed20b6a50f47068c79"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "30440221008a361a02a91db3ec96eebea92c3228c620d21f8004813e35f3b99872da81816e021f27f972bb44cb1a1fa033be2398c80c6d1b4890f0b81d022ef4bf346d61af25"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "3044022053b84095ce71d0e6ab15af8d979c46dc47ff6a169a88bdf3eab573892785122c02201c6c9d5570a581e42c1341f36edcbbaa173d701e6b93f424493125cc96e83d18"
        }
      ]
    },
    "1:0xc18360217d8f7ab5e7c516566761ea12ce7f9d72:2c3e6b3e91e39ef9bb3c1b1cd2b4d8da76bf433179c8042962671278": {
      contractName: {
        label: "ENS token",
        signature: "304402205b42ed5c642f2d98115b1ebdc98fcdd63ee259b14b896af1c1e78c8df480141c0220679cf0ef775ea5543f65f2249df9de807b02c17aa507d9e89dedde00b2852320"
      },
      fields: [
        {
          format: "raw",
          label: "Delegatee",
          path: "delegatee",
          signature: "304402202984c1b8b2c2be40fbb0b197b8666f309d16c10d4a737befcafa5887904462240220177c3d4ea462a56880e46e08ee5f8e8f0eafd87e97d287dee353aa21fb4db8ad"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "3044022009e1668b67786c2258d75f93297be950f3812ae757068c5407915fddea878c5c022066b9ef8571d300abee4d18d4cd0d59a5b2cd18bf78f3db80b6d4183e284e2ad2"
        },
        {
          format: "raw",
          label: "Expiry",
          path: "expiry",
          signature: "3044022070e6d8b8085472782a55f11ebcf9492ecf3a9eb423b37dc6b79ae17588e7da4402200e610027d5fd12d3b32df3ff7d951afed068bc26fb56e541b97a0622555a46ff"
        }
      ]
    },
    "1:0xc5102fe9359fd9a28f877a67e36b0f050d81a3cc:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "HOP token",
        signature: "3044022072ff099831505d99d7c73d930e720d0a3e28ae8932229289c1f1acc9b92190a9022049d78cce53e621f91cd7a11a1d6ec118b9f0fef6e16059e8f856fdfea8133f3d"
      },
      fields: [
        {
          format: "raw",
          label: "Delegatee",
          path: "delegatee",
          signature: "30450221008418fa1807d28769b22f0243f9e547905cfdfd66b19dca60eb2f3778149e8d3c022064c06eda3c8cd943486f52c064a91e0078a3be9777143a5b5925506554f20c9e"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "304402201de5084ebad45b344cacfa987c7b7fedcd438898c2cfeaed83921a9f66c78f7b02201bfe268f95c9d75484117d1439b2e968a5c9894a24c7fd751755a5b5c0da78e9"
        },
        {
          format: "raw",
          label: "Expiry",
          path: "expiry",
          signature: "304402205d3f2a2d51af5696c6b9905cb6f020fb450e24e2e4b4cb7a15fe1a622267fba202207cb11decd982dab1bd3322311a16264e54e00cc365cbd98b490750a324c0c30b"
        }
      ]
    },
    "1:0xdbd27635a534a3d3169ef0498beb56fb9c937489:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Gitcoin Governor",
        signature: "3044022010877c4c71832b3b1e52742ef0702837c162751458cfed684db4f9bf3dd9720f0220650921e5b88bdd0a9626ca7c86eed40c2b3f2e49e024f6cb643a7833367220fb"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "3045022100b608eb5bb848602950e6d1e0bcfc39bb07f465e110c2e6a1dfb0d0423c300bdf022079a4173b66a72e21c0e46e79a5a9a4dfb71af8dcfa181669c7a555733c0f9528"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "3045022100dfc160c48ba326093acb0a5674d2083c60a3f6db68605e4ddb62b179fd4aada0022070e0d09aac5335705a18abd5e287e8d0ec8ad06e2a8dfd4b24ec2c615407aa69"
        }
      ]
    },
    "1:0xde30da39c46104798bb5aa3fe8b9e0e1f348163f:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "GTK token",
        signature: "304402205df7c1169cecd36740080c772349d6665bde2a640ba4c2abbe1db07d575ccc0f02204e0be7975f8053e091f79019301e4202b97e611c4a2404e24c462afa3df7257c"
      },
      fields: [
        {
          format: "raw",
          label: "Delegatee",
          path: "delegatee",
          signature: "3045022100c8221f284e448a3c344036f3252eab8fb7e383a25782d38e579cc50e2e996f480220594f34a6c5a86948536be2d0c92315fbe8f812704ce96c405dd223bba18e82f9"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "304402204b28da4752953b61b09ba02640eb88d11f906502088ac8460b1764b820edff1b02204e6c5e6a5dfe32658e17f1365ee7d2344aff54140577a5ef1a3f55631c3af576"
        },
        {
          format: "raw",
          label: "Expiry",
          path: "expiry",
          signature: "304402200c3083a36deb4ae67a6adba07622cb382846e5f61bbc9a24d2d5d2233546083e0220693029f53ea4d6f862e86c0b6b86df7bdcecf9eefcafe0c33671b300b5d64506"
        }
      ]
    },
    "1:0xed8bdb5895b8b7f9fdb3c087628fd8410e853d48:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Hop Governor",
        signature: "3045022100e09179a98da340acd99714b47febef674162a2114dccd1e39b11b49b4e1609c5022012a31e4db15edec68ccc64b17ee8f5e7e693fc32c721ffa5169a89243f5d5069"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "3044022065b5f880626a3f9ebf117edfbc5f489d4fb80b9cd53674fefa7632d5c8a0911f022018dcac007b98e8b996b21ca3ab478855e040537beca824a146bec1ea51ed751b"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "3045022100aed88d7b174625aa5b4a84a5054ed0ae28a2a768eded543130ca80e05fd2234d02204343eb88dd232c5317f73d889554728802f4953ce0c2e794107a8a9c604767ca"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3045022100e3c597d13d28a87a88b0239404c668373cf5063362f2a81d09eed4582941dfe802207669aabb504fd5b95b2734057f6b8bbf51f14a69a5f9bdf658a5952cefbf44d3"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3044022075103b38995e031d1ebbfe38ac6603bec32854b5146a664e49b4cc4f460c1da6022029f4b0fd1f3b7995ffff1627d4b57f27888a2dcc9b3a4e85c37c67571092c733"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402201a46e6b4ef89eaf9fcf4945d053bfc5616a826400fd758312fbbe976bafc07ec022025a9b408722baf983ee053f90179c75b0c55bb0668f437d55493e36069bbd5a3"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022033e5713d9cb9bc375b56a9fb53b736c81ea3c4ac5cfb2d3ca7f8b8f0558fe2430220543ca4fef6d6f725f29e343f167fe9dd582aa856ecb5797259050eb990a1befb"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3044022056b3381e4540629ad73bc434ec49d80523234b82f62340fbb77157fb0eb21a680220459fe9cf6ca309f9c7dfc6d4711fea1848dba661563c57f77b3c2dc480b3a63b"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3044022052d2511ac923e69b1fb7ce984af1b3ac5dbb6a246d0d13eaf48bb742e46f70d0022075cd607e944328fe34cd20b83be1f29c7d17ff69d6bba3767d10784f68963c47"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022059c5ee5b2a73eb5fd8d3559da1d062b7b2487afa8ad7a60e37e61018a03d2bf10220009e228650ddf2355066e14fca9e28cbca3db4f9af69ddd2a446709cdced2660"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220421d172d59ddff6548b533c18d4e91f86d5393a198f8222665fa38ad406fe61e0220217abd89dd61d64c69e277ba40e3d887cd93a56383216b4d7d09f384a9731370"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402200a25c2a63dac7d3276335258dd789fb03f6d24616a573b214544a6c882509e4f0220324d55c052a954c227823adfac05b15acaa03f7e8c9f7513e5c6d106ecb7373f"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Send",
          path: "witness.inputToken",
          signature: "30440220092b302bddc40f340de94719e3614157f3eb857d28a5c512eb92a942f21e7f5502207555a1348617c5bdc05a26bb7d1bd214eaf688c33e56df6a8c928c9f05065068"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Send",
          path: "witness.inputAmount",
          signature: "3044022004d584ed92d09f60093cdd30ed1af730df8fcb239974eb7f56f03f3869090ffe02205fa25b2ab0fdaa0cd0bce684e7668c703d18caf7791c11f2870b75a054d76bf8"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100d321fe73987030ee4d72468cafe21845fb97b08dbc7a9b14e3421b050a5c4b810220755232e20dd1684e3a70964f838d7cf2ff458020eaef2736ed0febdecc4a4a10"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "304502210097a2271a3d7d20cd585511473d552b8a84c2b6128bbea3118ebfa1efd102f943022077cb0dce5ba07c69dc44795e2e339aee83a88616b80288172916d686664fd827"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022024f5c03f820b9c52aee938ffe7a5dbd882f45f0826307baeb81af8c6aa0ec07a0220464f90ced2bde27dc8c9cf1eea43ed23553213a784a7ad56cfdf9c92e1902846"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100c3b617095422e717beb605b1609898693f8e464c700549fcb4f4a1c58d4e621002205f658e57367adf7fa51cc12f122d49b0b982d50c1f526000cae39cdb39f9ebc9"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402204571e829b58a2c3d66fdaabb99bcc1b8ecab4941a1f3374a1b29a7c41d5165270220573c71719815aaf0eed481d128cb2a7b77a20de261771149c8b427690a2cd19a"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304302203b64f5975002aeb73db0a392fce0a706bf1a4f7aa062649c685a601e701c5c50021f3631a4a6213f01320ece3576b91b2f244bb127c79f1cb7c1a64eb25a9db377"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "3044022078be69309b8d5ea01982db35d2086bd6aff04515c51fe928ea29fd7e251c46de022059b937f71c84b06bb89d0f7fcd7283134ff56cdd0edd76585239b20b9cd58a82"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100c8ec16930a238fcee437e2e941c5723de4ed9eda5e8a209a622148fe7ae7ff7c0220639cfbbaa66ba10d28e9a50c257d25cb60e808d1f4e6eb4dfcb8ee62d96f3627"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100d3c21c3942b5dda1ff2d2a7ac05cfd432d12f1b155717ba0f7b4e0a04ef37c030220432cb15f7aee6d18bf058f30167464412ff9b9496bf9901424ea096106a5c20b"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "304402203a5258f4e4180c34a370f6fa58f3783986b637c5cc4606e0f0d1d9116d3050a5022070f724195bf7780b3f41670c93125d6a2e55b0d58d2128bad0db1925dad34f6c"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022026ad09b7426cb6990ac9814f57f135f9fa34515f4fbbfae23b27973f8acab2c202203f9720e91c8837e04b18431b7bdcd57acc1ccd7b7c62442f0feb791a1dda62eb"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022016b38151bd2469157548fb0b681d6e428a527c88f4b36fb862b7623a6b40dbb702201143008909039c6c393e49a99b6efe002b55485be80e663e15aa39513cd074a6"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100c6fdae9d879d2c20c3b7a66f44b2e60d6e781f0b0da2c21c5ca612b0a34ac3860220282196259c1d0bad4695f77a653ba03704785ad7a4d6007ea3055c5c4084a8d5"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022049575f4a12e8dc579430758de767a339d5b6a04de5665015cbf0ba01d79bb34a022010416cecc632d6c4e91613c5d341e93ffee3564a20d5b390910e01876ff41827"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100ecc369027c550864d7e27b14045a83b1fb8bd5f617e91fc7cce67fdbcfe23d0102207807e1041516d9af307285b3693c0455e97694463c7ef465c021b5e123e2f9b2"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022029821cabe9b7b8ad34e577763e3b3b73e1d46d7745f176c0b197d45ca5120a3902203f6e4d8fb46b08b0f29aca1d7a843384f67f9543c0d6463bd506ed68830975cc"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "30440220567f6afaa8b18ee1310021b01d7a52bb73ee39b63279df7f6acb7c670ef03cf302202a6a04dbfd0bd1329b25fa9c0aad3bd23ea75b0609ed806c1a0f89af9c257a50"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3044022059972380988a37639191db993ec97fc3cc3fca337349656be22584c7bf4a457b022038c4b0cfc9ce6ac6811f95151ba19aa1fc6bd5d62633d521b9487bcbac10729d"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100891252011593de624e816a4bde65d392c6a95e7136d25e1c3df87f55da4a6a9c022004c6662d8bb31800802e9e41b0f27e1b93ced79910f9200bffeea663f53e4e6b"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3044022018dac6574c89aa9a8b92bc4d8af9fe022eadad860baf6316497543e48e1bbced02203bb2cd4ed0d4f201be35d760bcbc598e42946c4eca3d3e9acc9f8ff7ee04313d"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220760c804178f8c1a084d4af7a91e77efd62eddf8df8c7d0aa2dff467330bb2e50022038f6a01b11e2efb2a4fffc8b9cb6adc8c1514e3cb37e1316a8f26f8d67bc95af"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022070e61333c1124c089407305d8e421506543b630cbea8bf51bb470639e99f788502202ad716dbe7b6bb19c7f13853b0808d98c577b835428e4bd69c076982f7af3f01"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220794c4834a6ae2591cf29b65951d07112bfc4644f2a1d287dcf918f7a890b689b0220259892526b885585d613996d8e5caae98dc25e540f46857ce68009e02d419956"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100cc930d8969fbe6470b35346155c0644392639277a5871362631ae64b92b8fa52022048ec82d4db747311e466bc159222ac9dd5da36f6506014dbd730a118309b0f55"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402206461309dbca9e52a41982a7e552c82bc4c9af6bfaf86eb80075dc6b1ed29280202203bf174d6746f7a0d9c9cb4a1f3c265505168e77a11d6520fc48b564505913590"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "304402206e9f01cf0e6fb5654079111f36e15151a6f5ed5a74523872f7c3f30049062f3d0220486fc213a2a0b5639f9bc73d9af2c8d72cd825f5065d07dbd674b39280811188"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "3044022072438d8ae8025fcb564b12922c23fa98f45a322befc9a4afc0bdc29a3f0b01bd02206c5d50c28cd89f889d60624af5a6e620b7e032b9ae8912c33d215f8d67a25d9b"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100f68b77f9abab174444dd6591cb0b9d27cea7f9ab6b505e18845021632cdfe428022077dd13be21f966ffa667b8d183d9b73b2862948ecaf07758e6296c3a91d19c8c"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "30440220337707d6704b19715b59259671fe9295f2f1de28f6fc30f88e241a9bdb0d5ede022065ccd490c400b259c24b28beab139a5b5353e1428a9f22a28665e3a2ee087067"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100a295338f63ca379908708d63cb7d42b09ba81deaa7d9c3547018aaaf25a3d06c0220309fc1107c3e64054c70b34bc18f93829378810884dc7b68497fa7a6fa4924df"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402205b25d1cb7ef6bbb8f6e02879e09117d0b94d527d365574f063dcad1fbd2d31ef0220095b3558bd1950abbdd6b6581a1920327382fe915b2e5a26c471412b670b4560"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100ab9c842aa2610538bc795232dad25e8a50e81d25650a906397add87b789e74e402203878fc6ecccd42a32ee6ca8cc012f809a46fa37f759bfb4fc76910468f672ee7"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100c7d481734cac976e96e751e52c797cf86d5a2fafa3ad1678247d912b7691f1bc022002f4706da4bd6dffd5fd944d29306b78f84db5df29b3bd9b8841ff53c8c23cad"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100b686e535824ea78c8da511c9f5578a692c8c564f800de448069cb00285bf53ff02204ac10ce2bcd4426d44f8e406d6afb253d4ac4b7d446920053b6d40a599b29732"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100eeddebb6f2d36b37e692baddfb08a1266c19a0b3d1818431790b82804e78e2e202205f649491e27d9519d9cbae1cdccaf1823bc7c0f72c2a8be7370ac1284678d81f"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100e8e4429d8ac6399463a70723bc8fe6ee781744051dc90cc7a219d7760c8c42c1022068dc3fc2e0931a72cd4aeacfcf05069c490958ffd8e01445d6dbe777912f8a81"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "30450221008f6e5cf2998edb97928157e4ee6f115735048b4443cb81d663c01d122b385d210220556955bea75a72150add3794231b9d2c09f755e7ca24f3b56b274f90b1986945"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022007fb9c8cc0284496623ac2addf6965f0d3590f6c665750ecc70da2e7d10e3781022021754691d2b82526303d862ac93c6bf430c7ed0de4120d6686651569e0d1949e"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022021dd2b1670aa3cfdabdc236deb284a4926735e44c944da5a0a91e28230d266ec0220792d3e213c04b24e9a8b6bd80a0b0282d195e5f610595887d38f1a5e06eed0f6"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022063612f2a7eeb596c7cf2342ec096a375b57f199eca9129e25e858049a18d36d9022078780da67893f8cb573a9ae13b06fae73725007ebad1ff8401d5fdb35111d942"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ba696f054c313316a45f7f7dcc32ee194cd540ba7dda0371923330342f639198022045a95216bbe7f6849de1f9dd239148a1200c3ee1f85680ef9c3c5cbc2f0d0cdc"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022071d58b918b46dcc87b2273564cb316c44445f4bcfdb40d960e621f9c8a7339d30220300b372353d940d195c9df948a21eabdc2dd8fda94a1bae4b68b1279aa67be9e"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100c2613428600e40453eaa16dc64b32cbc28e834fd1026a488b8111901e8a4ec4c02203efaf697edfb8c0c2a47b13de079cf3ac6144bafd828561d318d6c0936f28ded"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022007c87fe236c47368268c43a9c717cbae14be1c54ec437017bfec0e82a159056b0220618cbb3076a30cc37e94d7581b18794fd984dcc7ef80b115ff4caa937ce5fc2b"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022042b4a58ebd0437496554c7f55d8d3c4e3860d6f11584fe5d223dd8e7daf8996c02203eaa72b507522813bc2309f3aaff7554d93c101f61c64725828dd296f208cdae"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402207fa6c9184be3a43376dab2dbbea9a4d9bf122204d36952a674f12f2d706c055f02203782f7ac3835e2b27d79ffa86bd9d9fcc74527cd336356f690e3ec6e1f7a41cc"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100db97a1fa941cdc11f36e3c4f52a38a1d1356b05ad54d760f6ec9a6b0d7e1333302207c5a3082ab5efe025b53156bfe331284472f846d6bdf6bef266ffdd8c09fd2e2"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e2ba5f96a043ae4aac90cedf218743089bb91561050987cc58caba9698a439ab022073a4165b051af7b5c554dbb179a66a2bf51fca69b7f08dc59797d1a49c4ba0c6"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022007d216df344831690e2cc2b59a96e7caceb7d2f6e8a057915e155d40949b30900220286c5f55248fec292c0683181bb7711707a881cb59a4e87d81aadb79400536f7"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "30440220086d1e2bcccc09cef4281b7768b18ef06e90c10f70137b8f8bc4aa3b87705abc022001cff702dd8732f6efd68c24b4f75d6f51a6070064aafb3ae3e497dcdedce5a6"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304502210082d054fe78c4a8c696b8a3304a3f77fefa498c0e28d8dc3ae07dc32917b1bc27022072dd8a83defe29060404e216cce22c0df554962b41d643ff5348134ce6e66811"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022030abb7cea24e748d101452a614108fe3748581f2edbf27999c4a30295824ab0a0220504f8caa915c09ee5cd762011307b98d097bb0bbc424109626e8a5c703a33790"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022008d53dd46c36b54011aa4e64e9f494643d7ce8b3d3bd26eebb9bf9f8fd8555d902202e065f02d647ab179156422b08f76e2557ff7ca04ec0adc8f45bacbab383649e"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402206d89382c1e48d7d01e24dbf57bbf5dadfc4d8ac61dae5d4453530f570a89b223022035cd63f5c5db22152ce8cfa69a48aa64cea37974c842e83789118cf06e522cbe"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3044022050598cd1748cf0b03fc05b50c8d9cee36bd4566c5176d0729e2fa97dc462b64302205f9edf0306bd9d9e63aa5f53a4dcc2095693a7d0525f04a89516f3507c7245ff"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022045d7133d3f02e471bb17dba73dcfc0e474f9d35f489f41743d5922cfbfa1d8190220261ebfa97d11ecd8a712a4d027ec8602cb3fec902219eb02d15a978d38c60bd3"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100a79b22e04c565e1772cab5838f0d43ec4fe780b0ece6e3b8179acd226ea23d0f02205dd2aa9bb775a54fb1369691f520f02364213a4b83f6a11b74a570feb6e52e8f"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402207b233cee21d578b71199b88abd481759f9432aaa4e8bff82b95571662810ede402201f80c06b23b4188e5d14a78a27f95a659ab52c58c3571d7b74321c2e579fa09b"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022060213c390bf1f9cc56486f91555127b4dd77fdcae79a6e2a99f53cbe26298a8b02203f9e5a825bb511ed924c8016b5e425cce4eff08a5462a9b658e0dee1d3196c01"
        }
      ]
    },
    "250:0x6626c47c00f1d87902fc13eecfac3ed06d5e8d8a:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Wootrade Network transfers",
        signature: "30450221008cc1354ce071cf6fca73c04ac748e19c8f38059890ca8edd24997fc8eee0d421022075a65c4313296d58b394db560977203f92c4d3257a446b883707857baa701ce0"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3044022009821ff0b77c78535056f438d07921ce0dbd7fec6803d5d03ee4b01734353f7702207f8217ca8b546664e16641b1ecd2938ce7c13b2479bedd177cbac01ea726ac35"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100e05871b3c8ea11e281cf51c4a92cfd3d011895d267fe45ad5bae990eb4f6eba902201a3ec731f73bb832b0f4f6a2064736b7665f962b79e78f8f418455653361ead6"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "304402201375ae2beae14ffa25183ec12e04a513639acf93753bab04439c6341228de186022037d3b4e6d1f3949dc59aa97b007a9d10fa15c35a97e75093b4d193d75d11ba17"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402207d328335130376daec05993f90d29ff1f096c973e886f1780e4c5a37f597c8bd022021d50fb46839f197a5743f8d1a7cf5e19a68c84a4489f8000c3aa69d970f5289"
        }
      ]
    },
    "250:0xfb98b335551a418cd0737375a2ea0ded62ea213b:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit miMATIC transfers",
        signature: "30440220474c475b4d9801f530cec16033b33931942e10e0e6545815887a57ca063a658d02200c5d6424af0cdf3ac6d955306012e3d993d92e0d46ab82a3a20826ab8124a701"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3045022100d39fb35bcfa51b98602bf4a9c22488fda16b71b5bf65ab813d40c8b0c88be6ee0220034fd5b163764ca381a1380893acb6f20dbda5bcaf39577089ca2ed13df6ea32"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022011499af7bcdcde93c2b01cf992ac4e9b4b27eab58c19880e9ecccdb7ad4783b802207a2577e336ce3bc7f88644a88e7cee2488607f923b36deb2ad3bc23dadc110c8"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100afa43483cc8ed2a05c90d4849fe4b91bb39e903c0e6be17b35a558b8547f44510220698165919ed9d7bbde4bd68c361b89b63f327aa7b7b80eea0c04e6b55d33a44f"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022077cfc487e7ee97d654e8d8e697c9b5c601010abbe5da6d038323585a7d3230b602204138716322f1b5dac6ae5be3171fe93968b64be46185241202e241f77aaf04f7"
        }
      ]
    },
    "10:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "304402206cedf6d4feb10bd266dcdedb134bfe41bc915a7523af8afea57577115bf6e00e022053d8d852c11d3cd7ac72f8628dbd81176d7d3f3b94022890db40f2bdc623c33e"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100f73875d13abd7e873e8efb7286e4a6f03d587b62378e4bc9b99f0ab7cf12c61502201f0f83bfe5d3ec2074bab7090869adeb28a4b8ca1708edeaca2ee86917fd1e7c"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "3045022100d7a83bfc855d3663d06e71424144b765d33958d85286feb6e9892a4ce42aa6d502204d971f633f88ebac3fad39eae7ec9c0c2bc2c975567bc36fac6fd44ed6533642"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "304402204a3c4482f8eeb6d6b98b3dd419f460e44f36fe56bb51f785935033c55d269b37022077615aab2a89b767decf2c8586cdef0e0b6d5cf0cdd33e82f6f9af80e8c86345"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "304402204941ba080321fc011c2f4c925169621bb460fbf19a3aa210d8e2bd2ba64442d502200ce5ed6381f6558075e2575628d4c7cc07eb874f88882149865693bc75747283"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304502210082bed37a903d6ad37e596f2ceb5f07aaf8385e0cf8d8b9725fb955282583fd20022045afbefec5627f323b28e9bf985b53a38d2f9d85a14e2c6aa788832da09d01f2"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304402201b262b0175a6f4f614087f27f3470a4864063109f98ff378252e6b3e24c10cc8022032864a549b280ee714e5cdda0c82ed3be1b543f80dfc3482d7ea6f935e4e97b7"
        }
      ]
    },
    "10:0x11431a89893025d2a48dca4eddc396f8c8117187:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "304402201f04375e9e11c524b30bb0ee376da39b8a3154554c23596381f475fde0d98ecc022003b62ea220df2d9f142f7ed1833027e62c3ae792daf763977ab552f9a897b7e6"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "304402201e7b6591a30d29b73962b253c14ef29237776c7c31c45e628fc0c0c337bd2d85022038742407431502920c210039681c983fd5136c66f7441e60d33e1323a401b672"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "3045022100eeaefdffbddb5feed8d5cb865db495f0e64f7e64ffc2b9b1ccc250b6980f560e02205554301581d882dc07d0d3b68fd32bc97c3fcef797df752beffaf4e57e00c52c"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3044022073a7ea82edd6d37a1334bc84c2c1fd4f48a4439d61dae6b4e03e97403b6e75cc02202e52dc3c1e7fc55edd4b26735b315d722da906c33bd3e80cd56a10818f26217b"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100b97bf5d69391af6c1a807abb1c82ff6fd1cb7f8f8a38ece7989e1fb5cb66efdf0220491ee3aafd22725cc9f5ef8e707b09b4b3e8694fbc7c8f565eb083e6e9258e56"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402200bf15c7b36aa7c139f6aa655e2cd70e65e74d55b6eccf86d4031ce1adaee10220220147bd4e0a9388376244c229b02c92088e09676ac1149807efacddbfe05e2fa29"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3045022100b100b3d1f922e40319ad9025bce6c60f4393e7651dc3ad3e631e7f53a818b57f022023a50bf850381f9c21bf28b2364b8c8c1e18e90a7cee46a493b46d493796b06a"
        }
      ]
    },
    "10:0x11431a89893025d2a48dca4eddc396f8c8117187:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "304402204313086063aacc52b9ae3b3ea026e0bb927634dde0d381a1b679789ce5341aa4022000bad10cd082f96999c05eabda4fc3fc3348c8b8a3ff3960078654f26c4fd28a"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3044022059b5e764e094ebc42cd2acb05a5e6cb86d034cb245e7f3f41c39cc01e33fb0fb02204e0b4899a3685ab3b0e8e47378d3ddeee18f0fe6ea614eb43bfd8288a884b0b0"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "304402200900105da60b5d82721921c1b17679eedb2d5a446dbd1edafb3c4d539ecb3dab02201362f40c349ae46158c6fd535dc05c7c2253b57429ef84a927a481cbd2e1c9a2"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "304402204e0170fa8d9d08f2cd04274c5bc49af2956e44de671fa19771c9467bbee136de022072bee28c1f03437b514a5c206c9c0ad6974e2bc20680ccf966185d0b9b89b1f8"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30450221008723f27fdaeaa2e369d6855b2fdd17a681ccaa7a84bf729ebfc5864d4274e7b502204e85473bfc996354e3e14bad17c5ca194c125dfbadd1bfc4bcf501fb26585634"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100be252761d5c2661c5e0695f8657bd120264583ed6563f17b0f5439540b2bb0ef02205e36630bd5a62becfca9fc37a5a6d83fede8ec2244cfc7b54446a7441b3e27fd"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3044022026d8378c54aad02a863f9ed4ce8eaf92c62027e9353d47dd11b34ac06f0e27930220374c5f31be01e8a68a71ffb0f61537912f7f1c3f9e117c8b3a2935b6b3f92d2c"
        }
      ]
    },
    "10:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3045022100d4bcbf1df97f94d85402caee1799badf5fd6dfd9926981c389436d306dbda5c2022019ad7fe4ca5b2c8e63fd51bf70437b786e0b1cc2c0f3070e3cfdf70e75d6bbdf"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3044022009e356dfa8f01c37d5fbcb2ba06e72a2a0ffeb3251055f3c686a0244401aa7e702207e65bafdb36f491931261c08fd583f329c2ea903de28327bfb069e1fe7ab5471"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3044022025dfd47b46b43125781d1e4b63161eea0eeeaef93af87e95162b2601516cdbe5022060156847137356e6ff66ef5a5d72ce232ffac323be43e71cd2ccc410b55ec047"
        },
        {
          format: "raw",
          label: "Maker asset address",
          path: "makerAsset",
          signature: "3045022100e2ffc41ce9f722d7381689bd9ca2d0bd4598fdd543e7529d7f0bf2ae28abb3da02206a43996780b13ff0fbf346d7cd5520c759abf58461c42b7bea51d5b6032eb946"
        },
        {
          format: "raw",
          label: "Taker asset address",
          path: "takerAsset",
          signature: "304502210080af3a8d3c3e683a503975519535ee054af035a7ba136f2e981b01d7c6dc518b022012ca47f1301c7c439180c29e13bae36cacc03bb1c1b9ba8a505b9d035660aa79"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "304402203600b6973b833d904521bde12b73f52a1f1eb71b45a0174e1e579b33db55d55e02201daac27bb0e1d278dd34fac1be2205f38888c829fba922f7e3f48347e0a98b1a"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "3045022100e6937b6f434efccde4c4ddb2fa2c577fb9f4fba61bf2fdda3bb27b0b49e7274102205fb3e281767d845b230633092cd17e6b5ab928e341a588d79055602cf3aa29fb"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402201c1cb8f2cc362d6f10998948ee009df1912550cb4cf059d00447adf321a97f9e022051f2d887cd8a6a6ac26ab2afe8016eaa5a130661da74f7e482940278423b98fb"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402206b842fc4910a1bdc77ebc9b2523d7b1ead75f9d187c42a80ac87e980112020d702202b4c2b9cb8ce85712afe63a71cb542c5e5d3fdcbe33b9ae746fcfac13fca18aa"
        }
      ]
    },
    "10:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "3045022100c66935874c1f07e7ebf05ea2774b4ef970aa431001c655f0d6341e0c4d142af602207083981aa538efdedaf13bae8e04ecf0bf2bf1fb03843bebd8ddd44c4048aa81"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "30450221009a560c4f10e3b3d91d78d08b69cd2c8bcc48abb9d5a6da1bca1aa5a843d5e82302203cb5df5d1676286617dd169942b42530a422328a358e8b143f62c4c024547e16"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100ad531d0297f9561bb4077cda4896e1506104fdbefc05d1cfe360cd0e4810a98b022013ecd430ad3773ceca05ccd82794272768be0ceb3f1d30e12d331a73d1e9080a"
        },
        {
          format: "raw",
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100cb9280d868175b9645dd9417790419343e5cfbb481bad8e2d3c826d9b301b261022058010b98a71b91a75804672dd67361ee4f96dd7f5cb938f00e355a3aabcd8f9d"
        },
        {
          format: "raw",
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "304402200a7e0a5503d87ca2489dc26cfabbd0fea9b2e2aefec9c6bf4e18fe837c7a6ba00220273c59c30647aa17d4cddfd85c3d360e8659818d05382b3e288b696cf518ae29"
        },
        {
          format: "raw",
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "3045022100ce510ba8811ddada61a9695cb85ed202ff9af125f07f2f7995ebf1d1bb33798002204bbb2bee209860fd01a72df16c07e4903164cc2a3c535561437d63970b1ef8d4"
        },
        {
          format: "raw",
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "3045022100eb69ad54131f20195cfb2c304804405974123c2eed471c3fb6b3476ee33a904d02206c17f1c4ef4eed0df5c733331579004e3828287c5d22f19b43fd26d09600132d"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "304402207e358ef75ba3cbe3998df005e03ad4a8c2bdbdfaf9777d737242d1c63f5247f502201c2e916ef67cb4452d1b226faf1a4e38230a052865aeef6437e0a287441d0ad9"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "304502210081d61e89adc9bdf731e843903c80d4a42236c4fefa4782b912068d3ff12dfd7d02206c2c7569eb61cbdc7b842cd9a8c173cc7d90ad3be3537dab8373da4422adc2fa"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402205117307916d734323402185a37f2880822dc7cf386903688e57a4904a17891f502200e1061ce50bd198ef722159530c48217b93e2093afd48c1a0fa30aaeaf488ba0"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "30440220740a659e7855befa06833ccbd0aa48acfcacdef7c6a1035fbf30263a19576b5802200c46e51e89f469a121a31de0bd32e1ca9f3910413950415548e13d4c7c2a65d3"
        }
      ]
    },
    "10:0x4200000000000000000000000000000000000042:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Optimism transfers",
        signature: "304502210097b5f9c605c8649a848deefb70692f9df06dae6be89281311c03eaecc6749993022077d04b2d8bd22116067e5751a36b2b5bda5893dc05c701acadbb0a94bf98a3d3"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3044022068b87a8aafe0ac8591976c69c4e2dfb8ceb78723c8a01ca31893e91c4ee194c30220204c2cb5a401bb34b81a2794db238e522c67e5c9cc4b40a6c5a20a8ea05a7d59"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402204bd9534236d84bc4c066e9361ac77527236cd070fa55dff80156394a3cad0b6102203a1db664de0ff29ae87d1dbecef5162df0e85b84b5e7188f892d974849855063"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "304402207d83d323106f83abeacadec8ea807ba78fdf69d8abf2090fe8cf007054122a78022030f7164813aa07384cd4a9db4d60448eac0a2cdd0b79253a04f15ec81feff8bf"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304502210099472ce1f606977f91b20cddf79832490b1eb144876a583cd38d59cd210e78f502206bf56a5b295d4b5b7bd7332554440142eec32aa8660df237033c89ebf3b92d29"
        }
      ]
    },
    "10:0xb0b195aefa3650a6908f15cdac7d92f8a5791b0b:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit BOB transfers",
        signature: "3045022100ff23c421cf1e8bcf786a1a7812951b1086ea8e76bc6509415279460f03cd1d260220759b1f0e1d701c8778fd1a856b1c956e389ee2e70b8e5e0a57b56bfec1d31702"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3045022100921dc162a5bb3196f691a111df75007b16081bd9646baca74dcc70d16e7cb45d02203b6a2cb04c443a0740992b621cd69a6ad8760ec6e41cf433d34bc3abf481d76a"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100fa0c6662d99d0cc3436d88a9b20e5241e77432a58c1e2dd57de70b4615ac10d2022069c75349a829594ba80774c553d5467f6c911c29e3590552c54cf8514e64581d"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100b02b901503f4711fb216c354ac9de7c7b62e4f1a9f06f207a981fa0dec7e40e5022013e2d17c8d4cb31a30799a55fb6a8c691da57a457727135db1b5f8f685593e90"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100fd19c73e1627ed8b2708e48646535f03ee5422bc2bbfd08481986ee4db242e690220577e995fa6fc4bff088356e1b2153d58345cc54f6f4ffac912db862a767bad59"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "30440220089be7e339efb6b42b8e12dae2aa08f3d510d7a38b52e8d91c4f29053be1d28d0220766f9f63ee8e184a757c926b98e1121b04d34f276ea4d1cffd95d923290b24f3"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100f62470b201a4ea7a930f13173c4472c2a2e9bfa38b46a03f6279b170196daf010220033025c21c1e863fe76c40415c5e6219ab9f6f546b2c8c9c940a5b133999767c"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402205a98548b5322b602c94a3e01bbc36b80dd359468a1a366e26621498b098b631102201ea771630e801681fca25818d1c82dacf698d4e27cb7e172ec0c8686261ff2f9"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ce732c41e83e74cd48b2491e3a2bd1be2b0f090d8a41ff546d252f86b2bd89510220280153a526dac2f1f6e0abf8871e826a3d0a9a1490bf55559f9ad0d4cfc7a9c0"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "30440220245bb4193057384913be0a1ea556e478b1932bdf09bb9d4b895f0e1a32203f8e02200cec94f0bb732d8bf01b2a6d2503580794a33370157ccb408f66078f313e2253"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100f607f91959ba77569e1bbc520fd61ebd0cf2c6b0b4bfa449c45e86ac49f048e602200a1f105838d380ef60f765dcb0d3bcfd2eb9af8dee82994a942bf804eb5c144c"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402203ae7648a1fcc87edd672587dcd9c4222aef9b119eb5573945982eb4763c9c110022072d0a4d1e23db36c3b4852bc61b8500e0a9b4a58d56ed6b71d8491e154e1773d"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100d89ed36285b1474f6caac45467ccf5ded7e63218542cb36cbbc25970416479370220296bb6d4643dd43d842c0f52227fc3497c23f8402404a50537e8e6e76a0406a0"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "304402201e0da0f02cca490ca1c231089ef95664fa830ffa1225e1d66aa217034f988d7b02202fb83a698424fb3434ec61cfeb6db7ac565ea318145450544b6a3d509682f96b"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304502210090e29b4ae8364ce6fdf0a1162a381baf1db0d9654e4098e98aea191bf5dda392022014e87bb5261fb8ab9d1d1694ed928fbadfa81810fafffe5b684d255c4570ee1d"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3044022075f4050f8ccd04f0832ac81a5c73d12ddd78baad003e81f5931ce2f43303f14402203ac51a3456ce84ad7c934fe30a469b6874d47510e4b097b386aff5faa214b975"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022053bc0c1caba1f2a589ced91e416486419aa499e625d8fb4256675a3216bec772022057698f1ed49eb612601479aaa33ab77b635ab38dcce54f8d354e46f08a36a566"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100f1748b0339fccd0dc2e7780d701816b551b92c01c9a582387c9c5f19310c4d48022070a3ab6e0d49b285ca87f58ccb4eeccc979389382ffd6390e0d0398771cd3cff"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100cd701a6cf3d4150d9ac6efd79e72f790772433dbde62cf4b537b5ae2c51e0d44022009372e93db760ff9d6fe88c9a912d1e1595fe0fa85aa53ef759e13ccf95ca87f"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022018740d5b88a5a9245b59148cfb26c2728af523a4ffe23329646c6f07454721c90220426efe50d47b3f6f051ff70a132d93d3d549dd2b9823725bc2fd8e8affaf1dc7"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402203e43ecd4ec2084760949aa56b7fafc59c251a4167d23282c143fb656e336ffca0220470c45ce3711bf8de3be65c5dd969cbf3cfb48ac9ccca4570c08dfe331839326"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ee88e0e7b6a5d06bf2a5cbd4e20e18a7ab32b6a6992855922666fd09b0f7f52a022058ce3cef7ed4d460011cdae06235e6ec5b0198f73488ec079618fecfe96f6820"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "3044022074b7ba8d84ae723b378d96840f67e34e42a7cc8235f92809cbd38acfd8e81e3102206a4035bc4ac05033a505511fc81fb16ec4b7afad149036e96e209e2c88c52ec2"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "30450221009320153329cc8967b12adc5fdfa61fde2c57807a552ee970878071da50cfaf0c022016d4cde8ee6a8c630def520bf7a9c06101d6029bb0aebf5709f839a824d7fb65"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "30440220025edd135cae9420525f4002438e9186f0d829924275245feabcebd650df9c50022061c4e20eb3a08b73c659e6a9f90fa9de0d5f878b2391dd4a4025bd8412cbef38"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100cac79398284dff0750489589096821ca509c7cab28d7c559fbec188a2c5260a40220138e9660edf332876e210fd0f078763398b9f3b974e2929343a52c41280bf1e5"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100d9ebaacf12930a25b5d71a83f4961e6be38a92fdc195c80d1f387a65620a9e48022034528f3903c1750d88f3072a7f370251edc0afae2e3dec64104ab48b8c4c9e05"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402207bc1311206829d507968b3e84dd0dee4ab691d421af49140529529dcb100398c02204dbc969c87e22b6c49d0a4e380a39d4bc0fb38cbfc6d7c1dc7d3e99b205d5770"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402205fa34253eacaa7d0dedc81c750bb6ad845b3963ce55c69284a83e615e9b11451022048df383dbf5d2eeec025da0cdb2bec2f85a3aa71eb6c0304fb04febdc38aa97e"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402202879f7e0045e9f386a952c7c11afae1b4468c8b2109827b73b70e4146175512d02201230b61a655e972e44c2cff0dacafc125c65c12fdb609baa25f308c8b5666d18"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100cb246a5f272fabec7b7d66d24b5a0daa0965a3eeab2fbb34876d50a88723400e0220561a0b4b024e52b8f385eb06fe5e1b3d473532724e57ce9866d22816c519d422"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220057cc51cbcb260461c1142343632ae7b3e0e1203f6e6b2ff65d2db026a05fabb022073aa96aebbc3809efc58222cb3f9699e06d04a593ba971764d8680b4dc02323f"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "3044022075fa48e4ee1908f3986eabb7194c1de692d3e9735cd91cf1bcb942fa4a1f4ae6022018417afb2bf9a4c046712f2066a19261dd56ced9f6e5ae15c271fce34ec88733"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "304402204984d52189220650b0f90cf625dbbf721f10b86e3ad28075940bb17b94613be90220141f11d66a174f04322abd6c43732c8a57c0f16cb29cda848f62b33c6b139cdb"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3044022036447c0b1ac58fbe76a276241c6ab1d4f2734bdbdf7cbeb2e3730f3c069c96d502205ee198eff3b8d27c4354f037acc6810208c8d81a670ec781ad4732954ea2c247"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100b91c95b1169023fd3cc684864a0d3d9ec5e4aaf7a5d668782550a101112936ae02200103f3c7328456f37999b24b17da7226941f55473a2bd39ebc642433b7b0ead8"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402205d4f3c21a2ee2533a1738bfa13f5dbfdfea54cb74bec14963f3b98b1a081b39402207e4e6670289f83a4c9c7a34ab7e3ac8c3cfdb3e5a2064194a5591d1f0b378e8f"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402202843f21aae62bba18af01ec031ef1d4a7ec4187d3c111933913bbdbdac36a9a402202ca64ad80ec886752955ab7d8b05f5ae1b8927577da52eeee9ded32133901fa3"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100cd8897444bd4e942309a88278bd980bf04c28ef47d3d5084b09a1239db0d1747022046f871ef50a4b70c350dc07362838df1c82c6900b474b045d2b773e7111c7e99"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100c2038564accb20c9518d4d9b870bab149ba12830e4f8cfa6d847ad02218c60d20220152b9808da32ee0096db0159935bd0ffc46fdc53ea6537cee8edb694059b516f"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "30450221009bbfbee758402c58c94964a1c05b0025619dbcbba2cbc3f1804194074086932802205cba2cecbad6e4a1e742d8f97a15a9aa267e331d9bca94a3a3a3fee833df5d46"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100fed3b2d3a7ee749282fc0a5104e291f01e04e9322d2ba0e0b0d03ca57822005e02204df5d4d58fb7b6b2bb8beeeea085abf11cf1dd8864c9bdb01332d9e36f1b30cf"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402200c6d07634727994865a05e31e3010e4c00f17d8411dad17f6661895375bea71e022010dd22ec3a25677911b3cd6028e2e8e970b52c6c6bea366a7282ed136ef16f3c"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022070de1aed086e82cd1074c672da6f345cde3f38b0bc3bb589b79283add3a39f6d02207e19e2e44d856616d47c32f378bc6b53e2115ec183747cd1832a829faefa44fd"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100e8b938aa9e95b022f36d2915d4c4b8c1d5731352b2d8b6f950c7f5a7656137c10220063daffadea8558fa61a654c3f266a4893d43f3aee2c8ddfb82311a0ae4eaa98"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "30440220722143608b4d0dacc5ae754eb195202ad6f0a6206cb93eb0b474148c05bfa76902204df25ed00be2c86433cd13313635e8859e7225227fd8d1daa6afce6b57cb01a1"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022018ab2bd85743520bac0f1a12ae2e507dc5213a5dae15ab9d4cb96abd75a10c7d02206b111247d5ca66460b80458037dfb1cf94dc419aeb0c893afc111b3e7dcc9f73"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "30450221009f1e977ffe41b7dca2b2a90b638049b4e6ce9718a0742625bbd250f585700b690220046b21b0365d5f0f0c24379659645dc3ae0bb3172a6786e6f470277a3c400ef0"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "304402203dcf69efc767b5f912e48a09c797997426908b39948d79398d59f5cb03ee52d302207f0ec591d4ffb181ac91f5642f9399b30c705edad68d8cdc87e9f2cfa9ed3854"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402204e33179c2e3addf72fe73ba226a6a66579affd5c5729a7f7ab974330e7ca49ce02207cfe99ecb72b3da4500630c511da1c13b292ae6fa947a9f4abe57e491e4dc359"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "304402203919fd713c44c77eefbca735fb4183adbb5623ab06f179adc3c507171aa8d20902200822358aa225bdd0c0f53aa54e8b72d04faca88f24911cc2f45d68bb1e700de2"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220394e133ce4dbedd8dc671de0efdebf6879db547b75edbdc9f99a3e2a48da803902207721d57f8afac58a41dc46d5a0508cd8de5aaa6abb8911e00895b6838d620420"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "304402204c003890b5df1bb86519ec0a035921b850d50c1b28be2fe6888eec813dd95b8c02205a9915ffd8706ee9ad1dad003b025e5500ebb513b96d3b263805d5c00ee10778"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220206fe6edb38f47699a313c39d450d3e1734dee42f1e80d3bde46b4a328e2842802207dc1b99a14403d2820e4b49a50d74d12d5002c24938c87d9e818579398c3d7d1"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100d256adae757c57dc2171712a501fc5a747591189c5f566b53619e0ee734f6b9d0220357cc60df215a1a0656786dae9a4f8c0538848773eef6d49d5d343674b02d312"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402200eae2991ae611a1943fe8abfe04cb2e3e04330628fefc2824cabc48348a72c0c0220174bc06c3d0e197027eb8a760ad9aca3f0df8f77ab910a09ef8390c49b98c2be"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402205fa727d29151c9830043b6512c61159c1ea8ea8fd44b87c0596b5bdafde82243022017d97ef8e14639e37fe3b613b70504aa43a05c41c8cd5b03229e55036610ecb9"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "30450221009413e0559f0cf7aa12bd40386be3cf068c8a8e402b861eb48ab9f6a9c4042556022065012bcf4d724f70e07869976adac4871dad5d73434b939b0ee4d517d3a9eb35"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100d04b0df120f2fa8cca6a0c30a2a85fd0aafc505fb4280e2e5855ef6ae2d5c9a70220650cee78dfbcaf675bd0f48cb09853351f81329b56f7862a5e8d9739f6a59e67"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022070160446ea33705aeaffbf59f8d0d30e001a60c84827fc3bc0ece39c66ea80b0022053355499c0f8c0c560e028afd38034d4fc72e86967cc93a71a88bbe7a8a36cdb"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "30450221009574f7898eda64c90a4b41d0c1406be84e60a555a1703fb23a37074996cfeaf902200ae43416c2999421e912e23d392dbdd168bf9d5dfcb04324094cb1a0c7118976"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100ba06a297e0758ca99a5278e6fc854cd6684183501421de6db85c9b9d7d43fd5202203caadad0392f98b8cd4749ad2e7b47d0a8a25581374109cf33ae4a78c74facfe"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100ed72ddc67dd730a9c06f128b1ea5073a6d78a6c4f4f76ef6e140c5298cbc11d4022037bbd5706a289e0f540c48ebb48bb1dc6037eed5696a65297fff2c0f38813872"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402206357c271bb041a30604462b90dc60ada77d030eeae1fc29a80c4ab02c2644b3b0220514f5ee06a02abfb743eb98f583b679255570908b8193759bde14d39930f944c"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402203cd767b5c18ef0ce48a835308749aeb6b43727b08f6dc33c366ac4985393396f02207af2aab094bc0955447596ef6880447c448593b29a6596de51f7a95dbee8b2cf"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402201c8f5b0c36fb939b541b89ce363184880e729a9458421f09474acbe3ddca80af0220418c39c98965751cb693b0f0f85397b824bfaf13552f6f3404d994551a73a1df"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b9c663e4d3a395b429e0a08d4f72f6667ac0a347a30aec6e190ce92665dddde902203ea26aeb292dcf2f4bc8004d02c125182d5fd2692085e40addbc43c90184f4aa"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "304502210083135dd29dc57fdfb7d556f2292fdaa43196ded176f3c87ffe79634b9768eb430220646aee87d4f143ced44632d4d8b54e5f9f44433d50b7691f20bd656e07910b20"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "30440220744407f34dbe7e4f8bd89c055fb352da5e823529678f4af8398f109425cfbb84022011c50a670596e7daa4eaa94bb5649cffd8b400ef991800a268df4dcae1b675a1"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3044022021a552c1a12877b1278524ae08f176aecfb4d26c84d2ee543b683f956d989d3e02202bf706324685ffef89db50dddab34384280bd71bf09cd11f4f78e1bfc5a0053f"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402204556e8ed2abf2bd85b6d0073c05192a99d0d4015bf3ea13294001fc4db754dd202202c18a8259eea4e1374d567295d4ec58ce6b0fcef2004474bf22bf438312ed7df"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402203ee1f20cafedfcb944ea8c2e0bc7556a718c03929b7d94cf4ecca22d765994b1022079f358095f150c5e4d59ddb036c34e3ab4557561bbe64ab40c6b91567aac9b00"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304502210097f76005925a78c18ecc5df1bfd730963a1988e67009e319a4348afe768986df02206e1b4e5c75b65bbd06ce70fb50d4a54b3bf6af3db8ecf2f29fc8f0b5b538ceb7"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100c975df466b0ca53d729c8631d162b42a65119e0a26a116b2f72fb4e800b282a602202a964d338ad50adc7b66d9a263cc19c8fe662381c029783b622bf081629a9f23"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "30440220519c4f06f9d6dd3e085dc6d0a6de23064fa602f3dbcd27721eefa7903b17fc8f02202525070f0c4eec3eb3506cd98fe0709b90e13afdb21d1cc64b66e98057fe8234"
        }
      ]
    },
    "137:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "30440220295e0aeb17ca0929b2a94c324d67d0b5528aba268177f3ac297b563141e0002702203ac360d9fd0c9c0c12279d1e73bea5d549a1e8141f454d88fbe1e8ef970e6802"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100b820e4dfb1a0cde6dc97d9a34eebb1a4eef0b226262e6788118ab3c7fb79fe3502202d426a388b4c3a8096b3f84412a702ea537770e61ee0727ec1b710c1da520c44"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "30440220015921d09f25c9affdb99c858b4ed07cab1a8c81674094bbc35720303a676d7b02201fc7c60bacf6d32d89d3196801d5c8bed45156d6a012f222deee6aa4d9e37d8f"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3045022100caf1b5544825ee057566f9adc1c9ce4c4063936114c89b2a003ae42b2df0ed6f022059c98d1dfd79b83f325cf2e787d66b18c28413c66e8d805463e077ec534f7609"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100ff727847445431e571cd2a0d9db42a7eb62e37877b9bf20e6a96584255347e1902200a6e95b7f8e63b2fab0bef88c747de6a387d06351be5bdc34b2c1f9aea6fdd28"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100a59dc479a838a813909c140a15e6b65bc58c5633284bf973c436de5a592634e202201e038fc7995d939fccd546e4c85e793c0ad451216e36a4edfc7bce5be27808cb"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304402205c5b1740d2e74513a9332e3160ebfe5996186c68141055a95d733d51eb51dff402201a1e085dcd9487bdabe9e04426cd8b043c5bf158843fed944affdeef0768ad43"
        }
      ]
    },
    "137:0x94bc2a1c732bcad7343b25af48385fe76e08734f:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "304402201b1d17eea87fdbb8e54353a452304fd67862441df16d610f532ab06ebaa5ecf802205a18cdb6cb6b6825670f04aa7aa2ebeb26436922898f4d25f8ad4a947417cc00"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100e1a47b49e860b2be7f7325e5b5c00607e883ee4d167cbd85e5a85ab8e41b1a2602203f2a7442cbb889624d51e4e33bc1b2a4f11aabf495d0dd40fc903148432d9bcc"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "304402204eefc9722671796aab570e69e65cd0ad67bc251b14418ba10895e740b6fb4c45022020084e7a21b3c3e0357250c390085d80284cd71179d2b1dd7474cdc6a036b37a"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3045022100d3413cab0ad7042603051fa589405300b3d4278351a84ef2e673a0c99ff61a0d02202701a4c7a207d569b04df933663e1f82f7b688ca51fe9802b9181613a8361991"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "304402204959de15d7a52cafe0126c83455e1c5cc957add7347be1e180cbf28619d29d34022066bad83af5f8f67332f3c1dd9d60fe376b9bd581e414a093db1a2597c4c35439"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100daa96644ec41ef53489dd7c96a25d3efbaf6465f66eb9260e5a7e5fb26ea10cd022076103253bca5791a2eb47a57c1c471688f0ec285186cdcb764aac38d34190ec4"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304402203a2f8cc5b18e596424e3303dac52abbf1becc37f652aad68b1a587d422f4a49d022063bcd24256241623c9ca134c31a2faddb793d85b8f47be34bff3b46dd5576157"
        }
      ]
    },
    "137:0x94bc2a1c732bcad7343b25af48385fe76e08734f:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100b2fef9ccda3203d4d711b37b8c21dc777d31a09653ac849a1e16ba669a785895022019501ee864d298c314a0e596b1a3e938d7a8ddf1befdaae0c221e8354729ba5c"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100cf26f3f40e07db7986b82bc30685023775e69a06d6130f266a231269a418a06902200ca684076d0b8c364e3eccc772e96e28ee09783f3d6962f5a655e26e1d93e4c4"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "30450221008bfa64f4309976abc3bf834d5cca387bf2e6d7b735e249b4c893b636e1b8233b0220653ac8945d7647a62059e50be7ae720e99d6f0df96c88327e4fde25b2a036229"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "304402200ac929f206d584e7d83882e95da6eabae4c2498b5d5941e31341d572d82b11f002200f9812ff92d534e0df81bceb413c249177779ed0f8fa3f5b6259e304d87ce5be"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30450221009ce6551822a67ffb7d4d152b091d1a9bc67c47748a6e6d5a5d2c969a31d2492b022010b02868c85e42dbd46f053f01763b66f444feeac962fc4e49caa1c60541e7b8"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022028d210f6cec67f371c32b377ff8fdb2cbc71652a9d594e6cef91190a90cfa93602205edc2b7edfc4c1367a90fac0c3f3a869e9ae07e290aca6d38a430aaaf51d6fae"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304402202f22d2ebc0588d08c34348ac50a8e7be90dd3eee6b6692c9e4abb5040d119dc9022059039e0abf6973ad32c72a6f333c3f370d7d0b24492444000dbc222e0ad859ea"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:9e97b4d1d211350352bdbb5ef45c4cb52f988d93a2d4a8ec6e675d14": {
      contractName: {
        label: "Dispatch.xyz Follow Profile",
        signature: "3044022008ad0a8cfe8c2630848f05e54ab93cfd1f5c301eb52cc74537d67a56751932bc02206dd3e78f5055b6c65a73905f840963b2f696afd04d6d472f4185dce9f6262821"
      },
      fields: [
        {
          format: "raw",
          label: "Profile Ids",
          path: "profileIds",
          signature: "3044022079ab31498b3ef74e744d5414f4c51334e00b20a5ad7c0a0ea6f463462d0a3699022079b29776df1f5243794cc128f19478ba586cd3b9378b5809740e9980763f8d8c"
        },
        {
          format: "raw",
          label: "Data",
          path: "datas",
          signature: "3045022100c04fb22aecc349de63571095782ea34cde05e576095c980d5c86f054c1a248cc02207f5a41199516bed46221aebed4f0f377508d39d661ef7f6ea7b16877709aa4ce"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "304502210090109424df964562737fd1b5ce2f06b427856ae933c37f279af199f64fc530760220290cf4491328fc947f4d73f0032e151aa09caf8e085d0f0306fa355c0624dcac"
        },
        {
          format: "raw",
          label: "Expiration Date",
          path: "deadline",
          signature: "3044022060825e02b00e4487917d073f701639b1ca812f21f1cf588fa8eb545a59b1fec8022073ca7918a322dfeb966dfe5239cc1a213c14e67a32f5f51e14e53c05f4149783"
        }
      ]
    },
    "137:0x33c6eec1723b12c46732f7ab41398de45641fa42:2a4e40fa701836b6f11303b841424a6f3a47a5313c810b6651517fd1": {
      contractName: {
        label: "Mint",
        signature: "30440220513be6e618840924202f319870537e0c1f1eb2e684c0a2c61152fc4c20b41c550220026e22f2cd2e12a6b48f97bbe362600556ce3fe5e8b292c05c89c591ea446e2b"
      },
      fields: [
        {
          format: "raw",
          label: "Receiver",
          path: "receiver",
          signature: "304502210089eeb41d1ba1235fe8319c6a248e1ac66d2598979d265e2d4cf16abc34ba47f302205a59e802e42b3268441980b4708600ab6e05e4c55de7407610987532cf73462e"
        },
        {
          format: "raw",
          label: "Quest Type",
          path: "categoryId",
          signature: "3045022100bc6cc7ae4c2b3b4d43acea4c513e09d11736275fade4c0bd834d94f6ebd3893302203045ae14bfbaa4ef3bc0d9cf76f29cd4c90859464290632ee72b20f4b5c37f8b"
        },
        {
          format: "raw",
          label: "Collection",
          path: "collectionId",
          signature: "304402207537d928b803882aac63dadb7fd512f4b959c0e1a737ce7594c9b9e0a0c661170220587298e0e8e2eae94da28564b1bdd7f62273d7e3707665a7966f1b04a15f061b"
        }
      ]
    },
    "137:0xd4f2f33680fccb36748fa9831851643781608844:0b5bbfa7b0d5b8429992c11126083752c3db3fac6030859c390e1ed8": {
      contractName: {
        label: "unlink",
        signature: "30450221008beed58a311bd0968844684d3e090349ad8f4c4a203b7d907f17ec9d1dfced03022040304ccd72921e0b13f0b8844cc513a35f8bcdb6d088385a57c29d848b3e1fef"
      },
      fields: [
        {
          format: "raw",
          label: "handleId",
          path: "handleId",
          signature: "3045022100da2826956b2b8863be618eec516387f3ab418181ffdc37a5a196f9effa632a31022040f75d126f4a757e0ce18917b74a9470e23848eb54060981d49efceb281ee3fe"
        },
        {
          format: "raw",
          label: "profileId",
          path: "profileId",
          signature: "3044022064739575b6ac7bcaf48de8a5d9c260b8ef97dfcbad8309dd1d95196e18c505a302200a334a67c975aff07d285f0ebdbaa5101049e0e331ef0f26a1755709bfdd304b"
        },
        {
          format: "raw",
          label: "nonce",
          path: "uint256",
          signature: "30440220471ef79574484f61b5e525aeb61f25d06eb997073a34bdcd68e3130c429e81cb02203fb9eed967e176c7029a3aed0ef503c83e61167b91c4507c8ac6304457754398"
        }
      ]
    },
    "137:0xd4f2f33680fccb36748fa9831851643781608844:4103a5bc367237260ab8658d746773f02cb95cb8daaf8d5b54182316": {
      contractName: {
        label: "unlink_with_sig",
        signature: "3045022100f1a743e8adbdf6ef1cf1d16eb1017b16b52266b367c53fe2d22483b846f26fbd02203d87aeca769b75b0096cd5bf4bcdb1dc71132516ca79dd86bba57594ef41c686"
      },
      fields: [
        {
          format: "raw",
          label: "handle_id",
          path: "handle_id",
          signature: "3045022100ceb4eb671f78a9cf0e46b3b447224fe23fd92b1f950ba762e53779cc9225cd7702204313ddd62a34e8a6128f3431ad9742ae27771e1b5f9a7f012b792bb7cdf67bea"
        },
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100b7c748f3aa456cdc798b86f5ac3b59af56532278fd3ce0b8f8f7da1d7cd2bf5c0220672445bba4c5d42dc077d79712c344458656dce0a92d28bda1d81272c2410193"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100b7c86333951cd2371f0d94e39fcb9e349355580fe8fce42221a99bef49c0938e0220197a33b34f029674ff19575918919a28a0848d4328057eeeb633c150b4825113"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:070dde6ec3e5d5e7d8f92290760b7f3ab566049489976120347b7d4e": {
      contractName: {
        label: "collect",
        signature: "30440220274cb9f97529180cf59bc0ecba64e9f19f2a18df3df7653138fa5c4c68d5224502206b635afa415cbde57cebdebc2a0b5518be6d426634f09ed89664ac448ee31c37"
      },
      fields: [
        {
          format: "raw",
          label: "Publication Collected ProfileId",
          path: "publicationCollectedProfileId",
          signature: "3045022100f341665ec8c569bf59fa6c6e5dd568a7b5d0e8ed9d7b01268aa1cb9d18cfa9ac02204168045cf639e516096d89d91f9cf53d8b447a27007428a4bf4b0737b1af843c"
        },
        {
          format: "raw",
          label: "Publication CollectedId",
          path: "publicationCollectedId",
          signature: "3045022100c173358226f9841b57a93d2f7d622dd3f05f819a3e7f99249ae49917724c75d002205d4ccef5f16105c6d11fd2ffdd35b9e8154e404be39fa058e73dd0381b746c8e"
        },
        {
          format: "raw",
          label: "collector ProfileId",
          path: "collectorProfileId",
          signature: "304402206e73779691817f11b71f50c685075fd03e187a48e2c7f0754746cc61251e4dae0220233691543c3c35e99f83988753b3026beece6e26f13bf1fa197fb53638945242"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:21b483c455b899eb2e03e330261c2968719ee51273fe888f749b4952": {
      contractName: {
        label: "post_with_sign",
        signature: "3044022015ed7869eb391191dbded78689682b0cad3c7edd16e7512c868c5caacdfdc8dc0220685602e1c8982b96aae0578cfaca26f006a834c54fd7ca5b76c95a4087881648"
      },
      fields: [
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "3044022053c07fd41770b4c39a5122296fb110fcb466e42b7339b1f3b16842a6bb78d53e02207e5dfc7aa10aba6110888afc880543065aa5f07e822001d82a896d53c5f51335"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100b6727e222313381f043a0d83dc273cf2cc86207bfb6f00912da59a46ae3d6caf022022b20251dede2884f32070b53fcbb66617be8a0698f080adefb0331ed66f75bd"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:25313c662aeae5b5367783c654b0b41d2fd819940290fd26da4520c7": {
      contractName: {
        label: "link_with_sig",
        signature: "304402207ae80206eacb28604a57c9257543b43028d03535bafc53b965cbe15e6736ad340220474f63f7657f3607be38c4f9c88a95a2331ca168782803a35ae95a44825c281d"
      },
      fields: [
        {
          format: "raw",
          label: "handle_id",
          path: "handle_id",
          signature: "304402203066a8e761ae5459bd8d07a2d85e012cc6db178e00c47a75a43d081ecd43c45c0220387ebdb7c0f44df75cb5b2b9da79f2cd356c73f6b2e92b9eb037d87c12d16c05"
        },
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "30450221009c4b4d4399f2d315aa5651f4fd2dfa7313c949f493774dabf1be9fcf89b99cc702204dfe454f6ff07ce87f0825066b7b31ac2987576c107c7583e07fbc045153811c"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "304402203c0fc15b249263368185e82d4385909a63f8094217c147627965b558069d730802200d2d416f4a73be0429e1184328529a1fa60863259b708e70c0640fc6fee1afbd"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:2c4da863a51b4bcbcc6c55ccf1f22685c5bfc5d9fdc2b091a4979c57": {
      contractName: {
        label: "mirror_with_sig",
        signature: "3045022100eb0a2dff271a17bb6d79da946637bc29a660d601191d70e1d32bf1d4a2cd34e302207833823dfbef232f9af68c6fb63ed4e7f3d359a2258baee90b9d5fb43879b819"
      },
      fields: [
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100e1b2f2be8ed230b81f373bdec95e5ad9301f62ef08f98eb67e43defde27f52ea0220442c2bfbfb88286e11b43fa43e72e2f3734e282c8742ca7d49cfde026fd70508"
        },
        {
          format: "raw",
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "3044022072f532eaba3a90bd4eeedbee606bc7bf9d30f9c320a3d8c222156810fcac113d02202837a1063dacb5af39ff3371cec6f38dfa8be419fb96424fe393e98962355732"
        },
        {
          format: "raw",
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "3044022076def7f6c5c9b4d18d388894cb177717baab28ef0694f7aca6b8d01ab6e005a402207c30ceb8b83363069d6020cb203716a08596d2c21373ff334ba3d99225613295"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "30450221008d476b24f0f3f7559979397b6145f42fcd68d4ac285b1ad20ffdb0f85b5b65ae02204f68b4b385c5121585f7c0cd9d83c0a8e7a97a4c867e2ea14f327f732d2e7745"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:34bcec6283bd50c6742687fbe45ca3b54007977acd70504fd3a664b7": {
      contractName: {
        label: "set_block_status_with_sig",
        signature: "3045022100b15db144c953121c0291aee97a12cc9fd3fb78de8f2827dfd1fc72f130f7117c02203d756ddd8bf1a21b99e20e0c8508f95c425eb10ccd224381715cbc7fb22c01cd"
      },
      fields: [
        {
          format: "raw",
          label: "byProfileId",
          path: "byProfileId",
          signature: "3045022100a6f5390228f0d665487302ffb088c50e91220f018a5e3834fe921440594663aa02202e37d859ac67fdca45182a59ac1c888c799135fb7bbf96dc0f0dafe8d69a81fe"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "30440220701fa22235fbaf8e58711d8162de37e37b9ae416e607e4f191744c4d0064ec1d0220502da2bee6317d330323a0c979e9bf0cf74fb070ea67a4f17981c40664c21a39"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:3e5cf36b8ef5bdfbdb5645a7ac102ff44c1ece4e4027578f82a35e5c": {
      contractName: {
        label: "mirror",
        signature: "3045022100d75b35ba1454fe2acc30b447afad603caa5e112262015fbd840d32314926560e02207b0e765cd1fec69eecba2aee14d6e613beac19183c807e3b3eb21bd96b818b58"
      },
      fields: [
        {
          format: "raw",
          label: "profileId",
          path: "profileId",
          signature: "3044022026aac4b7c09b4b20c3144e2e9fc59a8384f4f6539cbdc567e2dff46dd0b1f40f02204c9c1de93a68b0b44da0f44d91d60d804de70934e3847b548379faf2eaee6685"
        },
        {
          format: "raw",
          label: "metadataURI",
          path: "metadataURI",
          signature: "3045022100e19e723f2d64afa383c89674c04ebb7208d6584106ecc2ddb4d76aec5e16c2df02202e5a8fa79792908de5804d15bf8b8baad74e43262f6fba18dd77286b5d9cf6d0"
        },
        {
          format: "raw",
          label: "pointedProfileId",
          path: "pointedProfileId",
          signature: "304402200e5b144cbf64182aa82802662e9589ccee6f8b6514f8ff40b2918d47438b586602207cf688e2b60bdcaff0fb4bac630949fb1ed8534688c294218c880f4a31ee0b7f"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3045022100d7579329ab85e0924f5cf656b1810b2106c9773baa9e5032c78af8b2a273fa53022018f030b62fe33bae8f0218453ebc09ded25e2a459f833cc395c61f559730ab30"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:47c475ce8bb65720c4f1e1719d21bd6c0f89d0e424318caef9473886": {
      contractName: {
        label: "link",
        signature: "3045022100beff5d608bab21dae867915578745515773ff2ac555848d7b5e5b21a3c7b67aa02200eb85429369afc29d8eb3b26f2290662af490bcae00216f50a98317a1e2512b4"
      },
      fields: [
        {
          format: "raw",
          label: "handle_id",
          path: "handle_id",
          signature: "3045022100be71019383ed910e9069478219c1c0e594b8abf1488502b1f01d697ae8a75f1402207809eedde5955c65362cf68dc7dc8d6dee11016a75d15278eb2d943c8414efb3"
        },
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "30450221008301a955b2e48d0b7b795cf86afe07fa52d01b7eeae95bec4c0a86776c40d00e02206578edb54793f5d68ad5c77282c7abb5951b6cdf0597db3f02adc96682e61fdc"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:487bd6f6e6253dea7aec4388c9c9a59a6cee6cbc9865eb72511cbedf": {
      contractName: {
        label: "comment_with_sign",
        signature: "3045022100966e8fbcd85a94d0347d75e2f63f8f6523941f954795d77908110f9995446c5a02201b133f6025d7b9c8a7aa6e9f6cbb9c29384a3fe5c7cc2d7e245aaf8a811f07a7"
      },
      fields: [
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100feb57572c991ec538ead71637af3e9c20fc0f8ff55ae96db111970626362031c02202f69b09a4c298ef8360283429b4ceeeaea31b4e59a7be465b72b125803fb5f28"
        },
        {
          format: "raw",
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "304502210092c92442c3bf2111477ef3f5f004fb9bfe5b65aead802cd0130edb3b2b8fbd65022042280fddd1138e474543dcfc4cd49adf3e382946dfe9dae46bf23125aa274763"
        },
        {
          format: "raw",
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "304402203f100d6fe2a7ab17727ba751589902c47a5492d5e60b0eea4c762fca9de7a828022031f803a7acdc380d6b3e844e0df3119922555567d16116430b1c743500c68ec4"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "30450221009c02cc897c262a2749a5a2c61fc8751c55139c4a17758ec70b0728849d73c1250220029b6d4901fdcc1a1840a735943651c224b8df47caab536b6938616168116ee5"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:62759482010064bf87244ddf3f52f851af87304da45274e8ffbdb099": {
      contractName: {
        label: "burn",
        signature: "304402206cb91707bf94bc392806cdb14d85877353fd647485fce098f041e5ade6134ce10220683811ec5809e15d419909322f03ed1b6ec5b68c38717ad06c6b0385ee3c3b96"
      },
      fields: [
        {
          format: "raw",
          label: "tokenId",
          path: "tokenId",
          signature: "304402205d18ec3a8003bc0fbb26de752b163e0bbbd77f8fb0b9017bea4619cb87de39190220743a256a6c6ded87db1b01894de3f2608e3553a96a327313047485ef965b18d9"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:62aa4609df2dcd990bacc19b61fa8cf0744b18d1dc85ceeea0ac5649": {
      contractName: {
        label: "act",
        signature: "3045022100d9ff204caa00262cbdad544c05c86426ae116fc7386e88380bdf49c259ae89ea02201bb18df1cc680a5ed73c084eab591438ec2477e4a7bd9894681bf797e09acba2"
      },
      fields: [
        {
          format: "raw",
          label: "pubprofileId",
          path: "pubprofileId",
          signature: "30450221009b4332e63f5199d668ec9303f97670628d6b122af5043ebf45d717b1184b6e5f022020ea22e28394812a4cbb1cf48a1d614fb8020fa777066145f5ddf98d057668a4"
        },
        {
          format: "raw",
          label: "publicationId",
          path: "publicationId",
          signature: "304402203669ca8c2cdabd36876e5ed39b3d5295148191035974d0f228176b0aeabac7d30220384ab6461fac2d5fb1e44012c7cd74f038e01d08f71c1fdd460e0c3bd9ad36ab"
        },
        {
          format: "raw",
          label: "actorprofileId",
          path: "actorprofileId",
          signature: "304402206bf788d79bf178cda6601da33912bebab43ad0329a4d765500ac6668a89679ce02203fcc328d872791cde23e53b485d4631ad4efa36bedf262abb3a3bad89e4b7199"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:64e0600665b7d148b3f8c7cac3c67c06a40c23a92b92b64d43ed854b": {
      contractName: {
        label: "Quote",
        signature: "30440220562b1faf7c3a9ab9b9093ad3f5cf25086049cbb3b5e382e728da1543f3fb3f5c022073e9e798bd8281bef4ab6f4e007519d63ab763c915f499e5be79eaff7c873e41"
      },
      fields: [
        {
          format: "raw",
          label: "profileId",
          path: "profileId",
          signature: "3044022057b03e53c61af58368ef1dc6d1d8d4db64482a06e5e64583912ab83dab7d7fe9022028bd197ff13afa320eef95074cb704d82d06b2415cb847258706d156e26ed63e"
        },
        {
          format: "raw",
          label: "contentURI",
          path: "contentURI",
          signature: "30450221008637c2745ef73d773bff78cda34c82edd7c1cb08487e3923fa2f7e116a95687a022059fb08b50ac82f6e550c07a7192bc537c444ec2ab95d45d35c033a5c1640f5dc"
        },
        {
          format: "raw",
          label: "pointedProfileId",
          path: "pointedProfileId",
          signature: "304402204203d284d8cd55980f1b1c7fb5a38f27a8382c521ae3091d1e3bdb5d3be4b097022023f637143703c499b166ef74303263ce777b46730e7dece60fbb4700b530617a"
        },
        {
          format: "raw",
          label: "pointedPubId",
          path: "pointedPubId",
          signature: "3045022100a125fc5a7f1a4537eb3f87e13328af81ea70003ffc3328058cd2526eb70561a40220476f098654315e370e33bab8bebd2b69abdae6a1c7aff30a13a0858c4909b462"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3045022100ca3fb45ffe7eae84ac9e8205e35ec97bf88dbbca94956d69aa68e81d953fbcf002207ad391a23e30a161a7e35799863157b85bdb55d14be61889a04e932f5c9b118a"
        },
        {
          format: "raw",
          label: "deadline",
          path: "deadline",
          signature: "304502210080a56b342258c626275ef0c372739414e8b59d4e7ae0ca8e7dd4df791469cf4d0220710a46b65970278bad1958cc65f7f1304986c2146e89053b906f25c6b666efc6"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:75a2ca238fb86566fe4ba12d8fef0a9852f577baee3fc9bfbaf678ea": {
      contractName: {
        label: "set_block_status",
        signature: "304402201a047f27b7afb027556821085b651f952d731bda71209c7857cc60d836836d0d02204c47493d1df372a9dfb0c6af5c4502181834a61cc46b0a85010eb740221b3727"
      },
      fields: [
        {
          format: "raw",
          label: "byProfileId",
          path: "byProfileId",
          signature: "3045022100a7d9e701ec6f27a56e9a32e988f08ca2bdd1e0e0649b6370eafa5b73727d6e690220490bd16ea293448fc7c2e9c8e7d4c3732a61793fed6e57bfb10fd69136483c44"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100ddab91289c73a6fcff65cce812acd56edf5bbb8b9b3d4490a474e36ceee04f600220279ce728d12cad2cef6d51524d0ee2bf6fd77533ea5c22f52c4eb906b433f1ab"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:7e13093933733b6e355959c0f05dcdf096291225677986f58b855f92": {
      contractName: {
        label: "Follow",
        signature: "304402203d05d3af2857144d7d6719a434209fb86b4e31a23a972a30b48a63012b859aad02203a1c9fd6e77bf01ee54e523545c0b534d956529d8b500adda5ac84cb53adba07"
      },
      fields: [
        {
          format: "raw",
          label: "follower ProfileId",
          path: "followerProfileId",
          signature: "304502210086ce10d201f2bcd07ce0696d09fb0edb6c310976c590728779b215c3b06e350902202b9abe2522e9587c6c80f18bc05d3b55aa24b78a6b512ca52eef73b320807c50"
        },
        {
          format: "raw",
          label: "ids Of Profiles To Follow",
          path: "idsOfProfilesToFollow.[]",
          signature: "304402203ba6e0b34e003918518babd31d60b67b9bd4b056fb061fbbe9787b7b35572d1b0220790db643b94787886311042444c4ee3a6dd0bf45739127f601633a81305aab68"
        },
        {
          format: "raw",
          label: "follow TokenIds",
          path: "followTokenIds.[]",
          signature: "3045022100d4d6baf19d62a115ff05056915f5854862bc9b4953faa70dbb89dd8af2d3b58a0220560d12216c5bd899338b7423966274476914b2a46735fc5a461423a11d522436"
        },
        {
          format: "raw",
          label: "datas",
          path: "datas",
          signature: "3045022100a3a40f4c17b37186d4fb96502fea483c0837d89dba2d86e950959142b19403d1022018bcb3029746d4fc0467d7f5c0d261ebe5d0bae6f502a74013dd096acfdad373"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "304402200666208fca07d5cb575ba6343820aa555a57ce43facce4830f92908813d974e5022023167cbcec528a72e296336613e5354678fe3f2cd00f7e2a8bf574a6d8a486a0"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:80c176be42decedd0ce1d10963034b678ce2c9a781ef457be4eeaaea": {
      contractName: {
        label: "Unfollow",
        signature: "30440220138ca52d637f7c86067c5fffa161f3903f24d778cca96a30c4548be8776c5c81022033aeae1247a4b5e38d1cae7797fd38b0abddd02e8dbca3b67f4cd1976c996563"
      },
      fields: [
        {
          format: "raw",
          label: "Unfollower ProfileId",
          path: "unfollowerProfileId",
          signature: "304402201694f3f51d449d10d120fb31e2711c486ba1e664821d8f074ccd3a1f4c28fc6102207a8e7a137973e64929ee4356dae0040ed71691cd7ab6d05e2da8b7a19e6302d6"
        },
        {
          format: "raw",
          label: "ids Of Profiles To Unfollow",
          path: "idsOfProfilesToUnfollow.[]",
          signature: "304402206cc14f7124cc54c692569b1e0e6ceeb54d565cd900b91efeb97790bfc8d3727602203e69a94df5c1ac37fe304aec1b0ce7f319ff09466c57a19b64d878c9ad6d84d2"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "304402205eb026dbe9c4e370c950cbfb1f5eca8008a85b0530626d18d032a5e039f95344022000c5c9fcc8552dea7353b7665a09591767e277bfba7c3481b16e2ae5b17edb76"
        },
        {
          format: "raw",
          label: "deadline",
          path: "deadline",
          signature: "30450221008fd2f449dd33406c1808e3fb316b6c821ecd28f53a424d9aec648424bd7914e20220247a46d5452c33e0a5b75925ee8ea77596020f21ad033201411f4204e597770e"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:8af86ea269c2fa5628d4e7c2ddf1e62bf6f5bd5a07f17856db0aa8ee": {
      contractName: {
        label: "quote_with_sign",
        signature: "3044022066ce14f394f03dc964c40540c4497e8beb0ccb9e23fd425671c61539aca6ed52022029933a6b4ebe3ddaa601c41a48e3836353f98564c4aa6007188f74aca2e1b98b"
      },
      fields: [
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "3044022033d729504a577e04d98d13b6d84c86d25d88a236557cd2effbe65be55aba7e9802204c62ab51a7bbb6603323c72f3e24b94544d936107deb2c343928d4e60ddefe58"
        },
        {
          format: "raw",
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "304402201326f878e1d9148d07b9801afd2d8b61ec6af1867aa6bdbb0eb359593548e9ed0220320c96fb026447f1af62fbeaff9e4ecf117bf8e58dde2c14e2714bfe8c1b9a32"
        },
        {
          format: "raw",
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "304502210089373f933d7951c60b47da9e709ec0fc28c50366dad2cd5b3e588b6a00ab207d02203f4ec2b735cdee2b6c06bcedbd4ac221356bd21d9e41b0992328b7c1d1258273"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100a076dec0c7feb81cc9669b3130d6ab6a98948ccd9566b9aaf1a6a63f86848631022072cf9a4d6b96a163b4262dc58e46405b5234d730c14646f19a272d8454616b19"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:9909de3ee56263be0d231b3590af5ea9616f13ff9ad1ff2889b375b1": {
      contractName: {
        label: "Comment",
        signature: "3045022100ed2c4aa6c95f02f9235c25a4ffa22bd7b17b94491ed6ae515d051060a16148d0022056d2002a24999109d2828685bb5808cfa8f24325c232611ed7813139b9c2e404"
      },
      fields: [
        {
          format: "raw",
          label: "Profile Id",
          path: "profileId",
          signature: "3044022012bb9c82d1778ba93755cad0ef5ae60d16cd031e4518a977ac52bbfbfcda5c2a02204ae859e24c8f72ea90b175462bad13377537cdd06ecb2c918c26487bceb8776f"
        },
        {
          format: "raw",
          label: "content URI",
          path: "contentURI",
          signature: "3045022100a6cced0672cd5e3f71c8acbbbb7fbbde9af46d38855b3c084007e466ebcc1da30220585c60120da86a91a475a7c77043d254368a3336538a518ede750313cc573b9d"
        },
        {
          format: "raw",
          label: "Pointed Profile Id",
          path: "pointedProfileId",
          signature: "30450221008bf5103548be1e4dfb70302d55600f1630f2a71440a32c1679309f729a90f2230220463b62310d865628eeaf8339ca0249306b0a58c05057a1bbbed32c6f96533e83"
        },
        {
          format: "raw",
          label: "Pointed Pub Id",
          path: "pointedPubId",
          signature: "304402203080c0a486bf69aa5e6c0b5242187f05b0c331510c50cca02e4721663923916102204e5c8ac70425ff2a3addb437cd0302b09fd769cf31b38b9914c6be2a00e0f3eb"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3044022021ec722852ebc53bdff303a327ac9fb8ca85d3c1b7331f3a74e36224a03f26a302200754e591c0e4c2420f4045d9f72b86829cb374572dfea7ebf9c2b02d1cb18720"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:a99363f790ad883fe3bb241d3de4b3afcdcb29d04018e7f3b858e123": {
      contractName: {
        label: "unfollow_with_sign",
        signature: "304402200e0488184cf4faf9d7942148e518530f3777676ac0c32ec9500e1def858c42fd0220716264c7be429bea5acf111c58c4fe7836933f13a1a87a8581fac110ff7ec52e"
      },
      fields: [
        {
          format: "raw",
          label: "unfollowerProfileId",
          path: "unfollowerProfileId",
          signature: "3045022100a01ea12793326480182402c1742d526592eb7c3605704488568c8a5bc6b879ac02206f8d48159f83c9acee651473315be799cf0a8d945685fd4cf80ef7815e94d101"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "304402204a2f85d72695d14300907aad0cdf2fef138ecece23e2284b32af8dfb456e5d47022003a31e07c9104a9302f52b7e5896f8e4988a96f8fdb4b6ae8463125c2a711a4f"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:bb16dbc5aec39ac7140b2be7560b53dc69091ac405d0dc9c9944cf43": {
      contractName: {
        label: "create_profile",
        signature: "3045022100c8bc13779d4affa2535364c67fd0fdfdcfdcb91bfda2ee29645df5b10c0ce021022043679732fba8f9a4f2195bde7f9cc3008de2c3f5e5969e7a198b3765a013d92f"
      },
      fields: [
        {
          format: "raw",
          label: "to",
          path: "to",
          signature: "3045022100e29d5ee58e92a1f8640b0a87b9e148f9d1f453c5825bd98a6a3efb21569f8ba002203a3efee9b6a581135cbf2e02fab5297bfe84124c7b53c9a6c490e67902d99ab2"
        },
        {
          format: "raw",
          label: "followModule",
          path: "followModule",
          signature: "3045022100ccefa65f301b19a11738d62082ab7717df57ce9ae834c85654324c2e96d0688402200c035b906f30b68be520a180de42313ad174e25ecda1a5f6953975ce824a39ad"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:c4318961bcd5f60585b391b40af279843ef5987b4de1c021a1099852": {
      contractName: {
        label: "set_profile_metadata_with_sign",
        signature: "304402205cbd8d6179fe4f3b58e89fdcb235973be3d43bf38c48b227212e50fab2ebad8002205bf98bdd1aae44d31d4e7d11cad5c5355796efca410a4079eb9a5fd79eac4b7c"
      },
      fields: [
        {
          format: "raw",
          label: "profileId",
          path: "profileId",
          signature: "304402206d3dc1a9ce664aabc49b5a9da69c973de34aa2a910965387948134155d5cb7fe0220057ce81243f25e6286f790cca12db07a27ebc83fcbb0878b6f9ddd44cd6d7122"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3044022069389e62eeeb0ded581ce91e752fb61b3db7c05d28ce95ea944b0b671987242c02202ec474a18cd966d8d9e20c9634fbe3e372478c5a5381efd369e14e1fbccadf7e"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:c9c7f3c34b7e22b2e08c9df904034aa7a66d2805bbb76ed439b35990": {
      contractName: {
        label: "follow_with_sign",
        signature: "304402202ee99ddeae71395ed85a710f1bde875a69d110d48d9942be8bfe5e1884199feb02206a230978387b6026ee9c97d0ce4b1c6f5ce40c7d44d57eafdf9a75718d432c84"
      },
      fields: [
        {
          format: "raw",
          label: "followerProfileId",
          path: "followerProfileId",
          signature: "3044022066e3535230da7c373f2913e833146befe76247d65db282385065e9023aa2ac8302202516f12f249c3739027b5d9ba43c5059da13773346197d7953c92340014e324a"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "304402201c9d931d8a0333ccde8d4545f4561e2716576197d825f03c71979d9da51f3db70220546538fe354c9309dbdc1e86cc87a5f2b57f15d04a2909a99b1d1000151df3c6"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:d071f8811ba8d8972da7e2982b8796f9ef8623acd4d9efb47ea517b3": {
      contractName: {
        label: "collect_with_sign",
        signature: "3045022100ffc5e96ea59fcd16c7baa3dfe1cc1d6692d6c96e26cb2459df3dd91b6e861247022075fcff9df082a3a6976411144a96bf1020ef21355a83e7958399d52cf0ed6974"
      },
      fields: [
        {
          format: "raw",
          label: "publicationCollectedProfileId",
          path: "publicationCollectedProfileId",
          signature: "304502210099436784574bf76acbc0fc0545e906e8aa926602e885065783c2707812070e5c0220072ea4073ce3a6ae2a5a233482cf4d44825bc2cd194b1b4953ad9e508ba669e0"
        },
        {
          format: "raw",
          label: "publicationCollectedId",
          path: "publicationCollectedId",
          signature: "3045022100bb04f580b5db9b6a4e52b6204dfa292339d89f22dba32519ca67b9defe20d96502201e7754b257580e553cd1ab13df0efb76356430d4867d820d76ad24addfb577bd"
        },
        {
          format: "raw",
          label: "collectorProfileId",
          path: "collectorProfileId",
          signature: "304402205146b54e4c4e1f177f7eb14f2c3aea4d85099047a570685a106cc107ce9ad8d30220748afed65ae98795ff8d1c4421d003afb45920a52f3959dd86b70aea25f89f27"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3044022074f936c0bb1dd1ebc38eb6dc4bfd965a12eb3a76aff1d010d7f0852d1e3b04bc0220095f7dcc6a816fa38f4292618ab991a0eea1b69c9825f7d926621a79b8126fb8"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:e16be30e76d1fe7d10df971f8669e616e11b70590ef4002bb58f7d86": {
      contractName: {
        label: "ChangeDelegatedExecutorsConfig",
        signature: "3045022100ccb92e84fee211f1e1fd47abee3a39fad87e97988d15c468dd074b32629cec9302205f52145220b3285e3f9528be1797511f56ced0d2a22704ccc2dd4bfa7fb9b767"
      },
      fields: [
        {
          format: "raw",
          label: "Delegator ProfileId",
          path: "delegatorProfileId",
          signature: "304502210098f9f759088ad8ce5383a15004c738d8c3a39bf5418b0b65cd0e93ff4e5c86ed0220746604eb87ccfaf0877b531cbc296b50037718b57aa13f0201c14cc883f2dee1"
        },
        {
          format: "raw",
          label: "Delegated Executors",
          path: "delegatedExecutors.[]",
          signature: "3044022020865f47450696ae64a2c628e35ed54ce4d8f13de1aed2065c87d5c9658f5a5e022008e511f727828e94a5709365389f20cc9d4378233767d639445cc17a46a87581"
        },
        {
          format: "raw",
          label: "Approvals",
          path: "approvals.[]",
          signature: "3045022100ddf33e1b7793dca98a966cdbb83d0ca6d191708125a6c50bc52cd388f51c57ed02206ad81605cc962b0626b37bbe3ddc2023f22d8097ed828d395c31106063acfd15"
        },
        {
          format: "raw",
          label: "configNumber",
          path: "configNumber",
          signature: "304402200b6e2d9ca322469d0d866a1d22a2b6fa23ae0d2dec7f8d5a51022163f2d0987902201d1e02f30cc9798115d5e2704165bee82afe69f2bb9af3ed626268803ee6517a"
        },
        {
          format: "raw",
          label: "switchToGivenConfig",
          path: "switchToGivenConfig",
          signature: "3045022100b2157446fb6c5205c8fc6b97ea444083531b40fc95059d298829bb96e4d7ba8502207aa09aa16328195ad1e11cf5ed775c4bce5ded678157ae0ae47ee976e00daa30"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3045022100c7836dd3d52c1940889ebd8e377616fa52834f0822b7ea3c75bb6e01c2b4657a02207c4bba14de8df6a291ba01a76ac58ff13ef077ffe04481703ad189740bb9db63"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f0cf3d3b7ed7ba54e5dfe70cd7822ec56431596fa9d1c3e2cd2b4e6d": {
      contractName: {
        label: "mint",
        signature: "304402206639bbb45b91a9c309742451e2bf73a29bc75fd32c428ee60d58fb001353da8002200b4aef1c912feaf73e3a45323a7df3b8b2df44afdbd0237a64b3723c7053f72d"
      },
      fields: [
        {
          format: "raw",
          label: "to",
          path: "to",
          signature: "3045022100af1ae8906e120f6783c5fb2518696ca60332ae1128de9b2478ab45c789bb05650220417ec699e96bab47c26d8d37b2feabac7810946d5de7987dcf5af3c95e04ec73"
        },
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100d339951d42fd3c3b90c389dc703af3093bd3fd16dee7f9f4239192f2b44f5cfe022054426b5ca70bc65e1703026c12b5dbf8d2e79928c9aa478f693388eaae1edb26"
        },
        {
          format: "raw",
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "304402204eeccfddfa2f9bf4dd9b9e1db1a9c91cc2f7bf22115c6b74676f2bfc53d820c802200bf3068effc45575b8b08fb809329a9c14769b23acb0b55012dd83df19533ec5"
        },
        {
          format: "raw",
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "3044022010452fa9f43371405fd88f66eeb50ddd95dbef93180ad5b147f9b368866d4034022012e23a825920c903a5fcb18db53c664a943e442cf79258536bcb576d4c839416"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f2d2c19e66c050722ce388552dc6bed2ed5487f7cf4128054d3d4b7f": {
      contractName: {
        label: "SetProfileMetadataURI",
        signature: "3044022037f24dc90ef82099d00622929b8ed180ff73cc92998160d234060f5e74f76cf6022068bff3003c656eec1aa2c5f7719e9d42993f64e46b72663257ecba783673182b"
      },
      fields: [
        {
          format: "raw",
          label: "profileId",
          path: "profileId",
          signature: "30450221008ed21c3944a3ef93c8cf1db94deec88844a51d6404933fbad3b72f0dc8f4e5e902200f5fe8234ae704a754ca5f90cd54329bb808b5f4e85cf37e0c7bae2c1965763d"
        },
        {
          format: "raw",
          label: "metadataURI",
          path: "metadataURI",
          signature: "304402205ac0d9389e90ccdba173fd9b5bc206ff7afe5f94aa97e6be83542e74c1883030022072ca6572f6b91d65f00976c46aa9ab24cfb87773da72c6bd5df007c34adac3d6"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3045022100cb681a895a6b4fc2e0fb4648ee3fb398134b4cc8dfa8387e04616bf87261ee270220067b327a33ab2c24efd989d15694e6066597c6070179fb33199dd9d203b28a30"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f48d14ae14ca8663b397fafc56d53833a2eea3e8a6450961e58f274a": {
      contractName: {
        label: "Post",
        signature: "304402204c6f0130681c8166f9f89c73ec30aa48d5cbea6d3f65e222d1c27feaf3f303a202200f138d210c299d234c527eff77064b37883f57ef8263942c871101b49ffe136c"
      },
      fields: [
        {
          format: "raw",
          label: "Profile Id",
          path: "profileId",
          signature: "3045022100ef075942ff80ffd16ab5aee79178e68d453573937830cb309649d5bcbe07ee61022055d84b6b081ce5aa88d5f89db163b87e617d181ae6f8b859d70f06026bb19954"
        },
        {
          format: "raw",
          label: "Post URI",
          path: "contentURI",
          signature: "3045022100aa09a0f04edac5f9241f187dfde4b0370091b3ba0bbbba37daec73246ee1b7ed0220265d8c8242e9cfb645ce0a18217ddab8b1c312aa513c9af1662c8b91b72920e3"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3045022100ac7a9acf7f5008efc137f632f5603e36541f1347a8cf2aeeafee7ce98f4f32e302202cbd3fbf86bdd772bb646febd6b5fa426dead4a840ff24e77d5fed9a7ea26d4b"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:fa764abeb889b33c2dd4e1396f1316d8cf49e87d0b5b341ced7b7f04": {
      contractName: {
        label: "Set Follow Module",
        signature: "30450221008d7d0ecaa7ae3d5c4d6ab9119e14ed55962722252addf490298fe3be29c8fc95022056f88897d6a0da3b495275071b8ca3a32f6d9b47b4f420d9bd2a1c2229b807a0"
      },
      fields: [
        {
          format: "raw",
          label: "profileId",
          path: "profileId",
          signature: "304402200a819ea2e5f20eeee5787138f2a7b32f3f237b48a014d049be742b52967c2d5902204cc6a95c24c2436b4e22a34ae5d3ad68d995ca9998f3a073056af98e8fb6dd0b"
        },
        {
          format: "raw",
          label: "followModule",
          path: "followModule",
          signature: "3044022050576104c1505e117d9acb5e71cdb28c26b34b1cf2bd91cf617a47a838a4d4a60220034626740cf27f0a9c2d4f3e6ce53e0d612cc2c8e48cd5999616e2817cb57022"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3045022100946b8bcb1606ecaa3786b80c7dcf08f8c0343ec2a756c48408d617f4b341fd9402200375a2e3c3be53320ffddf1caaed5fd4c12b61cb25e35afc94cdc29c253dc316"
        }
      ]
    },
    "137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3045022100a887a8b2f40695509ac6e040feb1a4a088fee459fd7e76cb137ea7c06b0a0b930220617b514271c05679e7ce04860ffca703ad2a21f4a45cce34b40e38624cf7ec13"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "30450221009fcaf300fef36d00f64c3d5e92991e67fd93862f8eddba0b8472568b5c66e38d02203a26f3aad1c0cf6638dea961f8f5e4ba5f72272bc7f1e33afac897a3b5b51604"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100984f166ee1744b4b69e24ed1e49fbaf43a24e82dd5b7d2103cf8ca854ff49e0a0220326ab17879b902521fa032a89c5c984e52bf3e31c8336cd67a1ce198d7c36e2d"
        },
        {
          format: "raw",
          label: "Maker asset address",
          path: "makerAsset",
          signature: "3045022100f4ec14863e0512804fc69d82fe17bf576340ae8005d0c48520cefb3254b102f702205fea57ba3919071157ff3ee0c93472e936f1dc079bcb0c447bb87ad86e505ea2"
        },
        {
          format: "raw",
          label: "Taker asset address",
          path: "takerAsset",
          signature: "3045022100957771ad2eced04af9750c1df10cc5b5b913fd3f9fe83408baa766573ed34221022055a1ba30b3a8895a011719ac54adaf7bfd24fe2c5041a90348097f719bed0dc7"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "3045022100f25edb42b652d5c645de567c201a1e6a64b0d6b23274cde08046d955cd2573860220129bbded4e33150cc38b93033b2d70d5fa141066f1ed7c603b5515ab8cdb2fca"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "3045022100c8790938f88557986c769102d31603849dc8c560cc03a45db99ddc90d69306690220295950348fffc22fbb898d75e768edb1edcb1c8772cc3518ff9687e957a87e50"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100b5e1dc4e5f69fd80611a4f5c7d306ac6aca4a2a2103515d761557e532884ca8702204b86dd5c323345242f1c1b263ba035932a10a5b0eeaddbc79fa10db27aa9d7d4"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "3045022100bd1de29559311612a7d0bca3c61b10d9ddf0753be7c372ebb95e0b69b674c01102207d685aa2b0a2309ad094a5fc8e09210681781f9a4294e4c7973d0ecf1adabcbd"
        }
      ]
    },
    "137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "3045022100b9798555ab901ed3cefcdec4aabd9418f3561fba299833ceadbf9d3043a996a7022037388e3956ce02764088733d92384fb4e669754b037e8a913995d761ac0d5cdf"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3045022100b57c5877ce124196316dde0e2fb0f18258521cc2c7c27405bde78008bca27d8d02202053d4696b28b40fd1a16e7a179020c7d633e4548da0bd92f9442c24da12d510"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100b35db3057953f7b747d4423f688d8a3fb3101729f37af65c4ac4fc9a7ee8fb8d022033f4d70422b437593f00af75828ff067f914f825bd3075f8462080bf4e0f9ae0"
        },
        {
          format: "raw",
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100e2e0f280d333692a776343669d6f17dac3ded8935d5875964d5ac6b05bb093f80220589afeaf7a7baf3b5964b439111d07deafe25be8a32b43640a2cc073a7257aa6"
        },
        {
          format: "raw",
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "304302201e35015cc3bbd6ca28bd57eb970cf1eb05826a4988c1238e951574f8804f28c2021f0cae62ed8199b725a39e714e60c92fe522ac7992c3dc1a27866f749547de89"
        },
        {
          format: "raw",
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "304502210094d2c3de8a61bf940dc5c8132070ee0566ab6d0059f1eff5aec3ba1ec04740a202200fb41470f2693427466a9ce580d5c9ff12243f848351c7aa2ac070c1618896e2"
        },
        {
          format: "raw",
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "3045022100f9b55eafa8d519298960b040f36a7479ace9d43b677d243d22c3194147dfa033022025f7a2962e342ee1572f814cd8b8cba1382deb20054475ba9df9dd321bc9fcc7"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "304402201aa4061287e14289ff1c4fdffe8ddd811775aae4bb6577970ebb87735102a5ba02207d9c89254e9698a7aff849a87c2a163ce9793212a5fe3745e446393c6a71ec46"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "304402207ca92ed4b465b4fe1d4b2dd65561165a70b54c8dd132dcf15031c799c8ab22fe022041d7bd664003c62e949cdb0ed09a744ac6adce7d6e676e4de22437a830edcf74"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "3044022038901c22513acf13bac39f553c763d26ee32c3e6e215ca3cb69da0274ca901c702204fce716fc91f3cb7ac7da446bd3432020d002c5a62c48d199d7b4379fe93c9f1"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402203361ee1439f545c9664035be586925b2fb4878de9dbcdc7a519b5eb95a44ca6e02205f905942febcf5342577b5af149ea4deea5e6d0e1ae17356bb1d0628d8ccf8ff"
        }
      ]
    },
    "137:0x27f8d03b3a2196956ed754badc28d73be8830a6e:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Aave Matic Market DAI transfers",
        signature: "304402200ac5ab94c126dde729e0159a1eed721dc3caa04f908312aa74c66af16004fc7602201aea814d65a8fa0554432cde24c032faac6a773fc00cd4c9db5a0e7f22d7c99c"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3045022100aee488b860fd511c87449f2a833590a501850564f4613eb5cf03466303653f4002204c4ed53c89bb8fcc4a065a3bebc2c70c3fbca495edfa74c7f76b4e7297229713"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30450221009514d69c48b51d1524fcdd437abf7db5144750ea606f48e9577a2d578bf4fb1f022020f9ef88c2ef73eb31bc05e4082030473ffb7b466770fc853736bfc82fb44aae"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "30440220732e37dab1ace5d04362dd98df8ecd47932b1b63dc5370da6a9e29e695d2a41902200313fe832be4e63fb12a3567dc2836fc2d02cf38dbafd7ca2d92a0a03be8e9c3"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100f941565f7d02add0ef8222014aa5005c8c0ac9de29865a4a66698db61c361f6c02205137eb64f68fa35067bac6902f2a670bd335cc7db07e0f2f41e2f50bdba2d9d7"
        }
      ]
    },
    "137:0x28424507fefb6f7f8e9d3860f56504e4e5f5f390:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Aave Matic Market WETH transfers",
        signature: "3045022100d82c58e57d3d4040972e93cd45dfde23f59291603f0f6e77911f4d25210e532102200f1500ebf2516f1051190a05641219627ff2ac78aaeea2f67d723990089a0890"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "304402200fd95d9d23b7f6e91d3bdeba89da05b66391f8883b9f7f66b30cf645b6baf5c802202ca600bd52e3ed1cd580713ee3d6f0b96d47e09d195979ac4b023ad8d06bf16a"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220720a40e847932e9d428749631d4086ab7b3986473c98ec54e09bd116717d3ee502200c4f39dee8066fa918f4e364d3e3c7331fb2ef495bc01cd24138b8df6b49bd44"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100dd280077c93088f7ba943099394deb2de7b6fa2753ac0fb91d7d0fa63a0ba9b702207be01299ab0b365b8b3950042840f56b0def6fdea0732b55195d897af08b31f2"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022042c6c68346231ab45807c1cef0395bc6b13eea68049fa33f4fe5f7511c4344e602201caca117a547ce09e1c80fa16ae66c52dc6c2cf0ca5aafe2f79f630c1e945f62"
        }
      ]
    },
    "137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b": {
      contractName: {
        label: "Lazy Mint ERC-721",
        signature: "3045022100977ad189fb3f8c809caef784ca6c66fcda1c98274d92219b07416e43f43187af022051b069af307aef8d7b3b3aaf815eaf0e7e91c55f994616f3ea88293dd69f217c"
      },
      fields: [
        {
          format: "raw",
          label: "Token ID",
          path: "tokenId",
          signature: "30440220403fc14ad30f3f3ea597f75d88371c83ef2e10130a5143faeda87dc507fb9aa2022056202bc01b283e0f625b82c73db84ca3f17eef6d9eea89709aa0a88eae17096c"
        },
        {
          format: "raw",
          label: "Token URI",
          path: "tokenURI",
          signature: "3045022100ce280997a6b39acd5dc3522401c205eb4719b4b43e7e673958f1c7b7b97a8f59022042eb6a70f1f45c771a697eb85b71ba58acc8074ac436d27840ec1325423d7e0c"
        },
        {
          format: "raw",
          label: "Creator account address",
          path: "creators.[].account",
          signature: "3045022100f072042cace3b6ce605bbf0db7c3941928cb1ac5b6011bf47e04d76f57bbf392022054eb24e12319d88144a5e4d15a22271f2f1285d51f1b7f48bfc46ff1724c1741"
        },
        {
          format: "raw",
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "3045022100b5517383a1f9f7281859e1e3ebcc588770ac08fe7961d83ebff3ff922674fa3302204c490c86d4d987875aa55c089a6c8bab4414a742bc7df19f67261a319d4d8c17"
        },
        {
          format: "raw",
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "304402203660c0f0da24c89206e992e46c399d75d4e0981dd86bc145f4ed0d0ef469b47402200948f415f220225eaa67fb03749b2d5ea1ca8dfa76eda34d15c8f95746e30bd4"
        },
        {
          format: "raw",
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "30440220747d86766a08b5bf78182dadf5ace3813cb8190266e5d1a72f2d94a387fd6ba5022006c69b8171a47fa15ef906fac4546856dd9467a8e1036d89e323614e64d29715"
        }
      ]
    },
    "137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8": {
      contractName: {
        label: "Meta Transaction",
        signature: "304402203e256b1407f82dbe395bee10e34bf5b995c3fa91737172b58fb41bcf8e006eea0220046543fdb21b8f65e050b57081915c083fab2abc1cdd663ce53b1c792dbfdfb2"
      },
      fields: [
        {
          format: "raw",
          label: "User Address",
          path: "from",
          signature: "304402204576c4999dd6a70df131dfd032667a42695d333a07b3599ec6d72843c54b48b502202cf424d057bffceadbbcd9023b2241bab6d2faf8b7324fbdf87f5daa9789fe38"
        },
        {
          format: "raw",
          label: "Meta Transaction Nonce",
          path: "nonce",
          signature: "3045022100e094b23ebe8102c3c1aa5f802c33ed56f48bc94f6446b289ce358ea60ac375c0022013255aba7dc03fcfe30c7eacdf7a14ad0c51f389ddd51f7c4ba6e8d9bbf3dbb7"
        }
      ]
    },
    "137:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b": {
      contractName: {
        label: "List Order",
        signature: "30450221008b4ee6f1b492d19243afc4715d1f0cd9bf79a1aeb61fbf58f0e1323bce9dbc99022001a8a548f081eba23f33f03e20f478c33bd264efb3d8bfa16ce96e0b69ad5428"
      },
      fields: [
        {
          format: "raw",
          label: "Order maker address",
          path: "maker",
          signature: "3045022100f9851e9dfd9706740307e7829705b3e049390755e36b26a059f28d6bb47ac949022029a4efc35a2264fbe8f88eee1f83c430fb5e96bbf55e6deb31a60826cb0203b3"
        },
        {
          format: "raw",
          label: "Order make asset value",
          path: "makeAsset.value",
          signature: "304402203bf13f37325f60973b02d5433857676ce135f94011047bbfdd2b97c30db1a069022029f409c7689891c222cdec4e63d143938ff73a4f6cffb0c5d56228d572d25fc2"
        },
        {
          format: "raw",
          label: "Order taker address",
          path: "taker",
          signature: "3045022100bcdc72ba9f16a3ac3b73ad04f445a60958a7ea644511d9b917c5ae52be52c76b02206a68b66cc24c79e45687c07a201f7e910444a66a657c615c5854ac7065b0c6fc"
        },
        {
          format: "raw",
          label: "Order take asset value",
          path: "takeAsset.value",
          signature: "3045022100c23622dc64172dfedc8fae04d5fa24e25f598bea659e703839dccf19736ba13a02207554a945d0e9c2816860ec7a6c4aab9088fb58f5316c1007d82f0add61693954"
        },
        {
          format: "raw",
          label: "Order start time",
          path: "start",
          signature: "304402200cfe7613b90190a2c4dafaa661e5778a7756444e593a8e16105da315231df264022025e1daecd1752763decb7c51389a5eb97037536ecea3781e70ab428d75e1278b"
        },
        {
          format: "raw",
          label: "Order end time",
          path: "end",
          signature: "3045022100d0047bfc769190c5a173c8bdf79a2fdef008f0674ac04f3a7fe100553f41dafc022030e7ef0a1dd8f6f4131da237f6c33a331add85dd747f7f9749806759767d0880"
        }
      ]
    },
    "137:0x7f19564c35c681099c0c857a7141836cf7edaa53:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8": {
      contractName: {
        label: "Meta Transaction",
        signature: "3045022100a2f95042a915f8ae76b54b1f012271a44356484ea6d4963b81e6806ed6fe80500220564155498a275d3fe5eec595fad3858cb2d7fa85178b98208d09a886a1485257"
      },
      fields: [
        {
          format: "raw",
          label: "User Address",
          path: "from",
          signature: "3044022051a39f6c809110faf6aa95fde98315c0c2b2cac34c31d927c058a2c0ebc158cd02206ccfac20b0327ac6e2ca08d5d53aef189b2bbe8bc010ae9002b25edcf43c2f06"
        },
        {
          format: "raw",
          label: "Meta Transaction Nonce",
          path: "nonce",
          signature: "3045022100c1e15f064b9cf3d8cb2c6b297318c543066a12868419121c7062ccb7fb2f619b02202c3079f47124d6a25178d4b8431acd0bb08f44e9a0ec302e71bb4cc9b49a05a9"
        }
      ]
    },
    "137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9": {
      contractName: {
        label: "Lazy Mint ERC-1155",
        signature: "3045022100b85f48fd591345542f9e2271b4f33e71287a703eda9f9f7b54458dea60fb59fa0220661f4281eff16352e5e8db92a254b6b74ac0f20e3d41c9042a3c7c9f7397bd08"
      },
      fields: [
        {
          format: "raw",
          label: "Token ID",
          path: "tokenId",
          signature: "304402203dfd604170efb9379c36e17439f15f441b437aecf2d9abd0dc8b0c757c15d1fa022007fde07992c2b3797e7aacb7309cb60d494856d7a9d5866981a8948abf4d6a9c"
        },
        {
          format: "raw",
          label: "Token URI",
          path: "tokenURI",
          signature: "3045022100a334814c15bfe1474472e56201aa83aa7016648b2a92aa2ae7c4d86b8a412eaf0220416654d59af289a253a96cbe4f5c9b75c2129d603d94cb3c7966cbea682f542a"
        },
        {
          format: "raw",
          label: "Token Supply",
          path: "supply",
          signature: "3045022100a180585fc34f26b83b50c1d7609a0623b85b76267e393bf2871f41790487bf5902206c296108c56f2a1557a66a04f05bbcd7f0e0e0cd7a7a9764783673c0cda21d1f"
        },
        {
          format: "raw",
          label: "Creator account address",
          path: "creators.[].account",
          signature: "304402200a32f52a36f61e3b62af734ceea6e02ebf44e9bbafccb92b2570b7ae9666638e02205e8a0ee1634919bab75369b611257e17c12cf379a4b83e3da2089de13863baa0"
        },
        {
          format: "raw",
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "304502210092c988b7806250d99ca2760167a0c72f4c7e20f8f9174c519421bba8adc03c0a022032f33a3843e31b8ad17991e8eb3e3b922c5c2b9570d930fa9456b6f59b8974d3"
        },
        {
          format: "raw",
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "304502210081e5ed5701d2bb497c4b1cadd0ca61220b1078357f7e3ace908c01fcfcd3abad02203b03cb75eeabcd49777362466e3af9a461ad39059238748ed7d902f988db3318"
        },
        {
          format: "raw",
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "3045022100cc555652ef532386da9ad2405536aaa7adbe4cdac73ae9b2a8d4b0659eb4013a0220030799c1a813bef66c6395c7305a1f98e3bfc0bd045917d63bf7bd24e09fbebf"
        }
      ]
    },
    "137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8": {
      contractName: {
        label: "Meta Transaction",
        signature: "304402202e2b7810798bb8d8094ff46e47ae09c820b374420984f5c9845139f7995b5266022050244aa907e45d7ff4ffc0b383262c4425d32aee4190bfc09fff359163268b73"
      },
      fields: [
        {
          format: "raw",
          label: "User Address",
          path: "from",
          signature: "3045022100da2c6c45ce4014375aec27ce7dfc470a066a53a3ba812da7f4fac641fc48334502202ce049c05a76e19fc4195a323464383f3eca62f33a435ad5807716af1a83af4e"
        },
        {
          format: "raw",
          label: "Meta Transaction Nonce",
          path: "nonce",
          signature: "304402207b53dc30da4e7360a2deb22ab0ee2ddca9dda1c807095a57751dc395d7d503c602200f464f277a17558cab3b891fe8d4fb232b5783f26f6813da77ceeba527bbe1c5"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3045022100d259cbf0306cda1fbd842725394b29020aaa05159884cdff8c256ad87e6d55ea02205e5c7bbbbc030c2e1362e41185312aa8140802495fed2325031da2af79dde7a4"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3044022078ff4404d1d554e4d48af1b36b116389dfc385ed212c5ae51cf0218ea7f2aeb20220420d390f654485f830075770a5383f1f79d6557f5c9553e9006e289d4b1ac225"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100f3d322f11e7ed81304baaee25ca2991ad339be783a3f5ff60b0fad3edad3291002201a396f507b590d56d8af66999fafdfc6aaadc75e0e2c9d558b90d5320bdb21a8"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402207d9c68450fd568c07e5b5ecffe29747c64d247cc1ccc8cce83d4112d029317d202206c631ddb8ea90ad75aa1339f2e966b72193758615f303af6c8f94c733f6e877c"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100e847166e60f851e3c8d1f44139811898ccd0d3a03aed6c77f8c3993813f479d2022031fe6b6a574b56c5104003cf07900d11ffaf303dc016da4c1c3d184663da8f6a"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3044022056450131868b314ca4a0644588bbef0223365b771c7d530c5d522216c3f6acaa0220648f89fca96da29e3049ab69fc3d5a97e42a749c60b1cb78daa3acfacbe577f3"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402203502b372181142404d4f77015f2fdffda0a4696039b5b7a8120e7692878a9fa902201d5731834b8dcdb805a1201caeadcf284117cc5613db44c401475641263dcbfb"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d1f9af62ebf0ed23eb66251b321b1342516bfd883bb2464c75ae355566bb08a3022019fddbc0be194b2e5632a1d2e6fb1d097879c7281cf6a57930dbfd5aeda8dc23"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402206f791744834c59c69e50a9eed98aa403456e51ee2a13cc5848b1b09b3353230a022070d350d50175c0ee993b575834ad3520ec223180226becdf7b9a6abb31852d36"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100e874350c7e10e0f109e84b13aac6fdf991222b32653956e5cba9bb91a4ebac77022049a029fc01051d7548b64e4137542ce992d24a25716a05e6e35f588a3cebae52"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100c44a39bac7d2b431e75bbd6ecf2b9af58422fa29abe6cac5874cf8964b388a2702206a73faa7534aaca6a8c1b0420b37b60d2412c2393540fa75105d78ae144da322"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220431f8d9a182a7d233d23b6c7279c86032a0f67ca12a3e60e8dd1fee0dcfc896202205af02a1dcd72dc193e87e73bf35dcc5aea1adf4c05da0404dd287951188bf193"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100c5f09dbe6709756a1fda5e5f2829cd4c88c2a8a12112ecb2db1a6fd69b48941102202d1a58cf6b072a8b75527f2e7f1bf3b6500d2cd22c44eb09516eebbd4b5bbbfb"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e8ad0d17420a31ede8ea9a1bcf1b4a74602016fce59f1d2f448268356bca1102022035f7a6e24c73611965e3a9424403c3c56f65bce994761d130f0205ddaf859ab0"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100abd36c357f546a3557b5d58dddfca7bc64ea65d936836d8f487b1388b0f81256022060b1b1f1ba88bb4dc27fd58c57fcbb6adc22d058be33d3b764c3d0145c0ae4bb"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3045022100f3a91aadffab51d26e5dded9b00d0a447eb3efefc3aaeff52805b3f42636de5502202766d3e6a86eaf5a28968bdcc71ae55f35bc4a88d816223094397976a6f23cdd"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402207518cd346517944c31b81019f3af5dab9945c074a0b1ecff4af822a5d9e7f98b0220053975c4e589dd3594f4e584306b7f3f6f79a356af1eb6c740d1cd3b880125a5"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100f87e20d6e92c47dc6cb0aa28a8f52bcc76e3dcb5705d5a2fca52cb536a8ce70e022003397f062033cea8cbe9ba39ae56d3349cc467fcd5b3a3bcbddb132d70a2d031"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022075e2bf8a4f9d5aca6ead3e75d78c2d2110f1ebbf1cdfca155cac867b4894b21a0220630057ba7e75e7a5c899460b34dba993f4611449c4a4ad80dc697cb082f8dcf7"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100c6de0438134c17094ff894e513d8b6d13367a5d7d69a22f1a19d654c0d8e28960220694b1d2b68cc6627140763861bb48184b10da001a81232cd33acba756f9e9e37"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100af5b8bac790473b173593ecb3f1d2c0b8d0fbd31e5937659fd2cef48fa46fd6a022000a4db89ea467ea3f52b203ee91a6147a73d760f2fab43f1f7c05553cc1f7e68"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402206eb54ec964fa667fb6a130710c6770e84fda83078c2a877ede8d817d00329ea8022030970ebe404e2f4739359e44a1581ab89b391122a91e58b225b007235454c173"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022009cf5c5c08e8e8022a7ff466218156653ae123dba81277b5e6c1bc7f0615dc5e022053a53758115bbec371aeaf5b1ed209d9c013299cc81227a76c926c5a84c46c7c"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e3970afb8a471b9fc6834332077fae22791cc45451da4180f48ec29f97eb259102201c57886609f9763e18a3de24e3a310dd0616f2333c47bc8ccc5dd35923e677ff"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "30440220019cfd3a9736c5377aff92d01df3379b1e76c48e9b7dd3e6b21e54b233b34d5f02201a998d97ba275284ef17e469e9c8b5cf7b6060a606c15f278f315c73ec08c71e"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3044022074d08efc6e2defb1cdd7dbbf0ce076cad0fdadff5f64cf9ee03b2a601cc1564d022057d1c94befc8cae1c631e601b7079a473e0a0d5e65b7967018caead0bda47d14"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220214343c3d61640d1060c8c77e87a4f1c2049a42608ac27e1677aafc959f2683c02207d097d9336cd21cf842e1105dbfe19f10e15089cb2b43e456a7812e742435be1"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022052e6a068616058c0cdeecd44682e350cf41b0fa6db92be2eced993fdcddb0f3402206f89634895f8ccbe811e5fd51a8125bcd90f9386c800ec499f661aa28f6aa414"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30450221009129b2a6422cbeb5a169a705ee92c21ae8e45cee59b09aae969236aa101b3d0702202ec7a373f46a16a32ce42966d61aeb1d09458ca562af42f372b124fb98ef9546"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402207494724e8c616b2e066544d3e742168e06e8d6e84c1cf1182e32f30a92aa079a0220440a6b555acafa9fe13ce13c63d33fb9e79156eaac9605f6ec22bf68d804e929"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402202339daa422491d2fb2efc17a223e6d191b431069250f4240b9b804f8dca2c6e00220682f54d39eda33b5237950a7e39b4e4ba4f501f071e700479e5768bbaa8281ef"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022043c32d3e1b5b644799aa8c8a5813cecb40956c282c227c87b6d692a1cef5e7f00220077a6e81cece0f12a9309918028060eb03842d3742ce65e8b364819bd1051650"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402203b079692e3c22218c0db1e14bfb3158901d89d466716f42aecd1737cd7857221022016ad9291aaf0a3388e4f21f6068d6610d560905175826e5b6fddd34b5b06e40c"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022079391bb740cf2e4a878e31cbf4c41940c5b312985245079aa3ea2ada4cb2862c022032c106c5981577447738eefa31216c734fb0c908a817b545aa7be529b1c29734"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100f593c88770547000c0e3aa6502528b5b756d75b4ae274da729cb5a1563d2c91b0220121d0ab4f6ae9d6583ddbf21be1735e45a56da217f3e278a766d73c593931e23"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022015e91522c1c70a6d7f7b6fba1585ed3822af2f245f54805669d5897f8e8804c302204ac0b96383ec1fa0157be86de551cb9972600d6f58774af45194b708d61cc4b0"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "304402203bf00c48a42f8216f513ebe4eaafc0bfe2fd64b0f9e9921e682c3aa4775475de02202e387775036517cc8b174cecd658786893857d2035fca136e3117e0f0422c38a"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100c75e1909af9896d74065ca0a0a328a108d5cb2c3804b667a82b52d65621491220220220496cad037e2971aefd935b7abdf4b9d6f3f6eb0e997ea99a2d7118c8a11bb"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100c19dd8af5d23240c2437f7eb3a082fc1c8ae9195c178bdafa119d370ff33499802201d67589fae70268a7080f09c162bb1777bba7281523d34c37dfcb496e3cda151"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100fd3a08902749a23ac5694d1d1499f11e9d52c723f286c63f0c1c11c01a9bff02022038efb165f44ad8e4cfdd722e82f7bdff6379daf1f7db55925f4ee2adbbc326d1"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "30450221009d336e41e39830bc5fb01567468404ca6371f13c75e8102647a77fcd7e1327a10220696e5f853b1fa5a19d6caf30859cd4e17981f2e0b34755e1e1e588c440998f38"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402205cbae5501a5041672f937fccf36d87d19ba998b90a61ae26d3c4b4282551414e022037bcc80671ada5e3076281ebc6de328331846968571146f002708245da890a81"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402206dce9b3a993e5d887560c0ad2437595d98820a3685a8de482326267d1547a36702205486cc318b4655787841abe60147978f00e29b1a26f8f7d0b3df7a41ad49e0cb"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100eceeea5637fb8c76437a9480346a458eb0e89c62b04f97a5736d69c67289cab302204fb4474ca0222732b3f8bc4971319d064a199909646ab5285ca9631c9a2a281d"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402205d52a11d48c59545bc8bf0a42796167baefc81cc6274e7ae1edd0cc8e372339f02207c2ad7baf32fdd87480af127bc69233d756f8b3cae5d8f0b9521ad9db6737a70"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30440220527c20e05736e60b0e10c706a467eb62ff408ef417e28cc60b6ebd3263c97c7c0220734e646d8a62ec28fa4a461dc6d79d6986f67c934c608c4b6e787edefe483447"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402204a899d971e708e9f4be3e7044b3ccc0407babbdf35dbadd6d912a6bd691656df02201e4a7d528901ff5dc58a812f8e6c8b1ad08aa16e42336a2e682111be13d5b47d"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100c77b95a129d17f1c163a54db3260cc6aee8d9a686b9c9686d615a7e23390d7cd02203bc102e5e05182501adfde070fd6caf75cb26292c242846131512314f2a49219"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220428d1a58e563f844783b7ccd1ad5e5fde891c7df3c68a9462c16c2473cccf6f502203102a61a14c3cff284054fe2c0be781b5a1fd94fb41a27fb0f4d22c940a4f166"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022063f35c92c7b24bd200305ac1ece2ea39ee4624d266821b6f8864e2a0762425c102204b33c73e96608696f491007b51d379a80eee12be2d4fe37f0525d939b9b36d76"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "30450221008e02c726bf26cf868c71259a42b689a44f9831959d0ddcc5ac383c84bb0bbff10220703c3f4703639b9419171a58e089c7e51ee700aac154b160991b2085a90f2170"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30450221008129174f55689c87a4ab3bc85460c2ad3ba932bcd17c320c838f49ecbc356bcf02200fbfa2cd5d7cf2adc1d4fe510915ca868c0a561b4eb998f353e055638c424add"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100dc616179eddf37f9e79ed4e05ac6cabaf83a7eb4ed288e0fe578995f3cb742a50220627ef76253950173d13a4e01277177d9c5db53c8752311815efa5541530f923a"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022038458eb3dc5db7c501cf4f7cbb32604e762d78335c453728f492ae166e9f0476022011e100d0785e9f813c146f29c1681d50f0ba66ccee3c4a942355245fb9cdc4eb"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402204f0dd86ebece12e4956669e089238c3613d606ab2917f23e1655d32153ff3ff102202cabfb60a7225bb9855fd414431b8be2b62a459d9b8350ef5417a5e89d1744f9"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "30450221009735bf7c8eaa58fdc5293088a4d09be748ae7b56f3f87b7f9a471f2b8a52a7b802204afaaab811fcdfcca0f7bc377ca37b1d4b34172ef7de6d858dd2b3f8f2428166"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402206e2786d2a7c562a6827a8592815e65d9d05361a1ec93960ec551567fed92a63b0220453ed621d94f50995f5dcf643b43c5578bc7113ef6de28a3a6b0a339b5fb7820"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100f325ca8bdb8cde9ab52819c8a42cbf4a56fc7c76c1ce360fce9a9cec9dabbc6f02201ebfec336a311bc0c048563dbb7f6ab4813c74dcd6e523adcf7daa36f960e3da"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100f9ea4f723651a6330c8d7b0f86b576eaf5361f3195399f2a4ac4c491f57af19302202d568abd40baba609d09770725cc8082aff931e4479c088c5fe4a8955a7bf0f7"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e713e020ebd5de595572e1c5721f5ae36ef78b4d5550d0788ed8dd82043cdad702200dc1704439c79f7fce6aad713eb20247e645f02578b65e1309be2e051c833e61"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100aaf3d94f2a63c782c0c1363827ad6516e5c5ed77350bde5d1dbdde75a302fb1c02201fe0dbafcd6fe5d4207c5db5b9e9d5e6e9022fcd8ac2d4d0c5c94d95923b692d"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304502210097c9fc26409515773823ebbace587b2c040f78db00869eae59edd5f56a88e72802207eec9db2e4a0833ffe59a7844315e17fbd61f0eb8765fc8d949f0ec6ae6b396b"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022050e824afee2c1e3b5a79fbdc6ecca81c649d1eced263aeabc9ff38fa4a30ece2022069fd446f1056048e81d44a20d98958c2b5074595e4528b647fa83aa6428eca89"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100c0fac768fa1a668435aef6337f8c0c71938b36e769adb3046dff95c71232ff6402202514823424f641eb5673d78888a47a7fc80212f9c602a449a62cb93b6fe22e4b"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402205855411ccb0b298775bc51a4f43e375d3bda7e0c5f6c40a22eb8dfedcfc3f0fc02200f1771c08f606df2b07da9d60a7af243003d941a2820e81f54b2d9f53ee7b8c7"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3044022042f7e1ac955fe87fefab3183811df03cb9a0631458e396c3cb45c1b69f35b77b022049350af4b190b8a7bfc8e1fcf67b09fc5591d1506f53604aea71852a3a72e111"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100ae64e162a06dae806c8d9d3bab0b4db4414adcb9319d7c619c5a39dfbb705f44022038f88abc2a18f8dcf58708a0818df060b27c35484185100068e0b1c579ceebea"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "30440220682d1d814608a2d680aad01bd2b7b7a02a413617339488f2607333cbc1978af0022028412797455cb32181b5e29e9b4f7680b4334f8a7c02aa0f18de0b48d139ceac"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022031fb26b688bdf77b431d294f406f7a2895354ce5ee8276d85a1f12e05234d0bd022021f6f9c04c05da8aca0fd552278384a2f87b16166028dad951e6c281c5cfca0c"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100c8e30fe710449e606a503369fd9f6ac495b8b7a9c2624bcc7abd3b0317075fac022058ba40814fd3cb590aad6fb8dc9e6d534ce65e97bc96d7ffc5e23230e7c005d7"
        }
      ]
    }
  };
  const sortObjectAlphabetically = (obj) => {
    const keys = Object.keys(obj).sort();
    return keys.reduce((acc, curr) => {
      const value = (() => {
        if (Array.isArray(obj[curr])) {
          return obj[curr].map((field) => sortObjectAlphabetically(field));
        }
        return obj[curr];
      })();
      acc[curr] = value;
      return acc;
    }, {});
  };
  const getSchemaHashForMessage = (message) => {
    const { types: types2 } = message;
    const sortedTypes = sortObjectAlphabetically(types2);
    const hash2 = sha224.create();
    hash2.update(JSON.stringify(sortedTypes).replace(" ", ""));
    const digest = hash2.digest();
    return bytesToHex$2(digest);
  };
  const getFiltersForMessage = async (message, shouldUseV1Filters, calServiceURL) => {
    const schemaHash = getSchemaHashForMessage(message);
    const verifyingContract = message.domain?.verifyingContract?.toLowerCase() || AddressZero;
    try {
      if (calServiceURL) {
        const params = {
          output: "eip712_signatures",
          eip712_signatures_version: shouldUseV1Filters ? "v1" : "v2",
          ...message?.domain?.chainId ? { chain_id: message.domain.chainId.toString() } : {},
          contracts: verifyingContract
        };
        const url = new URL(`${calServiceURL}/v1/dapps?${new URLSearchParams(params).toString()}`);
        const { json: json2, ok, statusText, status } = await fetch(url);
        if (!ok) {
          throw new Error(`Fallback to static file: ${status}: ${statusText}`);
        }
        const data = await json2();
        const targetObject = data.find((item) => item?.eip712_signatures?.[verifyingContract]?.[schemaHash]);
        const filters = targetObject?.eip712_signatures?.[verifyingContract]?.[schemaHash];
        if (!filters) {
          throw new Error("Fallback to static file");
        }
        return filters;
      }
      throw new Error("Fallback to static file");
    } catch (e) {
      const messageId = `${message.domain?.chainId ?? 0}:${verifyingContract}:${schemaHash}`;
      if (shouldUseV1Filters) {
        return EIP712$1[messageId];
      }
      return EIP712[messageId];
    }
  };
  const getValue = (path, value) => {
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        return value.map((v) => getValue(path, v)).flat();
      }
      if (!(path in value)) {
        throw new Error(`Could not find key ${path} in ${JSON.stringify(value)} `);
      }
      const result = value[path];
      return typeof result === "object" ? result : result.toString();
    }
    return value.toString();
  };
  const getValueFromPath = (path, eip721Message) => {
    const splittedPath = path.split(".");
    const { message } = eip721Message;
    let value = message;
    for (let i2 = 0; i2 <= splittedPath.length - 1; i2++) {
      const subPath = splittedPath[i2];
      const isLastElement = i2 >= splittedPath.length - 1;
      if (subPath === "[]" && !isLastElement)
        continue;
      value = getValue(subPath, value);
    }
    if (value === message) {
      throw new Error("getValueFromPath returned the whole original message");
    }
    return value;
  };
  const ethereum_signatures = "";
  const optimism_signatures = "";
  const cronos_signatures = "";
  const telos_evm_signatures = "AAAAagZCQU5BTkFmf9g+JModk102cX0wXVT6DKyZHAAAABIAAAAoMEUCIQC1YIQs9D3n3lLmBLNaGT3VegY8cOg56giB9fM4L+5ipQIgAwHFGoFv1RV8l3qMBIwuLqMFRPQXc6C0QcOUBVuI5HAAAABnBEFWQVh8WYyW0COY2J+8udQeqz3wwW8ifQAAABIAAAAoMEQCIGcXZLCPxvpWqc1Cp0g9m7ODawjhXhNzc+9DyDr1jFR2AiA6xq01JP1tVOHht4B9CNRdX2FpzwExGie/e27Ihec6AwAAAGcDQk5CLHjxtwzPY83uSfkjPp+qmdQ6oH4AAAASAAAAKDBFAiEAyf1QXn7qd9j3s6+bAWF3R+k2sk8l1sVeymWeFNt71WECIHto/yG0e1exvR4FmX0rHTc1W5IVR6I3qAlReOr7h8qTAAAAZwRMSU5LHMyhzmLGL3vpXUpnciqP2+1u7LQAAAASAAAAKDBEAiBRF4jgS+52eg/c0TSsqeCxBXMg924KoGTLiFOeH5UT3QIgMQEXY9f3WrGacI2ItiQoQpUWpyqF34ZlNwyl6UhlxswAAABnBERFQ09+HP4QlJpghqKMOKpKQ/3qs08ZigAAAAQAAAAoMEQCIBcofiS6faZOMHLIOz6b0wyJDf3GMYGVPhH/Xg+DfyeaAiBG6isqoczYgGKCFHCcTG2/k9eRwP9FB0xk7nu1tlX5GAAAAGcDRUxL7u7rV2QgQL5CGF9JxS9+mzj47u4AAAASAAAAKDBFAiEAg0spiaEuhsuQakJ6SVFWBsbDYAedQehwE/5gzxVXWPYCIEWz/7mhZ12Yc9aTs/0fq/n4CHCvmKvLU9ss860kiBtzAAAAZwNFVEj6k0PDiXMkSWoF/HWr7WusKfikDwAAABIAAAAoMEUCIQCKnkyb+XxOtOLXzOZ0/ZSvqmNNmoFt1I5fRLoqxU2/qwIgcqDF65vATGe91GQIgCosEIC8qRZ78ad14c2knUyEnWUAAABmA0ZUTcG+mk1dRb7qyuKWp71frb/BRgLEAAAAEgAAACgwRAIgevTBGn0tRMjDFAh+aZmehSulr4bamTUirzMhrNRvRvACIC2izh+YPZqEecMwTfVctCX6/Lklbt0ul605j2J+XC10AAAAaAVNQVRJQzMnMKT24D2cVYKUNfEDYOE8+kH/AAAAEgAAACgwRAIge16gj+W130LYkaCeHGC9r2aCgI66fVu2P27yb8vpa28CIDd19+E3guCDldk/TaBK6oDC6Rps1wtxydNZ59Ax67PTAAAAZwNSQk77MZ6l3e2M/ovPnHIO04C5iHS/YwAAAAYAAAAoMEUCIQDVvwPVmmUNBvySfeFyzTo3S6Suug5QKcHnExb6ZBrKzQIgAxJZWJf7jmwpB/5myNhicmQPwUcSjLivjtHbXbetDBEAAABpBVNUTE9TtLASFqW8jxyKM82ZChI5Aw5gyQUAAAASAAAAKDBFAiEAx5/BjbJDE0TvJn36cDXAX+jqTHiqv5TmecKvgVqsFmgCIEc2Wg0ZFxpfvAwLQVMeX8pf0/wrPkGwgLKzitGiIJqEAAAAaARVU0RDgY7Ap/4Y/5QmmQT87Wrj2ubW3AsAAAAGAAAAKDBFAiEAnTawskHThQR9wIdiC34r6wL+uywTUiMoSD2RKBlTs9cCIBDu8/tpm0ydY4P5EQO796D9D7YeHO9oTk8k9gkVpkSpAAAAaARXQlRD85CDDfgpzyLFPIhAVUuY6vxdy8IAAAAIAAAAKDBFAiEA/JoJ/9WSWAIadPMM2pUN5mxfwy0mBI13tVj1/xFVG98CIHN2jPhL5NCCJQfH50pdoC0tRjGa8mSKkhISYMBKtVmN";
  const bsc_signatures = "";
  const syscoin_signatures = "AAAAaAREQUlt767uM08P0XEvmozDdfQn2c3UDXMAAAASAAAAOTBFAiEA1m4N01/cjbnD0AXcY+JL4Vk82Sg9228yWjDM2GVgIdQCIBPqOpcCdelHlSvx/s1B+IBBizCG02x8wwZLTan6c4XgAAAAZwRNQUltJhH6HK4qPiDtR/sbKTQ3wU9BsA8AAAASAAAAOTBEAiB3j1p7IwciDF5mbdcM1o/akVrTCyARm+W0uLQgJeV7VAIgZcR9o2q5bH1pV0/8scoO2bzPwX4dL9mAJPNsXAYsuDwAAABoBFBTWVPhjCAKcJCMif+hjGKP4bg6wAZepAAAABIAAAA5MEUCIQCOKk382M0ZC+0vSMFUXJThatiEHccAo2kRVw/1FQxF1AIgcsYlHQLL1u/oNKZCi0b0pCbJADScsLLM5sUdbmbzVEIAAABoBVVTRFRtki1kGkJtz/rvEWgOU1jzTZfREuEAAAAGAAAAOTBEAiAPE5k+APZwyUo+8NDM/pcPlpZMCHMoMNLwX8/0ScnqzAIgHS650qMYIemUe80Q4e9xaKZN68mEkPhn7eMw1pmQ1CoAAABoBVVTRENtK/m4ZM3Jewi215rUZj5xuKtlxFwAAAAGAAAAOTBEAiAvp3bkYVAk1dX1i/+ucJIuvKlDIkWQ2YjAGTxNEtvv1wIge6purDnJmot5pDWto4gSAoHAc0xS+DbfA76TMj7AK9IAAABoBVdCVENtybqoz93o4yh4fim0sHir8trcIFUAAAAIAAAAOTBEAiA32xL6BEzu8v+rKrSffxkWWHplzdPEPz215wuaZs+fUwIgA4/Qi1uSkIZqUlnCGR3wXQWP23MdESPvPXKOO7pG7kUAAABpBVdFVEhtfFmMltAjmNifvLnUHqs98MFvIn0AAAASAAAAOTBFAiEA9iUzz8B5bBqxyyUW1cMjcZHEII9fqE6GNCTlKB6lpGACIDOTGSbkRmcteVankjVi+la63nz63Z2c5mmHQjO+LQflAAAAZwRXU1lT0+gi8+8BHKXxfYLJVtlS2NfDobsAAAASAAAAOTBEAiBIomydfucdysHvNDAT4RAzfIqER5w+pJKxx7vrVIJVggIgCGsdeMrRxKvH2Q/pJOVBmnHflpHnRCi2fPd93UDVZKk=";
  const polygon_signatures = "";
  const bittorrent_signatures = "AAAAaQZVU0REX3QX8jX9WXQxjk4qXjeRmiCffDem0QAAABIAAADHMEQCIDDNTFknKzOqTKF/72sWGREuq6ZYzRwv1vzgPg0zFck8AiA+d9v31W0w6h82RrfiDgz82KValj3HzQUGXn42A82Z2gAAAGgEVE9SUhlcoioXfm7ZBcRp9PZM9n6Bn0nCAAAAEgAAAMcwRQIhAOPcyrJrgeOBoCvaf2aIb4gREWBCG2t2JC06wKHg4sfWAiAE2Q0yelh+g9AwmAxHeLQO05HS1vUd2hiuWw1eeXL6gAAAAGUCSk04jYGXJN1tcXYKOPANwB0xDYeXcQAAAAgAAADHMEQCIF1NgQChyOdnixKlKZ9sYDYknnBtK5rg99Lm/FQT35NqAiBlzKTMuQetYH3YJk9mVmN55FgBGhA1aGCsbu6w7jMdvgAAAGgFS05DX2IY+nLg7kxYChKbDOW9BpTXFsdEPgAAABIAAADHMEQCIGTDomddTzrmof4IfKQQZfVfs2TVtckSfe8d/73B0mSiAiAIXyagqYd0HZisctCyZoXmoF4ENI81hD6/v0piVPly2QAAAGgFS05DX2XkZ/eemGl1fdgY37hTUGgSD2vLlwAAABIAAADHMEQCIGj4g2xe4dJRUrnFssJdINaDMCtEKsWXnVr2P6MMOhQgAiBylPiKGPXwrbB/dYRLmix3B+svcNTTjLMJ/krZGJwjPAAAAGkGVVNEVF902yhxn3+ThQfb/k8OrlVmiQPTShUAAAAGAAAAxzBEAiBiuG3Qe7xNuoHEkRNbIAe5MeI0U3BdsaBCmgQ8lhfp/gIgI1VeiDZpwNzvvOhr4mdoPajCcjbs/Wf7vUpQr0q/zm8AAABnA1RSWO31MCaupg+PdfyiX4gwt+LWIAZiAAAABgAAAMcwRQIhAP3a2Pm4ziwyl1Zgk1l2vjyoeLY3Jo7sgBrLUrDMvQQCAiA2G1JlW4YSX7cvgvJpv6P1at7iF5R4wonmm8HW4QhsQQAAAGcEVVNUWGyMAo01krg9ah0PU2NVV/2N0xVFAAAABgAAAMcwRAIgG7ryqrb35plP0u/QtLnqvPuK9RfStu4d3+JVhVgV53QCIDqNqdznA0GIMeMAqvvskWsqt/4mlgwQJYD/RrxCSy/BAAAAZwRXQlRUIxgfId6lk24kFj/6uk6jsxa1fzwAAAASAAAAxzBEAiAQydRy125KT+qULSDaT5UBXdMgzuvsrndrAlk6+UumuAIgPgrZLjQl3it8Kt8EJY5/I9Tls1UVeR0Z6qjlQ87gm84=";
  const fantom_signatures = "";
  const astar_signatures = "AAAAaARBUlNX3iV47exGabp/QcXV0jhjALzqRngAAAASAAACUDBFAiEAgTEhgbi2oTKxutOOdj6GoTmDkJwmJV1OcaSBVHK4ljICICJZpkIrtj42ijVg0jVpOxBamdGiiR560Bkxnst8O9ujAAAAaQVuQVNUUuUR7YhXXFd2e6+3K/0Qd1QT4/KwAAAAEgAAAlAwRQIhAI3kbIpmVKdKcvBw+fvWK9ukbdgdeZPvPgYY3sxDWPHHAiBZDCNfKze83OJLvLUfcR0eCU3l0ipJPPo3H09ZzoMtEgAAAGcDQkFJcz68xt+F+CZjSd79CYD4ztm0XzUAAAASAAACUDBFAiEAmWzBHNxp5B/B+JKmeaC2JM3KjObnn+L0bk4g7kKGLLcCIDY1pMhr7/V+lWRELVAUDGkuynBilLj0e6+loD/M+/M/AAAAZwRCVVNES/dpsF6DL83JBT//vHjKiJrLXh4AAAASAAACUDBEAiBTyzshRHjLteXxvAyoShBc5Ecj7Ue4IiWJErR81+QeEgIgW4i94YGc1IQeIm2KJwZBZkcDcPBmqcLu2DBPKPFaUjcAAABoBUNFUkVT5pWDti17fYpWjh7AjzS2SFifTPEAAAASAAACUDBEAiBTatu+uzkIlTBz0863/4rp+w5WFknmU2L7i2caFvO9tAIgVoFQPdxALBB6ijN7mU4RlQlRCoDXPdCtOOxzTuup050AAABmA0RBSW3jNpjp6beH4J0713ce9jVX4Ui7AAAAEgAAAlAwRAIgeP1c6VraaSUwd7c4p1AczOaAUlzZqMG9VnpDj2YC6SACIDD06qb3w3fBbdJv27Nby6bDecz+qfhiPcn1+wWmTvg9AAAAZwNERU+1FUHfBd4Hvjjc/EqAwFOJpUUCuwAAABIAAAJQMEUCIQDafggLJqO+Kfkm75xsmDbumZ5/C3ggxua+azsXWcXEtAIgdPZSYURZl0HUSAkuvGW9hTiCmAOaemptQp1GyM20ugkAAABnBElCVEP/////AAAAAAAAAAEAAAAAAAAABAAAAAgAAAJQMEQCIHlGTDe47Bjs7lzlTMbRbnXPo51j1n9safARgowCpTdIAiA5qSBkeZO4pw5jMnHuFSHy01lH1gdJCllggDtDL6LLiQAAAGcESlBZQ0MdXf8DEgr6S98zLGGm4XZu83vbAAAAEgAAAlAwRAIgXuJc5vhNG6N2frl2RYxaVyOxEWgjj67aC0WF21YBAh0CIC2/iLz+FDjfMUnIJYix5sPYdtSvPsChaCuWdqtThFL/AAAAZwNMQVnEM1sbdvptUod7MEbspo9ucIon3QAAABIAAAJQMEUCIQCDhVEXUXCctzqOYk+2uK2jSaulYSxNmyQ1GHfciBusWQIgXgdYDuoArINqInN27pHxam68SdqawDC3uMkAb776R3sAAABpBU1BVElD3ZDl6HoggdzwORkgho68L/uBoa8AAAASAAACUDBFAiEA+ck1uyzP8HqtHn4QyeAXaf/WXH0ktrX7bPWpt1Taw/MCIDooNis+S+BTi8ESkvOLqUa/xS2OuSpGcBtgHxQ3Vb9HAAAAaARvVVNEKfbknG4zl8OoT3FYhfnyM6RBFlwAAAASAAACUDBFAiEA7jever3b4B+oufHlXnFOfksgKKztPSkGANHxOdxs5SYCIHfKjY39ZdUXGczTzybDEbT+SB80fIvEKw6nXZFKSjwYAAAAZwNET1T//////////////////////////wAAAAoAAAJQMEUCIQCHQbteNOVFU0SxKaxsA3GsMySR9FRA7ultycVVCb9aAQIgOWd+pHG8K2qOL3sKvTd7rqAh7eDQxxdYxgcK7iBCpIAAAABnA1NETnU2TU93nQvQ+s2aIYxn+H3Zr/O0AAAAEgAAAlAwRQIhANhXrm5JSMFD5a61dQWvDS0CBe7rCti4Xoc2dGLZKPhmAiBuYwGb3Ipj1GueTS5QckHCn1EXtBILgpv2uTgeJWAUegAAAGcDU1JTlEhhBpZlnej3Lhgx05IhSuHKSDgAAAASAAACUDBFAiEApzv+tz/yruyzshzmZWQyFIMvLFDAQRyZao7jr2tYF7QCIGeevnXjOpXEN6eprA/zhb9tyyPFRrLXB4MwanvJnL7OAAAAaARTRUFO7oE4s70DkFz4Sv4QzNDcy4IO4I4AAAASAAACUDBFAiEA8qjVGO2pAVxGQd75oPSTxYJPS+/luJ1h0kfswzLaJnACICBwpfc+NIcYJhe+LrHyKcSVlxZ0TFL59vje4DPQcoI2AAAAaARVU0RUN5XDbn0SqMJSogxae0VffFe2AoMAAAAGAAACUDBFAiEAnQHUCXm9OgsJucQcrS7jFWH/h5oQPGm3wrSpM5VeYTcCIG24Mvr/nn/WCQqUq76ubwuEI2JGd9g8TLrHZWlMZV7YAAAAZwRVU0RDai0mLVZzXboZ3XBoKzn2vpqTHZgAAAAGAAACUDBEAiB0eVLf8YlnRES9MCPnqbobjcE9M0u2QYMhHkq3MnAF6wIgBbW+2HYftvp8k4gXB5oP34kmAmkEMShSgArY6W4uLDQAAABoBVdBU1RSrqrw4sga8mQQG5EpwA9EQMzw9yAAAAASAAACUDBEAiAiln9WApuoes9mngYNVPEWz3nMrbD+d/356M7kIBbyiwIgMf7z0KiwW7PQF14ULOBG8U/ngDqILt+2WUOzh1xonPQAAABnBFdCVEOtVD8Yz/hcd+FA4+Xjwzkva6nVygAAAAgAAAJQMEQCIHCZCJsiRu3ZLW03cjzZbIBBn4/kHg6NmzqJbJaYv+RTAiAxM+5YeAvvoJhhBT+6qodxyylN1f9Ffhz511SGvxJELwAAAGcEV0VUSIHsrA1r4FUKAP8GSk+d0kAFhf6cAAAAEgAAAlAwRAIgEtTE44X9bTpdJh0H6joL6RnLuLD803Bl7PEEz4W900ECIC/ViGcysW8r4NzwI7U+dggyYxyxoZeBvFQdIhID4FdEAAAAZwNaTEuZgILEiOVIgg+XDfUXO9IGHOkGNQAAABIAAAJQMEUCIQDWbZ273qtq/RNVixxWoLobxsO4QilIq0ynd3NzBh6kAQIgSM7FXxMbagdH/yHOyU68t03FZAYg+pHLG+NJgEXDns4=";
  const polygon_zk_evm_signatures = "AAAAZgNCQUwSDvWbgHdPAiEVY4NNjjtyyxZJ1gAAABIAAARNMEQCIBB4EHWXzxi0IEaKkiU7vFEpOXQy4kwo7grxi05jdFM1AiBs37YBxlu19iR51k/fpN30u2UgeRitvBufchx/oTn0MwAAAGgETElOS0sW5HUnEaer7DJ5nJdvPO/AER8rAAAAEgAABE0wRQIhAJyFhYbKOiKL902FRVdvBdelqGr52nFMJ7pLjsEe8facAiBj40fwSsKrd6Zzj2M0O7VfUCG4WTmeWTbRF92KHL9c8gAAAGYDREFJxQFbnZFh3KfhjjL28lxK2FBzH9QAAAASAAAETTBEAiAgYAvXuzxBW5h7nDtJ3hPq20jzMxH+0A093jUNRIjvXAIgDMmkKpFhyvZ4GqMuEuMXRVU2tcexb2aLbXFYn7hKFy4AAABoBEZSQVj/hUT+1Tedn/qNR6dM5rkeYyrETQAAABIAAARNMEUCIQCktWno8HwkSzraQQDYctbfnNgN9TsX1B0n10KImXznnwIgSB+968nJuwKCsBW3btN8JD5NYSX7dlv9g3Cg7nqJ8YkAAABpBmZyeEVUSM9+zuGF8Z4ulwowHuN/k1Nu1mF5AAAAEgAABE0wRAIgc1fxlBfnVIaosVMvNwIWFah0JF6qg5e3L6cnCtCnBw8CIE2iQy5MTsx1KtH86fv6Ib/ARSpTyxDcjl21KIqhXI3tAAAAZwNGWFNrhWoUzqHX3Pr4D6aTbAt1lyzKzgAAABIAAARNMEUCIQCseSwbWhBFxuvyicAucWtVsI6YxQON0zLL/Nj2ksuWNQIgeabGiTxs6DBTAx9DALL7Nf0wzNx1VZLuoLJfbIR9QKQAAABpBU1BVElDogNvBTgiGnejk38TeWmfRJRQGNAAAAASAAAETTBFAiEAz8Jk9BXmMsXDM6pU6cJiLahxs6eK6lCfPAcMf5Cr9jkCIB+zwWrWIzNYCR4PdonUr6Ic/YYg9BgNItUo6pcrzbpTAAAAawdzdE1BVElDg7h0weCdMWBZ2SnaQC3LGpjpIIIAAAASAAAETTBFAiEAjtQJtql2Mb5RpdCHtq8uSDIthM35+SG+tQqNOB/alQwCIGVyjASsFZXj0yuO9cnTdbnJeM0dAprBM2lvXP+1Md7AAAAAZwRVU0RUHkpZY6v9l12MkCHOSAtCGIhJ1B0AAAAGAAAETTBEAiAkReRQvtpKhTmSiRA6Zq9Q1WwuLDYsijR/0iUKPkjmwQIgKTct2VA0hZwxCQRfYahgeDWUndrIgt8d1E7xBP1Zwo4AAABnBFVTREOozoruIbwqSKXvZwr8ySdMe7vANQAAAAYAAARNMEQCIH8SEt5thaFGML5AICliF+kT/9rtL0TdCDdp0/sDdx4vAiAdz8Oyqtfg1z0RNVubxRHlipCgcKE83FqAUn+heCh4xwAAAGgEV0JUQ+oDT7AusYCMLMOtvBX0R7k8vgjhAAAACAAABE0wRQIhAJJ3ATVPz8uaLme6Rc4kBNCGOvJILg0TQkmsaZSSW/M/AiBrgi/QmGMs698KlE4s1l4Z2NxfiPluqhy+z8WKNBusWAAAAGcEV0VUSE+aDn/Sv2Bn22mUzxLkSV35OObpAAAAEgAABE0wRAIgOJQdkDAzH6gptH5gKPrESDotpg8iiriPAdyJ6HApXcgCIFCyHL6YCLQesMKkgrwrASIvjIyrh4gtm1pql/pIMKth";
  const moonbeam_signatures = "AAAAaQZ4Y2FVU0T/////UsVqkle7l/Sytvey1iTs2gAAAAwAAAUEMEQCIHzslOYINqYHf66Ag0XnJEUjFM0GOhtEVzRscNzWfBIoAiB5c821aN5GSpA5mzkAjxOeoMgvXyYqthduYbR8AeH5LQAAAGYDQUxNFYGSl3C+MnWoIGjBE1tt1ZxTNO0AAAASAAAFBDBEAiBf+K1716HlHP0e/i+hMrQkHwwSYVGE3EmerNkZwtQ/RwIgbIwCj2Y1RznIqUJ7mzF5tZEZh4dBYZNwuL5gzbySk4QAAABqBnhjTkNUUv////+Klza0Tr8YiXJyW+1nv2lOAAAAEgAABQQwRQIhAM1y4UlOiJe3T5bEGfwEQ7Wg+sYECet2mM7ZeNZ0mrEQAiAVj9wPjxEHhvJ7HvLAXJk6/cuIaSr6I/BOTm1YSHS55gAAAGgEQVZBWEeSwey5abA261EzDGO9J4maE9hOAAAAEgAABQQwRQIhANX2axHENksRsJwE2MXNMQzStFOkgmw0N/B6nPm5YIwDAiAs0/Y6NtqHlfqIn5cdssn0NBW0EYQQqu6PzEab3wpPJwAAAGsHYXhsVVNEQ8oBodCZNWUpEFHa/zkIklGKz606AAAABgAABQQwRQIhAI9Aqs4n+fJD1xNgzbiYko7aE1SKw6goVJMM1XIFOVIiAiBjLQLVDKJwzjN4gALUS+jPXOPPV3fHDWOUB0BF9SVfawAAAGkFR0xJTlTNO1HZhHjVP0UVowa+Vlxu6+8dWAAAABIAAAUEMEUCIQDiBrZc9NdO8rxPf6yH6DQN07Mc1oN7FTrN/qsJhBy3KQIgEZ087m8OMoffYKwDDryqyoO/7ANVTA26vdOVmTsJD0sAAABnBEJSTEH+sl8/3a0T+CxNbbwUgVFvYiNkKQAAABIAAAUEMEQCIFu1rV4eYx6C/MwWHkwyqUhuMbPtbMGMMbIrwX8/6xMZAiAa2Jlxw18hJrjDJYeQbc4vSy74c5SgMRh1/SKArPslBwAAAGcDREFJdlJ37r7KLjGRLJlG6uECEZmznGEAAAASAAAFBDBFAiEA3P89fARK4C3RpJLRzgFN4mRDobTvKCNvhkG8P9k7v+gCIAioxrRF3VWEhXDYTthU0dRPwRh5N1+tZ9gip8yUNQAxAAAAawhET1VCTE9PTidYtX48BSritmvi4XXI8ZgHI9evAAAAEgAABQQwRAIgeL8MaljcwYtvSfWfNONG3jYtXEWV9AByZL51pgzpmkICIGrvKFLdH7aKb8MmdSTeA9c/kX/qEOZFleF5topTqp6FAAAAZgNFRlSkI+futgVH2ce2UAVHe2OufOZ+YgAAABIAAAUEMEQCID+tMzSxsirtSQawQC5ROJ3Y6LitYm1tCfhYVob81WlQAiBauT+U4Ux1Ky3VguG6yd+dkQi1zFM2xGUX7LyBBNjE5wAAAGcDRVRI+pNDw4lzJElqBfx1q+1rrCn4pA8AAAASAAAFBDBFAiEA2yDeJZn7GlzqtNKinB5foeJRL7UknlciW6Ckh1aTgtYCIFiMPAjFcpNpsPXxdVIyceNxnJp3c/IUTBeODvCUMWEKAAAAaAVGTEFSRePkOIj6eAPNx76keKsyfPGg3BGnAAAAEgAABQQwRAIgHoWCRFQAOZKkyCz4M4ApBqFNDRsv83Nzq28nxie709sCIEtSUwDI7xIJs1YymKhAqgUf1lbFSgPMf/ug2ifxKxWyAAAAaARGUkFYMi6GhS5JKn7hfyinjGY9o4+zO/sAAAASAAAFBDBFAiEA8NCn8Y4E8EB+l5sHCNRFPnRwBFeLgP9BJLEk3i7IM0cCIAzQnoB+hTge6VhV/va80XJ7vsg/Ku/HV7fXpxki70ZqAAAAaQZmcnhFVEiCu9G29t4re7Y9PhVG5rFVNQi+mQAAABIAAAUEMEQCIGXvHcM/yGkt4XgtDp5oYhVf9IAqatqNMKl2fniTTVPBAiBCsT7XfaPeDeGTeVbKf/T8e9w079zGdDv5gu2mKCGsqAAAAGYDSFBPgj2CbTq2lWupNIk/Ml58Mj+q9soAAAASAAAFBDBEAiB+j7Xg8IJxT3+n6yUl291dspOVRhs+FCM8Mk9I7NNv/AIgcjbtVghwtTvJfP1qky21QIPez6hw82PKNAT4HPOVwD0AAABpBnhjSUJUQ/////9awfmlGpP1xSc4Xt9/6YpSAAAACAAABQQwRAIgS7yvnIeBvw6u2DcF8vJt1rkz8TT/DNn7Q2mZnzF2BGwCIEwLtQFddoDhI0ys11MEvhl+mkRmbpdw73HU23rLS+4bAAAAZgNNQUnfpGR4+eXqhtVzh4SVmNv7LpZLAgAAABIAAAUEMEQCIH0NCXpqtu2IUVSvddNq8xNkoITdcy6IJ8iBsU9NqBcAAiAeF4EX5BUhiftYDaJx8PzSol8SEDk83pXDdoDJCwWFFgAAAGkFTUFUSUM0BaG9RrhcXAKUg/vs8vPmEQJuRQAAABIAAAUEMEUCIQC2w1lfHUvzy//8Qv7WpE/0oJtaUVaOvKsLovpGUbLeTgIgHD8NMRYbp5qLffXW0mJNWLYMSHZY0lsRLvHTYYKiy6YAAABpBXhjUEhB/////2PSTsyOuKe10IA+kA97bO0AAAAMAAAFBDBFAiEA/U1APYEbTN4ydkHmGQYjc/e2xdnJusyOEJs1uEcoXDYCIB1/tOwt+wugfZWiwtSAO5fGApqMIhpvUF5z81zKw7uRAAAAaARSTVJLUk1SS0yTZr5wbTqQ3PcAdsoDeuMAAAASAAAFBDBFAiEAlnFK87euPT9MP+t/OTeLDnYs8sICzxF3HGWdjFGS6dQCIElvZ2U4z6HKS32DhDb+J986Hxn7N7jMnG1keErhmm5sAAAAawdzZnJ4RVRI7PkRFjSK8c/+M16YB/AFEzK+Eo0AAAASAAAFBDBFAiEApKuKw8E8bywlMkaW5gn60JUM3NvZztS9l8yFHM8oiOECIBUACY3j5SNPj4lD+ChWphldzhoni0xSsnyFOZgd560XAAAAaQZTVEVMTEEONYg4znLV5h4AGKL/rEvsX0yI0gAAABIAAAUEMEQCIAWd1no2wBPwt/1TvuD/9MOpWv7Yh5EZOOHEuZTBO2e3AiBkMYQq7Xu4TlOIb2847uZbElRIouEu3OtrA+10RLFgewAAAGgFeGNTVUL/////Q7RWC8DEUaM4bggr/1CskAAAAAoAAAUEMEQCIE5EwUwv2kQ3pPqEmg0JhS+7trMk4unOHpwUVsEeyZ1PAiAMmJwpf9U4RQDzEG+UAvYn3NLUss528W4LWzWnVV0cRQAAAGcDVEhPc1q+SOh4KUijfHdl7LdrmM3pew8AAAASAAAFBDBFAiEA/6/gDA17Cdd16G9ltoPHSN0oE9mxXx53hg029BxYb24CIGfCbd2/QY8IrnNae8wRMBLqsibVkmHD1s7aFTp9rNaGAAAAZwRVU0RDgY7Ap/4Y/5QmmQT87Wrj2ubW3AsAAAAGAAAFBDBEAiAwae5IW62nublcXXEdYb+nZ2v1n/GQ33WOfgUGjtK4dAIgCiGgXMwvEuav5SlPYRk9bk+g3RWqaafU6PcbOPPXm7EAAABoBFdFTExRGrU/eTaDdj5aiClzgwE2iiQR4wAAABIAAAUEMEUCIQCPbNUKkQSKssRe7t4e+cYmCHLELQGTovuwR46Q0MZYvwIgdLty8AHYBt5U3caArMrjcR1tgFHLoEDdxUouCU/gPXAAAABoBVdlbGxlg4nPW+jx5WIR0iZmiouPbK3mHuQAAAASAAAFBDBEAiB8C4xhOL9fmj5don3ohJdgFMQabRJXhA+gkcMLLyB+CAIgcu9q2gqi8YjTu77A6Wgz+UfKx1dPZhznWDxVrI3s6VAAAABoBFdFVEirPwJFuD/rEdFar/79etRlpZgX7QAAABIAAAUEMEUCIQC81r21CokLfBDD9mviTGvcRW1f9sfrBElsccfEvkvIoQIgYJuzriovmS5gEAxId/3zb/dZd/FlzDoW7Z07dvty938AAABpBVdHTE1SrMFdx0iAyZRHdUSDBLJj0ZHGB38AAAASAAAFBDBFAiEAiH4kp6TwTtixtmcGUKFfmBHh+B0KrFVjn6k8FI3DeF0CIFEP8dHZDB/Z2TUrjqLtHMUmRJpaaIax6Gjlia2O+oZCAAAAaAV4Y0RPVP////8fysvSGO3A66IPwjCMd4CAAAAACgAABQQwRAIgMkenBKxQqzMB6UTG2ovcg3udiOoVm4oC1+tZt12QmiICIDCfKo3ORdAiv8Yr5ZGN9lDxewSy+/CwC8hsNci3qw7U";
  const base_signatures = "";
  const arbitrum_signatures = "";
  const avalanche_c_chain_signatures = "";
  const linea_signatures = "";
  const blast_signatures = "";
  const scroll_signatures = "AAAAawdhYmNOVVJJMwxD0ivWWmD/6pOhl/BOh/qie3AAAAASAAgnUDBFAiEA7Bz79Zpd4/JhoShP9ZZlX5t7UsIIQ0WHoLJHCulr6X0CIGsmaD+6cFXZyvT1ZxIm9NOYIm+ZbbbxGWKtjCocj/i8AAAAZwRBTktS30dLcQm3O31Xkm1DWY1ZNBMRNrIAAAASAAgnUDBEAiBY9xNIeydjoV2t0yxlGknpQuNWmnKlbqkWc8tsp81j2AIgQRW+aGgUHICKDXLOo5WMzL7enCBBVkzLePwftbZlilcAAABrB2Fua3JFVEgS2M4DXF3jzjmx/dTB1adF6ro7jAAAABIACCdQMEUCIQCqxPUKVq3oEylJzQ1wH2LA8K7cjE5eBBrrzz8IZpk/CQIgLyRMyPZcNEvfc6XauOJt5mA6RZ1PipoZv5mE5k02X8QAAABrB2F4bFVTREPrRmNCxNRJvJ9TqGXVy5BYb0BSFQAAAAYACCdQMEUCIQCiWjht3cDn1bLjTx5Jd06zw+xtCJjwe6wHJkZAmMK7FAIgbTsft35CiE+WX6+P/sO0/zYvPMg87zdxZr0M8mrf9/oAAABnA0NISS/Fz2X9CmYIAfEZgyshWHVpaCZtAAAAEgAIJ1AwRQIhAOZhGH6x/rOmMAnW60/h+gU8Q/IyZL57O7oNrN02QQm3AiA02K/vUNnvdDR31W60+XqirPqDGaDrLOmhm86IaeVGjAAAAGkGREFDS0lFuQEJZDATJhYBc9ppTAaXovzoLzkAAAASAAgnUDBEAiA3CTLZ9ugVPdsnlI4I23Pt8e4O4nDG0J/csK+U7ld7mQIgSjfNYZVdlCFBxzb79+8Gg/F5PL/LJYngQSAQ1wMqdK8AAABmA0NBVN1qSZla04/nQJtdXLVTkmG9G8kBAAAAEgAIJ1AwRAIgW1/6eXccV4qK7lq4Jue0d1equv0z0nsxoJ4RTc4W46gCIE7d9Bp8j7pjuRhaVCGTGHY2jJ7H8hKNa8MEz3ytJGdBAAAAaQZmcnhFVEjsxo0EUeICkkBpZ/58BCgOUjisfQAAABIACCdQMEQCIHXezwfj2SPj+D/GfEd/nNMMWbarM1R8VVWkHu4eTEloAiBHwxoj66RJkzs9e5bvfK7Yb6LX5KlWRn9BD4llSHbFtgAAAGcESUJFWHird/fVkPsQGqGK/8I4y/6jHq1bAAAAEgAIJ1AwRAIgSnPZnAFkG3wX8nghhBn/mzJdpK4gO271LguBjcMFJDQCIDhURhhLKYDEXTl5/krRvp01vMKZlVbyhed50+WcWAFPAAAAZwNJVFArHTb1thrdr32n670Rs1/Yz7DeMQAAABIACCdQMEUCIQDKh1u1+0wD6NqQzPRjS7yCl1tB65eP0m78WF5G98PBjQIgLAn/brVbgHmKTY6b5/s4B21mz270BRNq1scT4MNmqZoAAABnBGlVU0QKO7CLOhWhm03oL4rPyGJgb7aaLQAAABIACCdQMEQCIGjeB5xWrB1ctvpldb7WTD+gl02Nc6toO+4KlEvzdrh+AiA2G+opXJPGBKRLopWzg4kY+hXbHhJ7+07j9v6MfKoEswAAAGYDaVppYNAewtXpisUci0z4TfzOmNUnx0cAAAASAAgnUDBEAiB1rP1XFRIpbG49zNfCJ7AZbKkWxIc0ByX/et1tbPEhlAIgNCPPLq2420cvpg70XCkCiwEuDfrUNE2WdhEnyhWDWC8AAABoBXJzRVRIZUIbqQkgC4FkDZi5edB0h8l4G2YAAAASAAgnUDBEAiBKksE0OE6Qhjjtl49AJarBA26GjurXC2Y0QAHFuCBFPgIgG8XLdiTHAo4RYGO0WlAB3dj//xa7Kqdv6wgh4R2LnHAAAABnBE1BSEFqZhMSk40ioqDif1hQc+RAaQOZCgAAABIACCdQMEQCIHdGvST4Txf62bByurvIAEedkLuJlcTF0IlL3HjzXE88AiAZjRPxTljQtQ9ZkGGpN18dgZSvmU6FVvfH3sZZV7tiNgAAAGYDTVZYABjZbFeRIalDBySdR/BT4taHtecAAAASAAgnUDBEAiAQ5ue2RWUJMah/etkkXV83KiGm7mSspRLbqQHG2vSexAIgMXtr77e8/iEknIZu3VhL3oPa+13UO6aiGexVTw/3sGcAAABnBE5VUkmqroN4gJu4gVwI08WesMfRUprXaQAAABIACCdQMEQCIFr0dsM9WHK1aSbbXHNp1h5suRTlrIbu9gkqss1Of6cYAiAQZR1jlsxQgEDP6IEb5TPV1k1s6tfvgHK2fQG9nVQGmgAAAGcET01LR2t9HJ1Rnfw6XY0bfBXU5bvo3eHPAAAAEgAIJ1AwRAIgbIHf7RbKEb5HjzUVKAKRwKvai4zJaXpdhbT6sHxdrJYCICVGu3IXqc0ZuOWqAUHF4q8Q87AcrH2F3aPbrrAoL2TEAAAAaQVQQU5EQWGpzFYbbB+cMbzetEev7PJfM7v5AAAAEgAIJ1AwRQIhAJAG96hGBz/nTOHP/Piy72KcO4kZXfKQKcMXJv6FdF1FAiBlKqebvWJkMzcFC2a0qlGYsAnBZCZfuGB3R8rvTr2QwgAAAGoHUEFQWVJVUw/EeeL5tzEL+x22Bs9WXeppEO7cAAAAEgAIJ1AwRAIga27Y4D0FbNAxt4Bj2N+XSqgcwZT0eUm8FIFoNsTdAS4CIAXp0DQSiyhZzdmvDfRZYy3vfwboJVjF9ulk0uV8QW9EAAAAZwRQVU5L3esjkF9ph9X3hqk8ALvtPZevHMwAAAASAAgnUDBEAiBmlPz/a0F24qX9TSd3rxZNahvAXpQJY9L2yo3KQ6XNQAIgIcCIKHmLdovqQpJL7/4cA87nz8pxICcY9ZZCurW/LMcAAABqBndyc0VUSKJbJVSLTJiwx9PSfcpdXKdD1ot/AAAAEgAIJ1AwRQIhAPmO+BMpPEMHSTyowbG2ypeRcFHqivMv9Pr0LfNUkLdnAiBxSTtC5MB+RHYmPLDqpm22elzuLcdNs6HwMuZ6hb5d5AAAAGoHU0NSSUJFU3UDUan3X5jywukdTts76xTnGVV+AAAAEgAIJ1AwRAIgI9CaGC3uepRk1w4NcEDAh0xIsz61hjVCkjKosMzmrukCIGDhCjrYcJJb39wBMwr4Er/cXeG8pgPvaTPTXxXLbFU6AAAAZwNTS1mVpS7B1g50zT6wAv5UosdLGFpMFgAAABIACCdQMEUCIQCuvIxR8Pya6Y50An6lGlPVJs1ZGX/lVrfjCDjy20G2SwIgQYfQ4nOEo089xl5DlvkbB0DuA73z2mPLQTKfWSjqlgYAAABpBVNUT05FgBN1EJeYIjIhk/yZfUANWmx0e/cAAAASAAgnUDBFAiEAoxrr3JLsai4m56TNul3bDTHxipZjnIMEYtan34bCn30CIBUP+U9paX3tMyQ9yRbTkZb3YJuFjGGmNI3Jmtg9MFdGAAAAZgNTSVMUZ7YqauXNyxCmqBc8/hh90sWhNgAAABIACCdQMEQCIAFFyi+LJapac7b4/V95+PM1KqyXM5hI76XrRhjP2uavAiBdOJYww673C/drC7PgTGagehy4NEPfjW2UFJQ5WQPKtwAAAGcEVVNEVPVb7Jyv2+hzDwlqpV2tbSLUQJnfAAAABgAIJ1AwRAIgKO2Vv4H66xhD8QLkTPn+6FgV9gIMGijLeiubepfXU7cCIArNxjU89FSF9OnucGffBlLW2VgCmcdW0fgp0ZnKqI89AAAAZwNUS04aL8tYWzJ/reyR9V1FgpRysV8XpAAAABIACCdQMEUCIQDA0iLOem3CC93DXogFgsAxJhM124qpc+FF6clRK5xSSQIgEUB3gkZLak5Id396hqNN2P4RaZ+2BaYV3ny0oeGlKM4AAABnBFVTREMG79v/KhSnyOFZRNH0pI+flfZjpAAAAAYACCdQMEQCIDjjopGABikMuhCp23eLA5pVu98aLR9gEjcnDJzwjJXIAiAFuHGWrrWmOrKuJYMwdw7J6oy8YYo3GJIFkbRLpydzsQAAAGcDVkVOaQ8dLaR9mnWak90rCs48FifyFroAAAASAAgnUDBFAiEAnymsGIMtNk7GWRagqaUJOke3s788qT6fEDFF0p4PRD8CIGLR3A53xyJC3qVK/RapsZSHrjF9+dT2VTPfTfjzzjDRAAAAaARXQlRDPBvKWmVuae3NDU42vrs/zaymDPEAAAAIAAgnUDBFAiEA1X4GZSYgYEr+KQm2cOxtBfx2tOPPtF0Nc0xKBG+lwKACIAwVdgPG4zcoh1nmeFFZzTn3bhhJzUdFsAU1KrbI0DuJAAAAaARXRVRIUwAAAAAAAAAAAAAAAAAAAAAAAAQAAAASAAgnUDBFAiEA8aYEcu8nvnsUojm2Q/zNmlDPikQiRrPCgNiH9K4WB28CIFfQKXzICPQF/aOsubn7zdoJmIptCUqughgAZNJBun11AAAAaQZ3c3RFVEj2EKnft8iWRJebSg8nBj6efXzaMgAAABIACCdQMEQCIBAM5wwNe91593nxdYmeptTwiul25K1g/kfPzoQ/hVWCAiBcLGHyWSef3taBpJ5aYPTey/cGVKO9HxY2gbM6mbEbjQAAAGYCWlAhR6iftGCHUoByFtUHBHHAmg3OMgAAABIACCdQMEUCIQCattnM43+2ubeIgsWxWbsFqtsrv467fEPt2E6km76OvAIgTDtdp9FOhc3HuYg5RgRJQqPT062jVQ32otAuPuq+6fwAAABoBXhVU0R6RNS2J5l7QavSvy6gW3Mf5TXwHD0AAAASAAgnUDBEAiALvZTPpSTUX5nJ1j/3UlNw7zatiZqD5fL0ZMsHVYhoTQIgOhAoSrkzF7/AyNLgrVHSH0Hkj/R5pDazVIFZMUpM87wAAABmA1pFThiLFYyvXqJSAS29YDCvwDAynElhAAAAEgAIJ1AwRAIgNZ9Qpc/ILDziwVGaMTbLTMpqBMb6Cw9Pb9L0gMy1LvcCIDnkb5713e3HGNqiOrqWIVMPTJK2loBLiYZkRFCz5yBX";
  const neon_evm_signatures = "AAAAaARVU0RD6msEJy+fYvmX9mbwfTqXQTT3/7kAAAAGDprA1jBFAiEAvI520aR/1BdUTs1LOLHzCXf3XIcR3IbWWkm++Ckf07oCIEyxewn8LU5eMIlGnVrR5E66B68c45snJPMVtreUehnSAAAAaARVU0RUXwFV0I70quK1AK77ZKNBnai7YRoAAAAGDprA1jBFAiEAv2xly1pOs281T3IYK+tNit+wuCmEpk7YEZpoI45mByQCIFJgwf0NJ9LpupW1NbVZF6qq9FKA44T2pxpj9fnuCAGuAAAAZwNCVENU7OydmVpsv/ODj2qPOAmeUYgF1wAAAAYOmsDWMEUCIQDQCq6SNpN2ZGoN24/LdTH3IIdt1AEvN+wzv/QKGOgpfgIgKKrIysE+wePcoc7LK8uR+N0ff+Zd3bNRWt+gOIJ7kXsAAABnBFdFVEjP/YTUaCIMEb5k3J32Tq/gKvYOigAAAAgOmsDWMEQCIFFPt8VFAepTqhleKBf3+OhYWrXCE+ajMv1v2sGeGM5DAiBQC35yROO/oOJpMt9TO61xru0osWctV1bvhAC7FfXh3AAAAGkFV05FT04gLDXlF/qAO1N1ZcQPCmll1yBGCQAAABIOmsDWMEUCIQCKjfomgkchszZ1exjDavteqKbuBsmkpmjC8r2cTnlzugIgdkJpHb3IvvLsY/tLqnGqMx9OssmSrP2LXq1bjDrCy7wAAABmA1NPTF84JI8zm/ToSiyvTkwFUoYtyfgqAAAACQ6awNYwRAIgS2h5GrIioMeBkSwNbnCsmsz+SqQFYfX5eHF/YwnP9EYCIC+Iv4Khdnl6I3OfplXTllyMgswS3xMWpkx7xeqFA5WO";
  const signatures = {
    1: ethereum_signatures,
    10: optimism_signatures,
    25: cronos_signatures,
    40: telos_evm_signatures,
    56: bsc_signatures,
    57: syscoin_signatures,
    137: polygon_signatures,
    199: bittorrent_signatures,
    250: fantom_signatures,
    592: astar_signatures,
    1101: polygon_zk_evm_signatures,
    1284: moonbeam_signatures,
    8453: base_signatures,
    42161: arbitrum_signatures,
    43114: avalanche_c_chain_signatures,
    59144: linea_signatures,
    81457: blast_signatures,
    534352: scroll_signatures,
    245022934: neon_evm_signatures
  };
  const defaultLoadConfig = {
    nftExplorerBaseURL: "https://nft.api.live.ledger.com/v1/ethereum",
    pluginBaseURL: "https://cdn.live.ledger.com",
    extraPlugins: null,
    cryptoassetsBaseURL: "https://cdn.live.ledger.com/cryptoassets",
    calServiceURL: "https://crypto-assets-service.api.ledger.com"
  };
  function getLoadConfig(userLoadConfig) {
    return {
      ...defaultLoadConfig,
      ...userLoadConfig
    };
  }
  const asContractAddress = (addr) => {
    const a = addr.toLowerCase();
    return a.startsWith("0x") ? a : "0x" + a;
  };
  const findERC20SignaturesInfo = async (userLoadConfig, chainId) => {
    const { cryptoassetsBaseURL } = getLoadConfig(userLoadConfig);
    if (!cryptoassetsBaseURL)
      return null;
    const url = `${cryptoassetsBaseURL}/evm/${chainId}/erc20-signatures.json`;
    const blob = await fetch(url).then(async ({ text }) => await text()).then((data) => {
      if (!data || typeof data !== "string") {
        throw new Error(`ERC20 signatures for chainId ${chainId} file is malformed ${url}`);
      }
      return data;
    }).catch((e) => {
      log("error", "could not fetch from " + url + ": " + String(e));
      return null;
    });
    return blob;
  };
  const byContractAddressAndChainId = (contract, chainId, erc20SignaturesBlob) => {
    if (erc20SignaturesBlob) {
      try {
        return parse(erc20SignaturesBlob).byContractAndChainId(asContractAddress(contract), chainId);
      } catch (e) {
        return get(chainId)?.byContractAndChainId(asContractAddress(contract), chainId);
      }
    }
    return get(chainId)?.byContractAndChainId(asContractAddress(contract), chainId);
  };
  const parse = (erc20SignaturesBlob) => {
    const buf = Buffer2.from(erc20SignaturesBlob, "base64");
    const map = {};
    const entries = [];
    let i2 = 0;
    while (i2 < buf.length) {
      const length = buf.readUInt32BE(i2);
      i2 += 4;
      const item = buf.slice(i2, i2 + length);
      let j = 0;
      const tickerLength = item.readUInt8(j);
      j += 1;
      const ticker = item.slice(j, j + tickerLength).toString("ascii");
      j += tickerLength;
      const contractAddress = asContractAddress(item.slice(j, j + 20).toString("hex"));
      j += 20;
      const decimals = item.readUInt32BE(j);
      j += 4;
      const chainId = item.readUInt32BE(j);
      j += 4;
      const signature2 = item.slice(j);
      const entry = {
        ticker,
        contractAddress,
        decimals,
        chainId,
        signature: signature2,
        data: item
      };
      entries.push(entry);
      map[String(chainId) + ":" + contractAddress] = entry;
      i2 += length;
    }
    return {
      list: () => entries,
      byContractAndChainId: (contractAddress, chainId) => map[String(chainId) + ":" + contractAddress]
    };
  };
  const get = /* @__PURE__ */ (() => {
    const cache = {};
    return (chainId) => {
      if (cache[chainId])
        return cache[chainId];
      const signatureBlob = signatures[chainId];
      if (!signatureBlob)
        return null;
      const api = parse(signatureBlob);
      cache[chainId] = api;
      return api;
    };
  })();
  var ERC20_CLEAR_SIGNED_SELECTORS;
  (function(ERC20_CLEAR_SIGNED_SELECTORS2) {
    ERC20_CLEAR_SIGNED_SELECTORS2["APPROVE"] = "0x095ea7b3";
    ERC20_CLEAR_SIGNED_SELECTORS2["TRANSFER"] = "0xa9059cbb";
  })(ERC20_CLEAR_SIGNED_SELECTORS || (ERC20_CLEAR_SIGNED_SELECTORS = {}));
  var ERC721_CLEAR_SIGNED_SELECTORS;
  (function(ERC721_CLEAR_SIGNED_SELECTORS2) {
    ERC721_CLEAR_SIGNED_SELECTORS2["APPROVE"] = "0x095ea7b3";
    ERC721_CLEAR_SIGNED_SELECTORS2["SET_APPROVAL_FOR_ALL"] = "0xa22cb465";
    ERC721_CLEAR_SIGNED_SELECTORS2["TRANSFER_FROM"] = "0x23b872dd";
    ERC721_CLEAR_SIGNED_SELECTORS2["SAFE_TRANSFER_FROM"] = "0x42842e0e";
    ERC721_CLEAR_SIGNED_SELECTORS2["SAFE_TRANSFER_FROM_WITH_DATA"] = "0xb88d4fde";
  })(ERC721_CLEAR_SIGNED_SELECTORS || (ERC721_CLEAR_SIGNED_SELECTORS = {}));
  var ERC1155_CLEAR_SIGNED_SELECTORS;
  (function(ERC1155_CLEAR_SIGNED_SELECTORS2) {
    ERC1155_CLEAR_SIGNED_SELECTORS2["SET_APPROVAL_FOR_ALL"] = "0xa22cb465";
    ERC1155_CLEAR_SIGNED_SELECTORS2["SAFE_TRANSFER_FROM"] = "0xf242432a";
    ERC1155_CLEAR_SIGNED_SELECTORS2["SAFE_BATCH_TRANSFER_FROM"] = "0x2eb2c2d6";
  })(ERC1155_CLEAR_SIGNED_SELECTORS || (ERC1155_CLEAR_SIGNED_SELECTORS = {}));
  const padHexString = (str) => {
    return str.length % 2 ? "0" + str : str;
  };
  function splitPath(path) {
    const splittedPath = [];
    const paths = path.split("/");
    paths.forEach((path2) => {
      let value = parseInt(path2, 10);
      if (isNaN(value)) {
        return;
      }
      if (path2.length > 1 && path2[path2.length - 1] === "'") {
        value += 2147483648;
      }
      splittedPath.push(value);
    });
    return splittedPath;
  }
  function hexBuffer(str) {
    if (!str)
      return Buffer2.alloc(0);
    const strWithoutPrefix = str.startsWith("0x") ? str.slice(2) : str;
    return Buffer2.from(padHexString(strWithoutPrefix), "hex");
  }
  function maybeHexBuffer(str) {
    if (!str)
      return null;
    return hexBuffer(str);
  }
  const intAsHexBytes = (int, bytes2) => int.toString(16).padStart(2 * bytes2, "0");
  const tokenSelectors = Object.values(ERC20_CLEAR_SIGNED_SELECTORS);
  const nftSelectors = [
    ...Object.values(ERC721_CLEAR_SIGNED_SELECTORS),
    ...Object.values(ERC1155_CLEAR_SIGNED_SELECTORS)
  ];
  const mergeResolutions = (resolutionsArray) => {
    const mergedResolutions = {
      nfts: [],
      erc20Tokens: [],
      externalPlugin: [],
      plugin: [],
      domains: []
    };
    for (const resolutions of resolutionsArray) {
      for (const key2 in resolutions) {
        mergedResolutions[key2].push(...resolutions[key2]);
      }
    }
    return mergedResolutions;
  };
  const getParity = (vFromDevice, chainId, transactionType) => {
    if (transactionType)
      return vFromDevice;
    const chainIdUint32 = getChainIdAsUint32(chainId);
    const chainIdWithEIP155 = chainIdUint32 * 2 + 35;
    const chainIdWithOverflowZero = chainIdWithEIP155 % 256;
    const chainIdWithOverflowOne = (chainIdWithEIP155 + 1) % 256;
    if (chainIdWithOverflowZero === vFromDevice) {
      return 0;
    } else if (chainIdWithOverflowOne === vFromDevice) {
      return 1;
    }
    throw new Error("Invalid v value");
  };
  const getChainIdAsUint32 = (chainId) => {
    const chainIdBuff = Buffer2.from(padHexString(new BigNumber$1(chainId).toString(16)), "hex");
    const chainIdUint32 = chainIdBuff.subarray(0, 4);
    return parseInt(chainIdUint32.toString("hex"), 16);
  };
  const getV = (vFromDevice, chainId, transactionType) => {
    if (chainId.isZero())
      return vFromDevice.toString(16);
    const parity = getParity(vFromDevice, chainId, transactionType);
    return !transactionType ? (
      // Legacy transactions (type 0) should apply EIP-155
      // EIP-155: rlp[(nonce, gasprice, startgas, to, value, data, chainid, 0, 0)]
      padHexString(chainId.times(2).plus(35).plus(parity).toString(16))
    ) : (
      // Transactions after type 1 should only use partity (00/01) as their v value
      // EIP-2930: 0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, *signatureYParity*, signatureR, signatureS])
      // EIP-1559: 0x02 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list, *signature_y_parity*, signature_r, signature_s])
      // EIP-4844: 0x03 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data, access_list, max_fee_per_blob_gas, blob_versioned_hashes, *y_parity*, r, s])
      // EIP-7702: 0x05 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, value, data, access_list, authorization_list, *signature_y_parity*, signature_r, signature_s])
      padHexString(parity.toString(16))
    );
  };
  const safeChunkTransaction = (transactionRlp, derivationPath, transactionType) => {
    const maxChunkSize = 255;
    const payload = Buffer2.concat([derivationPath, transactionRlp]);
    if (payload.length <= maxChunkSize)
      return [payload];
    if (transactionType) {
      const chunks2 = Math.ceil(payload.length / maxChunkSize);
      return new Array(chunks2).fill(null).map((_, i2) => payload.subarray(i2 * maxChunkSize, (i2 + 1) * maxChunkSize));
    }
    const decodedVrs = decode$1(transactionRlp).slice(-3);
    const encodedVrs = encode$1(decodedVrs);
    const encodedVrsBuff = hexBuffer(encodedVrs).subarray(1);
    let chunkSize = 0;
    const lastChunkSize = payload.length % maxChunkSize;
    if (lastChunkSize === 0 || lastChunkSize > encodedVrsBuff.length) {
      chunkSize = maxChunkSize;
    } else {
      for (let i2 = 1; i2 <= maxChunkSize; i2++) {
        const lastChunkSize2 = payload.length % (maxChunkSize - i2);
        if (lastChunkSize2 === 0 || lastChunkSize2 > encodedVrsBuff.length) {
          chunkSize = maxChunkSize - i2;
          break;
        }
      }
    }
    const chunks = Math.ceil(payload.length / chunkSize);
    return new Array(chunks).fill(null).map((_, i2) => payload.subarray(i2 * chunkSize, (i2 + 1) * chunkSize));
  };
  var EIP712_ARRAY_TYPE_VALUE;
  (function(EIP712_ARRAY_TYPE_VALUE2) {
    EIP712_ARRAY_TYPE_VALUE2[EIP712_ARRAY_TYPE_VALUE2["DYNAMIC"] = 0] = "DYNAMIC";
    EIP712_ARRAY_TYPE_VALUE2[EIP712_ARRAY_TYPE_VALUE2["FIXED"] = 1] = "FIXED";
  })(EIP712_ARRAY_TYPE_VALUE || (EIP712_ARRAY_TYPE_VALUE = {}));
  const EIP712_TYPE_PROPERTIES = {
    CUSTOM: {
      key: () => 0,
      size: () => null
    },
    INT: {
      key: () => 1,
      size: (size2) => Number(size2) / 8
    },
    UINT: {
      key: () => 2,
      size: (size2) => Number(size2) / 8
    },
    ADDRESS: {
      key: () => 3,
      size: () => null
    },
    BOOL: {
      key: () => 4,
      size: () => null
    },
    STRING: {
      key: () => 5,
      size: () => null
    },
    BYTES: {
      key: (size2) => typeof size2 !== "undefined" ? 6 : 7,
      size: (size2) => typeof size2 !== "undefined" ? Number(size2) : null
    }
  };
  const EIP712_TYPE_ENCODERS = {
    INT(value, size2 = 256) {
      const failSafeValue = value ?? "0";
      if (typeof failSafeValue === "string" && failSafeValue?.startsWith("0x")) {
        return hexBuffer(failSafeValue);
      }
      let valueAsBN = new BigNumber$1(failSafeValue);
      if (valueAsBN.lt(0)) {
        const sizeInBytes = size2 / 8;
        const maskAsBN = new BigNumber$1(`0x${Buffer2.alloc(sizeInBytes, 255).toString("hex")}`);
        valueAsBN = maskAsBN.plus(valueAsBN).plus(1);
      }
      const paddedHexString = valueAsBN.toString(16).length % 2 ? "0" + valueAsBN.toString(16) : valueAsBN.toString(16);
      return Buffer2.from(paddedHexString, "hex");
    },
    UINT(value) {
      return this.INT(value);
    },
    BOOL(value) {
      return this.INT(typeof value === "boolean" ? Number(value).toString() : value);
    },
    ADDRESS(value) {
      return hexBuffer(value ?? "").slice(0, 20);
    },
    STRING(value) {
      return Buffer2.from(value ?? "", "utf-8");
    },
    BYTES(value, size2) {
      const failSafeValue = value ?? "";
      return hexBuffer(failSafeValue).slice(0, size2 ?? (failSafeValue?.length - 2) / 2);
    }
  };
  const destructTypeFromString = (typeName) => {
    const splitNameAndArraysRegex = new RegExp(/^([^[\]]*)(\[.*\])*/g);
    const splitArraysRegex = new RegExp(/\[(\d*)\]/g);
    const splitNameAndNumberRegex = new RegExp(/(?=u?int|bytes)([a-zA-Z-0-9]+?)(\d{1,3})$/g);
    const [, type, maybeArrays] = splitNameAndArraysRegex.exec(typeName || "") || [];
    const [, name = type, size2] = splitNameAndNumberRegex.exec(type || "") || [];
    const typeDescription = name ? { name, size: size2 ? Number(size2) : void 0 } : null;
    const arrays = maybeArrays ? [...maybeArrays.matchAll(splitArraysRegex)] : [];
    const arrayLengths = arrays.map(([, arrayLength]) => arrayLength ? Number(arrayLength) : null);
    return [typeDescription, arrayLengths];
  };
  const constructTypeDescByteString = (isArray, typeSize, typeValue) => {
    if (typeValue >= 16) {
      throw new Error("Eth utils - constructTypeDescByteString - Cannot accept a typeValue >= 16 because the typeValue can only be 4 bits in binary" + { isArray, typeSize, typeValue });
    }
    const isArrayBit = isArray ? "1" : "0";
    const hasTypeSize = typeof typeSize === "number" ? "1" : "0";
    const unusedBits = "00";
    const typeValueBits = typeValue.toString(2).padStart(4, "0");
    return intAsHexBytes(parseInt(isArrayBit + hasTypeSize + unusedBits + typeValueBits, 2), 1);
  };
  const makeTypeEntryStructBuffer = ({ name, type }) => {
    const [typeDescription, arrSizes] = destructTypeFromString(type);
    const isTypeAnArray = Boolean(arrSizes.length);
    const typeProperties = EIP712_TYPE_PROPERTIES[typeDescription?.name?.toUpperCase() || ""] || EIP712_TYPE_PROPERTIES.CUSTOM;
    const typeKey = typeProperties.key(typeDescription?.size);
    const typeSize = typeProperties.size(typeDescription?.size);
    const typeDescData = constructTypeDescByteString(isTypeAnArray, typeSize, typeKey);
    const bufferArray = [Buffer2.from(typeDescData, "hex")];
    if (typeProperties === EIP712_TYPE_PROPERTIES.CUSTOM) {
      bufferArray.push(Buffer2.from(intAsHexBytes(typeDescription?.name?.length ?? 0, 1), "hex"));
      bufferArray.push(Buffer2.from(typeDescription?.name ?? "", "utf-8"));
    }
    if (typeof typeSize === "number") {
      bufferArray.push(Buffer2.from(intAsHexBytes(typeSize, 1), "hex"));
    }
    if (isTypeAnArray) {
      bufferArray.push(Buffer2.from(intAsHexBytes(arrSizes.length, 1), "hex"));
      arrSizes.forEach((size2) => {
        if (typeof size2 === "number") {
          bufferArray.push(Buffer2.from(intAsHexBytes(EIP712_ARRAY_TYPE_VALUE.FIXED, 1), "hex"), Buffer2.from(intAsHexBytes(size2, 1), "hex"));
        } else {
          bufferArray.push(Buffer2.from(intAsHexBytes(EIP712_ARRAY_TYPE_VALUE.DYNAMIC, 1), "hex"));
        }
      });
    }
    bufferArray.push(Buffer2.from(intAsHexBytes(name.length, 1), "hex"), Buffer2.from(name, "utf-8"));
    return Buffer2.concat(bufferArray);
  };
  const getCoinRefTokensMap = (filters, shouldUseV1Filters, message) => {
    const coinRefsTokensMap = {};
    if (shouldUseV1Filters || !filters)
      return coinRefsTokensMap;
    const tokenFilters = filters.fields.filter(({ format }) => format === "token").sort((a, b) => (a.coin_ref || 0) - (b.coin_ref || 0));
    const tokens = tokenFilters.reduce((acc, filter) => {
      const token = getValueFromPath(filter.path, message);
      if (Array.isArray(token)) {
        throw new Error("Array of tokens is not supported with a single coin ref");
      }
      return [...acc, { token, coinRef: filter.coin_ref }];
    }, []);
    for (const { token, coinRef } of tokens) {
      coinRefsTokensMap[coinRef] = { token };
    }
    const shouldUseVerifyingContract = filters.fields.some((filter) => filter.format === "amount" && filter.coin_ref === 255);
    if (shouldUseVerifyingContract && message.domain.verifyingContract) {
      coinRefsTokensMap[255] = { token: message.domain.verifyingContract };
    }
    return coinRefsTokensMap;
  };
  const getAppAndVersion = async (transport) => {
    const appAndVersionHex = await transport.send(176, 1, 0, 0);
    let offset = 1;
    const nameLength = appAndVersionHex[offset];
    offset += 1;
    const name = appAndVersionHex.subarray(offset, offset + nameLength).toString("ascii");
    offset += nameLength;
    const versionLength = appAndVersionHex[offset];
    offset += 1;
    const version2 = appAndVersionHex.subarray(offset, offset + versionLength).toString("ascii");
    return {
      name,
      version: version2
    };
  };
  const getFilterDisplayNameAndSigBuffers = (displayName, sig) => {
    const displayNameContentBuffer = Buffer2.from(displayName);
    const displayNameLengthBuffer = Buffer2.from(intAsHexBytes(displayNameContentBuffer.length, 1), "hex");
    const sigContentBuffer = Buffer2.from(sig, "hex");
    const sigLengthBuffer = Buffer2.from(intAsHexBytes(sigContentBuffer.length, 1), "hex");
    return {
      displayNameBuffer: Buffer2.concat([displayNameLengthBuffer, displayNameContentBuffer]),
      sigBuffer: Buffer2.concat([sigLengthBuffer, sigContentBuffer])
    };
  };
  const getPayloadForFilterV2 = (format, coinRef, coinRefsTokensMap, displayNameBuffer, sigBuffer) => {
    switch (format) {
      case "raw":
      case "datetime":
        return Buffer2.concat([displayNameBuffer, sigBuffer]);
      case "token": {
        const { deviceTokenIndex } = coinRefsTokensMap[coinRef];
        return Buffer2.concat([
          Buffer2.from(intAsHexBytes(deviceTokenIndex || coinRef || 0, 1), "hex"),
          sigBuffer
        ]);
      }
      case "amount": {
        const { deviceTokenIndex } = coinRefsTokensMap[coinRef];
        return Buffer2.concat([
          displayNameBuffer,
          Buffer2.from(intAsHexBytes(deviceTokenIndex || coinRef || 0, 1), "hex"),
          sigBuffer
        ]);
      }
      default:
        throw new Error("Invalid format");
    }
  };
  const makeRecursiveFieldStructImplem = ({ transport, loadConfig, chainId, erc20SignaturesBlob, types: types2, filters, shouldUseV1Filters, shouldUseDiscardedFields, coinRefsTokensMap }) => {
    const typesMap = {};
    for (const type in types2) {
      typesMap[type] = types2[type]?.reduce((acc, curr) => ({ ...acc, [curr.name]: curr.type }), {});
    }
    const recursiveFieldStructImplem = async (destructedType, data, path = "") => {
      const [typeDescription, arrSizes] = destructedType;
      const [currSize, ...restSizes] = arrSizes;
      const isCustomType = !EIP712_TYPE_PROPERTIES[typeDescription?.name?.toUpperCase() || ""];
      if (Array.isArray(data) && typeof currSize !== "undefined") {
        await sendStructImplem(transport, {
          structType: "array",
          value: data.length
        });
        const entryPath = `${path}.[]`;
        if (!data.length) {
          const entryFilters = filters?.fields.filter((f2) => f2.path.startsWith(entryPath));
          if (entryFilters && shouldUseDiscardedFields) {
            for (const entryFilter of entryFilters) {
              await sendFilteringInfo(transport, "discardField", loadConfig, {
                path: entryFilter.path
              });
              await sendFilteringInfo(transport, "showField", loadConfig, {
                displayName: entryFilter.label,
                sig: entryFilter.signature,
                format: entryFilter.format,
                coinRef: entryFilter.coin_ref,
                chainId,
                erc20SignaturesBlob,
                shouldUseV1Filters,
                coinRefsTokensMap,
                isDiscarded: true
              });
            }
          }
        }
        for (const entry of data) {
          await recursiveFieldStructImplem([typeDescription, restSizes], entry, entryPath);
        }
      } else if (isCustomType) {
        for (const fieldName of Object.keys(typesMap[typeDescription?.name || ""])) {
          const fieldValue = data[fieldName];
          const fieldType = typesMap[typeDescription?.name || ""]?.[fieldName];
          if (fieldType) {
            await recursiveFieldStructImplem(destructTypeFromString(fieldType), fieldValue, `${path}.${fieldName}`);
          }
        }
      } else {
        const filter = filters?.fields.find((f2) => path === f2.path);
        if (filter) {
          await sendFilteringInfo(transport, "showField", loadConfig, {
            displayName: filter.label,
            sig: filter.signature,
            format: filter.format,
            coinRef: filter.coin_ref,
            chainId,
            erc20SignaturesBlob,
            shouldUseV1Filters,
            coinRefsTokensMap,
            isDiscarded: false
          });
        }
        await sendStructImplem(transport, {
          structType: "field",
          value: {
            data,
            type: typeDescription?.name || "",
            sizeInBits: typeDescription?.size
          }
        });
      }
    };
    return recursiveFieldStructImplem;
  };
  const sendStructDef = (transport, structDef) => {
    let APDU_FIELDS;
    (function(APDU_FIELDS2) {
      APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
      APDU_FIELDS2[APDU_FIELDS2["INS"] = 26] = "INS";
      APDU_FIELDS2[APDU_FIELDS2["P1_complete"] = 0] = "P1_complete";
      APDU_FIELDS2[APDU_FIELDS2["P1_partial"] = 1] = "P1_partial";
      APDU_FIELDS2[APDU_FIELDS2["P2_name"] = 0] = "P2_name";
      APDU_FIELDS2[APDU_FIELDS2["P2_field"] = 255] = "P2_field";
    })(APDU_FIELDS || (APDU_FIELDS = {}));
    const { structType, value } = structDef;
    const data = structType === "name" && typeof value === "string" ? Buffer2.from(value, "utf-8") : value;
    return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_complete, structType === "name" ? APDU_FIELDS.P2_name : APDU_FIELDS.P2_field, data);
  };
  const sendStructImplem = async (transport, structImplem) => {
    let APDU_FIELDS;
    (function(APDU_FIELDS2) {
      APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
      APDU_FIELDS2[APDU_FIELDS2["INS"] = 28] = "INS";
      APDU_FIELDS2[APDU_FIELDS2["P1_complete"] = 0] = "P1_complete";
      APDU_FIELDS2[APDU_FIELDS2["P1_partial"] = 1] = "P1_partial";
      APDU_FIELDS2[APDU_FIELDS2["P2_root"] = 0] = "P2_root";
      APDU_FIELDS2[APDU_FIELDS2["P2_array"] = 15] = "P2_array";
      APDU_FIELDS2[APDU_FIELDS2["P2_field"] = 255] = "P2_field";
    })(APDU_FIELDS || (APDU_FIELDS = {}));
    const { structType, value } = structImplem;
    if (structType === "root") {
      return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_complete, APDU_FIELDS.P2_root, Buffer2.from(value, "utf-8"));
    }
    if (structType === "array") {
      return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_complete, APDU_FIELDS.P2_array, Buffer2.from(intAsHexBytes(value, 1), "hex"));
    }
    if (structType === "field") {
      const { data: rawData, type, sizeInBits } = value;
      const encodedData = EIP712_TYPE_ENCODERS[type.toUpperCase()]?.(rawData, sizeInBits);
      if (encodedData) {
        const dataLengthPer16Bits = Math.floor(encodedData.length / 256);
        const dataLengthModulo16Bits = encodedData.length % 256;
        const data = Buffer2.concat([
          Buffer2.from(intAsHexBytes(dataLengthPer16Bits, 1), "hex"),
          Buffer2.from(intAsHexBytes(dataLengthModulo16Bits, 1), "hex"),
          encodedData
        ]);
        const bufferSlices = new Array(Math.ceil(data.length / 256)).fill(null).map((_, i2) => data.subarray(i2 * 255, (i2 + 1) * 255));
        for (const bufferSlice of bufferSlices) {
          await transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, bufferSlice !== bufferSlices[bufferSlices.length - 1] ? APDU_FIELDS.P1_partial : APDU_FIELDS.P1_complete, APDU_FIELDS.P2_field, bufferSlice);
        }
      }
    }
    return Promise.resolve();
  };
  async function sendFilteringInfo(transport, type, loadConfig, data) {
    let APDU_FIELDS;
    (function(APDU_FIELDS2) {
      APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
      APDU_FIELDS2[APDU_FIELDS2["INS"] = 30] = "INS";
      APDU_FIELDS2[APDU_FIELDS2["P1_standard"] = 0] = "P1_standard";
      APDU_FIELDS2[APDU_FIELDS2["P1_discarded"] = 1] = "P1_discarded";
      APDU_FIELDS2[APDU_FIELDS2["P2_activate"] = 0] = "P2_activate";
      APDU_FIELDS2[APDU_FIELDS2["P2_discarded"] = 1] = "P2_discarded";
      APDU_FIELDS2[APDU_FIELDS2["P2_show_field"] = 255] = "P2_show_field";
      APDU_FIELDS2[APDU_FIELDS2["P2_message_info"] = 15] = "P2_message_info";
      APDU_FIELDS2[APDU_FIELDS2["P2_datetime"] = 252] = "P2_datetime";
      APDU_FIELDS2[APDU_FIELDS2["P2_amount_join_token"] = 253] = "P2_amount_join_token";
      APDU_FIELDS2[APDU_FIELDS2["P2_amount_join_value"] = 254] = "P2_amount_join_value";
      APDU_FIELDS2[APDU_FIELDS2["P2_raw"] = 255] = "P2_raw";
    })(APDU_FIELDS || (APDU_FIELDS = {}));
    switch (type) {
      case "activate":
        return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_discarded, APDU_FIELDS.P2_activate);
      case "contractName": {
        const { displayName, filtersCount, sig } = data;
        const { displayNameBuffer, sigBuffer } = getFilterDisplayNameAndSigBuffers(displayName, sig);
        const filtersCountBuffer = Buffer2.from(intAsHexBytes(filtersCount, 1), "hex");
        const payload = Buffer2.concat([displayNameBuffer, filtersCountBuffer, sigBuffer]);
        return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_standard, APDU_FIELDS.P2_message_info, payload);
      }
      case "showField": {
        const { displayName, sig, format, coinRef, chainId, coinRefsTokensMap, shouldUseV1Filters, erc20SignaturesBlob, isDiscarded } = data;
        const { displayNameBuffer, sigBuffer } = getFilterDisplayNameAndSigBuffers(displayName, sig);
        if (shouldUseV1Filters) {
          const payload2 = Buffer2.concat([displayNameBuffer, sigBuffer]);
          return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_standard, APDU_FIELDS.P2_show_field, payload2);
        }
        const isTokenAddress = format === "token";
        if (isTokenAddress && coinRef !== void 0) {
          const { token, deviceTokenIndex } = coinRefsTokensMap[coinRef];
          if (deviceTokenIndex === void 0) {
            const payload2 = await byContractAddressAndChainId(token, chainId, erc20SignaturesBlob);
            if (payload2) {
              let PROVIDE_TOKEN_INFOS_APDU_FIELDS;
              (function(PROVIDE_TOKEN_INFOS_APDU_FIELDS2) {
                PROVIDE_TOKEN_INFOS_APDU_FIELDS2[PROVIDE_TOKEN_INFOS_APDU_FIELDS2["CLA"] = 224] = "CLA";
                PROVIDE_TOKEN_INFOS_APDU_FIELDS2[PROVIDE_TOKEN_INFOS_APDU_FIELDS2["INS"] = 10] = "INS";
                PROVIDE_TOKEN_INFOS_APDU_FIELDS2[PROVIDE_TOKEN_INFOS_APDU_FIELDS2["P1"] = 0] = "P1";
                PROVIDE_TOKEN_INFOS_APDU_FIELDS2[PROVIDE_TOKEN_INFOS_APDU_FIELDS2["P2"] = 0] = "P2";
              })(PROVIDE_TOKEN_INFOS_APDU_FIELDS || (PROVIDE_TOKEN_INFOS_APDU_FIELDS = {}));
              const response = await transport.send(PROVIDE_TOKEN_INFOS_APDU_FIELDS.CLA, PROVIDE_TOKEN_INFOS_APDU_FIELDS.INS, PROVIDE_TOKEN_INFOS_APDU_FIELDS.P1, PROVIDE_TOKEN_INFOS_APDU_FIELDS.P2, payload2.data);
              coinRefsTokensMap[coinRef].deviceTokenIndex = response[0];
            }
          }
        }
        const shouldUseVerifyingContract = format === "amount" && coinRef === 255;
        if (shouldUseVerifyingContract) {
          const { token } = coinRefsTokensMap[255];
          const payload2 = await byContractAddressAndChainId(token, chainId, erc20SignaturesBlob);
          if (payload2) {
            await transport.send(224, 10, 0, 0, payload2.data);
            coinRefsTokensMap[255].deviceTokenIndex = 255;
          }
        }
        if (!format) {
          throw new Error("Missing format");
        }
        const P2FormatMap = {
          raw: APDU_FIELDS.P2_raw,
          datetime: APDU_FIELDS.P2_datetime,
          token: APDU_FIELDS.P2_amount_join_token,
          amount: APDU_FIELDS.P2_amount_join_value
        };
        const payload = getPayloadForFilterV2(format, coinRef, coinRefsTokensMap, displayNameBuffer, sigBuffer);
        return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, isDiscarded ? APDU_FIELDS.P1_discarded : APDU_FIELDS.P1_standard, P2FormatMap[format], payload);
      }
      case "discardField": {
        const { path } = data;
        const pathBuffer = Buffer2.from(path);
        const pathLengthBuffer = Buffer2.from(intAsHexBytes(pathBuffer.length, 1), "hex");
        const payload = Buffer2.concat([pathLengthBuffer, pathBuffer]);
        return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_standard, APDU_FIELDS.P2_discarded, payload);
      }
    }
  }
  const signEIP712Message = async (transport, path, typedMessage, fullImplem = false, loadConfig) => {
    let APDU_FIELDS;
    (function(APDU_FIELDS2) {
      APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
      APDU_FIELDS2[APDU_FIELDS2["INS"] = 12] = "INS";
      APDU_FIELDS2[APDU_FIELDS2["P1"] = 0] = "P1";
      APDU_FIELDS2[APDU_FIELDS2["P2_v0"] = 0] = "P2_v0";
      APDU_FIELDS2[APDU_FIELDS2["P2_full"] = 1] = "P2_full";
    })(APDU_FIELDS || (APDU_FIELDS = {}));
    const { primaryType, types: unsortedTypes, domain, message } = typedMessage;
    const { calServiceURL } = getLoadConfig(loadConfig);
    const types2 = sortObjectAlphabetically(unsortedTypes);
    const { version: version2 } = await getAppAndVersion(transport);
    const shouldUseV1Filters = !semver$1.gte(version2, "1.11.1-0", { includePrerelease: true });
    const shouldUseDiscardedFields = semver$1.gte(version2, "1.12.0-0", { includePrerelease: true });
    const filters = await getFiltersForMessage(typedMessage, shouldUseV1Filters, calServiceURL);
    const coinRefsTokensMap = getCoinRefTokensMap(filters, shouldUseV1Filters, typedMessage);
    const typeEntries = Object.entries(types2);
    for (const [typeName, entries] of typeEntries) {
      await sendStructDef(transport, {
        structType: "name",
        value: typeName
      });
      for (const { name, type } of entries) {
        const typeEntryBuffer = makeTypeEntryStructBuffer({ name, type });
        await sendStructDef(transport, {
          structType: "field",
          value: typeEntryBuffer
        });
      }
    }
    if (filters) {
      await sendFilteringInfo(transport, "activate");
    }
    const erc20SignaturesBlob = !shouldUseV1Filters ? await findERC20SignaturesInfo(loadConfig, domain.chainId || 0) : void 0;
    const recursiveFieldStructImplem = makeRecursiveFieldStructImplem({
      transport,
      loadConfig,
      chainId: domain.chainId || 0,
      erc20SignaturesBlob,
      types: types2,
      filters,
      shouldUseV1Filters,
      shouldUseDiscardedFields,
      coinRefsTokensMap
    });
    const domainName = "EIP712Domain";
    await sendStructImplem(transport, {
      structType: "root",
      value: domainName
    });
    const domainTypeFields = types2[domainName];
    for (const { name, type } of domainTypeFields) {
      const domainFieldValue = domain[name];
      await recursiveFieldStructImplem(destructTypeFromString(type), domainFieldValue);
    }
    if (filters) {
      const { contractName, fields } = filters;
      const contractNameInfos = {
        displayName: contractName.label,
        filtersCount: fields.length,
        sig: contractName.signature
      };
      await sendFilteringInfo(transport, "contractName", loadConfig, contractNameInfos);
    }
    await sendStructImplem(transport, {
      structType: "root",
      value: primaryType
    });
    const primaryTypeFields = types2[primaryType];
    for (const { name, type } of primaryTypeFields) {
      const primaryTypeValue = message[name];
      await recursiveFieldStructImplem(destructTypeFromString(type), primaryTypeValue, name);
    }
    const paths = splitPath(path);
    const signatureBuffer = Buffer2.alloc(1 + paths.length * 4);
    signatureBuffer[0] = paths.length;
    paths.forEach((element, index) => {
      signatureBuffer.writeUInt32BE(element, 1 + 4 * index);
    });
    return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1, fullImplem ? APDU_FIELDS.P2_v0 : APDU_FIELDS.P2_full, signatureBuffer).then((response) => {
      const v = response[0];
      const r2 = response.subarray(1, 1 + 32).toString("hex");
      const s2 = response.subarray(1 + 32, 1 + 32 + 32).toString("hex");
      return {
        v,
        r: r2,
        s: s2
      };
    });
  };
  const signEIP712HashedMessage = (transport, path, domainSeparatorHex, hashStructMessageHex) => {
    const domainSeparator = hexBuffer(domainSeparatorHex);
    const hashStruct = hexBuffer(hashStructMessageHex);
    const paths = splitPath(path);
    const buffer2 = Buffer2.alloc(1 + paths.length * 4 + 32 + 32, 0);
    let offset = 0;
    buffer2[0] = paths.length;
    paths.forEach((element, index) => {
      buffer2.writeUInt32BE(element, 1 + 4 * index);
    });
    offset = 1 + 4 * paths.length;
    domainSeparator.copy(buffer2, offset);
    offset += 32;
    hashStruct.copy(buffer2, offset);
    return transport.send(224, 12, 0, 0, buffer2).then((response) => {
      const v = response[0];
      const r2 = response.subarray(1, 1 + 32).toString("hex");
      const s2 = response.subarray(1 + 32, 1 + 32 + 32).toString("hex");
      return {
        v,
        r: r2,
        s: s2
      };
    });
  };
  const version = "abi/5.8.0";
  const logger$4 = new Logger(version);
  const _constructorGuard = {};
  let ModifiersBytes = { calldata: true, memory: true, storage: true };
  let ModifiersNest = { calldata: true, memory: true };
  function checkModifier(type, name) {
    if (type === "bytes" || type === "string") {
      if (ModifiersBytes[name]) {
        return true;
      }
    } else if (type === "address") {
      if (name === "payable") {
        return true;
      }
    } else if (type.indexOf("[") >= 0 || type === "tuple") {
      if (ModifiersNest[name]) {
        return true;
      }
    }
    if (ModifiersBytes[name] || name === "payable") {
      logger$4.throwArgumentError("invalid modifier", "name", name);
    }
    return false;
  }
  function parseParamType(param, allowIndexed) {
    let originalParam = param;
    function throwError(i2) {
      logger$4.throwArgumentError(`unexpected character at position ${i2}`, "param", param);
    }
    param = param.replace(/\s/g, " ");
    function newNode(parent2) {
      let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
      if (allowIndexed) {
        node2.indexed = false;
      }
      return node2;
    }
    let parent = { type: "", name: "", state: { allowType: true } };
    let node = parent;
    for (let i2 = 0; i2 < param.length; i2++) {
      let c = param[i2];
      switch (c) {
        case "(":
          if (node.state.allowType && node.type === "") {
            node.type = "tuple";
          } else if (!node.state.allowParams) {
            throwError(i2);
          }
          node.state.allowType = false;
          node.type = verifyType(node.type);
          node.components = [newNode(node)];
          node = node.components[0];
          break;
        case ")":
          delete node.state;
          if (node.name === "indexed") {
            if (!allowIndexed) {
              throwError(i2);
            }
            node.indexed = true;
            node.name = "";
          }
          if (checkModifier(node.type, node.name)) {
            node.name = "";
          }
          node.type = verifyType(node.type);
          let child = node;
          node = node.parent;
          if (!node) {
            throwError(i2);
          }
          delete child.parent;
          node.state.allowParams = false;
          node.state.allowName = true;
          node.state.allowArray = true;
          break;
        case ",":
          delete node.state;
          if (node.name === "indexed") {
            if (!allowIndexed) {
              throwError(i2);
            }
            node.indexed = true;
            node.name = "";
          }
          if (checkModifier(node.type, node.name)) {
            node.name = "";
          }
          node.type = verifyType(node.type);
          let sibling = newNode(node.parent);
          node.parent.components.push(sibling);
          delete node.parent;
          node = sibling;
          break;
        case " ":
          if (node.state.allowType) {
            if (node.type !== "") {
              node.type = verifyType(node.type);
              delete node.state.allowType;
              node.state.allowName = true;
              node.state.allowParams = true;
            }
          }
          if (node.state.allowName) {
            if (node.name !== "") {
              if (node.name === "indexed") {
                if (!allowIndexed) {
                  throwError(i2);
                }
                if (node.indexed) {
                  throwError(i2);
                }
                node.indexed = true;
                node.name = "";
              } else if (checkModifier(node.type, node.name)) {
                node.name = "";
              } else {
                node.state.allowName = false;
              }
            }
          }
          break;
        case "[":
          if (!node.state.allowArray) {
            throwError(i2);
          }
          node.type += c;
          node.state.allowArray = false;
          node.state.allowName = false;
          node.state.readArray = true;
          break;
        case "]":
          if (!node.state.readArray) {
            throwError(i2);
          }
          node.type += c;
          node.state.readArray = false;
          node.state.allowArray = true;
          node.state.allowName = true;
          break;
        default:
          if (node.state.allowType) {
            node.type += c;
            node.state.allowParams = true;
            node.state.allowArray = true;
          } else if (node.state.allowName) {
            node.name += c;
            delete node.state.allowArray;
          } else if (node.state.readArray) {
            node.type += c;
          } else {
            throwError(i2);
          }
      }
    }
    if (node.parent) {
      logger$4.throwArgumentError("unexpected eof", "param", param);
    }
    delete parent.state;
    if (node.name === "indexed") {
      if (!allowIndexed) {
        throwError(originalParam.length - 7);
      }
      if (node.indexed) {
        throwError(originalParam.length - 7);
      }
      node.indexed = true;
      node.name = "";
    } else if (checkModifier(node.type, node.name)) {
      node.name = "";
    }
    parent.type = verifyType(parent.type);
    return parent;
  }
  function populate(object, params) {
    for (let key2 in params) {
      defineReadOnly(object, key2, params[key2]);
    }
  }
  const FormatTypes = Object.freeze({
    // Bare formatting, as is needed for computing a sighash of an event or function
    sighash: "sighash",
    // Human-Readable with Minimal spacing and without names (compact human-readable)
    minimal: "minimal",
    // Human-Readable with nice spacing, including all names
    full: "full",
    // JSON-format a la Solidity
    json: "json"
  });
  const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
  class ParamType {
    constructor(constructorGuard, params) {
      if (constructorGuard !== _constructorGuard) {
        logger$4.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new ParamType()"
        });
      }
      populate(this, params);
      let match = this.type.match(paramTypeArray);
      if (match) {
        populate(this, {
          arrayLength: parseInt(match[2] || "-1"),
          arrayChildren: ParamType.fromObject({
            type: match[1],
            components: this.components
          }),
          baseType: "array"
        });
      } else {
        populate(this, {
          arrayLength: null,
          arrayChildren: null,
          baseType: this.components != null ? "tuple" : this.type
        });
      }
      this._isParamType = true;
      Object.freeze(this);
    }
    // Format the parameter fragment
    //   - sighash: "(uint256,address)"
    //   - minimal: "tuple(uint256,address) indexed"
    //   - full:    "tuple(uint256 foo, address bar) indexed baz"
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        let result2 = {
          type: this.baseType === "tuple" ? "tuple" : this.type,
          name: this.name || void 0
        };
        if (typeof this.indexed === "boolean") {
          result2.indexed = this.indexed;
        }
        if (this.components) {
          result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
        }
        return JSON.stringify(result2);
      }
      let result = "";
      if (this.baseType === "array") {
        result += this.arrayChildren.format(format);
        result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
      } else {
        if (this.baseType === "tuple") {
          if (format !== FormatTypes.sighash) {
            result += this.type;
          }
          result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
        } else {
          result += this.type;
        }
      }
      if (format !== FormatTypes.sighash) {
        if (this.indexed === true) {
          result += " indexed";
        }
        if (format === FormatTypes.full && this.name) {
          result += " " + this.name;
        }
      }
      return result;
    }
    static from(value, allowIndexed) {
      if (typeof value === "string") {
        return ParamType.fromString(value, allowIndexed);
      }
      return ParamType.fromObject(value);
    }
    static fromObject(value) {
      if (ParamType.isParamType(value)) {
        return value;
      }
      return new ParamType(_constructorGuard, {
        name: value.name || null,
        type: verifyType(value.type),
        indexed: value.indexed == null ? null : !!value.indexed,
        components: value.components ? value.components.map(ParamType.fromObject) : null
      });
    }
    static fromString(value, allowIndexed) {
      function ParamTypify(node) {
        return ParamType.fromObject({
          name: node.name,
          type: node.type,
          indexed: node.indexed,
          components: node.components
        });
      }
      return ParamTypify(parseParamType(value, !!allowIndexed));
    }
    static isParamType(value) {
      return !!(value != null && value._isParamType);
    }
  }
  function parseParams(value, allowIndex) {
    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
  }
  class Fragment {
    constructor(constructorGuard, params) {
      if (constructorGuard !== _constructorGuard) {
        logger$4.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new Fragment()"
        });
      }
      populate(this, params);
      this._isFragment = true;
      Object.freeze(this);
    }
    static from(value) {
      if (Fragment.isFragment(value)) {
        return value;
      }
      if (typeof value === "string") {
        return Fragment.fromString(value);
      }
      return Fragment.fromObject(value);
    }
    static fromObject(value) {
      if (Fragment.isFragment(value)) {
        return value;
      }
      switch (value.type) {
        case "function":
          return FunctionFragment.fromObject(value);
        case "event":
          return EventFragment.fromObject(value);
        case "constructor":
          return ConstructorFragment.fromObject(value);
        case "error":
          return ErrorFragment.fromObject(value);
        case "fallback":
        case "receive":
          return null;
      }
      return logger$4.throwArgumentError("invalid fragment object", "value", value);
    }
    static fromString(value) {
      value = value.replace(/\s/g, " ");
      value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
      value = value.trim();
      if (value.split(" ")[0] === "event") {
        return EventFragment.fromString(value.substring(5).trim());
      } else if (value.split(" ")[0] === "function") {
        return FunctionFragment.fromString(value.substring(8).trim());
      } else if (value.split("(")[0].trim() === "constructor") {
        return ConstructorFragment.fromString(value.trim());
      } else if (value.split(" ")[0] === "error") {
        return ErrorFragment.fromString(value.substring(5).trim());
      }
      return logger$4.throwArgumentError("unsupported fragment", "value", value);
    }
    static isFragment(value) {
      return !!(value && value._isFragment);
    }
  }
  class EventFragment extends Fragment {
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        return JSON.stringify({
          type: "event",
          anonymous: this.anonymous,
          name: this.name,
          inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
        });
      }
      let result = "";
      if (format !== FormatTypes.sighash) {
        result += "event ";
      }
      result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
      if (format !== FormatTypes.sighash) {
        if (this.anonymous) {
          result += "anonymous ";
        }
      }
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return EventFragment.fromString(value);
      }
      return EventFragment.fromObject(value);
    }
    static fromObject(value) {
      if (EventFragment.isEventFragment(value)) {
        return value;
      }
      if (value.type !== "event") {
        logger$4.throwArgumentError("invalid event object", "value", value);
      }
      const params = {
        name: verifyIdentifier(value.name),
        anonymous: value.anonymous,
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
        type: "event"
      };
      return new EventFragment(_constructorGuard, params);
    }
    static fromString(value) {
      let match = value.match(regexParen);
      if (!match) {
        logger$4.throwArgumentError("invalid event string", "value", value);
      }
      let anonymous = false;
      match[3].split(" ").forEach((modifier) => {
        switch (modifier.trim()) {
          case "anonymous":
            anonymous = true;
            break;
          case "":
            break;
          default:
            logger$4.warn("unknown modifier: " + modifier);
        }
      });
      return EventFragment.fromObject({
        name: match[1].trim(),
        anonymous,
        inputs: parseParams(match[2], true),
        type: "event"
      });
    }
    static isEventFragment(value) {
      return value && value._isFragment && value.type === "event";
    }
  }
  function parseGas(value, params) {
    params.gas = null;
    let comps = value.split("@");
    if (comps.length !== 1) {
      if (comps.length > 2) {
        logger$4.throwArgumentError("invalid human-readable ABI signature", "value", value);
      }
      if (!comps[1].match(/^[0-9]+$/)) {
        logger$4.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
      }
      params.gas = BigNumber.from(comps[1]);
      return comps[0];
    }
    return value;
  }
  function parseModifiers(value, params) {
    params.constant = false;
    params.payable = false;
    params.stateMutability = "nonpayable";
    value.split(" ").forEach((modifier) => {
      switch (modifier.trim()) {
        case "constant":
          params.constant = true;
          break;
        case "payable":
          params.payable = true;
          params.stateMutability = "payable";
          break;
        case "nonpayable":
          params.payable = false;
          params.stateMutability = "nonpayable";
          break;
        case "pure":
          params.constant = true;
          params.stateMutability = "pure";
          break;
        case "view":
          params.constant = true;
          params.stateMutability = "view";
          break;
        case "external":
        case "public":
        case "":
          break;
        default:
          console.log("unknown modifier: " + modifier);
      }
    });
  }
  function verifyState(value) {
    let result = {
      constant: false,
      payable: true,
      stateMutability: "payable"
    };
    if (value.stateMutability != null) {
      result.stateMutability = value.stateMutability;
      result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
      if (value.constant != null) {
        if (!!value.constant !== result.constant) {
          logger$4.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
        }
      }
      result.payable = result.stateMutability === "payable";
      if (value.payable != null) {
        if (!!value.payable !== result.payable) {
          logger$4.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
        }
      }
    } else if (value.payable != null) {
      result.payable = !!value.payable;
      if (value.constant == null && !result.payable && value.type !== "constructor") {
        logger$4.throwArgumentError("unable to determine stateMutability", "value", value);
      }
      result.constant = !!value.constant;
      if (result.constant) {
        result.stateMutability = "view";
      } else {
        result.stateMutability = result.payable ? "payable" : "nonpayable";
      }
      if (result.payable && result.constant) {
        logger$4.throwArgumentError("cannot have constant payable function", "value", value);
      }
    } else if (value.constant != null) {
      result.constant = !!value.constant;
      result.payable = !result.constant;
      result.stateMutability = result.constant ? "view" : "payable";
    } else if (value.type !== "constructor") {
      logger$4.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    return result;
  }
  class ConstructorFragment extends Fragment {
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        return JSON.stringify({
          type: "constructor",
          stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
          payable: this.payable,
          gas: this.gas ? this.gas.toNumber() : void 0,
          inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
        });
      }
      if (format === FormatTypes.sighash) {
        logger$4.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "format(sighash)"
        });
      }
      let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
      if (this.stateMutability && this.stateMutability !== "nonpayable") {
        result += this.stateMutability + " ";
      }
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return ConstructorFragment.fromString(value);
      }
      return ConstructorFragment.fromObject(value);
    }
    static fromObject(value) {
      if (ConstructorFragment.isConstructorFragment(value)) {
        return value;
      }
      if (value.type !== "constructor") {
        logger$4.throwArgumentError("invalid constructor object", "value", value);
      }
      let state = verifyState(value);
      if (state.constant) {
        logger$4.throwArgumentError("constructor cannot be constant", "value", value);
      }
      const params = {
        name: null,
        type: value.type,
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
        payable: state.payable,
        stateMutability: state.stateMutability,
        gas: value.gas ? BigNumber.from(value.gas) : null
      };
      return new ConstructorFragment(_constructorGuard, params);
    }
    static fromString(value) {
      let params = { type: "constructor" };
      value = parseGas(value, params);
      let parens = value.match(regexParen);
      if (!parens || parens[1].trim() !== "constructor") {
        logger$4.throwArgumentError("invalid constructor string", "value", value);
      }
      params.inputs = parseParams(parens[2].trim(), false);
      parseModifiers(parens[3].trim(), params);
      return ConstructorFragment.fromObject(params);
    }
    static isConstructorFragment(value) {
      return value && value._isFragment && value.type === "constructor";
    }
  }
  class FunctionFragment extends ConstructorFragment {
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        return JSON.stringify({
          type: "function",
          name: this.name,
          constant: this.constant,
          stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
          payable: this.payable,
          gas: this.gas ? this.gas.toNumber() : void 0,
          inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
          outputs: this.outputs.map((output2) => JSON.parse(output2.format(format)))
        });
      }
      let result = "";
      if (format !== FormatTypes.sighash) {
        result += "function ";
      }
      result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
      if (format !== FormatTypes.sighash) {
        if (this.stateMutability) {
          if (this.stateMutability !== "nonpayable") {
            result += this.stateMutability + " ";
          }
        } else if (this.constant) {
          result += "view ";
        }
        if (this.outputs && this.outputs.length) {
          result += "returns (" + this.outputs.map((output2) => output2.format(format)).join(", ") + ") ";
        }
        if (this.gas != null) {
          result += "@" + this.gas.toString() + " ";
        }
      }
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return FunctionFragment.fromString(value);
      }
      return FunctionFragment.fromObject(value);
    }
    static fromObject(value) {
      if (FunctionFragment.isFunctionFragment(value)) {
        return value;
      }
      if (value.type !== "function") {
        logger$4.throwArgumentError("invalid function object", "value", value);
      }
      let state = verifyState(value);
      const params = {
        type: value.type,
        name: verifyIdentifier(value.name),
        constant: state.constant,
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
        outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
        payable: state.payable,
        stateMutability: state.stateMutability,
        gas: value.gas ? BigNumber.from(value.gas) : null
      };
      return new FunctionFragment(_constructorGuard, params);
    }
    static fromString(value) {
      let params = { type: "function" };
      value = parseGas(value, params);
      let comps = value.split(" returns ");
      if (comps.length > 2) {
        logger$4.throwArgumentError("invalid function string", "value", value);
      }
      let parens = comps[0].match(regexParen);
      if (!parens) {
        logger$4.throwArgumentError("invalid function signature", "value", value);
      }
      params.name = parens[1].trim();
      if (params.name) {
        verifyIdentifier(params.name);
      }
      params.inputs = parseParams(parens[2], false);
      parseModifiers(parens[3].trim(), params);
      if (comps.length > 1) {
        let returns = comps[1].match(regexParen);
        if (returns[1].trim() != "" || returns[3].trim() != "") {
          logger$4.throwArgumentError("unexpected tokens", "value", value);
        }
        params.outputs = parseParams(returns[2], false);
      } else {
        params.outputs = [];
      }
      return FunctionFragment.fromObject(params);
    }
    static isFunctionFragment(value) {
      return value && value._isFragment && value.type === "function";
    }
  }
  function checkForbidden(fragment) {
    const sig = fragment.format();
    if (sig === "Error(string)" || sig === "Panic(uint256)") {
      logger$4.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
    }
    return fragment;
  }
  class ErrorFragment extends Fragment {
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        return JSON.stringify({
          type: "error",
          name: this.name,
          inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
        });
      }
      let result = "";
      if (format !== FormatTypes.sighash) {
        result += "error ";
      }
      result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return ErrorFragment.fromString(value);
      }
      return ErrorFragment.fromObject(value);
    }
    static fromObject(value) {
      if (ErrorFragment.isErrorFragment(value)) {
        return value;
      }
      if (value.type !== "error") {
        logger$4.throwArgumentError("invalid error object", "value", value);
      }
      const params = {
        type: value.type,
        name: verifyIdentifier(value.name),
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
      };
      return checkForbidden(new ErrorFragment(_constructorGuard, params));
    }
    static fromString(value) {
      let params = { type: "error" };
      let parens = value.match(regexParen);
      if (!parens) {
        logger$4.throwArgumentError("invalid error signature", "value", value);
      }
      params.name = parens[1].trim();
      if (params.name) {
        verifyIdentifier(params.name);
      }
      params.inputs = parseParams(parens[2], false);
      return checkForbidden(ErrorFragment.fromObject(params));
    }
    static isErrorFragment(value) {
      return value && value._isFragment && value.type === "error";
    }
  }
  function verifyType(type) {
    if (type.match(/^uint($|[^1-9])/)) {
      type = "uint256" + type.substring(4);
    } else if (type.match(/^int($|[^1-9])/)) {
      type = "int256" + type.substring(3);
    }
    return type;
  }
  const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
  function verifyIdentifier(value) {
    if (!value || !value.match(regexIdentifier)) {
      logger$4.throwArgumentError(`invalid identifier "${value}"`, "value", value);
    }
    return value;
  }
  const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  function splitNesting(value) {
    value = value.trim();
    let result = [];
    let accum = "";
    let depth = 0;
    for (let offset = 0; offset < value.length; offset++) {
      let c = value[offset];
      if (c === "," && depth === 0) {
        result.push(accum);
        accum = "";
      } else {
        accum += c;
        if (c === "(") {
          depth++;
        } else if (c === ")") {
          depth--;
          if (depth === -1) {
            logger$4.throwArgumentError("unbalanced parenthesis", "value", value);
          }
        }
      }
    }
    if (accum) {
      result.push(accum);
    }
    return result;
  }
  const logger$3 = new Logger(version);
  class Coder {
    constructor(name, type, localName, dynamic) {
      this.name = name;
      this.type = type;
      this.localName = localName;
      this.dynamic = dynamic;
    }
    _throwError(message, value) {
      logger$3.throwArgumentError(message, this.localName, value);
    }
  }
  class Writer {
    constructor(wordSize) {
      defineReadOnly(this, "wordSize", wordSize || 32);
      this._data = [];
      this._dataLength = 0;
      this._padding = new Uint8Array(wordSize);
    }
    get data() {
      return hexConcat(this._data);
    }
    get length() {
      return this._dataLength;
    }
    _writeData(data) {
      this._data.push(data);
      this._dataLength += data.length;
      return data.length;
    }
    appendWriter(writer) {
      return this._writeData(concat(writer._data));
    }
    // Arrayish items; padded on the right to wordSize
    writeBytes(value) {
      let bytes2 = arrayify(value);
      const paddingOffset = bytes2.length % this.wordSize;
      if (paddingOffset) {
        bytes2 = concat([bytes2, this._padding.slice(paddingOffset)]);
      }
      return this._writeData(bytes2);
    }
    _getValue(value) {
      let bytes2 = arrayify(BigNumber.from(value));
      if (bytes2.length > this.wordSize) {
        logger$3.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
          length: this.wordSize,
          offset: bytes2.length
        });
      }
      if (bytes2.length % this.wordSize) {
        bytes2 = concat([this._padding.slice(bytes2.length % this.wordSize), bytes2]);
      }
      return bytes2;
    }
    // BigNumberish items; padded on the left to wordSize
    writeValue(value) {
      return this._writeData(this._getValue(value));
    }
    writeUpdatableValue() {
      const offset = this._data.length;
      this._data.push(this._padding);
      this._dataLength += this.wordSize;
      return (value) => {
        this._data[offset] = this._getValue(value);
      };
    }
  }
  class Reader {
    constructor(data, wordSize, coerceFunc, allowLoose) {
      defineReadOnly(this, "_data", arrayify(data));
      defineReadOnly(this, "wordSize", wordSize || 32);
      defineReadOnly(this, "_coerceFunc", coerceFunc);
      defineReadOnly(this, "allowLoose", allowLoose);
      this._offset = 0;
    }
    get data() {
      return hexlify(this._data);
    }
    get consumed() {
      return this._offset;
    }
    // The default Coerce function
    static coerce(name, value) {
      let match = name.match("^u?int([0-9]+)$");
      if (match && parseInt(match[1]) <= 48) {
        value = value.toNumber();
      }
      return value;
    }
    coerce(name, value) {
      if (this._coerceFunc) {
        return this._coerceFunc(name, value);
      }
      return Reader.coerce(name, value);
    }
    _peekBytes(offset, length, loose) {
      let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
      if (this._offset + alignedLength > this._data.length) {
        if (this.allowLoose && loose && this._offset + length <= this._data.length) {
          alignedLength = length;
        } else {
          logger$3.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
            length: this._data.length,
            offset: this._offset + alignedLength
          });
        }
      }
      return this._data.slice(this._offset, this._offset + alignedLength);
    }
    subReader(offset) {
      return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
    }
    readBytes(length, loose) {
      let bytes2 = this._peekBytes(0, length, !!loose);
      this._offset += bytes2.length;
      return bytes2.slice(0, length);
    }
    readValue() {
      return BigNumber.from(this.readBytes(this.wordSize));
    }
  }
  class AddressCoder extends Coder {
    constructor(localName) {
      super("address", "address", localName, false);
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000";
    }
    encode(writer, value) {
      try {
        value = getAddress(value);
      } catch (error2) {
        this._throwError(error2.message, value);
      }
      return writer.writeValue(value);
    }
    decode(reader) {
      return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
    }
  }
  class AnonymousCoder extends Coder {
    constructor(coder) {
      super(coder.name, coder.type, void 0, coder.dynamic);
      this.coder = coder;
    }
    defaultValue() {
      return this.coder.defaultValue();
    }
    encode(writer, value) {
      return this.coder.encode(writer, value);
    }
    decode(reader) {
      return this.coder.decode(reader);
    }
  }
  const logger$2 = new Logger(version);
  function pack(writer, coders, values) {
    let arrayValues = null;
    if (Array.isArray(values)) {
      arrayValues = values;
    } else if (values && typeof values === "object") {
      let unique = {};
      arrayValues = coders.map((coder) => {
        const name = coder.localName;
        if (!name) {
          logger$2.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
            argument: "values",
            coder,
            value: values
          });
        }
        if (unique[name]) {
          logger$2.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
            argument: "values",
            coder,
            value: values
          });
        }
        unique[name] = true;
        return values[name];
      });
    } else {
      logger$2.throwArgumentError("invalid tuple value", "tuple", values);
    }
    if (coders.length !== arrayValues.length) {
      logger$2.throwArgumentError("types/value length mismatch", "tuple", values);
    }
    let staticWriter = new Writer(writer.wordSize);
    let dynamicWriter = new Writer(writer.wordSize);
    let updateFuncs = [];
    coders.forEach((coder, index) => {
      let value = arrayValues[index];
      if (coder.dynamic) {
        let dynamicOffset = dynamicWriter.length;
        coder.encode(dynamicWriter, value);
        let updateFunc = staticWriter.writeUpdatableValue();
        updateFuncs.push((baseOffset) => {
          updateFunc(baseOffset + dynamicOffset);
        });
      } else {
        coder.encode(staticWriter, value);
      }
    });
    updateFuncs.forEach((func) => {
      func(staticWriter.length);
    });
    let length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
  }
  function unpack(reader, coders) {
    let values = [];
    let baseReader = reader.subReader(0);
    coders.forEach((coder) => {
      let value = null;
      if (coder.dynamic) {
        let offset = reader.readValue();
        let offsetReader = baseReader.subReader(offset.toNumber());
        try {
          value = coder.decode(offsetReader);
        } catch (error2) {
          if (error2.code === Logger.errors.BUFFER_OVERRUN) {
            throw error2;
          }
          value = error2;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      } else {
        try {
          value = coder.decode(reader);
        } catch (error2) {
          if (error2.code === Logger.errors.BUFFER_OVERRUN) {
            throw error2;
          }
          value = error2;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      }
      if (value != void 0) {
        values.push(value);
      }
    });
    const uniqueNames = coders.reduce((accum, coder) => {
      const name = coder.localName;
      if (name) {
        if (!accum[name]) {
          accum[name] = 0;
        }
        accum[name]++;
      }
      return accum;
    }, {});
    coders.forEach((coder, index) => {
      let name = coder.localName;
      if (!name || uniqueNames[name] !== 1) {
        return;
      }
      if (name === "length") {
        name = "_length";
      }
      if (values[name] != null) {
        return;
      }
      const value = values[index];
      if (value instanceof Error) {
        Object.defineProperty(values, name, {
          enumerable: true,
          get: () => {
            throw value;
          }
        });
      } else {
        values[name] = value;
      }
    });
    for (let i2 = 0; i2 < values.length; i2++) {
      const value = values[i2];
      if (value instanceof Error) {
        Object.defineProperty(values, i2, {
          enumerable: true,
          get: () => {
            throw value;
          }
        });
      }
    }
    return Object.freeze(values);
  }
  class ArrayCoder extends Coder {
    constructor(coder, length, localName) {
      const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
      const dynamic = length === -1 || coder.dynamic;
      super("array", type, localName, dynamic);
      this.coder = coder;
      this.length = length;
    }
    defaultValue() {
      const defaultChild = this.coder.defaultValue();
      const result = [];
      for (let i2 = 0; i2 < this.length; i2++) {
        result.push(defaultChild);
      }
      return result;
    }
    encode(writer, value) {
      if (!Array.isArray(value)) {
        this._throwError("expected array value", value);
      }
      let count = this.length;
      if (count === -1) {
        count = value.length;
        writer.writeValue(value.length);
      }
      logger$2.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
      let coders = [];
      for (let i2 = 0; i2 < value.length; i2++) {
        coders.push(this.coder);
      }
      return pack(writer, coders, value);
    }
    decode(reader) {
      let count = this.length;
      if (count === -1) {
        count = reader.readValue().toNumber();
        if (count * 32 > reader._data.length) {
          logger$2.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
            length: reader._data.length,
            count
          });
        }
      }
      let coders = [];
      for (let i2 = 0; i2 < count; i2++) {
        coders.push(new AnonymousCoder(this.coder));
      }
      return reader.coerce(this.name, unpack(reader, coders));
    }
  }
  class BooleanCoder extends Coder {
    constructor(localName) {
      super("bool", "bool", localName, false);
    }
    defaultValue() {
      return false;
    }
    encode(writer, value) {
      return writer.writeValue(value ? 1 : 0);
    }
    decode(reader) {
      return reader.coerce(this.type, !reader.readValue().isZero());
    }
  }
  class DynamicBytesCoder extends Coder {
    constructor(type, localName) {
      super(type, type, localName, true);
    }
    defaultValue() {
      return "0x";
    }
    encode(writer, value) {
      value = arrayify(value);
      let length = writer.writeValue(value.length);
      length += writer.writeBytes(value);
      return length;
    }
    decode(reader) {
      return reader.readBytes(reader.readValue().toNumber(), true);
    }
  }
  class BytesCoder extends DynamicBytesCoder {
    constructor(localName) {
      super("bytes", localName);
    }
    decode(reader) {
      return reader.coerce(this.name, hexlify(super.decode(reader)));
    }
  }
  class FixedBytesCoder extends Coder {
    constructor(size2, localName) {
      let name = "bytes" + String(size2);
      super(name, name, localName, false);
      this.size = size2;
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
    }
    encode(writer, value) {
      let data = arrayify(value);
      if (data.length !== this.size) {
        this._throwError("incorrect data length", value);
      }
      return writer.writeBytes(data);
    }
    decode(reader) {
      return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
    }
  }
  class NullCoder extends Coder {
    constructor(localName) {
      super("null", "", localName, false);
    }
    defaultValue() {
      return null;
    }
    encode(writer, value) {
      if (value != null) {
        this._throwError("not null", value);
      }
      return writer.writeBytes([]);
    }
    decode(reader) {
      reader.readBytes(0);
      return reader.coerce(this.name, null);
    }
  }
  class NumberCoder extends Coder {
    constructor(size2, signed, localName) {
      const name = (signed ? "int" : "uint") + size2 * 8;
      super(name, name, localName, false);
      this.size = size2;
      this.signed = signed;
    }
    defaultValue() {
      return 0;
    }
    encode(writer, value) {
      let v = BigNumber.from(value);
      let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
      if (this.signed) {
        let bounds = maxUintValue.mask(this.size * 8 - 1);
        if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {
          this._throwError("value out-of-bounds", value);
        }
      } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
        this._throwError("value out-of-bounds", value);
      }
      v = v.toTwos(this.size * 8).mask(this.size * 8);
      if (this.signed) {
        v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
      }
      return writer.writeValue(v);
    }
    decode(reader) {
      let value = reader.readValue().mask(this.size * 8);
      if (this.signed) {
        value = value.fromTwos(this.size * 8);
      }
      return reader.coerce(this.name, value);
    }
  }
  class StringCoder extends DynamicBytesCoder {
    constructor(localName) {
      super("string", localName);
    }
    defaultValue() {
      return "";
    }
    encode(writer, value) {
      return super.encode(writer, toUtf8Bytes(value));
    }
    decode(reader) {
      return toUtf8String(super.decode(reader));
    }
  }
  class TupleCoder extends Coder {
    constructor(coders, localName) {
      let dynamic = false;
      const types2 = [];
      coders.forEach((coder) => {
        if (coder.dynamic) {
          dynamic = true;
        }
        types2.push(coder.type);
      });
      const type = "tuple(" + types2.join(",") + ")";
      super("tuple", type, localName, dynamic);
      this.coders = coders;
    }
    defaultValue() {
      const values = [];
      this.coders.forEach((coder) => {
        values.push(coder.defaultValue());
      });
      const uniqueNames = this.coders.reduce((accum, coder) => {
        const name = coder.localName;
        if (name) {
          if (!accum[name]) {
            accum[name] = 0;
          }
          accum[name]++;
        }
        return accum;
      }, {});
      this.coders.forEach((coder, index) => {
        let name = coder.localName;
        if (!name || uniqueNames[name] !== 1) {
          return;
        }
        if (name === "length") {
          name = "_length";
        }
        if (values[name] != null) {
          return;
        }
        values[name] = values[index];
      });
      return Object.freeze(values);
    }
    encode(writer, value) {
      return pack(writer, this.coders, value);
    }
    decode(reader) {
      return reader.coerce(this.name, unpack(reader, this.coders));
    }
  }
  const logger$1 = new Logger(version);
  const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
  const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
  class AbiCoder {
    constructor(coerceFunc) {
      defineReadOnly(this, "coerceFunc", coerceFunc || null);
    }
    _getCoder(param) {
      switch (param.baseType) {
        case "address":
          return new AddressCoder(param.name);
        case "bool":
          return new BooleanCoder(param.name);
        case "string":
          return new StringCoder(param.name);
        case "bytes":
          return new BytesCoder(param.name);
        case "array":
          return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
        case "tuple":
          return new TupleCoder((param.components || []).map((component) => {
            return this._getCoder(component);
          }), param.name);
        case "":
          return new NullCoder(param.name);
      }
      let match = param.type.match(paramTypeNumber);
      if (match) {
        let size2 = parseInt(match[2] || "256");
        if (size2 === 0 || size2 > 256 || size2 % 8 !== 0) {
          logger$1.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
        }
        return new NumberCoder(size2 / 8, match[1] === "int", param.name);
      }
      match = param.type.match(paramTypeBytes);
      if (match) {
        let size2 = parseInt(match[1]);
        if (size2 === 0 || size2 > 32) {
          logger$1.throwArgumentError("invalid bytes length", "param", param);
        }
        return new FixedBytesCoder(size2, param.name);
      }
      return logger$1.throwArgumentError("invalid type", "type", param.type);
    }
    _getWordSize() {
      return 32;
    }
    _getReader(data, allowLoose) {
      return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
    }
    _getWriter() {
      return new Writer(this._getWordSize());
    }
    getDefaultValue(types2) {
      const coders = types2.map((type) => this._getCoder(ParamType.from(type)));
      const coder = new TupleCoder(coders, "_");
      return coder.defaultValue();
    }
    encode(types2, values) {
      if (types2.length !== values.length) {
        logger$1.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
          count: { types: types2.length, values: values.length },
          value: { types: types2, values }
        });
      }
      const coders = types2.map((type) => this._getCoder(ParamType.from(type)));
      const coder = new TupleCoder(coders, "_");
      const writer = this._getWriter();
      coder.encode(writer, values);
      return writer.data;
    }
    decode(types2, data, loose) {
      const coders = types2.map((type) => this._getCoder(ParamType.from(type)));
      const coder = new TupleCoder(coders, "_");
      return coder.decode(this._getReader(arrayify(data), loose));
    }
  }
  const defaultAbiCoder = new AbiCoder();
  const logger = new Logger(version);
  class LogDescription extends Description {
  }
  class TransactionDescription extends Description {
  }
  class ErrorDescription extends Description {
  }
  class Indexed extends Description {
    static isIndexed(value) {
      return !!(value && value._isIndexed);
    }
  }
  const BuiltinErrors = {
    "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
    "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
  };
  function wrapAccessError(property, error2) {
    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
    wrap.error = error2;
    return wrap;
  }
  class Interface {
    constructor(fragments) {
      let abi2 = [];
      if (typeof fragments === "string") {
        abi2 = JSON.parse(fragments);
      } else {
        abi2 = fragments;
      }
      defineReadOnly(this, "fragments", abi2.map((fragment) => {
        return Fragment.from(fragment);
      }).filter((fragment) => fragment != null));
      defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
      defineReadOnly(this, "functions", {});
      defineReadOnly(this, "errors", {});
      defineReadOnly(this, "events", {});
      defineReadOnly(this, "structs", {});
      this.fragments.forEach((fragment) => {
        let bucket = null;
        switch (fragment.type) {
          case "constructor":
            if (this.deploy) {
              logger.warn("duplicate definition - constructor");
              return;
            }
            defineReadOnly(this, "deploy", fragment);
            return;
          case "function":
            bucket = this.functions;
            break;
          case "event":
            bucket = this.events;
            break;
          case "error":
            bucket = this.errors;
            break;
          default:
            return;
        }
        let signature2 = fragment.format();
        if (bucket[signature2]) {
          logger.warn("duplicate definition - " + signature2);
          return;
        }
        bucket[signature2] = fragment;
      });
      if (!this.deploy) {
        defineReadOnly(this, "deploy", ConstructorFragment.from({
          payable: false,
          type: "constructor"
        }));
      }
      defineReadOnly(this, "_isInterface", true);
    }
    format(format) {
      if (!format) {
        format = FormatTypes.full;
      }
      if (format === FormatTypes.sighash) {
        logger.throwArgumentError("interface does not support formatting sighash", "format", format);
      }
      const abi2 = this.fragments.map((fragment) => fragment.format(format));
      if (format === FormatTypes.json) {
        return JSON.stringify(abi2.map((j) => JSON.parse(j)));
      }
      return abi2;
    }
    // Sub-classes can override these to handle other blockchains
    static getAbiCoder() {
      return defaultAbiCoder;
    }
    static getAddress(address2) {
      return getAddress(address2);
    }
    static getSighash(fragment) {
      return hexDataSlice(id(fragment.format()), 0, 4);
    }
    static getEventTopic(eventFragment) {
      return id(eventFragment.format());
    }
    // Find a function definition by any means necessary (unless it is ambiguous)
    getFunction(nameOrSignatureOrSighash) {
      if (isHexString$1(nameOrSignatureOrSighash)) {
        for (const name in this.functions) {
          if (nameOrSignatureOrSighash === this.getSighash(name)) {
            return this.functions[name];
          }
        }
        logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
      }
      if (nameOrSignatureOrSighash.indexOf("(") === -1) {
        const name = nameOrSignatureOrSighash.trim();
        const matching = Object.keys(this.functions).filter((f2) => f2.split(
          "("
          /* fix:) */
        )[0] === name);
        if (matching.length === 0) {
          logger.throwArgumentError("no matching function", "name", name);
        } else if (matching.length > 1) {
          logger.throwArgumentError("multiple matching functions", "name", name);
        }
        return this.functions[matching[0]];
      }
      const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
      if (!result) {
        logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
      }
      return result;
    }
    // Find an event definition by any means necessary (unless it is ambiguous)
    getEvent(nameOrSignatureOrTopic) {
      if (isHexString$1(nameOrSignatureOrTopic)) {
        const topichash = nameOrSignatureOrTopic.toLowerCase();
        for (const name in this.events) {
          if (topichash === this.getEventTopic(name)) {
            return this.events[name];
          }
        }
        logger.throwArgumentError("no matching event", "topichash", topichash);
      }
      if (nameOrSignatureOrTopic.indexOf("(") === -1) {
        const name = nameOrSignatureOrTopic.trim();
        const matching = Object.keys(this.events).filter((f2) => f2.split(
          "("
          /* fix:) */
        )[0] === name);
        if (matching.length === 0) {
          logger.throwArgumentError("no matching event", "name", name);
        } else if (matching.length > 1) {
          logger.throwArgumentError("multiple matching events", "name", name);
        }
        return this.events[matching[0]];
      }
      const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
      if (!result) {
        logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
      }
      return result;
    }
    // Find a function definition by any means necessary (unless it is ambiguous)
    getError(nameOrSignatureOrSighash) {
      if (isHexString$1(nameOrSignatureOrSighash)) {
        const getSighash = getStatic(this.constructor, "getSighash");
        for (const name in this.errors) {
          const error2 = this.errors[name];
          if (nameOrSignatureOrSighash === getSighash(error2)) {
            return this.errors[name];
          }
        }
        logger.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
      }
      if (nameOrSignatureOrSighash.indexOf("(") === -1) {
        const name = nameOrSignatureOrSighash.trim();
        const matching = Object.keys(this.errors).filter((f2) => f2.split(
          "("
          /* fix:) */
        )[0] === name);
        if (matching.length === 0) {
          logger.throwArgumentError("no matching error", "name", name);
        } else if (matching.length > 1) {
          logger.throwArgumentError("multiple matching errors", "name", name);
        }
        return this.errors[matching[0]];
      }
      const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
      if (!result) {
        logger.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
      }
      return result;
    }
    // Get the sighash (the bytes4 selector) used by Solidity to identify a function
    getSighash(fragment) {
      if (typeof fragment === "string") {
        try {
          fragment = this.getFunction(fragment);
        } catch (error2) {
          try {
            fragment = this.getError(fragment);
          } catch (_) {
            throw error2;
          }
        }
      }
      return getStatic(this.constructor, "getSighash")(fragment);
    }
    // Get the topic (the bytes32 hash) used by Solidity to identify an event
    getEventTopic(eventFragment) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      return getStatic(this.constructor, "getEventTopic")(eventFragment);
    }
    _decodeParams(params, data) {
      return this._abiCoder.decode(params, data);
    }
    _encodeParams(params, values) {
      return this._abiCoder.encode(params, values);
    }
    encodeDeploy(values) {
      return this._encodeParams(this.deploy.inputs, values || []);
    }
    decodeErrorResult(fragment, data) {
      if (typeof fragment === "string") {
        fragment = this.getError(fragment);
      }
      const bytes2 = arrayify(data);
      if (hexlify(bytes2.slice(0, 4)) !== this.getSighash(fragment)) {
        logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes2));
      }
      return this._decodeParams(fragment.inputs, bytes2.slice(4));
    }
    encodeErrorResult(fragment, values) {
      if (typeof fragment === "string") {
        fragment = this.getError(fragment);
      }
      return hexlify(concat([
        this.getSighash(fragment),
        this._encodeParams(fragment.inputs, values || [])
      ]));
    }
    // Decode the data for a function call (e.g. tx.data)
    decodeFunctionData(functionFragment, data) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      const bytes2 = arrayify(data);
      if (hexlify(bytes2.slice(0, 4)) !== this.getSighash(functionFragment)) {
        logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes2));
      }
      return this._decodeParams(functionFragment.inputs, bytes2.slice(4));
    }
    // Encode the data for a function call (e.g. tx.data)
    encodeFunctionData(functionFragment, values) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      return hexlify(concat([
        this.getSighash(functionFragment),
        this._encodeParams(functionFragment.inputs, values || [])
      ]));
    }
    // Decode the result from a function call (e.g. from eth_call)
    decodeFunctionResult(functionFragment, data) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      let bytes2 = arrayify(data);
      let reason = null;
      let message = "";
      let errorArgs = null;
      let errorName = null;
      let errorSignature = null;
      switch (bytes2.length % this._abiCoder._getWordSize()) {
        case 0:
          try {
            return this._abiCoder.decode(functionFragment.outputs, bytes2);
          } catch (error2) {
          }
          break;
        case 4: {
          const selector = hexlify(bytes2.slice(0, 4));
          const builtin = BuiltinErrors[selector];
          if (builtin) {
            errorArgs = this._abiCoder.decode(builtin.inputs, bytes2.slice(4));
            errorName = builtin.name;
            errorSignature = builtin.signature;
            if (builtin.reason) {
              reason = errorArgs[0];
            }
            if (errorName === "Error") {
              message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
            } else if (errorName === "Panic") {
              message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
            }
          } else {
            try {
              const error2 = this.getError(selector);
              errorArgs = this._abiCoder.decode(error2.inputs, bytes2.slice(4));
              errorName = error2.name;
              errorSignature = error2.format();
            } catch (error2) {
            }
          }
          break;
        }
      }
      return logger.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
        method: functionFragment.format(),
        data: hexlify(data),
        errorArgs,
        errorName,
        errorSignature,
        reason
      });
    }
    // Encode the result for a function call (e.g. for eth_call)
    encodeFunctionResult(functionFragment, values) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
    }
    // Create the filter for the event with search criteria (e.g. for eth_filterLog)
    encodeFilterTopics(eventFragment, values) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      if (values.length > eventFragment.inputs.length) {
        logger.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
          argument: "values",
          value: values
        });
      }
      let topics = [];
      if (!eventFragment.anonymous) {
        topics.push(this.getEventTopic(eventFragment));
      }
      const encodeTopic = (param, value) => {
        if (param.type === "string") {
          return id(value);
        } else if (param.type === "bytes") {
          return keccak256(hexlify(value));
        }
        if (param.type === "bool" && typeof value === "boolean") {
          value = value ? "0x01" : "0x00";
        }
        if (param.type.match(/^u?int/)) {
          value = BigNumber.from(value).toHexString();
        }
        if (param.type === "address") {
          this._abiCoder.encode(["address"], [value]);
        }
        return hexZeroPad(hexlify(value), 32);
      };
      values.forEach((value, index) => {
        let param = eventFragment.inputs[index];
        if (!param.indexed) {
          if (value != null) {
            logger.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
          }
          return;
        }
        if (value == null) {
          topics.push(null);
        } else if (param.baseType === "array" || param.baseType === "tuple") {
          logger.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
        } else if (Array.isArray(value)) {
          topics.push(value.map((value2) => encodeTopic(param, value2)));
        } else {
          topics.push(encodeTopic(param, value));
        }
      });
      while (topics.length && topics[topics.length - 1] === null) {
        topics.pop();
      }
      return topics;
    }
    encodeEventLog(eventFragment, values) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      const topics = [];
      const dataTypes = [];
      const dataValues = [];
      if (!eventFragment.anonymous) {
        topics.push(this.getEventTopic(eventFragment));
      }
      if (values.length !== eventFragment.inputs.length) {
        logger.throwArgumentError("event arguments/values mismatch", "values", values);
      }
      eventFragment.inputs.forEach((param, index) => {
        const value = values[index];
        if (param.indexed) {
          if (param.type === "string") {
            topics.push(id(value));
          } else if (param.type === "bytes") {
            topics.push(keccak256(value));
          } else if (param.baseType === "tuple" || param.baseType === "array") {
            throw new Error("not implemented");
          } else {
            topics.push(this._abiCoder.encode([param.type], [value]));
          }
        } else {
          dataTypes.push(param);
          dataValues.push(value);
        }
      });
      return {
        data: this._abiCoder.encode(dataTypes, dataValues),
        topics
      };
    }
    // Decode a filter for the event and the search criteria
    decodeEventLog(eventFragment, data, topics) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      if (topics != null && !eventFragment.anonymous) {
        let topicHash = this.getEventTopic(eventFragment);
        if (!isHexString$1(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
          logger.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
        }
        topics = topics.slice(1);
      }
      let indexed = [];
      let nonIndexed = [];
      let dynamic = [];
      eventFragment.inputs.forEach((param, index) => {
        if (param.indexed) {
          if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
            indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
            dynamic.push(true);
          } else {
            indexed.push(param);
            dynamic.push(false);
          }
        } else {
          nonIndexed.push(param);
          dynamic.push(false);
        }
      });
      let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
      let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
      let result = [];
      let nonIndexedIndex = 0, indexedIndex = 0;
      eventFragment.inputs.forEach((param, index) => {
        if (param.indexed) {
          if (resultIndexed == null) {
            result[index] = new Indexed({ _isIndexed: true, hash: null });
          } else if (dynamic[index]) {
            result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
          } else {
            try {
              result[index] = resultIndexed[indexedIndex++];
            } catch (error2) {
              result[index] = error2;
            }
          }
        } else {
          try {
            result[index] = resultNonIndexed[nonIndexedIndex++];
          } catch (error2) {
            result[index] = error2;
          }
        }
        if (param.name && result[param.name] == null) {
          const value = result[index];
          if (value instanceof Error) {
            Object.defineProperty(result, param.name, {
              enumerable: true,
              get: () => {
                throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
              }
            });
          } else {
            result[param.name] = value;
          }
        }
      });
      for (let i2 = 0; i2 < result.length; i2++) {
        const value = result[i2];
        if (value instanceof Error) {
          Object.defineProperty(result, i2, {
            enumerable: true,
            get: () => {
              throw wrapAccessError(`index ${i2}`, value);
            }
          });
        }
      }
      return Object.freeze(result);
    }
    // Given a transaction, find the matching function fragment (if any) and
    // determine all its properties and call parameters
    parseTransaction(tx) {
      let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
      if (!fragment) {
        return null;
      }
      return new TransactionDescription({
        args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
        functionFragment: fragment,
        name: fragment.name,
        signature: fragment.format(),
        sighash: this.getSighash(fragment),
        value: BigNumber.from(tx.value || "0")
      });
    }
    // @TODO
    //parseCallResult(data: BytesLike): ??
    // Given an event log, find the matching event fragment (if any) and
    // determine all its properties and values
    parseLog(log2) {
      let fragment = this.getEvent(log2.topics[0]);
      if (!fragment || fragment.anonymous) {
        return null;
      }
      return new LogDescription({
        eventFragment: fragment,
        name: fragment.name,
        signature: fragment.format(),
        topic: this.getEventTopic(fragment),
        args: this.decodeEventLog(fragment, log2.data, log2.topics)
      });
    }
    parseError(data) {
      const hexData = hexlify(data);
      let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
      if (!fragment) {
        return null;
      }
      return new ErrorDescription({
        args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
        errorFragment: fragment,
        name: fragment.name,
        signature: fragment.format(),
        sighash: this.getSighash(fragment)
      });
    }
    /*
    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
        if (Interface.isInterface(value)) {
            return value;
        }
        if (typeof(value) === "string") {
            return new Interface(JSON.parse(value));
        }
        return new Interface(value);
    }
    */
    static isInterface(value) {
      return !!(value && value._isInterface);
    }
  }
  const REGISTRIES = [
    {
      name: "ens",
      resolvers: {
        forward: "https://explorers.api.live.ledger.com/blockchain/v4/eth/ens/resolve/{name}",
        reverse: "https://explorers.api.live.ledger.com/blockchain/v4/eth/ens/reverse-resolve/{address}"
      },
      signatures: {
        forward: "https://nft.api.live.ledger.com/v1/names/ens/forward/{name}?challenge={challenge}",
        reverse: "https://nft.api.live.ledger.com/v1/names/ens/reverse/{address}?challenge={challenge}"
      },
      patterns: {
        forward: new RegExp("\\.eth$"),
        reverse: new RegExp("^0x[0-9a-fA-F]{40}$")
      },
      coinTypes: [60]
    }
  ];
  const getRegistries = async () => REGISTRIES;
  const validateDomain = (domain) => {
    if (typeof domain !== "string") {
      return false;
    }
    const lengthIsValid = domain.length > 0 && Number(domain.length) < 30;
    const containsOnlyValidChars = new RegExp("^[a-zA-Z0-9\\-\\_\\.]+$").test(domain);
    return lengthIsValid && containsOnlyValidChars;
  };
  const signDomainResolution = async (domain, registryName, challenge) => {
    if (!validateDomain(domain)) {
      throw new Error(`Domains with more than 255 caracters or with unicode are not supported on the nano. Domain: ${domain}`);
    }
    const registries = await getRegistries();
    const registry = registries.find((r2) => r2.name === registryName);
    if (!registry)
      return null;
    const url = registry.signatures.forward.replace("{name}", domain).replace("{challenge}", challenge);
    return fetch(url).then(async ({ json: json2 }) => await json2()).then(({ payload }) => payload).catch((error2) => {
      if (error2.status !== 404) {
        log("domain-service", "failed to get APDU for a domain", {
          domain,
          error: error2
        });
      }
      return null;
    });
  };
  const signAddressResolution = async (address2, registryName, challenge) => {
    const registries = await getRegistries();
    const registry = registries.find((r2) => r2.name === registryName);
    if (!registry)
      return null;
    const url = registry.signatures.reverse.replace("{address}", address2).replace("{challenge}", challenge);
    return fetch(url).then(async ({ json: json2 }) => await json2()).then(({ payload }) => payload).catch((error2) => {
      if (error2.status !== 404) {
        log("domain-service", "failed to get APDU for an address", {
          address: address2,
          error: error2
        });
      }
      return null;
    });
  };
  const UNISWAP_UNIVERSAL_ROUTER_ADDRESS = "0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad";
  const UNISWAP_EXECUTE_SELECTOR = "0x3593564c";
  const WETH_PER_CHAIN_ID = {
    // Ethereum Mainnet
    1: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    // Ethereum Goerli
    5: "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    // Ethereum Sepolia
    11155111: "0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14",
    // Arbitrum One
    42161: "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    // Arbitrum Goerli
    421613: "0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3",
    // Avalanche C-Chain
    43114: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    // BSC
    56: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
    // Base
    8453: "0x4200000000000000000000000000000000000006",
    // Base Goerli
    84531: "0x44D627f900da8AdaC7561bD73aA745F132450798",
    // Blast
    23888: "0x4300000000000000000000000000000000000004",
    // Celo
    42220: new Error("Celo isn't supporting wrapping Eth"),
    // Celo Alfajores
    44787: new Error("Celo Alfajores isn't supporting wrapping Eth"),
    // Optimism
    10: "0x4200000000000000000000000000000000000006",
    // Optimism Goerli
    420: "0x4200000000000000000000000000000000000006",
    // Polygon
    137: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    // Polygon Mumbai
    80001: "0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889"
  };
  const UNISWAP_COMMANDS = {
    "0x08": "V2_SWAP_EXACT_IN",
    "0x09": "V2_SWAP_EXACT_OUT",
    "0x00": "V3_SWAP_EXACT_IN",
    "0x01": "V3_SWAP_EXACT_OUT",
    "0x0b": "WRAP_ETH",
    "0x0c": "UNWRAP_ETH",
    "0x0a": "PERMIT2_PERMIT",
    "0x0d": "PERMIT2_TRANSFER_FROM",
    "0x02": "PERMIT2_PERMIT_BATCH",
    "0x03": "PERMIT2_TRANSFER_FROM_BATCH",
    "0x06": "PAY_PORTION",
    "0x04": "SWEEP"
  };
  const SWAP_COMMANDS = [
    "V2_SWAP_EXACT_IN",
    "V2_SWAP_EXACT_OUT",
    "V3_SWAP_EXACT_IN",
    "V3_SWAP_EXACT_OUT"
  ];
  const swapV2Decoder = (input) => {
    const [, , , addresses] = defaultAbiCoder.decode(["address", "uint256", "uint256", "address[]", "bool"], input);
    return addresses.map((address2) => address2.toLowerCase());
  };
  const swapV3Decoder = (input) => {
    const [, , , path] = defaultAbiCoder.decode(["address", "uint256", "uint256", "bytes", "bool"], input);
    const pathBuffer = Buffer2.from(path.slice(2), "hex");
    const tokens = [];
    let i2 = 0;
    while (i2 < pathBuffer.length) {
      tokens.push(`0x${pathBuffer.subarray(i2, i2 + 20).toString("hex").toLowerCase()}`);
      i2 += 23;
    }
    return tokens;
  };
  const wrapEthDecoder = (input, chainId) => {
    const contract = WETH_PER_CHAIN_ID[chainId];
    return contract instanceof Error ? [] : [contract.toLowerCase()];
  };
  const sweepDecoder = (input) => {
    const [token] = defaultAbiCoder.decode(["address", "address", "uint256"], input);
    return [token.toLowerCase()];
  };
  const noDecoder = () => [];
  const UniswapDecoders = {
    V2_SWAP_EXACT_IN: swapV2Decoder,
    V2_SWAP_EXACT_OUT: swapV2Decoder,
    V3_SWAP_EXACT_IN: swapV3Decoder,
    V3_SWAP_EXACT_OUT: swapV3Decoder,
    WRAP_ETH: wrapEthDecoder,
    UNWRAP_ETH: wrapEthDecoder,
    PERMIT2_PERMIT: noDecoder,
    PERMIT2_TRANSFER_FROM: noDecoder,
    PERMIT2_PERMIT_BATCH: noDecoder,
    PERMIT2_TRANSFER_FROM_BATCH: noDecoder,
    PAY_PORTION: noDecoder,
    SWEEP: sweepDecoder
  };
  const isSupported = (calldata, to, chainId, commandsAndTokens) => {
    const selector = calldata.slice(0, 10);
    const contractAddress = to?.toLowerCase();
    if (selector !== UNISWAP_EXECUTE_SELECTOR || contractAddress !== UNISWAP_UNIVERSAL_ROUTER_ADDRESS || !commandsAndTokens.length) {
      return false;
    }
    let endingAsset;
    for (let i2 = 0; i2 < commandsAndTokens.length; i2++) {
      const [command, tokens] = commandsAndTokens[i2];
      if (!command)
        return false;
      if (!SWAP_COMMANDS.includes(command))
        continue;
      const poolVersion = command.slice(0, 2);
      if (endingAsset && // Chained swaps should work as a pipe regarding the traded assets:
      // The last asset of swap 1 should be the first asset of swap 2
      // and the same pool version should be used for both swaps
      (endingAsset.asset !== tokens[0] || endingAsset.poolVersion !== poolVersion)) {
        return false;
      } else {
        endingAsset = {
          poolVersion,
          asset: tokens[tokens.length - 1]
        };
      }
    }
    return true;
  };
  const getCommandsAndTokensFromUniswapCalldata = (calldata, chainId) => {
    try {
      const [commands, inputs] = new Interface([
        "function execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline) external payable"
      ]).decodeFunctionData("execute", calldata);
      const commandsBuffer = Buffer2.from(commands.slice(2), "hex");
      return commandsBuffer.reduce((acc, curr, i2) => {
        const commandName = UNISWAP_COMMANDS[`0x${curr.toString(16).padStart(2, "0")}`];
        if (!commandName)
          return [...acc, [void 0, []]];
        const commandDecoder = UniswapDecoders[commandName];
        return [...acc, [commandName, commandDecoder(inputs[i2], chainId)]];
      }, []);
    } catch (e) {
      log("Uniswap", "Error decoding Uniswap calldata", e);
      return [];
    }
  };
  const loadInfosForUniswap = async (transaction, chainId, userConfig) => {
    const selector = transaction.data.slice(0, 10);
    const commandsAndTokens = getCommandsAndTokensFromUniswapCalldata(transaction.data, chainId);
    if (!isSupported(selector, transaction.to, chainId, commandsAndTokens)) {
      return {};
    }
    const uniqueTokens = Array.from(new Set(commandsAndTokens.flatMap(([, tokens]) => tokens)));
    const tokenDescriptorsPromises = Promise.all(uniqueTokens.map(async (token) => {
      const erc20SignaturesBlob = await findERC20SignaturesInfo({}, chainId);
      return byContractAddressAndChainId(token, chainId, erc20SignaturesBlob)?.data;
    }));
    const tokenDescriptors = await tokenDescriptorsPromises.then((descriptors) => descriptors.filter((descriptor) => !!descriptor));
    const pluginName = "Uniswap";
    const lengthBuff = Buffer2.alloc(1);
    lengthBuff.writeUIntBE(pluginName.length, 0, 1);
    const pluginNameBuff = Buffer2.from(pluginName);
    const contractAddressBuff = Buffer2.from(UNISWAP_UNIVERSAL_ROUTER_ADDRESS.slice(2), "hex");
    const selectorBuff = Buffer2.from(UNISWAP_EXECUTE_SELECTOR.slice(2), "hex");
    const signature2 = Buffer2.from(
      // Signature is hardcoded as it would create issues by being in the CAL ethereum.json file
      "3044022014391e8f355867a57fe88f6a5a4dbcb8bf8f888a9db3ff3449caf72d120396bd02200c13d9c3f79400fe0aa0434ac54d59b79503c9964a4abc3e8cd22763e0242935",
      "hex"
    );
    const pluginData = Buffer2.concat([
      lengthBuff,
      pluginNameBuff,
      contractAddressBuff,
      selectorBuff,
      signature2
    ]);
    return {
      pluginData,
      tokenDescriptors
    };
  };
  const loadInfosForContractMethod = async (contractAddress, selector, _chainId, userLoadConfig) => {
    const { pluginBaseURL, extraPlugins } = getLoadConfig(userLoadConfig);
    let data = {};
    if (pluginBaseURL) {
      const url = `${pluginBaseURL}/plugins/ethereum.json`;
      data = await fetch(url).then(async ({ json: json2 }) => await json2()).catch((e) => {
        log("error", "could not fetch from " + url + ": " + String(e));
        return null;
      });
    }
    if (extraPlugins) {
      data = { ...data, ...extraPlugins };
    }
    if (!data)
      return;
    const lcSelector = selector.toLowerCase();
    const lcContractAddress = contractAddress.toLowerCase();
    if (lcContractAddress in data) {
      const contractSelectors = data[lcContractAddress];
      if (lcSelector in contractSelectors) {
        return {
          payload: contractSelectors[lcSelector]["serialized_data"],
          signature: contractSelectors[lcSelector]["signature"],
          plugin: contractSelectors[lcSelector]["plugin"],
          erc20OfInterest: contractSelectors[lcSelector]["erc20OfInterest"],
          abi: contractSelectors["abi"]
        };
      }
    }
  };
  const getNFTInfo = async (contractAddress, chainId, userLoadConfig) => {
    const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);
    if (!nftExplorerBaseURL)
      return;
    const url = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}`;
    const response = await fetch(url).then(async ({ json: json2 }) => await json2()).catch((e) => {
      log("error", "could not fetch from " + url + ": " + String(e));
      return null;
    });
    if (!response)
      return;
    const payload = response["payload"];
    const collectionNameLength = parseInt(payload.slice(4, 6), 16);
    const collectionNameHex = payload.substr(6, collectionNameLength * 2);
    const collectionName = collectionNameHex.match(/.{2}/g)?.reduce((acc, curr) => acc += String.fromCharCode(parseInt(curr, 16)), "");
    return {
      contractAddress,
      collectionName: collectionName || "",
      data: payload
    };
  };
  const loadNftPlugin = async (contractAddress, selector, chainId, userLoadConfig) => {
    const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);
    if (!nftExplorerBaseURL)
      return;
    const url = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}/plugin-selector/${selector}`;
    const response = await fetch(url).then(async ({ json: json2 }) => await json2()).catch((e) => {
      log("error", "could not fetch from " + url + ": " + String(e));
      return null;
    });
    if (!response)
      return;
    const payload = response["payload"];
    return payload;
  };
  const getAdditionalDataForContract = async (contractAddress, chainIdUint32, loadConfig, shouldResolve) => {
    const resolution = {
      nfts: [],
      erc20Tokens: []
    };
    if (shouldResolve.nft) {
      const nftInfo = await getNFTInfo(contractAddress, chainIdUint32, loadConfig);
      if (nftInfo) {
        log("ethereum", "loaded nft info for " + nftInfo.contractAddress + " (" + nftInfo.collectionName + ")");
        resolution.nfts.push(nftInfo.data);
      } else {
        log("ethereum", "couldn't load nft info for " + contractAddress);
      }
    }
    if (shouldResolve.token) {
      const erc20SignaturesBlob = await findERC20SignaturesInfo(loadConfig, chainIdUint32);
      const erc20Info = byContractAddressAndChainId(contractAddress, chainIdUint32, erc20SignaturesBlob);
      if (erc20Info) {
        log("ethereum", "loaded erc20token info for " + erc20Info.contractAddress + " (" + erc20Info.ticker + ")");
        resolution.erc20Tokens.push(erc20Info.data.toString("hex"));
      } else {
        log("ethereum", "couldn't load erc20token info for " + contractAddress);
      }
    }
    return resolution;
  };
  const loadNanoAppPlugins = async (contractAddress, selector, parsedTransaction, chainIdUint32, loadConfig, shouldResolve) => {
    let resolution = {
      externalPlugin: [],
      plugin: [],
      nfts: [],
      erc20Tokens: [],
      domains: []
    };
    if (shouldResolve.nft) {
      const nftPluginPayload = await loadNftPlugin(contractAddress, selector, chainIdUint32, loadConfig);
      if (nftPluginPayload) {
        resolution.plugin.push(nftPluginPayload);
      } else {
        log("ethereum", "no NFT plugin payload for selector " + selector + " and address " + contractAddress);
      }
    }
    if (shouldResolve.externalPlugins && contractAddress !== UNISWAP_UNIVERSAL_ROUTER_ADDRESS) {
      const contractMethodInfos = await loadInfosForContractMethod(contractAddress, selector, chainIdUint32, loadConfig);
      if (contractMethodInfos) {
        const { plugin, payload, signature: signature2, erc20OfInterest, abi: abi2 } = contractMethodInfos;
        if (plugin) {
          log("ethereum", `found plugin (${plugin}) for selector: ${selector}`);
          resolution.externalPlugin.push({ payload, signature: signature2 });
        }
        if (erc20OfInterest && erc20OfInterest.length && abi2) {
          const contract = new Interface(abi2);
          const args = contract.parseTransaction(parsedTransaction).args;
          for (const path of erc20OfInterest) {
            const erc20ContractAddress = path.split(".").reduce((value, seg) => {
              if (seg === "-1" && Array.isArray(value)) {
                return value[value.length - 1];
              }
              return value[seg];
            }, args);
            const externalPluginResolution = await getAdditionalDataForContract(erc20ContractAddress, chainIdUint32, loadConfig, {
              nft: false,
              externalPlugins: false,
              token: true,
              // enforcing resolution of tokens for external plugins that need info on assets (e.g. for a swap)
              uniswapV3: false
            });
            resolution = mergeResolutions([resolution, externalPluginResolution]);
          }
        }
      } else {
        log("ethereum", "no infos for selector " + selector);
      }
    }
    if (shouldResolve.uniswapV3) {
      const { pluginData, tokenDescriptors } = await loadInfosForUniswap(parsedTransaction, chainIdUint32);
      if (pluginData && tokenDescriptors) {
        resolution.externalPlugin.push({
          payload: pluginData.toString("hex"),
          signature: ""
        });
        resolution.erc20Tokens.push(...tokenDescriptors.map((d) => d.toString("hex")));
      }
    }
    return resolution;
  };
  const resolveTransaction = async (rawTxHex, loadConfig, resolutionConfig) => {
    const rawTx = Buffer2.from(rawTxHex, "hex");
    const parsedTransaction = parse$1(`0x${rawTx.toString("hex")}`);
    const chainIdUint32 = getChainIdAsUint32(parsedTransaction.chainId);
    const { domains } = resolutionConfig;
    const contractAddress = parsedTransaction.to?.toLowerCase();
    if (!contractAddress)
      return {
        nfts: [],
        erc20Tokens: [],
        externalPlugin: [],
        plugin: [],
        domains: []
      };
    const selector = parsedTransaction.data.length >= 10 && parsedTransaction.data.substring(0, 10);
    const resolutions = [];
    if (selector) {
      const shouldResolve = {
        token: resolutionConfig.erc20 && tokenSelectors.includes(selector),
        nft: resolutionConfig.nft && nftSelectors.includes(selector),
        externalPlugins: resolutionConfig.externalPlugins,
        uniswapV3: resolutionConfig.uniswapV3
      };
      const pluginsResolution = await loadNanoAppPlugins(contractAddress, selector, parsedTransaction, chainIdUint32, loadConfig, shouldResolve);
      if (pluginsResolution) {
        resolutions.push(pluginsResolution);
      }
      const contractResolution = await getAdditionalDataForContract(contractAddress, chainIdUint32, loadConfig, shouldResolve);
      if (contractResolution) {
        resolutions.push(contractResolution);
      }
    }
    if (domains) {
      const domainResolutions = {
        domains
      };
      resolutions.push(domainResolutions);
    }
    return mergeResolutions(resolutions);
  };
  const ledgerService = {
    resolveTransaction,
    signDomainResolution,
    signAddressResolution
  };
  const domainResolutionFlow = async (appBinding, domainDescriptor) => {
    if (!domainDescriptor)
      return;
    const { domain, address: address2, registry, type } = domainDescriptor;
    const challenge = await appBinding.getChallenge();
    const domainAPDU = type === "forward" ? await ledgerService.signDomainResolution(domain, registry, challenge) : await ledgerService.signAddressResolution(address2, registry, challenge);
    if (domainAPDU) {
      await appBinding.provideDomainName(domainAPDU);
    }
  };
  const starkQuantizationTypeMap = {
    eth: 1,
    erc20: 2,
    erc721: 3,
    erc20mintable: 4,
    erc721mintable: 5
  };
  const remapTransactionRelatedErrors = (e) => {
    if (e && e.statusCode === 27264) {
      return new EthAppPleaseEnableContractData("Please enable Blind signing or Contract data in the Ethereum app Settings");
    }
    return e;
  };
  class Eth {
    constructor(transport, scrambleKey = "w0w", loadConfig = {}) {
      __publicField(this, "transport");
      __publicField(this, "loadConfig");
      this.transport = transport;
      this.loadConfig = loadConfig;
      transport.decorateAppAPIMethods(this, [
        // "getChallange",                  | ⚠️
        // "provideERC20TokenInformation",  | Those methods are not decorated as they're
        // "setExternalPlugin",             | being used inside of the `signTransaction` flow
        // "setPlugin",                     | and shouldn't be locking the transport
        // "provideDomainName",             | ⚠️
        // "provideNFTInformation",         |
        "getAddress",
        "signTransaction",
        "signPersonalMessage",
        "getAppConfiguration",
        "signEIP712Message",
        "signEIP712HashedMessage",
        "starkGetPublicKey",
        "starkSignOrder",
        "starkSignOrder_v2",
        "starkSignTransfer",
        "starkSignTransfer_v2",
        "starkProvideQuantum",
        "starkProvideQuantum_v2",
        "starkUnsafeSign",
        "eth2GetPublicKey",
        "eth2SetWithdrawalIndex",
        "getEIP1024PublicEncryptionKey",
        "getEIP1024SharedSecret"
      ], scrambleKey);
    }
    setLoadConfig(loadConfig) {
      this.loadConfig = loadConfig;
    }
    /**
     * get Ethereum address for a given BIP 32 path.
     * @param path a path in BIP 32 format
     * @option boolDisplay optionally enable or not the display
     * @option boolChaincode optionally enable or not the chaincode request
     * @option chainId optionally display the network clearly on a Stax device
     * @return an object with a publicKey, address and (optionally) chainCode
     * @example
     * eth.getAddress("44'/60'/0'/0/0").then(o => o.address)
     */
    getAddress(path, boolDisplay, boolChaincode, chainId) {
      const paths = splitPath(path);
      let buffer2 = Buffer2.alloc(1 + paths.length * 4);
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      if (chainId) {
        const chainIdBufferMask = Buffer2.alloc(8, 0);
        const chainIdBuffer = Buffer2.from(padHexString(new BigNumber$1(chainId).toString(16)), "hex");
        chainIdBufferMask.write(chainIdBuffer.toString("hex"), chainIdBufferMask.length - chainIdBuffer.length, "hex");
        buffer2 = Buffer2.concat([buffer2, chainIdBufferMask]);
      }
      return this.transport.send(224, 2, boolDisplay ? 1 : 0, boolChaincode ? 1 : 0, buffer2).then((response) => {
        const publicKeyLength = response[0];
        const addressLength = response[1 + publicKeyLength];
        return {
          publicKey: response.slice(1, 1 + publicKeyLength).toString("hex"),
          address: "0x" + response.slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength).toString("ascii"),
          chainCode: boolChaincode ? response.slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32).toString("hex") : void 0
        };
      });
    }
    /**
     * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign.
     *
     * @param path: the BIP32 path to sign the transaction on
     * @param rawTxHex: the raw ethereum transaction in hexadecimal to sign
     * @param resolution: resolution is an object with all "resolved" metadata necessary to allow the device to clear sign information. This includes: ERC20 token information, plugins, contracts, NFT signatures,... You must explicitly provide something to avoid having a warning. By default, you can use Ledger's service or your own resolution service. See services/types.js for the contract. Setting the value to "null" will fallback everything to blind signing but will still allow the device to sign the transaction.
     * @example
     import { ledgerService } from "@ledgerhq/hw-app-eth"
     const tx = "e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080"; // raw tx to sign
     const resolution = await ledgerService.resolveTransaction(tx);
     const result = eth.signTransaction("44'/60'/0'/0/0", tx, resolution);
     console.log(result);
     */
    async signTransaction(path, rawTxHex, resolution) {
      let APDU_FIELDS;
      (function(APDU_FIELDS2) {
        APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
        APDU_FIELDS2[APDU_FIELDS2["INS"] = 4] = "INS";
        APDU_FIELDS2[APDU_FIELDS2["P1_FIRST_CHUNK"] = 0] = "P1_FIRST_CHUNK";
        APDU_FIELDS2[APDU_FIELDS2["P1_FOLLOWING_CHUNK"] = 128] = "P1_FOLLOWING_CHUNK";
        APDU_FIELDS2[APDU_FIELDS2["P2"] = 0] = "P2";
      })(APDU_FIELDS || (APDU_FIELDS = {}));
      if (resolution === void 0) {
        console.warn("hw-app-eth: signTransaction(path, rawTxHex, resolution): please provide the 'resolution' parameter. See https://github.com/LedgerHQ/ledgerjs/blob/master/packages/hw-app-eth/README.md – the previous signature is deprecated and providing the 3rd 'resolution' parameter explicitly will become mandatory so you have the control on the resolution and the fallback mecanism (e.g. fallback to blind signing or not).// Possible solution:\n + import { ledgerService } from '@ledgerhq/hw-app-eth';\n + const resolution = await ledgerService.resolveTransaction(rawTxHex);");
        resolution = await ledgerService.resolveTransaction(rawTxHex, this.loadConfig, {
          externalPlugins: true,
          erc20: true,
          uniswapV3: false
        }).catch((e) => {
          console.warn("an error occurred in resolveTransaction => fallback to blind signing: " + String(e));
          return null;
        });
      }
      if (resolution) {
        for (const domainDescriptor of resolution.domains) {
          await domainResolutionFlow(this, domainDescriptor).catch((e) => {
            log("error", "domainResolutionFlow failed", {
              domainDescriptor,
              error: e
            });
          });
        }
        for (const plugin of resolution.plugin) {
          await this.setPlugin(plugin);
        }
        for (const { payload, signature: signature2 } of resolution.externalPlugin) {
          await this.setExternalPlugin(payload, signature2);
        }
        for (const nft of resolution.nfts) {
          await this.provideNFTInformation(nft);
        }
        for (const data of resolution.erc20Tokens) {
          await this.provideERC20TokenInformation(data);
        }
      }
      const rawTx = Buffer2.from(rawTxHex, "hex");
      const parsedTransaction = parse$1(`0x${rawTx.toString("hex")}`);
      const chainId = new BigNumber$1(parsedTransaction.chainId);
      const paths = splitPath(path);
      const derivationPathBuff = Buffer2.alloc(1 + paths.length * 4);
      derivationPathBuff[0] = paths.length;
      paths.forEach((element, index) => {
        derivationPathBuff.writeUInt32BE(element, 1 + 4 * index);
      });
      const payloadChunks = safeChunkTransaction(rawTx, derivationPathBuff, parsedTransaction.type);
      let response;
      for (const chunk of payloadChunks) {
        const isFirstChunk = chunk === payloadChunks[0];
        response = await this.transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, isFirstChunk ? APDU_FIELDS.P1_FIRST_CHUNK : APDU_FIELDS.P1_FOLLOWING_CHUNK, APDU_FIELDS.P2, chunk).catch((e) => {
          throw remapTransactionRelatedErrors(e);
        });
      }
      const v = getV(response[0], chainId, parsedTransaction.type);
      const r2 = response.subarray(1, 1 + 32).toString("hex");
      const s2 = response.subarray(1 + 32, 1 + 32 + 32).toString("hex");
      return { v, r: r2, s: s2 };
    }
    /**
     * Helper to get resolution and signature of a transaction in a single method
     *
     * @param path: the BIP32 path to sign the transaction on
     * @param rawTxHex: the raw ethereum transaction in hexadecimal to sign
     * @param resolutionConfig: configuration about what should be clear signed in the transaction
     * @param throwOnError: optional parameter to determine if a failing resolution of the transaction should throw an error or not
     * @example
     const tx = "e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080"; // raw tx to sign
     const result = eth.clearSignTransaction("44'/60'/0'/0/0", tx, { erc20: true, externalPlugins: true, nft: true});
     console.log(result);
     */
    async clearSignTransaction(path, rawTxHex, resolutionConfig, throwOnError = false) {
      const resolution = await ledgerService.resolveTransaction(rawTxHex, this.loadConfig, resolutionConfig).catch((e) => {
        console.warn("an error occurred in resolveTransaction => fallback to blind signing: " + String(e));
        if (throwOnError) {
          throw e;
        }
        return null;
      });
      return this.signTransaction(path, rawTxHex, resolution);
    }
    /**
     */
    getAppConfiguration() {
      return this.transport.send(224, 6, 0, 0).then((response) => {
        return {
          arbitraryDataEnabled: response[0] & 1,
          erc20ProvisioningNecessary: response[0] & 2,
          starkEnabled: response[0] & 4,
          starkv2Supported: response[0] & 8,
          version: "" + response[1] + "." + response[2] + "." + response[3]
        };
      });
    }
    /**
    * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.
    * @example
    eth.signPersonalMessage("44'/60'/0'/0/0", Buffer.from("test").toString("hex")).then(result => {
    var v = result['v'] - 27;
    v = v.toString(16);
    if (v.length < 2) {
      v = "0" + v;
    }
    console.log("Signature 0x" + result['r'] + result['s'] + v);
    })
     */
    async signPersonalMessage(path, messageHex) {
      const paths = splitPath(path);
      let offset = 0;
      const message = Buffer2.from(messageHex, "hex");
      let response;
      while (offset !== message.length) {
        const maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;
        const chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;
        const buffer2 = Buffer2.alloc(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);
        if (offset === 0) {
          buffer2[0] = paths.length;
          paths.forEach((element, index) => {
            buffer2.writeUInt32BE(element, 1 + 4 * index);
          });
          buffer2.writeUInt32BE(message.length, 1 + 4 * paths.length);
          message.copy(buffer2, 1 + 4 * paths.length + 4, offset, offset + chunkSize);
        } else {
          message.copy(buffer2, 0, offset, offset + chunkSize);
        }
        response = await this.transport.send(224, 8, offset === 0 ? 0 : 128, 0, buffer2);
        offset += chunkSize;
      }
      const v = response[0];
      const r2 = response.slice(1, 1 + 32).toString("hex");
      const s2 = response.slice(1 + 32, 1 + 32 + 32).toString("hex");
      return { v, r: r2, s: s2 };
    }
    /**
    * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)
    * @example
    eth.signEIP712HashedMessage("44'/60'/0'/0/0", Buffer.from("0101010101010101010101010101010101010101010101010101010101010101").toString("hex"), Buffer.from("0202020202020202020202020202020202020202020202020202020202020202").toString("hex")).then(result => {
    var v = result['v'] - 27;
    v = v.toString(16);
    if (v.length < 2) {
      v = "0" + v;
    }
    console.log("Signature 0x" + result['r'] + result['s'] + v);
    })
     */
    signEIP712HashedMessage(path, domainSeparatorHex, hashStructMessageHex) {
      return signEIP712HashedMessage(this.transport, path, domainSeparatorHex, hashStructMessageHex);
    }
    /**
     * Sign an EIP-721 formatted message following the specification here:
     * https://github.com/LedgerHQ/app-ethereum/blob/develop/doc/ethapp.asc#sign-eth-eip-712
     * ⚠️ This method is not compatible with nano S (LNS). Make sure to use a try/catch to fallback on the signEIP712HashedMessage method ⚠️
     @example
     eth.signEIP721Message("44'/60'/0'/0/0", {
        domain: {
          chainId: 69,
          name: "Da Domain",
          verifyingContract: "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC",
          version: "1"
        },
        types: {
          "EIP712Domain": [
                { name: "name", type: "string" },
                { name: "version", type: "string" },
                { name: "chainId", type: "uint256" },
                { name: "verifyingContract", type: "address" }
            ],
          "Test": [
            { name: "contents", type: "string" }
          ]
        },
        primaryType: "Test",
        message: {contents: "Hello, Bob!"},
      })
     *
     * @param {String} path derivationPath
     * @param {Object} jsonMessage message to sign
     * @param {Boolean} fullImplem use the legacy implementation
     * @returns {Promise}
     */
    async signEIP712Message(path, jsonMessage, fullImplem = false) {
      return signEIP712Message(this.transport, path, jsonMessage, fullImplem, this.loadConfig);
    }
    /**
     * Method returning a 4 bytes TLV challenge as an hexa string
     *
     * @returns {Promise<string>}
     */
    async getChallenge() {
      let APDU_FIELDS;
      (function(APDU_FIELDS2) {
        APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
        APDU_FIELDS2[APDU_FIELDS2["INS"] = 32] = "INS";
        APDU_FIELDS2[APDU_FIELDS2["P1"] = 0] = "P1";
        APDU_FIELDS2[APDU_FIELDS2["P2"] = 0] = "P2";
        APDU_FIELDS2[APDU_FIELDS2["LC"] = 0] = "LC";
      })(APDU_FIELDS || (APDU_FIELDS = {}));
      return this.transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1, APDU_FIELDS.P2).then((res) => {
        const [, fourBytesChallenge, statusCode] = new RegExp("(.*)(.{4}$)").exec(res.toString("hex")) || [];
        if (statusCode !== "9000") {
          throw new Error(`An error happened while generating the challenge. Status code: ${statusCode}`);
        }
        return `0x${fourBytesChallenge}`;
      }).catch((e) => {
        log("error", "couldn't request a challenge", e);
        throw e;
      });
    }
    /**
     * get Stark public key for a given BIP 32 path.
     * @param path a path in BIP 32 format
     * @option boolDisplay optionally enable or not the display
     * @return the Stark public key
     */
    starkGetPublicKey(path, boolDisplay) {
      const paths = splitPath(path);
      const buffer2 = Buffer2.alloc(1 + paths.length * 4);
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      return this.transport.send(240, 2, boolDisplay ? 1 : 0, 0, buffer2).then((response) => {
        return response.slice(0, response.length - 2);
      });
    }
    /**
     * sign a Stark order
     * @param path a path in BIP 32 format
     * @option sourceTokenAddress contract address of the source token (not present for ETH)
     * @param sourceQuantization quantization used for the source token
     * @option destinationTokenAddress contract address of the destination token (not present for ETH)
     * @param destinationQuantization quantization used for the destination token
     * @param sourceVault ID of the source vault
     * @param destinationVault ID of the destination vault
     * @param amountSell amount to sell
     * @param amountBuy amount to buy
     * @param nonce transaction nonce
     * @param timestamp transaction validity timestamp
     * @return the signature
     */
    starkSignOrder(path, sourceTokenAddress, sourceQuantization, destinationTokenAddress, destinationQuantization, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {
      const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);
      const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);
      const paths = splitPath(path);
      const buffer2 = Buffer2.alloc(1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);
      let offset = 0;
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      offset = 1 + 4 * paths.length;
      if (sourceTokenAddressHex) {
        sourceTokenAddressHex.copy(buffer2, offset);
      }
      offset += 20;
      Buffer2.from(sourceQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      offset += 32;
      if (destinationTokenAddressHex) {
        destinationTokenAddressHex.copy(buffer2, offset);
      }
      offset += 20;
      Buffer2.from(destinationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      offset += 32;
      buffer2.writeUInt32BE(sourceVault, offset);
      offset += 4;
      buffer2.writeUInt32BE(destinationVault, offset);
      offset += 4;
      Buffer2.from(amountSell.toString(16).padStart(16, "0"), "hex").copy(buffer2, offset);
      offset += 8;
      Buffer2.from(amountBuy.toString(16).padStart(16, "0"), "hex").copy(buffer2, offset);
      offset += 8;
      buffer2.writeUInt32BE(nonce, offset);
      offset += 4;
      buffer2.writeUInt32BE(timestamp, offset);
      return this.transport.send(240, 4, 1, 0, buffer2).then((response) => {
        const r2 = response.slice(1, 1 + 32).toString("hex");
        const s2 = response.slice(1 + 32, 1 + 32 + 32).toString("hex");
        return {
          r: r2,
          s: s2
        };
      });
    }
    /**
     * sign a Stark order using the Starkex V2 protocol
     * @param path a path in BIP 32 format
     * @option sourceTokenAddress contract address of the source token (not present for ETH)
     * @param sourceQuantizationType quantization type used for the source token
     * @option sourceQuantization quantization used for the source token (not present for erc 721 or mintable erc 721)
     * @option sourceMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the source token
     * @option destinationTokenAddress contract address of the destination token (not present for ETH)
     * @param destinationQuantizationType quantization type used for the destination token
     * @option destinationQuantization quantization used for the destination token (not present for erc 721 or mintable erc 721)
     * @option destinationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the destination token
     * @param sourceVault ID of the source vault
     * @param destinationVault ID of the destination vault
     * @param amountSell amount to sell
     * @param amountBuy amount to buy
     * @param nonce transaction nonce
     * @param timestamp transaction validity timestamp
     * @return the signature
     */
    starkSignOrder_v2(path, sourceTokenAddress, sourceQuantizationType, sourceQuantization, sourceMintableBlobOrTokenId, destinationTokenAddress, destinationQuantizationType, destinationQuantization, destinationMintableBlobOrTokenId, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {
      const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);
      const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);
      if (!(sourceQuantizationType in starkQuantizationTypeMap)) {
        throw new Error("eth.starkSignOrderv2 invalid source quantization type=" + sourceQuantizationType);
      }
      if (!(destinationQuantizationType in starkQuantizationTypeMap)) {
        throw new Error("eth.starkSignOrderv2 invalid destination quantization type=" + destinationQuantizationType);
      }
      const paths = splitPath(path);
      const buffer2 = Buffer2.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 1 + 20 + 32 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);
      let offset = 0;
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      offset = 1 + 4 * paths.length;
      buffer2[offset] = starkQuantizationTypeMap[sourceQuantizationType];
      offset++;
      if (sourceTokenAddressHex) {
        sourceTokenAddressHex.copy(buffer2, offset);
      }
      offset += 20;
      if (sourceQuantization) {
        Buffer2.from(sourceQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      if (sourceMintableBlobOrTokenId) {
        Buffer2.from(sourceMintableBlobOrTokenId.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      buffer2[offset] = starkQuantizationTypeMap[destinationQuantizationType];
      offset++;
      if (destinationTokenAddressHex) {
        destinationTokenAddressHex.copy(buffer2, offset);
      }
      offset += 20;
      if (destinationQuantization) {
        Buffer2.from(destinationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      if (destinationMintableBlobOrTokenId) {
        Buffer2.from(destinationMintableBlobOrTokenId.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      buffer2.writeUInt32BE(sourceVault, offset);
      offset += 4;
      buffer2.writeUInt32BE(destinationVault, offset);
      offset += 4;
      Buffer2.from(amountSell.toString(16).padStart(16, "0"), "hex").copy(buffer2, offset);
      offset += 8;
      Buffer2.from(amountBuy.toString(16).padStart(16, "0"), "hex").copy(buffer2, offset);
      offset += 8;
      buffer2.writeUInt32BE(nonce, offset);
      offset += 4;
      buffer2.writeUInt32BE(timestamp, offset);
      return this.transport.send(240, 4, 3, 0, buffer2).then((response) => {
        const r2 = response.slice(1, 1 + 32).toString("hex");
        const s2 = response.slice(1 + 32, 1 + 32 + 32).toString("hex");
        return {
          r: r2,
          s: s2
        };
      });
    }
    /**
     * sign a Stark transfer
     * @param path a path in BIP 32 format
     * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)
     * @param transferQuantization quantization used for the token to be transferred
     * @param targetPublicKey target Stark public key
     * @param sourceVault ID of the source vault
     * @param destinationVault ID of the destination vault
     * @param amountTransfer amount to transfer
     * @param nonce transaction nonce
     * @param timestamp transaction validity timestamp
     * @return the signature
     */
    starkSignTransfer(path, transferTokenAddress, transferQuantization, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp) {
      const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);
      const targetPublicKeyHex = hexBuffer(targetPublicKey);
      const paths = splitPath(path);
      const buffer2 = Buffer2.alloc(1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4, 0);
      let offset = 0;
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      offset = 1 + 4 * paths.length;
      if (transferTokenAddressHex) {
        transferTokenAddressHex.copy(buffer2, offset);
      }
      offset += 20;
      Buffer2.from(transferQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      offset += 32;
      targetPublicKeyHex.copy(buffer2, offset);
      offset += 32;
      buffer2.writeUInt32BE(sourceVault, offset);
      offset += 4;
      buffer2.writeUInt32BE(destinationVault, offset);
      offset += 4;
      Buffer2.from(amountTransfer.toString(16).padStart(16, "0"), "hex").copy(buffer2, offset);
      offset += 8;
      buffer2.writeUInt32BE(nonce, offset);
      offset += 4;
      buffer2.writeUInt32BE(timestamp, offset);
      return this.transport.send(240, 4, 2, 0, buffer2).then((response) => {
        const r2 = response.slice(1, 1 + 32).toString("hex");
        const s2 = response.slice(1 + 32, 1 + 32 + 32).toString("hex");
        return {
          r: r2,
          s: s2
        };
      });
    }
    /**
     * sign a Stark transfer or conditional transfer using the Starkex V2 protocol
     * @param path a path in BIP 32 format
     * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)
     * @param transferQuantizationType quantization type used for the token to be transferred
     * @option transferQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)
     * @option transferMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the token to be transferred
     * @param targetPublicKey target Stark public key
     * @param sourceVault ID of the source vault
     * @param destinationVault ID of the destination vault
     * @param amountTransfer amount to transfer
     * @param nonce transaction nonce
     * @param timestamp transaction validity timestamp
     * @option conditionalTransferAddress onchain address of the condition for a conditional transfer
     * @option conditionalTransferFact fact associated to the condition for a conditional transfer
     * @return the signature
     */
    starkSignTransfer_v2(path, transferTokenAddress, transferQuantizationType, transferQuantization, transferMintableBlobOrTokenId, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp, conditionalTransferAddress, conditionalTransferFact) {
      const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);
      const targetPublicKeyHex = hexBuffer(targetPublicKey);
      const conditionalTransferAddressHex = maybeHexBuffer(conditionalTransferAddress);
      if (!(transferQuantizationType in starkQuantizationTypeMap)) {
        throw new Error("eth.starkSignTransferv2 invalid quantization type=" + transferQuantizationType);
      }
      const paths = splitPath(path);
      const buffer2 = Buffer2.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 32 + 4 + 4 + 8 + 4 + 4 + (conditionalTransferAddressHex ? 32 + 20 : 0), 0);
      let offset = 0;
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      offset = 1 + 4 * paths.length;
      buffer2[offset] = starkQuantizationTypeMap[transferQuantizationType];
      offset++;
      if (transferTokenAddressHex) {
        transferTokenAddressHex.copy(buffer2, offset);
      }
      offset += 20;
      if (transferQuantization) {
        Buffer2.from(transferQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      if (transferMintableBlobOrTokenId) {
        Buffer2.from(transferMintableBlobOrTokenId.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      targetPublicKeyHex.copy(buffer2, offset);
      offset += 32;
      buffer2.writeUInt32BE(sourceVault, offset);
      offset += 4;
      buffer2.writeUInt32BE(destinationVault, offset);
      offset += 4;
      Buffer2.from(amountTransfer.toString(16).padStart(16, "0"), "hex").copy(buffer2, offset);
      offset += 8;
      buffer2.writeUInt32BE(nonce, offset);
      offset += 4;
      buffer2.writeUInt32BE(timestamp, offset);
      if (conditionalTransferAddressHex && conditionalTransferFact) {
        offset += 4;
        Buffer2.from(conditionalTransferFact.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
        offset += 32;
        conditionalTransferAddressHex.copy(buffer2, offset);
      }
      return this.transport.send(240, 4, conditionalTransferAddressHex ? 5 : 4, 0, buffer2).then((response) => {
        const r2 = response.slice(1, 1 + 32).toString("hex");
        const s2 = response.slice(1 + 32, 1 + 32 + 32).toString("hex");
        return {
          r: r2,
          s: s2
        };
      });
    }
    /**
     * provide quantization information before singing a deposit or withdrawal Stark powered contract call
     *
     * It shall be run following a provideERC20TokenInformation call for the given contract
     *
     * @param operationContract contract address of the token to be transferred (not present for ETH)
     * @param operationQuantization quantization used for the token to be transferred
     */
    starkProvideQuantum(operationContract, operationQuantization) {
      const operationContractHex = maybeHexBuffer(operationContract);
      const buffer2 = Buffer2.alloc(20 + 32, 0);
      if (operationContractHex) {
        operationContractHex.copy(buffer2, 0);
      }
      Buffer2.from(operationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, 20);
      return this.transport.send(240, 8, 0, 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27904) {
          return false;
        }
        throw e;
      });
    }
    /**
     * provide quantization information before singing a deposit or withdrawal Stark powered contract call using the Starkex V2 protocol
     *
     * It shall be run following a provideERC20TokenInformation call for the given contract
     *
     * @param operationContract contract address of the token to be transferred (not present for ETH)
     * @param operationQuantizationType quantization type of the token to be transferred
     * @option operationQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)
     * @option operationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) of the token to be transferred
     */
    starkProvideQuantum_v2(operationContract, operationQuantizationType, operationQuantization, operationMintableBlobOrTokenId) {
      const operationContractHex = maybeHexBuffer(operationContract);
      if (!(operationQuantizationType in starkQuantizationTypeMap)) {
        throw new Error("eth.starkProvideQuantumV2 invalid quantization type=" + operationQuantizationType);
      }
      const buffer2 = Buffer2.alloc(20 + 32 + 32, 0);
      let offset = 0;
      if (operationContractHex) {
        operationContractHex.copy(buffer2, offset);
      }
      offset += 20;
      if (operationQuantization) {
        Buffer2.from(operationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      if (operationMintableBlobOrTokenId) {
        Buffer2.from(operationMintableBlobOrTokenId.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      return this.transport.send(240, 8, starkQuantizationTypeMap[operationQuantizationType], 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27904) {
          return false;
        }
        throw e;
      });
    }
    /**
     * sign the given hash over the Stark curve
     * It is intended for speed of execution in case an unknown Stark model is pushed and should be avoided as much as possible.
     * @param path a path in BIP 32 format
     * @param hash hexadecimal hash to sign
     * @return the signature
     */
    starkUnsafeSign(path, hash2) {
      const hashHex = hexBuffer(hash2);
      const paths = splitPath(path);
      const buffer2 = Buffer2.alloc(1 + paths.length * 4 + 32);
      let offset = 0;
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      offset = 1 + 4 * paths.length;
      hashHex.copy(buffer2, offset);
      return this.transport.send(240, 10, 0, 0, buffer2).then((response) => {
        const r2 = response.slice(1, 1 + 32).toString("hex");
        const s2 = response.slice(1 + 32, 1 + 32 + 32).toString("hex");
        return {
          r: r2,
          s: s2
        };
      });
    }
    /**
     * get an Ethereum 2 BLS-12 381 public key for a given BIP 32 path.
     * @param path a path in BIP 32 format
     * @option boolDisplay optionally enable or not the display
     * @return an object with a publicKey
     * @example
     * eth.eth2GetPublicKey("12381/3600/0/0").then(o => o.publicKey)
     */
    eth2GetPublicKey(path, boolDisplay) {
      const paths = splitPath(path);
      const buffer2 = Buffer2.alloc(1 + paths.length * 4);
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      return this.transport.send(224, 14, boolDisplay ? 1 : 0, 0, buffer2).then((response) => {
        return {
          publicKey: response.slice(0, -2).toString("hex")
        };
      });
    }
    /**
     * Set the index of a Withdrawal key used as withdrawal credentials in an ETH 2 deposit contract call signature
     *
     * It shall be run before the ETH 2 deposit transaction is signed. If not called, the index is set to 0
     *
     * @param withdrawalIndex index path in the EIP 2334 path m/12381/3600/withdrawalIndex/0
     * @return True if the method was executed successfully
     */
    eth2SetWithdrawalIndex(withdrawalIndex) {
      const buffer2 = Buffer2.alloc(4, 0);
      buffer2.writeUInt32BE(withdrawalIndex, 0);
      return this.transport.send(224, 16, 0, 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27904) {
          return false;
        }
        throw e;
      });
    }
    /**
     * get a public encryption key on Curve25519 according to EIP 1024
     * @param path a path in BIP 32 format
     * @option boolDisplay optionally enable or not the display
     * @return an object with a publicKey
     * @example
     * eth.getEIP1024PublicEncryptionKey("44'/60'/0'/0/0").then(o => o.publicKey)
     */
    getEIP1024PublicEncryptionKey(path, boolDisplay) {
      const paths = splitPath(path);
      const buffer2 = Buffer2.alloc(1 + paths.length * 4);
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      return this.transport.send(224, 24, boolDisplay ? 1 : 0, 0, buffer2).then((response) => {
        return {
          publicKey: response.slice(0, -2).toString("hex")
        };
      });
    }
    /**
     * get a shared secret on Curve25519 according to EIP 1024
     * @param path a path in BIP 32 format
     * @param remotePublicKeyHex remote Curve25519 public key
     * @option boolDisplay optionally enable or not the display
     * @return an object with a shared secret
     * @example
     * eth.getEIP1024SharedSecret("44'/60'/0'/0/0", "87020e80af6e07a6e4697f091eacadb9e7e6629cb7e5a8a371689a3ed53b3d64").then(o => o.sharedSecret)
     */
    getEIP1024SharedSecret(path, remotePublicKeyHex, boolDisplay) {
      const paths = splitPath(path);
      const remotePublicKey = hexBuffer(remotePublicKeyHex);
      const buffer2 = Buffer2.alloc(1 + paths.length * 4 + 32);
      let offset = 0;
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      offset = 1 + 4 * paths.length;
      remotePublicKey.copy(buffer2, offset);
      return this.transport.send(224, 24, boolDisplay ? 1 : 0, 1, buffer2).then((response) => {
        return {
          sharedSecret: response.slice(0, -2).toString("hex")
        };
      });
    }
    /**
     * provides a trusted description of an ERC 20 token to associate a contract address with a ticker and number of decimals.
     *
     * @param data stringified buffer of ERC20 signature
     * @returns a boolean
     */
    provideERC20TokenInformation(data) {
      const buffer2 = Buffer2.from(data, "hex");
      return this.transport.send(224, 10, 0, 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27904) {
          return false;
        }
        throw e;
      });
    }
    /**
     * provides the name of a trusted binding of a plugin with a contract address and a supported method selector. This plugin will be called to interpret contract data in the following transaction signing command.
     *
     * @param payload external plugin data
     * @option signature optionally signature for the plugin
     * @returns a boolean
     */
    setExternalPlugin(payload, signature2) {
      const payloadBuffer = Buffer2.from(payload, "hex");
      const signatureBuffer = Buffer2.from(signature2 ?? "", "hex");
      const buffer2 = Buffer2.concat([payloadBuffer, signatureBuffer]);
      return this.transport.send(224, 18, 0, 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27264) {
          return false;
        } else if (e && e.statusCode === 27012) {
          return false;
        } else if (e && e.statusCode === 27904) {
          return false;
        }
        throw e;
      });
    }
    /**
     * provides the name of a trusted binding of a plugin with a contract address and a supported method selector. This plugin will be called to interpret contract data in the following transaction signing command.
     *
     * @param data stringified buffer of plugin signature
     * @returns a boolean
     */
    setPlugin(data) {
      const buffer2 = Buffer2.from(data, "hex");
      return this.transport.send(224, 22, 0, 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27264) {
          return false;
        } else if (e && e.statusCode === 27012) {
          return false;
        } else if (e && e.statusCode === 27904) {
          return false;
        }
        throw e;
      });
    }
    /**
     *  provides a trusted description of an NFT to associate a contract address with a collectionName.
     *
     * @param data stringified buffer of the NFT description
     * @returns a boolean
     */
    provideNFTInformation(data) {
      const buffer2 = Buffer2.from(data, "hex");
      return this.transport.send(224, 20, 0, 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27904) {
          throw new EthAppNftNotSupported();
        }
        throw e;
      });
    }
    /**
     * provides a domain name (like ENS) to be displayed during transactions in place of the address it is associated to. It shall be run just before a transaction involving the associated address that would be displayed on the device.
     *
     * @param data an stringied buffer of some TLV encoded data to represent the domain
     * @returns a boolean
     */
    async provideDomainName(data) {
      let APDU_FIELDS;
      (function(APDU_FIELDS2) {
        APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
        APDU_FIELDS2[APDU_FIELDS2["INS"] = 34] = "INS";
        APDU_FIELDS2[APDU_FIELDS2["P1_FIRST_CHUNK"] = 1] = "P1_FIRST_CHUNK";
        APDU_FIELDS2[APDU_FIELDS2["P1_FOLLOWING_CHUNK"] = 0] = "P1_FOLLOWING_CHUNK";
        APDU_FIELDS2[APDU_FIELDS2["P2"] = 0] = "P2";
      })(APDU_FIELDS || (APDU_FIELDS = {}));
      const buffer2 = Buffer2.from(data, "hex");
      const payload = Buffer2.concat([Buffer2.from(intAsHexBytes(buffer2.length, 2), "hex"), buffer2]);
      const bufferChunks = new Array(Math.ceil(payload.length / 256)).fill(null).map((_, i2) => payload.slice(i2 * 255, (i2 + 1) * 255));
      for (const chunk of bufferChunks) {
        const isFirstChunk = chunk === bufferChunks[0];
        await this.transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, isFirstChunk ? APDU_FIELDS.P1_FIRST_CHUNK : APDU_FIELDS.P1_FOLLOWING_CHUNK, APDU_FIELDS.P2, chunk);
      }
      return true;
    }
  }
  var WebSocketTransport$1 = {};
  const require$$0$1 = /* @__PURE__ */ getAugmentedNamespace(Transport$1);
  const require$$1$2 = /* @__PURE__ */ getAugmentedNamespace(libEs$1);
  const require$$2 = /* @__PURE__ */ getAugmentedNamespace(libEs);
  var browser$1;
  var hasRequiredBrowser;
  function requireBrowser() {
    if (hasRequiredBrowser) return browser$1;
    hasRequiredBrowser = 1;
    browser$1 = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
    return browser$1;
  }
  var __importDefault$1 = globalThis && globalThis.__importDefault || function(mod2) {
    return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
  };
  Object.defineProperty(WebSocketTransport$1, "__esModule", { value: true });
  const hw_transport_1 = __importDefault$1(require$$0$1);
  const errors_1$1 = require$$1$2;
  const logs_1 = require$$2;
  const WebSocket = globalThis.WebSocket || requireBrowser();
  const _WebSocketTransport = class _WebSocketTransport extends hw_transport_1.default {
    constructor(hook) {
      super();
      __publicField(this, "hook");
      this.hook = hook;
      hook.onDisconnect = () => {
        this.emit("disconnect");
        this.hook.rejectExchange(new errors_1$1.TransportError("WebSocket disconnected", "WSDisconnect"));
      };
    }
    static async open(url) {
      const exchangeMethods = await new Promise((resolve, reject) => {
        try {
          const socket = new WebSocket(url);
          const exchangeMethods2 = {
            resolveExchange: (_b) => {
            },
            rejectExchange: (_e) => {
            },
            onDisconnect: () => {
            },
            close: () => socket.close(),
            send: (msg) => socket.send(msg)
          };
          socket.onopen = () => {
            socket.send("open");
          };
          socket.onerror = (e) => {
            exchangeMethods2.onDisconnect();
            reject(e);
          };
          socket.onclose = () => {
            exchangeMethods2.onDisconnect();
            reject(new errors_1$1.TransportError("OpenFailed", "OpenFailed"));
          };
          socket.onmessage = (e) => {
            if (typeof e.data !== "string")
              return;
            const data = JSON.parse(e.data);
            switch (data.type) {
              case "opened":
                return resolve(exchangeMethods2);
              case "error":
                reject(new Error(data.error));
                return exchangeMethods2.rejectExchange(new errors_1$1.TransportError(data.error, "WSError"));
              case "response":
                return exchangeMethods2.resolveExchange(Buffer2.from(data.data, "hex"));
            }
          };
        } catch (e) {
          reject(e);
        }
      });
      return new _WebSocketTransport(exchangeMethods);
    }
    async exchange(apdu) {
      const hex2 = apdu.toString("hex");
      (0, logs_1.log)("apdu", "=> " + hex2);
      const res = await new Promise((resolve, reject) => {
        this.hook.rejectExchange = (e) => reject(e);
        this.hook.resolveExchange = (b) => resolve(b);
        this.hook.send(hex2);
      });
      (0, logs_1.log)("apdu", "<= " + res.toString("hex"));
      return res;
    }
    setScrambleKey() {
    }
    async close() {
      this.hook.close();
      return new Promise((success) => {
        setTimeout(() => {
          success(void 0);
        }, 200);
      });
    }
  };
  __publicField(_WebSocketTransport, "isSupported", () => Promise.resolve(typeof WebSocket === "function"));
  // this transport is not discoverable
  __publicField(_WebSocketTransport, "list", () => Promise.resolve([]));
  __publicField(_WebSocketTransport, "listen", (_observer) => ({
    unsubscribe: () => {
    }
  }));
  __publicField(_WebSocketTransport, "check", async (url, timeout = 5e3) => new Promise((resolve, reject) => {
    const socket = new WebSocket(url);
    let success = false;
    setTimeout(() => {
      socket.close();
    }, timeout);
    socket.onopen = () => {
      success = true;
      socket.close();
    };
    socket.onclose = () => {
      if (success)
        resolve(void 0);
      else {
        reject(new errors_1$1.TransportError("failed to access WebSocketTransport(" + url + ")", "WebSocketTransportNotAccessible"));
      }
    };
    socket.onerror = () => {
      reject(new errors_1$1.TransportError("failed to access WebSocketTransport(" + url + "): error", "WebSocketTransportNotAccessible"));
    };
  }));
  let WebSocketTransport = _WebSocketTransport;
  var _default = WebSocketTransport$1.default = WebSocketTransport;
  var dist$5 = {};
  var personalSign$1 = {};
  var dist$4 = {};
  var constants = {};
  var buffer$1 = {};
  var base64Js = {};
  base64Js.byteLength = byteLength;
  base64Js.toByteArray = toByteArray;
  base64Js.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
  function getLens(b64) {
    var len2 = b64.length;
    if (len2 % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len2;
    var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i2;
    for (i2 = 0; i2 < len2; i2 += 4) {
      tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
      arr[curByte++] = tmp >> 16 & 255;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output2 = [];
    for (var i2 = start; i2 < end; i2 += 3) {
      tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
      output2.push(tripletToBase64(tmp));
    }
    return output2.join("");
  }
  function fromByteArray(uint8) {
    var tmp;
    var len2 = uint8.length;
    var extraBytes = len2 % 3;
    var parts = [];
    var maxChunkLength = 16383;
    for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
      parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len2 - 1];
      parts.push(
        lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
      );
    } else if (extraBytes === 2) {
      tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
      parts.push(
        lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
      );
    }
    return parts.join("");
  }
  var ieee754 = {};
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  ieee754.read = function(buffer2, offset, isLE2, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i2 = isLE2 ? nBytes - 1 : 0;
    var d = isLE2 ? -1 : 1;
    var s2 = buffer2[offset + i2];
    i2 += d;
    e = s2 & (1 << -nBits) - 1;
    s2 >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer2[offset + i2], i2 += d, nBits -= 8) {
    }
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer2[offset + i2], i2 += d, nBits -= 8) {
    }
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s2 ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  ieee754.write = function(buffer2, value, offset, isLE2, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i2 = isLE2 ? 0 : nBytes - 1;
    var d = isLE2 ? 1 : -1;
    var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer2[offset + i2] = m & 255, i2 += d, m /= 256, mLen -= 8) {
    }
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer2[offset + i2] = e & 255, i2 += d, e /= 256, eLen -= 8) {
    }
    buffer2[offset + i2 - d] |= s2 * 128;
  };
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  (function(exports) {
    var base642 = base64Js;
    var ieee754$12 = ieee754;
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer3;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        var proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer3.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer3.isBuffer(this)) return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer3.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer3.isBuffer(this)) return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      var buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer3.prototype);
      return buf;
    }
    function Buffer3(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer3.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      var valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer3.from(valueOf, encodingOrOffset, length);
      }
      var b = fromObject(value);
      if (b) return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer3.from(
          value[Symbol.toPrimitive]("string"),
          encodingOrOffset,
          length
        );
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer3.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer3.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer3, Uint8Array);
    function assertSize(size2) {
      if (typeof size2 !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size2 < 0) {
        throw new RangeError('The value "' + size2 + '" is invalid for option "size"');
      }
    }
    function alloc(size2, fill, encoding2) {
      assertSize(size2);
      if (size2 <= 0) {
        return createBuffer(size2);
      }
      if (fill !== void 0) {
        return typeof encoding2 === "string" ? createBuffer(size2).fill(fill, encoding2) : createBuffer(size2).fill(fill);
      }
      return createBuffer(size2);
    }
    Buffer3.alloc = function(size2, fill, encoding2) {
      return alloc(size2, fill, encoding2);
    };
    function allocUnsafe(size2) {
      assertSize(size2);
      return createBuffer(size2 < 0 ? 0 : checked(size2) | 0);
    }
    Buffer3.allocUnsafe = function(size2) {
      return allocUnsafe(size2);
    };
    Buffer3.allocUnsafeSlow = function(size2) {
      return allocUnsafe(size2);
    };
    function fromString(string2, encoding2) {
      if (typeof encoding2 !== "string" || encoding2 === "") {
        encoding2 = "utf8";
      }
      if (!Buffer3.isEncoding(encoding2)) {
        throw new TypeError("Unknown encoding: " + encoding2);
      }
      var length = byteLength2(string2, encoding2) | 0;
      var buf = createBuffer(length);
      var actual = buf.write(string2, encoding2);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array2) {
      var length = array2.length < 0 ? 0 : checked(array2.length) | 0;
      var buf = createBuffer(length);
      for (var i2 = 0; i2 < length; i2 += 1) {
        buf[i2] = array2[i2] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array2, byteOffset, length) {
      if (byteOffset < 0 || array2.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array2.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      var buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array2);
      } else if (length === void 0) {
        buf = new Uint8Array(array2, byteOffset);
      } else {
        buf = new Uint8Array(array2, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer3.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer3.isBuffer(obj)) {
        var len2 = checked(obj.length) | 0;
        var buf = createBuffer(len2);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len2);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer3.alloc(+length);
    }
    Buffer3.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer3.prototype;
    };
    Buffer3.compare = function compare2(a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer3.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array)) b = Buffer3.from(b, b.offset, b.byteLength);
      if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b) return 0;
      var x = a.length;
      var y = b.length;
      for (var i2 = 0, len2 = Math.min(x, y); i2 < len2; ++i2) {
        if (a[i2] !== b[i2]) {
          x = a[i2];
          y = b[i2];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    Buffer3.isEncoding = function isEncoding(encoding2) {
      switch (String(encoding2).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer3.concat = function concat2(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer3.alloc(0);
      }
      var i2;
      if (length === void 0) {
        length = 0;
        for (i2 = 0; i2 < list.length; ++i2) {
          length += list[i2].length;
        }
      }
      var buffer2 = Buffer3.allocUnsafe(length);
      var pos = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        var buf = list[i2];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer2.length) {
            Buffer3.from(buf).copy(buffer2, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer2,
              buf,
              pos
            );
          }
        } else if (!Buffer3.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer2, pos);
        }
        pos += buf.length;
      }
      return buffer2;
    };
    function byteLength2(string2, encoding2) {
      if (Buffer3.isBuffer(string2)) {
        return string2.length;
      }
      if (ArrayBuffer.isView(string2) || isInstance(string2, ArrayBuffer)) {
        return string2.byteLength;
      }
      if (typeof string2 !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string2
        );
      }
      var len2 = string2.length;
      var mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len2 === 0) return 0;
      var loweredCase = false;
      for (; ; ) {
        switch (encoding2) {
          case "ascii":
          case "latin1":
          case "binary":
            return len2;
          case "utf8":
          case "utf-8":
            return utf8ToBytes2(string2).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len2 * 2;
          case "hex":
            return len2 >>> 1;
          case "base64":
            return base64ToBytes(string2).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes2(string2).length;
            }
            encoding2 = ("" + encoding2).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer3.byteLength = byteLength2;
    function slowToString(encoding2, start, end) {
      var loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding2) encoding2 = "utf8";
      while (true) {
        switch (encoding2) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding2);
            encoding2 = (encoding2 + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer3.prototype._isBuffer = true;
    function swap(b, n, m) {
      var i2 = b[n];
      b[n] = b[m];
      b[m] = i2;
    }
    Buffer3.prototype.swap16 = function swap16() {
      var len2 = this.length;
      if (len2 % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i2 = 0; i2 < len2; i2 += 2) {
        swap(this, i2, i2 + 1);
      }
      return this;
    };
    Buffer3.prototype.swap32 = function swap32() {
      var len2 = this.length;
      if (len2 % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i2 = 0; i2 < len2; i2 += 4) {
        swap(this, i2, i2 + 3);
        swap(this, i2 + 1, i2 + 2);
      }
      return this;
    };
    Buffer3.prototype.swap64 = function swap64() {
      var len2 = this.length;
      if (len2 % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i2 = 0; i2 < len2; i2 += 8) {
        swap(this, i2, i2 + 7);
        swap(this, i2 + 1, i2 + 6);
        swap(this, i2 + 2, i2 + 5);
        swap(this, i2 + 3, i2 + 4);
      }
      return this;
    };
    Buffer3.prototype.toString = function toString() {
      var length = this.length;
      if (length === 0) return "";
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
    Buffer3.prototype.equals = function equals(b) {
      if (!Buffer3.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
      if (this === b) return true;
      return Buffer3.compare(this, b) === 0;
    };
    Buffer3.prototype.inspect = function inspect() {
      var str = "";
      var max2 = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max2).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max2) str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;
    }
    Buffer3.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer3.from(target, target.offset, target.byteLength);
      }
      if (!Buffer3.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      var x = thisEnd - thisStart;
      var y = end - start;
      var len2 = Math.min(x, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i2 = 0; i2 < len2; ++i2) {
        if (thisCopy[i2] !== targetCopy[i2]) {
          x = thisCopy[i2];
          y = targetCopy[i2];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer2, val, byteOffset, encoding2, dir) {
      if (buffer2.length === 0) return -1;
      if (typeof byteOffset === "string") {
        encoding2 = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer2.length - 1;
      }
      if (byteOffset < 0) byteOffset = buffer2.length + byteOffset;
      if (byteOffset >= buffer2.length) {
        if (dir) return -1;
        else byteOffset = buffer2.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
      }
      if (typeof val === "string") {
        val = Buffer3.from(val, encoding2);
      }
      if (Buffer3.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer2, val, byteOffset, encoding2, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer2, [val], byteOffset, encoding2, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding2, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;
      if (encoding2 !== void 0) {
        encoding2 = String(encoding2).toLowerCase();
        if (encoding2 === "ucs2" || encoding2 === "ucs-2" || encoding2 === "utf16le" || encoding2 === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i3) {
        if (indexSize === 1) {
          return buf[i3];
        } else {
          return buf.readUInt16BE(i3 * indexSize);
        }
      }
      var i2;
      if (dir) {
        var foundIndex = -1;
        for (i2 = byteOffset; i2 < arrLength; i2++) {
          if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i2;
            if (i2 - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1) i2 -= i2 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i2 = byteOffset; i2 >= 0; i2--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i2 + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found) return i2;
        }
      }
      return -1;
    }
    Buffer3.prototype.includes = function includes(val, byteOffset, encoding2) {
      return this.indexOf(val, byteOffset, encoding2) !== -1;
    };
    Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding2) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding2, true);
    };
    Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding2) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding2, false);
    };
    function hexWrite(buf, string2, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      var strLen = string2.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i2 = 0; i2 < length; ++i2) {
        var parsed = parseInt(string2.substr(i2 * 2, 2), 16);
        if (numberIsNaN(parsed)) return i2;
        buf[offset + i2] = parsed;
      }
      return i2;
    }
    function utf8Write(buf, string2, offset, length) {
      return blitBuffer(utf8ToBytes2(string2, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string2, offset, length) {
      return blitBuffer(asciiToBytes(string2), buf, offset, length);
    }
    function base64Write(buf, string2, offset, length) {
      return blitBuffer(base64ToBytes(string2), buf, offset, length);
    }
    function ucs2Write(buf, string2, offset, length) {
      return blitBuffer(utf16leToBytes(string2, buf.length - offset), buf, offset, length);
    }
    Buffer3.prototype.write = function write(string2, offset, length, encoding2) {
      if (offset === void 0) {
        encoding2 = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding2 = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding2 === void 0) encoding2 = "utf8";
        } else {
          encoding2 = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining) length = remaining;
      if (string2.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding2) encoding2 = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding2) {
          case "hex":
            return hexWrite(this, string2, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string2, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string2, offset, length);
          case "base64":
            return base64Write(this, string2, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string2, offset, length);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding2);
            encoding2 = ("" + encoding2).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer3.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base642.fromByteArray(buf);
      } else {
        return base642.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];
      var i2 = start;
      while (i2 < end) {
        var firstByte = buf[i2];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i2 + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i2 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              fourthByte = buf[i2 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i2 += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      var len2 = codePoints.length;
      if (len2 <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      var res = "";
      var i2 = 0;
      while (i2 < len2) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      var len2 = buf.length;
      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len2) end = len2;
      var out = "";
      for (var i2 = start; i2 < end; ++i2) {
        out += hexSliceLookupTable[buf[i2]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      var bytes2 = buf.slice(start, end);
      var res = "";
      for (var i2 = 0; i2 < bytes2.length - 1; i2 += 2) {
        res += String.fromCharCode(bytes2[i2] + bytes2[i2 + 1] * 256);
      }
      return res;
    }
    Buffer3.prototype.slice = function slice(start, end) {
      var len2 = this.length;
      start = ~~start;
      end = end === void 0 ? len2 : ~~end;
      if (start < 0) {
        start += len2;
        if (start < 0) start = 0;
      } else if (start > len2) {
        start = len2;
      }
      if (end < 0) {
        end += len2;
        if (end < 0) end = 0;
      } else if (end > len2) {
        end = len2;
      }
      if (end < start) end = start;
      var newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer3.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
      if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength3, this.length);
      var val = this[offset];
      var mul = 1;
      var i2 = 0;
      while (++i2 < byteLength3 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      return val;
    };
    Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength3, this.length);
      }
      var val = this[offset + --byteLength3];
      var mul = 1;
      while (byteLength3 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength3] * mul;
      }
      return val;
    };
    Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength3, this.length);
      var val = this[offset];
      var mul = 1;
      var i2 = 0;
      while (++i2 < byteLength3 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength3, this.length);
      var i2 = byteLength3;
      var mul = 1;
      var val = this[offset + --i2];
      while (i2 > 0 && (mul *= 256)) {
        val += this[offset + --i2] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128)) return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754$12.read(this, offset, true, 23, 4);
    };
    Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754$12.read(this, offset, false, 23, 4);
    };
    Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754$12.read(this, offset, true, 52, 8);
    };
    Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754$12.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max2, min2) {
      if (!Buffer3.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max2 || value < min2) throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
    }
    Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset, byteLength3, maxBytes, 0);
      }
      var mul = 1;
      var i2 = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength3 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset, byteLength3, maxBytes, 0);
      }
      var i2 = byteLength3 - 1;
      var mul = 1;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit2 = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset, byteLength3, limit2 - 1, -limit2);
      }
      var i2 = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength3 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit2 = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset, byteLength3, limit2 - 1, -limit2);
      }
      var i2 = byteLength3 - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
      if (value < 0) value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0) value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function checkIEEE754(buf, value, offset, ext, max2, min2) {
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
      if (offset < 0) throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      ieee754$12.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      ieee754$12.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer3.isBuffer(target)) throw new TypeError("argument should be a Buffer");
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len2 = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len2;
    };
    Buffer3.prototype.fill = function fill(val, start, end, encoding2) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding2 = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding2 = end;
          end = this.length;
        }
        if (encoding2 !== void 0 && typeof encoding2 !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding2 === "string" && !Buffer3.isEncoding(encoding2)) {
          throw new TypeError("Unknown encoding: " + encoding2);
        }
        if (val.length === 1) {
          var code2 = val.charCodeAt(0);
          if (encoding2 === "utf8" && code2 < 128 || encoding2 === "latin1") {
            val = code2;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      var i2;
      if (typeof val === "number") {
        for (i2 = start; i2 < end; ++i2) {
          this[i2] = val;
        }
      } else {
        var bytes2 = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding2);
        var len2 = bytes2.length;
        if (len2 === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i2 = 0; i2 < end - start; ++i2) {
          this[i2 + start] = bytes2[i2 % len2];
        }
      }
      return this;
    };
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2) return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes2(string2, units2) {
      units2 = units2 || Infinity;
      var codePoint;
      var length = string2.length;
      var leadSurrogate = null;
      var bytes2 = [];
      for (var i2 = 0; i2 < length; ++i2) {
        codePoint = string2.charCodeAt(i2);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units2 -= 3) > -1) bytes2.push(239, 191, 189);
              continue;
            } else if (i2 + 1 === length) {
              if ((units2 -= 3) > -1) bytes2.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units2 -= 3) > -1) bytes2.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units2 -= 3) > -1) bytes2.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units2 -= 1) < 0) break;
          bytes2.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units2 -= 2) < 0) break;
          bytes2.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units2 -= 3) < 0) break;
          bytes2.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units2 -= 4) < 0) break;
          bytes2.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes2;
    }
    function asciiToBytes(str) {
      var byteArray = [];
      for (var i2 = 0; i2 < str.length; ++i2) {
        byteArray.push(str.charCodeAt(i2) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units2) {
      var c, hi, lo;
      var byteArray = [];
      for (var i2 = 0; i2 < str.length; ++i2) {
        if ((units2 -= 2) < 0) break;
        c = str.charCodeAt(i2);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base642.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      for (var i2 = 0; i2 < length; ++i2) {
        if (i2 + offset >= dst.length || i2 >= src.length) break;
        dst[i2 + offset] = src[i2];
      }
      return i2;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      var alphabet = "0123456789abcdef";
      var table = new Array(256);
      for (var i2 = 0; i2 < 16; ++i2) {
        var i16 = i2 * 16;
        for (var j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i2] + alphabet[j];
        }
      }
      return table;
    }();
  })(buffer$1);
  var secp256k1$1 = {};
  var secp256k1 = {};
  var sha256 = {};
  var _md = {};
  var _assert$1 = {};
  Object.defineProperty(_assert$1, "__esModule", { value: true });
  _assert$1.output = _assert$1.exists = _assert$1.hash = _assert$1.bytes = _assert$1.bool = _assert$1.number = _assert$1.isBytes = void 0;
  function number$2(n) {
    if (!Number.isSafeInteger(n) || n < 0)
      throw new Error(`positive integer expected, not ${n}`);
  }
  _assert$1.number = number$2;
  function bool$1(b) {
    if (typeof b !== "boolean")
      throw new Error(`boolean expected, not ${b}`);
  }
  _assert$1.bool = bool$1;
  function isBytes$2(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
  }
  _assert$1.isBytes = isBytes$2;
  function bytes$3(b, ...lengths) {
    if (!isBytes$2(b))
      throw new Error("Uint8Array expected");
    if (lengths.length > 0 && !lengths.includes(b.length))
      throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
  }
  _assert$1.bytes = bytes$3;
  function hash(h) {
    if (typeof h !== "function" || typeof h.create !== "function")
      throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number$2(h.outputLen);
    number$2(h.blockLen);
  }
  _assert$1.hash = hash;
  function exists(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  _assert$1.exists = exists;
  function output(out, instance) {
    bytes$3(out);
    const min2 = instance.outputLen;
    if (out.length < min2) {
      throw new Error(`digestInto() expects output buffer of length at least ${min2}`);
    }
  }
  _assert$1.output = output;
  const assert$3 = { number: number$2, bool: bool$1, bytes: bytes$3, hash, exists, output };
  _assert$1.default = assert$3;
  var utils$6 = {};
  var crypto$2 = {};
  Object.defineProperty(crypto$2, "__esModule", { value: true });
  crypto$2.crypto = void 0;
  crypto$2.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  (function(exports) {
    /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.byteSwap32 = exports.byteSwapIfBE = exports.byteSwap = exports.isLE = exports.rotl = exports.rotr = exports.createView = exports.u32 = exports.u8 = exports.isBytes = void 0;
    const crypto_1 = crypto$2;
    const _assert_js_12 = _assert$1;
    function isBytes2(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    exports.isBytes = isBytes2;
    const u82 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.u8 = u82;
    const u322 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports.u32 = u322;
    const createView2 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.createView = createView2;
    const rotr2 = (word, shift) => word << 32 - shift | word >>> shift;
    exports.rotr = rotr2;
    const rotl2 = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
    exports.rotl = rotl2;
    exports.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    const byteSwap2 = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    exports.byteSwap = byteSwap2;
    exports.byteSwapIfBE = exports.isLE ? (n) => n : (n) => (0, exports.byteSwap)(n);
    function byteSwap322(arr) {
      for (let i2 = 0; i2 < arr.length; i2++) {
        arr[i2] = (0, exports.byteSwap)(arr[i2]);
      }
    }
    exports.byteSwap32 = byteSwap322;
    const hexes2 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i2) => i2.toString(16).padStart(2, "0"));
    function bytesToHex2(bytes2) {
      (0, _assert_js_12.bytes)(bytes2);
      let hex2 = "";
      for (let i2 = 0; i2 < bytes2.length; i2++) {
        hex2 += hexes2[bytes2[i2]];
      }
      return hex2;
    }
    exports.bytesToHex = bytesToHex2;
    const asciis2 = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
    function asciiToBase162(char) {
      if (char >= asciis2._0 && char <= asciis2._9)
        return char - asciis2._0;
      if (char >= asciis2._A && char <= asciis2._F)
        return char - (asciis2._A - 10);
      if (char >= asciis2._a && char <= asciis2._f)
        return char - (asciis2._a - 10);
      return;
    }
    function hexToBytes2(hex2) {
      if (typeof hex2 !== "string")
        throw new Error("hex string expected, got " + typeof hex2);
      const hl = hex2.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + hl);
      const array2 = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase162(hex2.charCodeAt(hi));
        const n2 = asciiToBase162(hex2.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex2[hi] + hex2[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array2[ai] = n1 * 16 + n2;
      }
      return array2;
    }
    exports.hexToBytes = hexToBytes2;
    const nextTick2 = async () => {
    };
    exports.nextTick = nextTick2;
    async function asyncLoop2(iters, tick, cb) {
      let ts = Date.now();
      for (let i2 = 0; i2 < iters; i2++) {
        cb(i2);
        const diff2 = Date.now() - ts;
        if (diff2 >= 0 && diff2 < tick)
          continue;
        await (0, exports.nextTick)();
        ts += diff2;
      }
    }
    exports.asyncLoop = asyncLoop2;
    function utf8ToBytes2(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports.utf8ToBytes = utf8ToBytes2;
    function toBytes2(data) {
      if (typeof data === "string")
        data = utf8ToBytes2(data);
      (0, _assert_js_12.bytes)(data);
      return data;
    }
    exports.toBytes = toBytes2;
    function concatBytes2(...arrays) {
      let sum = 0;
      for (let i2 = 0; i2 < arrays.length; i2++) {
        const a = arrays[i2];
        (0, _assert_js_12.bytes)(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i2 = 0, pad = 0; i2 < arrays.length; i2++) {
        const a = arrays[i2];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    exports.concatBytes = concatBytes2;
    class Hash2 {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    }
    exports.Hash = Hash2;
    const toStr2 = {}.toString;
    function checkOpts2(defaults, opts) {
      if (opts !== void 0 && toStr2.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    exports.checkOpts = checkOpts2;
    function wrapConstructor2(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    exports.wrapConstructor = wrapConstructor2;
    function wrapConstructorWithOpts2(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapConstructorWithOpts = wrapConstructorWithOpts2;
    function wrapXOFConstructorWithOpts2(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts2;
    function randomBytes2(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    exports.randomBytes = randomBytes2;
  })(utils$6);
  Object.defineProperty(_md, "__esModule", { value: true });
  _md.HashMD = _md.Maj = _md.Chi = void 0;
  const _assert_js_1$2 = _assert$1;
  const utils_js_1$a = utils$6;
  function setBigUint64(view, byteOffset, value, isLE2) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE2);
    const _32n2 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n2 & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE2 ? 4 : 0;
    const l = isLE2 ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE2);
    view.setUint32(byteOffset + l, wl, isLE2);
  }
  const Chi = (a, b, c) => a & b ^ ~a & c;
  _md.Chi = Chi;
  const Maj = (a, b, c) => a & b ^ a & c ^ b & c;
  _md.Maj = Maj;
  class HashMD extends utils_js_1$a.Hash {
    constructor(blockLen, outputLen, padOffset, isLE2) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.padOffset = padOffset;
      this.isLE = isLE2;
      this.finished = false;
      this.length = 0;
      this.pos = 0;
      this.destroyed = false;
      this.buffer = new Uint8Array(blockLen);
      this.view = (0, utils_js_1$a.createView)(this.buffer);
    }
    update(data) {
      (0, _assert_js_1$2.exists)(this);
      const { view, buffer: buffer2, blockLen } = this;
      data = (0, utils_js_1$a.toBytes)(data);
      const len2 = data.length;
      for (let pos = 0; pos < len2; ) {
        const take = Math.min(blockLen - this.pos, len2 - pos);
        if (take === blockLen) {
          const dataView = (0, utils_js_1$a.createView)(data);
          for (; blockLen <= len2 - pos; pos += blockLen)
            this.process(dataView, pos);
          continue;
        }
        buffer2.set(data.subarray(pos, pos + take), this.pos);
        this.pos += take;
        pos += take;
        if (this.pos === blockLen) {
          this.process(view, 0);
          this.pos = 0;
        }
      }
      this.length += data.length;
      this.roundClean();
      return this;
    }
    digestInto(out) {
      (0, _assert_js_1$2.exists)(this);
      (0, _assert_js_1$2.output)(out, this);
      this.finished = true;
      const { buffer: buffer2, view, blockLen, isLE: isLE2 } = this;
      let { pos } = this;
      buffer2[pos++] = 128;
      this.buffer.subarray(pos).fill(0);
      if (this.padOffset > blockLen - pos) {
        this.process(view, 0);
        pos = 0;
      }
      for (let i2 = pos; i2 < blockLen; i2++)
        buffer2[i2] = 0;
      setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
      this.process(view, 0);
      const oview = (0, utils_js_1$a.createView)(out);
      const len2 = this.outputLen;
      if (len2 % 4)
        throw new Error("_sha2: outputLen should be aligned to 32bit");
      const outLen = len2 / 4;
      const state = this.get();
      if (outLen > state.length)
        throw new Error("_sha2: outputLen bigger than state");
      for (let i2 = 0; i2 < outLen; i2++)
        oview.setUint32(4 * i2, state[i2], isLE2);
    }
    digest() {
      const { buffer: buffer2, outputLen } = this;
      this.digestInto(buffer2);
      const res = buffer2.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      to || (to = new this.constructor());
      to.set(...this.get());
      const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
      to.length = length;
      to.pos = pos;
      to.finished = finished;
      to.destroyed = destroyed;
      if (length % blockLen)
        to.buffer.set(buffer2);
      return to;
    }
  }
  _md.HashMD = HashMD;
  Object.defineProperty(sha256, "__esModule", { value: true });
  sha256.sha224 = sha256.sha256 = void 0;
  const _md_js_1 = _md;
  const utils_js_1$9 = utils$6;
  const SHA256_K = /* @__PURE__ */ new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  const SHA256_IV = /* @__PURE__ */ new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ]);
  const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
  class SHA256 extends _md_js_1.HashMD {
    constructor() {
      super(64, 32, 8, false);
      this.A = SHA256_IV[0] | 0;
      this.B = SHA256_IV[1] | 0;
      this.C = SHA256_IV[2] | 0;
      this.D = SHA256_IV[3] | 0;
      this.E = SHA256_IV[4] | 0;
      this.F = SHA256_IV[5] | 0;
      this.G = SHA256_IV[6] | 0;
      this.H = SHA256_IV[7] | 0;
    }
    get() {
      const { A, B, C, D, E, F, G, H } = this;
      return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
      this.E = E | 0;
      this.F = F | 0;
      this.G = G | 0;
      this.H = H | 0;
    }
    process(view, offset) {
      for (let i2 = 0; i2 < 16; i2++, offset += 4)
        SHA256_W[i2] = view.getUint32(offset, false);
      for (let i2 = 16; i2 < 64; i2++) {
        const W15 = SHA256_W[i2 - 15];
        const W2 = SHA256_W[i2 - 2];
        const s0 = (0, utils_js_1$9.rotr)(W15, 7) ^ (0, utils_js_1$9.rotr)(W15, 18) ^ W15 >>> 3;
        const s1 = (0, utils_js_1$9.rotr)(W2, 17) ^ (0, utils_js_1$9.rotr)(W2, 19) ^ W2 >>> 10;
        SHA256_W[i2] = s1 + SHA256_W[i2 - 7] + s0 + SHA256_W[i2 - 16] | 0;
      }
      let { A, B, C, D, E, F, G, H } = this;
      for (let i2 = 0; i2 < 64; i2++) {
        const sigma1 = (0, utils_js_1$9.rotr)(E, 6) ^ (0, utils_js_1$9.rotr)(E, 11) ^ (0, utils_js_1$9.rotr)(E, 25);
        const T1 = H + sigma1 + (0, _md_js_1.Chi)(E, F, G) + SHA256_K[i2] + SHA256_W[i2] | 0;
        const sigma0 = (0, utils_js_1$9.rotr)(A, 2) ^ (0, utils_js_1$9.rotr)(A, 13) ^ (0, utils_js_1$9.rotr)(A, 22);
        const T2 = sigma0 + (0, _md_js_1.Maj)(A, B, C) | 0;
        H = G;
        G = F;
        F = E;
        E = D + T1 | 0;
        D = C;
        C = B;
        B = A;
        A = T1 + T2 | 0;
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      E = E + this.E | 0;
      F = F + this.F | 0;
      G = G + this.G | 0;
      H = H + this.H | 0;
      this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
      SHA256_W.fill(0);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
      this.buffer.fill(0);
    }
  }
  class SHA224 extends SHA256 {
    constructor() {
      super();
      this.A = 3238371032 | 0;
      this.B = 914150663 | 0;
      this.C = 812702999 | 0;
      this.D = 4144912697 | 0;
      this.E = 4290775857 | 0;
      this.F = 1750603025 | 0;
      this.G = 1694076839 | 0;
      this.H = 3204075428 | 0;
      this.outputLen = 28;
    }
  }
  sha256.sha256 = (0, utils_js_1$9.wrapConstructor)(() => new SHA256());
  sha256.sha224 = (0, utils_js_1$9.wrapConstructor)(() => new SHA224());
  const require$$1$1 = /* @__PURE__ */ getAugmentedNamespace(utils$7);
  var _shortw_utils = {};
  var hmac = {};
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hmac = exports.HMAC = void 0;
    const _assert_js_12 = _assert$1;
    const utils_js_12 = utils$6;
    class HMAC extends utils_js_12.Hash {
      constructor(hash2, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_12.hash)(hash2);
        const key2 = (0, utils_js_12.toBytes)(_key);
        this.iHash = hash2.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key2.length > blockLen ? hash2.create().update(key2).digest() : key2);
        for (let i2 = 0; i2 < pad.length; i2++)
          pad[i2] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash2.create();
        for (let i2 = 0; i2 < pad.length; i2++)
          pad[i2] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        (0, _assert_js_12.exists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, _assert_js_12.exists)(this);
        (0, _assert_js_12.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    }
    exports.HMAC = HMAC;
    const hmac2 = (hash2, key2, message) => new HMAC(hash2, key2).update(message).digest();
    exports.hmac = hmac2;
    exports.hmac.create = (hash2, key2) => new HMAC(hash2, key2);
  })(hmac);
  var weierstrass = {};
  var curve = {};
  var modular = {};
  var utils$5 = {};
  Object.defineProperty(utils$5, "__esModule", { value: true });
  utils$5.bitMask = void 0;
  utils$5.isBytes = isBytes$1;
  utils$5.abytes = abytes$1;
  utils$5.bytesToHex = bytesToHex$1;
  utils$5.numberToHexUnpadded = numberToHexUnpadded;
  utils$5.hexToNumber = hexToNumber$1;
  utils$5.hexToBytes = hexToBytes$1;
  utils$5.bytesToNumberBE = bytesToNumberBE;
  utils$5.bytesToNumberLE = bytesToNumberLE;
  utils$5.numberToBytesBE = numberToBytesBE;
  utils$5.numberToBytesLE = numberToBytesLE;
  utils$5.numberToVarBytesBE = numberToVarBytesBE;
  utils$5.ensureBytes = ensureBytes;
  utils$5.concatBytes = concatBytes$1;
  utils$5.equalBytes = equalBytes;
  utils$5.utf8ToBytes = utf8ToBytes$1;
  utils$5.bitLen = bitLen;
  utils$5.bitGet = bitGet;
  utils$5.bitSet = bitSet;
  utils$5.createHmacDrbg = createHmacDrbg;
  utils$5.validateObject = validateObject;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const _0n$4 = /* @__PURE__ */ BigInt(0);
  const _1n$4 = /* @__PURE__ */ BigInt(1);
  const _2n$3 = /* @__PURE__ */ BigInt(2);
  function isBytes$1(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
  }
  function abytes$1(item) {
    if (!isBytes$1(item))
      throw new Error("Uint8Array expected");
  }
  const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i2) => i2.toString(16).padStart(2, "0"));
  function bytesToHex$1(bytes2) {
    abytes$1(bytes2);
    let hex2 = "";
    for (let i2 = 0; i2 < bytes2.length; i2++) {
      hex2 += hexes[bytes2[i2]];
    }
    return hex2;
  }
  function numberToHexUnpadded(num) {
    const hex2 = num.toString(16);
    return hex2.length & 1 ? `0${hex2}` : hex2;
  }
  function hexToNumber$1(hex2) {
    if (typeof hex2 !== "string")
      throw new Error("hex string expected, got " + typeof hex2);
    return BigInt(hex2 === "" ? "0" : `0x${hex2}`);
  }
  const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
  function asciiToBase16(char) {
    if (char >= asciis._0 && char <= asciis._9)
      return char - asciis._0;
    if (char >= asciis._A && char <= asciis._F)
      return char - (asciis._A - 10);
    if (char >= asciis._a && char <= asciis._f)
      return char - (asciis._a - 10);
    return;
  }
  function hexToBytes$1(hex2) {
    if (typeof hex2 !== "string")
      throw new Error("hex string expected, got " + typeof hex2);
    const hl = hex2.length;
    const al = hl / 2;
    if (hl % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + hl);
    const array2 = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
      const n1 = asciiToBase16(hex2.charCodeAt(hi));
      const n2 = asciiToBase16(hex2.charCodeAt(hi + 1));
      if (n1 === void 0 || n2 === void 0) {
        const char = hex2[hi] + hex2[hi + 1];
        throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
      }
      array2[ai] = n1 * 16 + n2;
    }
    return array2;
  }
  function bytesToNumberBE(bytes2) {
    return hexToNumber$1(bytesToHex$1(bytes2));
  }
  function bytesToNumberLE(bytes2) {
    abytes$1(bytes2);
    return hexToNumber$1(bytesToHex$1(Uint8Array.from(bytes2).reverse()));
  }
  function numberToBytesBE(n, len2) {
    return hexToBytes$1(n.toString(16).padStart(len2 * 2, "0"));
  }
  function numberToBytesLE(n, len2) {
    return numberToBytesBE(n, len2).reverse();
  }
  function numberToVarBytesBE(n) {
    return hexToBytes$1(numberToHexUnpadded(n));
  }
  function ensureBytes(title, hex2, expectedLength) {
    let res;
    if (typeof hex2 === "string") {
      try {
        res = hexToBytes$1(hex2);
      } catch (e) {
        throw new Error(`${title} must be valid hex string, got "${hex2}". Cause: ${e}`);
      }
    } else if (isBytes$1(hex2)) {
      res = Uint8Array.from(hex2);
    } else {
      throw new Error(`${title} must be hex string or Uint8Array`);
    }
    const len2 = res.length;
    if (typeof expectedLength === "number" && len2 !== expectedLength)
      throw new Error(`${title} expected ${expectedLength} bytes, got ${len2}`);
    return res;
  }
  function concatBytes$1(...arrays) {
    let sum = 0;
    for (let i2 = 0; i2 < arrays.length; i2++) {
      const a = arrays[i2];
      abytes$1(a);
      sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i2 = 0, pad = 0; i2 < arrays.length; i2++) {
      const a = arrays[i2];
      res.set(a, pad);
      pad += a.length;
    }
    return res;
  }
  function equalBytes(a, b) {
    if (a.length !== b.length)
      return false;
    let diff2 = 0;
    for (let i2 = 0; i2 < a.length; i2++)
      diff2 |= a[i2] ^ b[i2];
    return diff2 === 0;
  }
  function utf8ToBytes$1(str) {
    if (typeof str !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str));
  }
  function bitLen(n) {
    let len2;
    for (len2 = 0; n > _0n$4; n >>= _1n$4, len2 += 1)
      ;
    return len2;
  }
  function bitGet(n, pos) {
    return n >> BigInt(pos) & _1n$4;
  }
  function bitSet(n, pos, value) {
    return n | (value ? _1n$4 : _0n$4) << BigInt(pos);
  }
  const bitMask = (n) => (_2n$3 << BigInt(n - 1)) - _1n$4;
  utils$5.bitMask = bitMask;
  const u8n = (data) => new Uint8Array(data);
  const u8fr = (arr) => Uint8Array.from(arr);
  function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== "number" || hashLen < 2)
      throw new Error("hashLen must be a number");
    if (typeof qByteLen !== "number" || qByteLen < 2)
      throw new Error("qByteLen must be a number");
    if (typeof hmacFn !== "function")
      throw new Error("hmacFn must be a function");
    let v = u8n(hashLen);
    let k = u8n(hashLen);
    let i2 = 0;
    const reset = () => {
      v.fill(1);
      k.fill(0);
      i2 = 0;
    };
    const h = (...b) => hmacFn(k, v, ...b);
    const reseed = (seed = u8n()) => {
      k = h(u8fr([0]), seed);
      v = h();
      if (seed.length === 0)
        return;
      k = h(u8fr([1]), seed);
      v = h();
    };
    const gen2 = () => {
      if (i2++ >= 1e3)
        throw new Error("drbg: tried 1000 values");
      let len2 = 0;
      const out = [];
      while (len2 < qByteLen) {
        v = h();
        const sl = v.slice();
        out.push(sl);
        len2 += v.length;
      }
      return concatBytes$1(...out);
    };
    const genUntil = (seed, pred) => {
      reset();
      reseed(seed);
      let res = void 0;
      while (!(res = pred(gen2())))
        reseed();
      reset();
      return res;
    };
    return genUntil;
  }
  const validatorFns = {
    bigint: (val) => typeof val === "bigint",
    function: (val) => typeof val === "function",
    boolean: (val) => typeof val === "boolean",
    string: (val) => typeof val === "string",
    stringOrUint8Array: (val) => typeof val === "string" || isBytes$1(val),
    isSafeInteger: (val) => Number.isSafeInteger(val),
    array: (val) => Array.isArray(val),
    field: (val, object) => object.Fp.isValid(val),
    hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
  };
  function validateObject(object, validators, optValidators = {}) {
    const checkField = (fieldName, type, isOptional) => {
      const checkVal = validatorFns[type];
      if (typeof checkVal !== "function")
        throw new Error(`Invalid validator "${type}", expected function`);
      const val = object[fieldName];
      if (isOptional && val === void 0)
        return;
      if (!checkVal(val, object)) {
        throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
      }
    };
    for (const [fieldName, type] of Object.entries(validators))
      checkField(fieldName, type, false);
    for (const [fieldName, type] of Object.entries(optValidators))
      checkField(fieldName, type, true);
    return object;
  }
  Object.defineProperty(modular, "__esModule", { value: true });
  modular.isNegativeLE = void 0;
  modular.mod = mod;
  modular.pow = pow;
  modular.pow2 = pow2;
  modular.invert = invert;
  modular.tonelliShanks = tonelliShanks;
  modular.FpSqrt = FpSqrt;
  modular.validateField = validateField;
  modular.FpPow = FpPow;
  modular.FpInvertBatch = FpInvertBatch;
  modular.FpDiv = FpDiv;
  modular.FpIsSquare = FpIsSquare;
  modular.nLength = nLength;
  modular.Field = Field;
  modular.FpSqrtOdd = FpSqrtOdd;
  modular.FpSqrtEven = FpSqrtEven;
  modular.hashToPrivateScalar = hashToPrivateScalar;
  modular.getFieldBytesLength = getFieldBytesLength;
  modular.getMinHashLength = getMinHashLength;
  modular.mapHashToField = mapHashToField;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const utils_js_1$8 = utils$5;
  const _0n$3 = BigInt(0), _1n$3 = BigInt(1), _2n$2 = BigInt(2), _3n = BigInt(3);
  const _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
  BigInt(9);
  BigInt(16);
  function mod(a, b) {
    const result = a % b;
    return result >= _0n$3 ? result : b + result;
  }
  function pow(num, power, modulo) {
    if (modulo <= _0n$3 || power < _0n$3)
      throw new Error("Expected power/modulo > 0");
    if (modulo === _1n$3)
      return _0n$3;
    let res = _1n$3;
    while (power > _0n$3) {
      if (power & _1n$3)
        res = res * num % modulo;
      num = num * num % modulo;
      power >>= _1n$3;
    }
    return res;
  }
  function pow2(x, power, modulo) {
    let res = x;
    while (power-- > _0n$3) {
      res *= res;
      res %= modulo;
    }
    return res;
  }
  function invert(number2, modulo) {
    if (number2 === _0n$3 || modulo <= _0n$3) {
      throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
    }
    let a = mod(number2, modulo);
    let b = modulo;
    let x = _0n$3, u = _1n$3;
    while (a !== _0n$3) {
      const q = b / a;
      const r2 = b % a;
      const m = x - u * q;
      b = a, a = r2, x = u, u = m;
    }
    const gcd = b;
    if (gcd !== _1n$3)
      throw new Error("invert: does not exist");
    return mod(x, modulo);
  }
  function tonelliShanks(P) {
    const legendreC = (P - _1n$3) / _2n$2;
    let Q, S, Z;
    for (Q = P - _1n$3, S = 0; Q % _2n$2 === _0n$3; Q /= _2n$2, S++)
      ;
    for (Z = _2n$2; Z < P && pow(Z, legendreC, P) !== P - _1n$3; Z++)
      ;
    if (S === 1) {
      const p1div4 = (P + _1n$3) / _4n;
      return function tonelliFast(Fp, n) {
        const root = Fp.pow(n, p1div4);
        if (!Fp.eql(Fp.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    const Q1div2 = (Q + _1n$3) / _2n$2;
    return function tonelliSlow(Fp, n) {
      if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
        throw new Error("Cannot find square root");
      let r2 = S;
      let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q);
      let x = Fp.pow(n, Q1div2);
      let b = Fp.pow(n, Q);
      while (!Fp.eql(b, Fp.ONE)) {
        if (Fp.eql(b, Fp.ZERO))
          return Fp.ZERO;
        let m = 1;
        for (let t2 = Fp.sqr(b); m < r2; m++) {
          if (Fp.eql(t2, Fp.ONE))
            break;
          t2 = Fp.sqr(t2);
        }
        const ge = Fp.pow(g, _1n$3 << BigInt(r2 - m - 1));
        g = Fp.sqr(ge);
        x = Fp.mul(x, ge);
        b = Fp.mul(b, g);
        r2 = m;
      }
      return x;
    };
  }
  function FpSqrt(P) {
    if (P % _4n === _3n) {
      const p1div4 = (P + _1n$3) / _4n;
      return function sqrt3mod4(Fp, n) {
        const root = Fp.pow(n, p1div4);
        if (!Fp.eql(Fp.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _8n === _5n) {
      const c1 = (P - _5n) / _8n;
      return function sqrt5mod8(Fp, n) {
        const n2 = Fp.mul(n, _2n$2);
        const v = Fp.pow(n2, c1);
        const nv = Fp.mul(n, v);
        const i2 = Fp.mul(Fp.mul(nv, _2n$2), v);
        const root = Fp.mul(nv, Fp.sub(i2, Fp.ONE));
        if (!Fp.eql(Fp.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    return tonelliShanks(P);
  }
  const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n$3) === _1n$3;
  modular.isNegativeLE = isNegativeLE;
  const FIELD_FIELDS = [
    "create",
    "isValid",
    "is0",
    "neg",
    "inv",
    "sqrt",
    "sqr",
    "eql",
    "add",
    "sub",
    "mul",
    "pow",
    "div",
    "addN",
    "subN",
    "mulN",
    "sqrN"
  ];
  function validateField(field) {
    const initial = {
      ORDER: "bigint",
      MASK: "bigint",
      BYTES: "isSafeInteger",
      BITS: "isSafeInteger"
    };
    const opts = FIELD_FIELDS.reduce((map, val) => {
      map[val] = "function";
      return map;
    }, initial);
    return (0, utils_js_1$8.validateObject)(field, opts);
  }
  function FpPow(f2, num, power) {
    if (power < _0n$3)
      throw new Error("Expected power > 0");
    if (power === _0n$3)
      return f2.ONE;
    if (power === _1n$3)
      return num;
    let p = f2.ONE;
    let d = num;
    while (power > _0n$3) {
      if (power & _1n$3)
        p = f2.mul(p, d);
      d = f2.sqr(d);
      power >>= _1n$3;
    }
    return p;
  }
  function FpInvertBatch(f2, nums) {
    const tmp = new Array(nums.length);
    const lastMultiplied = nums.reduce((acc, num, i2) => {
      if (f2.is0(num))
        return acc;
      tmp[i2] = acc;
      return f2.mul(acc, num);
    }, f2.ONE);
    const inverted = f2.inv(lastMultiplied);
    nums.reduceRight((acc, num, i2) => {
      if (f2.is0(num))
        return acc;
      tmp[i2] = f2.mul(acc, tmp[i2]);
      return f2.mul(acc, num);
    }, inverted);
    return tmp;
  }
  function FpDiv(f2, lhs, rhs) {
    return f2.mul(lhs, typeof rhs === "bigint" ? invert(rhs, f2.ORDER) : f2.inv(rhs));
  }
  function FpIsSquare(f2) {
    const legendreConst = (f2.ORDER - _1n$3) / _2n$2;
    return (x) => {
      const p = f2.pow(x, legendreConst);
      return f2.eql(p, f2.ZERO) || f2.eql(p, f2.ONE);
    };
  }
  function nLength(n, nBitLength) {
    const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
  }
  function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {
    if (ORDER <= _0n$3)
      throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
    if (BYTES > 2048)
      throw new Error("Field lengths over 2048 bytes are not supported");
    const sqrtP = FpSqrt(ORDER);
    const f2 = Object.freeze({
      ORDER,
      BITS,
      BYTES,
      MASK: (0, utils_js_1$8.bitMask)(BITS),
      ZERO: _0n$3,
      ONE: _1n$3,
      create: (num) => mod(num, ORDER),
      isValid: (num) => {
        if (typeof num !== "bigint")
          throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
        return _0n$3 <= num && num < ORDER;
      },
      is0: (num) => num === _0n$3,
      isOdd: (num) => (num & _1n$3) === _1n$3,
      neg: (num) => mod(-num, ORDER),
      eql: (lhs, rhs) => lhs === rhs,
      sqr: (num) => mod(num * num, ORDER),
      add: (lhs, rhs) => mod(lhs + rhs, ORDER),
      sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
      mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
      pow: (num, power) => FpPow(f2, num, power),
      div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
      // Same as above, but doesn't normalize
      sqrN: (num) => num * num,
      addN: (lhs, rhs) => lhs + rhs,
      subN: (lhs, rhs) => lhs - rhs,
      mulN: (lhs, rhs) => lhs * rhs,
      inv: (num) => invert(num, ORDER),
      sqrt: redef.sqrt || ((n) => sqrtP(f2, n)),
      invertBatch: (lst) => FpInvertBatch(f2, lst),
      // TODO: do we really need constant cmov?
      // We don't have const-time bigints anyway, so probably will be not very useful
      cmov: (a, b, c) => c ? b : a,
      toBytes: (num) => isLE2 ? (0, utils_js_1$8.numberToBytesLE)(num, BYTES) : (0, utils_js_1$8.numberToBytesBE)(num, BYTES),
      fromBytes: (bytes2) => {
        if (bytes2.length !== BYTES)
          throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes2.length}`);
        return isLE2 ? (0, utils_js_1$8.bytesToNumberLE)(bytes2) : (0, utils_js_1$8.bytesToNumberBE)(bytes2);
      }
    });
    return Object.freeze(f2);
  }
  function FpSqrtOdd(Fp, elm) {
    if (!Fp.isOdd)
      throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? root : Fp.neg(root);
  }
  function FpSqrtEven(Fp, elm) {
    if (!Fp.isOdd)
      throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? Fp.neg(root) : root;
  }
  function hashToPrivateScalar(hash2, groupOrder, isLE2 = false) {
    hash2 = (0, utils_js_1$8.ensureBytes)("privateHash", hash2);
    const hashLen = hash2.length;
    const minLen = nLength(groupOrder).nByteLength + 8;
    if (minLen < 24 || hashLen < minLen || hashLen > 1024)
      throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
    const num = isLE2 ? (0, utils_js_1$8.bytesToNumberLE)(hash2) : (0, utils_js_1$8.bytesToNumberBE)(hash2);
    return mod(num, groupOrder - _1n$3) + _1n$3;
  }
  function getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== "bigint")
      throw new Error("field order must be bigint");
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
  }
  function getMinHashLength(fieldOrder) {
    const length = getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
  }
  function mapHashToField(key2, fieldOrder, isLE2 = false) {
    const len2 = key2.length;
    const fieldLen = getFieldBytesLength(fieldOrder);
    const minLen = getMinHashLength(fieldOrder);
    if (len2 < 16 || len2 < minLen || len2 > 1024)
      throw new Error(`expected ${minLen}-1024 bytes of input, got ${len2}`);
    const num = isLE2 ? (0, utils_js_1$8.bytesToNumberBE)(key2) : (0, utils_js_1$8.bytesToNumberLE)(key2);
    const reduced = mod(num, fieldOrder - _1n$3) + _1n$3;
    return isLE2 ? (0, utils_js_1$8.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1$8.numberToBytesBE)(reduced, fieldLen);
  }
  Object.defineProperty(curve, "__esModule", { value: true });
  curve.wNAF = wNAF;
  curve.validateBasic = validateBasic;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const modular_js_1$1 = modular;
  const utils_js_1$7 = utils$5;
  const _0n$2 = BigInt(0);
  const _1n$2 = BigInt(1);
  function wNAF(c, bits) {
    const constTimeNegate = (condition, item) => {
      const neg = item.negate();
      return condition ? neg : item;
    };
    const opts = (W) => {
      const windows = Math.ceil(bits / W) + 1;
      const windowSize = 2 ** (W - 1);
      return { windows, windowSize };
    };
    return {
      constTimeNegate,
      // non-const time multiplication ladder
      unsafeLadder(elm, n) {
        let p = c.ZERO;
        let d = elm;
        while (n > _0n$2) {
          if (n & _1n$2)
            p = p.add(d);
          d = d.double();
          n >>= _1n$2;
        }
        return p;
      },
      /**
       * Creates a wNAF precomputation window. Used for caching.
       * Default window size is set by `utils.precompute()` and is equal to 8.
       * Number of precomputed points depends on the curve size:
       * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
       * - 𝑊 is the window size
       * - 𝑛 is the bitlength of the curve order.
       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
       * @returns precomputed point tables flattened to a single array
       */
      precomputeWindow(elm, W) {
        const { windows, windowSize } = opts(W);
        const points = [];
        let p = elm;
        let base2 = p;
        for (let window2 = 0; window2 < windows; window2++) {
          base2 = p;
          points.push(base2);
          for (let i2 = 1; i2 < windowSize; i2++) {
            base2 = base2.add(p);
            points.push(base2);
          }
          p = base2.double();
        }
        return points;
      },
      /**
       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
       * @param W window size
       * @param precomputes precomputed tables
       * @param n scalar (we don't check here, but should be less than curve order)
       * @returns real and fake (for const-time) points
       */
      wNAF(W, precomputes, n) {
        const { windows, windowSize } = opts(W);
        let p = c.ZERO;
        let f2 = c.BASE;
        const mask2 = BigInt(2 ** W - 1);
        const maxNumber = 2 ** W;
        const shiftBy = BigInt(W);
        for (let window2 = 0; window2 < windows; window2++) {
          const offset = window2 * windowSize;
          let wbits = Number(n & mask2);
          n >>= shiftBy;
          if (wbits > windowSize) {
            wbits -= maxNumber;
            n += _1n$2;
          }
          const offset1 = offset;
          const offset2 = offset + Math.abs(wbits) - 1;
          const cond1 = window2 % 2 !== 0;
          const cond2 = wbits < 0;
          if (wbits === 0) {
            f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
          } else {
            p = p.add(constTimeNegate(cond2, precomputes[offset2]));
          }
        }
        return { p, f: f2 };
      },
      wNAFCached(P, precomputesMap, n, transform) {
        const W = P._WINDOW_SIZE || 1;
        let comp = precomputesMap.get(P);
        if (!comp) {
          comp = this.precomputeWindow(P, W);
          if (W !== 1) {
            precomputesMap.set(P, transform(comp));
          }
        }
        return this.wNAF(W, comp, n);
      }
    };
  }
  function validateBasic(curve2) {
    (0, modular_js_1$1.validateField)(curve2.Fp);
    (0, utils_js_1$7.validateObject)(curve2, {
      n: "bigint",
      h: "bigint",
      Gx: "field",
      Gy: "field"
    }, {
      nBitLength: "isSafeInteger",
      nByteLength: "isSafeInteger"
    });
    return Object.freeze({
      ...(0, modular_js_1$1.nLength)(curve2.n, curve2.nBitLength),
      ...curve2,
      ...{ p: curve2.Fp.ORDER }
    });
  }
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DER = void 0;
    exports.weierstrassPoints = weierstrassPoints;
    exports.weierstrass = weierstrass2;
    exports.SWUFpSqrtRatio = SWUFpSqrtRatio;
    exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const curve_js_1 = curve;
    const mod2 = modular;
    const ut = utils$5;
    const utils_js_12 = utils$5;
    function validatePointOpts(curve2) {
      const opts = (0, curve_js_1.validateBasic)(curve2);
      ut.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp, a } = opts;
      if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
    exports.DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
        constructor(m = "") {
          super(m);
        }
      },
      _parseInt(data) {
        const { Err: E } = exports.DER;
        if (data.length < 2 || data[0] !== 2)
          throw new E("Invalid signature integer tag");
        const len2 = data[1];
        const res = data.subarray(2, len2 + 2);
        if (!len2 || res.length !== len2)
          throw new E("Invalid signature integer: wrong length");
        if (res[0] & 128)
          throw new E("Invalid signature integer: negative");
        if (res[0] === 0 && !(res[1] & 128))
          throw new E("Invalid signature integer: unnecessary leading zero");
        return { d: b2n(res), l: data.subarray(len2 + 2) };
      },
      toSig(hex2) {
        const { Err: E } = exports.DER;
        const data = typeof hex2 === "string" ? h2b(hex2) : hex2;
        ut.abytes(data);
        let l = data.length;
        if (l < 2 || data[0] != 48)
          throw new E("Invalid signature tag");
        if (data[1] !== l - 2)
          throw new E("Invalid signature: incorrect length");
        const { d: r2, l: sBytes } = exports.DER._parseInt(data.subarray(2));
        const { d: s2, l: rBytesLeft } = exports.DER._parseInt(sBytes);
        if (rBytesLeft.length)
          throw new E("Invalid signature: left bytes after parsing");
        return { r: r2, s: s2 };
      },
      hexFromSig(sig) {
        const slice = (s3) => Number.parseInt(s3[0], 16) & 8 ? "00" + s3 : s3;
        const h = (num) => {
          const hex2 = num.toString(16);
          return hex2.length & 1 ? `0${hex2}` : hex2;
        };
        const s2 = slice(h(sig.s));
        const r2 = slice(h(sig.r));
        const shl = s2.length / 2;
        const rhl = r2.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r2}02${sl}${s2}`;
      }
    };
    const _0n2 = BigInt(0), _1n2 = BigInt(1), _2n2 = BigInt(2), _3n2 = BigInt(3), _4n2 = BigInt(4);
    function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp } = CURVE;
      const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return ut.concatBytes(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes2) => {
        const tail = bytes2.subarray(1);
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x);
        const x3 = Fp.mul(x2, x);
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);
      }
      if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num) {
        return typeof num === "bigint" && _0n2 < num && num < CURVE.n;
      }
      function assertGE(num) {
        if (!isWithinCurveOrder(num))
          throw new Error("Expected valid bigint: 0 < bigint < curve.n");
      }
      function normPrivateKeyToScalar(key2) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key2 !== "bigint") {
          if (ut.isBytes(key2))
            key2 = ut.bytesToHex(key2);
          if (typeof key2 !== "string" || !lengths.includes(key2.length))
            throw new Error("Invalid key");
          key2 = key2.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
          num = typeof key2 === "bigint" ? key2 : ut.bytesToNumberBE((0, utils_js_12.ensureBytes)("private key", key2, nByteLength));
        } catch (error2) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key2}`);
        }
        if (wrapPrivateKey)
          num = mod2.mod(num, n);
        assertGE(num);
        return num;
      }
      const pointPrecomputes = /* @__PURE__ */ new Map();
      function assertPrjPoint(other) {
        if (!(other instanceof Point2))
          throw new Error("ProjectivePoint expected");
      }
      class Point2 {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp.isValid(pz))
            throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point2)
            throw new Error("projective point not allowed");
          const is0 = (i2) => Fp.eql(i2, Fp.ZERO);
          if (is0(x) && is0(y))
            return Point2.ZERO;
          return new Point2(x, y, Fp.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp.invertBatch(points.map((p) => p.pz));
          return points.map((p, i2) => p.toAffine(toInv[i2])).map(Point2.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex2) {
          const P = Point2.fromAffine(fromBytes((0, utils_js_12.ensureBytes)("pointHex", hex2)));
          P.assertValidity();
          return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          if (this.is0()) {
            if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
              return;
            throw new Error("bad point: ZERO");
          }
          const { x, y } = this.toAffine();
          if (!Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("bad point: x or y not FE");
          const left = Fp.sqr(y);
          const right = weierstrassEquation(x);
          if (!Fp.eql(left, right))
            throw new Error("bad point: equation left != right");
          if (!this.isTorsionFree())
            throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp.isOdd)
            return !Fp.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
          const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point2(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b } = CURVE;
          const b3 = Fp.mul(b, _3n2);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          let t0 = Fp.mul(X1, X1);
          let t1 = Fp.mul(Y1, Y1);
          let t2 = Fp.mul(Z1, Z1);
          let t3 = Fp.mul(X1, Y1);
          t3 = Fp.add(t3, t3);
          Z3 = Fp.mul(X1, Z1);
          Z3 = Fp.add(Z3, Z3);
          X3 = Fp.mul(a, Z3);
          Y3 = Fp.mul(b3, t2);
          Y3 = Fp.add(X3, Y3);
          X3 = Fp.sub(t1, Y3);
          Y3 = Fp.add(t1, Y3);
          Y3 = Fp.mul(X3, Y3);
          X3 = Fp.mul(t3, X3);
          Z3 = Fp.mul(b3, Z3);
          t2 = Fp.mul(a, t2);
          t3 = Fp.sub(t0, t2);
          t3 = Fp.mul(a, t3);
          t3 = Fp.add(t3, Z3);
          Z3 = Fp.add(t0, t0);
          t0 = Fp.add(Z3, t0);
          t0 = Fp.add(t0, t2);
          t0 = Fp.mul(t0, t3);
          Y3 = Fp.add(Y3, t0);
          t2 = Fp.mul(Y1, Z1);
          t2 = Fp.add(t2, t2);
          t0 = Fp.mul(t2, t3);
          X3 = Fp.sub(X3, t0);
          Z3 = Fp.mul(t2, t1);
          Z3 = Fp.add(Z3, Z3);
          Z3 = Fp.add(Z3, Z3);
          return new Point2(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          const a = CURVE.a;
          const b3 = Fp.mul(CURVE.b, _3n2);
          let t0 = Fp.mul(X1, X2);
          let t1 = Fp.mul(Y1, Y2);
          let t2 = Fp.mul(Z1, Z2);
          let t3 = Fp.add(X1, Y1);
          let t4 = Fp.add(X2, Y2);
          t3 = Fp.mul(t3, t4);
          t4 = Fp.add(t0, t1);
          t3 = Fp.sub(t3, t4);
          t4 = Fp.add(X1, Z1);
          let t5 = Fp.add(X2, Z2);
          t4 = Fp.mul(t4, t5);
          t5 = Fp.add(t0, t2);
          t4 = Fp.sub(t4, t5);
          t5 = Fp.add(Y1, Z1);
          X3 = Fp.add(Y2, Z2);
          t5 = Fp.mul(t5, X3);
          X3 = Fp.add(t1, t2);
          t5 = Fp.sub(t5, X3);
          Z3 = Fp.mul(a, t4);
          X3 = Fp.mul(b3, t2);
          Z3 = Fp.add(X3, Z3);
          X3 = Fp.sub(t1, Z3);
          Z3 = Fp.add(t1, Z3);
          Y3 = Fp.mul(X3, Z3);
          t1 = Fp.add(t0, t0);
          t1 = Fp.add(t1, t0);
          t2 = Fp.mul(a, t2);
          t4 = Fp.mul(b3, t4);
          t1 = Fp.add(t1, t2);
          t2 = Fp.sub(t0, t2);
          t2 = Fp.mul(a, t2);
          t4 = Fp.add(t4, t2);
          t0 = Fp.mul(t1, t4);
          Y3 = Fp.add(Y3, t0);
          t0 = Fp.mul(t5, t4);
          X3 = Fp.mul(t3, X3);
          X3 = Fp.sub(X3, t0);
          t0 = Fp.mul(t3, t1);
          Z3 = Fp.mul(t5, Z3);
          Z3 = Fp.add(Z3, t0);
          return new Point2(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point2.ZERO);
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
            const toInv = Fp.invertBatch(comp.map((p) => p.pz));
            return comp.map((p, i2) => p.toAffine(toInv[i2])).map(Point2.fromAffine);
          });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(n) {
          const I = Point2.ZERO;
          if (n === _0n2)
            return I;
          assertGE(n);
          if (n === _1n2)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, n);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let k1p = I;
          let k2p = I;
          let d = this;
          while (k1 > _0n2 || k2 > _0n2) {
            if (k1 & _1n2)
              k1p = k1p.add(d);
            if (k2 & _1n2)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n2;
            k2 >>= _1n2;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          assertGE(scalar);
          let n = scalar;
          let point, fake;
          const { endo } = CURVE;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f: f2 } = this.wNAF(n);
            point = p;
            fake = f2;
          }
          return Point2.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b) {
          const G = Point2.BASE;
          const mul = (P, a2) => a2 === _0n2 || a2 === _1n2 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
          const sum = mul(this, a).add(mul(Q, b));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          const { px: x, py: y, pz: z } = this;
          const is0 = this.is0();
          if (iz == null)
            iz = is0 ? Fp.ONE : Fp.inv(z);
          const ax = Fp.mul(x, iz);
          const ay = Fp.mul(y, iz);
          const zz = Fp.mul(z, iz);
          if (is0)
            return { x: Fp.ZERO, y: Fp.ZERO };
          if (!Fp.eql(zz, Fp.ONE))
            throw new Error("invZ was invalid");
          return { x: ax, y: ay };
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n2)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point2, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n2)
            return this;
          if (clearCofactor)
            return clearCofactor(Point2, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          this.assertValidity();
          return toBytes2(Point2, this, isCompressed);
        }
        toHex(isCompressed = true) {
          return ut.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp.ONE);
      Point2.ZERO = new Point2(Fp.ZERO, Fp.ONE, Fp.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point2,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    function validateOpts(curve2) {
      const opts = (0, curve_js_1.validateBasic)(curve2);
      ut.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass2(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp.BYTES + 1;
      const uncompressedLen = 2 * Fp.BYTES + 1;
      function isValidFieldElement(num) {
        return _0n2 < num && num < Fp.ORDER;
      }
      function modN(a) {
        return mod2.mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return mod2.invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x = Fp.toBytes(a.x);
          const cat = ut.concatBytes;
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp.toBytes(a.y));
          }
        },
        fromBytes(bytes2) {
          const len2 = bytes2.length;
          const head = bytes2[0];
          const tail = bytes2.subarray(1);
          if (len2 === compressedLen && (head === 2 || head === 3)) {
            const x = ut.bytesToNumberBE(tail);
            if (!isValidFieldElement(x))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y;
            try {
              y = Fp.sqrt(y2);
            } catch (sqrtError) {
              const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
              throw new Error("Point is not on curve" + suffix);
            }
            const isYOdd = (y & _1n2) === _1n2;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp.neg(y);
            return { x, y };
          } else if (len2 === uncompressedLen && head === 4) {
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x, y };
          } else {
            throw new Error(`Point of length ${len2} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      });
      const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number2) {
        const HALF = CURVE_ORDER >> _1n2;
        return number2 > HALF;
      }
      function normalizeS(s2) {
        return isBiggerThanHalfOrder(s2) ? modN(-s2) : s2;
      }
      const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));
      class Signature2 {
        constructor(r2, s2, recovery) {
          this.r = r2;
          this.s = s2;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex2) {
          const l = CURVE.nByteLength;
          hex2 = (0, utils_js_12.ensureBytes)("compactSignature", hex2, l * 2);
          return new Signature2(slcNum(hex2, 0, l), slcNum(hex2, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex2) {
          const { r: r2, s: s2 } = exports.DER.toSig((0, utils_js_12.ensureBytes)("DER", hex2));
          return new Signature2(r2, s2);
        }
        assertValidity() {
          if (!isWithinCurveOrder(this.r))
            throw new Error("r must be 0 < r < CURVE.n");
          if (!isWithinCurveOrder(this.s))
            throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
          return new Signature2(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r: r2, s: s2, recovery: rec } = this;
          const h = bits2int_modN((0, utils_js_12.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r2 + CURVE.n : r2;
          if (radj >= Fp.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R2 = Point2.fromHex(prefix + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN(-h * ir);
          const u2 = modN(s2 * ir);
          const Q = Point2.BASE.multiplyAndAddUnsafe(R2, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature2(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return ut.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports.DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return ut.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils2 = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error2) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = mod2.getMinHashLength(CURVE.n);
          return mod2.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point2.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = ut.isBytes(item);
        const str = typeof item === "string";
        const len2 = (arr || str) && item.length;
        if (arr)
          return len2 === compressedLen || len2 === uncompressedLen;
        if (str)
          return len2 === 2 * compressedLen || len2 === 2 * uncompressedLen;
        if (item instanceof Point2)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b = Point2.fromHex(publicB);
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes2) {
        const num = ut.bytesToNumberBE(bytes2);
        const delta = bytes2.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
        return modN(bits2int(bytes2));
      };
      const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
      function int2octets(num) {
        if (typeof num !== "bigint")
          throw new Error("bigint expected");
        if (!(_0n2 <= num && num < ORDER_MASK))
          throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        return ut.numberToBytesBE(num, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash: hash2, randomBytes: randomBytes2 } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_12.ensureBytes)("msgHash", msgHash);
        if (prehash)
          msgHash = (0, utils_js_12.ensureBytes)("prehashed msgHash", hash2(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null && ent !== false) {
          const e = ent === true ? randomBytes2(Fp.BYTES) : ent;
          seedArgs.push((0, utils_js_12.ensureBytes)("extraEntropy", e));
        }
        const seed = ut.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q = Point2.BASE.multiply(k).toAffine();
          const r2 = modN(q.x);
          if (r2 === _0n2)
            return;
          const s2 = modN(ik * modN(m + r2 * d));
          if (s2 === _0n2)
            return;
          let recovery = (q.x === r2 ? 0 : 2) | Number(q.y & _1n2);
          let normS = s2;
          if (lowS && isBiggerThanHalfOrder(s2)) {
            normS = normalizeS(s2);
            recovery ^= 1;
          }
          return new Signature2(r2, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point2.BASE._setWindowSize(8);
      function verify(signature2, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature2;
        msgHash = (0, utils_js_12.ensureBytes)("msgHash", msgHash);
        publicKey = (0, utils_js_12.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P;
        try {
          if (typeof sg === "string" || ut.isBytes(sg)) {
            try {
              _sig = Signature2.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports.DER.Err))
                throw derError;
              _sig = Signature2.fromCompact(sg);
            }
          } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
            const { r: r3, s: s3 } = sg;
            _sig = new Signature2(r3, s3);
          } else {
            throw new Error("PARSE");
          }
          P = Point2.fromHex(publicKey);
        } catch (error2) {
          if (error2.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r: r2, s: s2 } = _sig;
        const h = bits2int_modN(msgHash);
        const is2 = invN(s2);
        const u1 = modN(h * is2);
        const u2 = modN(r2 * is2);
        const R2 = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
        if (!R2)
          return false;
        const v = modN(R2.x);
        return v === r2;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify,
        ProjectivePoint: Point2,
        Signature: Signature2,
        utils: utils2
      };
    }
    function SWUFpSqrtRatio(Fp, Z) {
      const q = Fp.ORDER;
      let l = _0n2;
      for (let o = q - _1n2; o % _2n2 === _0n2; o /= _2n2)
        l += _1n2;
      const c1 = l;
      const _2n_pow_c1_1 = _2n2 << c1 - _1n2 - _1n2;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n2;
      const c2 = (q - _1n2) / _2n_pow_c1;
      const c3 = (c2 - _1n2) / _2n2;
      const c4 = _2n_pow_c1 - _1n2;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp.pow(Z, c2);
      const c7 = Fp.pow(Z, (c2 + _1n2) / _2n2);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp.pow(v, c4);
        let tv3 = Fp.sqr(tv2);
        tv3 = Fp.mul(tv3, v);
        let tv5 = Fp.mul(u, tv3);
        tv5 = Fp.pow(tv5, c3);
        tv5 = Fp.mul(tv5, tv2);
        tv2 = Fp.mul(tv5, v);
        tv3 = Fp.mul(tv5, u);
        let tv4 = Fp.mul(tv3, tv2);
        tv5 = Fp.pow(tv4, c5);
        let isQR = Fp.eql(tv5, Fp.ONE);
        tv2 = Fp.mul(tv3, c7);
        tv5 = Fp.mul(tv4, tv1);
        tv3 = Fp.cmov(tv2, tv3, isQR);
        tv4 = Fp.cmov(tv5, tv4, isQR);
        for (let i2 = c1; i2 > _1n2; i2--) {
          let tv52 = i2 - _2n2;
          tv52 = _2n2 << tv52 - _1n2;
          let tvv5 = Fp.pow(tv4, tv52);
          const e1 = Fp.eql(tvv5, Fp.ONE);
          tv2 = Fp.mul(tv3, tv1);
          tv1 = Fp.mul(tv1, tv1);
          tvv5 = Fp.mul(tv4, tv1);
          tv3 = Fp.cmov(tv2, tv3, e1);
          tv4 = Fp.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp.ORDER % _4n2 === _3n2) {
        const c12 = (Fp.ORDER - _3n2) / _4n2;
        const c22 = Fp.sqrt(Fp.neg(Z));
        sqrtRatio = (u, v) => {
          let tv1 = Fp.sqr(v);
          const tv2 = Fp.mul(u, v);
          tv1 = Fp.mul(tv1, tv2);
          let y1 = Fp.pow(tv1, c12);
          y1 = Fp.mul(y1, tv2);
          const y2 = Fp.mul(y1, c22);
          const tv3 = Fp.mul(Fp.sqr(y1), v);
          const isQR = Fp.eql(tv3, u);
          let y = Fp.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    function mapToCurveSimpleSWU(Fp, opts) {
      mod2.validateField(Fp);
      if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
      if (!Fp.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u);
        tv1 = Fp.mul(tv1, opts.Z);
        tv2 = Fp.sqr(tv1);
        tv2 = Fp.add(tv2, tv1);
        tv3 = Fp.add(tv2, Fp.ONE);
        tv3 = Fp.mul(tv3, opts.B);
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));
        tv4 = Fp.mul(tv4, opts.A);
        tv2 = Fp.sqr(tv3);
        tv6 = Fp.sqr(tv4);
        tv5 = Fp.mul(tv6, opts.A);
        tv2 = Fp.add(tv2, tv5);
        tv2 = Fp.mul(tv2, tv3);
        tv6 = Fp.mul(tv6, tv4);
        tv5 = Fp.mul(tv6, opts.B);
        tv2 = Fp.add(tv2, tv5);
        x = Fp.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp.mul(tv1, u);
        y = Fp.mul(y, value);
        x = Fp.cmov(x, tv3, isValid);
        y = Fp.cmov(y, value, isValid);
        const e1 = Fp.isOdd(u) === Fp.isOdd(y);
        y = Fp.cmov(Fp.neg(y), y, e1);
        x = Fp.div(x, tv4);
        return { x, y };
      };
    }
  })(weierstrass);
  Object.defineProperty(_shortw_utils, "__esModule", { value: true });
  _shortw_utils.getHash = getHash;
  _shortw_utils.createCurve = createCurve;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const hmac_1 = hmac;
  const utils_1$8 = require$$1$1;
  const weierstrass_js_1 = weierstrass;
  function getHash(hash2) {
    return {
      hash: hash2,
      hmac: (key2, ...msgs) => (0, hmac_1.hmac)(hash2, key2, (0, utils_1$8.concatBytes)(...msgs)),
      randomBytes: utils_1$8.randomBytes
    };
  }
  function createCurve(curveDef, defHash) {
    const create2 = (hash2) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash2) });
    return Object.freeze({ ...create2(defHash), create: create2 });
  }
  var hashToCurve = {};
  Object.defineProperty(hashToCurve, "__esModule", { value: true });
  hashToCurve.expand_message_xmd = expand_message_xmd;
  hashToCurve.expand_message_xof = expand_message_xof;
  hashToCurve.hash_to_field = hash_to_field;
  hashToCurve.isogenyMap = isogenyMap;
  hashToCurve.createHasher = createHasher;
  const modular_js_1 = modular;
  const utils_js_1$6 = utils$5;
  const os2ip = utils_js_1$6.bytesToNumberBE;
  function i2osp(value, length) {
    if (value < 0 || value >= 1 << 8 * length) {
      throw new Error(`bad I2OSP call: value=${value} length=${length}`);
    }
    const res = Array.from({ length }).fill(0);
    for (let i2 = length - 1; i2 >= 0; i2--) {
      res[i2] = value & 255;
      value >>>= 8;
    }
    return new Uint8Array(res);
  }
  function strxor(a, b) {
    const arr = new Uint8Array(a.length);
    for (let i2 = 0; i2 < a.length; i2++) {
      arr[i2] = a[i2] ^ b[i2];
    }
    return arr;
  }
  function anum(item) {
    if (!Number.isSafeInteger(item))
      throw new Error("number expected");
  }
  function expand_message_xmd(msg, DST, lenInBytes, H) {
    (0, utils_js_1$6.abytes)(msg);
    (0, utils_js_1$6.abytes)(DST);
    anum(lenInBytes);
    if (DST.length > 255)
      DST = H((0, utils_js_1$6.concatBytes)((0, utils_js_1$6.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
    const ell = Math.ceil(lenInBytes / b_in_bytes);
    if (ell > 255)
      throw new Error("Invalid xmd length");
    const DST_prime = (0, utils_js_1$6.concatBytes)(DST, i2osp(DST.length, 1));
    const Z_pad = i2osp(0, r_in_bytes);
    const l_i_b_str = i2osp(lenInBytes, 2);
    const b = new Array(ell);
    const b_0 = H((0, utils_js_1$6.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
    b[0] = H((0, utils_js_1$6.concatBytes)(b_0, i2osp(1, 1), DST_prime));
    for (let i2 = 1; i2 <= ell; i2++) {
      const args = [strxor(b_0, b[i2 - 1]), i2osp(i2 + 1, 1), DST_prime];
      b[i2] = H((0, utils_js_1$6.concatBytes)(...args));
    }
    const pseudo_random_bytes = (0, utils_js_1$6.concatBytes)(...b);
    return pseudo_random_bytes.slice(0, lenInBytes);
  }
  function expand_message_xof(msg, DST, lenInBytes, k, H) {
    (0, utils_js_1$6.abytes)(msg);
    (0, utils_js_1$6.abytes)(DST);
    anum(lenInBytes);
    if (DST.length > 255) {
      const dkLen = Math.ceil(2 * k / 8);
      DST = H.create({ dkLen }).update((0, utils_js_1$6.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
    }
    if (lenInBytes > 65535 || DST.length > 255)
      throw new Error("expand_message_xof: invalid lenInBytes");
    return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
  }
  function hash_to_field(msg, count, options) {
    (0, utils_js_1$6.validateObject)(options, {
      DST: "stringOrUint8Array",
      p: "bigint",
      m: "isSafeInteger",
      k: "isSafeInteger",
      hash: "hash"
    });
    const { p, k, m, hash: hash2, expand, DST: _DST } = options;
    (0, utils_js_1$6.abytes)(msg);
    anum(count);
    const DST = typeof _DST === "string" ? (0, utils_js_1$6.utf8ToBytes)(_DST) : _DST;
    const log2p = p.toString(2).length;
    const L = Math.ceil((log2p + k) / 8);
    const len_in_bytes = count * m * L;
    let prb;
    if (expand === "xmd") {
      prb = expand_message_xmd(msg, DST, len_in_bytes, hash2);
    } else if (expand === "xof") {
      prb = expand_message_xof(msg, DST, len_in_bytes, k, hash2);
    } else if (expand === "_internal_pass") {
      prb = msg;
    } else {
      throw new Error('expand must be "xmd" or "xof"');
    }
    const u = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      const e = new Array(m);
      for (let j = 0; j < m; j++) {
        const elm_offset = L * (j + i2 * m);
        const tv = prb.subarray(elm_offset, elm_offset + L);
        e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
      }
      u[i2] = e;
    }
    return u;
  }
  function isogenyMap(field, map) {
    const COEFF = map.map((i2) => Array.from(i2).reverse());
    return (x, y) => {
      const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i2) => field.add(field.mul(acc, x), i2)));
      x = field.div(xNum, xDen);
      y = field.mul(y, field.div(yNum, yDen));
      return { x, y };
    };
  }
  function createHasher(Point2, mapToCurve, def) {
    if (typeof mapToCurve !== "function")
      throw new Error("mapToCurve() must be defined");
    return {
      // Encodes byte string to elliptic curve.
      // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
      hashToCurve(msg, options) {
        const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
        const u0 = Point2.fromAffine(mapToCurve(u[0]));
        const u1 = Point2.fromAffine(mapToCurve(u[1]));
        const P = u0.add(u1).clearCofactor();
        P.assertValidity();
        return P;
      },
      // Encodes byte string to elliptic curve.
      // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
      encodeToCurve(msg, options) {
        const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
        const P = Point2.fromAffine(mapToCurve(u[0])).clearCofactor();
        P.assertValidity();
        return P;
      },
      // Same as encodeToCurve, but without hash
      mapToCurve(scalars) {
        if (!Array.isArray(scalars))
          throw new Error("mapToCurve: expected array of bigints");
        for (const i2 of scalars)
          if (typeof i2 !== "bigint")
            throw new Error(`mapToCurve: expected array of bigints, got ${i2} in array`);
        const P = Point2.fromAffine(mapToCurve(scalars)).clearCofactor();
        P.assertValidity();
        return P;
      }
    };
  }
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const sha256_1 = sha256;
    const utils_12 = require$$1$1;
    const _shortw_utils_js_1 = _shortw_utils;
    const hash_to_curve_js_1 = hashToCurve;
    const modular_js_12 = modular;
    const utils_js_12 = utils$5;
    const weierstrass_js_12 = weierstrass;
    const secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    const secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    const _1n2 = BigInt(1);
    const _2n2 = BigInt(2);
    const divNearest = (a, b) => (a + b / _2n2) / b;
    function sqrtMod(y) {
      const P = secp256k1P;
      const _3n2 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P;
      const b3 = b2 * b2 * y % P;
      const b6 = (0, modular_js_12.pow2)(b3, _3n2, P) * b3 % P;
      const b9 = (0, modular_js_12.pow2)(b6, _3n2, P) * b3 % P;
      const b11 = (0, modular_js_12.pow2)(b9, _2n2, P) * b2 % P;
      const b22 = (0, modular_js_12.pow2)(b11, _11n, P) * b11 % P;
      const b44 = (0, modular_js_12.pow2)(b22, _22n, P) * b22 % P;
      const b88 = (0, modular_js_12.pow2)(b44, _44n, P) * b44 % P;
      const b176 = (0, modular_js_12.pow2)(b88, _88n, P) * b88 % P;
      const b220 = (0, modular_js_12.pow2)(b176, _44n, P) * b44 % P;
      const b223 = (0, modular_js_12.pow2)(b220, _3n2, P) * b3 % P;
      const t1 = (0, modular_js_12.pow2)(b223, _23n, P) * b22 % P;
      const t2 = (0, modular_js_12.pow2)(t1, _6n, P) * b2 % P;
      const root = (0, modular_js_12.pow2)(t2, _2n2, P);
      if (!Fp.eql(Fp.sqr(root), y))
        throw new Error("Cannot find square root");
      return root;
    }
    const Fp = (0, modular_js_12.Field)(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
    exports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
      a: BigInt(0),
      // equation params: a, b
      b: BigInt(7),
      // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
      Fp,
      // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
      n: secp256k1N,
      // Curve order, total count of valid points in the field
      // Base point (x, y) aka generator point
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      // Cofactor
      lowS: true,
      // Allow only low-S signatures by default in sign() and verify()
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k) => {
          const n = secp256k1N;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n2 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k, n);
          const c2 = divNearest(-b1 * k, n);
          let k1 = (0, modular_js_12.mod)(k - c1 * a1 - c2 * a2, n);
          let k2 = (0, modular_js_12.mod)(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      }
    }, sha256_1.sha256);
    const _0n2 = BigInt(0);
    const fe = (x) => typeof x === "bigint" && _0n2 < x && x < secp256k1P;
    const ge = (x) => typeof x === "bigint" && _0n2 < x && x < secp256k1N;
    const TAGGED_HASH_PREFIXES = {};
    function taggedHash(tag, ...messages) {
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_js_12.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return (0, sha256_1.sha256)((0, utils_js_12.concatBytes)(tagP, ...messages));
    }
    const pointToBytes = (point) => point.toRawBytes(true).slice(1);
    const numTo32b = (n) => (0, utils_js_12.numberToBytesBE)(n, 32);
    const modP = (x) => (0, modular_js_12.mod)(x, secp256k1P);
    const modN = (x) => (0, modular_js_12.mod)(x, secp256k1N);
    const Point2 = exports.secp256k1.ProjectivePoint;
    const GmulAdd = (Q, a, b) => Point2.BASE.multiplyAndAddUnsafe(Q, a, b);
    function schnorrGetExtPubKey(priv) {
      let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv);
      let p = Point2.fromPrivateKey(d_);
      const scalar = p.hasEvenY() ? d_ : modN(-d_);
      return { scalar, bytes: pointToBytes(p) };
    }
    function lift_x(x) {
      if (!fe(x))
        throw new Error("bad x: need 0 < x < p");
      const xx = modP(x * x);
      const c = modP(xx * x + BigInt(7));
      let y = sqrtMod(c);
      if (y % _2n2 !== _0n2)
        y = modP(-y);
      const p = new Point2(x, y, _1n2);
      p.assertValidity();
      return p;
    }
    function challenge(...args) {
      return modN((0, utils_js_12.bytesToNumberBE)(taggedHash("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey(privateKey) {
      return schnorrGetExtPubKey(privateKey).bytes;
    }
    function schnorrSign(message, privateKey, auxRand = (0, utils_12.randomBytes)(32)) {
      const m = (0, utils_js_12.ensureBytes)("message", message);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
      const a = (0, utils_js_12.ensureBytes)("auxRand", auxRand, 32);
      const t2 = numTo32b(d ^ (0, utils_js_12.bytesToNumberBE)(taggedHash("BIP0340/aux", a)));
      const rand2 = taggedHash("BIP0340/nonce", t2, px, m);
      const k_ = modN((0, utils_js_12.bytesToNumberBE)(rand2));
      if (k_ === _0n2)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
      const e = challenge(rx, px, m);
      const sig = new Uint8Array(64);
      sig.set(rx, 0);
      sig.set(numTo32b(modN(k + e * d)), 32);
      if (!schnorrVerify(sig, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig;
    }
    function schnorrVerify(signature2, message, publicKey) {
      const sig = (0, utils_js_12.ensureBytes)("signature", signature2, 64);
      const m = (0, utils_js_12.ensureBytes)("message", message);
      const pub = (0, utils_js_12.ensureBytes)("publicKey", publicKey, 32);
      try {
        const P = lift_x((0, utils_js_12.bytesToNumberBE)(pub));
        const r2 = (0, utils_js_12.bytesToNumberBE)(sig.subarray(0, 32));
        if (!fe(r2))
          return false;
        const s2 = (0, utils_js_12.bytesToNumberBE)(sig.subarray(32, 64));
        if (!ge(s2))
          return false;
        const e = challenge(numTo32b(r2), pointToBytes(P), m);
        const R2 = GmulAdd(P, s2, modN(-e));
        if (!R2 || !R2.hasEvenY() || R2.toAffine().x !== r2)
          return false;
        return true;
      } catch (error2) {
        return false;
      }
    }
    exports.schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey,
      sign: schnorrSign,
      verify: schnorrVerify,
      utils: {
        randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,
        lift_x,
        pointToBytes,
        numberToBytesBE: utils_js_12.numberToBytesBE,
        bytesToNumberBE: utils_js_12.bytesToNumberBE,
        taggedHash,
        mod: modular_js_12.mod
      }
    }))();
    const isoMap = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i2) => i2.map((j) => BigInt(j)))))();
    const mapSWU = /* @__PURE__ */ (() => (0, weierstrass_js_12.mapToCurveSimpleSWU)(Fp, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fp.create(BigInt("-11"))
    }))();
    const htf = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars) => {
      const { x, y } = mapSWU(Fp.create(scalars[0]));
      return isoMap(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fp.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256_1.sha256
    }))();
    exports.hashToCurve = (() => htf.hashToCurve)();
    exports.encodeToCurve = (() => htf.encodeToCurve)();
  })(secp256k1);
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.secp256k1 = void 0;
    var secp256k1_12 = secp256k1;
    Object.defineProperty(exports, "secp256k1", { enumerable: true, get: function() {
      return secp256k1_12.secp256k1;
    } });
  })(secp256k1$1);
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_WITHDRAWALS_PER_PAYLOAD = exports.RLP_EMPTY_STRING = exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.SECP256K1_ORDER_DIV_2 = exports.SECP256K1_ORDER = exports.MAX_INTEGER_BIGINT = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;
    const buffer_1 = buffer$1;
    const secp256k1_12 = secp256k1$1;
    exports.MAX_UINT64 = BigInt("0xffffffffffffffff");
    exports.MAX_INTEGER = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    exports.MAX_INTEGER_BIGINT = BigInt("115792089237316195423570985008687907853269984665640564039457584007913129639935");
    exports.SECP256K1_ORDER = secp256k1_12.secp256k1.CURVE.n;
    exports.SECP256K1_ORDER_DIV_2 = secp256k1_12.secp256k1.CURVE.n / BigInt(2);
    exports.TWO_POW256 = BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");
    exports.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    exports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, "hex");
    exports.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
    exports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, "hex");
    exports.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
    exports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, "hex");
    exports.RLP_EMPTY_STRING = buffer_1.Buffer.from([128]);
    exports.MAX_WITHDRAWALS_PER_PAYLOAD = 16;
  })(constants);
  var units = {};
  Object.defineProperty(units, "__esModule", { value: true });
  units.GWEI_TO_WEI = void 0;
  units.GWEI_TO_WEI = BigInt(1e9);
  var account = {};
  var dist$3 = {};
  Object.defineProperty(dist$3, "__esModule", { value: true });
  dist$3.RLP = dist$3.utils = dist$3.decode = dist$3.encode = void 0;
  function encode(input) {
    if (Array.isArray(input)) {
      const output2 = [];
      let outputLength = 0;
      for (let i2 = 0; i2 < input.length; i2++) {
        const encoded = encode(input[i2]);
        output2.push(encoded);
        outputLength += encoded.length;
      }
      return concatBytes(encodeLength(outputLength, 192), ...output2);
    }
    const inputBuf = toBytes(input);
    if (inputBuf.length === 1 && inputBuf[0] < 128) {
      return inputBuf;
    }
    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);
  }
  dist$3.encode = encode;
  function safeSlice(input, start, end) {
    if (end > input.length) {
      throw new Error("invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds");
    }
    return input.slice(start, end);
  }
  function decodeLength(v) {
    if (v[0] === 0) {
      throw new Error("invalid RLP: extra zeros");
    }
    return parseHexByte(bytesToHex(v));
  }
  function encodeLength(len2, offset) {
    if (len2 < 56) {
      return Uint8Array.from([len2 + offset]);
    }
    const hexLength = numberToHex$1(len2);
    const lLength = hexLength.length / 2;
    const firstByte = numberToHex$1(offset + 55 + lLength);
    return Uint8Array.from(hexToBytes(firstByte + hexLength));
  }
  function decode(input, stream = false) {
    if (typeof input === "undefined" || input === null || input.length === 0) {
      return Uint8Array.from([]);
    }
    const inputBytes = toBytes(input);
    const decoded = _decode(inputBytes);
    if (stream) {
      return decoded;
    }
    if (decoded.remainder.length !== 0) {
      throw new Error("invalid RLP: remainder must be zero");
    }
    return decoded.data;
  }
  dist$3.decode = decode;
  function _decode(input) {
    let length, llength, data, innerRemainder, d;
    const decoded = [];
    const firstByte = input[0];
    if (firstByte <= 127) {
      return {
        data: input.slice(0, 1),
        remainder: input.slice(1)
      };
    } else if (firstByte <= 183) {
      length = firstByte - 127;
      if (firstByte === 128) {
        data = Uint8Array.from([]);
      } else {
        data = safeSlice(input, 1, length);
      }
      if (length === 2 && data[0] < 128) {
        throw new Error("invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed");
      }
      return {
        data,
        remainder: input.slice(length)
      };
    } else if (firstByte <= 191) {
      llength = firstByte - 182;
      if (input.length - 1 < llength) {
        throw new Error("invalid RLP: not enough bytes for string length");
      }
      length = decodeLength(safeSlice(input, 1, llength));
      if (length <= 55) {
        throw new Error("invalid RLP: expected string length to be greater than 55");
      }
      data = safeSlice(input, llength, length + llength);
      return {
        data,
        remainder: input.slice(length + llength)
      };
    } else if (firstByte <= 247) {
      length = firstByte - 191;
      innerRemainder = safeSlice(input, 1, length);
      while (innerRemainder.length) {
        d = _decode(innerRemainder);
        decoded.push(d.data);
        innerRemainder = d.remainder;
      }
      return {
        data: decoded,
        remainder: input.slice(length)
      };
    } else {
      llength = firstByte - 246;
      length = decodeLength(safeSlice(input, 1, llength));
      if (length < 56) {
        throw new Error("invalid RLP: encoded list too short");
      }
      const totalLength = llength + length;
      if (totalLength > input.length) {
        throw new Error("invalid RLP: total length is larger than the data");
      }
      innerRemainder = safeSlice(input, llength, totalLength);
      while (innerRemainder.length) {
        d = _decode(innerRemainder);
        decoded.push(d.data);
        innerRemainder = d.remainder;
      }
      return {
        data: decoded,
        remainder: input.slice(totalLength)
      };
    }
  }
  const cachedHexes = Array.from({ length: 256 }, (_v, i2) => i2.toString(16).padStart(2, "0"));
  function bytesToHex(uint8a) {
    let hex2 = "";
    for (let i2 = 0; i2 < uint8a.length; i2++) {
      hex2 += cachedHexes[uint8a[i2]];
    }
    return hex2;
  }
  function parseHexByte(hexByte) {
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte))
      throw new Error("Invalid byte sequence");
    return byte;
  }
  function hexToBytes(hex2) {
    if (typeof hex2 !== "string") {
      throw new TypeError("hexToBytes: expected string, got " + typeof hex2);
    }
    if (hex2.length % 2)
      throw new Error("hexToBytes: received invalid unpadded hex");
    const array2 = new Uint8Array(hex2.length / 2);
    for (let i2 = 0; i2 < array2.length; i2++) {
      const j = i2 * 2;
      array2[i2] = parseHexByte(hex2.slice(j, j + 2));
    }
    return array2;
  }
  function concatBytes(...arrays) {
    if (arrays.length === 1)
      return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i2 = 0, pad = 0; i2 < arrays.length; i2++) {
      const arr = arrays[i2];
      result.set(arr, pad);
      pad += arr.length;
    }
    return result;
  }
  function utf8ToBytes(utf) {
    return new TextEncoder().encode(utf);
  }
  function numberToHex$1(integer) {
    if (integer < 0) {
      throw new Error("Invalid integer as argument, must be unsigned!");
    }
    const hex2 = integer.toString(16);
    return hex2.length % 2 ? `0${hex2}` : hex2;
  }
  function padToEven$1(a) {
    return a.length % 2 ? `0${a}` : a;
  }
  function isHexPrefixed$1(str) {
    return str.length >= 2 && str[0] === "0" && str[1] === "x";
  }
  function stripHexPrefix$1(str) {
    if (typeof str !== "string") {
      return str;
    }
    return isHexPrefixed$1(str) ? str.slice(2) : str;
  }
  function toBytes(v) {
    if (v instanceof Uint8Array) {
      return v;
    }
    if (typeof v === "string") {
      if (isHexPrefixed$1(v)) {
        return hexToBytes(padToEven$1(stripHexPrefix$1(v)));
      }
      return utf8ToBytes(v);
    }
    if (typeof v === "number" || typeof v === "bigint") {
      if (!v) {
        return Uint8Array.from([]);
      }
      return hexToBytes(numberToHex$1(v));
    }
    if (v === null || v === void 0) {
      return Uint8Array.from([]);
    }
    throw new Error("toBytes: received unsupported type " + typeof v);
  }
  dist$3.utils = {
    bytesToHex,
    concatBytes,
    hexToBytes,
    utf8ToBytes
  };
  dist$3.RLP = { encode, decode };
  var keccak = {};
  var sha3$1 = {};
  var _u64$1 = {};
  Object.defineProperty(_u64$1, "__esModule", { value: true });
  _u64$1.add5L = _u64$1.add5H = _u64$1.add4H = _u64$1.add4L = _u64$1.add3H = _u64$1.add3L = _u64$1.add = _u64$1.rotlBL = _u64$1.rotlBH = _u64$1.rotlSL = _u64$1.rotlSH = _u64$1.rotr32L = _u64$1.rotr32H = _u64$1.rotrBL = _u64$1.rotrBH = _u64$1.rotrSL = _u64$1.rotrSH = _u64$1.shrSL = _u64$1.shrSH = _u64$1.toBig = _u64$1.split = _u64$1.fromBig = void 0;
  const U32_MASK64$1 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
  const _32n$1 = /* @__PURE__ */ BigInt(32);
  function fromBig$1(n, le = false) {
    if (le)
      return { h: Number(n & U32_MASK64$1), l: Number(n >> _32n$1 & U32_MASK64$1) };
    return { h: Number(n >> _32n$1 & U32_MASK64$1) | 0, l: Number(n & U32_MASK64$1) | 0 };
  }
  _u64$1.fromBig = fromBig$1;
  function split$1(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i2 = 0; i2 < lst.length; i2++) {
      const { h, l } = fromBig$1(lst[i2], le);
      [Ah[i2], Al[i2]] = [h, l];
    }
    return [Ah, Al];
  }
  _u64$1.split = split$1;
  const toBig$1 = (h, l) => BigInt(h >>> 0) << _32n$1 | BigInt(l >>> 0);
  _u64$1.toBig = toBig$1;
  const shrSH$1 = (h, _l, s2) => h >>> s2;
  _u64$1.shrSH = shrSH$1;
  const shrSL$1 = (h, l, s2) => h << 32 - s2 | l >>> s2;
  _u64$1.shrSL = shrSL$1;
  const rotrSH$1 = (h, l, s2) => h >>> s2 | l << 32 - s2;
  _u64$1.rotrSH = rotrSH$1;
  const rotrSL$1 = (h, l, s2) => h << 32 - s2 | l >>> s2;
  _u64$1.rotrSL = rotrSL$1;
  const rotrBH$1 = (h, l, s2) => h << 64 - s2 | l >>> s2 - 32;
  _u64$1.rotrBH = rotrBH$1;
  const rotrBL$1 = (h, l, s2) => h >>> s2 - 32 | l << 64 - s2;
  _u64$1.rotrBL = rotrBL$1;
  const rotr32H$1 = (_h, l) => l;
  _u64$1.rotr32H = rotr32H$1;
  const rotr32L$1 = (h, _l) => h;
  _u64$1.rotr32L = rotr32L$1;
  const rotlSH$1 = (h, l, s2) => h << s2 | l >>> 32 - s2;
  _u64$1.rotlSH = rotlSH$1;
  const rotlSL$1 = (h, l, s2) => l << s2 | h >>> 32 - s2;
  _u64$1.rotlSL = rotlSL$1;
  const rotlBH$1 = (h, l, s2) => l << s2 - 32 | h >>> 64 - s2;
  _u64$1.rotlBH = rotlBH$1;
  const rotlBL$1 = (h, l, s2) => h << s2 - 32 | l >>> 64 - s2;
  _u64$1.rotlBL = rotlBL$1;
  function add$1(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
  }
  _u64$1.add = add$1;
  const add3L$1 = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  _u64$1.add3L = add3L$1;
  const add3H$1 = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
  _u64$1.add3H = add3H$1;
  const add4L$1 = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  _u64$1.add4L = add4L$1;
  const add4H$1 = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
  _u64$1.add4H = add4H$1;
  const add5L$1 = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  _u64$1.add5L = add5L$1;
  const add5H$1 = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
  _u64$1.add5H = add5H$1;
  const u64$1 = {
    fromBig: fromBig$1,
    split: split$1,
    toBig: toBig$1,
    shrSH: shrSH$1,
    shrSL: shrSL$1,
    rotrSH: rotrSH$1,
    rotrSL: rotrSL$1,
    rotrBH: rotrBH$1,
    rotrBL: rotrBL$1,
    rotr32H: rotr32H$1,
    rotr32L: rotr32L$1,
    rotlSH: rotlSH$1,
    rotlSL: rotlSL$1,
    rotlBH: rotlBH$1,
    rotlBL: rotlBL$1,
    add: add$1,
    add3L: add3L$1,
    add3H: add3H$1,
    add4L: add4L$1,
    add4H: add4H$1,
    add5H: add5H$1,
    add5L: add5L$1
  };
  _u64$1.default = u64$1;
  Object.defineProperty(sha3$1, "__esModule", { value: true });
  sha3$1.shake256 = sha3$1.shake128 = sha3$1.keccak_512 = sha3$1.keccak_384 = sha3$1.keccak_256 = sha3$1.keccak_224 = sha3$1.sha3_512 = sha3$1.sha3_384 = sha3$1.sha3_256 = sha3$1.sha3_224 = sha3$1.Keccak = sha3$1.keccakP = void 0;
  const _assert_js_1$1 = _assert$1;
  const _u64_js_1$1 = _u64$1;
  const utils_js_1$5 = utils$6;
  const SHA3_PI$1 = [];
  const SHA3_ROTL$1 = [];
  const _SHA3_IOTA$1 = [];
  const _0n$1 = /* @__PURE__ */ BigInt(0);
  const _1n$1 = /* @__PURE__ */ BigInt(1);
  const _2n$1 = /* @__PURE__ */ BigInt(2);
  const _7n$1 = /* @__PURE__ */ BigInt(7);
  const _256n$1 = /* @__PURE__ */ BigInt(256);
  const _0x71n$1 = /* @__PURE__ */ BigInt(113);
  for (let round = 0, R2 = _1n$1, x = 1, y = 0; round < 24; round++) {
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI$1.push(2 * (5 * y + x));
    SHA3_ROTL$1.push((round + 1) * (round + 2) / 2 % 64);
    let t2 = _0n$1;
    for (let j = 0; j < 7; j++) {
      R2 = (R2 << _1n$1 ^ (R2 >> _7n$1) * _0x71n$1) % _256n$1;
      if (R2 & _2n$1)
        t2 ^= _1n$1 << (_1n$1 << /* @__PURE__ */ BigInt(j)) - _1n$1;
    }
    _SHA3_IOTA$1.push(t2);
  }
  const [SHA3_IOTA_H$1, SHA3_IOTA_L$1] = /* @__PURE__ */ (0, _u64_js_1$1.split)(_SHA3_IOTA$1, true);
  const rotlH$1 = (h, l, s2) => s2 > 32 ? (0, _u64_js_1$1.rotlBH)(h, l, s2) : (0, _u64_js_1$1.rotlSH)(h, l, s2);
  const rotlL$1 = (h, l, s2) => s2 > 32 ? (0, _u64_js_1$1.rotlBL)(h, l, s2) : (0, _u64_js_1$1.rotlSL)(h, l, s2);
  function keccakP$1(s2, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round = 24 - rounds; round < 24; round++) {
      for (let x = 0; x < 10; x++)
        B[x] = s2[x] ^ s2[x + 10] ^ s2[x + 20] ^ s2[x + 30] ^ s2[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH$1(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL$1(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s2[x + y] ^= Th;
          s2[x + y + 1] ^= Tl;
        }
      }
      let curH = s2[2];
      let curL = s2[3];
      for (let t2 = 0; t2 < 24; t2++) {
        const shift = SHA3_ROTL$1[t2];
        const Th = rotlH$1(curH, curL, shift);
        const Tl = rotlL$1(curH, curL, shift);
        const PI = SHA3_PI$1[t2];
        curH = s2[PI];
        curL = s2[PI + 1];
        s2[PI] = Th;
        s2[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s2[y + x];
        for (let x = 0; x < 10; x++)
          s2[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s2[0] ^= SHA3_IOTA_H$1[round];
      s2[1] ^= SHA3_IOTA_L$1[round];
    }
    B.fill(0);
  }
  sha3$1.keccakP = keccakP$1;
  let Keccak$1 = class Keccak2 extends utils_js_1$5.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
      super();
      this.blockLen = blockLen;
      this.suffix = suffix;
      this.outputLen = outputLen;
      this.enableXOF = enableXOF;
      this.rounds = rounds;
      this.pos = 0;
      this.posOut = 0;
      this.finished = false;
      this.destroyed = false;
      (0, _assert_js_1$1.number)(outputLen);
      if (0 >= this.blockLen || this.blockLen >= 200)
        throw new Error("Sha3 supports only keccak-f1600 function");
      this.state = new Uint8Array(200);
      this.state32 = (0, utils_js_1$5.u32)(this.state);
    }
    keccak() {
      if (!utils_js_1$5.isLE)
        (0, utils_js_1$5.byteSwap32)(this.state32);
      keccakP$1(this.state32, this.rounds);
      if (!utils_js_1$5.isLE)
        (0, utils_js_1$5.byteSwap32)(this.state32);
      this.posOut = 0;
      this.pos = 0;
    }
    update(data) {
      (0, _assert_js_1$1.exists)(this);
      const { blockLen, state } = this;
      data = (0, utils_js_1$5.toBytes)(data);
      const len2 = data.length;
      for (let pos = 0; pos < len2; ) {
        const take = Math.min(blockLen - this.pos, len2 - pos);
        for (let i2 = 0; i2 < take; i2++)
          state[this.pos++] ^= data[pos++];
        if (this.pos === blockLen)
          this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      const { state, suffix, pos, blockLen } = this;
      state[pos] ^= suffix;
      if ((suffix & 128) !== 0 && pos === blockLen - 1)
        this.keccak();
      state[blockLen - 1] ^= 128;
      this.keccak();
    }
    writeInto(out) {
      (0, _assert_js_1$1.exists)(this, false);
      (0, _assert_js_1$1.bytes)(out);
      this.finish();
      const bufferOut = this.state;
      const { blockLen } = this;
      for (let pos = 0, len2 = out.length; pos < len2; ) {
        if (this.posOut >= blockLen)
          this.keccak();
        const take = Math.min(blockLen - this.posOut, len2 - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
        this.posOut += take;
        pos += take;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible for this instance");
      return this.writeInto(out);
    }
    xof(bytes2) {
      (0, _assert_js_1$1.number)(bytes2);
      return this.xofInto(new Uint8Array(bytes2));
    }
    digestInto(out) {
      (0, _assert_js_1$1.output)(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      this.destroyed = true;
      this.state.fill(0);
    }
    _cloneInto(to) {
      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
      to || (to = new Keccak2(blockLen, suffix, outputLen, enableXOF, rounds));
      to.state32.set(this.state32);
      to.pos = this.pos;
      to.posOut = this.posOut;
      to.finished = this.finished;
      to.rounds = rounds;
      to.suffix = suffix;
      to.outputLen = outputLen;
      to.enableXOF = enableXOF;
      to.destroyed = this.destroyed;
      return to;
    }
  };
  sha3$1.Keccak = Keccak$1;
  const gen$1 = (suffix, blockLen, outputLen) => (0, utils_js_1$5.wrapConstructor)(() => new Keccak$1(blockLen, suffix, outputLen));
  sha3$1.sha3_224 = gen$1(6, 144, 224 / 8);
  sha3$1.sha3_256 = gen$1(6, 136, 256 / 8);
  sha3$1.sha3_384 = gen$1(6, 104, 384 / 8);
  sha3$1.sha3_512 = gen$1(6, 72, 512 / 8);
  sha3$1.keccak_224 = gen$1(1, 144, 224 / 8);
  sha3$1.keccak_256 = gen$1(1, 136, 256 / 8);
  sha3$1.keccak_384 = gen$1(1, 104, 384 / 8);
  sha3$1.keccak_512 = gen$1(1, 72, 512 / 8);
  const genShake$1 = (suffix, blockLen, outputLen) => (0, utils_js_1$5.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak$1(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
  sha3$1.shake128 = genShake$1(31, 168, 128 / 8);
  sha3$1.shake256 = genShake$1(31, 136, 256 / 8);
  function commonjsRequire(path) {
    throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }
  var utils$4 = { exports: {} };
  (function(module, exports) {
    var __importDefault2 = globalThis && globalThis.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = exports.utf8ToBytes = exports.createView = exports.concatBytes = exports.toHex = exports.bytesToHex = exports.assertBytes = exports.assertBool = void 0;
    exports.bytesToUtf8 = bytesToUtf8;
    exports.hexToBytes = hexToBytes2;
    exports.equalsBytes = equalsBytes;
    exports.wrapHash = wrapHash;
    const _assert_1 = __importDefault2(_assert$1);
    const utils_12 = require$$1$1;
    const assertBool = _assert_1.default.bool;
    exports.assertBool = assertBool;
    const assertBytes = _assert_1.default.bytes;
    exports.assertBytes = assertBytes;
    var utils_22 = require$$1$1;
    Object.defineProperty(exports, "bytesToHex", { enumerable: true, get: function() {
      return utils_22.bytesToHex;
    } });
    Object.defineProperty(exports, "toHex", { enumerable: true, get: function() {
      return utils_22.bytesToHex;
    } });
    Object.defineProperty(exports, "concatBytes", { enumerable: true, get: function() {
      return utils_22.concatBytes;
    } });
    Object.defineProperty(exports, "createView", { enumerable: true, get: function() {
      return utils_22.createView;
    } });
    Object.defineProperty(exports, "utf8ToBytes", { enumerable: true, get: function() {
      return utils_22.utf8ToBytes;
    } });
    function bytesToUtf8(data) {
      if (!(data instanceof Uint8Array)) {
        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);
      }
      return new TextDecoder().decode(data);
    }
    function hexToBytes2(data) {
      const sliced = data.startsWith("0x") ? data.substring(2) : data;
      return (0, utils_12.hexToBytes)(sliced);
    }
    function equalsBytes(a, b) {
      if (a.length !== b.length) {
        return false;
      }
      for (let i2 = 0; i2 < a.length; i2++) {
        if (a[i2] !== b[i2]) {
          return false;
        }
      }
      return true;
    }
    function wrapHash(hash2) {
      return (msg) => {
        _assert_1.default.bytes(msg);
        return hash2(msg);
      };
    }
    exports.crypto = (() => {
      const webCrypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
      const nodeRequire = typeof commonjsRequire === "function" && commonjsRequire.bind(module);
      return {
        node: nodeRequire && !webCrypto ? nodeRequire("crypto") : void 0,
        web: webCrypto
      };
    })();
  })(utils$4, utils$4.exports);
  var utilsExports = utils$4.exports;
  Object.defineProperty(keccak, "__esModule", { value: true });
  keccak.keccak512 = keccak.keccak384 = keccak.keccak256 = keccak.keccak224 = void 0;
  const sha3_1 = sha3$1;
  const utils_js_1$4 = utilsExports;
  keccak.keccak224 = (0, utils_js_1$4.wrapHash)(sha3_1.keccak_224);
  keccak.keccak256 = (() => {
    const k = (0, utils_js_1$4.wrapHash)(sha3_1.keccak_256);
    k.create = sha3_1.keccak_256.create;
    return k;
  })();
  keccak.keccak384 = (0, utils_js_1$4.wrapHash)(sha3_1.keccak_384);
  keccak.keccak512 = (0, utils_js_1$4.wrapHash)(sha3_1.keccak_512);
  var bytes$2 = {};
  var helpers$1 = {};
  var internal = {};
  Object.defineProperty(internal, "__esModule", { value: true });
  internal.isHexString = internal.getKeys = internal.fromAscii = internal.fromUtf8 = internal.toAscii = internal.arrayContainsArray = internal.getBinarySize = internal.padToEven = internal.stripHexPrefix = internal.isHexPrefixed = void 0;
  function isHexPrefixed(str) {
    if (typeof str !== "string") {
      throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);
    }
    return str[0] === "0" && str[1] === "x";
  }
  internal.isHexPrefixed = isHexPrefixed;
  const stripHexPrefix = (str) => {
    if (typeof str !== "string")
      throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);
    return isHexPrefixed(str) ? str.slice(2) : str;
  };
  internal.stripHexPrefix = stripHexPrefix;
  function padToEven(value) {
    let a = value;
    if (typeof a !== "string") {
      throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);
    }
    if (a.length % 2)
      a = `0${a}`;
    return a;
  }
  internal.padToEven = padToEven;
  function getBinarySize(str) {
    if (typeof str !== "string") {
      throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);
    }
    return Buffer2.byteLength(str, "utf8");
  }
  internal.getBinarySize = getBinarySize;
  function arrayContainsArray(superset, subset2, some) {
    if (Array.isArray(superset) !== true) {
      throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);
    }
    if (Array.isArray(subset2) !== true) {
      throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset2}'`);
    }
    return subset2[some === true ? "some" : "every"]((value) => superset.indexOf(value) >= 0);
  }
  internal.arrayContainsArray = arrayContainsArray;
  function toAscii(hex2) {
    let str = "";
    let i2 = 0;
    const l = hex2.length;
    if (hex2.substring(0, 2) === "0x")
      i2 = 2;
    for (; i2 < l; i2 += 2) {
      const code2 = parseInt(hex2.substr(i2, 2), 16);
      str += String.fromCharCode(code2);
    }
    return str;
  }
  internal.toAscii = toAscii;
  function fromUtf8(stringValue) {
    const str = Buffer2.from(stringValue, "utf8");
    return `0x${padToEven(str.toString("hex")).replace(/^0+|0+$/g, "")}`;
  }
  internal.fromUtf8 = fromUtf8;
  function fromAscii(stringValue) {
    let hex2 = "";
    for (let i2 = 0; i2 < stringValue.length; i2++) {
      const code2 = stringValue.charCodeAt(i2);
      const n = code2.toString(16);
      hex2 += n.length < 2 ? `0${n}` : n;
    }
    return `0x${hex2}`;
  }
  internal.fromAscii = fromAscii;
  function getKeys(params, key2, allowEmpty) {
    if (!Array.isArray(params)) {
      throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);
    }
    if (typeof key2 !== "string") {
      throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);
    }
    const result = [];
    for (let i2 = 0; i2 < params.length; i2++) {
      let value = params[i2][key2];
      if (allowEmpty === true && !value) {
        value = "";
      } else if (typeof value !== "string") {
        throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);
      }
      result.push(value);
    }
    return result;
  }
  internal.getKeys = getKeys;
  function isHexString(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/))
      return false;
    if (typeof length !== "undefined" && length > 0 && value.length !== 2 + 2 * length)
      return false;
    return true;
  }
  internal.isHexString = isHexString;
  Object.defineProperty(helpers$1, "__esModule", { value: true });
  helpers$1.assertIsString = helpers$1.assertIsArray = helpers$1.assertIsBuffer = helpers$1.assertIsHexString = void 0;
  const internal_1 = internal;
  const assertIsHexString = function(input) {
    if (!(0, internal_1.isHexString)(input)) {
      const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;
      throw new Error(msg);
    }
  };
  helpers$1.assertIsHexString = assertIsHexString;
  const assertIsBuffer = function(input) {
    if (!Buffer2.isBuffer(input)) {
      const msg = `This method only supports Buffer but input was: ${input}`;
      throw new Error(msg);
    }
  };
  helpers$1.assertIsBuffer = assertIsBuffer;
  const assertIsArray = function(input) {
    if (!Array.isArray(input)) {
      const msg = `This method only supports number arrays but input was: ${input}`;
      throw new Error(msg);
    }
  };
  helpers$1.assertIsArray = assertIsArray;
  const assertIsString = function(input) {
    if (typeof input !== "string") {
      const msg = `This method only supports strings but input was: ${input}`;
      throw new Error(msg);
    }
  };
  helpers$1.assertIsString = assertIsString;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.intToUnpaddedBuffer = exports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;
    const helpers_12 = helpers$1;
    const internal_12 = internal;
    const intToHex = function(i2) {
      if (!Number.isSafeInteger(i2) || i2 < 0) {
        throw new Error(`Received an invalid integer type: ${i2}`);
      }
      return `0x${i2.toString(16)}`;
    };
    exports.intToHex = intToHex;
    const intToBuffer = function(i2) {
      const hex2 = (0, exports.intToHex)(i2);
      return Buffer2.from((0, internal_12.padToEven)(hex2.slice(2)), "hex");
    };
    exports.intToBuffer = intToBuffer;
    const zeros = function(bytes2) {
      return Buffer2.allocUnsafe(bytes2).fill(0);
    };
    exports.zeros = zeros;
    const setLength = function(msg, length, right) {
      const buf = (0, exports.zeros)(length);
      if (right) {
        if (msg.length < length) {
          msg.copy(buf);
          return buf;
        }
        return msg.slice(0, length);
      } else {
        if (msg.length < length) {
          msg.copy(buf, length - msg.length);
          return buf;
        }
        return msg.slice(-length);
      }
    };
    const setLengthLeft = function(msg, length) {
      (0, helpers_12.assertIsBuffer)(msg);
      return setLength(msg, length, false);
    };
    exports.setLengthLeft = setLengthLeft;
    const setLengthRight = function(msg, length) {
      (0, helpers_12.assertIsBuffer)(msg);
      return setLength(msg, length, true);
    };
    exports.setLengthRight = setLengthRight;
    const stripZeros2 = function(a) {
      let first = a[0];
      while (a.length > 0 && first.toString() === "0") {
        a = a.slice(1);
        first = a[0];
      }
      return a;
    };
    const unpadBuffer = function(a) {
      (0, helpers_12.assertIsBuffer)(a);
      return stripZeros2(a);
    };
    exports.unpadBuffer = unpadBuffer;
    const unpadArray = function(a) {
      (0, helpers_12.assertIsArray)(a);
      return stripZeros2(a);
    };
    exports.unpadArray = unpadArray;
    const unpadHexString = function(a) {
      (0, helpers_12.assertIsHexString)(a);
      a = (0, internal_12.stripHexPrefix)(a);
      return "0x" + stripZeros2(a);
    };
    exports.unpadHexString = unpadHexString;
    const toBuffer = function(v) {
      if (v === null || v === void 0) {
        return Buffer2.allocUnsafe(0);
      }
      if (Buffer2.isBuffer(v)) {
        return Buffer2.from(v);
      }
      if (Array.isArray(v) || v instanceof Uint8Array) {
        return Buffer2.from(v);
      }
      if (typeof v === "string") {
        if (!(0, internal_12.isHexString)(v)) {
          throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);
        }
        return Buffer2.from((0, internal_12.padToEven)((0, internal_12.stripHexPrefix)(v)), "hex");
      }
      if (typeof v === "number") {
        return (0, exports.intToBuffer)(v);
      }
      if (typeof v === "bigint") {
        if (v < BigInt(0)) {
          throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`);
        }
        let n = v.toString(16);
        if (n.length % 2)
          n = "0" + n;
        return Buffer2.from(n, "hex");
      }
      if (v.toArray) {
        return Buffer2.from(v.toArray());
      }
      if (v.toBuffer) {
        return Buffer2.from(v.toBuffer());
      }
      throw new Error("invalid type");
    };
    exports.toBuffer = toBuffer;
    const bufferToHex = function(buf) {
      buf = (0, exports.toBuffer)(buf);
      return "0x" + buf.toString("hex");
    };
    exports.bufferToHex = bufferToHex;
    function bufferToBigInt(buf) {
      const hex2 = (0, exports.bufferToHex)(buf);
      if (hex2 === "0x") {
        return BigInt(0);
      }
      return BigInt(hex2);
    }
    exports.bufferToBigInt = bufferToBigInt;
    function bigIntToBuffer(num) {
      return (0, exports.toBuffer)("0x" + num.toString(16));
    }
    exports.bigIntToBuffer = bigIntToBuffer;
    const bufferToInt = function(buf) {
      const res = Number(bufferToBigInt(buf));
      if (!Number.isSafeInteger(res))
        throw new Error("Number exceeds 53 bits");
      return res;
    };
    exports.bufferToInt = bufferToInt;
    const fromSigned = function(num) {
      return BigInt.asIntN(256, bufferToBigInt(num));
    };
    exports.fromSigned = fromSigned;
    const toUnsigned = function(num) {
      return bigIntToBuffer(BigInt.asUintN(256, num));
    };
    exports.toUnsigned = toUnsigned;
    const addHexPrefix = function(str) {
      if (typeof str !== "string") {
        return str;
      }
      return (0, internal_12.isHexPrefixed)(str) ? str : "0x" + str;
    };
    exports.addHexPrefix = addHexPrefix;
    function short(buffer2, maxLength = 50) {
      const bufferStr = Buffer2.isBuffer(buffer2) ? buffer2.toString("hex") : buffer2;
      if (bufferStr.length <= maxLength) {
        return bufferStr;
      }
      return bufferStr.slice(0, maxLength) + "…";
    }
    exports.short = short;
    const toUtf8 = function(hex2) {
      const zerosRegexp = /^(00)+|(00)+$/g;
      hex2 = (0, internal_12.stripHexPrefix)(hex2);
      if (hex2.length % 2 !== 0) {
        throw new Error("Invalid non-even hex string input for toUtf8() provided");
      }
      const bufferVal = Buffer2.from(hex2.replace(zerosRegexp, ""), "hex");
      return bufferVal.toString("utf8");
    };
    exports.toUtf8 = toUtf8;
    const baToJSON = function(ba) {
      if (Buffer2.isBuffer(ba)) {
        return `0x${ba.toString("hex")}`;
      } else if (ba instanceof Array) {
        const array2 = [];
        for (let i2 = 0; i2 < ba.length; i2++) {
          array2.push((0, exports.baToJSON)(ba[i2]));
        }
        return array2;
      }
    };
    exports.baToJSON = baToJSON;
    const validateNoLeadingZeroes = function(values) {
      for (const [k, v] of Object.entries(values)) {
        if (v !== void 0 && v.length > 0 && v[0] === 0) {
          throw new Error(`${k} cannot have leading zeroes, received: ${v.toString("hex")}`);
        }
      }
    };
    exports.validateNoLeadingZeroes = validateNoLeadingZeroes;
    function arrToBufArr(arr) {
      if (!Array.isArray(arr)) {
        return Buffer2.from(arr);
      }
      return arr.map((a) => arrToBufArr(a));
    }
    exports.arrToBufArr = arrToBufArr;
    function bufArrToArr(arr) {
      if (!Array.isArray(arr)) {
        return Uint8Array.from(arr ?? []);
      }
      return arr.map((a) => bufArrToArr(a));
    }
    exports.bufArrToArr = bufArrToArr;
    const bigIntToHex2 = (num) => {
      return "0x" + num.toString(16);
    };
    exports.bigIntToHex = bigIntToHex2;
    function bigIntToUnpaddedBuffer(value) {
      return (0, exports.unpadBuffer)(bigIntToBuffer(value));
    }
    exports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;
    function intToUnpaddedBuffer(value) {
      return (0, exports.unpadBuffer)((0, exports.intToBuffer)(value));
    }
    exports.intToUnpaddedBuffer = intToUnpaddedBuffer;
  })(bytes$2);
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accountBodyToRLP = exports.accountBodyToSlim = exports.accountBodyFromSlim = exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;
    const rlp_12 = dist$3;
    const keccak_12 = keccak;
    const secp256k1_12 = secp256k1$1;
    const utils_12 = utilsExports;
    const bytes_12 = bytes$2;
    const constants_12 = constants;
    const helpers_12 = helpers$1;
    const internal_12 = internal;
    const _0n2 = BigInt(0);
    class Account {
      /**
       * This constructor assigns and validates the values.
       * Use the static factory methods to assist in creating an Account from varying data types.
       */
      constructor(nonce = _0n2, balance = _0n2, storageRoot = constants_12.KECCAK256_RLP, codeHash = constants_12.KECCAK256_NULL) {
        this.nonce = nonce;
        this.balance = balance;
        this.storageRoot = storageRoot;
        this.codeHash = codeHash;
        this._validate();
      }
      static fromAccountData(accountData) {
        const { nonce, balance, storageRoot, codeHash } = accountData;
        return new Account(nonce !== void 0 ? (0, bytes_12.bufferToBigInt)((0, bytes_12.toBuffer)(nonce)) : void 0, balance !== void 0 ? (0, bytes_12.bufferToBigInt)((0, bytes_12.toBuffer)(balance)) : void 0, storageRoot !== void 0 ? (0, bytes_12.toBuffer)(storageRoot) : void 0, codeHash !== void 0 ? (0, bytes_12.toBuffer)(codeHash) : void 0);
      }
      static fromRlpSerializedAccount(serialized) {
        const values = (0, bytes_12.arrToBufArr)(rlp_12.RLP.decode(Uint8Array.from(serialized)));
        if (!Array.isArray(values)) {
          throw new Error("Invalid serialized account input. Must be array");
        }
        return this.fromValuesArray(values);
      }
      static fromValuesArray(values) {
        const [nonce, balance, storageRoot, codeHash] = values;
        return new Account((0, bytes_12.bufferToBigInt)(nonce), (0, bytes_12.bufferToBigInt)(balance), storageRoot, codeHash);
      }
      _validate() {
        if (this.nonce < _0n2) {
          throw new Error("nonce must be greater than zero");
        }
        if (this.balance < _0n2) {
          throw new Error("balance must be greater than zero");
        }
        if (this.storageRoot.length !== 32) {
          throw new Error("storageRoot must have a length of 32");
        }
        if (this.codeHash.length !== 32) {
          throw new Error("codeHash must have a length of 32");
        }
      }
      /**
       * Returns a Buffer Array of the raw Buffers for the account, in order.
       */
      raw() {
        return [
          (0, bytes_12.bigIntToUnpaddedBuffer)(this.nonce),
          (0, bytes_12.bigIntToUnpaddedBuffer)(this.balance),
          this.storageRoot,
          this.codeHash
        ];
      }
      /**
       * Returns the RLP serialization of the account as a `Buffer`.
       */
      serialize() {
        return Buffer2.from(rlp_12.RLP.encode((0, bytes_12.bufArrToArr)(this.raw())));
      }
      /**
       * Returns a `Boolean` determining if the account is a contract.
       */
      isContract() {
        return !this.codeHash.equals(constants_12.KECCAK256_NULL);
      }
      /**
       * Returns a `Boolean` determining if the account is empty complying to the definition of
       * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):
       * "An account is considered empty when it has no code and zero nonce and zero balance."
       */
      isEmpty() {
        return this.balance === _0n2 && this.nonce === _0n2 && this.codeHash.equals(constants_12.KECCAK256_NULL);
      }
    }
    exports.Account = Account;
    const isValidAddress = function(hexAddress) {
      try {
        (0, helpers_12.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
    };
    exports.isValidAddress = isValidAddress;
    const toChecksumAddress = function(hexAddress, eip1191ChainId) {
      (0, helpers_12.assertIsHexString)(hexAddress);
      const address2 = (0, internal_12.stripHexPrefix)(hexAddress).toLowerCase();
      let prefix = "";
      if (eip1191ChainId !== void 0) {
        const chainId = (0, bytes_12.bufferToBigInt)((0, bytes_12.toBuffer)(eip1191ChainId));
        prefix = chainId.toString() + "0x";
      }
      const buf = Buffer2.from(prefix + address2, "utf8");
      const hash2 = (0, utils_12.bytesToHex)((0, keccak_12.keccak256)(buf));
      let ret = "0x";
      for (let i2 = 0; i2 < address2.length; i2++) {
        if (parseInt(hash2[i2], 16) >= 8) {
          ret += address2[i2].toUpperCase();
        } else {
          ret += address2[i2];
        }
      }
      return ret;
    };
    exports.toChecksumAddress = toChecksumAddress;
    const isValidChecksumAddress = function(hexAddress, eip1191ChainId) {
      return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
    };
    exports.isValidChecksumAddress = isValidChecksumAddress;
    const generateAddress = function(from, nonce) {
      (0, helpers_12.assertIsBuffer)(from);
      (0, helpers_12.assertIsBuffer)(nonce);
      if ((0, bytes_12.bufferToBigInt)(nonce) === BigInt(0)) {
        return Buffer2.from((0, keccak_12.keccak256)(rlp_12.RLP.encode((0, bytes_12.bufArrToArr)([from, null])))).slice(-20);
      }
      return Buffer2.from((0, keccak_12.keccak256)(rlp_12.RLP.encode((0, bytes_12.bufArrToArr)([from, nonce])))).slice(-20);
    };
    exports.generateAddress = generateAddress;
    const generateAddress2 = function(from, salt, initCode) {
      (0, helpers_12.assertIsBuffer)(from);
      (0, helpers_12.assertIsBuffer)(salt);
      (0, helpers_12.assertIsBuffer)(initCode);
      if (from.length !== 20) {
        throw new Error("Expected from to be of length 20");
      }
      if (salt.length !== 32) {
        throw new Error("Expected salt to be of length 32");
      }
      const address2 = (0, keccak_12.keccak256)(Buffer2.concat([Buffer2.from("ff", "hex"), from, salt, (0, keccak_12.keccak256)(initCode)]));
      return (0, bytes_12.toBuffer)(address2).slice(-20);
    };
    exports.generateAddress2 = generateAddress2;
    const isValidPrivate = function(privateKey) {
      return secp256k1_12.secp256k1.utils.isValidPrivateKey(privateKey);
    };
    exports.isValidPrivate = isValidPrivate;
    const isValidPublic = function(publicKey, sanitize = false) {
      (0, helpers_12.assertIsBuffer)(publicKey);
      if (publicKey.length === 64) {
        try {
          secp256k1_12.secp256k1.ProjectivePoint.fromHex(Buffer2.concat([Buffer2.from([4]), publicKey]));
          return true;
        } catch (e) {
          return false;
        }
      }
      if (!sanitize) {
        return false;
      }
      try {
        secp256k1_12.secp256k1.ProjectivePoint.fromHex(publicKey);
        return true;
      } catch (e) {
        return false;
      }
    };
    exports.isValidPublic = isValidPublic;
    const pubToAddress = function(pubKey, sanitize = false) {
      (0, helpers_12.assertIsBuffer)(pubKey);
      if (sanitize && pubKey.length !== 64) {
        pubKey = Buffer2.from(secp256k1_12.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1));
      }
      if (pubKey.length !== 64) {
        throw new Error("Expected pubKey to be of length 64");
      }
      return Buffer2.from((0, keccak_12.keccak256)(pubKey)).slice(-20);
    };
    exports.pubToAddress = pubToAddress;
    exports.publicToAddress = exports.pubToAddress;
    const privateToPublic = function(privateKey) {
      (0, helpers_12.assertIsBuffer)(privateKey);
      return Buffer2.from(secp256k1_12.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1));
    };
    exports.privateToPublic = privateToPublic;
    const privateToAddress = function(privateKey) {
      return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
    };
    exports.privateToAddress = privateToAddress;
    const importPublic = function(publicKey) {
      (0, helpers_12.assertIsBuffer)(publicKey);
      if (publicKey.length !== 64) {
        publicKey = Buffer2.from(secp256k1_12.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1));
      }
      return publicKey;
    };
    exports.importPublic = importPublic;
    const zeroAddress = function() {
      const addressLength = 20;
      const addr = (0, bytes_12.zeros)(addressLength);
      return (0, bytes_12.bufferToHex)(addr);
    };
    exports.zeroAddress = zeroAddress;
    const isZeroAddress = function(hexAddress) {
      try {
        (0, helpers_12.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      const zeroAddr = (0, exports.zeroAddress)();
      return zeroAddr === hexAddress;
    };
    exports.isZeroAddress = isZeroAddress;
    function accountBodyFromSlim(body) {
      const [nonce, balance, storageRoot, codeHash] = body;
      return [
        nonce,
        balance,
        (0, bytes_12.arrToBufArr)(storageRoot).length === 0 ? constants_12.KECCAK256_RLP : storageRoot,
        (0, bytes_12.arrToBufArr)(codeHash).length === 0 ? constants_12.KECCAK256_NULL : codeHash
      ];
    }
    exports.accountBodyFromSlim = accountBodyFromSlim;
    const emptyUint8Arr = new Uint8Array(0);
    function accountBodyToSlim(body) {
      const [nonce, balance, storageRoot, codeHash] = body;
      return [
        nonce,
        balance,
        (0, bytes_12.arrToBufArr)(storageRoot).equals(constants_12.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,
        (0, bytes_12.arrToBufArr)(codeHash).equals(constants_12.KECCAK256_NULL) ? emptyUint8Arr : codeHash
      ];
    }
    exports.accountBodyToSlim = accountBodyToSlim;
    function accountBodyToRLP(body, couldBeSlim = true) {
      const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;
      return (0, bytes_12.arrToBufArr)(rlp_12.RLP.encode(accountBody));
    }
    exports.accountBodyToRLP = accountBodyToRLP;
  })(account);
  var address$1 = {};
  Object.defineProperty(address$1, "__esModule", { value: true });
  address$1.Address = void 0;
  const account_1 = account;
  const bytes_1$4 = bytes$2;
  class Address {
    constructor(buf) {
      if (buf.length !== 20) {
        throw new Error("Invalid address length");
      }
      this.buf = buf;
    }
    /**
     * Returns the zero address.
     */
    static zero() {
      return new Address((0, bytes_1$4.zeros)(20));
    }
    /**
     * Returns an Address object from a hex-encoded string.
     * @param str - Hex-encoded address
     */
    static fromString(str) {
      if (!(0, account_1.isValidAddress)(str)) {
        throw new Error("Invalid address");
      }
      return new Address((0, bytes_1$4.toBuffer)(str));
    }
    /**
     * Returns an address for a given public key.
     * @param pubKey The two points of an uncompressed key
     */
    static fromPublicKey(pubKey) {
      if (!Buffer2.isBuffer(pubKey)) {
        throw new Error("Public key should be Buffer");
      }
      const buf = (0, account_1.pubToAddress)(pubKey);
      return new Address(buf);
    }
    /**
     * Returns an address for a given private key.
     * @param privateKey A private key must be 256 bits wide
     */
    static fromPrivateKey(privateKey) {
      if (!Buffer2.isBuffer(privateKey)) {
        throw new Error("Private key should be Buffer");
      }
      const buf = (0, account_1.privateToAddress)(privateKey);
      return new Address(buf);
    }
    /**
     * Generates an address for a newly created contract.
     * @param from The address which is creating this new address
     * @param nonce The nonce of the from account
     */
    static generate(from, nonce) {
      if (typeof nonce !== "bigint") {
        throw new Error("Expected nonce to be a bigint");
      }
      return new Address((0, account_1.generateAddress)(from.buf, (0, bytes_1$4.bigIntToBuffer)(nonce)));
    }
    /**
     * Generates an address for a contract created using CREATE2.
     * @param from The address which is creating this new address
     * @param salt A salt
     * @param initCode The init code of the contract being created
     */
    static generate2(from, salt, initCode) {
      if (!Buffer2.isBuffer(salt)) {
        throw new Error("Expected salt to be a Buffer");
      }
      if (!Buffer2.isBuffer(initCode)) {
        throw new Error("Expected initCode to be a Buffer");
      }
      return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));
    }
    /**
     * Is address equal to another.
     */
    equals(address2) {
      return this.buf.equals(address2.buf);
    }
    /**
     * Is address zero.
     */
    isZero() {
      return this.equals(Address.zero());
    }
    /**
     * True if address is in the address range defined
     * by EIP-1352
     */
    isPrecompileOrSystemAddress() {
      const address2 = (0, bytes_1$4.bufferToBigInt)(this.buf);
      const rangeMin = BigInt(0);
      const rangeMax = BigInt("0xffff");
      return address2 >= rangeMin && address2 <= rangeMax;
    }
    /**
     * Returns hex encoding of address.
     */
    toString() {
      return "0x" + this.buf.toString("hex");
    }
    /**
     * Returns Buffer representation of address.
     */
    toBuffer() {
      return Buffer2.from(this.buf);
    }
  }
  address$1.Address = Address;
  var withdrawal = {};
  var types$2 = {};
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toType = exports.TypeOutput = void 0;
    const bytes_12 = bytes$2;
    const internal_12 = internal;
    var TypeOutput;
    (function(TypeOutput2) {
      TypeOutput2[TypeOutput2["Number"] = 0] = "Number";
      TypeOutput2[TypeOutput2["BigInt"] = 1] = "BigInt";
      TypeOutput2[TypeOutput2["Buffer"] = 2] = "Buffer";
      TypeOutput2[TypeOutput2["PrefixedHexString"] = 3] = "PrefixedHexString";
    })(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));
    function toType(input, outputType) {
      if (input === null) {
        return null;
      }
      if (input === void 0) {
        return void 0;
      }
      if (typeof input === "string" && !(0, internal_12.isHexString)(input)) {
        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);
      } else if (typeof input === "number" && !Number.isSafeInteger(input)) {
        throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
      }
      const output2 = (0, bytes_12.toBuffer)(input);
      switch (outputType) {
        case TypeOutput.Buffer:
          return output2;
        case TypeOutput.BigInt:
          return (0, bytes_12.bufferToBigInt)(output2);
        case TypeOutput.Number: {
          const bigInt = (0, bytes_12.bufferToBigInt)(output2);
          if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {
            throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
          }
          return Number(bigInt);
        }
        case TypeOutput.PrefixedHexString:
          return (0, bytes_12.bufferToHex)(output2);
        default:
          throw new Error("unknown outputType");
      }
    }
    exports.toType = toType;
  })(types$2);
  Object.defineProperty(withdrawal, "__esModule", { value: true });
  withdrawal.Withdrawal = void 0;
  const address_1 = address$1;
  const bytes_1$3 = bytes$2;
  const types_1 = types$2;
  class Withdrawal {
    /**
     * This constructor assigns and validates the values.
     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.
     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot
     */
    constructor(index, validatorIndex, address2, amount) {
      this.index = index;
      this.validatorIndex = validatorIndex;
      this.address = address2;
      this.amount = amount;
    }
    static fromWithdrawalData(withdrawalData) {
      const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData } = withdrawalData;
      const index = (0, types_1.toType)(indexData, types_1.TypeOutput.BigInt);
      const validatorIndex = (0, types_1.toType)(validatorIndexData, types_1.TypeOutput.BigInt);
      const address2 = new address_1.Address((0, types_1.toType)(addressData, types_1.TypeOutput.Buffer));
      const amount = (0, types_1.toType)(amountData, types_1.TypeOutput.BigInt);
      return new Withdrawal(index, validatorIndex, address2, amount);
    }
    static fromValuesArray(withdrawalArray) {
      if (withdrawalArray.length !== 4) {
        throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);
      }
      const [index, validatorIndex, address2, amount] = withdrawalArray;
      return Withdrawal.fromWithdrawalData({ index, validatorIndex, address: address2, amount });
    }
    /**
     * Convert a withdrawal to a buffer array
     * @param withdrawal the withdrawal to convert
     * @returns buffer array of the withdrawal
     */
    static toBufferArray(withdrawal2) {
      const { index, validatorIndex, address: address2, amount } = withdrawal2;
      const indexBuffer = (0, types_1.toType)(index, types_1.TypeOutput.BigInt) === BigInt(0) ? Buffer2.alloc(0) : (0, types_1.toType)(index, types_1.TypeOutput.Buffer);
      const validatorIndexBuffer = (0, types_1.toType)(validatorIndex, types_1.TypeOutput.BigInt) === BigInt(0) ? Buffer2.alloc(0) : (0, types_1.toType)(validatorIndex, types_1.TypeOutput.Buffer);
      let addressBuffer;
      if (address2 instanceof address_1.Address) {
        addressBuffer = address2.buf;
      } else {
        addressBuffer = (0, types_1.toType)(address2, types_1.TypeOutput.Buffer);
      }
      const amountBuffer = (0, types_1.toType)(amount, types_1.TypeOutput.BigInt) === BigInt(0) ? Buffer2.alloc(0) : (0, types_1.toType)(amount, types_1.TypeOutput.Buffer);
      return [indexBuffer, validatorIndexBuffer, addressBuffer, amountBuffer];
    }
    raw() {
      return Withdrawal.toBufferArray(this);
    }
    toValue() {
      return {
        index: this.index,
        validatorIndex: this.validatorIndex,
        address: this.address.buf,
        amount: this.amount
      };
    }
    toJSON() {
      return {
        index: (0, bytes_1$3.bigIntToHex)(this.index),
        validatorIndex: (0, bytes_1$3.bigIntToHex)(this.validatorIndex),
        address: "0x" + this.address.buf.toString("hex"),
        amount: (0, bytes_1$3.bigIntToHex)(this.amount)
      };
    }
  }
  withdrawal.Withdrawal = Withdrawal;
  var signature = {};
  Object.defineProperty(signature, "__esModule", { value: true });
  signature.hashPersonalMessage = signature.isValidSignature = signature.fromRpcSig = signature.toCompactSig = signature.toRpcSig = signature.ecrecover = signature.ecsign = void 0;
  const keccak_1$1 = keccak;
  const secp256k1_1 = secp256k1$1;
  const bytes_1$2 = bytes$2;
  const constants_1 = constants;
  const helpers_1 = helpers$1;
  function ecsign(msgHash, privateKey, chainId) {
    const sig = secp256k1_1.secp256k1.sign(msgHash, privateKey);
    const buf = sig.toCompactRawBytes();
    const r2 = Buffer2.from(buf.slice(0, 32));
    const s2 = Buffer2.from(buf.slice(32, 64));
    const v = chainId === void 0 ? BigInt(sig.recovery + 27) : BigInt(sig.recovery + 35) + BigInt(chainId) * BigInt(2);
    return { r: r2, s: s2, v };
  }
  signature.ecsign = ecsign;
  function calculateSigRecovery(v, chainId) {
    if (v === BigInt(0) || v === BigInt(1))
      return v;
    if (chainId === void 0) {
      return v - BigInt(27);
    }
    return v - (chainId * BigInt(2) + BigInt(35));
  }
  function isValidSigRecovery(recovery) {
    return recovery === BigInt(0) || recovery === BigInt(1);
  }
  const ecrecover = function(msgHash, v, r2, s2, chainId) {
    const signature2 = Buffer2.concat([(0, bytes_1$2.setLengthLeft)(r2, 32), (0, bytes_1$2.setLengthLeft)(s2, 32)], 64);
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
      throw new Error("Invalid signature v value");
    }
    const sig = secp256k1_1.secp256k1.Signature.fromCompact(signature2).addRecoveryBit(Number(recovery));
    const senderPubKey = sig.recoverPublicKey(msgHash);
    return Buffer2.from(senderPubKey.toRawBytes(false).slice(1));
  };
  signature.ecrecover = ecrecover;
  const toRpcSig = function(v, r2, s2, chainId) {
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
      throw new Error("Invalid signature v value");
    }
    return (0, bytes_1$2.bufferToHex)(Buffer2.concat([(0, bytes_1$2.setLengthLeft)(r2, 32), (0, bytes_1$2.setLengthLeft)(s2, 32), (0, bytes_1$2.toBuffer)(v)]));
  };
  signature.toRpcSig = toRpcSig;
  const toCompactSig = function(v, r2, s2, chainId) {
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
      throw new Error("Invalid signature v value");
    }
    let ss = s2;
    if (v > BigInt(28) && v % BigInt(2) === BigInt(1) || v === BigInt(1) || v === BigInt(28)) {
      ss = Buffer2.from(s2);
      ss[0] |= 128;
    }
    return (0, bytes_1$2.bufferToHex)(Buffer2.concat([(0, bytes_1$2.setLengthLeft)(r2, 32), (0, bytes_1$2.setLengthLeft)(ss, 32)]));
  };
  signature.toCompactSig = toCompactSig;
  const fromRpcSig = function(sig) {
    const buf = (0, bytes_1$2.toBuffer)(sig);
    let r2;
    let s2;
    let v;
    if (buf.length >= 65) {
      r2 = buf.slice(0, 32);
      s2 = buf.slice(32, 64);
      v = (0, bytes_1$2.bufferToBigInt)(buf.slice(64));
    } else if (buf.length === 64) {
      r2 = buf.slice(0, 32);
      s2 = buf.slice(32, 64);
      v = BigInt((0, bytes_1$2.bufferToInt)(buf.slice(32, 33)) >> 7);
      s2[0] &= 127;
    } else {
      throw new Error("Invalid signature length");
    }
    if (v < 27) {
      v = v + BigInt(27);
    }
    return {
      v,
      r: r2,
      s: s2
    };
  };
  signature.fromRpcSig = fromRpcSig;
  const isValidSignature = function(v, r2, s2, homesteadOrLater = true, chainId) {
    if (r2.length !== 32 || s2.length !== 32) {
      return false;
    }
    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
      return false;
    }
    const rBigInt = (0, bytes_1$2.bufferToBigInt)(r2);
    const sBigInt = (0, bytes_1$2.bufferToBigInt)(s2);
    if (rBigInt === BigInt(0) || rBigInt >= constants_1.SECP256K1_ORDER || sBigInt === BigInt(0) || sBigInt >= constants_1.SECP256K1_ORDER) {
      return false;
    }
    if (homesteadOrLater && sBigInt >= constants_1.SECP256K1_ORDER_DIV_2) {
      return false;
    }
    return true;
  };
  signature.isValidSignature = isValidSignature;
  const hashPersonalMessage = function(message) {
    (0, helpers_1.assertIsBuffer)(message);
    const prefix = Buffer2.from(`Ethereum Signed Message:
${message.length}`, "utf-8");
    return Buffer2.from((0, keccak_1$1.keccak256)(Buffer2.concat([prefix, message])));
  };
  signature.hashPersonalMessage = hashPersonalMessage;
  var encoding = {};
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compactBytesToNibbles = exports.bytesToNibbles = exports.nibblesToCompactBytes = exports.nibblesToBytes = exports.hasTerminator = void 0;
    const hasTerminator = (nibbles) => {
      return nibbles.length > 0 && nibbles[nibbles.length - 1] === 16;
    };
    exports.hasTerminator = hasTerminator;
    const nibblesToBytes = (nibbles, bytes2) => {
      for (let bi = 0, ni = 0; ni < nibbles.length; bi += 1, ni += 2) {
        bytes2[bi] = nibbles[ni] << 4 | nibbles[ni + 1];
      }
    };
    exports.nibblesToBytes = nibblesToBytes;
    const nibblesToCompactBytes = (nibbles) => {
      let terminator = 0;
      if ((0, exports.hasTerminator)(nibbles)) {
        terminator = 1;
        nibbles = nibbles.subarray(0, nibbles.length - 1);
      }
      const buf = new Uint8Array(nibbles.length / 2 + 1);
      buf[0] = terminator << 5;
      if ((nibbles.length & 1) === 1) {
        buf[0] |= 1 << 4;
        buf[0] |= nibbles[0];
        nibbles = nibbles.subarray(1);
      }
      (0, exports.nibblesToBytes)(nibbles, buf.subarray(1));
      return buf;
    };
    exports.nibblesToCompactBytes = nibblesToCompactBytes;
    const bytesToNibbles = (str) => {
      const l = str.length * 2 + 1;
      const nibbles = new Uint8Array(l);
      for (let i2 = 0; i2 < str.length; i2++) {
        const b = str[i2];
        nibbles[i2 * 2] = b / 16;
        nibbles[i2 * 2 + 1] = b % 16;
      }
      nibbles[l - 1] = 16;
      return nibbles;
    };
    exports.bytesToNibbles = bytesToNibbles;
    const compactBytesToNibbles = (compact) => {
      if (compact.length === 0) {
        return compact;
      }
      let base2 = (0, exports.bytesToNibbles)(compact);
      if (base2[0] < 2) {
        base2 = base2.subarray(0, base2.length - 1);
      }
      const chop = 2 - (base2[0] & 1);
      return base2.subarray(chop);
    };
    exports.compactBytesToNibbles = compactBytesToNibbles;
  })(encoding);
  var asyncEventEmitter = {};
  Object.defineProperty(asyncEventEmitter, "__esModule", { value: true });
  asyncEventEmitter.AsyncEventEmitter = void 0;
  const events_1 = eventsExports;
  async function runInSeries(context, tasks, data) {
    let error2;
    for await (const task of tasks) {
      try {
        if (task.length < 2) {
          task.call(context, data);
        } else {
          await new Promise((resolve, reject) => {
            task.call(context, data, (error3) => {
              if (error3) {
                reject(error3);
              } else {
                resolve();
              }
            });
          });
        }
      } catch (e) {
        error2 = e;
      }
    }
    if (error2) {
      throw error2;
    }
  }
  class AsyncEventEmitter extends events_1.EventEmitter {
    emit(event, ...args) {
      let [data, callback] = args;
      const self2 = this;
      let listeners = self2._events[event] ?? [];
      if (callback === void 0 && typeof data === "function") {
        callback = data;
        data = void 0;
      }
      if (event === "newListener" || event === "removeListener") {
        data = {
          event: data,
          fn: callback
        };
        callback = void 0;
      }
      listeners = Array.isArray(listeners) ? listeners : [listeners];
      runInSeries(self2, listeners.slice(), data).then(callback).catch(callback);
      return self2.listenerCount(event) > 0;
    }
    once(event, listener) {
      const self2 = this;
      let g;
      if (typeof listener !== "function") {
        throw new TypeError("listener must be a function");
      }
      if (listener.length >= 2) {
        g = function(e, next) {
          self2.removeListener(event, g);
          void listener(e, next);
        };
      } else {
        g = function(e) {
          self2.removeListener(event, g);
          void listener(e, g);
        };
      }
      self2.on(event, g);
      return self2;
    }
    first(event, listener) {
      let listeners = this._events[event] ?? [];
      if (typeof listener !== "function") {
        throw new TypeError("listener must be a function");
      }
      if (!Array.isArray(listeners)) {
        this._events[event] = listeners = [listeners];
      }
      listeners.unshift(listener);
      return this;
    }
    before(event, target, listener) {
      return this.beforeOrAfter(event, target, listener);
    }
    after(event, target, listener) {
      return this.beforeOrAfter(event, target, listener, "after");
    }
    beforeOrAfter(event, target, listener, beforeOrAfter) {
      let listeners = this._events[event] ?? [];
      let i2;
      let index;
      const add2 = beforeOrAfter === "after" ? 1 : 0;
      if (typeof listener !== "function") {
        throw new TypeError("listener must be a function");
      }
      if (typeof target !== "function") {
        throw new TypeError("target must be a function");
      }
      if (!Array.isArray(listeners)) {
        this._events[event] = listeners = [listeners];
      }
      index = listeners.length;
      for (i2 = listeners.length; i2--; ) {
        if (listeners[i2] === target) {
          index = i2 + add2;
          break;
        }
      }
      listeners.splice(index, 0, listener);
      return this;
    }
    on(event, listener) {
      return super.on(event, listener);
    }
    addListener(event, listener) {
      return super.addListener(event, listener);
    }
    prependListener(event, listener) {
      return super.prependListener(event, listener);
    }
    prependOnceListener(event, listener) {
      return super.prependOnceListener(event, listener);
    }
    removeAllListeners(event) {
      return super.removeAllListeners(event);
    }
    removeListener(event, listener) {
      return super.removeListener(event, listener);
    }
    eventNames() {
      return super.eventNames();
    }
    listeners(event) {
      return super.listeners(event);
    }
    listenerCount(event) {
      return super.listenerCount(event);
    }
    getMaxListeners() {
      return super.getMaxListeners();
    }
    setMaxListeners(maxListeners) {
      return super.setMaxListeners(maxListeners);
    }
  }
  asyncEventEmitter.AsyncEventEmitter = AsyncEventEmitter;
  var lock = {};
  Object.defineProperty(lock, "__esModule", { value: true });
  lock.Lock = void 0;
  class Lock {
    constructor() {
      this.permits = 1;
      this.promiseResolverQueue = [];
    }
    /**
     * Returns a promise used to wait for a permit to become available. This method should be awaited on.
     * @returns  A promise that gets resolved when execution is allowed to proceed.
     */
    async acquire() {
      if (this.permits > 0) {
        this.permits -= 1;
        return Promise.resolve(true);
      }
      return new Promise((resolver) => this.promiseResolverQueue.push(resolver));
    }
    /**
     * Increases the number of permits by one. If there are other functions waiting, one of them will
     * continue to execute in a future iteration of the event loop.
     */
    release() {
      this.permits += 1;
      if (this.permits > 1 && this.promiseResolverQueue.length > 0) {
        console.warn("Lock.permits should never be > 0 when there is someone waiting.");
      } else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {
        this.permits -= 1;
        const nextResolver = this.promiseResolverQueue.shift();
        if (nextResolver) {
          nextResolver(true);
        }
      }
    }
  }
  lock.Lock = Lock;
  var provider = {};
  var lib$2 = {};
  Object.defineProperty(lib$2, "__esModule", { value: true });
  lib$2._TEST = lib$2.JsonrpcProvider = void 0;
  lib$2.ftch = ftch;
  lib$2.jsonrpc = jsonrpc;
  lib$2.replayable = replayable;
  const nextTick = async () => {
  };
  function limit(concurrencyLimit) {
    let currentlyProcessing = 0;
    const queue = [];
    const next = () => {
      if (!queue.length)
        return;
      if (currentlyProcessing >= concurrencyLimit)
        return;
      currentlyProcessing++;
      const first = queue.shift();
      if (!first)
        throw new Error("empty queue");
      first();
    };
    return (fn) => new Promise((resolve, reject) => {
      queue.push(() => Promise.resolve().then(fn).then(resolve).catch(reject).finally(() => {
        currentlyProcessing--;
        next();
      }));
      next();
    });
  }
  const getRequestInfo = (req) => ({
    headers: req.headers,
    ok: req.ok,
    redirected: req.redirected,
    status: req.status,
    statusText: req.statusText,
    type: req.type,
    url: req.url
  });
  function ftch(fetchFunction, opts = {}) {
    const ks = opts.isValidRequest || opts.killswitch;
    if (ks && typeof ks !== "function")
      throw new Error("opts.isValidRequest must be a function");
    const noNetwork = (url) => ks && !ks(url);
    const wrappedFetch = async (url, reqOpts = {}) => {
      const abort = new AbortController();
      let timeout = void 0;
      if (opts.timeout !== void 0 || reqOpts.timeout !== void 0) {
        const ms2 = reqOpts.timeout !== void 0 ? reqOpts.timeout : opts.timeout;
        timeout = setTimeout(() => abort.abort(), ms2);
      }
      const headers = new Headers();
      const parsed = new URL(url);
      if (parsed.username) {
        const auth = btoa(`${parsed.username}:${parsed.password}`);
        headers.set("Authorization", `Basic ${auth}`);
        parsed.username = "";
        parsed.password = "";
        url = "" + parsed;
      }
      if (reqOpts.headers) {
        const h = reqOpts.headers instanceof Headers ? reqOpts.headers : new Headers(reqOpts.headers);
        h.forEach((v, k) => headers.set(k, v));
      }
      if (noNetwork(url))
        throw new Error("network disabled");
      if (opts.log)
        opts.log(url, reqOpts);
      const res = await fetchFunction(url, {
        referrerPolicy: "no-referrer",
        // avoid sending referrer by default
        ...reqOpts,
        headers,
        signal: abort.signal
      });
      if (noNetwork(url)) {
        abort.abort("network disabled");
        throw new Error("network disabled");
      }
      const body = new Uint8Array(await res.arrayBuffer());
      if (timeout !== void 0)
        clearTimeout(timeout);
      return {
        ...getRequestInfo(res),
        // NOTE: this disables streaming parser and fetches whole body on request (instead of headers only as done in fetch)
        // But this allows to intercept and disable request if killswitch enabled. Also required for concurrency limit,
        // since actual request is not finished
        json: async () => JSON.parse(new TextDecoder().decode(body)),
        text: async () => new TextDecoder().decode(body),
        arrayBuffer: async () => body.buffer
      };
    };
    if (opts.concurrencyLimit !== void 0) {
      const curLimit = limit(opts.concurrencyLimit);
      return (url, reqOpts) => curLimit(() => wrappedFetch(url, reqOpts));
    }
    return wrappedFetch;
  }
  class JsonrpcProvider {
    constructor(fetchFunction, rpcUrl, options = {}) {
      this.queue = [];
      if (typeof fetchFunction !== "function")
        throw new Error("fetchFunction is required");
      if (typeof rpcUrl !== "string")
        throw new Error("rpcUrl is required");
      this.fetchFunction = fetchFunction;
      this.rpcUrl = rpcUrl;
      this.batchSize = options.batchSize === void 0 ? 1 : options.batchSize;
      this.headers = options.headers || {};
      if (typeof this.headers !== "object")
        throw new Error("invalid headers: expected object");
    }
    async fetchJson(body) {
      const res = await this.fetchFunction(this.rpcUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json", ...this.headers },
        body: JSON.stringify(body)
      });
      return await res.json();
    }
    jsonError(error2) {
      return new Error(`FetchProvider(${error2.code}): ${error2.message || error2}`);
    }
    async batchProcess() {
      await nextTick();
      const curr = this.queue.splice(0, this.batchSize);
      if (!curr.length)
        return;
      const json2 = await this.fetchJson(curr.map((i2, j) => ({
        jsonrpc: "2.0",
        id: j,
        method: i2.method,
        params: i2.params
      })));
      if (!Array.isArray(json2)) {
        const hasMsg = json2.code && json2.message;
        curr.forEach((req, index) => {
          const err = hasMsg ? this.jsonError(json2) : new Error("invalid response in batch request " + index);
          req.reject(err);
        });
        return;
      }
      const processed = /* @__PURE__ */ new Set();
      for (const res of json2) {
        if (!Number.isSafeInteger(res.id) || res.id < 0 || res.id >= curr.length)
          continue;
        if (processed.has(res.id))
          continue;
        const { reject, resolve } = curr[res.id];
        processed.add(res.id);
        if (res && res.error)
          reject(this.jsonError(res.error));
        else
          resolve(res.result);
      }
      for (let i2 = 0; i2 < curr.length; i2++) {
        if (!processed.has(i2))
          curr[i2].reject(new Error(`response missing in batch request ` + i2));
      }
    }
    rpcBatch(method, params) {
      return new Promise((resolve, reject) => {
        this.queue.push({ method, params, resolve, reject });
        this.batchProcess();
      });
    }
    async rpc(method, params) {
      if (typeof method !== "string")
        throw new Error("rpc method name must be a string");
      if (this.batchSize > 1)
        return this.rpcBatch(method, params);
      const json2 = await this.fetchJson({
        jsonrpc: "2.0",
        id: 0,
        method,
        params
      });
      if (json2 && json2.error)
        throw this.jsonError(json2.error);
      return json2.result;
    }
    call(method, ...args) {
      return this.rpc(method, args);
    }
    callNamed(method, params) {
      return this.rpc(method, params);
    }
  }
  lib$2.JsonrpcProvider = JsonrpcProvider;
  function jsonrpc(fetchFunction, rpcUrl, options = {}) {
    return new JsonrpcProvider(fetchFunction, rpcUrl, options);
  }
  const defaultGetKey = (url, opt) => JSON.stringify({ url, opt });
  function normalizeHeader(header) {
    return header.split("-").map((i2) => i2.charAt(0).toUpperCase() + i2.slice(1).toLowerCase()).join("-");
  }
  const getKey = (url, opts, fn = defaultGetKey) => {
    let headers = opts.headers || {};
    if (headers instanceof Headers) {
      const tmp = {};
      headers.forEach((v, k) => {
        tmp[normalizeHeader(k)] = v;
      });
      headers = tmp;
    }
    return fn(url, { method: opts.method, headers, body: opts.body });
  };
  function replayable(fetchFunction, logs = {}, opts = {}) {
    const accessed = /* @__PURE__ */ new Set();
    const wrapped = async (url, reqOpts) => {
      const key2 = getKey(url, reqOpts, opts.getKey);
      accessed.add(key2);
      if (!logs[key2]) {
        if (opts.offline)
          throw new Error(`fetchReplay: unknown request=${key2}`);
        const req = await fetchFunction(url, reqOpts);
        const info = getRequestInfo(req);
        return {
          ...info,
          json: async () => {
            const json2 = await req.json();
            logs[key2] = JSON.stringify(json2);
            return json2;
          },
          text: async () => logs[key2] = await req.text(),
          arrayBuffer: async () => {
            const buffer2 = await req.arrayBuffer();
            logs[key2] = new TextDecoder().decode(new Uint8Array(buffer2));
            return buffer2;
          }
        };
      }
      return {
        // Some default values (we don't store this info for now)
        headers: new Headers(),
        ok: true,
        redirected: false,
        status: 200,
        statusText: "OK",
        type: "basic",
        url,
        text: async () => logs[key2],
        json: async () => JSON.parse(logs[key2]),
        arrayBuffer: async () => new TextEncoder().encode(logs[key2]).buffer
      };
    };
    wrapped.logs = logs;
    wrapped.accessed = accessed;
    wrapped.export = () => JSON.stringify(Object.fromEntries(Object.entries(logs).filter(([k, _]) => accessed.has(k))));
    return wrapped;
  }
  lib$2._TEST = {
    limit
  };
  Object.defineProperty(provider, "__esModule", { value: true });
  provider.getProvider = provider.fetchFromProvider = void 0;
  const micro_ftch_1 = lib$2;
  const fetchFromProvider = async (url, params) => {
    const res = await (0, micro_ftch_1.default)(url, {
      headers: {
        "content-type": "application/json"
      },
      type: "json",
      data: {
        method: params.method,
        params: params.params,
        jsonrpc: "2.0",
        id: 1
      }
    });
    return res.result;
  };
  provider.fetchFromProvider = fetchFromProvider;
  const getProvider = (provider2) => {
    if (typeof provider2 === "string") {
      return provider2;
    } else if (provider2?.connection?.url !== void 0) {
      return provider2.connection.url;
    } else {
      throw new Error("Must provide valid provider URL or Web3Provider");
    }
  };
  provider.getProvider = getProvider;
  (function(exports) {
    var __createBinding2 = globalThis && globalThis.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = globalThis && globalThis.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toAscii = exports.stripHexPrefix = exports.padToEven = exports.isHexString = exports.isHexPrefixed = exports.getKeys = exports.getBinarySize = exports.fromUtf8 = exports.fromAscii = exports.arrayContainsArray = void 0;
    __exportStar(constants, exports);
    __exportStar(units, exports);
    __exportStar(account, exports);
    __exportStar(address$1, exports);
    __exportStar(withdrawal, exports);
    __exportStar(signature, exports);
    __exportStar(bytes$2, exports);
    __exportStar(types$2, exports);
    __exportStar(encoding, exports);
    __exportStar(asyncEventEmitter, exports);
    var internal_12 = internal;
    Object.defineProperty(exports, "arrayContainsArray", { enumerable: true, get: function() {
      return internal_12.arrayContainsArray;
    } });
    Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function() {
      return internal_12.fromAscii;
    } });
    Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function() {
      return internal_12.fromUtf8;
    } });
    Object.defineProperty(exports, "getBinarySize", { enumerable: true, get: function() {
      return internal_12.getBinarySize;
    } });
    Object.defineProperty(exports, "getKeys", { enumerable: true, get: function() {
      return internal_12.getKeys;
    } });
    Object.defineProperty(exports, "isHexPrefixed", { enumerable: true, get: function() {
      return internal_12.isHexPrefixed;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return internal_12.isHexString;
    } });
    Object.defineProperty(exports, "padToEven", { enumerable: true, get: function() {
      return internal_12.padToEven;
    } });
    Object.defineProperty(exports, "stripHexPrefix", { enumerable: true, get: function() {
      return internal_12.stripHexPrefix;
    } });
    Object.defineProperty(exports, "toAscii", { enumerable: true, get: function() {
      return internal_12.toAscii;
    } });
    __exportStar(lock, exports);
    __exportStar(provider, exports);
  })(dist$4);
  var utils$3 = {};
  var dist$2 = {};
  var assert$2 = {};
  var dist$1 = {};
  var error = {};
  Object.defineProperty(error, "__esModule", { value: true });
  error.StructError = void 0;
  class StructError extends TypeError {
    constructor(failure, failures) {
      let cached;
      const { message, explanation, ...rest } = failure;
      const { path } = failure;
      const cause = path.length === 0 ? message : `At path: ${path.join(".")} -- ${message}`;
      super(explanation ?? cause);
      if (explanation !== null && explanation !== void 0) {
        this.cause = cause;
      }
      Object.assign(this, rest);
      this.name = this.constructor.name;
      this.failures = () => {
        return cached ?? (cached = [failure, ...failures()]);
      };
    }
  }
  error.StructError = StructError;
  var struct = {};
  var utils$2 = {};
  Object.defineProperty(utils$2, "__esModule", { value: true });
  utils$2.run = utils$2.toFailures = utils$2.toFailure = utils$2.shiftIterator = utils$2.print = utils$2.isPlainObject = utils$2.isObject = void 0;
  function isIterable(value) {
    return isObject(value) && typeof value[Symbol.iterator] === "function";
  }
  function isObject(value) {
    return typeof value === "object" && value !== null;
  }
  utils$2.isObject = isObject;
  function isPlainObject(value) {
    if (Object.prototype.toString.call(value) !== "[object Object]") {
      return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return prototype === null || prototype === Object.prototype;
  }
  utils$2.isPlainObject = isPlainObject;
  function print(value) {
    if (typeof value === "symbol") {
      return value.toString();
    }
    return typeof value === "string" ? JSON.stringify(value) : `${value}`;
  }
  utils$2.print = print;
  function shiftIterator(input) {
    const { done, value } = input.next();
    return done ? void 0 : value;
  }
  utils$2.shiftIterator = shiftIterator;
  function toFailure(result, context, struct2, value) {
    if (result === true) {
      return void 0;
    } else if (result === false) {
      result = {};
    } else if (typeof result === "string") {
      result = { message: result };
    }
    const { path, branch } = context;
    const { type } = struct2;
    const { refinement, message = `Expected a value of type \`${type}\`${refinement ? ` with refinement \`${refinement}\`` : ""}, but received: \`${print(value)}\`` } = result;
    return {
      value,
      type,
      refinement,
      key: path[path.length - 1],
      path,
      branch,
      ...result,
      message
    };
  }
  utils$2.toFailure = toFailure;
  function* toFailures(result, context, struct2, value) {
    if (!isIterable(result)) {
      result = [result];
    }
    for (const validationResult of result) {
      const failure = toFailure(validationResult, context, struct2, value);
      if (failure) {
        yield failure;
      }
    }
  }
  utils$2.toFailures = toFailures;
  function* run(value, struct2, options = {}) {
    const { path = [], branch = [value], coerce: coerce2 = false, mask: mask2 = false } = options;
    const context = { path, branch };
    if (coerce2) {
      value = struct2.coercer(value, context);
      if (mask2 && struct2.type !== "type" && isObject(struct2.schema) && isObject(value) && !Array.isArray(value)) {
        for (const key2 in value) {
          if (struct2.schema[key2] === void 0) {
            delete value[key2];
          }
        }
      }
    }
    let status = "valid";
    for (const failure of struct2.validator(value, context)) {
      failure.explanation = options.message;
      status = "not_valid";
      yield [failure, void 0];
    }
    for (let [innerKey, innerValue, innerStruct] of struct2.entries(value, context)) {
      const iterable = run(innerValue, innerStruct, {
        path: innerKey === void 0 ? path : [...path, innerKey],
        branch: innerKey === void 0 ? branch : [...branch, innerValue],
        coerce: coerce2,
        mask: mask2,
        message: options.message
      });
      for (const result of iterable) {
        if (result[0]) {
          status = result[0].refinement === null || result[0].refinement === void 0 ? "not_valid" : "not_refined";
          yield [result[0], void 0];
        } else if (coerce2) {
          innerValue = result[1];
          if (innerKey === void 0) {
            value = innerValue;
          } else if (value instanceof Map) {
            value.set(innerKey, innerValue);
          } else if (value instanceof Set) {
            value.add(innerValue);
          } else if (isObject(value)) {
            if (innerValue !== void 0 || innerKey in value) {
              value[innerKey] = innerValue;
            }
          }
        }
      }
    }
    if (status !== "not_valid") {
      for (const failure of struct2.refiner(value, context)) {
        failure.explanation = options.message;
        status = "not_refined";
        yield [failure, void 0];
      }
    }
    if (status === "valid") {
      yield [void 0, value];
    }
  }
  utils$2.run = run;
  Object.defineProperty(struct, "__esModule", { value: true });
  struct.validate = struct.is = struct.mask = struct.create = struct.assert = struct.Struct = void 0;
  const error_js_1 = error;
  const utils_js_1$3 = utils$2;
  class Struct {
    constructor(props) {
      const { type, schema, validator, refiner, coercer = (value) => value, entries = function* () {
      } } = props;
      this.type = type;
      this.schema = schema;
      this.entries = entries;
      this.coercer = coercer;
      if (validator) {
        this.validator = (value, context) => {
          const result = validator(value, context);
          return (0, utils_js_1$3.toFailures)(result, context, this, value);
        };
      } else {
        this.validator = () => [];
      }
      if (refiner) {
        this.refiner = (value, context) => {
          const result = refiner(value, context);
          return (0, utils_js_1$3.toFailures)(result, context, this, value);
        };
      } else {
        this.refiner = () => [];
      }
    }
    /**
     * Assert that a value passes the struct's validation, throwing if it doesn't.
     */
    assert(value, message) {
      return assert$1(value, this, message);
    }
    /**
     * Create a value with the struct's coercion logic, then validate it.
     */
    create(value, message) {
      return create(value, this, message);
    }
    /**
     * Check if a value passes the struct's validation.
     */
    is(value) {
      return is(value, this);
    }
    /**
     * Mask a value, coercing and validating it, but returning only the subset of
     * properties defined by the struct's schema.
     */
    mask(value, message) {
      return mask(value, this, message);
    }
    /**
     * Validate a value with the struct's validation logic, returning a tuple
     * representing the result.
     *
     * You may optionally pass `true` for the `withCoercion` argument to coerce
     * the value before attempting to validate it. If you do, the result will
     * contain the coerced result when successful.
     */
    validate(value, options = {}) {
      return validate(value, this, options);
    }
  }
  struct.Struct = Struct;
  function assert$1(value, struct2, message) {
    const result = validate(value, struct2, { message });
    if (result[0]) {
      throw result[0];
    }
  }
  struct.assert = assert$1;
  function create(value, struct2, message) {
    const result = validate(value, struct2, { coerce: true, message });
    if (result[0]) {
      throw result[0];
    } else {
      return result[1];
    }
  }
  struct.create = create;
  function mask(value, struct2, message) {
    const result = validate(value, struct2, { coerce: true, mask: true, message });
    if (result[0]) {
      throw result[0];
    } else {
      return result[1];
    }
  }
  struct.mask = mask;
  function is(value, struct2) {
    const result = validate(value, struct2);
    return !result[0];
  }
  struct.is = is;
  function validate(value, struct2, options = {}) {
    const tuples = (0, utils_js_1$3.run)(value, struct2, options);
    const tuple2 = (0, utils_js_1$3.shiftIterator)(tuples);
    if (tuple2[0]) {
      const error2 = new error_js_1.StructError(tuple2[0], function* () {
        for (const innerTuple of tuples) {
          if (innerTuple[0]) {
            yield innerTuple[0];
          }
        }
      });
      return [error2, void 0];
    }
    const validatedValue = tuple2[1];
    return [void 0, validatedValue];
  }
  struct.validate = validate;
  var coercions = {};
  var types$1 = {};
  var utilities = {};
  var hasRequiredUtilities;
  function requireUtilities() {
    if (hasRequiredUtilities) return utilities;
    hasRequiredUtilities = 1;
    Object.defineProperty(utilities, "__esModule", { value: true });
    utilities.pick = utilities.partial = utilities.omit = utilities.lazy = utilities.dynamic = utilities.deprecated = utilities.define = utilities.assign = void 0;
    const struct_js_12 = struct;
    const types_js_12 = requireTypes();
    function assign(...Structs) {
      const isType = Structs[0]?.type === "type";
      const schemas = Structs.map(({ schema: schema2 }) => schema2);
      const schema = Object.assign({}, ...schemas);
      return isType ? (0, types_js_12.type)(schema) : (0, types_js_12.object)(schema);
    }
    utilities.assign = assign;
    function define(name, validator) {
      return new struct_js_12.Struct({ type: name, schema: null, validator });
    }
    utilities.define = define;
    function deprecated(struct2, log2) {
      return new struct_js_12.Struct({
        ...struct2,
        refiner: (value, ctx) => value === void 0 || struct2.refiner(value, ctx),
        validator(value, ctx) {
          if (value === void 0) {
            return true;
          }
          log2(value, ctx);
          return struct2.validator(value, ctx);
        }
      });
    }
    utilities.deprecated = deprecated;
    function dynamic(fn) {
      return new struct_js_12.Struct({
        type: "dynamic",
        schema: null,
        *entries(value, ctx) {
          const struct2 = fn(value, ctx);
          yield* struct2.entries(value, ctx);
        },
        validator(value, ctx) {
          const struct2 = fn(value, ctx);
          return struct2.validator(value, ctx);
        },
        coercer(value, ctx) {
          const struct2 = fn(value, ctx);
          return struct2.coercer(value, ctx);
        },
        refiner(value, ctx) {
          const struct2 = fn(value, ctx);
          return struct2.refiner(value, ctx);
        }
      });
    }
    utilities.dynamic = dynamic;
    function lazy(fn) {
      let struct2;
      return new struct_js_12.Struct({
        type: "lazy",
        schema: null,
        *entries(value, ctx) {
          struct2 ?? (struct2 = fn());
          yield* struct2.entries(value, ctx);
        },
        validator(value, ctx) {
          struct2 ?? (struct2 = fn());
          return struct2.validator(value, ctx);
        },
        coercer(value, ctx) {
          struct2 ?? (struct2 = fn());
          return struct2.coercer(value, ctx);
        },
        refiner(value, ctx) {
          struct2 ?? (struct2 = fn());
          return struct2.refiner(value, ctx);
        }
      });
    }
    utilities.lazy = lazy;
    function omit(struct2, keys) {
      const { schema } = struct2;
      const subschema = { ...schema };
      for (const key2 of keys) {
        delete subschema[key2];
      }
      switch (struct2.type) {
        case "type":
          return (0, types_js_12.type)(subschema);
        default:
          return (0, types_js_12.object)(subschema);
      }
    }
    utilities.omit = omit;
    function partial(struct2) {
      const isStruct = struct2 instanceof struct_js_12.Struct;
      const schema = isStruct ? { ...struct2.schema } : { ...struct2 };
      for (const key2 in schema) {
        schema[key2] = (0, types_js_12.optional)(schema[key2]);
      }
      if (isStruct && struct2.type === "type") {
        return (0, types_js_12.type)(schema);
      }
      return (0, types_js_12.object)(schema);
    }
    utilities.partial = partial;
    function pick(struct2, keys) {
      const { schema } = struct2;
      const subschema = {};
      for (const key2 of keys) {
        subschema[key2] = schema[key2];
      }
      switch (struct2.type) {
        case "type":
          return (0, types_js_12.type)(subschema);
        default:
          return (0, types_js_12.object)(subschema);
      }
    }
    utilities.pick = pick;
    return utilities;
  }
  var hasRequiredTypes;
  function requireTypes() {
    if (hasRequiredTypes) return types$1;
    hasRequiredTypes = 1;
    Object.defineProperty(types$1, "__esModule", { value: true });
    types$1.unknown = types$1.union = types$1.type = types$1.tuple = types$1.string = types$1.set = types$1.regexp = types$1.record = types$1.optional = types$1.object = types$1.number = types$1.nullable = types$1.never = types$1.map = types$1.literal = types$1.intersection = types$1.integer = types$1.instance = types$1.func = types$1.enums = types$1.date = types$1.boolean = types$1.bigint = types$1.array = types$1.any = void 0;
    const struct_js_12 = struct;
    const utils_js_12 = utils$2;
    const utilities_js_1 = requireUtilities();
    function any() {
      return (0, utilities_js_1.define)("any", () => true);
    }
    types$1.any = any;
    function array2(Element) {
      return new struct_js_12.Struct({
        type: "array",
        schema: Element,
        *entries(value) {
          if (Element && Array.isArray(value)) {
            for (const [index, arrayValue] of value.entries()) {
              yield [index, arrayValue, Element];
            }
          }
        },
        coercer(value) {
          return Array.isArray(value) ? value.slice() : value;
        },
        validator(value) {
          return Array.isArray(value) || `Expected an array value, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.array = array2;
    function bigint() {
      return (0, utilities_js_1.define)("bigint", (value) => {
        return typeof value === "bigint";
      });
    }
    types$1.bigint = bigint;
    function boolean() {
      return (0, utilities_js_1.define)("boolean", (value) => {
        return typeof value === "boolean";
      });
    }
    types$1.boolean = boolean;
    function date() {
      return (0, utilities_js_1.define)("date", (value) => {
        return value instanceof Date && !isNaN(value.getTime()) || `Expected a valid \`Date\` object, but received: ${(0, utils_js_12.print)(value)}`;
      });
    }
    types$1.date = date;
    function enums(values) {
      const schema = {};
      const description = values.map((value) => (0, utils_js_12.print)(value)).join();
      for (const key2 of values) {
        schema[key2] = key2;
      }
      return new struct_js_12.Struct({
        type: "enums",
        schema,
        validator(value) {
          return values.includes(value) || `Expected one of \`${description}\`, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.enums = enums;
    function func() {
      return (0, utilities_js_1.define)("func", (value) => {
        return typeof value === "function" || `Expected a function, but received: ${(0, utils_js_12.print)(value)}`;
      });
    }
    types$1.func = func;
    function instance(Class) {
      return (0, utilities_js_1.define)("instance", (value) => {
        return value instanceof Class || `Expected a \`${Class.name}\` instance, but received: ${(0, utils_js_12.print)(value)}`;
      });
    }
    types$1.instance = instance;
    function integer() {
      return (0, utilities_js_1.define)("integer", (value) => {
        return typeof value === "number" && !isNaN(value) && Number.isInteger(value) || `Expected an integer, but received: ${(0, utils_js_12.print)(value)}`;
      });
    }
    types$1.integer = integer;
    function intersection(Structs) {
      return new struct_js_12.Struct({
        type: "intersection",
        schema: null,
        *entries(value, context) {
          for (const { entries } of Structs) {
            yield* entries(value, context);
          }
        },
        *validator(value, context) {
          for (const { validator } of Structs) {
            yield* validator(value, context);
          }
        },
        *refiner(value, context) {
          for (const { refiner } of Structs) {
            yield* refiner(value, context);
          }
        }
      });
    }
    types$1.intersection = intersection;
    function literal(constant) {
      const description = (0, utils_js_12.print)(constant);
      const valueType = typeof constant;
      return new struct_js_12.Struct({
        type: "literal",
        schema: valueType === "string" || valueType === "number" || valueType === "boolean" ? constant : null,
        validator(value) {
          return value === constant || `Expected the literal \`${description}\`, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.literal = literal;
    function map(Key, Value) {
      return new struct_js_12.Struct({
        type: "map",
        schema: null,
        *entries(value) {
          if (Key && Value && value instanceof Map) {
            for (const [mapKey, mapValue] of value.entries()) {
              yield [mapKey, mapKey, Key];
              yield [mapKey, mapValue, Value];
            }
          }
        },
        coercer(value) {
          return value instanceof Map ? new Map(value) : value;
        },
        validator(value) {
          return value instanceof Map || `Expected a \`Map\` object, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.map = map;
    function never() {
      return (0, utilities_js_1.define)("never", () => false);
    }
    types$1.never = never;
    function nullable(struct2) {
      return new struct_js_12.Struct({
        ...struct2,
        validator: (value, ctx) => value === null || struct2.validator(value, ctx),
        refiner: (value, ctx) => value === null || struct2.refiner(value, ctx)
      });
    }
    types$1.nullable = nullable;
    function number2() {
      return (0, utilities_js_1.define)("number", (value) => {
        return typeof value === "number" && !isNaN(value) || `Expected a number, but received: ${(0, utils_js_12.print)(value)}`;
      });
    }
    types$1.number = number2;
    function object(schema) {
      const knowns = schema ? Object.keys(schema) : [];
      const Never = never();
      return new struct_js_12.Struct({
        type: "object",
        schema: schema ?? null,
        *entries(value) {
          if (schema && (0, utils_js_12.isObject)(value)) {
            const unknowns = new Set(Object.keys(value));
            for (const key2 of knowns) {
              unknowns.delete(key2);
              yield [key2, value[key2], schema[key2]];
            }
            for (const key2 of unknowns) {
              yield [key2, value[key2], Never];
            }
          }
        },
        validator(value) {
          return (0, utils_js_12.isObject)(value) || `Expected an object, but received: ${(0, utils_js_12.print)(value)}`;
        },
        coercer(value) {
          return (0, utils_js_12.isObject)(value) ? { ...value } : value;
        }
      });
    }
    types$1.object = object;
    function optional(struct2) {
      return new struct_js_12.Struct({
        ...struct2,
        validator: (value, ctx) => value === void 0 || struct2.validator(value, ctx),
        refiner: (value, ctx) => value === void 0 || struct2.refiner(value, ctx)
      });
    }
    types$1.optional = optional;
    function record(Key, Value) {
      return new struct_js_12.Struct({
        type: "record",
        schema: null,
        *entries(value) {
          if ((0, utils_js_12.isObject)(value)) {
            for (const objectKey in value) {
              const objectValue = value[objectKey];
              yield [objectKey, objectKey, Key];
              yield [objectKey, objectValue, Value];
            }
          }
        },
        validator(value) {
          return (0, utils_js_12.isObject)(value) || `Expected an object, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.record = record;
    function regexp() {
      return (0, utilities_js_1.define)("regexp", (value) => {
        return value instanceof RegExp;
      });
    }
    types$1.regexp = regexp;
    function set2(Element) {
      return new struct_js_12.Struct({
        type: "set",
        schema: null,
        *entries(value) {
          if (Element && value instanceof Set) {
            for (const setValue of value) {
              yield [setValue, setValue, Element];
            }
          }
        },
        coercer(value) {
          return value instanceof Set ? new Set(value) : value;
        },
        validator(value) {
          return value instanceof Set || `Expected a \`Set\` object, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.set = set2;
    function string2() {
      return (0, utilities_js_1.define)("string", (value) => {
        return typeof value === "string" || `Expected a string, but received: ${(0, utils_js_12.print)(value)}`;
      });
    }
    types$1.string = string2;
    function tuple2(Structs) {
      const Never = never();
      return new struct_js_12.Struct({
        type: "tuple",
        schema: null,
        *entries(value) {
          if (Array.isArray(value)) {
            const length = Math.max(Structs.length, value.length);
            for (let i2 = 0; i2 < length; i2++) {
              yield [i2, value[i2], Structs[i2] || Never];
            }
          }
        },
        validator(value) {
          return Array.isArray(value) || `Expected an array, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.tuple = tuple2;
    function type(schema) {
      const keys = Object.keys(schema);
      return new struct_js_12.Struct({
        type: "type",
        schema,
        *entries(value) {
          if ((0, utils_js_12.isObject)(value)) {
            for (const k of keys) {
              yield [k, value[k], schema[k]];
            }
          }
        },
        validator(value) {
          return (0, utils_js_12.isObject)(value) || `Expected an object, but received: ${(0, utils_js_12.print)(value)}`;
        },
        coercer(value) {
          return (0, utils_js_12.isObject)(value) ? { ...value } : value;
        }
      });
    }
    types$1.type = type;
    function union(Structs) {
      const description = Structs.map((struct2) => struct2.type).join(" | ");
      return new struct_js_12.Struct({
        type: "union",
        schema: null,
        coercer(value) {
          for (const InnerStruct of Structs) {
            const [error2, coerced] = InnerStruct.validate(value, { coerce: true });
            if (!error2) {
              return coerced;
            }
          }
          return value;
        },
        validator(value, ctx) {
          const failures = [];
          for (const InnerStruct of Structs) {
            const [...tuples] = (0, utils_js_12.run)(value, InnerStruct, ctx);
            const [first] = tuples;
            if (!first?.[0]) {
              return [];
            }
            for (const [failure] of tuples) {
              if (failure) {
                failures.push(failure);
              }
            }
          }
          return [
            `Expected the value to satisfy a union of \`${description}\`, but received: ${(0, utils_js_12.print)(value)}`,
            ...failures
          ];
        }
      });
    }
    types$1.union = union;
    function unknown() {
      return (0, utilities_js_1.define)("unknown", () => true);
    }
    types$1.unknown = unknown;
    return types$1;
  }
  Object.defineProperty(coercions, "__esModule", { value: true });
  coercions.trimmed = coercions.defaulted = coercions.coerce = void 0;
  const struct_js_1$1 = struct;
  const utils_js_1$2 = utils$2;
  const types_js_1 = requireTypes();
  function coerce(struct2, condition, coercer) {
    return new struct_js_1$1.Struct({
      ...struct2,
      coercer: (value, ctx) => {
        return (0, struct_js_1$1.is)(value, condition) ? struct2.coercer(coercer(value, ctx), ctx) : struct2.coercer(value, ctx);
      }
    });
  }
  coercions.coerce = coerce;
  function defaulted(struct2, fallback, options = {}) {
    return coerce(struct2, (0, types_js_1.unknown)(), (value) => {
      const result = typeof fallback === "function" ? fallback() : fallback;
      if (value === void 0) {
        return result;
      }
      if (!options.strict && (0, utils_js_1$2.isPlainObject)(value) && (0, utils_js_1$2.isPlainObject)(result)) {
        const ret = { ...value };
        let changed = false;
        for (const key2 in result) {
          if (ret[key2] === void 0) {
            ret[key2] = result[key2];
            changed = true;
          }
        }
        if (changed) {
          return ret;
        }
      }
      return value;
    });
  }
  coercions.defaulted = defaulted;
  function trimmed(struct2) {
    return coerce(struct2, (0, types_js_1.string)(), (value) => value.trim());
  }
  coercions.trimmed = trimmed;
  var refinements = {};
  Object.defineProperty(refinements, "__esModule", { value: true });
  refinements.refine = refinements.size = refinements.pattern = refinements.nonempty = refinements.min = refinements.max = refinements.empty = void 0;
  const struct_js_1 = struct;
  const utils_js_1$1 = utils$2;
  function empty(struct2) {
    return refine(struct2, "empty", (value) => {
      const size2 = getSize(value);
      return size2 === 0 || `Expected an empty ${struct2.type} but received one with a size of \`${size2}\``;
    });
  }
  refinements.empty = empty;
  function getSize(value) {
    if (value instanceof Map || value instanceof Set) {
      return value.size;
    }
    return value.length;
  }
  function max(struct2, threshold, options = {}) {
    const { exclusive } = options;
    return refine(struct2, "max", (value) => {
      return exclusive ? value < threshold : value <= threshold || `Expected a ${struct2.type} less than ${exclusive ? "" : "or equal to "}${threshold} but received \`${value}\``;
    });
  }
  refinements.max = max;
  function min(struct2, threshold, options = {}) {
    const { exclusive } = options;
    return refine(struct2, "min", (value) => {
      return exclusive ? value > threshold : value >= threshold || `Expected a ${struct2.type} greater than ${exclusive ? "" : "or equal to "}${threshold} but received \`${value}\``;
    });
  }
  refinements.min = min;
  function nonempty(struct2) {
    return refine(struct2, "nonempty", (value) => {
      const size2 = getSize(value);
      return size2 > 0 || `Expected a nonempty ${struct2.type} but received an empty one`;
    });
  }
  refinements.nonempty = nonempty;
  function pattern(struct2, regexp) {
    return refine(struct2, "pattern", (value) => {
      return regexp.test(value) || `Expected a ${struct2.type} matching \`/${regexp.source}/\` but received "${value}"`;
    });
  }
  refinements.pattern = pattern;
  function size(struct2, minimum, maximum = minimum) {
    const expected = `Expected a ${struct2.type}`;
    const of = minimum === maximum ? `of \`${minimum}\`` : `between \`${minimum}\` and \`${maximum}\``;
    return refine(struct2, "size", (value) => {
      if (typeof value === "number" || value instanceof Date) {
        return minimum <= value && value <= maximum || // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        `${expected} ${of} but received \`${value}\``;
      } else if (value instanceof Map || value instanceof Set) {
        const { size: size2 } = value;
        return minimum <= size2 && size2 <= maximum || `${expected} with a size ${of} but received one with a size of \`${size2}\``;
      }
      const { length } = value;
      return minimum <= length && length <= maximum || `${expected} with a length ${of} but received one with a length of \`${length}\``;
    });
  }
  refinements.size = size;
  function refine(struct2, name, refiner) {
    return new struct_js_1.Struct({
      ...struct2,
      *refiner(value, ctx) {
        yield* struct2.refiner(value, ctx);
        const result = refiner(value, ctx);
        const failures = (0, utils_js_1$1.toFailures)(result, ctx, struct2, value);
        for (const failure of failures) {
          yield { ...failure, refinement: name };
        }
      }
    });
  }
  refinements.refine = refine;
  (function(exports) {
    var __createBinding2 = globalThis && globalThis.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = globalThis && globalThis.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(error, exports);
    __exportStar(struct, exports);
    __exportStar(coercions, exports);
    __exportStar(refinements, exports);
    __exportStar(requireTypes(), exports);
    __exportStar(requireUtilities(), exports);
  })(dist$1);
  var errors$1 = {};
  let ErrorWithCause$1 = class ErrorWithCause2 extends Error {
    /**
     * @param {string} message
     * @param {{ cause?: T }} options
     */
    constructor(message, { cause } = {}) {
      super(message);
      this.name = ErrorWithCause2.name;
      if (cause) {
        this.cause = cause;
      }
      this.message = message;
    }
  };
  const errorWithCause = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    ErrorWithCause: ErrorWithCause$1
  }, Symbol.toStringTag, { value: "Module" }));
  const require$$0 = /* @__PURE__ */ getAugmentedNamespace(errorWithCause);
  const findCauseByReference$1 = (err, reference) => {
    if (!err || !reference) return;
    if (!(err instanceof Error)) return;
    if (!(reference.prototype instanceof Error) && // @ts-ignore
    reference !== Error) return;
    const seen = /* @__PURE__ */ new Set();
    let currentErr = err;
    while (currentErr && !seen.has(currentErr)) {
      seen.add(currentErr);
      if (currentErr instanceof reference) {
        return currentErr;
      }
      currentErr = getErrorCause$1(currentErr);
    }
  };
  const getErrorCause$1 = (err) => {
    if (!err || typeof err !== "object" || !("cause" in err)) {
      return;
    }
    if (typeof err.cause === "function") {
      const causeResult = err.cause();
      return causeResult instanceof Error ? causeResult : void 0;
    } else {
      return err.cause instanceof Error ? err.cause : void 0;
    }
  };
  const _stackWithCauses = (err, seen) => {
    if (!(err instanceof Error)) return "";
    const stack = err.stack || "";
    if (seen.has(err)) {
      return stack + "\ncauses have become circular...";
    }
    const cause = getErrorCause$1(err);
    if (cause) {
      seen.add(err);
      return stack + "\ncaused by: " + _stackWithCauses(cause, seen);
    } else {
      return stack;
    }
  };
  const stackWithCauses$1 = (err) => _stackWithCauses(err, /* @__PURE__ */ new Set());
  const _messageWithCauses = (err, seen, skip) => {
    if (!(err instanceof Error)) return "";
    const message = skip ? "" : err.message || "";
    if (seen.has(err)) {
      return message + ": ...";
    }
    const cause = getErrorCause$1(err);
    if (cause) {
      seen.add(err);
      const skipIfVErrorStyleCause = "cause" in err && typeof err.cause === "function";
      return message + (skipIfVErrorStyleCause ? "" : ": ") + _messageWithCauses(cause, seen, skipIfVErrorStyleCause);
    } else {
      return message;
    }
  };
  const messageWithCauses$1 = (err) => _messageWithCauses(err, /* @__PURE__ */ new Set());
  const helpers = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    findCauseByReference: findCauseByReference$1,
    getErrorCause: getErrorCause$1,
    messageWithCauses: messageWithCauses$1,
    stackWithCauses: stackWithCauses$1
  }, Symbol.toStringTag, { value: "Module" }));
  const require$$1 = /* @__PURE__ */ getAugmentedNamespace(helpers);
  const { ErrorWithCause } = require$$0;
  const {
    // linemod-replace-with: export {
    findCauseByReference,
    getErrorCause,
    messageWithCauses,
    stackWithCauses
  } = require$$1;
  var ponyCause = {
    // linemod-remove
    ErrorWithCause,
    // linemod-remove
    findCauseByReference,
    // linemod-remove
    getErrorCause,
    // linemod-remove
    stackWithCauses,
    // linemod-remove
    messageWithCauses
    // linemod-remove
  };
  var misc = {};
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.getKnownPropertyNames = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;
    function isNonEmptyArray(value) {
      return Array.isArray(value) && value.length > 0;
    }
    exports.isNonEmptyArray = isNonEmptyArray;
    function isNullOrUndefined(value) {
      return value === null || value === void 0;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isObject2(value) {
      return Boolean(value) && typeof value === "object" && !Array.isArray(value);
    }
    exports.isObject = isObject2;
    const hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);
    exports.hasProperty = hasProperty;
    function getKnownPropertyNames(object) {
      return Object.getOwnPropertyNames(object);
    }
    exports.getKnownPropertyNames = getKnownPropertyNames;
    (function(JsonSize) {
      JsonSize[JsonSize["Null"] = 4] = "Null";
      JsonSize[JsonSize["Comma"] = 1] = "Comma";
      JsonSize[JsonSize["Wrapper"] = 1] = "Wrapper";
      JsonSize[JsonSize["True"] = 4] = "True";
      JsonSize[JsonSize["False"] = 5] = "False";
      JsonSize[JsonSize["Quote"] = 1] = "Quote";
      JsonSize[JsonSize["Colon"] = 1] = "Colon";
      JsonSize[JsonSize["Date"] = 24] = "Date";
    })(exports.JsonSize || (exports.JsonSize = {}));
    exports.ESCAPE_CHARACTERS_REGEXP = /"|\\|\n|\r|\t/gu;
    function isPlainObject2(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      try {
        let proto = value;
        while (Object.getPrototypeOf(proto) !== null) {
          proto = Object.getPrototypeOf(proto);
        }
        return Object.getPrototypeOf(value) === proto;
      } catch (_) {
        return false;
      }
    }
    exports.isPlainObject = isPlainObject2;
    function isASCII(character) {
      return character.charCodeAt(0) <= 127;
    }
    exports.isASCII = isASCII;
    function calculateStringSize(value) {
      const size2 = value.split("").reduce((total, character) => {
        if (isASCII(character)) {
          return total + 1;
        }
        return total + 2;
      }, 0);
      return size2 + (value.match(exports.ESCAPE_CHARACTERS_REGEXP) ?? []).length;
    }
    exports.calculateStringSize = calculateStringSize;
    function calculateNumberSize(value) {
      return value.toString().length;
    }
    exports.calculateNumberSize = calculateNumberSize;
  })(misc);
  Object.defineProperty(errors$1, "__esModule", { value: true });
  errors$1.wrapError = errors$1.getErrorMessage = errors$1.isErrorWithStack = errors$1.isErrorWithMessage = errors$1.isErrorWithCode = void 0;
  const pony_cause_1 = ponyCause;
  const misc_1 = misc;
  function isError(error2) {
    return error2 instanceof Error || (0, misc_1.isObject)(error2) && error2.constructor.name === "Error";
  }
  function isErrorWithCode(error2) {
    return typeof error2 === "object" && error2 !== null && "code" in error2;
  }
  errors$1.isErrorWithCode = isErrorWithCode;
  function isErrorWithMessage(error2) {
    return typeof error2 === "object" && error2 !== null && "message" in error2;
  }
  errors$1.isErrorWithMessage = isErrorWithMessage;
  function isErrorWithStack(error2) {
    return typeof error2 === "object" && error2 !== null && "stack" in error2;
  }
  errors$1.isErrorWithStack = isErrorWithStack;
  function getErrorMessage(error2) {
    if (isErrorWithMessage(error2) && typeof error2.message === "string") {
      return error2.message;
    }
    if ((0, misc_1.isNullOrUndefined)(error2)) {
      return "";
    }
    return String(error2);
  }
  errors$1.getErrorMessage = getErrorMessage;
  function wrapError(originalError, message) {
    if (isError(originalError)) {
      let error2;
      if (Error.length === 2) {
        error2 = new Error(message, { cause: originalError });
      } else {
        error2 = new pony_cause_1.ErrorWithCause(message, { cause: originalError });
      }
      if (isErrorWithCode(originalError)) {
        error2.code = originalError.code;
      }
      return error2;
    }
    if (message.length > 0) {
      return new Error(`${String(originalError)}: ${message}`);
    }
    return new Error(String(originalError));
  }
  errors$1.wrapError = wrapError;
  Object.defineProperty(assert$2, "__esModule", { value: true });
  assert$2.assertExhaustive = assert$2.assertStruct = assert$2.assert = assert$2.AssertionError = void 0;
  const superstruct_1$4 = dist$1;
  const errors_1 = errors$1;
  function isConstructable(fn) {
    return Boolean(typeof fn?.prototype?.constructor?.name === "string");
  }
  function getErrorMessageWithoutTrailingPeriod(error2) {
    return (0, errors_1.getErrorMessage)(error2).replace(/\.$/u, "");
  }
  function getError(ErrorWrapper, message) {
    if (isConstructable(ErrorWrapper)) {
      return new ErrorWrapper({
        message
      });
    }
    return ErrorWrapper({
      message
    });
  }
  class AssertionError extends Error {
    constructor(options) {
      super(options.message);
      this.code = "ERR_ASSERTION";
    }
  }
  assert$2.AssertionError = AssertionError;
  function assert(value, message = "Assertion failed.", ErrorWrapper = AssertionError) {
    if (!value) {
      if (message instanceof Error) {
        throw message;
      }
      throw getError(ErrorWrapper, message);
    }
  }
  assert$2.assert = assert;
  function assertStruct(value, struct2, errorPrefix = "Assertion failed", ErrorWrapper = AssertionError) {
    try {
      (0, superstruct_1$4.assert)(value, struct2);
    } catch (error2) {
      throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessageWithoutTrailingPeriod(error2)}.`);
    }
  }
  assert$2.assertStruct = assertStruct;
  function assertExhaustive(_object) {
    throw new Error("Invalid branch reached. Should be detected during compilation.");
  }
  assert$2.assertExhaustive = assertExhaustive;
  var base64$1 = {};
  Object.defineProperty(base64$1, "__esModule", { value: true });
  base64$1.base64 = void 0;
  const superstruct_1$3 = dist$1;
  const assert_1$2 = assert$2;
  const base64 = (struct2, options = {}) => {
    const paddingRequired = options.paddingRequired ?? false;
    const characterSet = options.characterSet ?? "base64";
    let letters;
    if (characterSet === "base64") {
      letters = String.raw`[A-Za-z0-9+\/]`;
    } else {
      (0, assert_1$2.assert)(characterSet === "base64url");
      letters = String.raw`[-_A-Za-z0-9]`;
    }
    let re2;
    if (paddingRequired) {
      re2 = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, "u");
    } else {
      re2 = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, "u");
    }
    return (0, superstruct_1$3.pattern)(struct2, re2);
  };
  base64$1.base64 = base64;
  var bytes$1 = {};
  var lib$1 = {};
  (function(exports) {
    /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.createBase58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64urlnopad = exports.base64url = exports.base64nopad = exports.base64 = exports.base32crockford = exports.base32hexnopad = exports.base32hex = exports.base32nopad = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;
    function isBytes2(a) {
      return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
    }
    function isArrayOf(isString, arr) {
      if (!Array.isArray(arr))
        return false;
      if (arr.length === 0)
        return true;
      if (isString) {
        return arr.every((item) => typeof item === "string");
      } else {
        return arr.every((item) => Number.isSafeInteger(item));
      }
    }
    function afn(input) {
      if (typeof input !== "function")
        throw new Error("function expected");
      return true;
    }
    function astr(label, input) {
      if (typeof input !== "string")
        throw new Error(`${label}: string expected`);
      return true;
    }
    function anumber2(n) {
      if (!Number.isSafeInteger(n))
        throw new Error(`invalid integer: ${n}`);
    }
    exports.assertNumber = anumber2;
    function aArr(input) {
      if (!Array.isArray(input))
        throw new Error("array expected");
    }
    function astrArr(label, input) {
      if (!isArrayOf(true, input))
        throw new Error(`${label}: array of strings expected`);
    }
    function anumArr(label, input) {
      if (!isArrayOf(false, input))
        throw new Error(`${label}: array of numbers expected`);
    }
    // @__NO_SIDE_EFFECTS__
    function chain(...args) {
      const id2 = (a) => a;
      const wrap = (a, b) => (c) => a(b(c));
      const encode2 = args.map((x) => x.encode).reduceRight(wrap, id2);
      const decode2 = args.map((x) => x.decode).reduce(wrap, id2);
      return { encode: encode2, decode: decode2 };
    }
    // @__NO_SIDE_EFFECTS__
    function alphabet(letters) {
      const lettersA = typeof letters === "string" ? letters.split("") : letters;
      const len2 = lettersA.length;
      astrArr("alphabet", lettersA);
      const indexes = new Map(lettersA.map((l, i2) => [l, i2]));
      return {
        encode: (digits) => {
          aArr(digits);
          return digits.map((i2) => {
            if (!Number.isSafeInteger(i2) || i2 < 0 || i2 >= len2)
              throw new Error(`alphabet.encode: digit index outside alphabet "${i2}". Allowed: ${letters}`);
            return lettersA[i2];
          });
        },
        decode: (input) => {
          aArr(input);
          return input.map((letter) => {
            astr("alphabet.decode", letter);
            const i2 = indexes.get(letter);
            if (i2 === void 0)
              throw new Error(`Unknown letter: "${letter}". Allowed: ${letters}`);
            return i2;
          });
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function join(separator = "") {
      astr("join", separator);
      return {
        encode: (from) => {
          astrArr("join.decode", from);
          return from.join(separator);
        },
        decode: (to) => {
          astr("join.decode", to);
          return to.split(separator);
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function padding(bits, chr = "=") {
      anumber2(bits);
      astr("padding", chr);
      return {
        encode(data) {
          astrArr("padding.encode", data);
          while (data.length * bits % 8)
            data.push(chr);
          return data;
        },
        decode(input) {
          astrArr("padding.decode", input);
          let end = input.length;
          if (end * bits % 8)
            throw new Error("padding: invalid, string should have whole number of bytes");
          for (; end > 0 && input[end - 1] === chr; end--) {
            const last = end - 1;
            const byte = last * bits;
            if (byte % 8 === 0)
              throw new Error("padding: invalid, string has too much padding");
          }
          return input.slice(0, end);
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function normalize2(fn) {
      afn(fn);
      return { encode: (from) => from, decode: (to) => fn(to) };
    }
    function convertRadix(data, from, to) {
      if (from < 2)
        throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);
      if (to < 2)
        throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);
      aArr(data);
      if (!data.length)
        return [];
      let pos = 0;
      const res = [];
      const digits = Array.from(data, (d) => {
        anumber2(d);
        if (d < 0 || d >= from)
          throw new Error(`invalid integer: ${d}`);
        return d;
      });
      const dlen = digits.length;
      while (true) {
        let carry = 0;
        let done = true;
        for (let i2 = pos; i2 < dlen; i2++) {
          const digit = digits[i2];
          const fromCarry = from * carry;
          const digitBase = fromCarry + digit;
          if (!Number.isSafeInteger(digitBase) || fromCarry / from !== carry || digitBase - digit !== fromCarry) {
            throw new Error("convertRadix: carry overflow");
          }
          const div = digitBase / to;
          carry = digitBase % to;
          const rounded = Math.floor(div);
          digits[i2] = rounded;
          if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
            throw new Error("convertRadix: carry overflow");
          if (!done)
            continue;
          else if (!rounded)
            pos = i2;
          else
            done = false;
        }
        res.push(carry);
        if (done)
          break;
      }
      for (let i2 = 0; i2 < data.length - 1 && data[i2] === 0; i2++)
        res.push(0);
      return res.reverse();
    }
    const gcd = (a, b) => b === 0 ? a : gcd(b, a % b);
    const radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));
    const powers = /* @__PURE__ */ (() => {
      let res = [];
      for (let i2 = 0; i2 < 40; i2++)
        res.push(2 ** i2);
      return res;
    })();
    function convertRadix2(data, from, to, padding2) {
      aArr(data);
      if (from <= 0 || from > 32)
        throw new Error(`convertRadix2: wrong from=${from}`);
      if (to <= 0 || to > 32)
        throw new Error(`convertRadix2: wrong to=${to}`);
      if (/* @__PURE__ */ radix2carry(from, to) > 32) {
        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${/* @__PURE__ */ radix2carry(from, to)}`);
      }
      let carry = 0;
      let pos = 0;
      const max2 = powers[from];
      const mask2 = powers[to] - 1;
      const res = [];
      for (const n of data) {
        anumber2(n);
        if (n >= max2)
          throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
        carry = carry << from | n;
        if (pos + from > 32)
          throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
        pos += from;
        for (; pos >= to; pos -= to)
          res.push((carry >> pos - to & mask2) >>> 0);
        const pow3 = powers[pos];
        if (pow3 === void 0)
          throw new Error("invalid carry");
        carry &= pow3 - 1;
      }
      carry = carry << to - pos & mask2;
      if (!padding2 && pos >= from)
        throw new Error("Excess padding");
      if (!padding2 && carry > 0)
        throw new Error(`Non-zero padding: ${carry}`);
      if (padding2 && pos > 0)
        res.push(carry >>> 0);
      return res;
    }
    // @__NO_SIDE_EFFECTS__
    function radix(num) {
      anumber2(num);
      const _2562 = 2 ** 8;
      return {
        encode: (bytes2) => {
          if (!isBytes2(bytes2))
            throw new Error("radix.encode input should be Uint8Array");
          return convertRadix(Array.from(bytes2), _2562, num);
        },
        decode: (digits) => {
          anumArr("radix.decode", digits);
          return Uint8Array.from(convertRadix(digits, num, _2562));
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function radix2(bits, revPadding = false) {
      anumber2(bits);
      if (bits <= 0 || bits > 32)
        throw new Error("radix2: bits should be in (0..32]");
      if (/* @__PURE__ */ radix2carry(8, bits) > 32 || /* @__PURE__ */ radix2carry(bits, 8) > 32)
        throw new Error("radix2: carry overflow");
      return {
        encode: (bytes2) => {
          if (!isBytes2(bytes2))
            throw new Error("radix2.encode input should be Uint8Array");
          return convertRadix2(Array.from(bytes2), 8, bits, !revPadding);
        },
        decode: (digits) => {
          anumArr("radix2.decode", digits);
          return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
        }
      };
    }
    function unsafeWrapper(fn) {
      afn(fn);
      return function(...args) {
        try {
          return fn.apply(null, args);
        } catch (e) {
        }
      };
    }
    function checksum2(len2, fn) {
      anumber2(len2);
      afn(fn);
      return {
        encode(data) {
          if (!isBytes2(data))
            throw new Error("checksum.encode: input should be Uint8Array");
          const sum = fn(data).slice(0, len2);
          const res = new Uint8Array(data.length + len2);
          res.set(data);
          res.set(sum, data.length);
          return res;
        },
        decode(data) {
          if (!isBytes2(data))
            throw new Error("checksum.decode: input should be Uint8Array");
          const payload = data.slice(0, -len2);
          const oldChecksum = data.slice(-len2);
          const newChecksum = fn(payload).slice(0, len2);
          for (let i2 = 0; i2 < len2; i2++)
            if (newChecksum[i2] !== oldChecksum[i2])
              throw new Error("Invalid checksum");
          return payload;
        }
      };
    }
    exports.utils = {
      alphabet,
      chain,
      checksum: checksum2,
      convertRadix,
      convertRadix2,
      radix,
      radix2,
      join,
      padding
    };
    exports.base16 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789ABCDEF"), /* @__PURE__ */ join(""));
    exports.base32 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
    exports.base32nopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ join(""));
    exports.base32hex = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
    exports.base32hexnopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ join(""));
    exports.base32crockford = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize2((s2) => s2.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
    exports.base64 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
    exports.base64nopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ join(""));
    exports.base64url = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
    exports.base64urlnopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ join(""));
    const genBase58 = /* @__NO_SIDE_EFFECTS__ */ (abc) => /* @__PURE__ */ chain(/* @__PURE__ */ radix(58), /* @__PURE__ */ alphabet(abc), /* @__PURE__ */ join(""));
    exports.base58 = /* @__PURE__ */ genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    exports.base58flickr = /* @__PURE__ */ genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
    exports.base58xrp = /* @__PURE__ */ genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
    const XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
    exports.base58xmr = {
      encode(data) {
        let res = "";
        for (let i2 = 0; i2 < data.length; i2 += 8) {
          const block = data.subarray(i2, i2 + 8);
          res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
        }
        return res;
      },
      decode(str) {
        let res = [];
        for (let i2 = 0; i2 < str.length; i2 += 11) {
          const slice = str.slice(i2, i2 + 11);
          const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
          const block = exports.base58.decode(slice);
          for (let j = 0; j < block.length - blockLen; j++) {
            if (block[j] !== 0)
              throw new Error("base58xmr: wrong padding");
          }
          res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
      }
    };
    const createBase58check = (sha2562) => /* @__PURE__ */ chain(checksum2(4, (data) => sha2562(sha2562(data))), exports.base58);
    exports.createBase58check = createBase58check;
    exports.base58check = exports.createBase58check;
    const BECH_ALPHABET = /* @__PURE__ */ chain(/* @__PURE__ */ alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), /* @__PURE__ */ join(""));
    const POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
    function bech32Polymod(pre) {
      const b = pre >> 25;
      let chk = (pre & 33554431) << 5;
      for (let i2 = 0; i2 < POLYMOD_GENERATORS.length; i2++) {
        if ((b >> i2 & 1) === 1)
          chk ^= POLYMOD_GENERATORS[i2];
      }
      return chk;
    }
    function bechChecksum(prefix, words, encodingConst = 1) {
      const len2 = prefix.length;
      let chk = 1;
      for (let i2 = 0; i2 < len2; i2++) {
        const c = prefix.charCodeAt(i2);
        if (c < 33 || c > 126)
          throw new Error(`Invalid prefix (${prefix})`);
        chk = bech32Polymod(chk) ^ c >> 5;
      }
      chk = bech32Polymod(chk);
      for (let i2 = 0; i2 < len2; i2++)
        chk = bech32Polymod(chk) ^ prefix.charCodeAt(i2) & 31;
      for (let v of words)
        chk = bech32Polymod(chk) ^ v;
      for (let i2 = 0; i2 < 6; i2++)
        chk = bech32Polymod(chk);
      chk ^= encodingConst;
      return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));
    }
    // @__NO_SIDE_EFFECTS__
    function genBech32(encoding2) {
      const ENCODING_CONST = encoding2 === "bech32" ? 1 : 734539939;
      const _words = /* @__PURE__ */ radix2(5);
      const fromWords = _words.decode;
      const toWords = _words.encode;
      const fromWordsUnsafe = unsafeWrapper(fromWords);
      function encode2(prefix, words, limit2 = 90) {
        astr("bech32.encode prefix", prefix);
        if (isBytes2(words))
          words = Array.from(words);
        anumArr("bech32.encode", words);
        const plen = prefix.length;
        if (plen === 0)
          throw new TypeError(`Invalid prefix length ${plen}`);
        const actualLength = plen + 7 + words.length;
        if (limit2 !== false && actualLength > limit2)
          throw new TypeError(`Length ${actualLength} exceeds limit ${limit2}`);
        const lowered = prefix.toLowerCase();
        const sum = bechChecksum(lowered, words, ENCODING_CONST);
        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
      }
      function decode2(str, limit2 = 90) {
        astr("bech32.decode input", str);
        const slen = str.length;
        if (slen < 8 || limit2 !== false && slen > limit2)
          throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit2})`);
        const lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase())
          throw new Error(`String must be lowercase or uppercase`);
        const sepIndex = lowered.lastIndexOf("1");
        if (sepIndex === 0 || sepIndex === -1)
          throw new Error(`Letter "1" must be present between prefix and data only`);
        const prefix = lowered.slice(0, sepIndex);
        const data = lowered.slice(sepIndex + 1);
        if (data.length < 6)
          throw new Error("Data must be at least 6 characters long");
        const words = BECH_ALPHABET.decode(data).slice(0, -6);
        const sum = bechChecksum(prefix, words, ENCODING_CONST);
        if (!data.endsWith(sum))
          throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
        return { prefix, words };
      }
      const decodeUnsafe = unsafeWrapper(decode2);
      function decodeToBytes(str) {
        const { prefix, words } = decode2(str, false);
        return { prefix, words, bytes: fromWords(words) };
      }
      function encodeFromBytes(prefix, bytes2) {
        return encode2(prefix, toWords(bytes2));
      }
      return {
        encode: encode2,
        decode: decode2,
        encodeFromBytes,
        decodeToBytes,
        decodeUnsafe,
        fromWords,
        fromWordsUnsafe,
        toWords
      };
    }
    exports.bech32 = /* @__PURE__ */ genBech32("bech32");
    exports.bech32m = /* @__PURE__ */ genBech32("bech32m");
    exports.utf8 = {
      encode: (data) => new TextDecoder().decode(data),
      decode: (str) => new TextEncoder().encode(str)
    };
    exports.hex = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789abcdef"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize2((s2) => {
      if (typeof s2 !== "string" || s2.length % 2 !== 0)
        throw new TypeError(`hex.decode: expected string, got ${typeof s2} with length ${s2.length}`);
      return s2.toLowerCase();
    }));
    const CODERS = {
      utf8: exports.utf8,
      hex: exports.hex,
      base16: exports.base16,
      base32: exports.base32,
      base64: exports.base64,
      base64url: exports.base64url,
      base58: exports.base58,
      base58xmr: exports.base58xmr
    };
    const coderTypeError = "Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr";
    const bytesToString = (type, bytes2) => {
      if (typeof type !== "string" || !CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
      if (!isBytes2(bytes2))
        throw new TypeError("bytesToString() expects Uint8Array");
      return CODERS[type].encode(bytes2);
    };
    exports.bytesToString = bytesToString;
    exports.str = exports.bytesToString;
    const stringToBytes = (type, str) => {
      if (!CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
      if (typeof str !== "string")
        throw new TypeError("stringToBytes() expects string");
      return CODERS[type].decode(str);
    };
    exports.stringToBytes = stringToBytes;
    exports.bytes = exports.stringToBytes;
  })(lib$1);
  var hex = {};
  var sha3 = {};
  var _assert = {};
  Object.defineProperty(_assert, "__esModule", { value: true });
  _assert.anumber = anumber;
  _assert.abytes = abytes;
  _assert.ahash = ahash;
  _assert.aexists = aexists;
  _assert.aoutput = aoutput;
  function anumber(n) {
    if (!Number.isSafeInteger(n) || n < 0)
      throw new Error("positive integer expected, got " + n);
  }
  function isBytes(a) {
    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
  }
  function abytes(b, ...lengths) {
    if (!isBytes(b))
      throw new Error("Uint8Array expected");
    if (lengths.length > 0 && !lengths.includes(b.length))
      throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
  }
  function ahash(h) {
    if (typeof h !== "function" || typeof h.create !== "function")
      throw new Error("Hash should be wrapped by utils.wrapConstructor");
    anumber(h.outputLen);
    anumber(h.blockLen);
  }
  function aexists(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function aoutput(out, instance) {
    abytes(out);
    const min2 = instance.outputLen;
    if (out.length < min2) {
      throw new Error("digestInto() expects output buffer of length at least " + min2);
    }
  }
  var _u64 = {};
  Object.defineProperty(_u64, "__esModule", { value: true });
  _u64.add5L = _u64.add5H = _u64.add4H = _u64.add4L = _u64.add3H = _u64.add3L = _u64.rotlBL = _u64.rotlBH = _u64.rotlSL = _u64.rotlSH = _u64.rotr32L = _u64.rotr32H = _u64.rotrBL = _u64.rotrBH = _u64.rotrSL = _u64.rotrSH = _u64.shrSL = _u64.shrSH = _u64.toBig = void 0;
  _u64.fromBig = fromBig;
  _u64.split = split;
  _u64.add = add;
  const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
  const _32n = /* @__PURE__ */ BigInt(32);
  function fromBig(n, le = false) {
    if (le)
      return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
    return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
  }
  function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i2 = 0; i2 < lst.length; i2++) {
      const { h, l } = fromBig(lst[i2], le);
      [Ah[i2], Al[i2]] = [h, l];
    }
    return [Ah, Al];
  }
  const toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
  _u64.toBig = toBig;
  const shrSH = (h, _l, s2) => h >>> s2;
  _u64.shrSH = shrSH;
  const shrSL = (h, l, s2) => h << 32 - s2 | l >>> s2;
  _u64.shrSL = shrSL;
  const rotrSH = (h, l, s2) => h >>> s2 | l << 32 - s2;
  _u64.rotrSH = rotrSH;
  const rotrSL = (h, l, s2) => h << 32 - s2 | l >>> s2;
  _u64.rotrSL = rotrSL;
  const rotrBH = (h, l, s2) => h << 64 - s2 | l >>> s2 - 32;
  _u64.rotrBH = rotrBH;
  const rotrBL = (h, l, s2) => h >>> s2 - 32 | l << 64 - s2;
  _u64.rotrBL = rotrBL;
  const rotr32H = (_h, l) => l;
  _u64.rotr32H = rotr32H;
  const rotr32L = (h, _l) => h;
  _u64.rotr32L = rotr32L;
  const rotlSH = (h, l, s2) => h << s2 | l >>> 32 - s2;
  _u64.rotlSH = rotlSH;
  const rotlSL = (h, l, s2) => l << s2 | h >>> 32 - s2;
  _u64.rotlSL = rotlSL;
  const rotlBH = (h, l, s2) => l << s2 - 32 | h >>> 64 - s2;
  _u64.rotlBH = rotlBH;
  const rotlBL = (h, l, s2) => h << s2 - 32 | l >>> 64 - s2;
  _u64.rotlBL = rotlBL;
  function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
  }
  const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  _u64.add3L = add3L;
  const add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
  _u64.add3H = add3H;
  const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  _u64.add4L = add4L;
  const add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
  _u64.add4H = add4H;
  const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  _u64.add5L = add5L;
  const add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
  _u64.add5H = add5H;
  const u64 = {
    fromBig,
    split,
    toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L
  };
  _u64.default = u64;
  var utils$1 = {};
  var crypto$1 = {};
  Object.defineProperty(crypto$1, "__esModule", { value: true });
  crypto$1.crypto = void 0;
  crypto$1.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  (function(exports) {
    /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash = exports.nextTick = exports.byteSwapIfBE = exports.isLE = void 0;
    exports.isBytes = isBytes2;
    exports.u8 = u82;
    exports.u32 = u322;
    exports.createView = createView2;
    exports.rotr = rotr2;
    exports.rotl = rotl2;
    exports.byteSwap = byteSwap2;
    exports.byteSwap32 = byteSwap322;
    exports.bytesToHex = bytesToHex2;
    exports.hexToBytes = hexToBytes2;
    exports.asyncLoop = asyncLoop2;
    exports.utf8ToBytes = utf8ToBytes2;
    exports.toBytes = toBytes2;
    exports.concatBytes = concatBytes2;
    exports.checkOpts = checkOpts2;
    exports.wrapConstructor = wrapConstructor2;
    exports.wrapConstructorWithOpts = wrapConstructorWithOpts2;
    exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts2;
    exports.randomBytes = randomBytes2;
    const crypto_1 = crypto$1;
    const _assert_js_12 = _assert;
    function isBytes2(a) {
      return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
    }
    function u82(arr) {
      return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    }
    function u322(arr) {
      return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    }
    function createView2(arr) {
      return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    }
    function rotr2(word, shift) {
      return word << 32 - shift | word >>> shift;
    }
    function rotl2(word, shift) {
      return word << shift | word >>> 32 - shift >>> 0;
    }
    exports.isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
    function byteSwap2(word) {
      return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    }
    exports.byteSwapIfBE = exports.isLE ? (n) => n : (n) => byteSwap2(n);
    function byteSwap322(arr) {
      for (let i2 = 0; i2 < arr.length; i2++) {
        arr[i2] = byteSwap2(arr[i2]);
      }
    }
    const hexes2 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i2) => i2.toString(16).padStart(2, "0"));
    function bytesToHex2(bytes2) {
      (0, _assert_js_12.abytes)(bytes2);
      let hex2 = "";
      for (let i2 = 0; i2 < bytes2.length; i2++) {
        hex2 += hexes2[bytes2[i2]];
      }
      return hex2;
    }
    const asciis2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
    function asciiToBase162(ch) {
      if (ch >= asciis2._0 && ch <= asciis2._9)
        return ch - asciis2._0;
      if (ch >= asciis2.A && ch <= asciis2.F)
        return ch - (asciis2.A - 10);
      if (ch >= asciis2.a && ch <= asciis2.f)
        return ch - (asciis2.a - 10);
      return;
    }
    function hexToBytes2(hex2) {
      if (typeof hex2 !== "string")
        throw new Error("hex string expected, got " + typeof hex2);
      const hl = hex2.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("hex string expected, got unpadded hex of length " + hl);
      const array2 = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase162(hex2.charCodeAt(hi));
        const n2 = asciiToBase162(hex2.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex2[hi] + hex2[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array2[ai] = n1 * 16 + n2;
      }
      return array2;
    }
    const nextTick2 = async () => {
    };
    exports.nextTick = nextTick2;
    async function asyncLoop2(iters, tick, cb) {
      let ts = Date.now();
      for (let i2 = 0; i2 < iters; i2++) {
        cb(i2);
        const diff2 = Date.now() - ts;
        if (diff2 >= 0 && diff2 < tick)
          continue;
        await (0, exports.nextTick)();
        ts += diff2;
      }
    }
    function utf8ToBytes2(str) {
      if (typeof str !== "string")
        throw new Error("utf8ToBytes expected string, got " + typeof str);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    function toBytes2(data) {
      if (typeof data === "string")
        data = utf8ToBytes2(data);
      (0, _assert_js_12.abytes)(data);
      return data;
    }
    function concatBytes2(...arrays) {
      let sum = 0;
      for (let i2 = 0; i2 < arrays.length; i2++) {
        const a = arrays[i2];
        (0, _assert_js_12.abytes)(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i2 = 0, pad = 0; i2 < arrays.length; i2++) {
        const a = arrays[i2];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    class Hash2 {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    }
    exports.Hash = Hash2;
    function checkOpts2(defaults, opts) {
      if (opts !== void 0 && {}.toString.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    function wrapConstructor2(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    function wrapConstructorWithOpts2(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    function wrapXOFConstructorWithOpts2(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    function randomBytes2(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      if (crypto_1.crypto && typeof crypto_1.crypto.randomBytes === "function") {
        return crypto_1.crypto.randomBytes(bytesLength);
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
  })(utils$1);
  Object.defineProperty(sha3, "__esModule", { value: true });
  sha3.shake256 = sha3.shake128 = sha3.keccak_512 = sha3.keccak_384 = sha3.keccak_256 = sha3.keccak_224 = sha3.sha3_512 = sha3.sha3_384 = sha3.sha3_256 = sha3.sha3_224 = sha3.Keccak = void 0;
  sha3.keccakP = keccakP;
  const _assert_js_1 = _assert;
  const _u64_js_1 = _u64;
  const utils_js_1 = utils$1;
  const SHA3_PI = [];
  const SHA3_ROTL = [];
  const _SHA3_IOTA = [];
  const _0n = /* @__PURE__ */ BigInt(0);
  const _1n = /* @__PURE__ */ BigInt(1);
  const _2n = /* @__PURE__ */ BigInt(2);
  const _7n = /* @__PURE__ */ BigInt(7);
  const _256n = /* @__PURE__ */ BigInt(256);
  const _0x71n = /* @__PURE__ */ BigInt(113);
  for (let round = 0, R2 = _1n, x = 1, y = 0; round < 24; round++) {
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
    let t2 = _0n;
    for (let j = 0; j < 7; j++) {
      R2 = (R2 << _1n ^ (R2 >> _7n) * _0x71n) % _256n;
      if (R2 & _2n)
        t2 ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
    }
    _SHA3_IOTA.push(t2);
  }
  const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);
  const rotlH = (h, l, s2) => s2 > 32 ? (0, _u64_js_1.rotlBH)(h, l, s2) : (0, _u64_js_1.rotlSH)(h, l, s2);
  const rotlL = (h, l, s2) => s2 > 32 ? (0, _u64_js_1.rotlBL)(h, l, s2) : (0, _u64_js_1.rotlSL)(h, l, s2);
  function keccakP(s2, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round = 24 - rounds; round < 24; round++) {
      for (let x = 0; x < 10; x++)
        B[x] = s2[x] ^ s2[x + 10] ^ s2[x + 20] ^ s2[x + 30] ^ s2[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s2[x + y] ^= Th;
          s2[x + y + 1] ^= Tl;
        }
      }
      let curH = s2[2];
      let curL = s2[3];
      for (let t2 = 0; t2 < 24; t2++) {
        const shift = SHA3_ROTL[t2];
        const Th = rotlH(curH, curL, shift);
        const Tl = rotlL(curH, curL, shift);
        const PI = SHA3_PI[t2];
        curH = s2[PI];
        curL = s2[PI + 1];
        s2[PI] = Th;
        s2[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s2[y + x];
        for (let x = 0; x < 10; x++)
          s2[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s2[0] ^= SHA3_IOTA_H[round];
      s2[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
  }
  class Keccak extends utils_js_1.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
      super();
      this.blockLen = blockLen;
      this.suffix = suffix;
      this.outputLen = outputLen;
      this.enableXOF = enableXOF;
      this.rounds = rounds;
      this.pos = 0;
      this.posOut = 0;
      this.finished = false;
      this.destroyed = false;
      (0, _assert_js_1.anumber)(outputLen);
      if (0 >= this.blockLen || this.blockLen >= 200)
        throw new Error("Sha3 supports only keccak-f1600 function");
      this.state = new Uint8Array(200);
      this.state32 = (0, utils_js_1.u32)(this.state);
    }
    keccak() {
      if (!utils_js_1.isLE)
        (0, utils_js_1.byteSwap32)(this.state32);
      keccakP(this.state32, this.rounds);
      if (!utils_js_1.isLE)
        (0, utils_js_1.byteSwap32)(this.state32);
      this.posOut = 0;
      this.pos = 0;
    }
    update(data) {
      (0, _assert_js_1.aexists)(this);
      const { blockLen, state } = this;
      data = (0, utils_js_1.toBytes)(data);
      const len2 = data.length;
      for (let pos = 0; pos < len2; ) {
        const take = Math.min(blockLen - this.pos, len2 - pos);
        for (let i2 = 0; i2 < take; i2++)
          state[this.pos++] ^= data[pos++];
        if (this.pos === blockLen)
          this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      const { state, suffix, pos, blockLen } = this;
      state[pos] ^= suffix;
      if ((suffix & 128) !== 0 && pos === blockLen - 1)
        this.keccak();
      state[blockLen - 1] ^= 128;
      this.keccak();
    }
    writeInto(out) {
      (0, _assert_js_1.aexists)(this, false);
      (0, _assert_js_1.abytes)(out);
      this.finish();
      const bufferOut = this.state;
      const { blockLen } = this;
      for (let pos = 0, len2 = out.length; pos < len2; ) {
        if (this.posOut >= blockLen)
          this.keccak();
        const take = Math.min(blockLen - this.posOut, len2 - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
        this.posOut += take;
        pos += take;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible for this instance");
      return this.writeInto(out);
    }
    xof(bytes2) {
      (0, _assert_js_1.anumber)(bytes2);
      return this.xofInto(new Uint8Array(bytes2));
    }
    digestInto(out) {
      (0, _assert_js_1.aoutput)(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      this.destroyed = true;
      this.state.fill(0);
    }
    _cloneInto(to) {
      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
      to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
      to.state32.set(this.state32);
      to.pos = this.pos;
      to.posOut = this.posOut;
      to.finished = this.finished;
      to.rounds = rounds;
      to.suffix = suffix;
      to.outputLen = outputLen;
      to.enableXOF = enableXOF;
      to.destroyed = this.destroyed;
      return to;
    }
  }
  sha3.Keccak = Keccak;
  const gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
  sha3.sha3_224 = gen(6, 144, 224 / 8);
  sha3.sha3_256 = gen(6, 136, 256 / 8);
  sha3.sha3_384 = gen(6, 104, 384 / 8);
  sha3.sha3_512 = gen(6, 72, 512 / 8);
  sha3.keccak_224 = gen(1, 144, 224 / 8);
  sha3.keccak_256 = gen(1, 136, 256 / 8);
  sha3.keccak_384 = gen(1, 104, 384 / 8);
  sha3.keccak_512 = gen(1, 72, 512 / 8);
  const genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
  sha3.shake128 = genShake(31, 168, 128 / 8);
  sha3.shake256 = genShake(31, 136, 256 / 8);
  var hasRequiredHex;
  function requireHex() {
    if (hasRequiredHex) return hex;
    hasRequiredHex = 1;
    (function(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.remove0x = exports.add0x = exports.isValidChecksumAddress = exports.getChecksumAddress = exports.isValidHexAddress = exports.assertIsStrictHexString = exports.assertIsHexString = exports.isStrictHexString = exports.isHexString = exports.HexChecksumAddressStruct = exports.HexAddressStruct = exports.StrictHexStruct = exports.HexStruct = void 0;
      const superstruct_12 = dist$1;
      const sha3_12 = sha3;
      const assert_12 = assert$2;
      const bytes_12 = requireBytes();
      exports.HexStruct = (0, superstruct_12.pattern)((0, superstruct_12.string)(), /^(?:0x)?[0-9a-f]+$/iu);
      exports.StrictHexStruct = (0, superstruct_12.pattern)((0, superstruct_12.string)(), /^0x[0-9a-f]+$/iu);
      exports.HexAddressStruct = (0, superstruct_12.pattern)((0, superstruct_12.string)(), /^0x[0-9a-f]{40}$/u);
      exports.HexChecksumAddressStruct = (0, superstruct_12.pattern)((0, superstruct_12.string)(), /^0x[0-9a-fA-F]{40}$/u);
      function isHexString2(value) {
        return (0, superstruct_12.is)(value, exports.HexStruct);
      }
      exports.isHexString = isHexString2;
      function isStrictHexString(value) {
        return (0, superstruct_12.is)(value, exports.StrictHexStruct);
      }
      exports.isStrictHexString = isStrictHexString;
      function assertIsHexString2(value) {
        (0, assert_12.assert)(isHexString2(value), "Value must be a hexadecimal string.");
      }
      exports.assertIsHexString = assertIsHexString2;
      function assertIsStrictHexString(value) {
        (0, assert_12.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with "0x".');
      }
      exports.assertIsStrictHexString = assertIsStrictHexString;
      function isValidHexAddress(possibleAddress) {
        return (0, superstruct_12.is)(possibleAddress, exports.HexAddressStruct) || isValidChecksumAddress(possibleAddress);
      }
      exports.isValidHexAddress = isValidHexAddress;
      function getChecksumAddress2(address2) {
        (0, assert_12.assert)((0, superstruct_12.is)(address2, exports.HexChecksumAddressStruct), "Invalid hex address.");
        const unPrefixed = remove0x(address2.toLowerCase());
        const unPrefixedHash = remove0x((0, bytes_12.bytesToHex)((0, sha3_12.keccak_256)(unPrefixed)));
        return `0x${unPrefixed.split("").map((character, nibbleIndex) => {
          const hashCharacter = unPrefixedHash[nibbleIndex];
          (0, assert_12.assert)((0, superstruct_12.is)(hashCharacter, (0, superstruct_12.string)()), "Hash shorter than address.");
          return parseInt(hashCharacter, 16) > 7 ? character.toUpperCase() : character;
        }).join("")}`;
      }
      exports.getChecksumAddress = getChecksumAddress2;
      function isValidChecksumAddress(possibleChecksum) {
        if (!(0, superstruct_12.is)(possibleChecksum, exports.HexChecksumAddressStruct)) {
          return false;
        }
        return getChecksumAddress2(possibleChecksum) === possibleChecksum;
      }
      exports.isValidChecksumAddress = isValidChecksumAddress;
      function add0x(hexadecimal) {
        if (hexadecimal.startsWith("0x")) {
          return hexadecimal;
        }
        if (hexadecimal.startsWith("0X")) {
          return `0x${hexadecimal.substring(2)}`;
        }
        return `0x${hexadecimal}`;
      }
      exports.add0x = add0x;
      function remove0x(hexadecimal) {
        if (hexadecimal.startsWith("0x") || hexadecimal.startsWith("0X")) {
          return hexadecimal.substring(2);
        }
        return hexadecimal;
      }
      exports.remove0x = remove0x;
    })(hex);
    return hex;
  }
  var hasRequiredBytes;
  function requireBytes() {
    if (hasRequiredBytes) return bytes$1;
    hasRequiredBytes = 1;
    Object.defineProperty(bytes$1, "__esModule", { value: true });
    bytes$1.createDataView = bytes$1.concatBytes = bytes$1.valueToBytes = bytes$1.base64ToBytes = bytes$1.stringToBytes = bytes$1.numberToBytes = bytes$1.signedBigIntToBytes = bytes$1.bigIntToBytes = bytes$1.hexToBytes = bytes$1.bytesToBase64 = bytes$1.bytesToString = bytes$1.bytesToNumber = bytes$1.bytesToSignedBigInt = bytes$1.bytesToBigInt = bytes$1.bytesToHex = bytes$1.assertIsBytes = bytes$1.isBytes = void 0;
    const base_12 = lib$1;
    const assert_12 = assert$2;
    const hex_12 = requireHex();
    const HEX_MINIMUM_NUMBER_CHARACTER = 48;
    const HEX_MAXIMUM_NUMBER_CHARACTER = 58;
    const HEX_CHARACTER_OFFSET = 87;
    function getPrecomputedHexValuesBuilder() {
      const lookupTable = [];
      return () => {
        if (lookupTable.length === 0) {
          for (let i2 = 0; i2 < 256; i2++) {
            lookupTable.push(i2.toString(16).padStart(2, "0"));
          }
        }
        return lookupTable;
      };
    }
    const getPrecomputedHexValues = getPrecomputedHexValuesBuilder();
    function isBytes2(value) {
      return value instanceof Uint8Array;
    }
    bytes$1.isBytes = isBytes2;
    function assertIsBytes(value) {
      (0, assert_12.assert)(isBytes2(value), "Value must be a Uint8Array.");
    }
    bytes$1.assertIsBytes = assertIsBytes;
    function bytesToHex2(bytes2) {
      assertIsBytes(bytes2);
      if (bytes2.length === 0) {
        return "0x";
      }
      const lookupTable = getPrecomputedHexValues();
      const hexadecimal = new Array(bytes2.length);
      for (let i2 = 0; i2 < bytes2.length; i2++) {
        hexadecimal[i2] = lookupTable[bytes2[i2]];
      }
      return (0, hex_12.add0x)(hexadecimal.join(""));
    }
    bytes$1.bytesToHex = bytesToHex2;
    function bytesToBigInt(bytes2) {
      assertIsBytes(bytes2);
      const hexadecimal = bytesToHex2(bytes2);
      return BigInt(hexadecimal);
    }
    bytes$1.bytesToBigInt = bytesToBigInt;
    function bytesToSignedBigInt(bytes2) {
      assertIsBytes(bytes2);
      let value = BigInt(0);
      for (const byte of bytes2) {
        value = (value << BigInt(8)) + BigInt(byte);
      }
      return BigInt.asIntN(bytes2.length * 8, value);
    }
    bytes$1.bytesToSignedBigInt = bytesToSignedBigInt;
    function bytesToNumber(bytes2) {
      assertIsBytes(bytes2);
      const bigint = bytesToBigInt(bytes2);
      (0, assert_12.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), "Number is not a safe integer. Use `bytesToBigInt` instead.");
      return Number(bigint);
    }
    bytes$1.bytesToNumber = bytesToNumber;
    function bytesToString(bytes2) {
      assertIsBytes(bytes2);
      return new TextDecoder().decode(bytes2);
    }
    bytes$1.bytesToString = bytesToString;
    function bytesToBase64(bytes2) {
      assertIsBytes(bytes2);
      return base_12.base64.encode(bytes2);
    }
    bytes$1.bytesToBase64 = bytesToBase64;
    function hexToBytes2(value) {
      if (value?.toLowerCase?.() === "0x") {
        return new Uint8Array();
      }
      (0, hex_12.assertIsHexString)(value);
      const strippedValue = (0, hex_12.remove0x)(value).toLowerCase();
      const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;
      const bytes2 = new Uint8Array(normalizedValue.length / 2);
      for (let i2 = 0; i2 < bytes2.length; i2++) {
        const c1 = normalizedValue.charCodeAt(i2 * 2);
        const c2 = normalizedValue.charCodeAt(i2 * 2 + 1);
        const n1 = c1 - (c1 < HEX_MAXIMUM_NUMBER_CHARACTER ? HEX_MINIMUM_NUMBER_CHARACTER : HEX_CHARACTER_OFFSET);
        const n2 = c2 - (c2 < HEX_MAXIMUM_NUMBER_CHARACTER ? HEX_MINIMUM_NUMBER_CHARACTER : HEX_CHARACTER_OFFSET);
        bytes2[i2] = n1 * 16 + n2;
      }
      return bytes2;
    }
    bytes$1.hexToBytes = hexToBytes2;
    function bigIntToBytes(value) {
      (0, assert_12.assert)(typeof value === "bigint", "Value must be a bigint.");
      (0, assert_12.assert)(value >= BigInt(0), "Value must be a non-negative bigint.");
      const hexadecimal = value.toString(16);
      return hexToBytes2(hexadecimal);
    }
    bytes$1.bigIntToBytes = bigIntToBytes;
    function bigIntFits(value, bytes2) {
      (0, assert_12.assert)(bytes2 > 0);
      const mask2 = value >> BigInt(31);
      return !((~value & mask2) + (value & ~mask2) >> BigInt(bytes2 * 8 + -1));
    }
    function signedBigIntToBytes(value, byteLength2) {
      (0, assert_12.assert)(typeof value === "bigint", "Value must be a bigint.");
      (0, assert_12.assert)(typeof byteLength2 === "number", "Byte length must be a number.");
      (0, assert_12.assert)(byteLength2 > 0, "Byte length must be greater than 0.");
      (0, assert_12.assert)(bigIntFits(value, byteLength2), "Byte length is too small to represent the given value.");
      let numberValue = value;
      const bytes2 = new Uint8Array(byteLength2);
      for (let i2 = 0; i2 < bytes2.length; i2++) {
        bytes2[i2] = Number(BigInt.asUintN(8, numberValue));
        numberValue >>= BigInt(8);
      }
      return bytes2.reverse();
    }
    bytes$1.signedBigIntToBytes = signedBigIntToBytes;
    function numberToBytes(value) {
      (0, assert_12.assert)(typeof value === "number", "Value must be a number.");
      (0, assert_12.assert)(value >= 0, "Value must be a non-negative number.");
      (0, assert_12.assert)(Number.isSafeInteger(value), "Value is not a safe integer. Use `bigIntToBytes` instead.");
      const hexadecimal = value.toString(16);
      return hexToBytes2(hexadecimal);
    }
    bytes$1.numberToBytes = numberToBytes;
    function stringToBytes(value) {
      (0, assert_12.assert)(typeof value === "string", "Value must be a string.");
      return new TextEncoder().encode(value);
    }
    bytes$1.stringToBytes = stringToBytes;
    function base64ToBytes(value) {
      (0, assert_12.assert)(typeof value === "string", "Value must be a string.");
      return base_12.base64.decode(value);
    }
    bytes$1.base64ToBytes = base64ToBytes;
    function valueToBytes(value) {
      if (typeof value === "bigint") {
        return bigIntToBytes(value);
      }
      if (typeof value === "number") {
        return numberToBytes(value);
      }
      if (typeof value === "string") {
        if (value.startsWith("0x")) {
          return hexToBytes2(value);
        }
        return stringToBytes(value);
      }
      if (isBytes2(value)) {
        return value;
      }
      throw new TypeError(`Unsupported value type: "${typeof value}".`);
    }
    bytes$1.valueToBytes = valueToBytes;
    function concatBytes2(values) {
      const normalizedValues = new Array(values.length);
      let byteLength2 = 0;
      for (let i2 = 0; i2 < values.length; i2++) {
        const value = valueToBytes(values[i2]);
        normalizedValues[i2] = value;
        byteLength2 += value.length;
      }
      const bytes2 = new Uint8Array(byteLength2);
      for (let i2 = 0, offset = 0; i2 < normalizedValues.length; i2++) {
        bytes2.set(normalizedValues[i2], offset);
        offset += normalizedValues[i2].length;
      }
      return bytes2;
    }
    bytes$1.concatBytes = concatBytes2;
    function createDataView(bytes2) {
      if (typeof Buffer2 !== "undefined" && bytes2 instanceof Buffer2) {
        const buffer2 = bytes2.buffer.slice(bytes2.byteOffset, bytes2.byteOffset + bytes2.byteLength);
        return new DataView(buffer2);
      }
      return new DataView(bytes2.buffer, bytes2.byteOffset, bytes2.byteLength);
    }
    bytes$1.createDataView = createDataView;
    return bytes$1;
  }
  var caipTypes = {};
  var superstruct = {};
  Object.defineProperty(superstruct, "__esModule", { value: true });
  superstruct.definePattern = void 0;
  const superstruct_1$2 = dist$1;
  function definePattern(name, pattern2) {
    return (0, superstruct_1$2.define)(name, (value) => {
      return typeof value === "string" && pattern2.test(value);
    });
  }
  superstruct.definePattern = definePattern;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toCaipAssetId = exports.toCaipAssetType = exports.toCaipAccountId = exports.toCaipChainId = exports.parseCaipAssetId = exports.parseCaipAssetType = exports.parseCaipAccountId = exports.parseCaipChainId = exports.isCaipAssetId = exports.isCaipAssetType = exports.isCaipTokenId = exports.isCaipAssetReference = exports.isCaipAssetNamespace = exports.isCaipAccountAddress = exports.isCaipAccountId = exports.isCaipReference = exports.isCaipNamespace = exports.isCaipChainId = exports.KnownCaipNamespace = exports.CaipAssetTypeOrIdStruct = exports.CaipAssetIdStruct = exports.CaipAssetTypeStruct = exports.CaipTokenIdStruct = exports.CaipAssetReferenceStruct = exports.CaipAssetNamespaceStruct = exports.CaipAccountAddressStruct = exports.CaipAccountIdStruct = exports.CaipReferenceStruct = exports.CaipNamespaceStruct = exports.CaipChainIdStruct = exports.CAIP_ASSET_ID_REGEX = exports.CAIP_ASSET_TYPE_REGEX = exports.CAIP_TOKEN_ID_REGEX = exports.CAIP_ASSET_REFERENCE_REGEX = exports.CAIP_ASSET_NAMESPACE_REGEX = exports.CAIP_ACCOUNT_ADDRESS_REGEX = exports.CAIP_ACCOUNT_ID_REGEX = exports.CAIP_REFERENCE_REGEX = exports.CAIP_NAMESPACE_REGEX = exports.CAIP_CHAIN_ID_REGEX = void 0;
    const superstruct_12 = dist$1;
    const superstruct_2 = superstruct;
    exports.CAIP_CHAIN_ID_REGEX = /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u;
    exports.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u;
    exports.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u;
    exports.CAIP_ACCOUNT_ID_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u;
    exports.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u;
    exports.CAIP_ASSET_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u;
    exports.CAIP_ASSET_REFERENCE_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u;
    exports.CAIP_TOKEN_ID_REGEX = /^[-.%a-zA-Z0-9]{1,78}$/u;
    exports.CAIP_ASSET_TYPE_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})$/u;
    exports.CAIP_ASSET_ID_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})\/(?<tokenId>[-.%a-zA-Z0-9]{1,78})$/u;
    const CAIP_ASSET_TYPE_OR_ID_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})(\/(?<tokenId>[-.%a-zA-Z0-9]{1,78}))?$/u;
    exports.CaipChainIdStruct = (0, superstruct_2.definePattern)("CaipChainId", exports.CAIP_CHAIN_ID_REGEX);
    exports.CaipNamespaceStruct = (0, superstruct_2.definePattern)("CaipNamespace", exports.CAIP_NAMESPACE_REGEX);
    exports.CaipReferenceStruct = (0, superstruct_2.definePattern)("CaipReference", exports.CAIP_REFERENCE_REGEX);
    exports.CaipAccountIdStruct = (0, superstruct_2.definePattern)("CaipAccountId", exports.CAIP_ACCOUNT_ID_REGEX);
    exports.CaipAccountAddressStruct = (0, superstruct_2.definePattern)("CaipAccountAddress", exports.CAIP_ACCOUNT_ADDRESS_REGEX);
    exports.CaipAssetNamespaceStruct = (0, superstruct_2.definePattern)("CaipAssetNamespace", exports.CAIP_ASSET_NAMESPACE_REGEX);
    exports.CaipAssetReferenceStruct = (0, superstruct_2.definePattern)("CaipAssetReference", exports.CAIP_ASSET_REFERENCE_REGEX);
    exports.CaipTokenIdStruct = (0, superstruct_2.definePattern)("CaipTokenId", exports.CAIP_TOKEN_ID_REGEX);
    exports.CaipAssetTypeStruct = (0, superstruct_2.definePattern)("CaipAssetType", exports.CAIP_ASSET_TYPE_REGEX);
    exports.CaipAssetIdStruct = (0, superstruct_2.definePattern)("CaipAssetId", exports.CAIP_ASSET_ID_REGEX);
    exports.CaipAssetTypeOrIdStruct = (0, superstruct_2.definePattern)("CaipAssetTypeOrId", CAIP_ASSET_TYPE_OR_ID_REGEX);
    (function(KnownCaipNamespace) {
      KnownCaipNamespace["Bip122"] = "bip122";
      KnownCaipNamespace["Solana"] = "solana";
      KnownCaipNamespace["Eip155"] = "eip155";
      KnownCaipNamespace["Wallet"] = "wallet";
    })(exports.KnownCaipNamespace || (exports.KnownCaipNamespace = {}));
    function isCaipChainId(value) {
      return (0, superstruct_12.is)(value, exports.CaipChainIdStruct);
    }
    exports.isCaipChainId = isCaipChainId;
    function isCaipNamespace(value) {
      return (0, superstruct_12.is)(value, exports.CaipNamespaceStruct);
    }
    exports.isCaipNamespace = isCaipNamespace;
    function isCaipReference(value) {
      return (0, superstruct_12.is)(value, exports.CaipReferenceStruct);
    }
    exports.isCaipReference = isCaipReference;
    function isCaipAccountId(value) {
      return (0, superstruct_12.is)(value, exports.CaipAccountIdStruct);
    }
    exports.isCaipAccountId = isCaipAccountId;
    function isCaipAccountAddress(value) {
      return (0, superstruct_12.is)(value, exports.CaipAccountAddressStruct);
    }
    exports.isCaipAccountAddress = isCaipAccountAddress;
    function isCaipAssetNamespace(value) {
      return (0, superstruct_12.is)(value, exports.CaipAssetNamespaceStruct);
    }
    exports.isCaipAssetNamespace = isCaipAssetNamespace;
    function isCaipAssetReference(value) {
      return (0, superstruct_12.is)(value, exports.CaipAssetReferenceStruct);
    }
    exports.isCaipAssetReference = isCaipAssetReference;
    function isCaipTokenId(value) {
      return (0, superstruct_12.is)(value, exports.CaipTokenIdStruct);
    }
    exports.isCaipTokenId = isCaipTokenId;
    function isCaipAssetType(value) {
      return (0, superstruct_12.is)(value, exports.CaipAssetTypeStruct);
    }
    exports.isCaipAssetType = isCaipAssetType;
    function isCaipAssetId(value) {
      return (0, superstruct_12.is)(value, exports.CaipAssetIdStruct);
    }
    exports.isCaipAssetId = isCaipAssetId;
    function parseCaipChainId(caipChainId) {
      const match = exports.CAIP_CHAIN_ID_REGEX.exec(caipChainId);
      if (!match?.groups) {
        throw new Error("Invalid CAIP chain ID.");
      }
      return {
        namespace: match.groups.namespace,
        reference: match.groups.reference
      };
    }
    exports.parseCaipChainId = parseCaipChainId;
    function parseCaipAccountId(caipAccountId) {
      const match = exports.CAIP_ACCOUNT_ID_REGEX.exec(caipAccountId);
      if (!match?.groups) {
        throw new Error("Invalid CAIP account ID.");
      }
      return {
        address: match.groups.accountAddress,
        chainId: match.groups.chainId,
        chain: {
          namespace: match.groups.namespace,
          reference: match.groups.reference
        }
      };
    }
    exports.parseCaipAccountId = parseCaipAccountId;
    function parseCaipAssetType(caipAssetType) {
      const match = exports.CAIP_ASSET_TYPE_REGEX.exec(caipAssetType);
      if (!match?.groups) {
        throw new Error("Invalid CAIP asset type.");
      }
      return {
        assetNamespace: match.groups.assetNamespace,
        assetReference: match.groups.assetReference,
        chainId: match.groups.chainId,
        chain: {
          namespace: match.groups.namespace,
          reference: match.groups.reference
        }
      };
    }
    exports.parseCaipAssetType = parseCaipAssetType;
    function parseCaipAssetId(caipAssetId) {
      const match = exports.CAIP_ASSET_ID_REGEX.exec(caipAssetId);
      if (!match?.groups) {
        throw new Error("Invalid CAIP asset ID.");
      }
      return {
        assetNamespace: match.groups.assetNamespace,
        assetReference: match.groups.assetReference,
        tokenId: match.groups.tokenId,
        chainId: match.groups.chainId,
        chain: {
          namespace: match.groups.namespace,
          reference: match.groups.reference
        }
      };
    }
    exports.parseCaipAssetId = parseCaipAssetId;
    function toCaipChainId(namespace, reference) {
      if (!isCaipNamespace(namespace)) {
        throw new Error(`Invalid "namespace", must match: ${exports.CAIP_NAMESPACE_REGEX.toString()}`);
      }
      if (!isCaipReference(reference)) {
        throw new Error(`Invalid "reference", must match: ${exports.CAIP_REFERENCE_REGEX.toString()}`);
      }
      return `${namespace}:${reference}`;
    }
    exports.toCaipChainId = toCaipChainId;
    function toCaipAccountId(namespace, reference, accountAddress) {
      if (!isCaipNamespace(namespace)) {
        throw new Error(`Invalid "namespace", must match: ${exports.CAIP_NAMESPACE_REGEX.toString()}`);
      }
      if (!isCaipReference(reference)) {
        throw new Error(`Invalid "reference", must match: ${exports.CAIP_REFERENCE_REGEX.toString()}`);
      }
      if (!isCaipAccountAddress(accountAddress)) {
        throw new Error(`Invalid "accountAddress", must match: ${exports.CAIP_ACCOUNT_ADDRESS_REGEX.toString()}`);
      }
      return `${namespace}:${reference}:${accountAddress}`;
    }
    exports.toCaipAccountId = toCaipAccountId;
    function toCaipAssetType(namespace, reference, assetNamespace, assetReference) {
      if (!isCaipNamespace(namespace)) {
        throw new Error(`Invalid "namespace", must match: ${exports.CAIP_NAMESPACE_REGEX.toString()}`);
      }
      if (!isCaipReference(reference)) {
        throw new Error(`Invalid "reference", must match: ${exports.CAIP_REFERENCE_REGEX.toString()}`);
      }
      if (!isCaipAssetNamespace(assetNamespace)) {
        throw new Error(`Invalid "assetNamespace", must match: ${exports.CAIP_ASSET_NAMESPACE_REGEX.toString()}`);
      }
      if (!isCaipAssetReference(assetReference)) {
        throw new Error(`Invalid "assetReference", must match: ${exports.CAIP_ASSET_REFERENCE_REGEX.toString()}`);
      }
      return `${namespace}:${reference}/${assetNamespace}:${assetReference}`;
    }
    exports.toCaipAssetType = toCaipAssetType;
    function toCaipAssetId(namespace, reference, assetNamespace, assetReference, tokenId) {
      if (!isCaipNamespace(namespace)) {
        throw new Error(`Invalid "namespace", must match: ${exports.CAIP_NAMESPACE_REGEX.toString()}`);
      }
      if (!isCaipReference(reference)) {
        throw new Error(`Invalid "reference", must match: ${exports.CAIP_REFERENCE_REGEX.toString()}`);
      }
      if (!isCaipAssetNamespace(assetNamespace)) {
        throw new Error(`Invalid "assetNamespace", must match: ${exports.CAIP_ASSET_NAMESPACE_REGEX.toString()}`);
      }
      if (!isCaipAssetReference(assetReference)) {
        throw new Error(`Invalid "assetReference", must match: ${exports.CAIP_ASSET_REFERENCE_REGEX.toString()}`);
      }
      if (!isCaipTokenId(tokenId)) {
        throw new Error(`Invalid "tokenId", must match: ${exports.CAIP_TOKEN_ID_REGEX.toString()}`);
      }
      return `${namespace}:${reference}/${assetNamespace}:${assetReference}/${tokenId}`;
    }
    exports.toCaipAssetId = toCaipAssetId;
  })(caipTypes);
  var checksum = {};
  Object.defineProperty(checksum, "__esModule", { value: true });
  checksum.ChecksumStruct = void 0;
  const superstruct_1$1 = dist$1;
  const base64_1 = base64$1;
  checksum.ChecksumStruct = (0, superstruct_1$1.size)((0, base64_1.base64)((0, superstruct_1$1.string)(), { paddingRequired: true }), 44, 44);
  var coercers = {};
  Object.defineProperty(coercers, "__esModule", { value: true });
  coercers.createHex = coercers.createBytes = coercers.createBigInt = coercers.createNumber = void 0;
  const superstruct_1 = dist$1;
  const assert_1$1 = assert$2;
  const bytes_1$1 = requireBytes();
  const hex_1$1 = requireHex();
  const NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1$1.StrictHexStruct]);
  const NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);
  const BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);
  (0, superstruct_1.union)([hex_1$1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);
  const BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1$1.StrictHexStruct]), bytes_1$1.hexToBytes);
  const HexCoercer = (0, superstruct_1.coerce)(hex_1$1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1$1.bytesToHex);
  function createNumber(value) {
    try {
      const result = (0, superstruct_1.create)(value, NumberCoercer);
      (0, assert_1$1.assert)(Number.isFinite(result), `Expected a number-like value, got "${value}".`);
      return result;
    } catch (error2) {
      if (error2 instanceof superstruct_1.StructError) {
        throw new Error(`Expected a number-like value, got "${value}".`);
      }
      throw error2;
    }
  }
  coercers.createNumber = createNumber;
  function createBigInt(value) {
    try {
      return (0, superstruct_1.create)(value, BigIntCoercer);
    } catch (error2) {
      if (error2 instanceof superstruct_1.StructError) {
        throw new Error(`Expected a number-like value, got "${String(error2.value)}".`);
      }
      throw error2;
    }
  }
  coercers.createBigInt = createBigInt;
  function createBytes(value) {
    if (typeof value === "string" && value.toLowerCase() === "0x") {
      return new Uint8Array();
    }
    try {
      return (0, superstruct_1.create)(value, BytesCoercer);
    } catch (error2) {
      if (error2 instanceof superstruct_1.StructError) {
        throw new Error(`Expected a bytes-like value, got "${String(error2.value)}".`);
      }
      throw error2;
    }
  }
  coercers.createBytes = createBytes;
  function createHex(value) {
    if (value instanceof Uint8Array && value.length === 0 || typeof value === "string" && value.toLowerCase() === "0x") {
      return "0x";
    }
    try {
      return (0, superstruct_1.create)(value, HexCoercer);
    } catch (error2) {
      if (error2 instanceof superstruct_1.StructError) {
        throw new Error(`Expected a bytes-like value, got "${String(error2.value)}".`);
      }
      throw error2;
    }
  }
  coercers.createHex = createHex;
  var collections = {};
  var __classPrivateFieldGet = globalThis && globalThis.__classPrivateFieldGet || function(receiver, state, kind, f2) {
    if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
  };
  var __classPrivateFieldSet = globalThis && globalThis.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
  };
  var _FrozenMap_map, _FrozenSet_set;
  Object.defineProperty(collections, "__esModule", { value: true });
  collections.FrozenSet = collections.FrozenMap = void 0;
  class FrozenMap {
    get size() {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").size;
    }
    [(_FrozenMap_map = /* @__PURE__ */ new WeakMap(), Symbol.iterator)]() {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f")[Symbol.iterator]();
    }
    constructor(entries) {
      _FrozenMap_map.set(this, void 0);
      __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), "f");
      Object.freeze(this);
    }
    entries() {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").entries();
    }
    forEach(callbackfn, thisArg) {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").forEach((value, key2, _map) => callbackfn.call(thisArg, value, key2, this));
    }
    get(key2) {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").get(key2);
    }
    has(key2) {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").has(key2);
    }
    keys() {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").keys();
    }
    values() {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").values();
    }
    toString() {
      return `FrozenMap(${this.size}) {${this.size > 0 ? ` ${[...this.entries()].map(([key2, value]) => `${String(key2)} => ${String(value)}`).join(", ")} ` : ""}}`;
    }
  }
  collections.FrozenMap = FrozenMap;
  class FrozenSet {
    get size() {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f").size;
    }
    [(_FrozenSet_set = /* @__PURE__ */ new WeakMap(), Symbol.iterator)]() {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f")[Symbol.iterator]();
    }
    constructor(values) {
      _FrozenSet_set.set(this, void 0);
      __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), "f");
      Object.freeze(this);
    }
    entries() {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f").entries();
    }
    forEach(callbackfn, thisArg) {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));
    }
    has(value) {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f").has(value);
    }
    keys() {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f").keys();
    }
    values() {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f").values();
    }
    toString() {
      return `FrozenSet(${this.size}) {${this.size > 0 ? ` ${[...this.values()].map((member) => String(member)).join(", ")} ` : ""}}`;
    }
  }
  collections.FrozenSet = FrozenSet;
  Object.freeze(FrozenMap);
  Object.freeze(FrozenMap.prototype);
  Object.freeze(FrozenSet);
  Object.freeze(FrozenSet.prototype);
  var encryptionTypes = {};
  Object.defineProperty(encryptionTypes, "__esModule", { value: true });
  var json = {};
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.getJsonSize = exports.getSafeJson = exports.isValidJson = exports.JsonStruct = exports.UnsafeJsonStruct = exports.exactOptional = exports.object = void 0;
    const superstruct_12 = dist$1;
    const assert_12 = assert$2;
    const misc_12 = misc;
    const object = (schema) => (
      // The type is slightly different from a regular object struct, because we
      // want to make properties with `undefined` in their type optional, but not
      // `undefined` itself. This means that we need a type cast.
      (0, superstruct_12.object)(schema)
    );
    exports.object = object;
    function hasOptional({ path, branch }) {
      const field = path[path.length - 1];
      return (0, misc_12.hasProperty)(branch[branch.length - 2], field);
    }
    function exactOptional(struct2) {
      return new superstruct_12.Struct({
        ...struct2,
        type: `optional ${struct2.type}`,
        validator: (value, context) => !hasOptional(context) || struct2.validator(value, context),
        refiner: (value, context) => !hasOptional(context) || struct2.refiner(value, context)
      });
    }
    exports.exactOptional = exactOptional;
    function validateJson(json2) {
      if (json2 === null || typeof json2 === "boolean" || typeof json2 === "string") {
        return true;
      }
      if (typeof json2 === "number" && Number.isFinite(json2)) {
        return true;
      }
      if (typeof json2 === "object") {
        let every = true;
        if (Array.isArray(json2)) {
          for (let i2 = 0; i2 < json2.length; i2++) {
            if (!validateJson(json2[i2])) {
              every = false;
              break;
            }
          }
          return every;
        }
        const entries = Object.entries(json2);
        for (let i2 = 0; i2 < entries.length; i2++) {
          if (typeof entries[i2][0] !== "string" || !validateJson(entries[i2][1])) {
            every = false;
            break;
          }
        }
        return every;
      }
      return false;
    }
    exports.UnsafeJsonStruct = (0, superstruct_12.define)("JSON", (json2) => validateJson(json2));
    exports.JsonStruct = (0, superstruct_12.coerce)(exports.UnsafeJsonStruct, (0, superstruct_12.refine)((0, superstruct_12.any)(), "JSON", (value) => (0, superstruct_12.is)(value, exports.UnsafeJsonStruct)), (value) => JSON.parse(JSON.stringify(value, (propKey, propValue) => {
      if (propKey === "__proto__" || propKey === "constructor") {
        return void 0;
      }
      return propValue;
    })));
    function isValidJson(value) {
      try {
        getSafeJson(value);
        return true;
      } catch {
        return false;
      }
    }
    exports.isValidJson = isValidJson;
    function getSafeJson(value) {
      return (0, superstruct_12.create)(value, exports.JsonStruct);
    }
    exports.getSafeJson = getSafeJson;
    function getJsonSize(value) {
      (0, assert_12.assertStruct)(value, exports.JsonStruct, "Invalid JSON value");
      const json2 = JSON.stringify(value);
      return new TextEncoder().encode(json2).byteLength;
    }
    exports.getJsonSize = getJsonSize;
    exports.jsonrpc2 = "2.0";
    exports.JsonRpcVersionStruct = (0, superstruct_12.literal)(exports.jsonrpc2);
    exports.JsonRpcIdStruct = (0, superstruct_12.nullable)((0, superstruct_12.union)([(0, superstruct_12.number)(), (0, superstruct_12.string)()]));
    exports.JsonRpcErrorStruct = (0, exports.object)({
      code: (0, superstruct_12.integer)(),
      message: (0, superstruct_12.string)(),
      data: exactOptional(exports.JsonStruct),
      stack: exactOptional((0, superstruct_12.string)())
    });
    exports.JsonRpcParamsStruct = (0, superstruct_12.union)([(0, superstruct_12.record)((0, superstruct_12.string)(), exports.JsonStruct), (0, superstruct_12.array)(exports.JsonStruct)]);
    exports.JsonRpcRequestStruct = (0, exports.object)({
      id: exports.JsonRpcIdStruct,
      jsonrpc: exports.JsonRpcVersionStruct,
      method: (0, superstruct_12.string)(),
      params: exactOptional(exports.JsonRpcParamsStruct)
    });
    exports.JsonRpcNotificationStruct = (0, exports.object)({
      jsonrpc: exports.JsonRpcVersionStruct,
      method: (0, superstruct_12.string)(),
      params: exactOptional(exports.JsonRpcParamsStruct)
    });
    function isJsonRpcNotification(value) {
      return (0, superstruct_12.is)(value, exports.JsonRpcNotificationStruct);
    }
    exports.isJsonRpcNotification = isJsonRpcNotification;
    function assertIsJsonRpcNotification(value, ErrorWrapper) {
      (0, assert_12.assertStruct)(value, exports.JsonRpcNotificationStruct, "Invalid JSON-RPC notification", ErrorWrapper);
    }
    exports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;
    function isJsonRpcRequest(value) {
      return (0, superstruct_12.is)(value, exports.JsonRpcRequestStruct);
    }
    exports.isJsonRpcRequest = isJsonRpcRequest;
    function assertIsJsonRpcRequest(value, ErrorWrapper) {
      (0, assert_12.assertStruct)(value, exports.JsonRpcRequestStruct, "Invalid JSON-RPC request", ErrorWrapper);
    }
    exports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;
    exports.PendingJsonRpcResponseStruct = (0, superstruct_12.object)({
      id: exports.JsonRpcIdStruct,
      jsonrpc: exports.JsonRpcVersionStruct,
      result: (0, superstruct_12.optional)((0, superstruct_12.unknown)()),
      error: (0, superstruct_12.optional)(exports.JsonRpcErrorStruct)
    });
    exports.JsonRpcSuccessStruct = (0, exports.object)({
      id: exports.JsonRpcIdStruct,
      jsonrpc: exports.JsonRpcVersionStruct,
      result: exports.JsonStruct
    });
    exports.JsonRpcFailureStruct = (0, exports.object)({
      id: exports.JsonRpcIdStruct,
      jsonrpc: exports.JsonRpcVersionStruct,
      error: exports.JsonRpcErrorStruct
    });
    exports.JsonRpcResponseStruct = (0, superstruct_12.union)([
      exports.JsonRpcSuccessStruct,
      exports.JsonRpcFailureStruct
    ]);
    function isPendingJsonRpcResponse(response) {
      return (0, superstruct_12.is)(response, exports.PendingJsonRpcResponseStruct);
    }
    exports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;
    function assertIsPendingJsonRpcResponse(response, ErrorWrapper) {
      (0, assert_12.assertStruct)(response, exports.PendingJsonRpcResponseStruct, "Invalid pending JSON-RPC response", ErrorWrapper);
    }
    exports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;
    function isJsonRpcResponse(response) {
      return (0, superstruct_12.is)(response, exports.JsonRpcResponseStruct);
    }
    exports.isJsonRpcResponse = isJsonRpcResponse;
    function assertIsJsonRpcResponse(value, ErrorWrapper) {
      (0, assert_12.assertStruct)(value, exports.JsonRpcResponseStruct, "Invalid JSON-RPC response", ErrorWrapper);
    }
    exports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;
    function isJsonRpcSuccess(value) {
      return (0, superstruct_12.is)(value, exports.JsonRpcSuccessStruct);
    }
    exports.isJsonRpcSuccess = isJsonRpcSuccess;
    function assertIsJsonRpcSuccess(value, ErrorWrapper) {
      (0, assert_12.assertStruct)(value, exports.JsonRpcSuccessStruct, "Invalid JSON-RPC success response", ErrorWrapper);
    }
    exports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;
    function isJsonRpcFailure(value) {
      return (0, superstruct_12.is)(value, exports.JsonRpcFailureStruct);
    }
    exports.isJsonRpcFailure = isJsonRpcFailure;
    function assertIsJsonRpcFailure(value, ErrorWrapper) {
      (0, assert_12.assertStruct)(value, exports.JsonRpcFailureStruct, "Invalid JSON-RPC failure response", ErrorWrapper);
    }
    exports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;
    function isJsonRpcError(value) {
      return (0, superstruct_12.is)(value, exports.JsonRpcErrorStruct);
    }
    exports.isJsonRpcError = isJsonRpcError;
    function assertIsJsonRpcError(value, ErrorWrapper) {
      (0, assert_12.assertStruct)(value, exports.JsonRpcErrorStruct, "Invalid JSON-RPC error", ErrorWrapper);
    }
    exports.assertIsJsonRpcError = assertIsJsonRpcError;
    function getJsonRpcIdValidator(options) {
      const { permitEmptyString, permitFractions, permitNull } = {
        permitEmptyString: true,
        permitFractions: false,
        permitNull: true,
        ...options
      };
      const isValidJsonRpcId = (id2) => {
        return Boolean(typeof id2 === "number" && (permitFractions || Number.isInteger(id2)) || typeof id2 === "string" && (permitEmptyString || id2.length > 0) || permitNull && id2 === null);
      };
      return isValidJsonRpcId;
    }
    exports.getJsonRpcIdValidator = getJsonRpcIdValidator;
  })(json);
  var keyring = {};
  Object.defineProperty(keyring, "__esModule", { value: true });
  var logging = {};
  var browser = { exports: {} };
  var ms;
  var hasRequiredMs;
  function requireMs() {
    if (hasRequiredMs) return ms;
    hasRequiredMs = 1;
    var s2 = 1e3;
    var m = s2 * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    ms = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse2(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s2;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms2) {
      var msAbs = Math.abs(ms2);
      if (msAbs >= d) {
        return Math.round(ms2 / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms2 / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms2 / m) + "m";
      }
      if (msAbs >= s2) {
        return Math.round(ms2 / s2) + "s";
      }
      return ms2 + "ms";
    }
    function fmtLong(ms2) {
      var msAbs = Math.abs(ms2);
      if (msAbs >= d) {
        return plural(ms2, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms2, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms2, msAbs, m, "minute");
      }
      if (msAbs >= s2) {
        return plural(ms2, msAbs, s2, "second");
      }
      return ms2 + " ms";
    }
    function plural(ms2, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms2 / n) + " " + name + (isPlural ? "s" : "");
    }
    return ms;
  }
  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce2;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = requireMs();
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key2) => {
      createDebug[key2] = env[key2];
    });
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash2 = 0;
      for (let i2 = 0; i2 < namespace.length; i2++) {
        hash2 = (hash2 << 5) - hash2 + namespace.charCodeAt(i2);
        hash2 |= 0;
      }
      return createDebug.colors[Math.abs(hash2) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug2(...args) {
        if (!debug2.enabled) {
          return;
        }
        const self2 = debug2;
        const curr = Number(/* @__PURE__ */ new Date());
        const ms2 = curr - (prevTime || curr);
        self2.diff = ms2;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter = createDebug.formatters[format];
          if (typeof formatter === "function") {
            const val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self2, args);
        const logFn = self2.log || createDebug.log;
        logFn.apply(self2, args);
      }
      debug2.namespace = namespace;
      debug2.useColors = createDebug.useColors();
      debug2.color = createDebug.selectColor(namespace);
      debug2.extend = extend;
      debug2.destroy = createDebug.destroy;
      Object.defineProperty(debug2, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: (v) => {
          enableOverride = v;
        }
      });
      if (typeof createDebug.init === "function") {
        createDebug.init(debug2);
      }
      return debug2;
    }
    function extend(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      const split2 = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
      for (const ns of split2) {
        if (ns[0] === "-") {
          createDebug.skips.push(ns.slice(1));
        } else {
          createDebug.names.push(ns);
        }
      }
    }
    function matchesTemplate(search, template) {
      let searchIndex = 0;
      let templateIndex = 0;
      let starIndex = -1;
      let matchIndex = 0;
      while (searchIndex < search.length) {
        if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
          if (template[templateIndex] === "*") {
            starIndex = templateIndex;
            matchIndex = searchIndex;
            templateIndex++;
          } else {
            searchIndex++;
            templateIndex++;
          }
        } else if (starIndex !== -1) {
          templateIndex = starIndex + 1;
          matchIndex++;
          searchIndex = matchIndex;
        } else {
          return false;
        }
      }
      while (templateIndex < template.length && template[templateIndex] === "*") {
        templateIndex++;
      }
      return templateIndex === template.length;
    }
    function disable() {
      const namespaces = [
        ...createDebug.names,
        ...createDebug.skips.map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name) {
      for (const skip of createDebug.skips) {
        if (matchesTemplate(name, skip)) {
          return false;
        }
      }
      for (const ns of createDebug.names) {
        if (matchesTemplate(name, ns)) {
          return true;
        }
      }
      return false;
    }
    function coerce2(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    function destroy() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  var common = setup;
  (function(module, exports) {
    var define_process_env_default2 = {};
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error2) {
      }
    }
    function load() {
      let r2;
      try {
        r2 = exports.storage.getItem("debug");
      } catch (error2) {
      }
      if (!r2 && typeof process !== "undefined" && "env" in process) {
        r2 = define_process_env_default2.DEBUG;
      }
      return r2;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error2) {
      }
    }
    module.exports = common(exports);
    const { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error2) {
        return "[UnexpectedJSONParseError]: " + error2.message;
      }
    };
  })(browser, browser.exports);
  var browserExports = browser.exports;
  var __importDefault = globalThis && globalThis.__importDefault || function(mod2) {
    return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
  };
  Object.defineProperty(logging, "__esModule", { value: true });
  logging.createModuleLogger = logging.createProjectLogger = void 0;
  const debug_1 = __importDefault(browserExports);
  const globalLogger = (0, debug_1.default)("metamask");
  function createProjectLogger(projectName) {
    return globalLogger.extend(projectName);
  }
  logging.createProjectLogger = createProjectLogger;
  function createModuleLogger(projectLogger, moduleName) {
    return projectLogger.extend(moduleName);
  }
  logging.createModuleLogger = createModuleLogger;
  var number$1 = {};
  Object.defineProperty(number$1, "__esModule", { value: true });
  number$1.hexToBigInt = number$1.hexToNumber = number$1.bigIntToHex = number$1.numberToHex = void 0;
  const assert_1 = assert$2;
  const hex_1 = requireHex();
  const numberToHex = (value) => {
    (0, assert_1.assert)(typeof value === "number", "Value must be a number.");
    (0, assert_1.assert)(value >= 0, "Value must be a non-negative number.");
    (0, assert_1.assert)(Number.isSafeInteger(value), "Value is not a safe integer. Use `bigIntToHex` instead.");
    return (0, hex_1.add0x)(value.toString(16));
  };
  number$1.numberToHex = numberToHex;
  const bigIntToHex = (value) => {
    (0, assert_1.assert)(typeof value === "bigint", "Value must be a bigint.");
    (0, assert_1.assert)(value >= 0, "Value must be a non-negative bigint.");
    return (0, hex_1.add0x)(value.toString(16));
  };
  number$1.bigIntToHex = bigIntToHex;
  const hexToNumber = (value) => {
    (0, hex_1.assertIsHexString)(value);
    const numberValue = parseInt(value, 16);
    (0, assert_1.assert)(Number.isSafeInteger(numberValue), "Value is not a safe integer. Use `hexToBigInt` instead.");
    return numberValue;
  };
  number$1.hexToNumber = hexToNumber;
  const hexToBigInt = (value) => {
    (0, hex_1.assertIsHexString)(value);
    return BigInt((0, hex_1.add0x)(value));
  };
  number$1.hexToBigInt = hexToBigInt;
  var opaque = {};
  Object.defineProperty(opaque, "__esModule", { value: true });
  var promise = {};
  Object.defineProperty(promise, "__esModule", { value: true });
  promise.createDeferredPromise = void 0;
  function createDeferredPromise({ suppressUnhandledRejection = false } = {}) {
    let resolve;
    let reject;
    const promise2 = new Promise((innerResolve, innerReject) => {
      resolve = innerResolve;
      reject = innerReject;
    });
    if (suppressUnhandledRejection) {
      promise2.catch((_error) => {
      });
    }
    return { promise: promise2, resolve, reject };
  }
  promise.createDeferredPromise = createDeferredPromise;
  var time = {};
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timeSince = exports.inMilliseconds = exports.Duration = void 0;
    (function(Duration) {
      Duration[Duration["Millisecond"] = 1] = "Millisecond";
      Duration[Duration["Second"] = 1e3] = "Second";
      Duration[Duration["Minute"] = 6e4] = "Minute";
      Duration[Duration["Hour"] = 36e5] = "Hour";
      Duration[Duration["Day"] = 864e5] = "Day";
      Duration[Duration["Week"] = 6048e5] = "Week";
      Duration[Duration["Year"] = 31536e6] = "Year";
    })(exports.Duration || (exports.Duration = {}));
    const isNonNegativeInteger = (number2) => Number.isInteger(number2) && number2 >= 0;
    const assertIsNonNegativeInteger = (number2, name) => {
      if (!isNonNegativeInteger(number2)) {
        throw new Error(`"${name}" must be a non-negative integer. Received: "${number2}".`);
      }
    };
    function inMilliseconds(count, duration) {
      assertIsNonNegativeInteger(count, "count");
      return count * duration;
    }
    exports.inMilliseconds = inMilliseconds;
    function timeSince(timestamp) {
      assertIsNonNegativeInteger(timestamp, "timestamp");
      return Date.now() - timestamp;
    }
    exports.timeSince = timeSince;
  })(time);
  var transactionTypes = {};
  Object.defineProperty(transactionTypes, "__esModule", { value: true });
  var versions = {};
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;
    const superstruct_12 = dist$1;
    const semver_1 = semver;
    const assert_12 = assert$2;
    exports.VersionStruct = (0, superstruct_12.refine)((0, superstruct_12.string)(), "Version", (value) => {
      if ((0, semver_1.valid)(value) === null) {
        return `Expected SemVer version, got "${value}"`;
      }
      return true;
    });
    exports.VersionRangeStruct = (0, superstruct_12.refine)((0, superstruct_12.string)(), "Version range", (value) => {
      if ((0, semver_1.validRange)(value) === null) {
        return `Expected SemVer range, got "${value}"`;
      }
      return true;
    });
    function isValidSemVerVersion(version2) {
      return (0, superstruct_12.is)(version2, exports.VersionStruct);
    }
    exports.isValidSemVerVersion = isValidSemVerVersion;
    function isValidSemVerRange(versionRange) {
      return (0, superstruct_12.is)(versionRange, exports.VersionRangeStruct);
    }
    exports.isValidSemVerRange = isValidSemVerRange;
    function assertIsSemVerVersion(version2) {
      (0, assert_12.assertStruct)(version2, exports.VersionStruct);
    }
    exports.assertIsSemVerVersion = assertIsSemVerVersion;
    function assertIsSemVerRange(range2) {
      (0, assert_12.assertStruct)(range2, exports.VersionRangeStruct);
    }
    exports.assertIsSemVerRange = assertIsSemVerRange;
    function gtVersion(version1, version2) {
      return (0, semver_1.gt)(version1, version2);
    }
    exports.gtVersion = gtVersion;
    function gtRange(version2, range2) {
      return (0, semver_1.gtr)(version2, range2);
    }
    exports.gtRange = gtRange;
    function satisfiesVersionRange(version2, versionRange) {
      return (0, semver_1.satisfies)(version2, versionRange, {
        includePrerelease: true
      });
    }
    exports.satisfiesVersionRange = satisfiesVersionRange;
  })(versions);
  (function(exports) {
    var __createBinding2 = globalThis && globalThis.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = globalThis && globalThis.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(assert$2, exports);
    __exportStar(base64$1, exports);
    __exportStar(requireBytes(), exports);
    __exportStar(caipTypes, exports);
    __exportStar(checksum, exports);
    __exportStar(coercers, exports);
    __exportStar(collections, exports);
    __exportStar(encryptionTypes, exports);
    __exportStar(errors$1, exports);
    __exportStar(requireHex(), exports);
    __exportStar(json, exports);
    __exportStar(keyring, exports);
    __exportStar(logging, exports);
    __exportStar(misc, exports);
    __exportStar(number$1, exports);
    __exportStar(opaque, exports);
    __exportStar(promise, exports);
    __exportStar(superstruct, exports);
    __exportStar(time, exports);
    __exportStar(transactionTypes, exports);
    __exportStar(versions, exports);
  })(dist$2);
  Object.defineProperty(utils$3, "__esModule", { value: true });
  utils$3.normalize = utils$3.recoverPublicKey = utils$3.concatSig = utils$3.legacyToBuffer = utils$3.isNullish = utils$3.padWithZeroes = void 0;
  const util_1$2 = dist$4;
  const utils_1$7 = dist$2;
  function padWithZeroes(hexString, targetLength) {
    if (hexString !== "" && !/^[a-f0-9]+$/iu.test(hexString)) {
      throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);
    }
    if (targetLength < 0) {
      throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);
    }
    return String.prototype.padStart.call(hexString, targetLength, "0");
  }
  utils$3.padWithZeroes = padWithZeroes;
  function isNullish(value) {
    return value === null || value === void 0;
  }
  utils$3.isNullish = isNullish;
  function legacyToBuffer(value) {
    return typeof value === "string" && !(0, util_1$2.isHexString)(value) ? Buffer2.from(value) : (0, util_1$2.toBuffer)(value);
  }
  utils$3.legacyToBuffer = legacyToBuffer;
  function concatSig(v, r2, s2) {
    const rSig = (0, util_1$2.fromSigned)(r2);
    const sSig = (0, util_1$2.fromSigned)(s2);
    const vSig = (0, util_1$2.bufferToInt)(v);
    const rStr = padWithZeroes((0, util_1$2.toUnsigned)(rSig).toString("hex"), 64);
    const sStr = padWithZeroes((0, util_1$2.toUnsigned)(sSig).toString("hex"), 64);
    const vStr = (0, utils_1$7.remove0x)((0, utils_1$7.numberToHex)(vSig));
    return (0, utils_1$7.add0x)(rStr.concat(sStr, vStr));
  }
  utils$3.concatSig = concatSig;
  function recoverPublicKey(messageHash, signature2) {
    const sigParams = (0, util_1$2.fromRpcSig)(signature2);
    return (0, util_1$2.ecrecover)(messageHash, sigParams.v, sigParams.r, sigParams.s);
  }
  utils$3.recoverPublicKey = recoverPublicKey;
  function normalize(input) {
    if (isNullish(input)) {
      return void 0;
    }
    if (typeof input === "number") {
      if (input < 0) {
        return "0x";
      }
      const buffer2 = (0, utils_1$7.numberToBytes)(input);
      input = (0, utils_1$7.bytesToHex)(buffer2);
    }
    if (typeof input !== "string") {
      let msg = "eth-sig-util.normalize() requires hex string or integer input.";
      msg += ` received ${typeof input}: ${input}`;
      throw new Error(msg);
    }
    return (0, utils_1$7.add0x)(input.toLowerCase());
  }
  utils$3.normalize = normalize;
  Object.defineProperty(personalSign$1, "__esModule", { value: true });
  personalSign$1.extractPublicKey = personalSign$1.recoverPersonalSignature = personalSign$1.personalSign = void 0;
  const util_1$1 = dist$4;
  const utils_1$6 = utils$3;
  function personalSign({ privateKey, data }) {
    if ((0, utils_1$6.isNullish)(data)) {
      throw new Error("Missing data parameter");
    } else if ((0, utils_1$6.isNullish)(privateKey)) {
      throw new Error("Missing privateKey parameter");
    }
    const message = (0, utils_1$6.legacyToBuffer)(data);
    const msgHash = (0, util_1$1.hashPersonalMessage)(message);
    const sig = (0, util_1$1.ecsign)(msgHash, privateKey);
    const serialized = (0, utils_1$6.concatSig)((0, util_1$1.toBuffer)(sig.v), sig.r, sig.s);
    return serialized;
  }
  personalSign$1.personalSign = personalSign;
  function recoverPersonalSignature({ data, signature: signature2 }) {
    if ((0, utils_1$6.isNullish)(data)) {
      throw new Error("Missing data parameter");
    } else if ((0, utils_1$6.isNullish)(signature2)) {
      throw new Error("Missing signature parameter");
    }
    const publicKey = getPublicKeyFor(data, signature2);
    const sender = (0, util_1$1.publicToAddress)(publicKey);
    const senderHex = (0, util_1$1.bufferToHex)(sender);
    return senderHex;
  }
  personalSign$1.recoverPersonalSignature = recoverPersonalSignature;
  function extractPublicKey({ data, signature: signature2 }) {
    if ((0, utils_1$6.isNullish)(data)) {
      throw new Error("Missing data parameter");
    } else if ((0, utils_1$6.isNullish)(signature2)) {
      throw new Error("Missing signature parameter");
    }
    const publicKey = getPublicKeyFor(data, signature2);
    return `0x${publicKey.toString("hex")}`;
  }
  personalSign$1.extractPublicKey = extractPublicKey;
  function getPublicKeyFor(message, signature2) {
    const messageHash = (0, util_1$1.hashPersonalMessage)((0, utils_1$6.legacyToBuffer)(message));
    return (0, utils_1$6.recoverPublicKey)(messageHash, signature2);
  }
  var signTypedData = {};
  var dist = {};
  var abi$1 = {};
  var errors = {};
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParserError = exports.getErrorStack = exports.getErrorMessage = void 0;
    const utils_12 = dist$2;
    const getErrorMessage2 = (error2) => {
      if (typeof error2 === "string") {
        return error2;
      }
      if (error2 instanceof Error) {
        return error2.message;
      }
      if ((0, utils_12.isObject)(error2) && (0, utils_12.hasProperty)(error2, "message") && typeof error2.message === "string") {
        return error2.message;
      }
      return "Unknown error.";
    };
    exports.getErrorMessage = getErrorMessage2;
    const getErrorStack = (error2) => {
      if (error2 instanceof Error) {
        return error2.stack;
      }
      return void 0;
    };
    exports.getErrorStack = getErrorStack;
    class ParserError extends Error {
      constructor(message, originalError) {
        super(message);
        this.name = "ParserError";
        const originalStack = (0, exports.getErrorStack)(originalError);
        if (originalStack) {
          this.stack = originalStack;
        }
      }
    }
    exports.ParserError = ParserError;
  })(errors);
  var packer = {};
  var iterator = {};
  Object.defineProperty(iterator, "__esModule", { value: true });
  iterator.iterate = void 0;
  const utils_1$5 = dist$2;
  const iterate = function* (buffer2, size2 = 32) {
    for (let pointer = 0; pointer < buffer2.length; pointer += size2) {
      const skip = (length) => {
        (0, utils_1$5.assert)(length >= 0, "Cannot skip a negative number of bytes.");
        (0, utils_1$5.assert)(length % size2 === 0, "Length must be a multiple of the size.");
        pointer += length;
      };
      const value = buffer2.subarray(pointer);
      yield { skip, value };
    }
    return {
      skip: () => void 0,
      value: new Uint8Array()
    };
  };
  iterator.iterate = iterate;
  var parsers = {};
  var address = {};
  var utils = {};
  var buffer = {};
  Object.defineProperty(buffer, "__esModule", { value: true });
  buffer.padEnd = buffer.padStart = buffer.set = void 0;
  const utils_1$4 = dist$2;
  const BUFFER_WIDTH = 32;
  const set = (target, buffer2, position) => {
    return (0, utils_1$4.concatBytes)([
      target.subarray(0, position),
      buffer2,
      target.subarray(position + buffer2.length)
    ]);
  };
  buffer.set = set;
  const padStart = (buffer2, length = BUFFER_WIDTH) => {
    const padding = new Uint8Array(Math.max(length - buffer2.length, 0)).fill(0);
    return (0, utils_1$4.concatBytes)([padding, buffer2]);
  };
  buffer.padStart = padStart;
  const padEnd = (buffer2, length = BUFFER_WIDTH) => {
    const padding = new Uint8Array(Math.max(length - buffer2.length, 0)).fill(0);
    return (0, utils_1$4.concatBytes)([buffer2, padding]);
  };
  buffer.padEnd = padEnd;
  (function(exports) {
    var __createBinding2 = globalThis && globalThis.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = globalThis && globalThis.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(buffer, exports);
  })(utils);
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.address = exports.getAddress = void 0;
    const utils_12 = dist$2;
    const errors_12 = errors;
    const utils_22 = utils;
    const getAddress2 = (value) => {
      const bytesValue = (0, utils_12.createBytes)(value);
      (0, utils_12.assert)(bytesValue.length <= 20, new errors_12.ParserError(`Invalid address value. Expected address to be 20 bytes long, but received ${bytesValue.length} bytes.`));
      return (0, utils_22.padStart)(bytesValue, 20);
    };
    exports.getAddress = getAddress2;
    exports.address = {
      isDynamic: false,
      /**
       * Get if the given value is a valid address type. Since `address` is a simple
       * type, this is just a check that the value is "address".
       *
       * @param type - The type to check.
       * @returns Whether the type is a valid address type.
       */
      isType: (type) => type === "address",
      /**
       * Get the byte length of an encoded address. Since `address` is a simple
       * type, this always returns 32.
       *
       * Note that actual addresses are only 20 bytes long, but the encoding of
       * the `address` type is always 32 bytes long.
       *
       * @returns The byte length of an encoded address.
       */
      getByteLength() {
        return 32;
      },
      /**
       * Encode the given address to a 32-byte-long byte array.
       *
       * @param args - The encoding arguments.
       * @param args.buffer - The byte array to add to.
       * @param args.value - The address to encode.
       * @param args.packed - Whether to use packed encoding.
       * @returns The bytes with the encoded address added to it.
       */
      encode({ buffer: buffer2, value, packed }) {
        const addressValue = (0, exports.getAddress)(value);
        if (packed) {
          return (0, utils_12.concatBytes)([buffer2, addressValue]);
        }
        const addressBuffer = (0, utils_22.padStart)(addressValue);
        return (0, utils_12.concatBytes)([buffer2, addressBuffer]);
      },
      /**
       * Decode the given byte array to an address.
       *
       * @param args - The decoding arguments.
       * @param args.value - The byte array to decode.
       * @returns The decoded address as a hexadecimal string, starting with the
       * "0x"-prefix.
       */
      decode({ value }) {
        return (0, utils_12.add0x)((0, utils_12.bytesToHex)(value.slice(12, 32)));
      }
    };
  })(address);
  var array = {};
  var fixedBytes = {};
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fixedBytes = exports.getByteLength = void 0;
    const utils_12 = dist$2;
    const errors_12 = errors;
    const utils_22 = utils;
    const BYTES_REGEX = /^bytes([0-9]{1,2})$/u;
    const getByteLength = (type) => {
      const bytes2 = type.match(BYTES_REGEX)?.[1];
      (0, utils_12.assert)(bytes2, `Invalid byte length. Expected a number between 1 and 32, but received "${type}".`);
      const length = Number(bytes2);
      (0, utils_12.assert)(length > 0 && length <= 32, new errors_12.ParserError(`Invalid byte length. Expected a number between 1 and 32, but received "${type}".`));
      return length;
    };
    exports.getByteLength = getByteLength;
    exports.fixedBytes = {
      isDynamic: false,
      /**
       * Check if a type is a fixed bytes type.
       *
       * @param type - The type to check.
       * @returns Whether the type is a fixed bytes type.
       */
      isType(type) {
        return BYTES_REGEX.test(type);
      },
      /**
       * Get the byte length of an encoded fixed bytes type.
       *
       * @returns The byte length of the type.
       */
      getByteLength() {
        return 32;
      },
      /**
       * Encode a fixed bytes value.
       *
       * @param args - The arguments to encode.
       * @param args.type - The type of the value.
       * @param args.buffer - The byte array to add to.
       * @param args.value - The value to encode.
       * @param args.packed - Whether to use packed encoding.
       * @returns The bytes with the encoded value added to it.
       */
      encode({ type, buffer: buffer2, value, packed }) {
        const length = (0, exports.getByteLength)(type);
        const bufferValue = (0, utils_12.createBytes)(value);
        (0, utils_12.assert)(bufferValue.length <= length, new errors_12.ParserError(`Expected a value of length ${length}, but received a value of length ${bufferValue.length}.`));
        if (packed) {
          return (0, utils_12.concatBytes)([buffer2, (0, utils_22.padEnd)(bufferValue, length)]);
        }
        return (0, utils_12.concatBytes)([buffer2, (0, utils_22.padEnd)(bufferValue)]);
      },
      /**
       * Decode a fixed bytes value.
       *
       * @param args - The arguments to decode.
       * @param args.type - The type of the value.
       * @param args.value - The value to decode.
       * @returns The decoded value as a `Uint8Array`.
       */
      decode({ type, value }) {
        const length = (0, exports.getByteLength)(type);
        return value.slice(0, length);
      }
    };
  })(fixedBytes);
  var tuple = {};
  var hasRequiredTuple;
  function requireTuple() {
    if (hasRequiredTuple) return tuple;
    hasRequiredTuple = 1;
    (function(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.tuple = exports.getTupleElements = void 0;
      const utils_12 = dist$2;
      const errors_12 = errors;
      const packer_1 = requirePacker();
      const TUPLE_REGEX = /^\((.+)\)$/u;
      const isTupleType = (type) => TUPLE_REGEX.test(type);
      const getTupleElements = (type) => {
        (0, utils_12.assert)(type.startsWith("(") && type.endsWith(")"), new errors_12.ParserError(`Invalid tuple type. Expected tuple type, but received "${type}".`));
        const elements = [];
        let current = "";
        let depth = 0;
        for (let i2 = 1; i2 < type.length - 1; i2++) {
          const char = type[i2];
          if (char === "," && depth === 0) {
            elements.push(current.trim());
            current = "";
          } else {
            current += char;
            if (char === "(") {
              depth += 1;
            } else if (char === ")") {
              depth -= 1;
            }
          }
        }
        if (current.trim()) {
          elements.push(current.trim());
        }
        return elements;
      };
      exports.getTupleElements = getTupleElements;
      exports.tuple = {
        /**
         * Check if the tuple is dynamic. Tuples are dynamic if one or more elements
         * of the tuple are dynamic.
         *
         * @param type - The type to check.
         * @returns Whether the tuple is dynamic.
         */
        isDynamic(type) {
          const elements = (0, exports.getTupleElements)(type);
          return elements.some((element) => {
            const parser2 = (0, packer_1.getParser)(element);
            return (0, packer_1.isDynamicParser)(parser2, element);
          });
        },
        /**
         * Check if a type is a tuple type.
         *
         * @param type - The type to check.
         * @returns Whether the type is a tuple type.
         */
        isType(type) {
          return isTupleType(type);
        },
        /**
         * Get the byte length of a tuple type. If the tuple is dynamic, this will
         * always return 32. If the tuple is static, this will return the sum of the
         * byte lengths of the tuple elements.
         *
         * @param type - The type to get the byte length for.
         * @returns The byte length of the tuple type.
         */
        getByteLength(type) {
          if ((0, packer_1.isDynamicParser)(this, type)) {
            return 32;
          }
          const elements = (0, exports.getTupleElements)(type);
          return elements.reduce((total, element) => {
            return total + (0, packer_1.getParser)(element).getByteLength(element);
          }, 0);
        },
        /**
         * Encode a tuple value.
         *
         * @param args - The encoding arguments.
         * @param args.type - The type of the value.
         * @param args.buffer - The byte array to add to.
         * @param args.value - The value to encode.
         * @param args.packed - Whether to use non-standard packed encoding.
         * @param args.tight - Whether to use non-standard tight encoding.
         * @returns The bytes with the encoded value added to it.
         */
        encode({ type, buffer: buffer2, value, packed, tight }) {
          const elements = (0, exports.getTupleElements)(type);
          return (0, packer_1.pack)({
            types: elements,
            values: value,
            byteArray: buffer2,
            packed,
            tight
          });
        },
        /**
         * Decode a tuple value.
         *
         * @param args - The decoding arguments.
         * @param args.type - The type of the value.
         * @param args.value - The value to decode.
         * @param args.skip - A function to skip a number of bytes.
         * @returns The decoded value.
         */
        decode({ type, value, skip }) {
          const elements = (0, exports.getTupleElements)(type);
          const length = this.getByteLength(type) - 32;
          skip(length);
          return (0, packer_1.unpack)(elements, value);
        }
      };
    })(tuple);
    return tuple;
  }
  var hasRequiredArray;
  function requireArray() {
    if (hasRequiredArray) return array;
    hasRequiredArray = 1;
    (function(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.array = exports.getTupleType = exports.getArrayType = exports.isArrayType = void 0;
      const utils_12 = dist$2;
      const errors_12 = errors;
      const packer_1 = requirePacker();
      const utils_22 = utils;
      const fixed_bytes_1 = fixedBytes;
      const tuple_1 = requireTuple();
      const ARRAY_REGEX = /^(?<type>.*)\[(?<length>\d*?)\]$/u;
      const isArrayType = (type) => ARRAY_REGEX.test(type);
      exports.isArrayType = isArrayType;
      const getArrayType = (type) => {
        const match = type.match(ARRAY_REGEX);
        (0, utils_12.assert)(match?.groups?.type, new errors_12.ParserError(`Invalid array type. Expected an array type, but received "${type}".`));
        return [
          match.groups.type,
          match.groups.length ? parseInt(match.groups.length, 10) : void 0
        ];
      };
      exports.getArrayType = getArrayType;
      const getTupleType = (innerType, length) => {
        return `(${new Array(length).fill(innerType).join(",")})`;
      };
      exports.getTupleType = getTupleType;
      exports.array = {
        /**
         * Check if the array is dynamic. Arrays are dynamic if the array does not
         * have a fixed length, or if the array type is dynamic.
         *
         * @param type - The type to check.
         * @returns Whether the array is dynamic.
         */
        isDynamic(type) {
          const [innerType, length] = (0, exports.getArrayType)(type);
          return (
            // `T[]` is dynamic for any `T`. `T[k]` is dynamic for any dynamic `T` and
            // any `k >= 0`.
            length === void 0 || (0, packer_1.isDynamicParser)((0, packer_1.getParser)(innerType), innerType)
          );
        },
        /**
         * Check if a type is an array type.
         *
         * @param type - The type to check.
         * @returns Whether the type is an array type.
         */
        isType(type) {
          return (0, exports.isArrayType)(type);
        },
        /**
         * Get the byte length of an encoded array. If the array is dynamic, this
         * returns 32, i.e., the length of the pointer to the array. If the array is
         * static, this returns the byte length of the resulting tuple type.
         *
         * @param type - The type to get the byte length for.
         * @returns The byte length of an encoded array.
         */
        getByteLength(type) {
          (0, utils_12.assert)((0, exports.isArrayType)(type), new errors_12.ParserError(`Expected an array type, but received "${type}".`));
          const [innerType, length] = (0, exports.getArrayType)(type);
          if (!(0, packer_1.isDynamicParser)(this, type) && length !== void 0) {
            return tuple_1.tuple.getByteLength((0, exports.getTupleType)(innerType, length));
          }
          return 32;
        },
        /**
         * Encode the given array to a byte array. If the array is static, this uses
         * the tuple encoder.
         *
         * @param args - The encoding arguments.
         * @param args.type - The type of the array.
         * @param args.buffer - The byte array to add to.
         * @param args.value - The array to encode.
         * @param args.packed - Whether to use non-standard packed encoding.
         * @param args.tight - Whether to use non-standard tight encoding.
         * @returns The bytes with the encoded array added to it.
         */
        encode({ type, buffer: buffer2, value, packed, tight }) {
          const [arrayType, fixedLength] = (0, exports.getArrayType)(type);
          (0, utils_12.assert)(!packed || !(0, exports.isArrayType)(arrayType), new errors_12.ParserError(`Cannot pack nested arrays.`));
          if (packed && (0, packer_1.isDynamicParser)((0, packer_1.getParser)(arrayType), arrayType)) {
            return (0, packer_1.pack)({
              types: new Array(value.length).fill(arrayType),
              values: value,
              byteArray: buffer2,
              packed,
              arrayPacked: true,
              tight
            });
          }
          if (fixedLength) {
            (0, utils_12.assert)(fixedLength === value.length, new errors_12.ParserError(`Array length does not match type length. Expected a length of ${fixedLength}, but received ${value.length}.`));
            return tuple_1.tuple.encode({
              type: (0, exports.getTupleType)(arrayType, fixedLength),
              buffer: buffer2,
              value,
              // In "tight" mode, we don't pad the values to 32 bytes if the value is
              // of type `bytesN`. This is an edge case in `ethereumjs-abi` that we
              // support to provide compatibility with it.
              packed: fixed_bytes_1.fixedBytes.isType(arrayType) && tight,
              tight
            });
          }
          if (packed) {
            return (0, packer_1.pack)({
              types: new Array(value.length).fill(arrayType),
              values: value,
              byteArray: buffer2,
              // In "tight" mode, we don't pad the values to 32 bytes if the value is
              // of type `bytesN`. This is an edge case in `ethereumjs-abi` that we
              // support to provide compatibility with it.
              packed: fixed_bytes_1.fixedBytes.isType(arrayType) && tight,
              arrayPacked: true,
              tight
            });
          }
          const arrayLength = (0, utils_22.padStart)((0, utils_12.numberToBytes)(value.length));
          return (0, packer_1.pack)({
            types: new Array(value.length).fill(arrayType),
            values: value,
            byteArray: (0, utils_12.concatBytes)([buffer2, arrayLength]),
            packed,
            tight
          });
        },
        /**
         * Decode an array from the given byte array.
         *
         * @param args - The decoding arguments.
         * @param args.type - The type of the array.
         * @param args.value - The byte array to decode.
         * @returns The decoded array.
         */
        decode({ type, value, ...rest }) {
          const [arrayType, fixedLength] = (0, exports.getArrayType)(type);
          if (fixedLength) {
            const result = tuple_1.tuple.decode({
              type: (0, exports.getTupleType)(arrayType, fixedLength),
              value,
              ...rest
            });
            (0, utils_12.assert)(result.length === fixedLength, new errors_12.ParserError(`Array length does not match type length. Expected a length of ${fixedLength}, but received ${result.length}.`));
            return result;
          }
          const arrayLength = (0, utils_12.bytesToNumber)(value.subarray(0, 32));
          return (0, packer_1.unpack)(new Array(arrayLength).fill(arrayType), value.subarray(32));
        }
      };
    })(array);
    return array;
  }
  var bool = {};
  var number = {};
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.number = exports.getBigInt = exports.assertNumberLength = exports.getLength = exports.isSigned = void 0;
    const utils_12 = dist$2;
    const errors_12 = errors;
    const utils_22 = utils;
    const NUMBER_REGEX = /^u?int(?<length>[0-9]*)?$/u;
    const isSigned = (type) => {
      return !type.startsWith("u");
    };
    exports.isSigned = isSigned;
    const getLength2 = (type) => {
      if (type === "int" || type === "uint") {
        return 256;
      }
      const match = type.match(NUMBER_REGEX);
      (0, utils_12.assert)(match?.groups?.length, new errors_12.ParserError(`Invalid number type. Expected a number type, but received "${type}".`));
      const length = parseInt(match.groups.length, 10);
      (0, utils_12.assert)(length >= 8 && length <= 256, new errors_12.ParserError(`Invalid number length. Expected a number between 8 and 256, but received "${type}".`));
      (0, utils_12.assert)(length % 8 === 0, new errors_12.ParserError(`Invalid number length. Expected a multiple of 8, but received "${type}".`));
      return length;
    };
    exports.getLength = getLength2;
    const assertNumberLength = (value, type) => {
      const length = (0, exports.getLength)(type);
      const maxValue = BigInt(2) ** BigInt(length - ((0, exports.isSigned)(type) ? 1 : 0)) - BigInt(1);
      if ((0, exports.isSigned)(type)) {
        (0, utils_12.assert)(value >= -(maxValue + BigInt(1)) && value <= maxValue, new errors_12.ParserError(`Number "${value}" is out of range for type "${type}".`));
        return;
      }
      (0, utils_12.assert)(value <= maxValue, new errors_12.ParserError(`Number "${value}" is out of range for type "${type}".`));
    };
    exports.assertNumberLength = assertNumberLength;
    const getBigInt = (value) => {
      try {
        return (0, utils_12.createBigInt)(value);
      } catch {
        throw new errors_12.ParserError(`Invalid number. Expected a valid number value, but received "${value}".`);
      }
    };
    exports.getBigInt = getBigInt;
    exports.number = {
      isDynamic: false,
      /**
       * Check if a type is a number type.
       *
       * @param type - The type to check.
       * @returns Whether the type is a number type.
       */
      isType(type) {
        return NUMBER_REGEX.test(type);
      },
      /**
       * Get the byte length of an encoded number type. Since `int` and `uint` are
       * simple types, this will always return 32.
       *
       * @returns The byte length of the type.
       */
      getByteLength() {
        return 32;
      },
      /**
       * Encode a number value.
       *
       * @param args - The arguments to encode.
       * @param args.type - The type of the value.
       * @param args.buffer - The byte array to add to.
       * @param args.value - The value to encode.
       * @param args.packed - Whether to use packed encoding.
       * @returns The bytes with the encoded value added to it.
       */
      encode({ type, buffer: buffer2, value, packed }) {
        const bigIntValue = (0, exports.getBigInt)(value);
        (0, exports.assertNumberLength)(bigIntValue, type);
        if ((0, exports.isSigned)(type)) {
          if (packed) {
            const length = (0, exports.getLength)(type) / 8;
            return (0, utils_12.concatBytes)([buffer2, (0, utils_12.signedBigIntToBytes)(bigIntValue, length)]);
          }
          return (0, utils_12.concatBytes)([
            buffer2,
            (0, utils_22.padStart)((0, utils_12.signedBigIntToBytes)(bigIntValue, 32))
          ]);
        }
        if (packed) {
          const length = (0, exports.getLength)(type) / 8;
          return (0, utils_12.concatBytes)([
            buffer2,
            (0, utils_22.padStart)((0, utils_12.bigIntToBytes)(bigIntValue), length)
          ]);
        }
        return (0, utils_12.concatBytes)([buffer2, (0, utils_22.padStart)((0, utils_12.bigIntToBytes)(bigIntValue))]);
      },
      /**
       * Decode a number value.
       *
       * @param args - The decoding arguments.
       * @param args.type - The type of the value.
       * @param args.value - The value to decode.
       * @returns The decoded value.
       */
      decode({ type, value }) {
        const buffer2 = value.subarray(0, 32);
        if ((0, exports.isSigned)(type)) {
          const numberValue2 = (0, utils_12.bytesToSignedBigInt)(buffer2);
          (0, exports.assertNumberLength)(numberValue2, type);
          return numberValue2;
        }
        const numberValue = (0, utils_12.bytesToBigInt)(buffer2);
        (0, exports.assertNumberLength)(numberValue, type);
        return numberValue;
      }
    };
  })(number);
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bool = exports.getBooleanValue = void 0;
    const superstruct_12 = dist$1;
    const utils_12 = dist$2;
    const errors_12 = errors;
    const number_1 = number;
    const BooleanCoercer = (0, superstruct_12.coerce)((0, superstruct_12.boolean)(), (0, superstruct_12.union)([(0, superstruct_12.literal)("true"), (0, superstruct_12.literal)("false")]), (value) => value === "true");
    const getBooleanValue = (value) => {
      try {
        const booleanValue = (0, superstruct_12.create)(value, BooleanCoercer);
        if (booleanValue) {
          return BigInt(1);
        }
        return BigInt(0);
      } catch {
        throw new errors_12.ParserError(`Invalid boolean value. Expected a boolean literal, or the string "true" or "false", but received "${value}".`);
      }
    };
    exports.getBooleanValue = getBooleanValue;
    exports.bool = {
      isDynamic: false,
      /**
       * Get if the given value is a valid boolean type. Since `bool` is a simple
       * type, this is just a check that the value is "bool".
       *
       * @param type - The type to check.
       * @returns Whether the type is a valid boolean type.
       */
      isType: (type) => type === "bool",
      /**
       * Get the byte length of an encoded boolean. Since `bool` is a simple
       * type, this always returns 32.
       *
       * Note that actual booleans are only 1 byte long, but the encoding of
       * the `bool` type is always 32 bytes long.
       *
       * @returns The byte length of an encoded boolean.
       */
      getByteLength() {
        return 32;
      },
      /**
       * Encode the given boolean to a byte array.
       *
       * @param args - The encoding arguments.
       * @param args.buffer - The byte array to add to.
       * @param args.value - The boolean to encode.
       * @param args.packed - Whether the value is packed.
       * @param args.tight - Whether to use non-standard tight encoding.
       * @returns The bytes with the encoded boolean added to it.
       */
      encode({ buffer: buffer2, value, packed, tight }) {
        const booleanValue = (0, exports.getBooleanValue)(value);
        if (packed) {
          return (0, utils_12.concatBytes)([buffer2, (0, utils_12.bigIntToBytes)(booleanValue)]);
        }
        return number_1.number.encode({
          type: "uint256",
          buffer: buffer2,
          value: booleanValue,
          packed,
          tight
        });
      },
      /**
       * Decode the given byte array to a boolean.
       *
       * @param args - The decoding arguments.
       * @returns The decoded boolean.
       */
      decode(args) {
        return number_1.number.decode({ ...args, type: "uint256" }) === BigInt(1);
      }
    };
  })(bool);
  var bytes = {};
  Object.defineProperty(bytes, "__esModule", { value: true });
  bytes.bytes = void 0;
  const utils_1$3 = dist$2;
  const utils_2$1 = utils;
  bytes.bytes = {
    isDynamic: true,
    /**
     * Check if a type is a bytes type. Since `bytes` is a simple type, this is
     * just a check that the type is "bytes".
     *
     * @param type - The type to check.
     * @returns Whether the type is a bytes type.
     */
    isType: (type) => type === "bytes",
    /**
     * Get the byte length of an encoded bytes value. Since `bytes` is a simple
     * type, this always returns 32.
     *
     * Note that actual length of a bytes value is variable, but the encoded
     * static value (pointer) is always 32 bytes long.
     *
     * @returns The byte length of an encoded bytes value.
     */
    getByteLength() {
      return 32;
    },
    /**
     * Encode the given bytes value to a byte array.
     *
     * @param args - The encoding arguments.
     * @param args.buffer - The byte array to add to.
     * @param args.value - The bytes value to encode.
     * @param args.packed - Whether to use packed encoding.
     * @returns The bytes with the encoded bytes value added to it.
     */
    encode({ buffer: buffer2, value, packed }) {
      const bufferValue = (0, utils_1$3.createBytes)(value);
      if (packed) {
        return (0, utils_1$3.concatBytes)([buffer2, bufferValue]);
      }
      const paddedSize = Math.ceil(bufferValue.byteLength / 32) * 32;
      return (0, utils_1$3.concatBytes)([
        buffer2,
        (0, utils_2$1.padStart)((0, utils_1$3.numberToBytes)(bufferValue.byteLength)),
        (0, utils_2$1.padEnd)(bufferValue, paddedSize)
      ]);
    },
    /**
     * Decode the given byte array to a bytes value.
     *
     * @param args - The decoding arguments.
     * @param args.value - The byte array to decode.
     * @returns The decoded bytes value as a `Uint8Array`.
     */
    decode({ value }) {
      const bytesValue = value.subarray(0, 32);
      const length = (0, utils_1$3.bytesToNumber)(bytesValue);
      return value.slice(32, 32 + length);
    }
  };
  var _function = {};
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fn = exports.getFunction = void 0;
    const superstruct_12 = dist$1;
    const utils_12 = dist$2;
    const errors_12 = errors;
    const fixed_bytes_1 = fixedBytes;
    const FunctionStruct = (0, superstruct_12.coerce)((0, superstruct_12.object)({
      address: utils_12.StrictHexStruct,
      selector: utils_12.StrictHexStruct
    }), (0, superstruct_12.union)([utils_12.StrictHexStruct, (0, superstruct_12.instance)(Uint8Array)]), (value) => {
      const bytes2 = (0, utils_12.createBytes)(value);
      (0, utils_12.assert)(bytes2.length === 24, new errors_12.ParserError(`Invalid Solidity function. Expected function to be 24 bytes long, but received ${bytes2.length} bytes.`));
      return {
        address: (0, utils_12.bytesToHex)(bytes2.subarray(0, 20)),
        selector: (0, utils_12.bytesToHex)(bytes2.subarray(20, 24))
      };
    });
    const getFunction = (input) => {
      const value = (0, superstruct_12.create)(input, FunctionStruct);
      return (0, utils_12.concatBytes)([(0, utils_12.hexToBytes)(value.address), (0, utils_12.hexToBytes)(value.selector)]);
    };
    exports.getFunction = getFunction;
    exports.fn = {
      isDynamic: false,
      /**
       * Check if a type is a function type. Since `function` is a simple type, this
       * is just a check that the type is "function".
       *
       * @param type - The type to check.
       * @returns Whether the type is a function type.
       */
      isType: (type) => type === "function",
      /**
       * Get the byte length of an encoded function. Since `function` is a simple
       * type, this always returns 32.
       *
       * Note that actual functions are only 24 bytes long, but the encoding of
       * the `function` type is always 32 bytes long.
       *
       * @returns The byte length of an encoded function.
       */
      getByteLength() {
        return 32;
      },
      /**
       * Encode the given function to a byte array.
       *
       * @param args - The encoding arguments.
       * @param args.buffer - The byte array to add to.
       * @param args.value - The function to encode.
       * @param args.packed - Whether to use packed encoding.
       * @param args.tight - Whether to use non-standard tight encoding.
       * @returns The bytes with the encoded function added to it.
       */
      encode({ buffer: buffer2, value, packed, tight }) {
        const fnValue = (0, exports.getFunction)(value);
        return fixed_bytes_1.fixedBytes.encode({
          type: "bytes24",
          buffer: buffer2,
          value: fnValue,
          packed,
          tight
        });
      },
      /**
       * Decode the given byte array to a function.
       *
       * @param args - The decoding arguments.
       * @param args.value - The byte array to decode.
       * @returns The decoded function as a {@link SolidityFunction} object.
       */
      decode({ value }) {
        return {
          address: (0, utils_12.bytesToHex)(value.slice(0, 20)),
          selector: (0, utils_12.bytesToHex)(value.slice(20, 24))
        };
      }
    };
  })(_function);
  var parser = {};
  Object.defineProperty(parser, "__esModule", { value: true });
  var string = {};
  Object.defineProperty(string, "__esModule", { value: true });
  string.string = void 0;
  const utils_1$2 = dist$2;
  const bytes_1 = bytes;
  string.string = {
    isDynamic: true,
    /**
     * Check if a type is a string type. Since `string` is a simple type, this
     * is just a check if the type is "string".
     *
     * @param type - The type to check.
     * @returns Whether the type is a string type.
     */
    isType: (type) => type === "string",
    /**
     * Get the byte length of an encoded string type. Since `string` is a simple
     * type, this will always return 32.
     *
     * Note that actual strings are variable in length, but the encoded static
     * value (pointer) is always 32 bytes long.
     *
     * @returns The byte length of an encoded string.
     */
    getByteLength() {
      return 32;
    },
    /**
     * Encode the given string value to a byte array.
     *
     * @param args - The encoding arguments.
     * @param args.buffer - The byte array to add to.
     * @param args.value - The string value to encode.
     * @param args.packed - Whether to use packed encoding.
     * @param args.tight - Whether to use non-standard tight encoding.
     * @returns The bytes with the encoded string value added to it.
     */
    encode({ buffer: buffer2, value, packed, tight }) {
      return bytes_1.bytes.encode({
        type: "bytes",
        buffer: buffer2,
        value: (0, utils_1$2.stringToBytes)(value),
        packed,
        tight
      });
    },
    /**
     * Decode the given byte array to a string value.
     *
     * @param args - The decoding arguments.
     * @returns The decoded string value.
     */
    decode(args) {
      return (0, utils_1$2.bytesToString)(bytes_1.bytes.decode(args));
    }
  };
  var hasRequiredParsers;
  function requireParsers() {
    if (hasRequiredParsers) return parsers;
    hasRequiredParsers = 1;
    (function(exports) {
      var __createBinding2 = globalThis && globalThis.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = globalThis && globalThis.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(address, exports);
      __exportStar(requireArray(), exports);
      __exportStar(bool, exports);
      __exportStar(bytes, exports);
      __exportStar(fixedBytes, exports);
      __exportStar(_function, exports);
      __exportStar(number, exports);
      __exportStar(parser, exports);
      __exportStar(string, exports);
      __exportStar(requireTuple(), exports);
    })(parsers);
    return parsers;
  }
  var hasRequiredPacker;
  function requirePacker() {
    if (hasRequiredPacker) return packer;
    hasRequiredPacker = 1;
    (function(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.unpack = exports.pack = exports.isDynamicParser = exports.getParser = void 0;
      const utils_12 = dist$2;
      const errors_12 = errors;
      const iterator_1 = iterator;
      const parsers_1 = requireParsers();
      const utils_22 = utils;
      const getParser = (type) => {
        const parsers2 = {
          address: parsers_1.address,
          array: parsers_1.array,
          bool: parsers_1.bool,
          bytes: parsers_1.bytes,
          fixedBytes: parsers_1.fixedBytes,
          function: parsers_1.fn,
          number: parsers_1.number,
          string: parsers_1.string,
          tuple: parsers_1.tuple
        };
        const staticParser = parsers2[type];
        if (staticParser) {
          return staticParser;
        }
        const parser2 = Object.values(parsers2).find((value) => value.isType(type));
        if (parser2) {
          return parser2;
        }
        throw new errors_12.ParserError(`The type "${type}" is not supported.`);
      };
      exports.getParser = getParser;
      const isDynamicParser = (parser2, type) => {
        const { isDynamic } = parser2;
        if (typeof isDynamic === "function") {
          return isDynamic(type);
        }
        return isDynamic;
      };
      exports.isDynamicParser = isDynamicParser;
      const pack2 = ({ types: types2, values, packed = false, tight = false, arrayPacked = false, byteArray = new Uint8Array() }) => {
        (0, utils_12.assert)(types2.length === values.length, new errors_12.ParserError(`The number of types (${types2.length}) does not match the number of values (${values.length}).`));
        const { staticBuffer, dynamicBuffer, pointers } = types2.reduce(
          // eslint-disable-next-line @typescript-eslint/no-shadow
          ({ staticBuffer: staticBuffer2, dynamicBuffer: dynamicBuffer2, pointers: pointers2 }, type, index) => {
            const parser2 = (0, exports.getParser)(type);
            const value = values[index];
            if (packed || arrayPacked || !(0, exports.isDynamicParser)(parser2, type)) {
              return {
                staticBuffer: parser2.encode({
                  buffer: staticBuffer2,
                  value,
                  type,
                  packed,
                  tight
                }),
                dynamicBuffer: dynamicBuffer2,
                pointers: pointers2
              };
            }
            const newStaticBuffer = (0, utils_12.concatBytes)([staticBuffer2, new Uint8Array(32)]);
            const newDynamicBuffer = parser2.encode({
              buffer: dynamicBuffer2,
              value,
              type,
              packed,
              tight
            });
            return {
              staticBuffer: newStaticBuffer,
              dynamicBuffer: newDynamicBuffer,
              pointers: [
                ...pointers2,
                { position: staticBuffer2.length, pointer: dynamicBuffer2.length }
              ]
            };
          },
          {
            staticBuffer: new Uint8Array(),
            dynamicBuffer: new Uint8Array(),
            pointers: []
          }
        );
        (0, utils_12.assert)(!packed && !arrayPacked || dynamicBuffer.length === 0, new errors_12.ParserError("Invalid pack state."));
        const dynamicStart = staticBuffer.length;
        const updatedBuffer = pointers.reduce((target, { pointer, position }) => {
          const offset = (0, utils_22.padStart)((0, utils_12.numberToBytes)(dynamicStart + pointer));
          return (0, utils_22.set)(target, offset, position);
        }, staticBuffer);
        return (0, utils_12.concatBytes)([byteArray, updatedBuffer, dynamicBuffer]);
      };
      exports.pack = pack2;
      const unpack2 = (types2, buffer2) => {
        const iterator2 = (0, iterator_1.iterate)(buffer2);
        return types2.map((type) => {
          const { value: { value, skip }, done } = iterator2.next();
          (0, utils_12.assert)(!done, new errors_12.ParserError(`The encoded value is invalid for the provided types. Reached end of buffer while attempting to parse "${type}".`));
          const parser2 = (0, exports.getParser)(type);
          const isDynamic = (0, exports.isDynamicParser)(parser2, type);
          if (isDynamic) {
            const pointer = (0, utils_12.bytesToNumber)(value.subarray(0, 32));
            const target = buffer2.subarray(pointer);
            return parser2.decode({ type, value: target, skip });
          }
          return parser2.decode({ type, value, skip });
        });
      };
      exports.unpack = unpack2;
    })(packer);
    return packer;
  }
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeSingle = exports.decode = exports.encodePacked = exports.encodeSingle = exports.encode = void 0;
    const utils_12 = dist$2;
    const errors_12 = errors;
    const packer_1 = requirePacker();
    const encode2 = (types2, values, packed, tight) => {
      try {
        return (0, packer_1.pack)({ types: types2, values, packed, tight });
      } catch (error2) {
        if (error2 instanceof errors_12.ParserError) {
          throw new errors_12.ParserError(`Unable to encode value: ${error2.message}`, error2);
        }
        throw new errors_12.ParserError(`An unexpected error occurred: ${(0, errors_12.getErrorMessage)(error2)}`, error2);
      }
    };
    exports.encode = encode2;
    const encodeSingle = (type, value) => {
      return (0, exports.encode)([type], [value]);
    };
    exports.encodeSingle = encodeSingle;
    const encodePacked = (types2, values, tight) => {
      return (0, exports.encode)(types2, values, true, tight);
    };
    exports.encodePacked = encodePacked;
    const decode2 = (types2, value) => {
      const bytes2 = (0, utils_12.createBytes)(value);
      try {
        return (0, packer_1.unpack)(types2, bytes2);
      } catch (error2) {
        if (error2 instanceof errors_12.ParserError) {
          throw new errors_12.ParserError(`Unable to decode value: ${error2.message}`, error2);
        }
        throw new errors_12.ParserError(`An unexpected error occurred: ${(0, errors_12.getErrorMessage)(error2)}`, error2);
      }
    };
    exports.decode = decode2;
    const decodeSingle = (type, value) => {
      const result = (0, exports.decode)([type], value);
      (0, utils_12.assert)(result.length === 1, new errors_12.ParserError("Decoded value array has unexpected length."));
      return result[0];
    };
    exports.decodeSingle = decodeSingle;
  })(abi$1);
  var types = {};
  var abi = {};
  Object.defineProperty(abi, "__esModule", { value: true });
  (function(exports) {
    var __createBinding2 = globalThis && globalThis.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = globalThis && globalThis.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(abi, exports);
  })(types);
  (function(exports) {
    var __createBinding2 = globalThis && globalThis.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = globalThis && globalThis.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(abi$1, exports);
    __exportStar(errors, exports);
    __exportStar(types, exports);
  })(dist);
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.recoverTypedSignature = exports.signTypedData = exports.typedSignatureHash = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = exports.SignTypedDataVersion = void 0;
    const util_12 = dist$4;
    const abi_utils_1 = dist;
    const parsers_1 = requireParsers();
    const utils_12 = utils;
    const utils_22 = dist$2;
    const keccak_12 = keccak;
    const utils_3 = utils$3;
    var SignTypedDataVersion;
    (function(SignTypedDataVersion2) {
      SignTypedDataVersion2["V1"] = "V1";
      SignTypedDataVersion2["V3"] = "V3";
      SignTypedDataVersion2["V4"] = "V4";
    })(SignTypedDataVersion = exports.SignTypedDataVersion || (exports.SignTypedDataVersion = {}));
    exports.TYPED_MESSAGE_SCHEMA = {
      type: "object",
      properties: {
        types: {
          type: "object",
          additionalProperties: {
            type: "array",
            items: {
              type: "object",
              properties: {
                name: { type: "string" },
                type: { type: "string" }
              },
              required: ["name", "type"]
            }
          }
        },
        primaryType: { type: "string" },
        domain: { type: "object" },
        message: { type: "object" }
      },
      required: ["types", "primaryType", "domain", "message"]
    };
    function validateVersion(version2, allowedVersions) {
      if (!Object.keys(SignTypedDataVersion).includes(version2)) {
        throw new Error(`Invalid version: '${version2}'`);
      } else if (allowedVersions && !allowedVersions.includes(version2)) {
        throw new Error(`SignTypedDataVersion not allowed: '${version2}'. Allowed versions are: ${allowedVersions.join(", ")}`);
      }
    }
    function parseNumber(type, value) {
      (0, utils_22.assert)(value !== null, `Unable to encode value: Invalid number. Expected a valid number value, but received "${value}".`);
      const bigIntValue = BigInt(value);
      const length = (0, parsers_1.getLength)(type);
      const maxValue = BigInt(2) ** BigInt(length) - BigInt(1);
      (0, utils_22.assert)(bigIntValue >= -maxValue && bigIntValue <= maxValue, `Unable to encode value: Number "${value}" is out of range for type "${type}".`);
      return bigIntValue;
    }
    function reallyStrangeAddressToBytes(address2) {
      let addressValue = BigInt(0);
      for (let i2 = 0; i2 < address2.length; i2++) {
        const character = BigInt(address2.charCodeAt(i2) - 48);
        addressValue *= BigInt(10);
        if (character >= 49) {
          addressValue += character - BigInt(49) + BigInt(10);
        } else if (character >= 17) {
          addressValue += character - BigInt(17) + BigInt(10);
        } else {
          addressValue += character;
        }
      }
      return (0, utils_12.padStart)((0, utils_22.bigIntToBytes)(addressValue), 20);
    }
    function encodeField(types2, name, type, value, version2) {
      validateVersion(version2, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);
      if (types2[type] !== void 0) {
        return [
          "bytes32",
          // TODO: return Buffer, remove string from return type
          version2 === SignTypedDataVersion.V4 && value == null ? "0x0000000000000000000000000000000000000000000000000000000000000000" : (0, util_12.arrToBufArr)((0, keccak_12.keccak256)(encodeData(type, value, types2, version2)))
        ];
      }
      if (type === "function") {
        throw new Error('Unsupported or invalid type: "function"');
      }
      if (value === void 0) {
        throw new Error(`missing value for field ${name} of type ${type}`);
      }
      if (type === "address") {
        if (typeof value === "number") {
          return ["address", (0, utils_12.padStart)((0, utils_22.numberToBytes)(value), 20)];
        } else if ((0, utils_22.isStrictHexString)(value)) {
          return ["address", (0, utils_22.add0x)(value)];
        } else if (typeof value === "string") {
          return ["address", reallyStrangeAddressToBytes(value).subarray(0, 20)];
        }
      }
      if (type === "bool") {
        return ["bool", Boolean(value)];
      }
      if (type === "bytes") {
        if (typeof value === "number") {
          value = (0, utils_22.numberToBytes)(value);
        } else if ((0, utils_22.isStrictHexString)(value) || value === "0x") {
          value = (0, utils_22.hexToBytes)(value);
        } else if (typeof value === "string") {
          value = (0, utils_22.stringToBytes)(value);
        }
        return ["bytes32", (0, util_12.arrToBufArr)((0, keccak_12.keccak256)(value))];
      }
      if (type.startsWith("bytes") && type !== "bytes" && !type.includes("[")) {
        if (typeof value === "number") {
          if (value < 0) {
            return ["bytes32", new Uint8Array(32)];
          }
          return ["bytes32", (0, utils_22.bigIntToBytes)(BigInt(value))];
        } else if ((0, utils_22.isStrictHexString)(value)) {
          return ["bytes32", (0, utils_22.hexToBytes)(value)];
        }
        return ["bytes32", value];
      }
      if (type.startsWith("int") && !type.includes("[")) {
        const bigIntValue = parseNumber(type, value);
        if (bigIntValue >= BigInt(0)) {
          return ["uint256", bigIntValue];
        }
        return ["int256", bigIntValue];
      }
      if (type === "string") {
        if (typeof value === "number") {
          value = (0, utils_22.numberToBytes)(value);
        } else {
          value = (0, utils_22.stringToBytes)(value !== null && value !== void 0 ? value : "");
        }
        return ["bytes32", (0, util_12.arrToBufArr)((0, keccak_12.keccak256)(value))];
      }
      if (type.endsWith("]")) {
        if (version2 === SignTypedDataVersion.V3) {
          throw new Error("Arrays are unimplemented in encodeData; use V4 extension");
        }
        const parsedType = type.slice(0, type.lastIndexOf("["));
        const typeValuePairs = value.map((item) => encodeField(types2, name, parsedType, item, version2));
        return [
          "bytes32",
          (0, util_12.arrToBufArr)((0, keccak_12.keccak256)((0, abi_utils_1.encode)(typeValuePairs.map(([t2]) => t2), typeValuePairs.map(([, v]) => v))))
        ];
      }
      return [type, value];
    }
    function encodeData(primaryType, data, types2, version2) {
      validateVersion(version2, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);
      const encodedTypes = ["bytes32"];
      const encodedValues = [
        hashType(primaryType, types2)
      ];
      for (const field of types2[primaryType]) {
        if (version2 === SignTypedDataVersion.V3 && data[field.name] === void 0) {
          continue;
        }
        const [type, value] = encodeField(types2, field.name, field.type, data[field.name], version2);
        encodedTypes.push(type);
        encodedValues.push(value);
      }
      return (0, util_12.arrToBufArr)((0, abi_utils_1.encode)(encodedTypes, encodedValues));
    }
    function encodeType(primaryType, types2) {
      let result = "";
      const unsortedDeps = findTypeDependencies(primaryType, types2);
      unsortedDeps.delete(primaryType);
      const deps = [primaryType, ...Array.from(unsortedDeps).sort()];
      for (const type of deps) {
        const children = types2[type];
        if (!children) {
          throw new Error(`No type definition specified: ${type}`);
        }
        result += `${type}(${types2[type].map(({ name, type: t2 }) => `${t2} ${name}`).join(",")})`;
      }
      return result;
    }
    function findTypeDependencies(primaryType, types2, results = /* @__PURE__ */ new Set()) {
      if (typeof primaryType !== "string") {
        throw new Error(`Invalid findTypeDependencies input ${JSON.stringify(primaryType)}`);
      }
      const match = primaryType.match(/^\w*/u);
      [primaryType] = match;
      if (results.has(primaryType) || types2[primaryType] === void 0) {
        return results;
      }
      results.add(primaryType);
      for (const field of types2[primaryType]) {
        findTypeDependencies(field.type, types2, results);
      }
      return results;
    }
    function hashStruct(primaryType, data, types2, version2) {
      validateVersion(version2, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);
      const encoded = encodeData(primaryType, data, types2, version2);
      const hashed = (0, keccak_12.keccak256)(encoded);
      const buf = (0, util_12.arrToBufArr)(hashed);
      return buf;
    }
    function hashType(primaryType, types2) {
      const encodedHashType = (0, utils_22.stringToBytes)(encodeType(primaryType, types2));
      return (0, util_12.arrToBufArr)((0, keccak_12.keccak256)(encodedHashType));
    }
    function sanitizeData(data) {
      const sanitizedData = {};
      for (const key2 in exports.TYPED_MESSAGE_SCHEMA.properties) {
        if (data[key2]) {
          sanitizedData[key2] = data[key2];
        }
      }
      if ("types" in sanitizedData) {
        sanitizedData.types = Object.assign({ EIP712Domain: [] }, sanitizedData.types);
      }
      return sanitizedData;
    }
    function eip712DomainHash(typedData, version2) {
      validateVersion(version2, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);
      const sanitizedData = sanitizeData(typedData);
      const { domain } = sanitizedData;
      const domainType = { EIP712Domain: sanitizedData.types.EIP712Domain };
      return hashStruct("EIP712Domain", domain, domainType, version2);
    }
    function eip712Hash(typedData, version2) {
      validateVersion(version2, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);
      const sanitizedData = sanitizeData(typedData);
      const parts = [(0, utils_22.hexToBytes)("1901")];
      parts.push(eip712DomainHash(typedData, version2));
      if (sanitizedData.primaryType !== "EIP712Domain") {
        parts.push(hashStruct(
          // TODO: Validate that this is a string, so this type cast can be removed.
          sanitizedData.primaryType,
          sanitizedData.message,
          sanitizedData.types,
          version2
        ));
      }
      return (0, util_12.arrToBufArr)((0, keccak_12.keccak256)((0, utils_22.concatBytes)(parts)));
    }
    exports.TypedDataUtils = {
      encodeData,
      encodeType,
      findTypeDependencies,
      hashStruct,
      hashType,
      sanitizeData,
      eip712Hash,
      eip712DomainHash
    };
    function typedSignatureHash(typedData) {
      const hashBuffer = _typedSignatureHash(typedData);
      return (0, utils_22.bytesToHex)(hashBuffer);
    }
    exports.typedSignatureHash = typedSignatureHash;
    function normalizeValue(type, value) {
      if ((0, parsers_1.isArrayType)(type) && Array.isArray(value)) {
        const [innerType] = (0, parsers_1.getArrayType)(type);
        return value.map((item) => normalizeValue(innerType, item));
      }
      if (type === "address") {
        if ((0, utils_22.isStrictHexString)(value)) {
          return (0, utils_12.padStart)((0, utils_22.hexToBytes)(value).subarray(0, 20), 20);
        }
        if (value instanceof Uint8Array) {
          return (0, utils_12.padStart)(value.subarray(0, 20), 20);
        }
      }
      if (type === "bool") {
        return Boolean(value);
      }
      if (type.startsWith("bytes") && type !== "bytes") {
        const length = (0, parsers_1.getByteLength)(type);
        if (typeof value === "number") {
          if (value < 0) {
            return new Uint8Array();
          }
          return (0, utils_22.numberToBytes)(value).subarray(0, length);
        }
        if ((0, utils_22.isStrictHexString)(value)) {
          return (0, utils_22.hexToBytes)(value).subarray(0, length);
        }
        if (value instanceof Uint8Array) {
          return value.subarray(0, length);
        }
      }
      if (type.startsWith("uint")) {
        if (typeof value === "number") {
          return Math.abs(value);
        }
      }
      if (type.startsWith("int")) {
        if (typeof value === "number") {
          const length = (0, parsers_1.getLength)(type);
          return BigInt.asIntN(length, BigInt(value));
        }
      }
      return value;
    }
    function normalizeAddresses(values) {
      return values.map((value) => {
        if (typeof value === "number") {
          return (0, utils_12.padStart)((0, utils_22.numberToBytes)(value), 32);
        }
        if ((0, utils_22.isStrictHexString)(value)) {
          return (0, utils_12.padStart)((0, utils_22.hexToBytes)(value).subarray(0, 32), 32);
        }
        if (value instanceof Uint8Array) {
          return (0, utils_12.padStart)(value.subarray(0, 32), 32);
        }
        return value;
      });
    }
    function normalizeIntegers(type, values) {
      return values.map((value) => {
        if (typeof value === "string" || typeof value === "number" || typeof value === "bigint") {
          const bigIntValue = parseNumber(type, value);
          if (bigIntValue >= BigInt(0)) {
            return (0, utils_12.padStart)((0, utils_22.bigIntToBytes)(bigIntValue), 32);
          }
          const length = (0, parsers_1.getLength)(type);
          const asIntN = BigInt.asIntN(length, bigIntValue);
          return (0, utils_22.signedBigIntToBytes)(asIntN, 32);
        }
        return value;
      });
    }
    function _typedSignatureHash(typedData) {
      const error2 = new Error("Expect argument to be non-empty array");
      if (typeof typedData !== "object" || !("length" in typedData) || !typedData.length) {
        throw error2;
      }
      const normalizedData = typedData.map(({ name, type, value }) => {
        if (type === "address[]") {
          return {
            name,
            type: "bytes32[]",
            value: normalizeAddresses(value)
          };
        }
        if (type.startsWith("int") && (0, parsers_1.isArrayType)(type)) {
          const [innerType, length] = (0, parsers_1.getArrayType)(type);
          return {
            name,
            type: `bytes32[${length !== null && length !== void 0 ? length : ""}]`,
            value: normalizeIntegers(innerType, value)
          };
        }
        return {
          name,
          type,
          value: normalizeValue(type, value)
        };
      });
      const data = normalizedData.map((e) => {
        if (e.type !== "bytes") {
          return e.value;
        }
        return (0, utils_3.legacyToBuffer)(e.value);
      });
      const types2 = normalizedData.map((e) => {
        if (e.type === "function") {
          throw new Error('Unsupported or invalid type: "function"');
        }
        return e.type;
      });
      const schema = typedData.map((e) => {
        if (!e.name) {
          throw error2;
        }
        return `${e.type} ${e.name}`;
      });
      return (0, util_12.arrToBufArr)((0, keccak_12.keccak256)((0, abi_utils_1.encodePacked)(["bytes32", "bytes32"], [
        (0, keccak_12.keccak256)((0, abi_utils_1.encodePacked)(["string[]"], [schema], true)),
        (0, keccak_12.keccak256)((0, abi_utils_1.encodePacked)(types2, data, true))
      ])));
    }
    function signTypedData2({ privateKey, data, version: version2 }) {
      validateVersion(version2);
      if ((0, utils_3.isNullish)(data)) {
        throw new Error("Missing data parameter");
      } else if ((0, utils_3.isNullish)(privateKey)) {
        throw new Error("Missing private key parameter");
      }
      const messageHash = version2 === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version2);
      const sig = (0, util_12.ecsign)(messageHash, privateKey);
      return (0, utils_3.concatSig)((0, util_12.arrToBufArr)((0, utils_22.bigIntToBytes)(sig.v)), sig.r, sig.s);
    }
    exports.signTypedData = signTypedData2;
    function recoverTypedSignature({ data, signature: signature2, version: version2 }) {
      validateVersion(version2);
      if ((0, utils_3.isNullish)(data)) {
        throw new Error("Missing data parameter");
      } else if ((0, utils_3.isNullish)(signature2)) {
        throw new Error("Missing signature parameter");
      }
      const messageHash = version2 === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version2);
      const publicKey = (0, utils_3.recoverPublicKey)(messageHash, signature2);
      const sender = (0, util_12.publicToAddress)(publicKey);
      return (0, utils_22.bytesToHex)(sender);
    }
    exports.recoverTypedSignature = recoverTypedSignature;
  })(signTypedData);
  var encryption = {};
  var lib = {};
  (function(exports) {
    /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.createBase58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64urlnopad = exports.base64url = exports.base64nopad = exports.base64 = exports.base32crockford = exports.base32hexnopad = exports.base32hex = exports.base32nopad = exports.base32 = exports.base16 = exports.utils = void 0;
    exports.assertNumber = assertNumber;
    // @__NO_SIDE_EFFECTS__
    function assertNumber(n) {
      if (!Number.isSafeInteger(n))
        throw new Error(`Wrong integer: ${n}`);
    }
    function isBytes2(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    // @__NO_SIDE_EFFECTS__
    function chain(...args) {
      const id2 = (a) => a;
      const wrap = (a, b) => (c) => a(b(c));
      const encode2 = args.map((x) => x.encode).reduceRight(wrap, id2);
      const decode2 = args.map((x) => x.decode).reduce(wrap, id2);
      return { encode: encode2, decode: decode2 };
    }
    // @__NO_SIDE_EFFECTS__
    function alphabet(alphabet2) {
      return {
        encode: (digits) => {
          if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
            throw new Error("alphabet.encode input should be an array of numbers");
          return digits.map((i2) => {
            if (i2 < 0 || i2 >= alphabet2.length)
              throw new Error(`Digit index outside alphabet: ${i2} (alphabet: ${alphabet2.length})`);
            return alphabet2[i2];
          });
        },
        decode: (input) => {
          if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
            throw new Error("alphabet.decode input should be array of strings");
          return input.map((letter) => {
            if (typeof letter !== "string")
              throw new Error(`alphabet.decode: not string element=${letter}`);
            const index = alphabet2.indexOf(letter);
            if (index === -1)
              throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet2}`);
            return index;
          });
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function join(separator = "") {
      if (typeof separator !== "string")
        throw new Error("join separator should be string");
      return {
        encode: (from) => {
          if (!Array.isArray(from) || from.length && typeof from[0] !== "string")
            throw new Error("join.encode input should be array of strings");
          for (let i2 of from)
            if (typeof i2 !== "string")
              throw new Error(`join.encode: non-string input=${i2}`);
          return from.join(separator);
        },
        decode: (to) => {
          if (typeof to !== "string")
            throw new Error("join.decode input should be string");
          return to.split(separator);
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function padding(bits, chr = "=") {
      if (typeof chr !== "string")
        throw new Error("padding chr should be string");
      return {
        encode(data) {
          if (!Array.isArray(data) || data.length && typeof data[0] !== "string")
            throw new Error("padding.encode input should be array of strings");
          for (let i2 of data)
            if (typeof i2 !== "string")
              throw new Error(`padding.encode: non-string input=${i2}`);
          while (data.length * bits % 8)
            data.push(chr);
          return data;
        },
        decode(input) {
          if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
            throw new Error("padding.encode input should be array of strings");
          for (let i2 of input)
            if (typeof i2 !== "string")
              throw new Error(`padding.decode: non-string input=${i2}`);
          let end = input.length;
          if (end * bits % 8)
            throw new Error("Invalid padding: string should have whole number of bytes");
          for (; end > 0 && input[end - 1] === chr; end--) {
            if (!((end - 1) * bits % 8))
              throw new Error("Invalid padding: string has too much padding");
          }
          return input.slice(0, end);
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function normalize2(fn) {
      if (typeof fn !== "function")
        throw new Error("normalize fn should be function");
      return { encode: (from) => from, decode: (to) => fn(to) };
    }
    // @__NO_SIDE_EFFECTS__
    function convertRadix(data, from, to) {
      if (from < 2)
        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
      if (to < 2)
        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
      if (!Array.isArray(data))
        throw new Error("convertRadix: data should be array");
      if (!data.length)
        return [];
      let pos = 0;
      const res = [];
      const digits = Array.from(data);
      digits.forEach((d) => {
        if (d < 0 || d >= from)
          throw new Error(`Wrong integer: ${d}`);
      });
      while (true) {
        let carry = 0;
        let done = true;
        for (let i2 = pos; i2 < digits.length; i2++) {
          const digit = digits[i2];
          const digitBase = from * carry + digit;
          if (!Number.isSafeInteger(digitBase) || from * carry / from !== carry || digitBase - digit !== from * carry) {
            throw new Error("convertRadix: carry overflow");
          }
          carry = digitBase % to;
          const rounded = Math.floor(digitBase / to);
          digits[i2] = rounded;
          if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
            throw new Error("convertRadix: carry overflow");
          if (!done)
            continue;
          else if (!rounded)
            pos = i2;
          else
            done = false;
        }
        res.push(carry);
        if (done)
          break;
      }
      for (let i2 = 0; i2 < data.length - 1 && data[i2] === 0; i2++)
        res.push(0);
      return res.reverse();
    }
    const gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => !b ? a : /* @__PURE__ */ gcd(b, a % b);
    const radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - /* @__PURE__ */ gcd(from, to));
    // @__NO_SIDE_EFFECTS__
    function convertRadix2(data, from, to, padding2) {
      if (!Array.isArray(data))
        throw new Error("convertRadix2: data should be array");
      if (from <= 0 || from > 32)
        throw new Error(`convertRadix2: wrong from=${from}`);
      if (to <= 0 || to > 32)
        throw new Error(`convertRadix2: wrong to=${to}`);
      if (/* @__PURE__ */ radix2carry(from, to) > 32) {
        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${/* @__PURE__ */ radix2carry(from, to)}`);
      }
      let carry = 0;
      let pos = 0;
      const mask2 = 2 ** to - 1;
      const res = [];
      for (const n of data) {
        if (n >= 2 ** from)
          throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
        carry = carry << from | n;
        if (pos + from > 32)
          throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
        pos += from;
        for (; pos >= to; pos -= to)
          res.push((carry >> pos - to & mask2) >>> 0);
        carry &= 2 ** pos - 1;
      }
      carry = carry << to - pos & mask2;
      if (!padding2 && pos >= from)
        throw new Error("Excess padding");
      if (!padding2 && carry)
        throw new Error(`Non-zero padding: ${carry}`);
      if (padding2 && pos > 0)
        res.push(carry >>> 0);
      return res;
    }
    // @__NO_SIDE_EFFECTS__
    function radix(num) {
      return {
        encode: (bytes2) => {
          if (!isBytes2(bytes2))
            throw new Error("radix.encode input should be Uint8Array");
          return /* @__PURE__ */ convertRadix(Array.from(bytes2), 2 ** 8, num);
        },
        decode: (digits) => {
          if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
            throw new Error("radix.decode input should be array of numbers");
          return Uint8Array.from(/* @__PURE__ */ convertRadix(digits, num, 2 ** 8));
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function radix2(bits, revPadding = false) {
      if (bits <= 0 || bits > 32)
        throw new Error("radix2: bits should be in (0..32]");
      if (/* @__PURE__ */ radix2carry(8, bits) > 32 || /* @__PURE__ */ radix2carry(bits, 8) > 32)
        throw new Error("radix2: carry overflow");
      return {
        encode: (bytes2) => {
          if (!isBytes2(bytes2))
            throw new Error("radix2.encode input should be Uint8Array");
          return /* @__PURE__ */ convertRadix2(Array.from(bytes2), 8, bits, !revPadding);
        },
        decode: (digits) => {
          if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
            throw new Error("radix2.decode input should be array of numbers");
          return Uint8Array.from(/* @__PURE__ */ convertRadix2(digits, bits, 8, revPadding));
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function unsafeWrapper(fn) {
      if (typeof fn !== "function")
        throw new Error("unsafeWrapper fn should be function");
      return function(...args) {
        try {
          return fn.apply(null, args);
        } catch (e) {
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function checksum2(len2, fn) {
      if (typeof fn !== "function")
        throw new Error("checksum fn should be function");
      return {
        encode(data) {
          if (!isBytes2(data))
            throw new Error("checksum.encode: input should be Uint8Array");
          const checksum3 = fn(data).slice(0, len2);
          const res = new Uint8Array(data.length + len2);
          res.set(data);
          res.set(checksum3, data.length);
          return res;
        },
        decode(data) {
          if (!isBytes2(data))
            throw new Error("checksum.decode: input should be Uint8Array");
          const payload = data.slice(0, -len2);
          const newChecksum = fn(payload).slice(0, len2);
          const oldChecksum = data.slice(-len2);
          for (let i2 = 0; i2 < len2; i2++)
            if (newChecksum[i2] !== oldChecksum[i2])
              throw new Error("Invalid checksum");
          return payload;
        }
      };
    }
    exports.utils = {
      alphabet,
      chain,
      checksum: checksum2,
      convertRadix,
      convertRadix2,
      radix,
      radix2,
      join,
      padding
    };
    exports.base16 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789ABCDEF"), /* @__PURE__ */ join(""));
    exports.base32 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
    exports.base32nopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ join(""));
    exports.base32hex = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
    exports.base32hexnopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ join(""));
    exports.base32crockford = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize2((s2) => s2.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
    exports.base64 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
    exports.base64nopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ join(""));
    exports.base64url = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
    exports.base64urlnopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ join(""));
    const genBase58 = (abc) => /* @__PURE__ */ chain(/* @__PURE__ */ radix(58), /* @__PURE__ */ alphabet(abc), /* @__PURE__ */ join(""));
    exports.base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    exports.base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
    exports.base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
    const XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
    exports.base58xmr = {
      encode(data) {
        let res = "";
        for (let i2 = 0; i2 < data.length; i2 += 8) {
          const block = data.subarray(i2, i2 + 8);
          res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
        }
        return res;
      },
      decode(str) {
        let res = [];
        for (let i2 = 0; i2 < str.length; i2 += 11) {
          const slice = str.slice(i2, i2 + 11);
          const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
          const block = exports.base58.decode(slice);
          for (let j = 0; j < block.length - blockLen; j++) {
            if (block[j] !== 0)
              throw new Error("base58xmr: wrong padding");
          }
          res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
      }
    };
    const createBase58check = (sha2562) => /* @__PURE__ */ chain(/* @__PURE__ */ checksum2(4, (data) => sha2562(sha2562(data))), exports.base58);
    exports.createBase58check = createBase58check;
    exports.base58check = exports.createBase58check;
    const BECH_ALPHABET = /* @__PURE__ */ chain(/* @__PURE__ */ alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), /* @__PURE__ */ join(""));
    const POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
    // @__NO_SIDE_EFFECTS__
    function bech32Polymod(pre) {
      const b = pre >> 25;
      let chk = (pre & 33554431) << 5;
      for (let i2 = 0; i2 < POLYMOD_GENERATORS.length; i2++) {
        if ((b >> i2 & 1) === 1)
          chk ^= POLYMOD_GENERATORS[i2];
      }
      return chk;
    }
    // @__NO_SIDE_EFFECTS__
    function bechChecksum(prefix, words, encodingConst = 1) {
      const len2 = prefix.length;
      let chk = 1;
      for (let i2 = 0; i2 < len2; i2++) {
        const c = prefix.charCodeAt(i2);
        if (c < 33 || c > 126)
          throw new Error(`Invalid prefix (${prefix})`);
        chk = /* @__PURE__ */ bech32Polymod(chk) ^ c >> 5;
      }
      chk = /* @__PURE__ */ bech32Polymod(chk);
      for (let i2 = 0; i2 < len2; i2++)
        chk = /* @__PURE__ */ bech32Polymod(chk) ^ prefix.charCodeAt(i2) & 31;
      for (let v of words)
        chk = /* @__PURE__ */ bech32Polymod(chk) ^ v;
      for (let i2 = 0; i2 < 6; i2++)
        chk = /* @__PURE__ */ bech32Polymod(chk);
      chk ^= encodingConst;
      return BECH_ALPHABET.encode(/* @__PURE__ */ convertRadix2([chk % 2 ** 30], 30, 5, false));
    }
    // @__NO_SIDE_EFFECTS__
    function genBech32(encoding2) {
      const ENCODING_CONST = encoding2 === "bech32" ? 1 : 734539939;
      const _words = /* @__PURE__ */ radix2(5);
      const fromWords = _words.decode;
      const toWords = _words.encode;
      const fromWordsUnsafe = /* @__PURE__ */ unsafeWrapper(fromWords);
      function encode2(prefix, words, limit2 = 90) {
        if (typeof prefix !== "string")
          throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);
        if (words instanceof Uint8Array)
          words = Array.from(words);
        if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
          throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
        if (prefix.length === 0)
          throw new TypeError(`Invalid prefix length ${prefix.length}`);
        const actualLength = prefix.length + 7 + words.length;
        if (limit2 !== false && actualLength > limit2)
          throw new TypeError(`Length ${actualLength} exceeds limit ${limit2}`);
        const lowered = prefix.toLowerCase();
        const sum = /* @__PURE__ */ bechChecksum(lowered, words, ENCODING_CONST);
        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
      }
      function decode2(str, limit2 = 90) {
        if (typeof str !== "string")
          throw new Error(`bech32.decode input should be string, not ${typeof str}`);
        if (str.length < 8 || limit2 !== false && str.length > limit2)
          throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit2})`);
        const lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase())
          throw new Error(`String must be lowercase or uppercase`);
        const sepIndex = lowered.lastIndexOf("1");
        if (sepIndex === 0 || sepIndex === -1)
          throw new Error(`Letter "1" must be present between prefix and data only`);
        const prefix = lowered.slice(0, sepIndex);
        const data = lowered.slice(sepIndex + 1);
        if (data.length < 6)
          throw new Error("Data must be at least 6 characters long");
        const words = BECH_ALPHABET.decode(data).slice(0, -6);
        const sum = /* @__PURE__ */ bechChecksum(prefix, words, ENCODING_CONST);
        if (!data.endsWith(sum))
          throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
        return { prefix, words };
      }
      const decodeUnsafe = /* @__PURE__ */ unsafeWrapper(decode2);
      function decodeToBytes(str) {
        const { prefix, words } = decode2(str, false);
        return { prefix, words, bytes: fromWords(words) };
      }
      function encodeFromBytes(prefix, bytes2) {
        return encode2(prefix, toWords(bytes2));
      }
      return {
        encode: encode2,
        decode: decode2,
        encodeFromBytes,
        decodeToBytes,
        decodeUnsafe,
        fromWords,
        fromWordsUnsafe,
        toWords
      };
    }
    exports.bech32 = /* @__PURE__ */ genBech32("bech32");
    exports.bech32m = /* @__PURE__ */ genBech32("bech32m");
    exports.utf8 = {
      encode: (data) => new TextDecoder().decode(data),
      decode: (str) => new TextEncoder().encode(str)
    };
    exports.hex = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789abcdef"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize2((s2) => {
      if (typeof s2 !== "string" || s2.length % 2)
        throw new TypeError(`hex.decode: expected string, got ${typeof s2} with length ${s2.length}`);
      return s2.toLowerCase();
    }));
    const CODERS = {
      utf8: exports.utf8,
      hex: exports.hex,
      base16: exports.base16,
      base32: exports.base32,
      base64: exports.base64,
      base64url: exports.base64url,
      base58: exports.base58,
      base58xmr: exports.base58xmr
    };
    const coderTypeError = "Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr";
    const bytesToString = (type, bytes2) => {
      if (typeof type !== "string" || !CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
      if (!isBytes2(bytes2))
        throw new TypeError("bytesToString() expects Uint8Array");
      return CODERS[type].encode(bytes2);
    };
    exports.bytesToString = bytesToString;
    exports.str = exports.bytesToString;
    const stringToBytes = (type, str) => {
      if (!CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
      if (typeof str !== "string")
        throw new TypeError("stringToBytes() expects string");
      return CODERS[type].decode(str);
    };
    exports.stringToBytes = stringToBytes;
    exports.bytes = exports.stringToBytes;
  })(lib);
  var naclFast = { exports: {} };
  (function(module) {
    (function(nacl2) {
      var gf = function(init) {
        var i2, r2 = new Float64Array(16);
        if (init) for (i2 = 0; i2 < init.length; i2++) r2[i2] = init[i2];
        return r2;
      };
      var randombytes = function() {
        throw new Error("no PRNG");
      };
      var _0 = new Uint8Array(16);
      var _9 = new Uint8Array(32);
      _9[0] = 9;
      var gf0 = gf(), gf1 = gf([1]), _121665 = gf([56129, 1]), D = gf([30883, 4953, 19914, 30187, 55467, 16705, 2637, 112, 59544, 30585, 16505, 36039, 65139, 11119, 27886, 20995]), D2 = gf([61785, 9906, 39828, 60374, 45398, 33411, 5274, 224, 53552, 61171, 33010, 6542, 64743, 22239, 55772, 9222]), X = gf([54554, 36645, 11616, 51542, 42930, 38181, 51040, 26924, 56412, 64982, 57905, 49316, 21502, 52590, 14035, 8553]), Y = gf([26200, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214]), I = gf([41136, 18958, 6951, 50414, 58488, 44335, 6150, 12099, 55207, 15867, 153, 11085, 57099, 20417, 9344, 11139]);
      function ts64(x, i2, h, l) {
        x[i2] = h >> 24 & 255;
        x[i2 + 1] = h >> 16 & 255;
        x[i2 + 2] = h >> 8 & 255;
        x[i2 + 3] = h & 255;
        x[i2 + 4] = l >> 24 & 255;
        x[i2 + 5] = l >> 16 & 255;
        x[i2 + 6] = l >> 8 & 255;
        x[i2 + 7] = l & 255;
      }
      function vn(x, xi, y, yi, n) {
        var i2, d = 0;
        for (i2 = 0; i2 < n; i2++) d |= x[xi + i2] ^ y[yi + i2];
        return (1 & d - 1 >>> 8) - 1;
      }
      function crypto_verify_16(x, xi, y, yi) {
        return vn(x, xi, y, yi, 16);
      }
      function crypto_verify_32(x, xi, y, yi) {
        return vn(x, xi, y, yi, 32);
      }
      function core_salsa20(o, p, k, c) {
        var j0 = c[0] & 255 | (c[1] & 255) << 8 | (c[2] & 255) << 16 | (c[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c[4] & 255 | (c[5] & 255) << 8 | (c[6] & 255) << 16 | (c[7] & 255) << 24, j6 = p[0] & 255 | (p[1] & 255) << 8 | (p[2] & 255) << 16 | (p[3] & 255) << 24, j7 = p[4] & 255 | (p[5] & 255) << 8 | (p[6] & 255) << 16 | (p[7] & 255) << 24, j8 = p[8] & 255 | (p[9] & 255) << 8 | (p[10] & 255) << 16 | (p[11] & 255) << 24, j9 = p[12] & 255 | (p[13] & 255) << 8 | (p[14] & 255) << 16 | (p[15] & 255) << 24, j10 = c[8] & 255 | (c[9] & 255) << 8 | (c[10] & 255) << 16 | (c[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c[12] & 255 | (c[13] & 255) << 8 | (c[14] & 255) << 16 | (c[15] & 255) << 24;
        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
        for (var i2 = 0; i2 < 20; i2 += 2) {
          u = x0 + x12 | 0;
          x4 ^= u << 7 | u >>> 32 - 7;
          u = x4 + x0 | 0;
          x8 ^= u << 9 | u >>> 32 - 9;
          u = x8 + x4 | 0;
          x12 ^= u << 13 | u >>> 32 - 13;
          u = x12 + x8 | 0;
          x0 ^= u << 18 | u >>> 32 - 18;
          u = x5 + x1 | 0;
          x9 ^= u << 7 | u >>> 32 - 7;
          u = x9 + x5 | 0;
          x13 ^= u << 9 | u >>> 32 - 9;
          u = x13 + x9 | 0;
          x1 ^= u << 13 | u >>> 32 - 13;
          u = x1 + x13 | 0;
          x5 ^= u << 18 | u >>> 32 - 18;
          u = x10 + x6 | 0;
          x14 ^= u << 7 | u >>> 32 - 7;
          u = x14 + x10 | 0;
          x2 ^= u << 9 | u >>> 32 - 9;
          u = x2 + x14 | 0;
          x6 ^= u << 13 | u >>> 32 - 13;
          u = x6 + x2 | 0;
          x10 ^= u << 18 | u >>> 32 - 18;
          u = x15 + x11 | 0;
          x3 ^= u << 7 | u >>> 32 - 7;
          u = x3 + x15 | 0;
          x7 ^= u << 9 | u >>> 32 - 9;
          u = x7 + x3 | 0;
          x11 ^= u << 13 | u >>> 32 - 13;
          u = x11 + x7 | 0;
          x15 ^= u << 18 | u >>> 32 - 18;
          u = x0 + x3 | 0;
          x1 ^= u << 7 | u >>> 32 - 7;
          u = x1 + x0 | 0;
          x2 ^= u << 9 | u >>> 32 - 9;
          u = x2 + x1 | 0;
          x3 ^= u << 13 | u >>> 32 - 13;
          u = x3 + x2 | 0;
          x0 ^= u << 18 | u >>> 32 - 18;
          u = x5 + x4 | 0;
          x6 ^= u << 7 | u >>> 32 - 7;
          u = x6 + x5 | 0;
          x7 ^= u << 9 | u >>> 32 - 9;
          u = x7 + x6 | 0;
          x4 ^= u << 13 | u >>> 32 - 13;
          u = x4 + x7 | 0;
          x5 ^= u << 18 | u >>> 32 - 18;
          u = x10 + x9 | 0;
          x11 ^= u << 7 | u >>> 32 - 7;
          u = x11 + x10 | 0;
          x8 ^= u << 9 | u >>> 32 - 9;
          u = x8 + x11 | 0;
          x9 ^= u << 13 | u >>> 32 - 13;
          u = x9 + x8 | 0;
          x10 ^= u << 18 | u >>> 32 - 18;
          u = x15 + x14 | 0;
          x12 ^= u << 7 | u >>> 32 - 7;
          u = x12 + x15 | 0;
          x13 ^= u << 9 | u >>> 32 - 9;
          u = x13 + x12 | 0;
          x14 ^= u << 13 | u >>> 32 - 13;
          u = x14 + x13 | 0;
          x15 ^= u << 18 | u >>> 32 - 18;
        }
        x0 = x0 + j0 | 0;
        x1 = x1 + j1 | 0;
        x2 = x2 + j2 | 0;
        x3 = x3 + j3 | 0;
        x4 = x4 + j4 | 0;
        x5 = x5 + j5 | 0;
        x6 = x6 + j6 | 0;
        x7 = x7 + j7 | 0;
        x8 = x8 + j8 | 0;
        x9 = x9 + j9 | 0;
        x10 = x10 + j10 | 0;
        x11 = x11 + j11 | 0;
        x12 = x12 + j12 | 0;
        x13 = x13 + j13 | 0;
        x14 = x14 + j14 | 0;
        x15 = x15 + j15 | 0;
        o[0] = x0 >>> 0 & 255;
        o[1] = x0 >>> 8 & 255;
        o[2] = x0 >>> 16 & 255;
        o[3] = x0 >>> 24 & 255;
        o[4] = x1 >>> 0 & 255;
        o[5] = x1 >>> 8 & 255;
        o[6] = x1 >>> 16 & 255;
        o[7] = x1 >>> 24 & 255;
        o[8] = x2 >>> 0 & 255;
        o[9] = x2 >>> 8 & 255;
        o[10] = x2 >>> 16 & 255;
        o[11] = x2 >>> 24 & 255;
        o[12] = x3 >>> 0 & 255;
        o[13] = x3 >>> 8 & 255;
        o[14] = x3 >>> 16 & 255;
        o[15] = x3 >>> 24 & 255;
        o[16] = x4 >>> 0 & 255;
        o[17] = x4 >>> 8 & 255;
        o[18] = x4 >>> 16 & 255;
        o[19] = x4 >>> 24 & 255;
        o[20] = x5 >>> 0 & 255;
        o[21] = x5 >>> 8 & 255;
        o[22] = x5 >>> 16 & 255;
        o[23] = x5 >>> 24 & 255;
        o[24] = x6 >>> 0 & 255;
        o[25] = x6 >>> 8 & 255;
        o[26] = x6 >>> 16 & 255;
        o[27] = x6 >>> 24 & 255;
        o[28] = x7 >>> 0 & 255;
        o[29] = x7 >>> 8 & 255;
        o[30] = x7 >>> 16 & 255;
        o[31] = x7 >>> 24 & 255;
        o[32] = x8 >>> 0 & 255;
        o[33] = x8 >>> 8 & 255;
        o[34] = x8 >>> 16 & 255;
        o[35] = x8 >>> 24 & 255;
        o[36] = x9 >>> 0 & 255;
        o[37] = x9 >>> 8 & 255;
        o[38] = x9 >>> 16 & 255;
        o[39] = x9 >>> 24 & 255;
        o[40] = x10 >>> 0 & 255;
        o[41] = x10 >>> 8 & 255;
        o[42] = x10 >>> 16 & 255;
        o[43] = x10 >>> 24 & 255;
        o[44] = x11 >>> 0 & 255;
        o[45] = x11 >>> 8 & 255;
        o[46] = x11 >>> 16 & 255;
        o[47] = x11 >>> 24 & 255;
        o[48] = x12 >>> 0 & 255;
        o[49] = x12 >>> 8 & 255;
        o[50] = x12 >>> 16 & 255;
        o[51] = x12 >>> 24 & 255;
        o[52] = x13 >>> 0 & 255;
        o[53] = x13 >>> 8 & 255;
        o[54] = x13 >>> 16 & 255;
        o[55] = x13 >>> 24 & 255;
        o[56] = x14 >>> 0 & 255;
        o[57] = x14 >>> 8 & 255;
        o[58] = x14 >>> 16 & 255;
        o[59] = x14 >>> 24 & 255;
        o[60] = x15 >>> 0 & 255;
        o[61] = x15 >>> 8 & 255;
        o[62] = x15 >>> 16 & 255;
        o[63] = x15 >>> 24 & 255;
      }
      function core_hsalsa20(o, p, k, c) {
        var j0 = c[0] & 255 | (c[1] & 255) << 8 | (c[2] & 255) << 16 | (c[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c[4] & 255 | (c[5] & 255) << 8 | (c[6] & 255) << 16 | (c[7] & 255) << 24, j6 = p[0] & 255 | (p[1] & 255) << 8 | (p[2] & 255) << 16 | (p[3] & 255) << 24, j7 = p[4] & 255 | (p[5] & 255) << 8 | (p[6] & 255) << 16 | (p[7] & 255) << 24, j8 = p[8] & 255 | (p[9] & 255) << 8 | (p[10] & 255) << 16 | (p[11] & 255) << 24, j9 = p[12] & 255 | (p[13] & 255) << 8 | (p[14] & 255) << 16 | (p[15] & 255) << 24, j10 = c[8] & 255 | (c[9] & 255) << 8 | (c[10] & 255) << 16 | (c[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c[12] & 255 | (c[13] & 255) << 8 | (c[14] & 255) << 16 | (c[15] & 255) << 24;
        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
        for (var i2 = 0; i2 < 20; i2 += 2) {
          u = x0 + x12 | 0;
          x4 ^= u << 7 | u >>> 32 - 7;
          u = x4 + x0 | 0;
          x8 ^= u << 9 | u >>> 32 - 9;
          u = x8 + x4 | 0;
          x12 ^= u << 13 | u >>> 32 - 13;
          u = x12 + x8 | 0;
          x0 ^= u << 18 | u >>> 32 - 18;
          u = x5 + x1 | 0;
          x9 ^= u << 7 | u >>> 32 - 7;
          u = x9 + x5 | 0;
          x13 ^= u << 9 | u >>> 32 - 9;
          u = x13 + x9 | 0;
          x1 ^= u << 13 | u >>> 32 - 13;
          u = x1 + x13 | 0;
          x5 ^= u << 18 | u >>> 32 - 18;
          u = x10 + x6 | 0;
          x14 ^= u << 7 | u >>> 32 - 7;
          u = x14 + x10 | 0;
          x2 ^= u << 9 | u >>> 32 - 9;
          u = x2 + x14 | 0;
          x6 ^= u << 13 | u >>> 32 - 13;
          u = x6 + x2 | 0;
          x10 ^= u << 18 | u >>> 32 - 18;
          u = x15 + x11 | 0;
          x3 ^= u << 7 | u >>> 32 - 7;
          u = x3 + x15 | 0;
          x7 ^= u << 9 | u >>> 32 - 9;
          u = x7 + x3 | 0;
          x11 ^= u << 13 | u >>> 32 - 13;
          u = x11 + x7 | 0;
          x15 ^= u << 18 | u >>> 32 - 18;
          u = x0 + x3 | 0;
          x1 ^= u << 7 | u >>> 32 - 7;
          u = x1 + x0 | 0;
          x2 ^= u << 9 | u >>> 32 - 9;
          u = x2 + x1 | 0;
          x3 ^= u << 13 | u >>> 32 - 13;
          u = x3 + x2 | 0;
          x0 ^= u << 18 | u >>> 32 - 18;
          u = x5 + x4 | 0;
          x6 ^= u << 7 | u >>> 32 - 7;
          u = x6 + x5 | 0;
          x7 ^= u << 9 | u >>> 32 - 9;
          u = x7 + x6 | 0;
          x4 ^= u << 13 | u >>> 32 - 13;
          u = x4 + x7 | 0;
          x5 ^= u << 18 | u >>> 32 - 18;
          u = x10 + x9 | 0;
          x11 ^= u << 7 | u >>> 32 - 7;
          u = x11 + x10 | 0;
          x8 ^= u << 9 | u >>> 32 - 9;
          u = x8 + x11 | 0;
          x9 ^= u << 13 | u >>> 32 - 13;
          u = x9 + x8 | 0;
          x10 ^= u << 18 | u >>> 32 - 18;
          u = x15 + x14 | 0;
          x12 ^= u << 7 | u >>> 32 - 7;
          u = x12 + x15 | 0;
          x13 ^= u << 9 | u >>> 32 - 9;
          u = x13 + x12 | 0;
          x14 ^= u << 13 | u >>> 32 - 13;
          u = x14 + x13 | 0;
          x15 ^= u << 18 | u >>> 32 - 18;
        }
        o[0] = x0 >>> 0 & 255;
        o[1] = x0 >>> 8 & 255;
        o[2] = x0 >>> 16 & 255;
        o[3] = x0 >>> 24 & 255;
        o[4] = x5 >>> 0 & 255;
        o[5] = x5 >>> 8 & 255;
        o[6] = x5 >>> 16 & 255;
        o[7] = x5 >>> 24 & 255;
        o[8] = x10 >>> 0 & 255;
        o[9] = x10 >>> 8 & 255;
        o[10] = x10 >>> 16 & 255;
        o[11] = x10 >>> 24 & 255;
        o[12] = x15 >>> 0 & 255;
        o[13] = x15 >>> 8 & 255;
        o[14] = x15 >>> 16 & 255;
        o[15] = x15 >>> 24 & 255;
        o[16] = x6 >>> 0 & 255;
        o[17] = x6 >>> 8 & 255;
        o[18] = x6 >>> 16 & 255;
        o[19] = x6 >>> 24 & 255;
        o[20] = x7 >>> 0 & 255;
        o[21] = x7 >>> 8 & 255;
        o[22] = x7 >>> 16 & 255;
        o[23] = x7 >>> 24 & 255;
        o[24] = x8 >>> 0 & 255;
        o[25] = x8 >>> 8 & 255;
        o[26] = x8 >>> 16 & 255;
        o[27] = x8 >>> 24 & 255;
        o[28] = x9 >>> 0 & 255;
        o[29] = x9 >>> 8 & 255;
        o[30] = x9 >>> 16 & 255;
        o[31] = x9 >>> 24 & 255;
      }
      function crypto_core_salsa20(out, inp, k, c) {
        core_salsa20(out, inp, k, c);
      }
      function crypto_core_hsalsa20(out, inp, k, c) {
        core_hsalsa20(out, inp, k, c);
      }
      var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
      function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i2;
        for (i2 = 0; i2 < 16; i2++) z[i2] = 0;
        for (i2 = 0; i2 < 8; i2++) z[i2] = n[i2];
        while (b >= 64) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i2 = 0; i2 < 64; i2++) c[cpos + i2] = m[mpos + i2] ^ x[i2];
          u = 1;
          for (i2 = 8; i2 < 16; i2++) {
            u = u + (z[i2] & 255) | 0;
            z[i2] = u & 255;
            u >>>= 8;
          }
          b -= 64;
          cpos += 64;
          mpos += 64;
        }
        if (b > 0) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i2 = 0; i2 < b; i2++) c[cpos + i2] = m[mpos + i2] ^ x[i2];
        }
        return 0;
      }
      function crypto_stream_salsa20(c, cpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i2;
        for (i2 = 0; i2 < 16; i2++) z[i2] = 0;
        for (i2 = 0; i2 < 8; i2++) z[i2] = n[i2];
        while (b >= 64) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i2 = 0; i2 < 64; i2++) c[cpos + i2] = x[i2];
          u = 1;
          for (i2 = 8; i2 < 16; i2++) {
            u = u + (z[i2] & 255) | 0;
            z[i2] = u & 255;
            u >>>= 8;
          }
          b -= 64;
          cpos += 64;
        }
        if (b > 0) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i2 = 0; i2 < b; i2++) c[cpos + i2] = x[i2];
        }
        return 0;
      }
      function crypto_stream(c, cpos, d, n, k) {
        var s2 = new Uint8Array(32);
        crypto_core_hsalsa20(s2, n, k, sigma);
        var sn = new Uint8Array(8);
        for (var i2 = 0; i2 < 8; i2++) sn[i2] = n[i2 + 16];
        return crypto_stream_salsa20(c, cpos, d, sn, s2);
      }
      function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
        var s2 = new Uint8Array(32);
        crypto_core_hsalsa20(s2, n, k, sigma);
        var sn = new Uint8Array(8);
        for (var i2 = 0; i2 < 8; i2++) sn[i2] = n[i2 + 16];
        return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s2);
      }
      var poly1305 = function(key2) {
        this.buffer = new Uint8Array(16);
        this.r = new Uint16Array(10);
        this.h = new Uint16Array(10);
        this.pad = new Uint16Array(8);
        this.leftover = 0;
        this.fin = 0;
        var t0, t1, t2, t3, t4, t5, t6, t7;
        t0 = key2[0] & 255 | (key2[1] & 255) << 8;
        this.r[0] = t0 & 8191;
        t1 = key2[2] & 255 | (key2[3] & 255) << 8;
        this.r[1] = (t0 >>> 13 | t1 << 3) & 8191;
        t2 = key2[4] & 255 | (key2[5] & 255) << 8;
        this.r[2] = (t1 >>> 10 | t2 << 6) & 7939;
        t3 = key2[6] & 255 | (key2[7] & 255) << 8;
        this.r[3] = (t2 >>> 7 | t3 << 9) & 8191;
        t4 = key2[8] & 255 | (key2[9] & 255) << 8;
        this.r[4] = (t3 >>> 4 | t4 << 12) & 255;
        this.r[5] = t4 >>> 1 & 8190;
        t5 = key2[10] & 255 | (key2[11] & 255) << 8;
        this.r[6] = (t4 >>> 14 | t5 << 2) & 8191;
        t6 = key2[12] & 255 | (key2[13] & 255) << 8;
        this.r[7] = (t5 >>> 11 | t6 << 5) & 8065;
        t7 = key2[14] & 255 | (key2[15] & 255) << 8;
        this.r[8] = (t6 >>> 8 | t7 << 8) & 8191;
        this.r[9] = t7 >>> 5 & 127;
        this.pad[0] = key2[16] & 255 | (key2[17] & 255) << 8;
        this.pad[1] = key2[18] & 255 | (key2[19] & 255) << 8;
        this.pad[2] = key2[20] & 255 | (key2[21] & 255) << 8;
        this.pad[3] = key2[22] & 255 | (key2[23] & 255) << 8;
        this.pad[4] = key2[24] & 255 | (key2[25] & 255) << 8;
        this.pad[5] = key2[26] & 255 | (key2[27] & 255) << 8;
        this.pad[6] = key2[28] & 255 | (key2[29] & 255) << 8;
        this.pad[7] = key2[30] & 255 | (key2[31] & 255) << 8;
      };
      poly1305.prototype.blocks = function(m, mpos, bytes2) {
        var hibit = this.fin ? 0 : 1 << 11;
        var t0, t1, t2, t3, t4, t5, t6, t7, c;
        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
        var h0 = this.h[0], h1 = this.h[1], h2 = this.h[2], h3 = this.h[3], h4 = this.h[4], h5 = this.h[5], h6 = this.h[6], h7 = this.h[7], h8 = this.h[8], h9 = this.h[9];
        var r0 = this.r[0], r1 = this.r[1], r2 = this.r[2], r3 = this.r[3], r4 = this.r[4], r5 = this.r[5], r6 = this.r[6], r7 = this.r[7], r8 = this.r[8], r9 = this.r[9];
        while (bytes2 >= 16) {
          t0 = m[mpos + 0] & 255 | (m[mpos + 1] & 255) << 8;
          h0 += t0 & 8191;
          t1 = m[mpos + 2] & 255 | (m[mpos + 3] & 255) << 8;
          h1 += (t0 >>> 13 | t1 << 3) & 8191;
          t2 = m[mpos + 4] & 255 | (m[mpos + 5] & 255) << 8;
          h2 += (t1 >>> 10 | t2 << 6) & 8191;
          t3 = m[mpos + 6] & 255 | (m[mpos + 7] & 255) << 8;
          h3 += (t2 >>> 7 | t3 << 9) & 8191;
          t4 = m[mpos + 8] & 255 | (m[mpos + 9] & 255) << 8;
          h4 += (t3 >>> 4 | t4 << 12) & 8191;
          h5 += t4 >>> 1 & 8191;
          t5 = m[mpos + 10] & 255 | (m[mpos + 11] & 255) << 8;
          h6 += (t4 >>> 14 | t5 << 2) & 8191;
          t6 = m[mpos + 12] & 255 | (m[mpos + 13] & 255) << 8;
          h7 += (t5 >>> 11 | t6 << 5) & 8191;
          t7 = m[mpos + 14] & 255 | (m[mpos + 15] & 255) << 8;
          h8 += (t6 >>> 8 | t7 << 8) & 8191;
          h9 += t7 >>> 5 | hibit;
          c = 0;
          d0 = c;
          d0 += h0 * r0;
          d0 += h1 * (5 * r9);
          d0 += h2 * (5 * r8);
          d0 += h3 * (5 * r7);
          d0 += h4 * (5 * r6);
          c = d0 >>> 13;
          d0 &= 8191;
          d0 += h5 * (5 * r5);
          d0 += h6 * (5 * r4);
          d0 += h7 * (5 * r3);
          d0 += h8 * (5 * r2);
          d0 += h9 * (5 * r1);
          c += d0 >>> 13;
          d0 &= 8191;
          d1 = c;
          d1 += h0 * r1;
          d1 += h1 * r0;
          d1 += h2 * (5 * r9);
          d1 += h3 * (5 * r8);
          d1 += h4 * (5 * r7);
          c = d1 >>> 13;
          d1 &= 8191;
          d1 += h5 * (5 * r6);
          d1 += h6 * (5 * r5);
          d1 += h7 * (5 * r4);
          d1 += h8 * (5 * r3);
          d1 += h9 * (5 * r2);
          c += d1 >>> 13;
          d1 &= 8191;
          d2 = c;
          d2 += h0 * r2;
          d2 += h1 * r1;
          d2 += h2 * r0;
          d2 += h3 * (5 * r9);
          d2 += h4 * (5 * r8);
          c = d2 >>> 13;
          d2 &= 8191;
          d2 += h5 * (5 * r7);
          d2 += h6 * (5 * r6);
          d2 += h7 * (5 * r5);
          d2 += h8 * (5 * r4);
          d2 += h9 * (5 * r3);
          c += d2 >>> 13;
          d2 &= 8191;
          d3 = c;
          d3 += h0 * r3;
          d3 += h1 * r2;
          d3 += h2 * r1;
          d3 += h3 * r0;
          d3 += h4 * (5 * r9);
          c = d3 >>> 13;
          d3 &= 8191;
          d3 += h5 * (5 * r8);
          d3 += h6 * (5 * r7);
          d3 += h7 * (5 * r6);
          d3 += h8 * (5 * r5);
          d3 += h9 * (5 * r4);
          c += d3 >>> 13;
          d3 &= 8191;
          d4 = c;
          d4 += h0 * r4;
          d4 += h1 * r3;
          d4 += h2 * r2;
          d4 += h3 * r1;
          d4 += h4 * r0;
          c = d4 >>> 13;
          d4 &= 8191;
          d4 += h5 * (5 * r9);
          d4 += h6 * (5 * r8);
          d4 += h7 * (5 * r7);
          d4 += h8 * (5 * r6);
          d4 += h9 * (5 * r5);
          c += d4 >>> 13;
          d4 &= 8191;
          d5 = c;
          d5 += h0 * r5;
          d5 += h1 * r4;
          d5 += h2 * r3;
          d5 += h3 * r2;
          d5 += h4 * r1;
          c = d5 >>> 13;
          d5 &= 8191;
          d5 += h5 * r0;
          d5 += h6 * (5 * r9);
          d5 += h7 * (5 * r8);
          d5 += h8 * (5 * r7);
          d5 += h9 * (5 * r6);
          c += d5 >>> 13;
          d5 &= 8191;
          d6 = c;
          d6 += h0 * r6;
          d6 += h1 * r5;
          d6 += h2 * r4;
          d6 += h3 * r3;
          d6 += h4 * r2;
          c = d6 >>> 13;
          d6 &= 8191;
          d6 += h5 * r1;
          d6 += h6 * r0;
          d6 += h7 * (5 * r9);
          d6 += h8 * (5 * r8);
          d6 += h9 * (5 * r7);
          c += d6 >>> 13;
          d6 &= 8191;
          d7 = c;
          d7 += h0 * r7;
          d7 += h1 * r6;
          d7 += h2 * r5;
          d7 += h3 * r4;
          d7 += h4 * r3;
          c = d7 >>> 13;
          d7 &= 8191;
          d7 += h5 * r2;
          d7 += h6 * r1;
          d7 += h7 * r0;
          d7 += h8 * (5 * r9);
          d7 += h9 * (5 * r8);
          c += d7 >>> 13;
          d7 &= 8191;
          d8 = c;
          d8 += h0 * r8;
          d8 += h1 * r7;
          d8 += h2 * r6;
          d8 += h3 * r5;
          d8 += h4 * r4;
          c = d8 >>> 13;
          d8 &= 8191;
          d8 += h5 * r3;
          d8 += h6 * r2;
          d8 += h7 * r1;
          d8 += h8 * r0;
          d8 += h9 * (5 * r9);
          c += d8 >>> 13;
          d8 &= 8191;
          d9 = c;
          d9 += h0 * r9;
          d9 += h1 * r8;
          d9 += h2 * r7;
          d9 += h3 * r6;
          d9 += h4 * r5;
          c = d9 >>> 13;
          d9 &= 8191;
          d9 += h5 * r4;
          d9 += h6 * r3;
          d9 += h7 * r2;
          d9 += h8 * r1;
          d9 += h9 * r0;
          c += d9 >>> 13;
          d9 &= 8191;
          c = (c << 2) + c | 0;
          c = c + d0 | 0;
          d0 = c & 8191;
          c = c >>> 13;
          d1 += c;
          h0 = d0;
          h1 = d1;
          h2 = d2;
          h3 = d3;
          h4 = d4;
          h5 = d5;
          h6 = d6;
          h7 = d7;
          h8 = d8;
          h9 = d9;
          mpos += 16;
          bytes2 -= 16;
        }
        this.h[0] = h0;
        this.h[1] = h1;
        this.h[2] = h2;
        this.h[3] = h3;
        this.h[4] = h4;
        this.h[5] = h5;
        this.h[6] = h6;
        this.h[7] = h7;
        this.h[8] = h8;
        this.h[9] = h9;
      };
      poly1305.prototype.finish = function(mac, macpos) {
        var g = new Uint16Array(10);
        var c, mask2, f2, i2;
        if (this.leftover) {
          i2 = this.leftover;
          this.buffer[i2++] = 1;
          for (; i2 < 16; i2++) this.buffer[i2] = 0;
          this.fin = 1;
          this.blocks(this.buffer, 0, 16);
        }
        c = this.h[1] >>> 13;
        this.h[1] &= 8191;
        for (i2 = 2; i2 < 10; i2++) {
          this.h[i2] += c;
          c = this.h[i2] >>> 13;
          this.h[i2] &= 8191;
        }
        this.h[0] += c * 5;
        c = this.h[0] >>> 13;
        this.h[0] &= 8191;
        this.h[1] += c;
        c = this.h[1] >>> 13;
        this.h[1] &= 8191;
        this.h[2] += c;
        g[0] = this.h[0] + 5;
        c = g[0] >>> 13;
        g[0] &= 8191;
        for (i2 = 1; i2 < 10; i2++) {
          g[i2] = this.h[i2] + c;
          c = g[i2] >>> 13;
          g[i2] &= 8191;
        }
        g[9] -= 1 << 13;
        mask2 = (c ^ 1) - 1;
        for (i2 = 0; i2 < 10; i2++) g[i2] &= mask2;
        mask2 = ~mask2;
        for (i2 = 0; i2 < 10; i2++) this.h[i2] = this.h[i2] & mask2 | g[i2];
        this.h[0] = (this.h[0] | this.h[1] << 13) & 65535;
        this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 65535;
        this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 65535;
        this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 65535;
        this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 65535;
        this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 65535;
        this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 65535;
        this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 65535;
        f2 = this.h[0] + this.pad[0];
        this.h[0] = f2 & 65535;
        for (i2 = 1; i2 < 8; i2++) {
          f2 = (this.h[i2] + this.pad[i2] | 0) + (f2 >>> 16) | 0;
          this.h[i2] = f2 & 65535;
        }
        mac[macpos + 0] = this.h[0] >>> 0 & 255;
        mac[macpos + 1] = this.h[0] >>> 8 & 255;
        mac[macpos + 2] = this.h[1] >>> 0 & 255;
        mac[macpos + 3] = this.h[1] >>> 8 & 255;
        mac[macpos + 4] = this.h[2] >>> 0 & 255;
        mac[macpos + 5] = this.h[2] >>> 8 & 255;
        mac[macpos + 6] = this.h[3] >>> 0 & 255;
        mac[macpos + 7] = this.h[3] >>> 8 & 255;
        mac[macpos + 8] = this.h[4] >>> 0 & 255;
        mac[macpos + 9] = this.h[4] >>> 8 & 255;
        mac[macpos + 10] = this.h[5] >>> 0 & 255;
        mac[macpos + 11] = this.h[5] >>> 8 & 255;
        mac[macpos + 12] = this.h[6] >>> 0 & 255;
        mac[macpos + 13] = this.h[6] >>> 8 & 255;
        mac[macpos + 14] = this.h[7] >>> 0 & 255;
        mac[macpos + 15] = this.h[7] >>> 8 & 255;
      };
      poly1305.prototype.update = function(m, mpos, bytes2) {
        var i2, want;
        if (this.leftover) {
          want = 16 - this.leftover;
          if (want > bytes2)
            want = bytes2;
          for (i2 = 0; i2 < want; i2++)
            this.buffer[this.leftover + i2] = m[mpos + i2];
          bytes2 -= want;
          mpos += want;
          this.leftover += want;
          if (this.leftover < 16)
            return;
          this.blocks(this.buffer, 0, 16);
          this.leftover = 0;
        }
        if (bytes2 >= 16) {
          want = bytes2 - bytes2 % 16;
          this.blocks(m, mpos, want);
          mpos += want;
          bytes2 -= want;
        }
        if (bytes2) {
          for (i2 = 0; i2 < bytes2; i2++)
            this.buffer[this.leftover + i2] = m[mpos + i2];
          this.leftover += bytes2;
        }
      };
      function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
        var s2 = new poly1305(k);
        s2.update(m, mpos, n);
        s2.finish(out, outpos);
        return 0;
      }
      function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
        var x = new Uint8Array(16);
        crypto_onetimeauth(x, 0, m, mpos, n, k);
        return crypto_verify_16(h, hpos, x, 0);
      }
      function crypto_secretbox(c, m, d, n, k) {
        var i2;
        if (d < 32) return -1;
        crypto_stream_xor(c, 0, m, 0, d, n, k);
        crypto_onetimeauth(c, 16, c, 32, d - 32, c);
        for (i2 = 0; i2 < 16; i2++) c[i2] = 0;
        return 0;
      }
      function crypto_secretbox_open(m, c, d, n, k) {
        var i2;
        var x = new Uint8Array(32);
        if (d < 32) return -1;
        crypto_stream(x, 0, 32, n, k);
        if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
        crypto_stream_xor(m, 0, c, 0, d, n, k);
        for (i2 = 0; i2 < 32; i2++) m[i2] = 0;
        return 0;
      }
      function set25519(r2, a) {
        var i2;
        for (i2 = 0; i2 < 16; i2++) r2[i2] = a[i2] | 0;
      }
      function car25519(o) {
        var i2, v, c = 1;
        for (i2 = 0; i2 < 16; i2++) {
          v = o[i2] + c + 65535;
          c = Math.floor(v / 65536);
          o[i2] = v - c * 65536;
        }
        o[0] += c - 1 + 37 * (c - 1);
      }
      function sel25519(p, q, b) {
        var t2, c = ~(b - 1);
        for (var i2 = 0; i2 < 16; i2++) {
          t2 = c & (p[i2] ^ q[i2]);
          p[i2] ^= t2;
          q[i2] ^= t2;
        }
      }
      function pack25519(o, n) {
        var i2, j, b;
        var m = gf(), t2 = gf();
        for (i2 = 0; i2 < 16; i2++) t2[i2] = n[i2];
        car25519(t2);
        car25519(t2);
        car25519(t2);
        for (j = 0; j < 2; j++) {
          m[0] = t2[0] - 65517;
          for (i2 = 1; i2 < 15; i2++) {
            m[i2] = t2[i2] - 65535 - (m[i2 - 1] >> 16 & 1);
            m[i2 - 1] &= 65535;
          }
          m[15] = t2[15] - 32767 - (m[14] >> 16 & 1);
          b = m[15] >> 16 & 1;
          m[14] &= 65535;
          sel25519(t2, m, 1 - b);
        }
        for (i2 = 0; i2 < 16; i2++) {
          o[2 * i2] = t2[i2] & 255;
          o[2 * i2 + 1] = t2[i2] >> 8;
        }
      }
      function neq25519(a, b) {
        var c = new Uint8Array(32), d = new Uint8Array(32);
        pack25519(c, a);
        pack25519(d, b);
        return crypto_verify_32(c, 0, d, 0);
      }
      function par25519(a) {
        var d = new Uint8Array(32);
        pack25519(d, a);
        return d[0] & 1;
      }
      function unpack25519(o, n) {
        var i2;
        for (i2 = 0; i2 < 16; i2++) o[i2] = n[2 * i2] + (n[2 * i2 + 1] << 8);
        o[15] &= 32767;
      }
      function A(o, a, b) {
        for (var i2 = 0; i2 < 16; i2++) o[i2] = a[i2] + b[i2];
      }
      function Z(o, a, b) {
        for (var i2 = 0; i2 < 16; i2++) o[i2] = a[i2] - b[i2];
      }
      function M(o, a, b) {
        var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
        v = a[0];
        t0 += v * b0;
        t1 += v * b1;
        t2 += v * b2;
        t3 += v * b3;
        t4 += v * b4;
        t5 += v * b5;
        t6 += v * b6;
        t7 += v * b7;
        t8 += v * b8;
        t9 += v * b9;
        t10 += v * b10;
        t11 += v * b11;
        t12 += v * b12;
        t13 += v * b13;
        t14 += v * b14;
        t15 += v * b15;
        v = a[1];
        t1 += v * b0;
        t2 += v * b1;
        t3 += v * b2;
        t4 += v * b3;
        t5 += v * b4;
        t6 += v * b5;
        t7 += v * b6;
        t8 += v * b7;
        t9 += v * b8;
        t10 += v * b9;
        t11 += v * b10;
        t12 += v * b11;
        t13 += v * b12;
        t14 += v * b13;
        t15 += v * b14;
        t16 += v * b15;
        v = a[2];
        t2 += v * b0;
        t3 += v * b1;
        t4 += v * b2;
        t5 += v * b3;
        t6 += v * b4;
        t7 += v * b5;
        t8 += v * b6;
        t9 += v * b7;
        t10 += v * b8;
        t11 += v * b9;
        t12 += v * b10;
        t13 += v * b11;
        t14 += v * b12;
        t15 += v * b13;
        t16 += v * b14;
        t17 += v * b15;
        v = a[3];
        t3 += v * b0;
        t4 += v * b1;
        t5 += v * b2;
        t6 += v * b3;
        t7 += v * b4;
        t8 += v * b5;
        t9 += v * b6;
        t10 += v * b7;
        t11 += v * b8;
        t12 += v * b9;
        t13 += v * b10;
        t14 += v * b11;
        t15 += v * b12;
        t16 += v * b13;
        t17 += v * b14;
        t18 += v * b15;
        v = a[4];
        t4 += v * b0;
        t5 += v * b1;
        t6 += v * b2;
        t7 += v * b3;
        t8 += v * b4;
        t9 += v * b5;
        t10 += v * b6;
        t11 += v * b7;
        t12 += v * b8;
        t13 += v * b9;
        t14 += v * b10;
        t15 += v * b11;
        t16 += v * b12;
        t17 += v * b13;
        t18 += v * b14;
        t19 += v * b15;
        v = a[5];
        t5 += v * b0;
        t6 += v * b1;
        t7 += v * b2;
        t8 += v * b3;
        t9 += v * b4;
        t10 += v * b5;
        t11 += v * b6;
        t12 += v * b7;
        t13 += v * b8;
        t14 += v * b9;
        t15 += v * b10;
        t16 += v * b11;
        t17 += v * b12;
        t18 += v * b13;
        t19 += v * b14;
        t20 += v * b15;
        v = a[6];
        t6 += v * b0;
        t7 += v * b1;
        t8 += v * b2;
        t9 += v * b3;
        t10 += v * b4;
        t11 += v * b5;
        t12 += v * b6;
        t13 += v * b7;
        t14 += v * b8;
        t15 += v * b9;
        t16 += v * b10;
        t17 += v * b11;
        t18 += v * b12;
        t19 += v * b13;
        t20 += v * b14;
        t21 += v * b15;
        v = a[7];
        t7 += v * b0;
        t8 += v * b1;
        t9 += v * b2;
        t10 += v * b3;
        t11 += v * b4;
        t12 += v * b5;
        t13 += v * b6;
        t14 += v * b7;
        t15 += v * b8;
        t16 += v * b9;
        t17 += v * b10;
        t18 += v * b11;
        t19 += v * b12;
        t20 += v * b13;
        t21 += v * b14;
        t22 += v * b15;
        v = a[8];
        t8 += v * b0;
        t9 += v * b1;
        t10 += v * b2;
        t11 += v * b3;
        t12 += v * b4;
        t13 += v * b5;
        t14 += v * b6;
        t15 += v * b7;
        t16 += v * b8;
        t17 += v * b9;
        t18 += v * b10;
        t19 += v * b11;
        t20 += v * b12;
        t21 += v * b13;
        t22 += v * b14;
        t23 += v * b15;
        v = a[9];
        t9 += v * b0;
        t10 += v * b1;
        t11 += v * b2;
        t12 += v * b3;
        t13 += v * b4;
        t14 += v * b5;
        t15 += v * b6;
        t16 += v * b7;
        t17 += v * b8;
        t18 += v * b9;
        t19 += v * b10;
        t20 += v * b11;
        t21 += v * b12;
        t22 += v * b13;
        t23 += v * b14;
        t24 += v * b15;
        v = a[10];
        t10 += v * b0;
        t11 += v * b1;
        t12 += v * b2;
        t13 += v * b3;
        t14 += v * b4;
        t15 += v * b5;
        t16 += v * b6;
        t17 += v * b7;
        t18 += v * b8;
        t19 += v * b9;
        t20 += v * b10;
        t21 += v * b11;
        t22 += v * b12;
        t23 += v * b13;
        t24 += v * b14;
        t25 += v * b15;
        v = a[11];
        t11 += v * b0;
        t12 += v * b1;
        t13 += v * b2;
        t14 += v * b3;
        t15 += v * b4;
        t16 += v * b5;
        t17 += v * b6;
        t18 += v * b7;
        t19 += v * b8;
        t20 += v * b9;
        t21 += v * b10;
        t22 += v * b11;
        t23 += v * b12;
        t24 += v * b13;
        t25 += v * b14;
        t26 += v * b15;
        v = a[12];
        t12 += v * b0;
        t13 += v * b1;
        t14 += v * b2;
        t15 += v * b3;
        t16 += v * b4;
        t17 += v * b5;
        t18 += v * b6;
        t19 += v * b7;
        t20 += v * b8;
        t21 += v * b9;
        t22 += v * b10;
        t23 += v * b11;
        t24 += v * b12;
        t25 += v * b13;
        t26 += v * b14;
        t27 += v * b15;
        v = a[13];
        t13 += v * b0;
        t14 += v * b1;
        t15 += v * b2;
        t16 += v * b3;
        t17 += v * b4;
        t18 += v * b5;
        t19 += v * b6;
        t20 += v * b7;
        t21 += v * b8;
        t22 += v * b9;
        t23 += v * b10;
        t24 += v * b11;
        t25 += v * b12;
        t26 += v * b13;
        t27 += v * b14;
        t28 += v * b15;
        v = a[14];
        t14 += v * b0;
        t15 += v * b1;
        t16 += v * b2;
        t17 += v * b3;
        t18 += v * b4;
        t19 += v * b5;
        t20 += v * b6;
        t21 += v * b7;
        t22 += v * b8;
        t23 += v * b9;
        t24 += v * b10;
        t25 += v * b11;
        t26 += v * b12;
        t27 += v * b13;
        t28 += v * b14;
        t29 += v * b15;
        v = a[15];
        t15 += v * b0;
        t16 += v * b1;
        t17 += v * b2;
        t18 += v * b3;
        t19 += v * b4;
        t20 += v * b5;
        t21 += v * b6;
        t22 += v * b7;
        t23 += v * b8;
        t24 += v * b9;
        t25 += v * b10;
        t26 += v * b11;
        t27 += v * b12;
        t28 += v * b13;
        t29 += v * b14;
        t30 += v * b15;
        t0 += 38 * t16;
        t1 += 38 * t17;
        t2 += 38 * t18;
        t3 += 38 * t19;
        t4 += 38 * t20;
        t5 += 38 * t21;
        t6 += 38 * t22;
        t7 += 38 * t23;
        t8 += 38 * t24;
        t9 += 38 * t25;
        t10 += 38 * t26;
        t11 += 38 * t27;
        t12 += 38 * t28;
        t13 += 38 * t29;
        t14 += 38 * t30;
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        o[0] = t0;
        o[1] = t1;
        o[2] = t2;
        o[3] = t3;
        o[4] = t4;
        o[5] = t5;
        o[6] = t6;
        o[7] = t7;
        o[8] = t8;
        o[9] = t9;
        o[10] = t10;
        o[11] = t11;
        o[12] = t12;
        o[13] = t13;
        o[14] = t14;
        o[15] = t15;
      }
      function S(o, a) {
        M(o, a, a);
      }
      function inv25519(o, i2) {
        var c = gf();
        var a;
        for (a = 0; a < 16; a++) c[a] = i2[a];
        for (a = 253; a >= 0; a--) {
          S(c, c);
          if (a !== 2 && a !== 4) M(c, c, i2);
        }
        for (a = 0; a < 16; a++) o[a] = c[a];
      }
      function pow2523(o, i2) {
        var c = gf();
        var a;
        for (a = 0; a < 16; a++) c[a] = i2[a];
        for (a = 250; a >= 0; a--) {
          S(c, c);
          if (a !== 1) M(c, c, i2);
        }
        for (a = 0; a < 16; a++) o[a] = c[a];
      }
      function crypto_scalarmult(q, n, p) {
        var z = new Uint8Array(32);
        var x = new Float64Array(80), r2, i2;
        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f2 = gf();
        for (i2 = 0; i2 < 31; i2++) z[i2] = n[i2];
        z[31] = n[31] & 127 | 64;
        z[0] &= 248;
        unpack25519(x, p);
        for (i2 = 0; i2 < 16; i2++) {
          b[i2] = x[i2];
          d[i2] = a[i2] = c[i2] = 0;
        }
        a[0] = d[0] = 1;
        for (i2 = 254; i2 >= 0; --i2) {
          r2 = z[i2 >>> 3] >>> (i2 & 7) & 1;
          sel25519(a, b, r2);
          sel25519(c, d, r2);
          A(e, a, c);
          Z(a, a, c);
          A(c, b, d);
          Z(b, b, d);
          S(d, e);
          S(f2, a);
          M(a, c, a);
          M(c, b, e);
          A(e, a, c);
          Z(a, a, c);
          S(b, a);
          Z(c, d, f2);
          M(a, c, _121665);
          A(a, a, d);
          M(c, c, a);
          M(a, d, f2);
          M(d, b, x);
          S(b, e);
          sel25519(a, b, r2);
          sel25519(c, d, r2);
        }
        for (i2 = 0; i2 < 16; i2++) {
          x[i2 + 16] = a[i2];
          x[i2 + 32] = c[i2];
          x[i2 + 48] = b[i2];
          x[i2 + 64] = d[i2];
        }
        var x32 = x.subarray(32);
        var x16 = x.subarray(16);
        inv25519(x32, x32);
        M(x16, x16, x32);
        pack25519(q, x16);
        return 0;
      }
      function crypto_scalarmult_base(q, n) {
        return crypto_scalarmult(q, n, _9);
      }
      function crypto_box_keypair(y, x) {
        randombytes(x, 32);
        return crypto_scalarmult_base(y, x);
      }
      function crypto_box_beforenm(k, y, x) {
        var s2 = new Uint8Array(32);
        crypto_scalarmult(s2, x, y);
        return crypto_core_hsalsa20(k, _0, s2, sigma);
      }
      var crypto_box_afternm = crypto_secretbox;
      var crypto_box_open_afternm = crypto_secretbox_open;
      function crypto_box(c, m, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_afternm(c, m, d, n, k);
      }
      function crypto_box_open(m, c, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_open_afternm(m, c, d, n, k);
      }
      var K2 = [
        1116352408,
        3609767458,
        1899447441,
        602891725,
        3049323471,
        3964484399,
        3921009573,
        2173295548,
        961987163,
        4081628472,
        1508970993,
        3053834265,
        2453635748,
        2937671579,
        2870763221,
        3664609560,
        3624381080,
        2734883394,
        310598401,
        1164996542,
        607225278,
        1323610764,
        1426881987,
        3590304994,
        1925078388,
        4068182383,
        2162078206,
        991336113,
        2614888103,
        633803317,
        3248222580,
        3479774868,
        3835390401,
        2666613458,
        4022224774,
        944711139,
        264347078,
        2341262773,
        604807628,
        2007800933,
        770255983,
        1495990901,
        1249150122,
        1856431235,
        1555081692,
        3175218132,
        1996064986,
        2198950837,
        2554220882,
        3999719339,
        2821834349,
        766784016,
        2952996808,
        2566594879,
        3210313671,
        3203337956,
        3336571891,
        1034457026,
        3584528711,
        2466948901,
        113926993,
        3758326383,
        338241895,
        168717936,
        666307205,
        1188179964,
        773529912,
        1546045734,
        1294757372,
        1522805485,
        1396182291,
        2643833823,
        1695183700,
        2343527390,
        1986661051,
        1014477480,
        2177026350,
        1206759142,
        2456956037,
        344077627,
        2730485921,
        1290863460,
        2820302411,
        3158454273,
        3259730800,
        3505952657,
        3345764771,
        106217008,
        3516065817,
        3606008344,
        3600352804,
        1432725776,
        4094571909,
        1467031594,
        275423344,
        851169720,
        430227734,
        3100823752,
        506948616,
        1363258195,
        659060556,
        3750685593,
        883997877,
        3785050280,
        958139571,
        3318307427,
        1322822218,
        3812723403,
        1537002063,
        2003034995,
        1747873779,
        3602036899,
        1955562222,
        1575990012,
        2024104815,
        1125592928,
        2227730452,
        2716904306,
        2361852424,
        442776044,
        2428436474,
        593698344,
        2756734187,
        3733110249,
        3204031479,
        2999351573,
        3329325298,
        3815920427,
        3391569614,
        3928383900,
        3515267271,
        566280711,
        3940187606,
        3454069534,
        4118630271,
        4000239992,
        116418474,
        1914138554,
        174292421,
        2731055270,
        289380356,
        3203993006,
        460393269,
        320620315,
        685471733,
        587496836,
        852142971,
        1086792851,
        1017036298,
        365543100,
        1126000580,
        2618297676,
        1288033470,
        3409855158,
        1501505948,
        4234509866,
        1607167915,
        987167468,
        1816402316,
        1246189591
      ];
      function crypto_hashblocks_hl(hh, hl, m, n) {
        var wh = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i2, j, h, l, a, b, c, d;
        var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
        var pos = 0;
        while (n >= 128) {
          for (i2 = 0; i2 < 16; i2++) {
            j = 8 * i2 + pos;
            wh[i2] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
            wl[i2] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
          }
          for (i2 = 0; i2 < 80; i2++) {
            bh0 = ah0;
            bh1 = ah1;
            bh2 = ah2;
            bh3 = ah3;
            bh4 = ah4;
            bh5 = ah5;
            bh6 = ah6;
            bh7 = ah7;
            bl0 = al0;
            bl1 = al1;
            bl2 = al2;
            bl3 = al3;
            bl4 = al4;
            bl5 = al5;
            bl6 = al6;
            bl7 = al7;
            h = ah7;
            l = al7;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
            l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            h = ah4 & ah5 ^ ~ah4 & ah6;
            l = al4 & al5 ^ ~al4 & al6;
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            h = K2[i2 * 2];
            l = K2[i2 * 2 + 1];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            h = wh[i2 % 16];
            l = wl[i2 % 16];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            th = c & 65535 | d << 16;
            tl = a & 65535 | b << 16;
            h = th;
            l = tl;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
            l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
            l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            bh7 = c & 65535 | d << 16;
            bl7 = a & 65535 | b << 16;
            h = bh3;
            l = bl3;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = th;
            l = tl;
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            bh3 = c & 65535 | d << 16;
            bl3 = a & 65535 | b << 16;
            ah1 = bh0;
            ah2 = bh1;
            ah3 = bh2;
            ah4 = bh3;
            ah5 = bh4;
            ah6 = bh5;
            ah7 = bh6;
            ah0 = bh7;
            al1 = bl0;
            al2 = bl1;
            al3 = bl2;
            al4 = bl3;
            al5 = bl4;
            al6 = bl5;
            al7 = bl6;
            al0 = bl7;
            if (i2 % 16 === 15) {
              for (j = 0; j < 16; j++) {
                h = wh[j];
                l = wl[j];
                a = l & 65535;
                b = l >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = wh[(j + 9) % 16];
                l = wl[(j + 9) % 16];
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                th = wh[(j + 1) % 16];
                tl = wl[(j + 1) % 16];
                h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
                l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                th = wh[(j + 14) % 16];
                tl = wl[(j + 14) % 16];
                h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
                l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                wh[j] = c & 65535 | d << 16;
                wl[j] = a & 65535 | b << 16;
              }
            }
          }
          h = ah0;
          l = al0;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[0];
          l = hl[0];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[0] = ah0 = c & 65535 | d << 16;
          hl[0] = al0 = a & 65535 | b << 16;
          h = ah1;
          l = al1;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[1];
          l = hl[1];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[1] = ah1 = c & 65535 | d << 16;
          hl[1] = al1 = a & 65535 | b << 16;
          h = ah2;
          l = al2;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[2];
          l = hl[2];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[2] = ah2 = c & 65535 | d << 16;
          hl[2] = al2 = a & 65535 | b << 16;
          h = ah3;
          l = al3;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[3];
          l = hl[3];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[3] = ah3 = c & 65535 | d << 16;
          hl[3] = al3 = a & 65535 | b << 16;
          h = ah4;
          l = al4;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[4];
          l = hl[4];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[4] = ah4 = c & 65535 | d << 16;
          hl[4] = al4 = a & 65535 | b << 16;
          h = ah5;
          l = al5;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[5];
          l = hl[5];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[5] = ah5 = c & 65535 | d << 16;
          hl[5] = al5 = a & 65535 | b << 16;
          h = ah6;
          l = al6;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[6];
          l = hl[6];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[6] = ah6 = c & 65535 | d << 16;
          hl[6] = al6 = a & 65535 | b << 16;
          h = ah7;
          l = al7;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[7];
          l = hl[7];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[7] = ah7 = c & 65535 | d << 16;
          hl[7] = al7 = a & 65535 | b << 16;
          pos += 128;
          n -= 128;
        }
        return n;
      }
      function crypto_hash(out, m, n) {
        var hh = new Int32Array(8), hl = new Int32Array(8), x = new Uint8Array(256), i2, b = n;
        hh[0] = 1779033703;
        hh[1] = 3144134277;
        hh[2] = 1013904242;
        hh[3] = 2773480762;
        hh[4] = 1359893119;
        hh[5] = 2600822924;
        hh[6] = 528734635;
        hh[7] = 1541459225;
        hl[0] = 4089235720;
        hl[1] = 2227873595;
        hl[2] = 4271175723;
        hl[3] = 1595750129;
        hl[4] = 2917565137;
        hl[5] = 725511199;
        hl[6] = 4215389547;
        hl[7] = 327033209;
        crypto_hashblocks_hl(hh, hl, m, n);
        n %= 128;
        for (i2 = 0; i2 < n; i2++) x[i2] = m[b - n + i2];
        x[n] = 128;
        n = 256 - 128 * (n < 112 ? 1 : 0);
        x[n - 9] = 0;
        ts64(x, n - 8, b / 536870912 | 0, b << 3);
        crypto_hashblocks_hl(hh, hl, x, n);
        for (i2 = 0; i2 < 8; i2++) ts64(out, 8 * i2, hh[i2], hl[i2]);
        return 0;
      }
      function add2(p, q) {
        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f2 = gf(), g = gf(), h = gf(), t2 = gf();
        Z(a, p[1], p[0]);
        Z(t2, q[1], q[0]);
        M(a, a, t2);
        A(b, p[0], p[1]);
        A(t2, q[0], q[1]);
        M(b, b, t2);
        M(c, p[3], q[3]);
        M(c, c, D2);
        M(d, p[2], q[2]);
        A(d, d, d);
        Z(e, b, a);
        Z(f2, d, c);
        A(g, d, c);
        A(h, b, a);
        M(p[0], e, f2);
        M(p[1], h, g);
        M(p[2], g, f2);
        M(p[3], e, h);
      }
      function cswap(p, q, b) {
        var i2;
        for (i2 = 0; i2 < 4; i2++) {
          sel25519(p[i2], q[i2], b);
        }
      }
      function pack2(r2, p) {
        var tx = gf(), ty = gf(), zi = gf();
        inv25519(zi, p[2]);
        M(tx, p[0], zi);
        M(ty, p[1], zi);
        pack25519(r2, ty);
        r2[31] ^= par25519(tx) << 7;
      }
      function scalarmult(p, q, s2) {
        var b, i2;
        set25519(p[0], gf0);
        set25519(p[1], gf1);
        set25519(p[2], gf1);
        set25519(p[3], gf0);
        for (i2 = 255; i2 >= 0; --i2) {
          b = s2[i2 / 8 | 0] >> (i2 & 7) & 1;
          cswap(p, q, b);
          add2(q, p);
          add2(p, p);
          cswap(p, q, b);
        }
      }
      function scalarbase(p, s2) {
        var q = [gf(), gf(), gf(), gf()];
        set25519(q[0], X);
        set25519(q[1], Y);
        set25519(q[2], gf1);
        M(q[3], X, Y);
        scalarmult(p, q, s2);
      }
      function crypto_sign_keypair(pk, sk, seeded) {
        var d = new Uint8Array(64);
        var p = [gf(), gf(), gf(), gf()];
        var i2;
        if (!seeded) randombytes(sk, 32);
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        scalarbase(p, d);
        pack2(pk, p);
        for (i2 = 0; i2 < 32; i2++) sk[i2 + 32] = pk[i2];
        return 0;
      }
      var L = new Float64Array([237, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]);
      function modL(r2, x) {
        var carry, i2, j, k;
        for (i2 = 63; i2 >= 32; --i2) {
          carry = 0;
          for (j = i2 - 32, k = i2 - 12; j < k; ++j) {
            x[j] += carry - 16 * x[i2] * L[j - (i2 - 32)];
            carry = Math.floor((x[j] + 128) / 256);
            x[j] -= carry * 256;
          }
          x[j] += carry;
          x[i2] = 0;
        }
        carry = 0;
        for (j = 0; j < 32; j++) {
          x[j] += carry - (x[31] >> 4) * L[j];
          carry = x[j] >> 8;
          x[j] &= 255;
        }
        for (j = 0; j < 32; j++) x[j] -= carry * L[j];
        for (i2 = 0; i2 < 32; i2++) {
          x[i2 + 1] += x[i2] >> 8;
          r2[i2] = x[i2] & 255;
        }
      }
      function reduce(r2) {
        var x = new Float64Array(64), i2;
        for (i2 = 0; i2 < 64; i2++) x[i2] = r2[i2];
        for (i2 = 0; i2 < 64; i2++) r2[i2] = 0;
        modL(r2, x);
      }
      function crypto_sign(sm, m, n, sk) {
        var d = new Uint8Array(64), h = new Uint8Array(64), r2 = new Uint8Array(64);
        var i2, j, x = new Float64Array(64);
        var p = [gf(), gf(), gf(), gf()];
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        var smlen = n + 64;
        for (i2 = 0; i2 < n; i2++) sm[64 + i2] = m[i2];
        for (i2 = 0; i2 < 32; i2++) sm[32 + i2] = d[32 + i2];
        crypto_hash(r2, sm.subarray(32), n + 32);
        reduce(r2);
        scalarbase(p, r2);
        pack2(sm, p);
        for (i2 = 32; i2 < 64; i2++) sm[i2] = sk[i2];
        crypto_hash(h, sm, n + 64);
        reduce(h);
        for (i2 = 0; i2 < 64; i2++) x[i2] = 0;
        for (i2 = 0; i2 < 32; i2++) x[i2] = r2[i2];
        for (i2 = 0; i2 < 32; i2++) {
          for (j = 0; j < 32; j++) {
            x[i2 + j] += h[i2] * d[j];
          }
        }
        modL(sm.subarray(32), x);
        return smlen;
      }
      function unpackneg(r2, p) {
        var t2 = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
        set25519(r2[2], gf1);
        unpack25519(r2[1], p);
        S(num, r2[1]);
        M(den, num, D);
        Z(num, num, r2[2]);
        A(den, r2[2], den);
        S(den2, den);
        S(den4, den2);
        M(den6, den4, den2);
        M(t2, den6, num);
        M(t2, t2, den);
        pow2523(t2, t2);
        M(t2, t2, num);
        M(t2, t2, den);
        M(t2, t2, den);
        M(r2[0], t2, den);
        S(chk, r2[0]);
        M(chk, chk, den);
        if (neq25519(chk, num)) M(r2[0], r2[0], I);
        S(chk, r2[0]);
        M(chk, chk, den);
        if (neq25519(chk, num)) return -1;
        if (par25519(r2[0]) === p[31] >> 7) Z(r2[0], gf0, r2[0]);
        M(r2[3], r2[0], r2[1]);
        return 0;
      }
      function crypto_sign_open(m, sm, n, pk) {
        var i2;
        var t2 = new Uint8Array(32), h = new Uint8Array(64);
        var p = [gf(), gf(), gf(), gf()], q = [gf(), gf(), gf(), gf()];
        if (n < 64) return -1;
        if (unpackneg(q, pk)) return -1;
        for (i2 = 0; i2 < n; i2++) m[i2] = sm[i2];
        for (i2 = 0; i2 < 32; i2++) m[i2 + 32] = pk[i2];
        crypto_hash(h, m, n);
        reduce(h);
        scalarmult(p, q, h);
        scalarbase(q, sm.subarray(32));
        add2(p, q);
        pack2(t2, p);
        n -= 64;
        if (crypto_verify_32(sm, 0, t2, 0)) {
          for (i2 = 0; i2 < n; i2++) m[i2] = 0;
          return -1;
        }
        for (i2 = 0; i2 < n; i2++) m[i2] = sm[i2 + 64];
        return n;
      }
      var crypto_secretbox_KEYBYTES = 32, crypto_secretbox_NONCEBYTES = 24, crypto_secretbox_ZEROBYTES = 32, crypto_secretbox_BOXZEROBYTES = 16, crypto_scalarmult_BYTES = 32, crypto_scalarmult_SCALARBYTES = 32, crypto_box_PUBLICKEYBYTES = 32, crypto_box_SECRETKEYBYTES = 32, crypto_box_BEFORENMBYTES = 32, crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES, crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES, crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES, crypto_sign_BYTES = 64, crypto_sign_PUBLICKEYBYTES = 32, crypto_sign_SECRETKEYBYTES = 64, crypto_sign_SEEDBYTES = 32, crypto_hash_BYTES = 64;
      nacl2.lowlevel = {
        crypto_core_hsalsa20,
        crypto_stream_xor,
        crypto_stream,
        crypto_stream_salsa20_xor,
        crypto_stream_salsa20,
        crypto_onetimeauth,
        crypto_onetimeauth_verify,
        crypto_verify_16,
        crypto_verify_32,
        crypto_secretbox,
        crypto_secretbox_open,
        crypto_scalarmult,
        crypto_scalarmult_base,
        crypto_box_beforenm,
        crypto_box_afternm,
        crypto_box,
        crypto_box_open,
        crypto_box_keypair,
        crypto_hash,
        crypto_sign,
        crypto_sign_keypair,
        crypto_sign_open,
        crypto_secretbox_KEYBYTES,
        crypto_secretbox_NONCEBYTES,
        crypto_secretbox_ZEROBYTES,
        crypto_secretbox_BOXZEROBYTES,
        crypto_scalarmult_BYTES,
        crypto_scalarmult_SCALARBYTES,
        crypto_box_PUBLICKEYBYTES,
        crypto_box_SECRETKEYBYTES,
        crypto_box_BEFORENMBYTES,
        crypto_box_NONCEBYTES,
        crypto_box_ZEROBYTES,
        crypto_box_BOXZEROBYTES,
        crypto_sign_BYTES,
        crypto_sign_PUBLICKEYBYTES,
        crypto_sign_SECRETKEYBYTES,
        crypto_sign_SEEDBYTES,
        crypto_hash_BYTES,
        gf,
        D,
        L,
        pack25519,
        unpack25519,
        M,
        A,
        S,
        Z,
        pow2523,
        add: add2,
        set25519,
        modL,
        scalarmult,
        scalarbase
      };
      function checkLengths(k, n) {
        if (k.length !== crypto_secretbox_KEYBYTES) throw new Error("bad key size");
        if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error("bad nonce size");
      }
      function checkBoxLengths(pk, sk) {
        if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error("bad public key size");
        if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error("bad secret key size");
      }
      function checkArrayTypes() {
        for (var i2 = 0; i2 < arguments.length; i2++) {
          if (!(arguments[i2] instanceof Uint8Array))
            throw new TypeError("unexpected type, use Uint8Array");
        }
      }
      function cleanup(arr) {
        for (var i2 = 0; i2 < arr.length; i2++) arr[i2] = 0;
      }
      nacl2.randomBytes = function(n) {
        var b = new Uint8Array(n);
        randombytes(b, n);
        return b;
      };
      nacl2.secretbox = function(msg, nonce, key2) {
        checkArrayTypes(msg, nonce, key2);
        checkLengths(key2, nonce);
        var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
        var c = new Uint8Array(m.length);
        for (var i2 = 0; i2 < msg.length; i2++) m[i2 + crypto_secretbox_ZEROBYTES] = msg[i2];
        crypto_secretbox(c, m, m.length, nonce, key2);
        return c.subarray(crypto_secretbox_BOXZEROBYTES);
      };
      nacl2.secretbox.open = function(box, nonce, key2) {
        checkArrayTypes(box, nonce, key2);
        checkLengths(key2, nonce);
        var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
        var m = new Uint8Array(c.length);
        for (var i2 = 0; i2 < box.length; i2++) c[i2 + crypto_secretbox_BOXZEROBYTES] = box[i2];
        if (c.length < 32) return null;
        if (crypto_secretbox_open(m, c, c.length, nonce, key2) !== 0) return null;
        return m.subarray(crypto_secretbox_ZEROBYTES);
      };
      nacl2.secretbox.keyLength = crypto_secretbox_KEYBYTES;
      nacl2.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
      nacl2.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
      nacl2.scalarMult = function(n, p) {
        checkArrayTypes(n, p);
        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error("bad n size");
        if (p.length !== crypto_scalarmult_BYTES) throw new Error("bad p size");
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult(q, n, p);
        return q;
      };
      nacl2.scalarMult.base = function(n) {
        checkArrayTypes(n);
        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error("bad n size");
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult_base(q, n);
        return q;
      };
      nacl2.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
      nacl2.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
      nacl2.box = function(msg, nonce, publicKey, secretKey) {
        var k = nacl2.box.before(publicKey, secretKey);
        return nacl2.secretbox(msg, nonce, k);
      };
      nacl2.box.before = function(publicKey, secretKey) {
        checkArrayTypes(publicKey, secretKey);
        checkBoxLengths(publicKey, secretKey);
        var k = new Uint8Array(crypto_box_BEFORENMBYTES);
        crypto_box_beforenm(k, publicKey, secretKey);
        return k;
      };
      nacl2.box.after = nacl2.secretbox;
      nacl2.box.open = function(msg, nonce, publicKey, secretKey) {
        var k = nacl2.box.before(publicKey, secretKey);
        return nacl2.secretbox.open(msg, nonce, k);
      };
      nacl2.box.open.after = nacl2.secretbox.open;
      nacl2.box.keyPair = function() {
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
        crypto_box_keypair(pk, sk);
        return { publicKey: pk, secretKey: sk };
      };
      nacl2.box.keyPair.fromSecretKey = function(secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_box_SECRETKEYBYTES)
          throw new Error("bad secret key size");
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        crypto_scalarmult_base(pk, secretKey);
        return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
      };
      nacl2.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
      nacl2.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
      nacl2.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
      nacl2.box.nonceLength = crypto_box_NONCEBYTES;
      nacl2.box.overheadLength = nacl2.secretbox.overheadLength;
      nacl2.sign = function(msg, secretKey) {
        checkArrayTypes(msg, secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
          throw new Error("bad secret key size");
        var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
        crypto_sign(signedMsg, msg, msg.length, secretKey);
        return signedMsg;
      };
      nacl2.sign.open = function(signedMsg, publicKey) {
        checkArrayTypes(signedMsg, publicKey);
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
          throw new Error("bad public key size");
        var tmp = new Uint8Array(signedMsg.length);
        var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
        if (mlen < 0) return null;
        var m = new Uint8Array(mlen);
        for (var i2 = 0; i2 < m.length; i2++) m[i2] = tmp[i2];
        return m;
      };
      nacl2.sign.detached = function(msg, secretKey) {
        var signedMsg = nacl2.sign(msg, secretKey);
        var sig = new Uint8Array(crypto_sign_BYTES);
        for (var i2 = 0; i2 < sig.length; i2++) sig[i2] = signedMsg[i2];
        return sig;
      };
      nacl2.sign.detached.verify = function(msg, sig, publicKey) {
        checkArrayTypes(msg, sig, publicKey);
        if (sig.length !== crypto_sign_BYTES)
          throw new Error("bad signature size");
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
          throw new Error("bad public key size");
        var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
        var m = new Uint8Array(crypto_sign_BYTES + msg.length);
        var i2;
        for (i2 = 0; i2 < crypto_sign_BYTES; i2++) sm[i2] = sig[i2];
        for (i2 = 0; i2 < msg.length; i2++) sm[i2 + crypto_sign_BYTES] = msg[i2];
        return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
      };
      nacl2.sign.keyPair = function() {
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        crypto_sign_keypair(pk, sk);
        return { publicKey: pk, secretKey: sk };
      };
      nacl2.sign.keyPair.fromSecretKey = function(secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
          throw new Error("bad secret key size");
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        for (var i2 = 0; i2 < pk.length; i2++) pk[i2] = secretKey[32 + i2];
        return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
      };
      nacl2.sign.keyPair.fromSeed = function(seed) {
        checkArrayTypes(seed);
        if (seed.length !== crypto_sign_SEEDBYTES)
          throw new Error("bad seed size");
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        for (var i2 = 0; i2 < 32; i2++) sk[i2] = seed[i2];
        crypto_sign_keypair(pk, sk, true);
        return { publicKey: pk, secretKey: sk };
      };
      nacl2.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
      nacl2.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
      nacl2.sign.seedLength = crypto_sign_SEEDBYTES;
      nacl2.sign.signatureLength = crypto_sign_BYTES;
      nacl2.hash = function(msg) {
        checkArrayTypes(msg);
        var h = new Uint8Array(crypto_hash_BYTES);
        crypto_hash(h, msg, msg.length);
        return h;
      };
      nacl2.hash.hashLength = crypto_hash_BYTES;
      nacl2.verify = function(x, y) {
        checkArrayTypes(x, y);
        if (x.length === 0 || y.length === 0) return false;
        if (x.length !== y.length) return false;
        return vn(x, 0, y, 0, x.length) === 0 ? true : false;
      };
      nacl2.setPRNG = function(fn) {
        randombytes = fn;
      };
      (function() {
        var crypto2 = crypto;
        if (crypto2 && crypto2.getRandomValues) {
          var QUOTA = 65536;
          nacl2.setPRNG(function(x, n) {
            var i2, v = new Uint8Array(n);
            for (i2 = 0; i2 < n; i2 += QUOTA) {
              crypto2.getRandomValues(v.subarray(i2, i2 + Math.min(n - i2, QUOTA)));
            }
            for (i2 = 0; i2 < n; i2++) x[i2] = v[i2];
            cleanup(v);
          });
        } else if (typeof commonjsRequire !== "undefined") {
          crypto2 = require$$0$2;
          if (crypto2 && crypto2.randomBytes) {
            nacl2.setPRNG(function(x, n) {
              var i2, v = crypto2.randomBytes(n);
              for (i2 = 0; i2 < n; i2++) x[i2] = v[i2];
              cleanup(v);
            });
          }
        }
      })();
    })(module.exports ? module.exports : self.nacl = self.nacl || {});
  })(naclFast);
  var naclFastExports = naclFast.exports;
  var __createBinding = globalThis && globalThis.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = globalThis && globalThis.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = globalThis && globalThis.__importStar || function(mod2) {
    if (mod2 && mod2.__esModule) return mod2;
    var result = {};
    if (mod2 != null) {
      for (var k in mod2) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
    }
    __setModuleDefault(result, mod2);
    return result;
  };
  Object.defineProperty(encryption, "__esModule", { value: true });
  encryption.getEncryptionPublicKey = encryption.decryptSafely = encryption.decrypt = encryption.encryptSafely = encryption.encrypt = void 0;
  const base_1 = lib;
  const nacl = __importStar(naclFastExports);
  const utils_1$1 = utils$3;
  function encrypt({ publicKey, data, version: version2 }) {
    if ((0, utils_1$1.isNullish)(publicKey)) {
      throw new Error("Missing publicKey parameter");
    } else if ((0, utils_1$1.isNullish)(data)) {
      throw new Error("Missing data parameter");
    } else if ((0, utils_1$1.isNullish)(version2)) {
      throw new Error("Missing version parameter");
    }
    switch (version2) {
      case "x25519-xsalsa20-poly1305": {
        if (typeof data !== "string") {
          throw new Error("Message data must be given as a string");
        }
        const ephemeralKeyPair = nacl.box.keyPair();
        let pubKeyUInt8Array;
        try {
          pubKeyUInt8Array = base_1.base64.decode(publicKey);
        } catch (err) {
          throw new Error("Bad public key");
        }
        const msgParamsUInt8Array = base_1.utf8.decode(data);
        const nonce = nacl.randomBytes(nacl.box.nonceLength);
        const encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);
        const output2 = {
          version: "x25519-xsalsa20-poly1305",
          nonce: base_1.base64.encode(nonce),
          ephemPublicKey: base_1.base64.encode(ephemeralKeyPair.publicKey),
          ciphertext: base_1.base64.encode(encryptedMessage)
        };
        return output2;
      }
      default:
        throw new Error("Encryption type/version not supported");
    }
  }
  encryption.encrypt = encrypt;
  function encryptSafely({ publicKey, data, version: version2 }) {
    if ((0, utils_1$1.isNullish)(publicKey)) {
      throw new Error("Missing publicKey parameter");
    } else if ((0, utils_1$1.isNullish)(data)) {
      throw new Error("Missing data parameter");
    } else if ((0, utils_1$1.isNullish)(version2)) {
      throw new Error("Missing version parameter");
    }
    const DEFAULT_PADDING_LENGTH = 2 ** 11;
    const NACL_EXTRA_BYTES = 16;
    if (typeof data === "object" && data && "toJSON" in data) {
      throw new Error("Cannot encrypt with toJSON property.  Please remove toJSON property");
    }
    const dataWithPadding = {
      data,
      padding: ""
    };
    const dataLength = Buffer2.byteLength(JSON.stringify(dataWithPadding), "utf-8");
    const modVal = dataLength % DEFAULT_PADDING_LENGTH;
    let padLength = 0;
    if (modVal > 0) {
      padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES;
    }
    dataWithPadding.padding = "0".repeat(padLength);
    const paddedMessage = JSON.stringify(dataWithPadding);
    return encrypt({ publicKey, data: paddedMessage, version: version2 });
  }
  encryption.encryptSafely = encryptSafely;
  function decrypt({ encryptedData, privateKey }) {
    if ((0, utils_1$1.isNullish)(encryptedData)) {
      throw new Error("Missing encryptedData parameter");
    } else if ((0, utils_1$1.isNullish)(privateKey)) {
      throw new Error("Missing privateKey parameter");
    }
    switch (encryptedData.version) {
      case "x25519-xsalsa20-poly1305": {
        const receiverPrivateKeyUint8Array = Buffer2.from(privateKey, "hex");
        const receiverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(receiverPrivateKeyUint8Array).secretKey;
        const nonce = base_1.base64.decode(encryptedData.nonce);
        const ciphertext = base_1.base64.decode(encryptedData.ciphertext);
        const ephemPublicKey = base_1.base64.decode(encryptedData.ephemPublicKey);
        const decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, receiverEncryptionPrivateKey);
        try {
          if (!decryptedMessage) {
            throw new Error();
          }
          const output2 = base_1.utf8.encode(decryptedMessage);
          if (!output2) {
            throw new Error();
          }
          return output2;
        } catch (err) {
          if (err && typeof err.message === "string" && err.message.length) {
            throw new Error(`Decryption failed: ${err.message}`);
          }
          throw new Error(`Decryption failed.`);
        }
      }
      default:
        throw new Error("Encryption type/version not supported.");
    }
  }
  encryption.decrypt = decrypt;
  function decryptSafely({ encryptedData, privateKey }) {
    if ((0, utils_1$1.isNullish)(encryptedData)) {
      throw new Error("Missing encryptedData parameter");
    } else if ((0, utils_1$1.isNullish)(privateKey)) {
      throw new Error("Missing privateKey parameter");
    }
    const dataWithPadding = JSON.parse(decrypt({ encryptedData, privateKey }));
    return dataWithPadding.data;
  }
  encryption.decryptSafely = decryptSafely;
  function getEncryptionPublicKey(privateKey) {
    const privateKeyUint8Array = Buffer2.from(privateKey, "hex");
    const encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;
    return base_1.base64.encode(encryptionPublicKey);
  }
  encryption.getEncryptionPublicKey = getEncryptionPublicKey;
  var signEip7702Authorization = {};
  Object.defineProperty(signEip7702Authorization, "__esModule", { value: true });
  signEip7702Authorization.hashEIP7702Authorization = signEip7702Authorization.recoverEIP7702Authorization = signEip7702Authorization.signEIP7702Authorization = void 0;
  const rlp_1 = dist$3;
  const util_1 = dist$4;
  const utils_1 = dist$2;
  const keccak_1 = keccak;
  const utils_2 = utils$3;
  function signEIP7702Authorization({ privateKey, authorization }) {
    validateEIP7702Authorization(authorization);
    if ((0, utils_2.isNullish)(privateKey)) {
      throw new Error("Missing privateKey parameter");
    }
    const messageHash = hashEIP7702Authorization(authorization);
    const { r: r2, s: s2, v } = (0, util_1.ecsign)(messageHash, privateKey);
    const vBuffer = (0, util_1.toBuffer)(v);
    return (0, utils_2.concatSig)(vBuffer, r2, s2);
  }
  signEip7702Authorization.signEIP7702Authorization = signEIP7702Authorization;
  function recoverEIP7702Authorization({ signature: signature2, authorization }) {
    validateEIP7702Authorization(authorization);
    if ((0, utils_2.isNullish)(signature2)) {
      throw new Error("Missing signature parameter");
    }
    const messageHash = hashEIP7702Authorization(authorization);
    const publicKey = (0, utils_2.recoverPublicKey)(messageHash, signature2);
    const sender = (0, util_1.publicToAddress)(publicKey);
    return (0, utils_1.bytesToHex)(sender);
  }
  signEip7702Authorization.recoverEIP7702Authorization = recoverEIP7702Authorization;
  function hashEIP7702Authorization(authorization) {
    validateEIP7702Authorization(authorization);
    const encodedAuthorization = (0, rlp_1.encode)(authorization);
    const message = Buffer2.concat([
      Buffer2.from("05", "hex"),
      encodedAuthorization
    ]);
    return Buffer2.from((0, keccak_1.keccak256)(message));
  }
  signEip7702Authorization.hashEIP7702Authorization = hashEIP7702Authorization;
  function validateEIP7702Authorization(authorization) {
    if ((0, utils_2.isNullish)(authorization)) {
      throw new Error("Missing authorization parameter");
    }
    const [chainId, contractAddress, nonce] = authorization;
    if ((0, utils_2.isNullish)(chainId)) {
      throw new Error("Missing chainId parameter");
    }
    if ((0, utils_2.isNullish)(contractAddress)) {
      throw new Error("Missing contractAddress parameter");
    }
    if ((0, utils_2.isNullish)(nonce)) {
      throw new Error("Missing nonce parameter");
    }
  }
  (function(exports) {
    var __createBinding2 = globalThis && globalThis.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = globalThis && globalThis.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalize = exports.concatSig = void 0;
    __exportStar(personalSign$1, exports);
    __exportStar(signTypedData, exports);
    __exportStar(encryption, exports);
    __exportStar(signEip7702Authorization, exports);
    var utils_12 = utils$3;
    Object.defineProperty(exports, "concatSig", { enumerable: true, get: function() {
      return utils_12.concatSig;
    } });
    Object.defineProperty(exports, "normalize", { enumerable: true, get: function() {
      return utils_12.normalize;
    } });
  })(dist$5);
  const BRIDGE_URL = "ws://localhost:8435";
  const TRANSPORT_CHECK_DELAY = 1e3;
  const TRANSPORT_CHECK_LIMIT = 120;
  class LedgerBridge {
    constructor() {
      this.addEventListeners();
      this.transportType = "u2f";
    }
    addEventListeners() {
      window.addEventListener(
        "message",
        async (e) => {
          if (e && e.data && e.data.target === "LEDGER-IFRAME") {
            const { action, params, messageId } = e.data;
            const replyAction = `${action}-reply`;
            switch (action) {
              case "ledger-is-iframe-ready":
                this.sendMessageToExtension({
                  action: replyAction,
                  success: true,
                  messageId
                });
                break;
              case "ledger-unlock":
                this.unlock(replyAction, params.hdPath, messageId);
                break;
              case "ledger-sign-transaction":
                console.log("ledger-sign-transaction", params);
                this.signTransaction(
                  replyAction,
                  params.hdPath,
                  params.tx,
                  messageId
                );
                break;
              case "ledger-sign-personal-message":
                this.signPersonalMessage(
                  replyAction,
                  params.hdPath,
                  params.message,
                  messageId
                );
                break;
              case "ledger-close-bridge":
                this.cleanUp(replyAction, messageId);
                break;
              case "ledger-update-transport":
                if (params.transportType === "ledgerLive" || params.useLedgerLive) {
                  this.updateTransportTypePreference(
                    replyAction,
                    "ledgerLive",
                    messageId
                  );
                } else if (params.transportType === "webhid") {
                  this.updateTransportTypePreference(
                    replyAction,
                    "webhid",
                    messageId
                  );
                } else {
                  this.updateTransportTypePreference(
                    replyAction,
                    "u2f",
                    messageId
                  );
                }
                break;
              case "ledger-make-app":
                this.attemptMakeApp(replyAction, messageId);
                break;
              case "ledger-sign-typed-data":
                this.signTypedData(
                  replyAction,
                  params.hdPath,
                  params.message,
                  messageId
                );
                break;
            }
          }
        },
        false
      );
    }
    sendMessageToExtension(msg) {
      window.parent.postMessage(msg, "*");
    }
    delay(ms2) {
      return new Promise((success) => setTimeout(success, ms2));
    }
    checkTransportLoop(i2) {
      const iterator2 = i2 || 0;
      return _default.check(BRIDGE_URL).catch(async () => {
        await this.delay(TRANSPORT_CHECK_DELAY);
        if (iterator2 < TRANSPORT_CHECK_LIMIT) {
          return this.checkTransportLoop(iterator2 + 1);
        } else {
          throw new Error("Ledger transport check timeout");
        }
      });
    }
    async attemptMakeApp(replyAction, messageId) {
      try {
        await this.makeApp({ openOnly: true });
        await this.cleanUp();
        this.sendMessageToExtension({
          action: replyAction,
          success: true,
          messageId
        });
      } catch (error2) {
        await this.cleanUp();
        this.sendMessageToExtension({
          action: replyAction,
          success: false,
          messageId,
          error: error2
        });
      }
    }
    async makeApp(config = {}) {
      try {
        if (this.transportType === "ledgerLive") {
          let reestablish = false;
          try {
            await _default.check(BRIDGE_URL);
          } catch (_err) {
            window.open("ledgerlive://bridge?appName=Ethereum");
            await this.checkTransportLoop();
            reestablish = true;
          }
          if (!this.app || reestablish) {
            this.transport = await _default.open(BRIDGE_URL);
            this.app = new Eth(this.transport);
          }
        } else if (this.transportType === "webhid") {
          const device = this.transport && this.transport.device;
          const nameOfDeviceType = device && device.constructor.name;
          const deviceIsOpen = device && device.opened;
          if (this.app && nameOfDeviceType === "HIDDevice" && deviceIsOpen) {
            return;
          }
          this.transport = config.openOnly ? await TransportWebHID.openConnected() : await TransportWebHID.create();
          this.app = new Eth(this.transport);
        } else {
          this.transport = await TransportWebUSB.create();
          this.app = new Eth(this.transport);
        }
      } catch (e) {
        console.log("LEDGER:::CREATE APP ERROR", e);
        throw e;
      }
    }
    updateTransportTypePreference(replyAction, transportType, messageId) {
      this.transportType = transportType;
      this.cleanUp();
      this.sendMessageToExtension({
        action: replyAction,
        success: true,
        messageId
      });
    }
    async cleanUp(replyAction, messageId) {
      this.app = null;
      if (this.transport) {
        await this.transport.close();
        this.transport = null;
      }
      if (replyAction) {
        this.sendMessageToExtension({
          action: replyAction,
          success: true,
          messageId
        });
      }
    }
    async unlock(replyAction, hdPath, messageId) {
      try {
        await this.makeApp();
        const res = await this.app.getAddress(hdPath, false, true);
        this.sendMessageToExtension({
          action: replyAction,
          success: true,
          payload: res,
          messageId
        });
      } catch (err) {
        const e = this.ledgerErrToMessage(err);
        this.sendMessageToExtension({
          action: replyAction,
          success: false,
          payload: { error: e },
          messageId
        });
      } finally {
        if (this.transportType !== "ledgerLive") {
          this.cleanUp();
        }
      }
    }
    async signTransaction(replyAction, hdPath, tx, messageId) {
      try {
        await this.makeApp();
        const res = await this.app.clearSignTransaction(hdPath, tx, {
          nft: true,
          externalPlugins: true,
          erc20: true
        });
        this.sendMessageToExtension({
          action: replyAction,
          success: true,
          payload: res,
          messageId
        });
      } catch (err) {
        const e = this.ledgerErrToMessage(err);
        this.sendMessageToExtension({
          action: replyAction,
          success: false,
          payload: { error: e },
          messageId
        });
      } finally {
        if (this.transportType !== "ledgerLive") {
          this.cleanUp();
        }
      }
    }
    async signPersonalMessage(replyAction, hdPath, message, messageId) {
      try {
        await this.makeApp();
        const res = await this.app.signPersonalMessage(hdPath, message);
        this.sendMessageToExtension({
          action: replyAction,
          success: true,
          payload: res,
          messageId
        });
      } catch (err) {
        const e = this.ledgerErrToMessage(err);
        this.sendMessageToExtension({
          action: replyAction,
          success: false,
          payload: { error: e },
          messageId
        });
      } finally {
        if (this.transportType !== "ledgerLive") {
          this.cleanUp();
        }
      }
    }
    async signTypedData(replyAction, hdPath, message, messageId) {
      try {
        await this.makeApp();
        let res = await this.attemptSignEIP712Message(hdPath, message);
        this.sendMessageToExtension({
          action: replyAction,
          success: true,
          payload: res,
          messageId
        });
      } catch (err) {
        const e = this.ledgerErrToMessage(err);
        this.sendMessageToExtension({
          action: replyAction,
          success: false,
          payload: { error: e },
          messageId
        });
      } finally {
        this.cleanUp();
      }
    }
    async attemptSignEIP712Message(hdPath, message) {
      try {
        return await this.app.signEIP712Message(hdPath, message);
      } catch (signError) {
        const domainSeparatorHex = dist$5.TypedDataUtils.hashStruct(
          "EIP712Domain",
          message.domain,
          message.types,
          dist$5.SignTypedDataVersion.V4
        ).toString("hex");
        const hashStructMessageHex = dist$5.TypedDataUtils.hashStruct(
          message.primaryType,
          message.message,
          message.types,
          dist$5.SignTypedDataVersion.V4
        ).toString("hex");
        return await this.app.signEIP712HashedMessage(
          hdPath,
          domainSeparatorHex,
          hashStructMessageHex
        );
      }
    }
    ledgerErrToMessage(err) {
      const isU2FError = (err2) => !!err2 && !!err2.metaData;
      const isStringError = (err2) => typeof err2 === "string";
      const isErrorWithId = (err2) => err2.hasOwnProperty("id") && err2.hasOwnProperty("message");
      const isWrongAppError = (err2) => String(err2.message || err2).includes("6804");
      const isLedgerLockedError = (err2) => err2.message && err2.message.includes("OpenFailed");
      if (isU2FError(err)) {
        if (err.metaData.code === 5) {
          return new Error("LEDGER_TIMEOUT");
        }
        return err.metaData.type;
      }
      if (isWrongAppError(err)) {
        return new Error("LEDGER_WRONG_APP");
      }
      if (isLedgerLockedError(err) || isStringError(err) && err.includes("6801")) {
        return new Error("LEDGER_LOCKED");
      }
      if (isErrorWithId(err)) {
        if (err.message.includes("U2F not supported")) {
          return new Error("U2F_NOT_SUPPORTED");
        }
      }
      return err;
    }
  }
  const bridge = new LedgerBridge();
  console.log(
    `MetaMask < = > Ledger Bridge initialized over ${bridge.transportType} from ${window.location}!`
  );
})();
