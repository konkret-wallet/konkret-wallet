var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __knownSymbol = (name2, symbol) => (symbol = Symbol[name2]) ? symbol : Symbol.for("Symbol." + name2);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __pow = Math.pow;
var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve2, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve2(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var __await = function(promise2, isYieldStar) {
  this[0] = promise2;
  this[1] = isYieldStar;
};
var __asyncGenerator = (__this, __arguments, generator) => {
  var resume = (k, v, yes, no) => {
    try {
      var x = generator[k](v), isAwait = (v = x.value) instanceof __await, done = x.done;
      Promise.resolve(isAwait ? v[0] : v).then((y) => isAwait ? resume(k === "return" ? k : "next", v[1] ? { done: y.done, value: y.value } : y, yes, no) : yes({ value: y, done })).catch((e) => resume("throw", e, yes, no));
    } catch (e) {
      no(e);
    }
  }, method = (k) => it[k] = (x) => new Promise((yes, no) => resume(k, x, yes, no)), it = {};
  return generator = generator.apply(__this, __arguments), it[__knownSymbol("asyncIterator")] = () => it, method("next"), method("throw"), method("return"), it;
};
var __yieldStar = (value) => {
  var obj = value[__knownSymbol("asyncIterator")], isAwait = false, method, it = {};
  if (obj == null) {
    obj = value[__knownSymbol("iterator")]();
    method = (k) => it[k] = (x) => obj[k](x);
  } else {
    obj = obj.call(value);
    method = (k) => it[k] = (v) => {
      if (isAwait) {
        isAwait = false;
        if (k === "throw") throw v;
        return v;
      }
      isAwait = true;
      return {
        done: false,
        value: new __await(new Promise((resolve2) => {
          var x = obj[k](v);
          if (!(x instanceof Object)) __typeError("Object expected");
          resolve2(x);
        }), 1)
      };
    };
  }
  return it[__knownSymbol("iterator")] = () => it, method("next"), "throw" in obj ? method("throw") : it.throw = (x) => {
    throw x;
  }, "return" in obj && method("return"), it;
};
var __forAwait = (obj, it, method) => (it = obj[__knownSymbol("asyncIterator")]) ? it.call(obj) : (obj = obj[__knownSymbol("iterator")](), it = {}, method = (key2, fn) => (fn = obj[key2]) && (it[key2] = (arg) => new Promise((yes, no, done) => (arg = fn.call(obj, arg), done = arg.done, Promise.resolve(arg.value).then((value) => yes({ value, done }), no)))), method("next"), method("return"), it);
(function() {
  "use strict";
  var buffer$2 = {};
  var base64Js = {};
  base64Js.byteLength = byteLength;
  base64Js.toByteArray = toByteArray;
  base64Js.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
  function getLens(b64) {
    var len2 = b64.length;
    if (len2 % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len2;
    var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i2;
    for (i2 = 0; i2 < len2; i2 += 4) {
      tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
      arr[curByte++] = tmp >> 16 & 255;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output2 = [];
    for (var i2 = start; i2 < end; i2 += 3) {
      tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
      output2.push(tripletToBase64(tmp));
    }
    return output2.join("");
  }
  function fromByteArray(uint8) {
    var tmp;
    var len2 = uint8.length;
    var extraBytes = len2 % 3;
    var parts = [];
    var maxChunkLength = 16383;
    for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
      parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len2 - 1];
      parts.push(
        lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
      );
    } else if (extraBytes === 2) {
      tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
      parts.push(
        lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
      );
    }
    return parts.join("");
  }
  var ieee754 = {};
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  ieee754.read = function(buffer2, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i2 = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s2 = buffer2[offset + i2];
    i2 += d;
    e = s2 & (1 << -nBits) - 1;
    s2 >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer2[offset + i2], i2 += d, nBits -= 8) {
    }
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer2[offset + i2], i2 += d, nBits -= 8) {
    }
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s2 ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  ieee754.write = function(buffer2, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i2 = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer2[offset + i2] = m & 255, i2 += d, m /= 256, mLen -= 8) {
    }
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer2[offset + i2] = e & 255, i2 += d, e /= 256, eLen -= 8) {
    }
    buffer2[offset + i2 - d] |= s2 * 128;
  };
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  (function(exports2) {
    const base642 = base64Js;
    const ieee754$1 = ieee754;
    const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports2.Buffer = Buffer2;
    exports2.SlowBuffer = SlowBuffer2;
    exports2.INSPECT_MAX_BYTES = 50;
    const K_MAX_LENGTH = 2147483647;
    exports2.kMaxLength = K_MAX_LENGTH;
    const { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new GlobalUint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, GlobalUint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer2.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this)) return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer2.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this)) return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new GlobalUint8Array(length);
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function Buffer2(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer2.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (GlobalArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof GlobalSharedArrayBuffer !== "undefined" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer2.from(valueOf, encodingOrOffset, length);
      }
      const b = fromObject(value);
      if (b) return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer2.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);
    Object.setPrototypeOf(Buffer2, GlobalUint8Array);
    function assertSize(size2) {
      if (typeof size2 !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size2 < 0) {
        throw new RangeError('The value "' + size2 + '" is invalid for option "size"');
      }
    }
    function alloc(size2, fill, encoding2) {
      assertSize(size2);
      if (size2 <= 0) {
        return createBuffer(size2);
      }
      if (fill !== void 0) {
        return typeof encoding2 === "string" ? createBuffer(size2).fill(fill, encoding2) : createBuffer(size2).fill(fill);
      }
      return createBuffer(size2);
    }
    Buffer2.alloc = function(size2, fill, encoding2) {
      return alloc(size2, fill, encoding2);
    };
    function allocUnsafe(size2) {
      assertSize(size2);
      return createBuffer(size2 < 0 ? 0 : checked(size2) | 0);
    }
    Buffer2.allocUnsafe = function(size2) {
      return allocUnsafe(size2);
    };
    Buffer2.allocUnsafeSlow = function(size2) {
      return allocUnsafe(size2);
    };
    function fromString(string2, encoding2) {
      if (typeof encoding2 !== "string" || encoding2 === "") {
        encoding2 = "utf8";
      }
      if (!Buffer2.isEncoding(encoding2)) {
        throw new TypeError("Unknown encoding: " + encoding2);
      }
      const length = byteLength2(string2, encoding2) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string2, encoding2);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array2) {
      const length = array2.length < 0 ? 0 : checked(array2.length) | 0;
      const buf = createBuffer(length);
      for (let i2 = 0; i2 < length; i2 += 1) {
        buf[i2] = array2[i2] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, GlobalUint8Array)) {
        const copy = new GlobalUint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array2, byteOffset, length) {
      if (byteOffset < 0 || array2.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array2.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new GlobalUint8Array(array2);
      } else if (length === void 0) {
        buf = new GlobalUint8Array(array2, byteOffset);
      } else {
        buf = new GlobalUint8Array(array2, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer2.isBuffer(obj)) {
        const len2 = checked(obj.length) | 0;
        const buf = createBuffer(len2);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len2);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer2(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer2.alloc(+length);
    }
    Buffer2.isBuffer = function isBuffer2(b) {
      return b != null && b._isBuffer === true && b !== Buffer2.prototype;
    };
    Buffer2.compare = function compare2(a, b) {
      if (isInstance(a, GlobalUint8Array)) a = Buffer2.from(a, a.offset, a.byteLength);
      if (isInstance(b, GlobalUint8Array)) b = Buffer2.from(b, b.offset, b.byteLength);
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b) return 0;
      let x = a.length;
      let y = b.length;
      for (let i2 = 0, len2 = Math.min(x, y); i2 < len2; ++i2) {
        if (a[i2] !== b[i2]) {
          x = a[i2];
          y = b[i2];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding2) {
      switch (String(encoding2).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat2(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      let i2;
      if (length === void 0) {
        length = 0;
        for (i2 = 0; i2 < list.length; ++i2) {
          length += list[i2].length;
        }
      }
      const buffer2 = Buffer2.allocUnsafe(length);
      let pos = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        let buf = list[i2];
        if (isInstance(buf, GlobalUint8Array)) {
          if (pos + buf.length > buffer2.length) {
            if (!Buffer2.isBuffer(buf)) buf = Buffer2.from(buf);
            buf.copy(buffer2, pos);
          } else {
            GlobalUint8Array.prototype.set.call(
              buffer2,
              buf,
              pos
            );
          }
        } else if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer2, pos);
        }
        pos += buf.length;
      }
      return buffer2;
    };
    function byteLength2(string2, encoding2) {
      if (Buffer2.isBuffer(string2)) {
        return string2.length;
      }
      if (GlobalArrayBuffer.isView(string2) || isInstance(string2, GlobalArrayBuffer)) {
        return string2.byteLength;
      }
      if (typeof string2 !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string2
        );
      }
      const len2 = string2.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len2 === 0) return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding2) {
          case "ascii":
          case "latin1":
          case "binary":
            return len2;
          case "utf8":
          case "utf-8":
            return utf8ToBytes2(string2).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len2 * 2;
          case "hex":
            return len2 >>> 1;
          case "base64":
            return base64ToBytes(string2).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes2(string2).length;
            }
            encoding2 = ("" + encoding2).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.byteLength = byteLength2;
    function slowToString(encoding2, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding2) encoding2 = "utf8";
      while (true) {
        switch (encoding2) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding2);
            encoding2 = (encoding2 + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.prototype._isBuffer = true;
    function swap(b, n, m) {
      const i2 = b[n];
      b[n] = b[m];
      b[m] = i2;
    }
    Buffer2.prototype.swap16 = function swap16() {
      const len2 = this.length;
      if (len2 % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i2 = 0; i2 < len2; i2 += 2) {
        swap(this, i2, i2 + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      const len2 = this.length;
      if (len2 % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i2 = 0; i2 < len2; i2 += 4) {
        swap(this, i2, i2 + 3);
        swap(this, i2 + 1, i2 + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      const len2 = this.length;
      if (len2 % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i2 = 0; i2 < len2; i2 += 8) {
        swap(this, i2, i2 + 7);
        swap(this, i2 + 1, i2 + 6);
        swap(this, i2 + 2, i2 + 5);
        swap(this, i2 + 3, i2 + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString2() {
      const length = this.length;
      if (length === 0) return "";
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
    Buffer2.prototype.equals = function equals(b) {
      if (!Buffer2.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
      if (this === b) return true;
      return Buffer2.compare(this, b) === 0;
    };
    Buffer2.prototype.inspect = function inspect2() {
      let str = "";
      const max2 = exports2.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max2).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max2) str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
    }
    Buffer2.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, GlobalUint8Array)) {
        target = Buffer2.from(target, target.offset, target.byteLength);
      }
      if (!Buffer2.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      let x = thisEnd - thisStart;
      let y = end - start;
      const len2 = Math.min(x, y);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i2 = 0; i2 < len2; ++i2) {
        if (thisCopy[i2] !== targetCopy[i2]) {
          x = thisCopy[i2];
          y = targetCopy[i2];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer2, val, byteOffset, encoding2, dir) {
      if (buffer2.length === 0) return -1;
      if (typeof byteOffset === "string") {
        encoding2 = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer2.length - 1;
      }
      if (byteOffset < 0) byteOffset = buffer2.length + byteOffset;
      if (byteOffset >= buffer2.length) {
        if (dir) return -1;
        else byteOffset = buffer2.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
      }
      if (typeof val === "string") {
        val = Buffer2.from(val, encoding2);
      }
      if (Buffer2.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer2, val, byteOffset, encoding2, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof GlobalUint8Array.prototype.indexOf === "function") {
          if (dir) {
            return GlobalUint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
          } else {
            return GlobalUint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer2, [val], byteOffset, encoding2, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding2, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding2 !== void 0) {
        encoding2 = String(encoding2).toLowerCase();
        if (encoding2 === "ucs2" || encoding2 === "ucs-2" || encoding2 === "utf16le" || encoding2 === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i3) {
        if (indexSize === 1) {
          return buf[i3];
        } else {
          return buf.readUInt16BE(i3 * indexSize);
        }
      }
      let i2;
      if (dir) {
        let foundIndex = -1;
        for (i2 = byteOffset; i2 < arrLength; i2++) {
          if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i2;
            if (i2 - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1) i2 -= i2 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i2 = byteOffset; i2 >= 0; i2--) {
          let found = true;
          for (let j = 0; j < valLength; j++) {
            if (read(arr, i2 + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found) return i2;
        }
      }
      return -1;
    }
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding2) {
      return this.indexOf(val, byteOffset, encoding2) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf2(val, byteOffset, encoding2) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding2, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding2) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding2, false);
    };
    function hexWrite(buf, string2, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string2.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i2;
      for (i2 = 0; i2 < length; ++i2) {
        const parsed = parseInt(string2.substr(i2 * 2, 2), 16);
        if (numberIsNaN(parsed)) return i2;
        buf[offset + i2] = parsed;
      }
      return i2;
    }
    function utf8Write(buf, string2, offset, length) {
      return blitBuffer(utf8ToBytes2(string2, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string2, offset, length) {
      return blitBuffer(asciiToBytes(string2), buf, offset, length);
    }
    function base64Write(buf, string2, offset, length) {
      return blitBuffer(base64ToBytes(string2), buf, offset, length);
    }
    function ucs2Write(buf, string2, offset, length) {
      return blitBuffer(utf16leToBytes(string2, buf.length - offset), buf, offset, length);
    }
    Buffer2.prototype.write = function write(string2, offset, length, encoding2) {
      if (offset === void 0) {
        encoding2 = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding2 = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding2 === void 0) encoding2 = "utf8";
        } else {
          encoding2 = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset;
      if (length === void 0 || length > remaining) length = remaining;
      if (string2.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding2) encoding2 = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding2) {
          case "hex":
            return hexWrite(this, string2, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string2, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string2, offset, length);
          case "base64":
            return base64Write(this, string2, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string2, offset, length);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding2);
            encoding2 = ("" + encoding2).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base642.fromByteArray(buf);
      } else {
        return base642.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i2 = start;
      while (i2 < end) {
        const firstByte = buf[i2];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i2 + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i2 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              fourthByte = buf[i2 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i2 += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    const MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len2 = codePoints.length;
      if (len2 <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i2 = 0;
      while (i2 < len2) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len2 = buf.length;
      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len2) end = len2;
      let out = "";
      for (let i2 = start; i2 < end; ++i2) {
        out += hexSliceLookupTable[buf[i2]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes2 = buf.slice(start, end);
      let res = "";
      for (let i2 = 0; i2 < bytes2.length - 1; i2 += 2) {
        res += String.fromCharCode(bytes2[i2] + bytes2[i2 + 1] * 256);
      }
      return res;
    }
    Buffer2.prototype.slice = function slice(start, end) {
      const len2 = this.length;
      start = ~~start;
      end = end === void 0 ? len2 : ~~end;
      if (start < 0) {
        start += len2;
        if (start < 0) start = 0;
      } else if (start > len2) {
        start = len2;
      }
      if (end < 0) {
        end += len2;
        if (end < 0) end = 0;
      } else if (end > len2) {
        end = len2;
      }
      if (end < start) end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer2.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
      if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength3, this.length);
      let val = this[offset];
      let mul = 1;
      let i2 = 0;
      while (++i2 < byteLength3 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength3, this.length);
      }
      let val = this[offset + --byteLength3];
      let mul = 1;
      while (byteLength3 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength3] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo = first + this[++offset] * __pow(2, 8) + this[++offset] * __pow(2, 16) + this[++offset] * __pow(2, 24);
      const hi = this[++offset] + this[++offset] * __pow(2, 8) + this[++offset] * __pow(2, 16) + last * __pow(2, 24);
      return BigInt(lo) + (BigInt(hi) << BigInt(32));
    });
    Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi = first * __pow(2, 24) + this[++offset] * __pow(2, 16) + this[++offset] * __pow(2, 8) + this[++offset];
      const lo = this[++offset] * __pow(2, 24) + this[++offset] * __pow(2, 16) + this[++offset] * __pow(2, 8) + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo);
    });
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength3, this.length);
      let val = this[offset];
      let mul = 1;
      let i2 = 0;
      while (++i2 < byteLength3 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength3, this.length);
      let i2 = byteLength3;
      let mul = 1;
      let val = this[offset + --i2];
      while (i2 > 0 && (mul *= 256)) {
        val += this[offset + --i2] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128)) return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * __pow(2, 8) + this[offset + 6] * __pow(2, 16) + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * __pow(2, 8) + this[++offset] * __pow(2, 16) + this[++offset] * __pow(2, 24));
    });
    Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first << 24) + // Overflow
      this[++offset] * __pow(2, 16) + this[++offset] * __pow(2, 8) + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * __pow(2, 24) + this[++offset] * __pow(2, 16) + this[++offset] * __pow(2, 8) + last);
    });
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754$1.read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754$1.read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754$1.read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754$1.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max2, min2) {
      if (!Buffer2.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max2 || value < min2) throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
    }
    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset, byteLength3, maxBytes, 0);
      }
      let mul = 1;
      let i2 = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength3 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset, byteLength3, maxBytes, 0);
      }
      let i2 = byteLength3 - 1;
      let mul = 1;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value, offset, min2, max2) {
      checkIntBI(value, min2, max2, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset;
    }
    function wrtBigUInt64BE(buf, value, offset, min2, max2) {
      checkIntBI(value, min2, max2, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8;
    }
    Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit2 = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset, byteLength3, limit2 - 1, -limit2);
      }
      let i2 = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength3 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit2 = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset, byteLength3, limit2 - 1, -limit2);
      }
      let i2 = byteLength3 - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
      if (value < 0) value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0) value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset, ext, max2, min2) {
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
      if (offset < 0) throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer2.isBuffer(target)) throw new TypeError("argument should be a Buffer");
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len2 = end - start;
      if (this === target && typeof GlobalUint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        GlobalUint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len2;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding2) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding2 = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding2 = end;
          end = this.length;
        }
        if (encoding2 !== void 0 && typeof encoding2 !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding2 === "string" && !Buffer2.isEncoding(encoding2)) {
          throw new TypeError("Unknown encoding: " + encoding2);
        }
        if (val.length === 1) {
          const code2 = val.charCodeAt(0);
          if (encoding2 === "utf8" && code2 < 128 || encoding2 === "latin1") {
            val = code2;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      let i2;
      if (typeof val === "number") {
        for (i2 = start; i2 < end; ++i2) {
          this[i2] = val;
        }
      } else {
        const bytes2 = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding2);
        const len2 = bytes2.length;
        if (len2 === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i2 = 0; i2 < end - start; ++i2) {
          this[i2 + start] = bytes2[i2 % len2];
        }
      }
      return this;
    };
    const errors2 = {};
    function E(sym, getMessage, Base) {
      errors2[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name2) {
        if (name2) {
          return `${name2} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E(
      "ERR_INVALID_ARG_TYPE",
      function(name2, actual) {
        return `The "${name2}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E(
      "ERR_OUT_OF_RANGE",
      function(str, range2, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > __pow(2, 32)) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > __pow(BigInt(2), BigInt(32)) || input < -__pow(BigInt(2), BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range2}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i2 = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i2 >= start + 4; i2 -= 3) {
        res = `_${val.slice(i2 - 3, i2)}${res}`;
      }
      return `${val.slice(0, i2)}${res}`;
    }
    function checkBounds(buf, offset, byteLength3) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength3] === void 0) {
        boundsError(offset, buf.length - (byteLength3 + 1));
      }
    }
    function checkIntBI(value, min2, max2, buf, offset, byteLength3) {
      if (value > max2 || value < min2) {
        const n = typeof min2 === "bigint" ? "n" : "";
        let range2;
        {
          if (min2 === 0 || min2 === BigInt(0)) {
            range2 = `>= 0${n} and < 2${n} ** ${(byteLength3 + 1) * 8}${n}`;
          } else {
            range2 = `>= -(2${n} ** ${(byteLength3 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength3 + 1) * 8 - 1}${n}`;
          }
        }
        throw new errors2.ERR_OUT_OF_RANGE("value", range2, value);
      }
      checkBounds(buf, offset, byteLength3);
    }
    function validateNumber(value, name2) {
      if (typeof value !== "number") {
        throw new errors2.ERR_INVALID_ARG_TYPE(name2, "number", value);
      }
    }
    function boundsError(value, length, type2) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type2);
        throw new errors2.ERR_OUT_OF_RANGE("offset", "an integer", value);
      }
      if (length < 0) {
        throw new errors2.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors2.ERR_OUT_OF_RANGE(
        "offset",
        `>= ${0} and <= ${length}`,
        value
      );
    }
    const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2) return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes2(string2, units2) {
      units2 = units2 || Infinity;
      let codePoint;
      const length = string2.length;
      let leadSurrogate = null;
      const bytes2 = [];
      for (let i2 = 0; i2 < length; ++i2) {
        codePoint = string2.charCodeAt(i2);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units2 -= 3) > -1) bytes2.push(239, 191, 189);
              continue;
            } else if (i2 + 1 === length) {
              if ((units2 -= 3) > -1) bytes2.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units2 -= 3) > -1) bytes2.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units2 -= 3) > -1) bytes2.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units2 -= 1) < 0) break;
          bytes2.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units2 -= 2) < 0) break;
          bytes2.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units2 -= 3) < 0) break;
          bytes2.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units2 -= 4) < 0) break;
          bytes2.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes2;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        byteArray.push(str.charCodeAt(i2) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units2) {
      let c, hi, lo;
      const byteArray = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        if ((units2 -= 2) < 0) break;
        c = str.charCodeAt(i2);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base642.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      let i2;
      for (i2 = 0; i2 < length; ++i2) {
        if (i2 + offset >= dst.length || i2 >= src.length) break;
        dst[i2 + offset] = src[i2];
      }
      return i2;
    }
    function isInstance(obj, type2) {
      return obj instanceof type2 || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type2.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    const hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i2 = 0; i2 < 16; ++i2) {
        const i16 = i2 * 16;
        for (let j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i2] + alphabet[j];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  })(buffer$2);
  const Buffer = buffer$2.Buffer;
  const Blob$2 = buffer$2.Blob;
  const BlobOptions = buffer$2.BlobOptions;
  const Buffer$1 = buffer$2.Buffer;
  const File = buffer$2.File;
  const FileOptions = buffer$2.FileOptions;
  const INSPECT_MAX_BYTES = buffer$2.INSPECT_MAX_BYTES;
  const SlowBuffer = buffer$2.SlowBuffer;
  const TranscodeEncoding = buffer$2.TranscodeEncoding;
  const atob = buffer$2.atob;
  const btoa$1 = buffer$2.btoa;
  const constants$9 = buffer$2.constants;
  const isAscii = buffer$2.isAscii;
  const isUtf8 = buffer$2.isUtf8;
  const kMaxLength = buffer$2.kMaxLength;
  const kStringMaxLength = buffer$2.kStringMaxLength;
  const resolveObjectURL = buffer$2.resolveObjectURL;
  const transcode = buffer$2.transcode;
  const dist$6 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    Blob: Blob$2,
    BlobOptions,
    Buffer: Buffer$1,
    File,
    FileOptions,
    INSPECT_MAX_BYTES,
    SlowBuffer,
    TranscodeEncoding,
    atob,
    btoa: btoa$1,
    constants: constants$9,
    default: Buffer,
    isAscii,
    isUtf8,
    kMaxLength,
    kStringMaxLength,
    resolveObjectURL,
    transcode
  }, Symbol.toStringTag, { value: "Module" }));
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs$1(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f2 = n.default;
    if (typeof f2 == "function") {
      var a = function a2() {
        if (this instanceof a2) {
          return Reflect.construct(f2, arguments, this.constructor);
        }
        return f2.apply(this, arguments);
      };
      a.prototype = f2.prototype;
    } else a = {};
    Object.defineProperty(a, "__esModule", { value: true });
    Object.keys(n).forEach(function(k) {
      var d = Object.getOwnPropertyDescriptor(n, k);
      Object.defineProperty(a, k, d.get ? d : {
        enumerable: true,
        get: function() {
          return n[k];
        }
      });
    });
    return a;
  }
  var events = { exports: {} };
  var R = typeof Reflect === "object" ? Reflect : null;
  var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };
  var ReflectOwnKeys;
  if (R && typeof R.ownKeys === "function") {
    ReflectOwnKeys = R.ownKeys;
  } else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys2(target) {
      return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
    };
  } else {
    ReflectOwnKeys = function ReflectOwnKeys2(target) {
      return Object.getOwnPropertyNames(target);
    };
  }
  function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
  }
  var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
    return value !== value;
  };
  function EventEmitter() {
    EventEmitter.init.call(this);
  }
  events.exports = EventEmitter;
  events.exports.once = once;
  EventEmitter.EventEmitter = EventEmitter;
  EventEmitter.prototype._events = void 0;
  EventEmitter.prototype._eventsCount = 0;
  EventEmitter.prototype._maxListeners = void 0;
  var defaultMaxListeners = 10;
  function checkListener(listener) {
    if (typeof listener !== "function") {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
  }
  Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
      }
      defaultMaxListeners = arg;
    }
  });
  EventEmitter.init = function() {
    if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || void 0;
  };
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    }
    this._maxListeners = n;
    return this;
  };
  function _getMaxListeners(that) {
    if (that._maxListeners === void 0)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }
  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
  };
  EventEmitter.prototype.emit = function emit(type2) {
    var args = [];
    for (var i2 = 1; i2 < arguments.length; i2++) args.push(arguments[i2]);
    var doError = type2 === "error";
    var events2 = this._events;
    if (events2 !== void 0)
      doError = doError && events2.error === void 0;
    else if (!doError)
      return false;
    if (doError) {
      var er;
      if (args.length > 0)
        er = args[0];
      if (er instanceof Error) {
        throw er;
      }
      var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
      err.context = er;
      throw err;
    }
    var handler = events2[type2];
    if (handler === void 0)
      return false;
    if (typeof handler === "function") {
      ReflectApply(handler, this, args);
    } else {
      var len2 = handler.length;
      var listeners = arrayClone(handler, len2);
      for (var i2 = 0; i2 < len2; ++i2)
        ReflectApply(listeners[i2], this, args);
    }
    return true;
  };
  function _addListener(target, type2, listener, prepend) {
    var m;
    var events2;
    var existing;
    checkListener(listener);
    events2 = target._events;
    if (events2 === void 0) {
      events2 = target._events = /* @__PURE__ */ Object.create(null);
      target._eventsCount = 0;
    } else {
      if (events2.newListener !== void 0) {
        target.emit(
          "newListener",
          type2,
          listener.listener ? listener.listener : listener
        );
        events2 = target._events;
      }
      existing = events2[type2];
    }
    if (existing === void 0) {
      existing = events2[type2] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === "function") {
        existing = events2[type2] = prepend ? [listener, existing] : [existing, listener];
      } else if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
      m = _getMaxListeners(target);
      if (m > 0 && existing.length > m && !existing.warned) {
        existing.warned = true;
        var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
        w.name = "MaxListenersExceededWarning";
        w.emitter = target;
        w.type = type2;
        w.count = existing.length;
        ProcessEmitWarning(w);
      }
    }
    return target;
  }
  EventEmitter.prototype.addListener = function addListener(type2, listener) {
    return _addListener(this, type2, listener, false);
  };
  EventEmitter.prototype.on = EventEmitter.prototype.addListener;
  EventEmitter.prototype.prependListener = function prependListener(type2, listener) {
    return _addListener(this, type2, listener, true);
  };
  function onceWrapper() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      if (arguments.length === 0)
        return this.listener.call(this.target);
      return this.listener.apply(this.target, arguments);
    }
  }
  function _onceWrap(target, type2, listener) {
    var state2 = { fired: false, wrapFn: void 0, target, type: type2, listener };
    var wrapped = onceWrapper.bind(state2);
    wrapped.listener = listener;
    state2.wrapFn = wrapped;
    return wrapped;
  }
  EventEmitter.prototype.once = function once2(type2, listener) {
    checkListener(listener);
    this.on(type2, _onceWrap(this, type2, listener));
    return this;
  };
  EventEmitter.prototype.prependOnceListener = function prependOnceListener(type2, listener) {
    checkListener(listener);
    this.prependListener(type2, _onceWrap(this, type2, listener));
    return this;
  };
  EventEmitter.prototype.removeListener = function removeListener(type2, listener) {
    var list, events2, position, i2, originalListener;
    checkListener(listener);
    events2 = this._events;
    if (events2 === void 0)
      return this;
    list = events2[type2];
    if (list === void 0)
      return this;
    if (list === listener || list.listener === listener) {
      if (--this._eventsCount === 0)
        this._events = /* @__PURE__ */ Object.create(null);
      else {
        delete events2[type2];
        if (events2.removeListener)
          this.emit("removeListener", type2, list.listener || listener);
      }
    } else if (typeof list !== "function") {
      position = -1;
      for (i2 = list.length - 1; i2 >= 0; i2--) {
        if (list[i2] === listener || list[i2].listener === listener) {
          originalListener = list[i2].listener;
          position = i2;
          break;
        }
      }
      if (position < 0)
        return this;
      if (position === 0)
        list.shift();
      else {
        spliceOne(list, position);
      }
      if (list.length === 1)
        events2[type2] = list[0];
      if (events2.removeListener !== void 0)
        this.emit("removeListener", type2, originalListener || listener);
    }
    return this;
  };
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(type2) {
    var listeners, events2, i2;
    events2 = this._events;
    if (events2 === void 0)
      return this;
    if (events2.removeListener === void 0) {
      if (arguments.length === 0) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      } else if (events2[type2] !== void 0) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else
          delete events2[type2];
      }
      return this;
    }
    if (arguments.length === 0) {
      var keys = Object.keys(events2);
      var key2;
      for (i2 = 0; i2 < keys.length; ++i2) {
        key2 = keys[i2];
        if (key2 === "removeListener") continue;
        this.removeAllListeners(key2);
      }
      this.removeAllListeners("removeListener");
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
      return this;
    }
    listeners = events2[type2];
    if (typeof listeners === "function") {
      this.removeListener(type2, listeners);
    } else if (listeners !== void 0) {
      for (i2 = listeners.length - 1; i2 >= 0; i2--) {
        this.removeListener(type2, listeners[i2]);
      }
    }
    return this;
  };
  function _listeners(target, type2, unwrap) {
    var events2 = target._events;
    if (events2 === void 0)
      return [];
    var evlistener = events2[type2];
    if (evlistener === void 0)
      return [];
    if (typeof evlistener === "function")
      return unwrap ? [evlistener.listener || evlistener] : [evlistener];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  }
  EventEmitter.prototype.listeners = function listeners(type2) {
    return _listeners(this, type2, true);
  };
  EventEmitter.prototype.rawListeners = function rawListeners(type2) {
    return _listeners(this, type2, false);
  };
  EventEmitter.listenerCount = function(emitter, type2) {
    if (typeof emitter.listenerCount === "function") {
      return emitter.listenerCount(type2);
    } else {
      return listenerCount.call(emitter, type2);
    }
  };
  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type2) {
    var events2 = this._events;
    if (events2 !== void 0) {
      var evlistener = events2[type2];
      if (typeof evlistener === "function") {
        return 1;
      } else if (evlistener !== void 0) {
        return evlistener.length;
      }
    }
    return 0;
  }
  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
  };
  function arrayClone(arr, n) {
    var copy = new Array(n);
    for (var i2 = 0; i2 < n; ++i2)
      copy[i2] = arr[i2];
    return copy;
  }
  function spliceOne(list, index) {
    for (; index + 1 < list.length; index++)
      list[index] = list[index + 1];
    list.pop();
  }
  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i2 = 0; i2 < ret.length; ++i2) {
      ret[i2] = arr[i2].listener || arr[i2];
    }
    return ret;
  }
  function once(emitter, name2) {
    return new Promise(function(resolve2, reject) {
      function errorListener(err) {
        emitter.removeListener(name2, resolver);
        reject(err);
      }
      function resolver() {
        if (typeof emitter.removeListener === "function") {
          emitter.removeListener("error", errorListener);
        }
        resolve2([].slice.call(arguments));
      }
      eventTargetAgnosticAddListener(emitter, name2, resolver, { once: true });
      if (name2 !== "error") {
        addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
      }
    });
  }
  function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") {
      eventTargetAgnosticAddListener(emitter, "error", handler, flags);
    }
  }
  function eventTargetAgnosticAddListener(emitter, name2, listener, flags) {
    if (typeof emitter.on === "function") {
      if (flags.once) {
        emitter.once(name2, listener);
      } else {
        emitter.on(name2, listener);
      }
    } else if (typeof emitter.addEventListener === "function") {
      emitter.addEventListener(name2, function wrapListener(arg) {
        if (flags.once) {
          emitter.removeEventListener(name2, wrapListener);
        }
        listener(arg);
      });
    } else {
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
  }
  var eventsExports = events.exports;
  const EventEmitter$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(eventsExports);
  const errorClasses = {};
  const deserializers = {};
  const addCustomErrorDeserializer = (name2, deserializer) => {
    deserializers[name2] = deserializer;
  };
  const createCustomErrorClass = (name2) => {
    class CustomErrorClass extends Error {
      constructor(message, fields, options) {
        super(message || name2, options);
        Object.setPrototypeOf(this, CustomErrorClass.prototype);
        this.name = name2;
        if (fields) {
          for (const k in fields) {
            this[k] = fields[k];
          }
        }
        if (options && isObject$2(options) && "cause" in options && !("cause" in this)) {
          const cause = options.cause;
          this.cause = cause;
          if ("stack" in cause) {
            this.stack = this.stack + "\nCAUSE: " + cause.stack;
          }
        }
      }
    }
    errorClasses[name2] = CustomErrorClass;
    return CustomErrorClass;
  };
  function isObject$2(value) {
    return typeof value === "object";
  }
  const deserializeError = (object) => {
    if (object && typeof object === "object") {
      try {
        if (typeof object.message === "string") {
          const msg = JSON.parse(object.message);
          if (msg.message && msg.name) {
            object = msg;
          }
        }
      } catch (e) {
      }
      let error2;
      if (typeof object.name === "string") {
        const { name: name2 } = object;
        const des2 = deserializers[name2];
        if (des2) {
          error2 = des2(object);
        } else {
          let constructor = name2 === "Error" ? Error : errorClasses[name2];
          if (!constructor) {
            console.warn("deserializing an unknown class '" + name2 + "'");
            constructor = createCustomErrorClass(name2);
          }
          error2 = Object.create(constructor.prototype);
          try {
            for (const prop in object) {
              if (object.hasOwnProperty(prop)) {
                error2[prop] = object[prop];
              }
            }
          } catch (e) {
          }
        }
      } else {
        if (typeof object.message === "string") {
          error2 = new Error(object.message);
        }
      }
      if (error2 && !error2.stack && Error.captureStackTrace) {
        Error.captureStackTrace(error2, deserializeError);
      }
      return error2;
    }
    return new Error(String(object));
  };
  const serializeError = (value) => {
    if (!value)
      return value;
    if (typeof value === "object") {
      return destroyCircular(value, []);
    }
    if (typeof value === "function") {
      return `[Function: ${value.name || "anonymous"}]`;
    }
    return value;
  };
  function destroyCircular(from, seen) {
    const to = {};
    seen.push(from);
    for (const key2 of Object.keys(from)) {
      const value = from[key2];
      if (typeof value === "function") {
        continue;
      }
      if (!value || typeof value !== "object") {
        to[key2] = value;
        continue;
      }
      if (seen.indexOf(from[key2]) === -1) {
        to[key2] = destroyCircular(from[key2], seen.slice(0));
        continue;
      }
      to[key2] = "[Circular]";
    }
    if (typeof from.name === "string") {
      to.name = from.name;
    }
    if (typeof from.message === "string") {
      to.message = from.message;
    }
    if (typeof from.stack === "string") {
      to.stack = from.stack;
    }
    return to;
  }
  const AccountNameRequiredError = createCustomErrorClass("AccountNameRequired");
  const AccountNotSupported = createCustomErrorClass("AccountNotSupported");
  const AccountAwaitingSendPendingOperations = createCustomErrorClass("AccountAwaitingSendPendingOperations");
  const AmountRequired = createCustomErrorClass("AmountRequired");
  const BluetoothRequired = createCustomErrorClass("BluetoothRequired");
  const BtcUnmatchedApp = createCustomErrorClass("BtcUnmatchedApp");
  const CantOpenDevice = createCustomErrorClass("CantOpenDevice");
  const CashAddrNotSupported = createCustomErrorClass("CashAddrNotSupported");
  const ClaimRewardsFeesWarning = createCustomErrorClass("ClaimRewardsFeesWarning");
  const CurrencyNotSupported = createCustomErrorClass("CurrencyNotSupported");
  const DeviceAppVerifyNotSupported = createCustomErrorClass("DeviceAppVerifyNotSupported");
  const DeviceGenuineSocketEarlyClose = createCustomErrorClass("DeviceGenuineSocketEarlyClose");
  const DeviceNotGenuineError = createCustomErrorClass("DeviceNotGenuine");
  const DeviceOnDashboardExpected = createCustomErrorClass("DeviceOnDashboardExpected");
  const DeviceOnDashboardUnexpected = createCustomErrorClass("DeviceOnDashboardUnexpected");
  const DeviceInOSUExpected = createCustomErrorClass("DeviceInOSUExpected");
  const DeviceHalted = createCustomErrorClass("DeviceHalted");
  const DeviceNameInvalid = createCustomErrorClass("DeviceNameInvalid");
  const DeviceSocketFail = createCustomErrorClass("DeviceSocketFail");
  const DeviceSocketNoBulkStatus = createCustomErrorClass("DeviceSocketNoBulkStatus");
  const DeviceNeedsRestart = createCustomErrorClass("DeviceSocketNoBulkStatus");
  const UnresponsiveDeviceError = createCustomErrorClass("UnresponsiveDeviceError");
  const DisconnectedDevice = createCustomErrorClass("DisconnectedDevice");
  const DisconnectedDeviceDuringOperation = createCustomErrorClass("DisconnectedDeviceDuringOperation");
  const DeviceExtractOnboardingStateError = createCustomErrorClass("DeviceExtractOnboardingStateError");
  const DeviceOnboardingStatePollingError = createCustomErrorClass("DeviceOnboardingStatePollingError");
  const EnpointConfigError = createCustomErrorClass("EnpointConfig");
  const EthAppPleaseEnableContractData$1 = createCustomErrorClass("EthAppPleaseEnableContractData");
  const FeeEstimationFailed = createCustomErrorClass("FeeEstimationFailed");
  const FirmwareNotRecognized = createCustomErrorClass("FirmwareNotRecognized");
  const HardResetFail = createCustomErrorClass("HardResetFail");
  const InvalidXRPTag = createCustomErrorClass("InvalidXRPTag");
  const InvalidAddress = createCustomErrorClass("InvalidAddress");
  const InvalidNonce = createCustomErrorClass("InvalidNonce");
  const InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass("InvalidAddressBecauseDestinationIsAlsoSource");
  const LatestMCUInstalledError = createCustomErrorClass("LatestMCUInstalledError");
  const UnknownMCU = createCustomErrorClass("UnknownMCU");
  const LedgerAPIError = createCustomErrorClass("LedgerAPIError");
  const LedgerAPIErrorWithMessage = createCustomErrorClass("LedgerAPIErrorWithMessage");
  const LedgerAPINotAvailable = createCustomErrorClass("LedgerAPINotAvailable");
  const ManagerAppAlreadyInstalledError = createCustomErrorClass("ManagerAppAlreadyInstalled");
  const ManagerAppRelyOnBTCError = createCustomErrorClass("ManagerAppRelyOnBTC");
  const ManagerAppDepInstallRequired = createCustomErrorClass("ManagerAppDepInstallRequired");
  const ManagerAppDepUninstallRequired = createCustomErrorClass("ManagerAppDepUninstallRequired");
  const ManagerDeviceLockedError = createCustomErrorClass("ManagerDeviceLocked");
  const ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass("ManagerFirmwareNotEnoughSpace");
  const ManagerNotEnoughSpaceError = createCustomErrorClass("ManagerNotEnoughSpace");
  const ManagerUninstallBTCDep = createCustomErrorClass("ManagerUninstallBTCDep");
  const NetworkDown = createCustomErrorClass("NetworkDown");
  const NetworkError = createCustomErrorClass("NetworkError");
  const NoAddressesFound = createCustomErrorClass("NoAddressesFound");
  const NotEnoughBalance = createCustomErrorClass("NotEnoughBalance");
  const NotEnoughBalanceSwap = createCustomErrorClass("NotEnoughBalanceSwap");
  const NotEnoughBalanceToDelegate = createCustomErrorClass("NotEnoughBalanceToDelegate");
  const NotEnoughBalanceInParentAccount = createCustomErrorClass("NotEnoughBalanceInParentAccount");
  const NotEnoughSpendableBalance = createCustomErrorClass("NotEnoughSpendableBalance");
  const NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass("NotEnoughBalanceBecauseDestinationNotCreated");
  const NoAccessToCamera = createCustomErrorClass("NoAccessToCamera");
  const NotEnoughGas = createCustomErrorClass("NotEnoughGas");
  const NotEnoughGasSwap = createCustomErrorClass("NotEnoughGasSwap");
  const TronEmptyAccount = createCustomErrorClass("TronEmptyAccount");
  const MaybeKeepTronAccountAlive = createCustomErrorClass("MaybeKeepTronAccountAlive");
  const NotSupportedLegacyAddress = createCustomErrorClass("NotSupportedLegacyAddress");
  const GasLessThanEstimate = createCustomErrorClass("GasLessThanEstimate");
  const PriorityFeeTooLow = createCustomErrorClass("PriorityFeeTooLow");
  const PriorityFeeTooHigh = createCustomErrorClass("PriorityFeeTooHigh");
  const PriorityFeeHigherThanMaxFee = createCustomErrorClass("PriorityFeeHigherThanMaxFee");
  const MaxFeeTooLow = createCustomErrorClass("MaxFeeTooLow");
  const PasswordsDontMatchError = createCustomErrorClass("PasswordsDontMatch");
  const PasswordIncorrectError = createCustomErrorClass("PasswordIncorrect");
  const RecommendSubAccountsToEmpty = createCustomErrorClass("RecommendSubAccountsToEmpty");
  const RecommendUndelegation = createCustomErrorClass("RecommendUndelegation");
  const TimeoutTagged = createCustomErrorClass("TimeoutTagged");
  const UnexpectedBootloader = createCustomErrorClass("UnexpectedBootloader");
  const MCUNotGenuineToDashboard = createCustomErrorClass("MCUNotGenuineToDashboard");
  const RecipientRequired = createCustomErrorClass("RecipientRequired");
  const UnavailableTezosOriginatedAccountReceive = createCustomErrorClass("UnavailableTezosOriginatedAccountReceive");
  const UnavailableTezosOriginatedAccountSend = createCustomErrorClass("UnavailableTezosOriginatedAccountSend");
  const UpdateFetchFileFail = createCustomErrorClass("UpdateFetchFileFail");
  const UpdateIncorrectHash = createCustomErrorClass("UpdateIncorrectHash");
  const UpdateIncorrectSig = createCustomErrorClass("UpdateIncorrectSig");
  const UpdateYourApp = createCustomErrorClass("UpdateYourApp");
  const UserRefusedDeviceNameChange = createCustomErrorClass("UserRefusedDeviceNameChange");
  const UserRefusedAddress = createCustomErrorClass("UserRefusedAddress");
  const UserRefusedFirmwareUpdate = createCustomErrorClass("UserRefusedFirmwareUpdate");
  const UserRefusedAllowManager = createCustomErrorClass("UserRefusedAllowManager");
  const UserRefusedOnDevice = createCustomErrorClass("UserRefusedOnDevice");
  const PinNotSet = createCustomErrorClass("PinNotSet");
  const ExpertModeRequired = createCustomErrorClass("ExpertModeRequired");
  const TransportOpenUserCancelled = createCustomErrorClass("TransportOpenUserCancelled");
  const TransportInterfaceNotAvailable = createCustomErrorClass("TransportInterfaceNotAvailable");
  const TransportRaceCondition = createCustomErrorClass("TransportRaceCondition");
  const TransportWebUSBGestureRequired = createCustomErrorClass("TransportWebUSBGestureRequired");
  const TransactionHasBeenValidatedError = createCustomErrorClass("TransactionHasBeenValidatedError");
  const TransportExchangeTimeoutError = createCustomErrorClass("TransportExchangeTimeoutError");
  const DeviceShouldStayInApp = createCustomErrorClass("DeviceShouldStayInApp");
  const WebsocketConnectionError = createCustomErrorClass("WebsocketConnectionError");
  const WebsocketConnectionFailed = createCustomErrorClass("WebsocketConnectionFailed");
  const WrongDeviceForAccount = createCustomErrorClass("WrongDeviceForAccount");
  const WrongDeviceForAccountPayout = createCustomErrorClass("WrongDeviceForAccountPayout");
  const WrongDeviceForAccountRefund = createCustomErrorClass("WrongDeviceForAccountRefund");
  const WrongAppForCurrency = createCustomErrorClass("WrongAppForCurrency");
  const ETHAddressNonEIP = createCustomErrorClass("ETHAddressNonEIP");
  const CantScanQRCode = createCustomErrorClass("CantScanQRCode");
  const FeeNotLoaded = createCustomErrorClass("FeeNotLoaded");
  const FeeNotLoadedSwap = createCustomErrorClass("FeeNotLoadedSwap");
  const FeeRequired = createCustomErrorClass("FeeRequired");
  const FeeTooHigh = createCustomErrorClass("FeeTooHigh");
  const PendingOperation = createCustomErrorClass("PendingOperation");
  const SyncError = createCustomErrorClass("SyncError");
  const PairingFailed = createCustomErrorClass("PairingFailed");
  const PeerRemovedPairing = createCustomErrorClass("PeerRemovedPairing");
  const GenuineCheckFailed = createCustomErrorClass("GenuineCheckFailed");
  const LedgerAPI4xx = createCustomErrorClass("LedgerAPI4xx");
  const LedgerAPI5xx = createCustomErrorClass("LedgerAPI5xx");
  const FirmwareOrAppUpdateRequired = createCustomErrorClass("FirmwareOrAppUpdateRequired");
  const ReplacementTransactionUnderpriced = createCustomErrorClass("ReplacementTransactionUnderpriced");
  const OpReturnDataSizeLimit = createCustomErrorClass("OpReturnSizeLimit");
  const DustLimit = createCustomErrorClass("DustLimit");
  const LanguageNotFound = createCustomErrorClass("LanguageNotFound");
  const NoDBPathGiven = createCustomErrorClass("NoDBPathGiven");
  const DBWrongPassword = createCustomErrorClass("DBWrongPassword");
  const DBNotReset = createCustomErrorClass("DBNotReset");
  const SequenceNumberError = createCustomErrorClass("SequenceNumberError");
  const DisabledTransactionBroadcastError = createCustomErrorClass("DisabledTransactionBroadcastError");
  var HwTransportErrorType;
  (function(HwTransportErrorType2) {
    HwTransportErrorType2["Unknown"] = "Unknown";
    HwTransportErrorType2["LocationServicesDisabled"] = "LocationServicesDisabled";
    HwTransportErrorType2["LocationServicesUnauthorized"] = "LocationServicesUnauthorized";
    HwTransportErrorType2["BluetoothScanStartFailed"] = "BluetoothScanStartFailed";
  })(HwTransportErrorType || (HwTransportErrorType = {}));
  class HwTransportError extends Error {
    constructor(type2, message) {
      super(message);
      this.name = "HwTransportError";
      this.type = type2;
      Object.setPrototypeOf(this, HwTransportError.prototype);
    }
  }
  class TransportError extends Error {
    constructor(message, id2) {
      const name2 = "TransportError";
      super(message || name2);
      this.name = name2;
      this.message = message;
      this.stack = new Error(message).stack;
      this.id = id2;
    }
  }
  addCustomErrorDeserializer("TransportError", (e) => new TransportError(e.message, e.id));
  const StatusCodes = {
    ACCESS_CONDITION_NOT_FULFILLED: 38916,
    ALGORITHM_NOT_SUPPORTED: 38020,
    CLA_NOT_SUPPORTED: 28160,
    CODE_BLOCKED: 38976,
    CODE_NOT_INITIALIZED: 38914,
    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 27009,
    CONDITIONS_OF_USE_NOT_SATISFIED: 27013,
    CONTRADICTION_INVALIDATION: 38928,
    CONTRADICTION_SECRET_CODE_STATUS: 38920,
    DEVICE_IN_RECOVERY_MODE: 26159,
    CUSTOM_IMAGE_EMPTY: 26158,
    FILE_ALREADY_EXISTS: 27273,
    FILE_NOT_FOUND: 37892,
    GP_AUTH_FAILED: 25344,
    HALTED: 28586,
    INCONSISTENT_FILE: 37896,
    INCORRECT_DATA: 27264,
    INCORRECT_LENGTH: 26368,
    INCORRECT_P1_P2: 27392,
    INS_NOT_SUPPORTED: 27904,
    DEVICE_NOT_ONBOARDED: 27911,
    DEVICE_NOT_ONBOARDED_2: 26129,
    INVALID_KCV: 38021,
    INVALID_OFFSET: 37890,
    LICENSING: 28482,
    LOCKED_DEVICE: 21781,
    MAX_VALUE_REACHED: 38992,
    MEMORY_PROBLEM: 37440,
    MISSING_CRITICAL_PARAMETER: 26624,
    NO_EF_SELECTED: 37888,
    NOT_ENOUGH_MEMORY_SPACE: 27268,
    OK: 36864,
    PIN_REMAINING_ATTEMPTS: 25536,
    REFERENCED_DATA_NOT_FOUND: 27272,
    SECURITY_STATUS_NOT_SATISFIED: 27010,
    TECHNICAL_PROBLEM: 28416,
    UNKNOWN_APDU: 27906,
    USER_REFUSED_ON_DEVICE: 21761,
    NOT_ENOUGH_SPACE: 20738,
    APP_NOT_FOUND_OR_INVALID_CONTEXT: 20771,
    INVALID_APP_NAME_LENGTH: 26378,
    GEN_AES_KEY_FAILED: 21529,
    INTERNAL_CRYPTO_OPERATION_FAILED: 21530,
    INTERNAL_COMPUTE_AES_CMAC_FAILED: 21531,
    ENCRYPT_APP_STORAGE_FAILED: 21532,
    INVALID_BACKUP_STATE: 26178,
    PIN_NOT_SET: 21762,
    INVALID_BACKUP_LENGTH: 26419,
    INVALID_RESTORE_STATE: 26179,
    INVALID_CHUNK_LENGTH: 26420,
    INVALID_BACKUP_HEADER: 26698,
    // Not documented:
    TRUSTCHAIN_WRONG_SEED: 45063
  };
  function getAltStatusMessage(code2) {
    switch (code2) {
      case 26368:
        return "Incorrect length";
      case 26624:
        return "Missing critical parameter";
      case 27010:
        return "Security not satisfied (dongle locked or have invalid access rights)";
      case 27013:
        return "Condition of use not satisfied (denied by the user?)";
      case 27264:
        return "Invalid data received";
      case 27392:
        return "Invalid parameter received";
      case 21781:
        return "Locked device";
    }
    if (28416 <= code2 && code2 <= 28671) {
      return "Internal error, please report";
    }
  }
  class TransportStatusError extends Error {
    /**
     * @param statusCode The error status code coming from a Transport implementation
     * @param options containing:
     *  - canBeMappedToChildError: enable the mapping of TransportStatusError to an error extending/inheriting from it
     *  . Ex: LockedDeviceError. Default to true.
     */
    constructor(statusCode, { canBeMappedToChildError = true } = {}) {
      const statusText = Object.keys(StatusCodes).find((k) => StatusCodes[k] === statusCode) || "UNKNOWN_ERROR";
      const smsg = getAltStatusMessage(statusCode) || statusText;
      const statusCodeStr = statusCode.toString(16);
      const message = `Ledger device: ${smsg} (0x${statusCodeStr})`;
      super(message);
      this.name = "TransportStatusError";
      this.statusCode = statusCode;
      this.statusText = statusText;
      Object.setPrototypeOf(this, TransportStatusError.prototype);
      if (canBeMappedToChildError && statusCode === StatusCodes.LOCKED_DEVICE) {
        return new LockedDeviceError(message);
      }
    }
  }
  class LockedDeviceError extends TransportStatusError {
    constructor(message) {
      super(StatusCodes.LOCKED_DEVICE, { canBeMappedToChildError: false });
      if (message) {
        this.message = message;
      }
      this.name = "LockedDeviceError";
      Object.setPrototypeOf(this, LockedDeviceError.prototype);
    }
  }
  addCustomErrorDeserializer("TransportStatusError", (e) => new TransportStatusError(e.statusCode));
  const libEs$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    AccountAwaitingSendPendingOperations,
    AccountNameRequiredError,
    AccountNotSupported,
    AmountRequired,
    BluetoothRequired,
    BtcUnmatchedApp,
    CantOpenDevice,
    CantScanQRCode,
    CashAddrNotSupported,
    ClaimRewardsFeesWarning,
    CurrencyNotSupported,
    DBNotReset,
    DBWrongPassword,
    DeviceAppVerifyNotSupported,
    DeviceExtractOnboardingStateError,
    DeviceGenuineSocketEarlyClose,
    DeviceHalted,
    DeviceInOSUExpected,
    DeviceNameInvalid,
    DeviceNeedsRestart,
    DeviceNotGenuineError,
    DeviceOnDashboardExpected,
    DeviceOnDashboardUnexpected,
    DeviceOnboardingStatePollingError,
    DeviceShouldStayInApp,
    DeviceSocketFail,
    DeviceSocketNoBulkStatus,
    DisabledTransactionBroadcastError,
    DisconnectedDevice,
    DisconnectedDeviceDuringOperation,
    DustLimit,
    ETHAddressNonEIP,
    EnpointConfigError,
    EthAppPleaseEnableContractData: EthAppPleaseEnableContractData$1,
    ExpertModeRequired,
    FeeEstimationFailed,
    FeeNotLoaded,
    FeeNotLoadedSwap,
    FeeRequired,
    FeeTooHigh,
    FirmwareNotRecognized,
    FirmwareOrAppUpdateRequired,
    GasLessThanEstimate,
    GenuineCheckFailed,
    HardResetFail,
    HwTransportError,
    get HwTransportErrorType() {
      return HwTransportErrorType;
    },
    InvalidAddress,
    InvalidAddressBecauseDestinationIsAlsoSource,
    InvalidNonce,
    InvalidXRPTag,
    LanguageNotFound,
    LatestMCUInstalledError,
    LedgerAPI4xx,
    LedgerAPI5xx,
    LedgerAPIError,
    LedgerAPIErrorWithMessage,
    LedgerAPINotAvailable,
    LockedDeviceError,
    MCUNotGenuineToDashboard,
    ManagerAppAlreadyInstalledError,
    ManagerAppDepInstallRequired,
    ManagerAppDepUninstallRequired,
    ManagerAppRelyOnBTCError,
    ManagerDeviceLockedError,
    ManagerFirmwareNotEnoughSpaceError,
    ManagerNotEnoughSpaceError,
    ManagerUninstallBTCDep,
    MaxFeeTooLow,
    MaybeKeepTronAccountAlive,
    NetworkDown,
    NetworkError,
    NoAccessToCamera,
    NoAddressesFound,
    NoDBPathGiven,
    NotEnoughBalance,
    NotEnoughBalanceBecauseDestinationNotCreated,
    NotEnoughBalanceInParentAccount,
    NotEnoughBalanceSwap,
    NotEnoughBalanceToDelegate,
    NotEnoughGas,
    NotEnoughGasSwap,
    NotEnoughSpendableBalance,
    NotSupportedLegacyAddress,
    OpReturnDataSizeLimit,
    PairingFailed,
    PasswordIncorrectError,
    PasswordsDontMatchError,
    PeerRemovedPairing,
    PendingOperation,
    PinNotSet,
    PriorityFeeHigherThanMaxFee,
    PriorityFeeTooHigh,
    PriorityFeeTooLow,
    RecipientRequired,
    RecommendSubAccountsToEmpty,
    RecommendUndelegation,
    ReplacementTransactionUnderpriced,
    SequenceNumberError,
    StatusCodes,
    SyncError,
    TimeoutTagged,
    TransactionHasBeenValidatedError,
    TransportError,
    TransportExchangeTimeoutError,
    TransportInterfaceNotAvailable,
    TransportOpenUserCancelled,
    TransportRaceCondition,
    TransportStatusError,
    TransportWebUSBGestureRequired,
    TronEmptyAccount,
    UnavailableTezosOriginatedAccountReceive,
    UnavailableTezosOriginatedAccountSend,
    UnexpectedBootloader,
    UnknownMCU,
    UnresponsiveDeviceError,
    UpdateFetchFileFail,
    UpdateIncorrectHash,
    UpdateIncorrectSig,
    UpdateYourApp,
    UserRefusedAddress,
    UserRefusedAllowManager,
    UserRefusedDeviceNameChange,
    UserRefusedFirmwareUpdate,
    UserRefusedOnDevice,
    WebsocketConnectionError,
    WebsocketConnectionFailed,
    WrongAppForCurrency,
    WrongDeviceForAccount,
    WrongDeviceForAccountPayout,
    WrongDeviceForAccountRefund,
    addCustomErrorDeserializer,
    createCustomErrorClass,
    deserializeError,
    getAltStatusMessage,
    serializeError
  }, Symbol.toStringTag, { value: "Module" }));
  let id$1 = 0;
  const subscribers = [];
  const log = (type2, message, data) => {
    const obj = {
      type: type2,
      id: String(++id$1),
      date: /* @__PURE__ */ new Date()
    };
    if (message)
      obj.message = message;
    if (data)
      obj.data = data;
    dispatch(obj);
  };
  const trace = ({ type: type2, message, data, context }) => {
    const obj = {
      type: type2,
      id: String(++id$1),
      date: /* @__PURE__ */ new Date()
    };
    if (message)
      obj.message = message;
    if (data)
      obj.data = data;
    if (context)
      obj.context = context;
    dispatch(obj);
  };
  class LocalTracer {
    constructor(type2, context) {
      this.type = type2;
      this.context = context;
    }
    trace(message, data) {
      trace({
        type: this.type,
        message,
        data,
        context: this.context
      });
    }
    getContext() {
      return this.context;
    }
    setContext(context) {
      this.context = context;
    }
    updateContext(contextToAdd) {
      this.context = Object.assign(Object.assign({}, this.context), contextToAdd);
    }
    getType() {
      return this.type;
    }
    setType(type2) {
      this.type = type2;
    }
    /**
     * Create a new instance of the LocalTracer with an updated `type`
     *
     * It does not mutate the calling instance, but returns a new LocalTracer,
     * following a simple builder pattern.
     */
    withType(type2) {
      return new LocalTracer(type2, this.context);
    }
    /**
     * Create a new instance of the LocalTracer with a new `context`
     *
     * It does not mutate the calling instance, but returns a new LocalTracer,
     * following a simple builder pattern.
     *
     * @param context A TraceContext, that can undefined to reset the context
     */
    withContext(context) {
      return new LocalTracer(this.type, context);
    }
    /**
     * Create a new instance of the LocalTracer with an updated `context`,
     * on which an additional context is merged with the existing one.
     *
     * It does not mutate the calling instance, but returns a new LocalTracer,
     * following a simple builder pattern.
     */
    withUpdatedContext(contextToAdd) {
      return new LocalTracer(this.type, Object.assign(Object.assign({}, this.context), contextToAdd));
    }
  }
  const listen = (cb) => {
    subscribers.push(cb);
    return () => {
      const i2 = subscribers.indexOf(cb);
      if (i2 !== -1) {
        subscribers[i2] = subscribers[subscribers.length - 1];
        subscribers.pop();
      }
    };
  };
  function dispatch(log2) {
    for (let i2 = 0; i2 < subscribers.length; i2++) {
      try {
        subscribers[i2](log2);
      } catch (e) {
        console.error(e);
      }
    }
  }
  if (typeof window !== "undefined") {
    window.__ledgerLogsListen = listen;
  }
  const libEs = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    LocalTracer,
    listen,
    log,
    trace
  }, Symbol.toStringTag, { value: "Module" }));
  var __awaiter$g = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const DEFAULT_LOG_TYPE = "transport";
  class Transport {
    constructor({ context, logType } = {}) {
      this.exchangeTimeout = 3e4;
      this.unresponsiveTimeout = 15e3;
      this.deviceModel = null;
      this._events = new EventEmitter$1();
      this.send = (cla_1, ins_1, p1_1, p2_1, ...args_1) => __awaiter$g(this, [cla_1, ins_1, p1_1, p2_1, ...args_1], void 0, function* (cla, ins, p1, p2, data = Buffer.alloc(0), statusList = [StatusCodes.OK], { abortTimeoutMs } = {}) {
        const tracer = this.tracer.withUpdatedContext({ function: "send" });
        if (data.length >= 256) {
          tracer.trace("data.length exceeded 256 bytes limit", { dataLength: data.length });
          throw new TransportError("data.length exceed 256 bytes limit. Got: " + data.length, "DataLengthTooBig");
        }
        tracer.trace("Starting an exchange", { abortTimeoutMs });
        const response2 = yield this.exchange(
          // The size of the data is added in 1 byte just before `data`
          Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]),
          { abortTimeoutMs }
        );
        tracer.trace("Received response from exchange");
        const sw = response2.readUInt16BE(response2.length - 2);
        if (!statusList.some((s2) => s2 === sw)) {
          throw new TransportStatusError(sw);
        }
        return response2;
      });
      this._appAPIlock = null;
      this.tracer = new LocalTracer(logType !== null && logType !== void 0 ? logType : DEFAULT_LOG_TYPE, context);
    }
    /**
     * Send data to the device using a low level API.
     * It's recommended to use the "send" method for a higher level API.
     * @param {Buffer} apdu - The data to send.
     * @param {Object} options - Contains optional options for the exchange function
     *  - abortTimeoutMs: stop the exchange after a given timeout. Another timeout exists
     *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.
     * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.
     */
    exchange(_apdu, { abortTimeoutMs: _abortTimeoutMs } = {}) {
      throw new Error("exchange not implemented");
    }
    /**
     * Send apdus in batch to the device using a low level API.
     * The default implementation is to call exchange for each apdu.
     * @param {Array<Buffer>} apdus - array of apdus to send.
     * @param {Observer<Buffer>} observer - an observer that will receive the response of each apdu.
     * @returns {Subscription} A Subscription object on which you can call ".unsubscribe()" to stop sending apdus.
     */
    exchangeBulk(apdus, observer) {
      let unsubscribed = false;
      const unsubscribe = () => {
        unsubscribed = true;
      };
      const main2 = () => __awaiter$g(this, void 0, void 0, function* () {
        if (unsubscribed)
          return;
        for (const apdu of apdus) {
          const r2 = yield this.exchange(apdu);
          if (unsubscribed)
            return;
          const status = r2.readUInt16BE(r2.length - 2);
          if (status !== StatusCodes.OK) {
            throw new TransportStatusError(status);
          }
          observer.next(r2);
        }
      });
      main2().then(() => !unsubscribed && observer.complete(), (e) => !unsubscribed && observer.error(e));
      return { unsubscribe };
    }
    /**
     * Set the "scramble key" for the next data exchanges with the device.
     * Each app can have a different scramble key and it is set internally during instantiation.
     * @param {string} key - The scramble key to set.
     * deprecated This method is no longer needed for modern transports and should be migrated away from.
     * no @ before deprecated as it breaks documentationjs on version 14.0.2
     * https://github.com/documentationjs/documentation/issues/1596
     */
    setScrambleKey(_key) {
    }
    /**
     * Close the connection with the device.
     *
     * Note: for certain transports (hw-transport-node-hid-singleton for ex), once the promise resolved,
     * the transport instance is actually still cached, and the device is disconnected only after a defined timeout.
     * But for the consumer of the Transport, this does not matter and it can consider the transport to be closed.
     *
     * @returns {Promise<void>} A promise that resolves when the transport is closed.
     */
    close() {
      return Promise.resolve();
    }
    /**
     * Listen for an event on the transport instance.
     * Transport implementations may have specific events. Common events include:
     * "disconnect" : triggered when the transport is disconnected.
     * @param {string} eventName - The name of the event to listen for.
     * @param {(...args: Array<any>) => any} cb - The callback function to be invoked when the event occurs.
     */
    on(eventName, cb) {
      this._events.on(eventName, cb);
    }
    /**
     * Stop listening to an event on an instance of transport.
     */
    off(eventName, cb) {
      this._events.removeListener(eventName, cb);
    }
    emit(event, ...args) {
      this._events.emit(event, ...args);
    }
    /**
     * Enable or not logs of the binary exchange
     */
    setDebugMode() {
      console.warn("setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.");
    }
    /**
     * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)
     */
    setExchangeTimeout(exchangeTimeout) {
      this.exchangeTimeout = exchangeTimeout;
    }
    /**
     * Define the delay before emitting "unresponsive" on an exchange that does not respond
     */
    setExchangeUnresponsiveTimeout(unresponsiveTimeout) {
      this.unresponsiveTimeout = unresponsiveTimeout;
    }
    /**
     * create() allows to open the first descriptor available or
     * throw if there is none or if timeout is reached.
     * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)
     * @example
    TransportFoo.create().then(transport => ...)
     */
    static create(openTimeout = 3e3, listenTimeout) {
      return new Promise((resolve2, reject) => {
        let found = false;
        const sub = this.listen({
          next: (e) => {
            found = true;
            if (sub)
              sub.unsubscribe();
            if (listenTimeoutId)
              clearTimeout(listenTimeoutId);
            this.open(e.descriptor, openTimeout).then(resolve2, reject);
          },
          error: (e) => {
            if (listenTimeoutId)
              clearTimeout(listenTimeoutId);
            reject(e);
          },
          complete: () => {
            if (listenTimeoutId)
              clearTimeout(listenTimeoutId);
            if (!found) {
              reject(new TransportError(this.ErrorMessage_NoDeviceFound, "NoDeviceFound"));
            }
          }
        });
        const listenTimeoutId = listenTimeout ? setTimeout(() => {
          sub.unsubscribe();
          reject(new TransportError(this.ErrorMessage_ListenTimeout, "ListenTimeout"));
        }, listenTimeout) : null;
      });
    }
    /**
     * Wrapper to make an exchange "atomic" (blocking any other exchange)
     *
     * It also handles "unresponsiveness" by emitting "unresponsive" and "responsive" events.
     *
     * @param f The exchange job, using the transport to run
     * @returns a Promise resolving with the output of the given job
     */
    exchangeAtomicImpl(f2) {
      return __awaiter$g(this, void 0, void 0, function* () {
        const tracer = this.tracer.withUpdatedContext({
          function: "exchangeAtomicImpl",
          unresponsiveTimeout: this.unresponsiveTimeout
        });
        if (this.exchangeBusyPromise) {
          tracer.trace("Atomic exchange is already busy");
          throw new TransportRaceCondition("An action was already pending on the Ledger device. Please deny or reconnect.");
        }
        let resolveBusy;
        const busyPromise = new Promise((r2) => {
          resolveBusy = r2;
        });
        this.exchangeBusyPromise = busyPromise;
        let unresponsiveReached = false;
        const timeout = setTimeout(() => {
          tracer.trace(`Timeout reached, emitting Transport event "unresponsive"`, {
            unresponsiveTimeout: this.unresponsiveTimeout
          });
          unresponsiveReached = true;
          this.emit("unresponsive");
        }, this.unresponsiveTimeout);
        try {
          const res = yield f2();
          if (unresponsiveReached) {
            tracer.trace("Device was unresponsive, emitting responsive");
            this.emit("responsive");
          }
          return res;
        } finally {
          tracer.trace("Finalize, clearing busy guard");
          clearTimeout(timeout);
          if (resolveBusy)
            resolveBusy();
          this.exchangeBusyPromise = null;
        }
      });
    }
    decorateAppAPIMethods(self2, methods, scrambleKey) {
      for (const methodName of methods) {
        self2[methodName] = this.decorateAppAPIMethod(methodName, self2[methodName], self2, scrambleKey);
      }
    }
    decorateAppAPIMethod(methodName, f2, ctx, scrambleKey) {
      return (...args) => __awaiter$g(this, void 0, void 0, function* () {
        const { _appAPIlock } = this;
        if (_appAPIlock) {
          return Promise.reject(new TransportError("Ledger Device is busy (lock " + _appAPIlock + ")", "TransportLocked"));
        }
        try {
          this._appAPIlock = methodName;
          this.setScrambleKey(scrambleKey);
          return yield f2.apply(ctx, args);
        } finally {
          this._appAPIlock = null;
        }
      });
    }
    /**
     * Sets the context used by the logging/tracing mechanism
     *
     * Useful when re-using (cached) the same Transport instance,
     * but with a new tracing context.
     *
     * @param context A TraceContext, that can undefined to reset the context
     */
    setTraceContext(context) {
      this.tracer = this.tracer.withContext(context);
    }
    /**
     * Updates the context used by the logging/tracing mechanism
     *
     * The update only overrides the key-value that are already defined in the current context.
     *
     * @param contextToAdd A TraceContext that will be added to the current context
     */
    updateTraceContext(contextToAdd) {
      this.tracer.updateContext(contextToAdd);
    }
    /**
     * Gets the tracing context of the transport instance
     */
    getTraceContext() {
      return this.tracer.getContext();
    }
  }
  Transport.ErrorMessage_ListenTimeout = "No Ledger device found (timeout)";
  Transport.ErrorMessage_NoDeviceFound = "No Ledger device found";
  const Transport$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    StatusCodes,
    TransportError,
    TransportStatusError,
    default: Transport,
    getAltStatusMessage
  }, Symbol.toStringTag, { value: "Module" }));
  const Tag = 5;
  function asUInt16BE(value) {
    const b = Buffer.alloc(2);
    b.writeUInt16BE(value, 0);
    return b;
  }
  const initialAcc = {
    data: Buffer.alloc(0),
    dataLength: 0,
    sequence: 0
  };
  const createHIDframing = (channel, packetSize) => {
    return {
      /**
       * Frames/encodes an APDU message into HID USB packets/frames
       *
       * @param apdu The APDU message to send, in a Buffer containing [cla, ins, p1, p2, data length, data(if not empty)]
       * @returns an array of HID USB frames ready to be sent
       */
      makeBlocks(apdu) {
        let data = Buffer.concat([asUInt16BE(apdu.length), apdu]);
        const blockSize = packetSize - 5;
        const nbBlocks = Math.ceil(data.length / blockSize);
        data = Buffer.concat([data, Buffer.alloc(nbBlocks * blockSize - data.length + 1).fill(0)]);
        const blocks = [];
        for (let i2 = 0; i2 < nbBlocks; i2++) {
          const head = Buffer.alloc(5);
          head.writeUInt16BE(channel, 0);
          head.writeUInt8(Tag, 2);
          head.writeUInt16BE(i2, 3);
          const chunk = data.slice(i2 * blockSize, (i2 + 1) * blockSize);
          blocks.push(Buffer.concat([head, chunk]));
        }
        return blocks;
      },
      /**
       * Reduces HID USB packets/frames to one response.
       *
       * @param acc The value resulting from (accumulating) the previous call of reduceResponse.
       *   On first call initialized to `initialAcc`. The accumulator enables handling multi-frames messages.
       * @param chunk Current chunk to reduce into accumulator
       * @returns An accumulator value updated with the current chunk
       */
      reduceResponse(acc, chunk) {
        let { data, dataLength, sequence } = acc || initialAcc;
        if (chunk.readUInt16BE(0) !== channel) {
          throw new TransportError("Invalid channel", "InvalidChannel");
        }
        if (chunk.readUInt8(2) !== Tag) {
          throw new TransportError("Invalid tag", "InvalidTag");
        }
        if (chunk.readUInt16BE(3) !== sequence) {
          throw new TransportError("Invalid sequence", "InvalidSequence");
        }
        if (!acc) {
          dataLength = chunk.readUInt16BE(5);
        }
        sequence++;
        const chunkData = chunk.slice(acc ? 5 : 7);
        data = Buffer.concat([data, chunkData]);
        if (data.length > dataLength) {
          data = data.slice(0, dataLength);
        }
        return {
          data,
          dataLength,
          sequence
        };
      },
      /**
       * Returns the response message that has been reduced from the HID USB frames
       *
       * @param acc The accumulator
       * @returns A Buffer containing the cleaned response message, or null if no response message, or undefined if the
       *   accumulator is incorrect (message length is not valid)
       */
      getReducedResult(acc) {
        if (acc && acc.dataLength === acc.data.length) {
          return acc.data;
        }
      }
    };
  };
  var re$8 = { exports: {} };
  const SEMVER_SPEC_VERSION$2 = "2.0.0";
  const MAX_LENGTH$5 = 256;
  const MAX_SAFE_INTEGER$7 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
  9007199254740991;
  const MAX_SAFE_COMPONENT_LENGTH$2 = 16;
  const MAX_SAFE_BUILD_LENGTH$2 = MAX_LENGTH$5 - 6;
  const RELEASE_TYPES$2 = [
    "major",
    "premajor",
    "minor",
    "preminor",
    "patch",
    "prepatch",
    "prerelease"
  ];
  var constants$8 = {
    MAX_LENGTH: MAX_LENGTH$5,
    MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH$2,
    MAX_SAFE_BUILD_LENGTH: MAX_SAFE_BUILD_LENGTH$2,
    MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$7,
    RELEASE_TYPES: RELEASE_TYPES$2,
    SEMVER_SPEC_VERSION: SEMVER_SPEC_VERSION$2,
    FLAG_INCLUDE_PRERELEASE: 1,
    FLAG_LOOSE: 2
  };
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  var browser$f = { exports: {} };
  var process = browser$f.exports = {};
  var cachedSetTimeout;
  var cachedClearTimeout;
  function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
  }
  function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
  }
  (function() {
    try {
      if (typeof setTimeout === "function") {
        cachedSetTimeout = setTimeout;
      } else {
        cachedSetTimeout = defaultSetTimout;
      }
    } catch (e) {
      cachedSetTimeout = defaultSetTimout;
    }
    try {
      if (typeof clearTimeout === "function") {
        cachedClearTimeout = clearTimeout;
      } else {
        cachedClearTimeout = defaultClearTimeout;
      }
    } catch (e) {
      cachedClearTimeout = defaultClearTimeout;
    }
  })();
  function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
      return setTimeout(fun, 0);
    }
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
      cachedSetTimeout = setTimeout;
      return setTimeout(fun, 0);
    }
    try {
      return cachedSetTimeout(fun, 0);
    } catch (e) {
      try {
        return cachedSetTimeout.call(null, fun, 0);
      } catch (e2) {
        return cachedSetTimeout.call(this, fun, 0);
      }
    }
  }
  function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
      return clearTimeout(marker);
    }
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
      cachedClearTimeout = clearTimeout;
      return clearTimeout(marker);
    }
    try {
      return cachedClearTimeout(marker);
    } catch (e) {
      try {
        return cachedClearTimeout.call(null, marker);
      } catch (e2) {
        return cachedClearTimeout.call(this, marker);
      }
    }
  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;
  function cleanUpNextTick() {
    if (!draining || !currentQueue) {
      return;
    }
    draining = false;
    if (currentQueue.length) {
      queue = currentQueue.concat(queue);
    } else {
      queueIndex = -1;
    }
    if (queue.length) {
      drainQueue();
    }
  }
  function drainQueue() {
    if (draining) {
      return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len2 = queue.length;
    while (len2) {
      currentQueue = queue;
      queue = [];
      while (++queueIndex < len2) {
        if (currentQueue) {
          currentQueue[queueIndex].run();
        }
      }
      queueIndex = -1;
      len2 = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
  }
  process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        args[i2 - 1] = arguments[i2];
      }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
      runTimeout(drainQueue);
    }
  };
  function Item(fun, array2) {
    this.fun = fun;
    this.array = array2;
  }
  Item.prototype.run = function() {
    this.fun.apply(null, this.array);
  };
  process.title = "browser";
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = "";
  process.versions = {};
  function noop$2() {
  }
  process.on = noop$2;
  process.addListener = noop$2;
  process.once = noop$2;
  process.off = noop$2;
  process.removeListener = noop$2;
  process.removeAllListeners = noop$2;
  process.emit = noop$2;
  process.prependListener = noop$2;
  process.prependOnceListener = noop$2;
  process.listeners = function(name2) {
    return [];
  };
  process.binding = function(name2) {
    throw new Error("process.binding is not supported");
  };
  process.cwd = function() {
    return "/";
  };
  process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
  };
  process.umask = function() {
    return 0;
  };
  var browserExports$1 = browser$f.exports;
  const process$1 = /* @__PURE__ */ getDefaultExportFromCjs(browserExports$1);
  var define_process_env_default$2 = {};
  const debug$5 = typeof process$1 === "object" && define_process_env_default$2 && define_process_env_default$2.NODE_DEBUG && /\bsemver\b/i.test(define_process_env_default$2.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
  };
  var debug_1$3 = debug$5;
  (function(module, exports2) {
    const {
      MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH2,
      MAX_SAFE_BUILD_LENGTH: MAX_SAFE_BUILD_LENGTH2,
      MAX_LENGTH: MAX_LENGTH2
    } = constants$8;
    const debug2 = debug_1$3;
    exports2 = module.exports = {};
    const re2 = exports2.re = [];
    const safeRe = exports2.safeRe = [];
    const src = exports2.src = [];
    const t2 = exports2.t = {};
    let R2 = 0;
    const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    const safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH2],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH2]
    ];
    const makeSafeRegex = (value) => {
      for (const [token, max2] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max2}}`).split(`${token}+`).join(`${token}{1,${max2}}`);
      }
      return value;
    };
    const createToken = (name2, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R2++;
      debug2(name2, index, value);
      t2[name2] = index;
      src[index] = value;
      re2[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t2.NUMERICIDENTIFIER]}|${src[t2.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t2.NUMERICIDENTIFIERLOOSE]}|${src[t2.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t2.PRERELEASEIDENTIFIER]}(?:\\.${src[t2.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t2.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t2.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t2.BUILDIDENTIFIER]}(?:\\.${src[t2.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t2.MAINVERSION]}${src[t2.PRERELEASE]}?${src[t2.BUILD]}?`);
    createToken("FULL", `^${src[t2.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t2.MAINVERSIONLOOSE]}${src[t2.PRERELEASELOOSE]}?${src[t2.BUILD]}?`);
    createToken("LOOSE", `^${src[t2.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t2.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t2.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:${src[t2.PRERELEASE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:${src[t2.PRERELEASELOOSE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH2}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}}))?`);
    createToken("COERCE", `${src[t2.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src[t2.COERCEPLAIN] + `(?:${src[t2.PRERELEASE]})?(?:${src[t2.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t2.COERCE], true);
    createToken("COERCERTLFULL", src[t2.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t2.LONETILDE]}\\s+`, true);
    exports2.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t2.LONECARET]}\\s+`, true);
    exports2.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t2.GTLT]}\\s*(${src[t2.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]}|${src[t2.XRANGEPLAIN]})`, true);
    exports2.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t2.XRANGEPLAIN]})\\s+-\\s+(${src[t2.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t2.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t2.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  })(re$8, re$8.exports);
  var reExports$2 = re$8.exports;
  const looseOption$2 = Object.freeze({ loose: true });
  const emptyOpts$2 = Object.freeze({});
  const parseOptions$5 = (options) => {
    if (!options) {
      return emptyOpts$2;
    }
    if (typeof options !== "object") {
      return looseOption$2;
    }
    return options;
  };
  var parseOptions_1$2 = parseOptions$5;
  const numeric$2 = /^[0-9]+$/;
  const compareIdentifiers$5 = (a, b) => {
    const anum2 = numeric$2.test(a);
    const bnum = numeric$2.test(b);
    if (anum2 && bnum) {
      a = +a;
      b = +b;
    }
    return a === b ? 0 : anum2 && !bnum ? -1 : bnum && !anum2 ? 1 : a < b ? -1 : 1;
  };
  const rcompareIdentifiers$2 = (a, b) => compareIdentifiers$5(b, a);
  var identifiers$5 = {
    compareIdentifiers: compareIdentifiers$5,
    rcompareIdentifiers: rcompareIdentifiers$2
  };
  const debug$4 = debug_1$3;
  const { MAX_LENGTH: MAX_LENGTH$4, MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$6 } = constants$8;
  const { safeRe: re$7, t: t$5 } = reExports$2;
  const parseOptions$4 = parseOptions_1$2;
  const { compareIdentifiers: compareIdentifiers$4 } = identifiers$5;
  let SemVer$F = class SemVer2 {
    constructor(version2, options) {
      options = parseOptions$4(options);
      if (version2 instanceof SemVer2) {
        if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
          return version2;
        } else {
          version2 = version2.version;
        }
      } else if (typeof version2 !== "string") {
        throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version2}".`);
      }
      if (version2.length > MAX_LENGTH$4) {
        throw new TypeError(
          `version is longer than ${MAX_LENGTH$4} characters`
        );
      }
      debug$4("SemVer", version2, options);
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      const m = version2.trim().match(options.loose ? re$7[t$5.LOOSE] : re$7[t$5.FULL]);
      if (!m) {
        throw new TypeError(`Invalid Version: ${version2}`);
      }
      this.raw = version2;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER$6 || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER$6 || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER$6 || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map((id2) => {
          if (/^[0-9]+$/.test(id2)) {
            const num = +id2;
            if (num >= 0 && num < MAX_SAFE_INTEGER$6) {
              return num;
            }
          }
          return id2;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    format() {
      this.version = `${this.major}.${this.minor}.${this.patch}`;
      if (this.prerelease.length) {
        this.version += `-${this.prerelease.join(".")}`;
      }
      return this.version;
    }
    toString() {
      return this.version;
    }
    compare(other) {
      debug$4("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer2)) {
        if (typeof other === "string" && other === this.version) {
          return 0;
        }
        other = new SemVer2(other, this.options);
      }
      if (other.version === this.version) {
        return 0;
      }
      return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
      if (!(other instanceof SemVer2)) {
        other = new SemVer2(other, this.options);
      }
      return compareIdentifiers$4(this.major, other.major) || compareIdentifiers$4(this.minor, other.minor) || compareIdentifiers$4(this.patch, other.patch);
    }
    comparePre(other) {
      if (!(other instanceof SemVer2)) {
        other = new SemVer2(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      let i2 = 0;
      do {
        const a = this.prerelease[i2];
        const b = other.prerelease[i2];
        debug$4("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers$4(a, b);
        }
      } while (++i2);
    }
    compareBuild(other) {
      if (!(other instanceof SemVer2)) {
        other = new SemVer2(other, this.options);
      }
      let i2 = 0;
      do {
        const a = this.build[i2];
        const b = other.build[i2];
        debug$4("build compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers$4(a, b);
        }
      } while (++i2);
    }
    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier, identifierBase);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier, identifierBase);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier, identifierBase);
          this.inc("pre", identifier, identifierBase);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier, identifierBase);
          }
          this.inc("pre", identifier, identifierBase);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre": {
          const base2 = Number(identifierBase) ? 1 : 0;
          if (!identifier && identifierBase === false) {
            throw new Error("invalid increment argument: identifier is empty");
          }
          if (this.prerelease.length === 0) {
            this.prerelease = [base2];
          } else {
            let i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              if (identifier === this.prerelease.join(".") && identifierBase === false) {
                throw new Error("invalid increment argument: identifier already exists");
              }
              this.prerelease.push(base2);
            }
          }
          if (identifier) {
            let prerelease2 = [identifier, base2];
            if (identifierBase === false) {
              prerelease2 = [identifier];
            }
            if (compareIdentifiers$4(this.prerelease[0], identifier) === 0) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = prerelease2;
              }
            } else {
              this.prerelease = prerelease2;
            }
          }
          break;
        }
        default:
          throw new Error(`invalid increment argument: ${release}`);
      }
      this.raw = this.format();
      if (this.build.length) {
        this.raw += `+${this.build.join(".")}`;
      }
      return this;
    }
  };
  var semver$7 = SemVer$F;
  const SemVer$E = semver$7;
  const parse$p = (version2, options, throwErrors = false) => {
    if (version2 instanceof SemVer$E) {
      return version2;
    }
    try {
      return new SemVer$E(version2, options);
    } catch (er) {
      if (!throwErrors) {
        return null;
      }
      throw er;
    }
  };
  var parse_1$2 = parse$p;
  const parse$o = parse_1$2;
  const valid$8 = (version2, options) => {
    const v = parse$o(version2, options);
    return v ? v.version : null;
  };
  var valid_1$2 = valid$8;
  const parse$n = parse_1$2;
  const clean$5 = (version2, options) => {
    const s2 = parse$n(version2.trim().replace(/^[=v]+/, ""), options);
    return s2 ? s2.version : null;
  };
  var clean_1$2 = clean$5;
  const SemVer$D = semver$7;
  const inc$5 = (version2, release, options, identifier, identifierBase) => {
    if (typeof options === "string") {
      identifierBase = identifier;
      identifier = options;
      options = void 0;
    }
    try {
      return new SemVer$D(
        version2 instanceof SemVer$D ? version2.version : version2,
        options
      ).inc(release, identifier, identifierBase).version;
    } catch (er) {
      return null;
    }
  };
  var inc_1$2 = inc$5;
  const parse$m = parse_1$2;
  const diff$5 = (version1, version2) => {
    const v1 = parse$m(version1, null, true);
    const v2 = parse$m(version2, null, true);
    const comparison = v1.compare(v2);
    if (comparison === 0) {
      return null;
    }
    const v1Higher = comparison > 0;
    const highVersion = v1Higher ? v1 : v2;
    const lowVersion = v1Higher ? v2 : v1;
    const highHasPre = !!highVersion.prerelease.length;
    const lowHasPre = !!lowVersion.prerelease.length;
    if (lowHasPre && !highHasPre) {
      if (!lowVersion.patch && !lowVersion.minor) {
        return "major";
      }
      if (highVersion.patch) {
        return "patch";
      }
      if (highVersion.minor) {
        return "minor";
      }
      return "major";
    }
    const prefix = highHasPre ? "pre" : "";
    if (v1.major !== v2.major) {
      return prefix + "major";
    }
    if (v1.minor !== v2.minor) {
      return prefix + "minor";
    }
    if (v1.patch !== v2.patch) {
      return prefix + "patch";
    }
    return "prerelease";
  };
  var diff_1$2 = diff$5;
  const SemVer$C = semver$7;
  const major$5 = (a, loose) => new SemVer$C(a, loose).major;
  var major_1$2 = major$5;
  const SemVer$B = semver$7;
  const minor$5 = (a, loose) => new SemVer$B(a, loose).minor;
  var minor_1$2 = minor$5;
  const SemVer$A = semver$7;
  const patch$5 = (a, loose) => new SemVer$A(a, loose).patch;
  var patch_1$2 = patch$5;
  const parse$l = parse_1$2;
  const prerelease$5 = (version2, options) => {
    const parsed = parse$l(version2, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  };
  var prerelease_1$2 = prerelease$5;
  const SemVer$z = semver$7;
  const compare$A = (a, b, loose) => new SemVer$z(a, loose).compare(new SemVer$z(b, loose));
  var compare_1$2 = compare$A;
  const compare$z = compare_1$2;
  const rcompare$5 = (a, b, loose) => compare$z(b, a, loose);
  var rcompare_1$2 = rcompare$5;
  const compare$y = compare_1$2;
  const compareLoose$5 = (a, b) => compare$y(a, b, true);
  var compareLoose_1$2 = compareLoose$5;
  const SemVer$y = semver$7;
  const compareBuild$b = (a, b, loose) => {
    const versionA = new SemVer$y(a, loose);
    const versionB = new SemVer$y(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  };
  var compareBuild_1$2 = compareBuild$b;
  const compareBuild$a = compareBuild_1$2;
  const sort$5 = (list, loose) => list.sort((a, b) => compareBuild$a(a, b, loose));
  var sort_1$2 = sort$5;
  const compareBuild$9 = compareBuild_1$2;
  const rsort$5 = (list, loose) => list.sort((a, b) => compareBuild$9(b, a, loose));
  var rsort_1$2 = rsort$5;
  const compare$x = compare_1$2;
  const gt$e = (a, b, loose) => compare$x(a, b, loose) > 0;
  var gt_1$2 = gt$e;
  const compare$w = compare_1$2;
  const lt$b = (a, b, loose) => compare$w(a, b, loose) < 0;
  var lt_1$2 = lt$b;
  const compare$v = compare_1$2;
  const eq$8 = (a, b, loose) => compare$v(a, b, loose) === 0;
  var eq_1$2 = eq$8;
  const compare$u = compare_1$2;
  const neq$8 = (a, b, loose) => compare$u(a, b, loose) !== 0;
  var neq_1$2 = neq$8;
  const compare$t = compare_1$2;
  const gte$b = (a, b, loose) => compare$t(a, b, loose) >= 0;
  var gte_1$2 = gte$b;
  const compare$s = compare_1$2;
  const lte$b = (a, b, loose) => compare$s(a, b, loose) <= 0;
  var lte_1$2 = lte$b;
  const eq$7 = eq_1$2;
  const neq$7 = neq_1$2;
  const gt$d = gt_1$2;
  const gte$a = gte_1$2;
  const lt$a = lt_1$2;
  const lte$a = lte_1$2;
  const cmp$5 = (a, op, b, loose) => {
    switch (op) {
      case "===":
        if (typeof a === "object") {
          a = a.version;
        }
        if (typeof b === "object") {
          b = b.version;
        }
        return a === b;
      case "!==":
        if (typeof a === "object") {
          a = a.version;
        }
        if (typeof b === "object") {
          b = b.version;
        }
        return a !== b;
      case "":
      case "=":
      case "==":
        return eq$7(a, b, loose);
      case "!=":
        return neq$7(a, b, loose);
      case ">":
        return gt$d(a, b, loose);
      case ">=":
        return gte$a(a, b, loose);
      case "<":
        return lt$a(a, b, loose);
      case "<=":
        return lte$a(a, b, loose);
      default:
        throw new TypeError(`Invalid operator: ${op}`);
    }
  };
  var cmp_1$2 = cmp$5;
  const SemVer$x = semver$7;
  const parse$k = parse_1$2;
  const { safeRe: re$6, t: t$4 } = reExports$2;
  const coerce$6 = (version2, options) => {
    if (version2 instanceof SemVer$x) {
      return version2;
    }
    if (typeof version2 === "number") {
      version2 = String(version2);
    }
    if (typeof version2 !== "string") {
      return null;
    }
    options = options || {};
    let match = null;
    if (!options.rtl) {
      match = version2.match(options.includePrerelease ? re$6[t$4.COERCEFULL] : re$6[t$4.COERCE]);
    } else {
      const coerceRtlRegex = options.includePrerelease ? re$6[t$4.COERCERTLFULL] : re$6[t$4.COERCERTL];
      let next;
      while ((next = coerceRtlRegex.exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
        if (!match || next.index + next[0].length !== match.index + match[0].length) {
          match = next;
        }
        coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
      }
      coerceRtlRegex.lastIndex = -1;
    }
    if (match === null) {
      return null;
    }
    const major2 = match[2];
    const minor2 = match[3] || "0";
    const patch2 = match[4] || "0";
    const prerelease2 = options.includePrerelease && match[5] ? `-${match[5]}` : "";
    const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
    return parse$k(`${major2}.${minor2}.${patch2}${prerelease2}${build}`, options);
  };
  var coerce_1$2 = coerce$6;
  let LRUCache$2 = class LRUCache {
    constructor() {
      this.max = 1e3;
      this.map = /* @__PURE__ */ new Map();
    }
    get(key2) {
      const value = this.map.get(key2);
      if (value === void 0) {
        return void 0;
      } else {
        this.map.delete(key2);
        this.map.set(key2, value);
        return value;
      }
    }
    delete(key2) {
      return this.map.delete(key2);
    }
    set(key2, value) {
      const deleted = this.delete(key2);
      if (!deleted && value !== void 0) {
        if (this.map.size >= this.max) {
          const firstKey = this.map.keys().next().value;
          this.delete(firstKey);
        }
        this.map.set(key2, value);
      }
      return this;
    }
  };
  var lrucache$2 = LRUCache$2;
  var range$3;
  var hasRequiredRange$3;
  function requireRange$3() {
    if (hasRequiredRange$3) return range$3;
    hasRequiredRange$3 = 1;
    const SPACE_CHARACTERS = /\s+/g;
    class Range2 {
      constructor(range2, options) {
        options = parseOptions2(options);
        if (range2 instanceof Range2) {
          if (range2.loose === !!options.loose && range2.includePrerelease === !!options.includePrerelease) {
            return range2;
          } else {
            return new Range2(range2.raw, options);
          }
        }
        if (range2 instanceof Comparator2) {
          this.raw = range2.value;
          this.set = [[range2]];
          this.formatted = void 0;
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range2.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r2) => this.parseRange(r2.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i2 = 0; i2 < this.set.length; i2++) {
            if (i2 > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i2];
            for (let k = 0; k < comps.length; k++) {
              if (k > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range2) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range2;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re2[t2.HYPHENRANGELOOSE] : re2[t2.HYPHENRANGE];
        range2 = range2.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug2("hyphen replace", range2);
        range2 = range2.replace(re2[t2.COMPARATORTRIM], comparatorTrimReplace);
        debug2("comparator trim", range2);
        range2 = range2.replace(re2[t2.TILDETRIM], tildeTrimReplace);
        debug2("tilde trim", range2);
        range2 = range2.replace(re2[t2.CARETTRIM], caretTrimReplace);
        debug2("caret trim", range2);
        let rangeList = range2.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug2("loose invalid filter", comp, this.options);
            return !!comp.match(re2[t2.COMPARATORLOOSE]);
          });
        }
        debug2("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator2(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range2, options) {
        if (!(range2 instanceof Range2)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range2.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer2(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i2 = 0; i2 < this.set.length; i2++) {
          if (testSet(this.set[i2], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    }
    range$3 = Range2;
    const LRU = lrucache$2;
    const cache = new LRU();
    const parseOptions2 = parseOptions_1$2;
    const Comparator2 = requireComparator$2();
    const debug2 = debug_1$3;
    const SemVer2 = semver$7;
    const {
      safeRe: re2,
      t: t2,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = reExports$2;
    const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = constants$8;
    const isNullSet = (c) => c.value === "<0.0.0-0";
    const isAny = (c) => c.value === "";
    const isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    const parseComparator = (comp, options) => {
      debug2("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug2("caret", comp);
      comp = replaceTildes(comp, options);
      debug2("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug2("xrange", comp);
      comp = replaceStars(comp, options);
      debug2("stars", comp);
      return comp;
    };
    const isX = (id2) => !id2 || id2.toLowerCase() === "x" || id2 === "*";
    const replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
    };
    const replaceTilde = (comp, options) => {
      const r2 = options.loose ? re2[t2.TILDELOOSE] : re2[t2.TILDE];
      return comp.replace(r2, (_, M, m, p, pr) => {
        debug2("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug2("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug2("tilde return", ret);
        return ret;
      });
    };
    const replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
    };
    const replaceCaret = (comp, options) => {
      debug2("caret", comp, options);
      const r2 = options.loose ? re2[t2.CARETLOOSE] : re2[t2.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r2, (_, M, m, p, pr) => {
        debug2("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug2("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug2("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug2("caret return", ret);
        return ret;
      });
    };
    const replaceXRanges = (comp, options) => {
      debug2("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
    };
    const replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r2 = options.loose ? re2[t2.XRANGELOOSE] : re2[t2.XRANGE];
      return comp.replace(r2, (ret, gtlt, M, m, p, pr) => {
        debug2("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug2("xRange return", ret);
        return ret;
      });
    };
    const replaceStars = (comp, options) => {
      debug2("replaceStars", comp, options);
      return comp.trim().replace(re2[t2.STAR], "");
    };
    const replaceGTE0 = (comp, options) => {
      debug2("replaceGTE0", comp, options);
      return comp.trim().replace(re2[options.includePrerelease ? t2.GTE0PRE : t2.GTE0], "");
    };
    const hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    const testSet = (set2, version2, options) => {
      for (let i2 = 0; i2 < set2.length; i2++) {
        if (!set2[i2].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i2 = 0; i2 < set2.length; i2++) {
          debug2(set2[i2].semver);
          if (set2[i2].semver === Comparator2.ANY) {
            continue;
          }
          if (set2[i2].semver.prerelease.length > 0) {
            const allowed = set2[i2].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
    return range$3;
  }
  var comparator$2;
  var hasRequiredComparator$2;
  function requireComparator$2() {
    if (hasRequiredComparator$2) return comparator$2;
    hasRequiredComparator$2 = 1;
    const ANY2 = Symbol("SemVer ANY");
    class Comparator2 {
      static get ANY() {
        return ANY2;
      }
      constructor(comp, options) {
        options = parseOptions2(options);
        if (comp instanceof Comparator2) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug2("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY2) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug2("comp", this);
      }
      parse(comp) {
        const r2 = this.options.loose ? re2[t2.COMPARATORLOOSE] : re2[t2.COMPARATOR];
        const m = comp.match(r2);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY2;
        } else {
          this.semver = new SemVer2(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug2("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY2 || version2 === ANY2) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer2(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp2(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator2)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range2(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range2(this.value, options).test(comp.semver);
        }
        options = parseOptions2(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp2(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp2(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    }
    comparator$2 = Comparator2;
    const parseOptions2 = parseOptions_1$2;
    const { safeRe: re2, t: t2 } = reExports$2;
    const cmp2 = cmp_1$2;
    const debug2 = debug_1$3;
    const SemVer2 = semver$7;
    const Range2 = requireRange$3();
    return comparator$2;
  }
  const Range$t = requireRange$3();
  const satisfies$e = (version2, range2, options) => {
    try {
      range2 = new Range$t(range2, options);
    } catch (er) {
      return false;
    }
    return range2.test(version2);
  };
  var satisfies_1$2 = satisfies$e;
  const Range$s = requireRange$3();
  const toComparators$5 = (range2, options) => new Range$s(range2, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
  var toComparators_1$2 = toComparators$5;
  const SemVer$w = semver$7;
  const Range$r = requireRange$3();
  const maxSatisfying$5 = (versions2, range2, options) => {
    let max2 = null;
    let maxSV = null;
    let rangeObj = null;
    try {
      rangeObj = new Range$r(range2, options);
    } catch (er) {
      return null;
    }
    versions2.forEach((v) => {
      if (rangeObj.test(v)) {
        if (!max2 || maxSV.compare(v) === -1) {
          max2 = v;
          maxSV = new SemVer$w(max2, options);
        }
      }
    });
    return max2;
  };
  var maxSatisfying_1$2 = maxSatisfying$5;
  const SemVer$v = semver$7;
  const Range$q = requireRange$3();
  const minSatisfying$5 = (versions2, range2, options) => {
    let min2 = null;
    let minSV = null;
    let rangeObj = null;
    try {
      rangeObj = new Range$q(range2, options);
    } catch (er) {
      return null;
    }
    versions2.forEach((v) => {
      if (rangeObj.test(v)) {
        if (!min2 || minSV.compare(v) === 1) {
          min2 = v;
          minSV = new SemVer$v(min2, options);
        }
      }
    });
    return min2;
  };
  var minSatisfying_1$2 = minSatisfying$5;
  const SemVer$u = semver$7;
  const Range$p = requireRange$3();
  const gt$c = gt_1$2;
  const minVersion$5 = (range2, loose) => {
    range2 = new Range$p(range2, loose);
    let minver = new SemVer$u("0.0.0");
    if (range2.test(minver)) {
      return minver;
    }
    minver = new SemVer$u("0.0.0-0");
    if (range2.test(minver)) {
      return minver;
    }
    minver = null;
    for (let i2 = 0; i2 < range2.set.length; ++i2) {
      const comparators = range2.set[i2];
      let setMin = null;
      comparators.forEach((comparator2) => {
        const compver = new SemVer$u(comparator2.semver.version);
        switch (comparator2.operator) {
          case ">":
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }
            compver.raw = compver.format();
          case "":
          case ">=":
            if (!setMin || gt$c(compver, setMin)) {
              setMin = compver;
            }
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error(`Unexpected operation: ${comparator2.operator}`);
        }
      });
      if (setMin && (!minver || gt$c(minver, setMin))) {
        minver = setMin;
      }
    }
    if (minver && range2.test(minver)) {
      return minver;
    }
    return null;
  };
  var minVersion_1$2 = minVersion$5;
  const Range$o = requireRange$3();
  const validRange$5 = (range2, options) => {
    try {
      return new Range$o(range2, options).range || "*";
    } catch (er) {
      return null;
    }
  };
  var valid$7 = validRange$5;
  const SemVer$t = semver$7;
  const Comparator$8 = requireComparator$2();
  const { ANY: ANY$5 } = Comparator$8;
  const Range$n = requireRange$3();
  const satisfies$d = satisfies_1$2;
  const gt$b = gt_1$2;
  const lt$9 = lt_1$2;
  const lte$9 = lte_1$2;
  const gte$9 = gte_1$2;
  const outside$b = (version2, range2, hilo, options) => {
    version2 = new SemVer$t(version2, options);
    range2 = new Range$n(range2, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt$b;
        ltefn = lte$9;
        ltfn = lt$9;
        comp = ">";
        ecomp = ">=";
        break;
      case "<":
        gtfn = lt$9;
        ltefn = gte$9;
        ltfn = gt$b;
        comp = "<";
        ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies$d(version2, range2, options)) {
      return false;
    }
    for (let i2 = 0; i2 < range2.set.length; ++i2) {
      const comparators = range2.set[i2];
      let high = null;
      let low = null;
      comparators.forEach((comparator2) => {
        if (comparator2.semver === ANY$5) {
          comparator2 = new Comparator$8(">=0.0.0");
        }
        high = high || comparator2;
        low = low || comparator2;
        if (gtfn(comparator2.semver, high.semver, options)) {
          high = comparator2;
        } else if (ltfn(comparator2.semver, low.semver, options)) {
          low = comparator2;
        }
      });
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }
      if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
        return false;
      }
    }
    return true;
  };
  var outside_1$2 = outside$b;
  const outside$a = outside_1$2;
  const gtr$5 = (version2, range2, options) => outside$a(version2, range2, ">", options);
  var gtr_1$2 = gtr$5;
  const outside$9 = outside_1$2;
  const ltr$5 = (version2, range2, options) => outside$9(version2, range2, "<", options);
  var ltr_1$2 = ltr$5;
  const Range$m = requireRange$3();
  const intersects$5 = (r1, r2, options) => {
    r1 = new Range$m(r1, options);
    r2 = new Range$m(r2, options);
    return r1.intersects(r2, options);
  };
  var intersects_1$2 = intersects$5;
  const satisfies$c = satisfies_1$2;
  const compare$r = compare_1$2;
  var simplify$2 = (versions2, range2, options) => {
    const set2 = [];
    let first = null;
    let prev = null;
    const v = versions2.sort((a, b) => compare$r(a, b, options));
    for (const version2 of v) {
      const included = satisfies$c(version2, range2, options);
      if (included) {
        prev = version2;
        if (!first) {
          first = version2;
        }
      } else {
        if (prev) {
          set2.push([first, prev]);
        }
        prev = null;
        first = null;
      }
    }
    if (first) {
      set2.push([first, null]);
    }
    const ranges = [];
    for (const [min2, max2] of set2) {
      if (min2 === max2) {
        ranges.push(min2);
      } else if (!max2 && min2 === v[0]) {
        ranges.push("*");
      } else if (!max2) {
        ranges.push(`>=${min2}`);
      } else if (min2 === v[0]) {
        ranges.push(`<=${max2}`);
      } else {
        ranges.push(`${min2} - ${max2}`);
      }
    }
    const simplified = ranges.join(" || ");
    const original = typeof range2.raw === "string" ? range2.raw : String(range2);
    return simplified.length < original.length ? simplified : range2;
  };
  const Range$l = requireRange$3();
  const Comparator$7 = requireComparator$2();
  const { ANY: ANY$4 } = Comparator$7;
  const satisfies$b = satisfies_1$2;
  const compare$q = compare_1$2;
  const subset$5 = (sub, dom, options = {}) => {
    if (sub === dom) {
      return true;
    }
    sub = new Range$l(sub, options);
    dom = new Range$l(dom, options);
    let sawNonNull = false;
    OUTER: for (const simpleSub of sub.set) {
      for (const simpleDom of dom.set) {
        const isSub = simpleSubset$2(simpleSub, simpleDom, options);
        sawNonNull = sawNonNull || isSub !== null;
        if (isSub) {
          continue OUTER;
        }
      }
      if (sawNonNull) {
        return false;
      }
    }
    return true;
  };
  const minimumVersionWithPreRelease$2 = [new Comparator$7(">=0.0.0-0")];
  const minimumVersion$2 = [new Comparator$7(">=0.0.0")];
  const simpleSubset$2 = (sub, dom, options) => {
    if (sub === dom) {
      return true;
    }
    if (sub.length === 1 && sub[0].semver === ANY$4) {
      if (dom.length === 1 && dom[0].semver === ANY$4) {
        return true;
      } else if (options.includePrerelease) {
        sub = minimumVersionWithPreRelease$2;
      } else {
        sub = minimumVersion$2;
      }
    }
    if (dom.length === 1 && dom[0].semver === ANY$4) {
      if (options.includePrerelease) {
        return true;
      } else {
        dom = minimumVersion$2;
      }
    }
    const eqSet = /* @__PURE__ */ new Set();
    let gt2, lt2;
    for (const c of sub) {
      if (c.operator === ">" || c.operator === ">=") {
        gt2 = higherGT$2(gt2, c, options);
      } else if (c.operator === "<" || c.operator === "<=") {
        lt2 = lowerLT$2(lt2, c, options);
      } else {
        eqSet.add(c.semver);
      }
    }
    if (eqSet.size > 1) {
      return null;
    }
    let gtltComp;
    if (gt2 && lt2) {
      gtltComp = compare$q(gt2.semver, lt2.semver, options);
      if (gtltComp > 0) {
        return null;
      } else if (gtltComp === 0 && (gt2.operator !== ">=" || lt2.operator !== "<=")) {
        return null;
      }
    }
    for (const eq2 of eqSet) {
      if (gt2 && !satisfies$b(eq2, String(gt2), options)) {
        return null;
      }
      if (lt2 && !satisfies$b(eq2, String(lt2), options)) {
        return null;
      }
      for (const c of dom) {
        if (!satisfies$b(eq2, String(c), options)) {
          return false;
        }
      }
      return true;
    }
    let higher, lower;
    let hasDomLT, hasDomGT;
    let needDomLTPre = lt2 && !options.includePrerelease && lt2.semver.prerelease.length ? lt2.semver : false;
    let needDomGTPre = gt2 && !options.includePrerelease && gt2.semver.prerelease.length ? gt2.semver : false;
    if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt2.operator === "<" && needDomLTPre.prerelease[0] === 0) {
      needDomLTPre = false;
    }
    for (const c of dom) {
      hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
      hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
      if (gt2) {
        if (needDomGTPre) {
          if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
            needDomGTPre = false;
          }
        }
        if (c.operator === ">" || c.operator === ">=") {
          higher = higherGT$2(gt2, c, options);
          if (higher === c && higher !== gt2) {
            return false;
          }
        } else if (gt2.operator === ">=" && !satisfies$b(gt2.semver, String(c), options)) {
          return false;
        }
      }
      if (lt2) {
        if (needDomLTPre) {
          if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
            needDomLTPre = false;
          }
        }
        if (c.operator === "<" || c.operator === "<=") {
          lower = lowerLT$2(lt2, c, options);
          if (lower === c && lower !== lt2) {
            return false;
          }
        } else if (lt2.operator === "<=" && !satisfies$b(lt2.semver, String(c), options)) {
          return false;
        }
      }
      if (!c.operator && (lt2 || gt2) && gtltComp !== 0) {
        return false;
      }
    }
    if (gt2 && hasDomLT && !lt2 && gtltComp !== 0) {
      return false;
    }
    if (lt2 && hasDomGT && !gt2 && gtltComp !== 0) {
      return false;
    }
    if (needDomGTPre || needDomLTPre) {
      return false;
    }
    return true;
  };
  const higherGT$2 = (a, b, options) => {
    if (!a) {
      return b;
    }
    const comp = compare$q(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
  };
  const lowerLT$2 = (a, b, options) => {
    if (!a) {
      return b;
    }
    const comp = compare$q(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
  };
  var subset_1$2 = subset$5;
  const internalRe$2 = reExports$2;
  const constants$7 = constants$8;
  const SemVer$s = semver$7;
  const identifiers$4 = identifiers$5;
  const parse$j = parse_1$2;
  const valid$6 = valid_1$2;
  const clean$4 = clean_1$2;
  const inc$4 = inc_1$2;
  const diff$4 = diff_1$2;
  const major$4 = major_1$2;
  const minor$4 = minor_1$2;
  const patch$4 = patch_1$2;
  const prerelease$4 = prerelease_1$2;
  const compare$p = compare_1$2;
  const rcompare$4 = rcompare_1$2;
  const compareLoose$4 = compareLoose_1$2;
  const compareBuild$8 = compareBuild_1$2;
  const sort$4 = sort_1$2;
  const rsort$4 = rsort_1$2;
  const gt$a = gt_1$2;
  const lt$8 = lt_1$2;
  const eq$6 = eq_1$2;
  const neq$6 = neq_1$2;
  const gte$8 = gte_1$2;
  const lte$8 = lte_1$2;
  const cmp$4 = cmp_1$2;
  const coerce$5 = coerce_1$2;
  const Comparator$6 = requireComparator$2();
  const Range$k = requireRange$3();
  const satisfies$a = satisfies_1$2;
  const toComparators$4 = toComparators_1$2;
  const maxSatisfying$4 = maxSatisfying_1$2;
  const minSatisfying$4 = minSatisfying_1$2;
  const minVersion$4 = minVersion_1$2;
  const validRange$4 = valid$7;
  const outside$8 = outside_1$2;
  const gtr$4 = gtr_1$2;
  const ltr$4 = ltr_1$2;
  const intersects$4 = intersects_1$2;
  const simplifyRange$2 = simplify$2;
  const subset$4 = subset_1$2;
  var semver$5 = {
    parse: parse$j,
    valid: valid$6,
    clean: clean$4,
    inc: inc$4,
    diff: diff$4,
    major: major$4,
    minor: minor$4,
    patch: patch$4,
    prerelease: prerelease$4,
    compare: compare$p,
    rcompare: rcompare$4,
    compareLoose: compareLoose$4,
    compareBuild: compareBuild$8,
    sort: sort$4,
    rsort: rsort$4,
    gt: gt$a,
    lt: lt$8,
    eq: eq$6,
    neq: neq$6,
    gte: gte$8,
    lte: lte$8,
    cmp: cmp$4,
    coerce: coerce$5,
    Comparator: Comparator$6,
    Range: Range$k,
    satisfies: satisfies$a,
    toComparators: toComparators$4,
    maxSatisfying: maxSatisfying$4,
    minSatisfying: minSatisfying$4,
    minVersion: minVersion$4,
    validRange: validRange$4,
    outside: outside$8,
    gtr: gtr$4,
    ltr: ltr$4,
    intersects: intersects$4,
    simplifyRange: simplifyRange$2,
    subset: subset$4,
    SemVer: SemVer$s,
    re: internalRe$2.re,
    src: internalRe$2.src,
    tokens: internalRe$2.t,
    SEMVER_SPEC_VERSION: constants$7.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: constants$7.RELEASE_TYPES,
    compareIdentifiers: identifiers$4.compareIdentifiers,
    rcompareIdentifiers: identifiers$4.rcompareIdentifiers
  };
  const semver$6 = /* @__PURE__ */ getDefaultExportFromCjs$1(semver$5);
  var DeviceModelId;
  (function(DeviceModelId2) {
    DeviceModelId2["blue"] = "blue";
    DeviceModelId2["nanoS"] = "nanoS";
    DeviceModelId2["nanoSP"] = "nanoSP";
    DeviceModelId2["nanoX"] = "nanoX";
    DeviceModelId2["stax"] = "stax";
    DeviceModelId2["europa"] = "europa";
  })(DeviceModelId || (DeviceModelId = {}));
  const devices = {
    [DeviceModelId.blue]: {
      id: DeviceModelId.blue,
      productName: "Ledger Blue",
      productIdMM: 0,
      legacyUsbProductId: 0,
      usbOnly: true,
      memorySize: 480 * 1024,
      masks: [822083584, 822149120],
      getBlockSize: (_firwareVersion) => 4 * 1024
    },
    [DeviceModelId.nanoS]: {
      id: DeviceModelId.nanoS,
      productName: "Ledger Nano S",
      productIdMM: 16,
      legacyUsbProductId: 1,
      usbOnly: true,
      memorySize: 320 * 1024,
      masks: [823132160],
      getBlockSize: (firmwareVersion) => {
        var _a2;
        return semver$6.lt((_a2 = semver$6.coerce(firmwareVersion)) !== null && _a2 !== void 0 ? _a2 : "", "2.0.0") ? 4 * 1024 : 2 * 1024;
      }
    },
    [DeviceModelId.nanoX]: {
      id: DeviceModelId.nanoX,
      productName: "Ledger Nano X",
      productIdMM: 64,
      legacyUsbProductId: 4,
      usbOnly: false,
      memorySize: 2 * 1024 * 1024,
      masks: [855638016],
      getBlockSize: (_firwareVersion) => 4 * 1024,
      bluetoothSpec: [
        {
          serviceUuid: "13d63400-2c97-0004-0000-4c6564676572",
          notifyUuid: "13d63400-2c97-0004-0001-4c6564676572",
          writeUuid: "13d63400-2c97-0004-0002-4c6564676572",
          writeCmdUuid: "13d63400-2c97-0004-0003-4c6564676572"
        }
      ]
    },
    [DeviceModelId.nanoSP]: {
      id: DeviceModelId.nanoSP,
      productName: "Ledger Nano S Plus",
      productIdMM: 80,
      legacyUsbProductId: 5,
      usbOnly: true,
      memorySize: 1533 * 1024,
      masks: [856686592],
      getBlockSize: (_firmwareVersion) => 32
    },
    [DeviceModelId.stax]: {
      id: DeviceModelId.stax,
      productName: "Ledger Stax",
      productIdMM: 96,
      legacyUsbProductId: 6,
      usbOnly: false,
      memorySize: 1533 * 1024,
      masks: [857735168],
      getBlockSize: (_firmwareVersion) => 32,
      bluetoothSpec: [
        {
          serviceUuid: "13d63400-2c97-6004-0000-4c6564676572",
          notifyUuid: "13d63400-2c97-6004-0001-4c6564676572",
          writeUuid: "13d63400-2c97-6004-0002-4c6564676572",
          writeCmdUuid: "13d63400-2c97-6004-0003-4c6564676572"
        }
      ]
    },
    [DeviceModelId.europa]: {
      id: DeviceModelId.europa,
      productName: "Ledger Flex",
      productIdMM: 112,
      legacyUsbProductId: 7,
      usbOnly: false,
      memorySize: 1533 * 1024,
      masks: [858783744],
      getBlockSize: (_firmwareVersion) => 32,
      bluetoothSpec: [
        {
          serviceUuid: "13d63400-2c97-3004-0000-4c6564676572",
          notifyUuid: "13d63400-2c97-3004-0001-4c6564676572",
          writeUuid: "13d63400-2c97-3004-0002-4c6564676572",
          writeCmdUuid: "13d63400-2c97-3004-0003-4c6564676572"
        }
      ]
    }
  };
  ({
    Blue: DeviceModelId.blue,
    "Nano S": DeviceModelId.nanoS,
    "Nano S Plus": DeviceModelId.nanoSP,
    "Nano X": DeviceModelId.nanoX,
    Stax: DeviceModelId.stax,
    Europa: DeviceModelId.europa
  });
  const devicesList = Object.values(devices);
  const ledgerUSBVendorId = 11415;
  const identifyUSBProductId = (usbProductId) => {
    const legacy2 = devicesList.find((d) => d.legacyUsbProductId === usbProductId);
    if (legacy2)
      return legacy2;
    const mm = usbProductId >> 8;
    const deviceModel = devicesList.find((d) => d.productIdMM === mm);
    return deviceModel;
  };
  const bluetoothServices = [];
  const serviceUuidToInfos = {};
  for (const id2 in devices) {
    const deviceModel = devices[id2];
    const { bluetoothSpec } = deviceModel;
    if (bluetoothSpec) {
      for (let i2 = 0; i2 < bluetoothSpec.length; i2++) {
        const spec = bluetoothSpec[i2];
        bluetoothServices.push(spec.serviceUuid);
        serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, "")] = Object.assign({ deviceModel }, spec);
      }
    }
  }
  var __awaiter$f = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const ledgerDevices$1 = [
    {
      vendorId: ledgerUSBVendorId
    }
  ];
  function requestLedgerDevice() {
    return __awaiter$f(this, void 0, void 0, function* () {
      const device = yield navigator.usb.requestDevice({
        filters: ledgerDevices$1
      });
      return device;
    });
  }
  function getLedgerDevices$1() {
    return __awaiter$f(this, void 0, void 0, function* () {
      const devices2 = yield navigator.usb.getDevices();
      return devices2.filter((d) => d.vendorId === ledgerUSBVendorId);
    });
  }
  function getFirstLedgerDevice$1() {
    return __awaiter$f(this, void 0, void 0, function* () {
      const existingDevices = yield getLedgerDevices$1();
      if (existingDevices.length > 0)
        return existingDevices[0];
      return requestLedgerDevice();
    });
  }
  const isSupported$2 = () => Promise.resolve(!!navigator && !!navigator.usb && typeof navigator.usb.getDevices === "function");
  var __awaiter$e = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const configurationValue = 1;
  const endpointNumber = 3;
  class TransportWebUSB extends Transport {
    constructor(device, interfaceNumber) {
      super();
      this.channel = Math.floor(Math.random() * 65535);
      this.packetSize = 64;
      this._disconnectEmitted = false;
      this._emitDisconnect = (e) => {
        if (this._disconnectEmitted)
          return;
        this._disconnectEmitted = true;
        this.emit("disconnect", e);
      };
      this.device = device;
      this.interfaceNumber = interfaceNumber;
      this.deviceModel = identifyUSBProductId(device.productId);
    }
    /**
     * Similar to create() except it will always display the device permission (even if some devices are already accepted).
     */
    static request() {
      return __awaiter$e(this, void 0, void 0, function* () {
        const device = yield requestLedgerDevice();
        return TransportWebUSB.open(device);
      });
    }
    /**
     * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).
     */
    static openConnected() {
      return __awaiter$e(this, void 0, void 0, function* () {
        const devices2 = yield getLedgerDevices$1();
        if (devices2.length === 0)
          return null;
        return TransportWebUSB.open(devices2[0]);
      });
    }
    /**
     * Create a Ledger transport with a USBDevice
     */
    static open(device) {
      return __awaiter$e(this, void 0, void 0, function* () {
        yield device.open();
        if (device.configuration === null) {
          yield device.selectConfiguration(configurationValue);
        }
        yield gracefullyResetDevice(device);
        const iface = device.configurations[0].interfaces.find(({ alternates }) => alternates.some((a) => a.interfaceClass === 255));
        if (!iface) {
          throw new TransportInterfaceNotAvailable("No WebUSB interface found for your Ledger device. Please upgrade firmware or contact techsupport.");
        }
        const interfaceNumber = iface.interfaceNumber;
        try {
          yield device.claimInterface(interfaceNumber);
        } catch (e) {
          yield device.close();
          throw new TransportInterfaceNotAvailable(e.message);
        }
        const transport = new TransportWebUSB(device, interfaceNumber);
        const onDisconnect = (e) => {
          if (device === e.device) {
            navigator.usb.removeEventListener("disconnect", onDisconnect);
            transport._emitDisconnect(new DisconnectedDevice());
          }
        };
        navigator.usb.addEventListener("disconnect", onDisconnect);
        return transport;
      });
    }
    /**
     * Release the transport device
     */
    close() {
      return __awaiter$e(this, void 0, void 0, function* () {
        yield this.exchangeBusyPromise;
        yield this.device.releaseInterface(this.interfaceNumber);
        yield gracefullyResetDevice(this.device);
        yield this.device.close();
      });
    }
    /**
     * Exchange with the device using APDU protocol.
     * @param apdu
     * @returns a promise of apdu response
     */
    exchange(apdu) {
      return __awaiter$e(this, void 0, void 0, function* () {
        const b = yield this.exchangeAtomicImpl(() => __awaiter$e(this, void 0, void 0, function* () {
          const { channel, packetSize } = this;
          log("apdu", "=> " + apdu.toString("hex"));
          const framing = createHIDframing(channel, packetSize);
          const blocks = framing.makeBlocks(apdu);
          for (let i2 = 0; i2 < blocks.length; i2++) {
            yield this.device.transferOut(endpointNumber, blocks[i2]);
          }
          let result;
          let acc;
          while (!(result = framing.getReducedResult(acc))) {
            const r2 = yield this.device.transferIn(endpointNumber, packetSize);
            const buffer2 = Buffer.from(r2.data.buffer);
            acc = framing.reduceResponse(acc, buffer2);
          }
          log("apdu", "<= " + result.toString("hex"));
          return result;
        })).catch((e) => {
          if (e && e.message && e.message.includes("disconnected")) {
            this._emitDisconnect(e);
            throw new DisconnectedDeviceDuringOperation(e.message);
          }
          throw e;
        });
        return b;
      });
    }
    setScrambleKey() {
    }
  }
  TransportWebUSB.isSupported = isSupported$2;
  TransportWebUSB.list = getLedgerDevices$1;
  TransportWebUSB.listen = (observer) => {
    let unsubscribed = false;
    getFirstLedgerDevice$1().then((device) => {
      if (!unsubscribed) {
        const deviceModel = identifyUSBProductId(device.productId);
        observer.next({
          type: "add",
          descriptor: device,
          deviceModel
        });
        observer.complete();
      }
    }, (error2) => {
      if (window.DOMException && error2 instanceof window.DOMException && error2.code === 18) {
        observer.error(new TransportWebUSBGestureRequired(error2.message));
      } else {
        observer.error(new TransportOpenUserCancelled(error2.message));
      }
    });
    function unsubscribe() {
      unsubscribed = true;
    }
    return {
      unsubscribe
    };
  };
  function gracefullyResetDevice(device) {
    return __awaiter$e(this, void 0, void 0, function* () {
      try {
        yield device.reset();
      } catch (err) {
        console.warn(err);
      }
    });
  }
  var __awaiter$d = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const ledgerDevices = [
    {
      vendorId: ledgerUSBVendorId
    }
  ];
  const isSupported$1 = () => Promise.resolve(!!(window.navigator && window.navigator.hid));
  const getHID = () => {
    const { hid } = navigator;
    if (!hid)
      throw new TransportError("navigator.hid is not supported", "HIDNotSupported");
    return hid;
  };
  function requestLedgerDevices() {
    return __awaiter$d(this, void 0, void 0, function* () {
      const device = yield getHID().requestDevice({
        filters: ledgerDevices
      });
      if (Array.isArray(device))
        return device;
      return [device];
    });
  }
  function getLedgerDevices() {
    return __awaiter$d(this, void 0, void 0, function* () {
      const devices2 = yield getHID().getDevices();
      return devices2.filter((d) => d.vendorId === ledgerUSBVendorId);
    });
  }
  function getFirstLedgerDevice() {
    return __awaiter$d(this, void 0, void 0, function* () {
      const existingDevices = yield getLedgerDevices();
      if (existingDevices.length > 0)
        return existingDevices[0];
      const devices2 = yield requestLedgerDevices();
      return devices2[0];
    });
  }
  class TransportWebHID extends Transport {
    constructor(device) {
      super();
      this.channel = Math.floor(Math.random() * 65535);
      this.packetSize = 64;
      this.inputs = [];
      this.read = () => {
        if (this.inputs.length) {
          return Promise.resolve(this.inputs.shift());
        }
        return new Promise((success) => {
          this.inputCallback = success;
        });
      };
      this.onInputReport = (e) => {
        const buffer2 = Buffer.from(e.data.buffer);
        if (this.inputCallback) {
          this.inputCallback(buffer2);
          this.inputCallback = null;
        } else {
          this.inputs.push(buffer2);
        }
      };
      this._disconnectEmitted = false;
      this._emitDisconnect = (e) => {
        if (this._disconnectEmitted)
          return;
        this._disconnectEmitted = true;
        this.emit("disconnect", e);
      };
      this.exchange = (apdu) => __awaiter$d(this, void 0, void 0, function* () {
        const b = yield this.exchangeAtomicImpl(() => __awaiter$d(this, void 0, void 0, function* () {
          const { channel, packetSize } = this;
          log("apdu", "=> " + apdu.toString("hex"));
          const framing = createHIDframing(channel, packetSize);
          const blocks = framing.makeBlocks(apdu);
          for (let i2 = 0; i2 < blocks.length; i2++) {
            yield this.device.sendReport(0, blocks[i2]);
          }
          let result;
          let acc;
          while (!(result = framing.getReducedResult(acc))) {
            try {
              const buffer2 = yield this.read();
              acc = framing.reduceResponse(acc, buffer2);
            } catch (e) {
              if (e instanceof TransportError && e.id === "InvalidChannel") {
                continue;
              }
              throw e;
            }
          }
          log("apdu", "<= " + result.toString("hex"));
          return result;
        })).catch((e) => {
          if (e && e.message && e.message.includes("write")) {
            this._emitDisconnect(e);
            throw new DisconnectedDeviceDuringOperation(e.message);
          }
          throw e;
        });
        return b;
      });
      this.device = device;
      this.deviceModel = typeof device.productId === "number" ? identifyUSBProductId(device.productId) : void 0;
      device.addEventListener("inputreport", this.onInputReport);
    }
    /**
     * Similar to create() except it will always display the device permission (even if some devices are already accepted).
     */
    static request() {
      return __awaiter$d(this, void 0, void 0, function* () {
        const [device] = yield requestLedgerDevices();
        return TransportWebHID.open(device);
      });
    }
    /**
     * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).
     */
    static openConnected() {
      return __awaiter$d(this, void 0, void 0, function* () {
        const devices2 = yield getLedgerDevices();
        if (devices2.length === 0)
          return null;
        return TransportWebHID.open(devices2[0]);
      });
    }
    /**
     * Create a Ledger transport with a HIDDevice
     */
    static open(device) {
      return __awaiter$d(this, void 0, void 0, function* () {
        yield device.open();
        const transport = new TransportWebHID(device);
        const onDisconnect = (e) => {
          if (device === e.device) {
            getHID().removeEventListener("disconnect", onDisconnect);
            transport._emitDisconnect(new DisconnectedDevice());
          }
        };
        getHID().addEventListener("disconnect", onDisconnect);
        return transport;
      });
    }
    /**
     * Release the transport device
     */
    close() {
      return __awaiter$d(this, void 0, void 0, function* () {
        yield this.exchangeBusyPromise;
        this.device.removeEventListener("inputreport", this.onInputReport);
        yield this.device.close();
      });
    }
    setScrambleKey() {
    }
  }
  TransportWebHID.isSupported = isSupported$1;
  TransportWebHID.list = getLedgerDevices;
  TransportWebHID.listen = (observer) => {
    let unsubscribed = false;
    getFirstLedgerDevice().then((device) => {
      if (!device) {
        observer.error(new TransportOpenUserCancelled("Access denied to use Ledger device"));
      } else if (!unsubscribed) {
        const deviceModel = typeof device.productId === "number" ? identifyUSBProductId(device.productId) : void 0;
        observer.next({
          type: "add",
          descriptor: device,
          deviceModel
        });
        observer.complete();
      }
    }, (error2) => {
      observer.error(new TransportOpenUserCancelled(error2.message));
    });
    function unsubscribe() {
      unsubscribed = true;
    }
    return {
      unsubscribe
    };
  };
  var isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER$5 = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
  function clone(configObject) {
    var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
      prefix: "",
      groupSize: 3,
      secondaryGroupSize: 0,
      groupSeparator: ",",
      decimalSeparator: ".",
      fractionGroupSize: 0,
      fractionGroupSeparator: " ",
      // non-breaking space
      suffix: ""
    }, ALPHABET2 = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
    function BigNumber2(v, b) {
      var alphabet, c, caseChanged, e, i2, isNum, len2, str, x = this;
      if (!(x instanceof BigNumber2)) return new BigNumber2(v, b);
      if (b == null) {
        if (v && v._isBigNumber === true) {
          x.s = v.s;
          if (!v.c || v.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (v.e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = v.e;
            x.c = v.c.slice();
          }
          return;
        }
        if ((isNum = typeof v == "number") && v * 0 == 0) {
          x.s = 1 / v < 0 ? (v = -v, -1) : 1;
          if (v === ~~v) {
            for (e = 0, i2 = v; i2 >= 10; i2 /= 10, e++) ;
            if (e > MAX_EXP) {
              x.c = x.e = null;
            } else {
              x.e = e;
              x.c = [v];
            }
            return;
          }
          str = String(v);
        } else {
          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
        }
        if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
        if ((i2 = str.search(/e/i)) > 0) {
          if (e < 0) e = i2;
          e += +str.slice(i2 + 1);
          str = str.substring(0, i2);
        } else if (e < 0) {
          e = str.length;
        }
      } else {
        intCheck(b, 2, ALPHABET2.length, "Base");
        if (b == 10 && alphabetHasNormalDecimalDigits) {
          x = new BigNumber2(v);
          return round2(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
        }
        str = String(v);
        if (isNum = typeof v == "number") {
          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
          if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
            throw Error(tooManyDigits + v);
          }
        } else {
          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
        }
        alphabet = ALPHABET2.slice(0, b);
        e = i2 = 0;
        for (len2 = str.length; i2 < len2; i2++) {
          if (alphabet.indexOf(c = str.charAt(i2)) < 0) {
            if (c == ".") {
              if (i2 > e) {
                e = len2;
                continue;
              }
            } else if (!caseChanged) {
              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                caseChanged = true;
                i2 = -1;
                e = 0;
                continue;
              }
            }
            return parseNumeric(x, String(v), isNum, b);
          }
        }
        isNum = false;
        str = convertBase(str, b, 10, x.s);
        if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
        else e = str.length;
      }
      for (i2 = 0; str.charCodeAt(i2) === 48; i2++) ;
      for (len2 = str.length; str.charCodeAt(--len2) === 48; ) ;
      if (str = str.slice(i2, ++len2)) {
        len2 -= i2;
        if (isNum && BigNumber2.DEBUG && len2 > 15 && (v > MAX_SAFE_INTEGER$5 || v !== mathfloor(v))) {
          throw Error(tooManyDigits + x.s * v);
        }
        if ((e = e - i2 - 1) > MAX_EXP) {
          x.c = x.e = null;
        } else if (e < MIN_EXP) {
          x.c = [x.e = 0];
        } else {
          x.e = e;
          x.c = [];
          i2 = (e + 1) % LOG_BASE;
          if (e < 0) i2 += LOG_BASE;
          if (i2 < len2) {
            if (i2) x.c.push(+str.slice(0, i2));
            for (len2 -= LOG_BASE; i2 < len2; ) {
              x.c.push(+str.slice(i2, i2 += LOG_BASE));
            }
            i2 = LOG_BASE - (str = str.slice(i2)).length;
          } else {
            i2 -= len2;
          }
          for (; i2--; str += "0") ;
          x.c.push(+str);
        }
      } else {
        x.c = [x.e = 0];
      }
    }
    BigNumber2.clone = clone;
    BigNumber2.ROUND_UP = 0;
    BigNumber2.ROUND_DOWN = 1;
    BigNumber2.ROUND_CEIL = 2;
    BigNumber2.ROUND_FLOOR = 3;
    BigNumber2.ROUND_HALF_UP = 4;
    BigNumber2.ROUND_HALF_DOWN = 5;
    BigNumber2.ROUND_HALF_EVEN = 6;
    BigNumber2.ROUND_HALF_CEIL = 7;
    BigNumber2.ROUND_HALF_FLOOR = 8;
    BigNumber2.EUCLID = 9;
    BigNumber2.config = BigNumber2.set = function(obj) {
      var p, v;
      if (obj != null) {
        if (typeof obj == "object") {
          if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            DECIMAL_PLACES = v;
          }
          if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
            v = obj[p];
            intCheck(v, 0, 8, p);
            ROUNDING_MODE = v;
          }
          if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -1e9, 0, p);
              intCheck(v[1], 0, MAX, p);
              TO_EXP_NEG = v[0];
              TO_EXP_POS = v[1];
            } else {
              intCheck(v, -1e9, MAX, p);
              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
            }
          }
          if (obj.hasOwnProperty(p = "RANGE")) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -1e9, -1, p);
              intCheck(v[1], 1, MAX, p);
              MIN_EXP = v[0];
              MAX_EXP = v[1];
            } else {
              intCheck(v, -1e9, MAX, p);
              if (v) {
                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
              } else {
                throw Error(bignumberError + p + " cannot be zero: " + v);
              }
            }
          }
          if (obj.hasOwnProperty(p = "CRYPTO")) {
            v = obj[p];
            if (v === !!v) {
              if (v) {
                if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = v;
                } else {
                  CRYPTO = !v;
                  throw Error(bignumberError + "crypto unavailable");
                }
              } else {
                CRYPTO = v;
              }
            } else {
              throw Error(bignumberError + p + " not true or false: " + v);
            }
          }
          if (obj.hasOwnProperty(p = "MODULO_MODE")) {
            v = obj[p];
            intCheck(v, 0, 9, p);
            MODULO_MODE = v;
          }
          if (obj.hasOwnProperty(p = "POW_PRECISION")) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            POW_PRECISION = v;
          }
          if (obj.hasOwnProperty(p = "FORMAT")) {
            v = obj[p];
            if (typeof v == "object") FORMAT = v;
            else throw Error(bignumberError + p + " not an object: " + v);
          }
          if (obj.hasOwnProperty(p = "ALPHABET")) {
            v = obj[p];
            if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
              alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
              ALPHABET2 = v;
            } else {
              throw Error(bignumberError + p + " invalid: " + v);
            }
          }
        } else {
          throw Error(bignumberError + "Object expected: " + obj);
        }
      }
      return {
        DECIMAL_PLACES,
        ROUNDING_MODE,
        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
        RANGE: [MIN_EXP, MAX_EXP],
        CRYPTO,
        MODULO_MODE,
        POW_PRECISION,
        FORMAT,
        ALPHABET: ALPHABET2
      };
    };
    BigNumber2.isBigNumber = function(v) {
      if (!v || v._isBigNumber !== true) return false;
      if (!BigNumber2.DEBUG) return true;
      var i2, n, c = v.c, e = v.e, s2 = v.s;
      out: if ({}.toString.call(c) == "[object Array]") {
        if ((s2 === 1 || s2 === -1) && e >= -1e9 && e <= MAX && e === mathfloor(e)) {
          if (c[0] === 0) {
            if (e === 0 && c.length === 1) return true;
            break out;
          }
          i2 = (e + 1) % LOG_BASE;
          if (i2 < 1) i2 += LOG_BASE;
          if (String(c[0]).length == i2) {
            for (i2 = 0; i2 < c.length; i2++) {
              n = c[i2];
              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
            }
            if (n !== 0) return true;
          }
        }
      } else if (c === null && e === null && (s2 === null || s2 === 1 || s2 === -1)) {
        return true;
      }
      throw Error(bignumberError + "Invalid BigNumber: " + v);
    };
    BigNumber2.maximum = BigNumber2.max = function() {
      return maxOrMin(arguments, -1);
    };
    BigNumber2.minimum = BigNumber2.min = function() {
      return maxOrMin(arguments, 1);
    };
    BigNumber2.random = function() {
      var pow2_53 = 9007199254740992;
      var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
        return mathfloor(Math.random() * pow2_53);
      } : function() {
        return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
      };
      return function(dp) {
        var a, b, e, k, v, i2 = 0, c = [], rand2 = new BigNumber2(ONE);
        if (dp == null) dp = DECIMAL_PLACES;
        else intCheck(dp, 0, MAX);
        k = mathceil(dp / LOG_BASE);
        if (CRYPTO) {
          if (crypto.getRandomValues) {
            a = crypto.getRandomValues(new Uint32Array(k *= 2));
            for (; i2 < k; ) {
              v = a[i2] * 131072 + (a[i2 + 1] >>> 11);
              if (v >= 9e15) {
                b = crypto.getRandomValues(new Uint32Array(2));
                a[i2] = b[0];
                a[i2 + 1] = b[1];
              } else {
                c.push(v % 1e14);
                i2 += 2;
              }
            }
            i2 = k / 2;
          } else if (crypto.randomBytes) {
            a = crypto.randomBytes(k *= 7);
            for (; i2 < k; ) {
              v = (a[i2] & 31) * 281474976710656 + a[i2 + 1] * 1099511627776 + a[i2 + 2] * 4294967296 + a[i2 + 3] * 16777216 + (a[i2 + 4] << 16) + (a[i2 + 5] << 8) + a[i2 + 6];
              if (v >= 9e15) {
                crypto.randomBytes(7).copy(a, i2);
              } else {
                c.push(v % 1e14);
                i2 += 7;
              }
            }
            i2 = k / 7;
          } else {
            CRYPTO = false;
            throw Error(bignumberError + "crypto unavailable");
          }
        }
        if (!CRYPTO) {
          for (; i2 < k; ) {
            v = random53bitInt();
            if (v < 9e15) c[i2++] = v % 1e14;
          }
        }
        k = c[--i2];
        dp %= LOG_BASE;
        if (k && dp) {
          v = POWS_TEN[LOG_BASE - dp];
          c[i2] = mathfloor(k / v) * v;
        }
        for (; c[i2] === 0; c.pop(), i2--) ;
        if (i2 < 0) {
          c = [e = 0];
        } else {
          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) ;
          for (i2 = 1, v = c[0]; v >= 10; v /= 10, i2++) ;
          if (i2 < LOG_BASE) e -= LOG_BASE - i2;
        }
        rand2.e = e;
        rand2.c = c;
        return rand2;
      };
    }();
    BigNumber2.sum = function() {
      var i2 = 1, args = arguments, sum = new BigNumber2(args[0]);
      for (; i2 < args.length; ) sum = sum.plus(args[i2++]);
      return sum;
    };
    convertBase = /* @__PURE__ */ function() {
      var decimal = "0123456789";
      function toBaseOut(str, baseIn, baseOut, alphabet) {
        var j, arr = [0], arrL, i2 = 0, len2 = str.length;
        for (; i2 < len2; ) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;
          arr[0] += alphabet.indexOf(str.charAt(i2++));
          for (j = 0; j < arr.length; j++) {
            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }
        return arr.reverse();
      }
      return function(str, baseIn, baseOut, sign2, callerIsToString) {
        var alphabet, d, e, k, r2, x, xc, y, i2 = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
        if (i2 >= 0) {
          k = POW_PRECISION;
          POW_PRECISION = 0;
          str = str.replace(".", "");
          y = new BigNumber2(baseIn);
          x = y.pow(str.length - i2);
          POW_PRECISION = k;
          y.c = toBaseOut(
            toFixedPoint(coeffToString(x.c), x.e, "0"),
            10,
            baseOut,
            decimal
          );
          y.e = y.c.length;
        }
        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET2, decimal) : (alphabet = decimal, ALPHABET2));
        e = k = xc.length;
        for (; xc[--k] == 0; xc.pop()) ;
        if (!xc[0]) return alphabet.charAt(0);
        if (i2 < 0) {
          --e;
        } else {
          x.c = xc;
          x.e = e;
          x.s = sign2;
          x = div(x, y, dp, rm, baseOut);
          xc = x.c;
          r2 = x.r;
          e = x.e;
        }
        d = e + dp + 1;
        i2 = xc[d];
        k = baseOut / 2;
        r2 = r2 || d < 0 || xc[d + 1] != null;
        r2 = rm < 4 ? (i2 != null || r2) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i2 > k || i2 == k && (rm == 4 || r2 || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
        if (d < 1 || !xc[0]) {
          str = r2 ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
        } else {
          xc.length = d;
          if (r2) {
            for (--baseOut; ++xc[--d] > baseOut; ) {
              xc[d] = 0;
              if (!d) {
                ++e;
                xc = [1].concat(xc);
              }
            }
          }
          for (k = xc.length; !xc[--k]; ) ;
          for (i2 = 0, str = ""; i2 <= k; str += alphabet.charAt(xc[i2++])) ;
          str = toFixedPoint(str, e, alphabet.charAt(0));
        }
        return str;
      };
    }();
    div = /* @__PURE__ */ function() {
      function multiply(x, k, base2) {
        var m, temp, xlo, xhi, carry = 0, i2 = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
        for (x = x.slice(); i2--; ) {
          xlo = x[i2] % SQRT_BASE;
          xhi = x[i2] / SQRT_BASE | 0;
          m = khi * xlo + xhi * klo;
          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
          carry = (temp / base2 | 0) + (m / SQRT_BASE | 0) + khi * xhi;
          x[i2] = temp % base2;
        }
        if (carry) x = [carry].concat(x);
        return x;
      }
      function compare2(a, b, aL, bL) {
        var i2, cmp2;
        if (aL != bL) {
          cmp2 = aL > bL ? 1 : -1;
        } else {
          for (i2 = cmp2 = 0; i2 < aL; i2++) {
            if (a[i2] != b[i2]) {
              cmp2 = a[i2] > b[i2] ? 1 : -1;
              break;
            }
          }
        }
        return cmp2;
      }
      function subtract(a, b, aL, base2) {
        var i2 = 0;
        for (; aL--; ) {
          a[aL] -= i2;
          i2 = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i2 * base2 + a[aL] - b[aL];
        }
        for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
      }
      return function(x, y, dp, rm, base2) {
        var cmp2, e, i2, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s2 = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
        if (!xc || !xc[0] || !yc || !yc[0]) {
          return new BigNumber2(
            // Return NaN if either NaN, or both Infinity or 0.
            !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
              // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
              xc && xc[0] == 0 || !yc ? s2 * 0 : s2 / 0
            )
          );
        }
        q = new BigNumber2(s2);
        qc = q.c = [];
        e = x.e - y.e;
        s2 = dp + e + 1;
        if (!base2) {
          base2 = BASE;
          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
          s2 = s2 / LOG_BASE | 0;
        }
        for (i2 = 0; yc[i2] == (xc[i2] || 0); i2++) ;
        if (yc[i2] > (xc[i2] || 0)) e--;
        if (s2 < 0) {
          qc.push(1);
          more = true;
        } else {
          xL = xc.length;
          yL = yc.length;
          i2 = 0;
          s2 += 2;
          n = mathfloor(base2 / (yc[0] + 1));
          if (n > 1) {
            yc = multiply(yc, n, base2);
            xc = multiply(xc, n, base2);
            yL = yc.length;
            xL = xc.length;
          }
          xi = yL;
          rem = xc.slice(0, yL);
          remL = rem.length;
          for (; remL < yL; rem[remL++] = 0) ;
          yz = yc.slice();
          yz = [0].concat(yz);
          yc0 = yc[0];
          if (yc[1] >= base2 / 2) yc0++;
          do {
            n = 0;
            cmp2 = compare2(yc, rem, yL, remL);
            if (cmp2 < 0) {
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base2 + (rem[1] || 0);
              n = mathfloor(rem0 / yc0);
              if (n > 1) {
                if (n >= base2) n = base2 - 1;
                prod = multiply(yc, n, base2);
                prodL = prod.length;
                remL = rem.length;
                while (compare2(prod, rem, prodL, remL) == 1) {
                  n--;
                  subtract(prod, yL < prodL ? yz : yc, prodL, base2);
                  prodL = prod.length;
                  cmp2 = 1;
                }
              } else {
                if (n == 0) {
                  cmp2 = n = 1;
                }
                prod = yc.slice();
                prodL = prod.length;
              }
              if (prodL < remL) prod = [0].concat(prod);
              subtract(rem, prod, remL, base2);
              remL = rem.length;
              if (cmp2 == -1) {
                while (compare2(yc, rem, yL, remL) < 1) {
                  n++;
                  subtract(rem, yL < remL ? yz : yc, remL, base2);
                  remL = rem.length;
                }
              }
            } else if (cmp2 === 0) {
              n++;
              rem = [0];
            }
            qc[i2++] = n;
            if (rem[0]) {
              rem[remL++] = xc[xi] || 0;
            } else {
              rem = [xc[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] != null) && s2--);
          more = rem[0] != null;
          if (!qc[0]) qc.splice(0, 1);
        }
        if (base2 == BASE) {
          for (i2 = 1, s2 = qc[0]; s2 >= 10; s2 /= 10, i2++) ;
          round2(q, dp + (q.e = i2 + e * LOG_BASE - 1) + 1, rm, more);
        } else {
          q.e = e;
          q.r = +more;
        }
        return q;
      };
    }();
    function format2(n, i2, rm, id2) {
      var c0, e, ne, len2, str;
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      if (!n.c) return n.toString();
      c0 = n.c[0];
      ne = n.e;
      if (i2 == null) {
        str = coeffToString(n.c);
        str = id2 == 1 || id2 == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
      } else {
        n = round2(new BigNumber2(n), i2, rm);
        e = n.e;
        str = coeffToString(n.c);
        len2 = str.length;
        if (id2 == 1 || id2 == 2 && (i2 <= e || e <= TO_EXP_NEG)) {
          for (; len2 < i2; str += "0", len2++) ;
          str = toExponential(str, e);
        } else {
          i2 -= ne;
          str = toFixedPoint(str, e, "0");
          if (e + 1 > len2) {
            if (--i2 > 0) for (str += "."; i2--; str += "0") ;
          } else {
            i2 += e - len2;
            if (i2 > 0) {
              if (e + 1 == len2) str += ".";
              for (; i2--; str += "0") ;
            }
          }
        }
      }
      return n.s < 0 && c0 ? "-" + str : str;
    }
    function maxOrMin(args, n) {
      var k, y, i2 = 1, x = new BigNumber2(args[0]);
      for (; i2 < args.length; i2++) {
        y = new BigNumber2(args[i2]);
        if (!y.s || (k = compare$o(x, y)) === n || k === 0 && x.s === n) {
          x = y;
        }
      }
      return x;
    }
    function normalise(n, c, e) {
      var i2 = 1, j = c.length;
      for (; !c[--j]; c.pop()) ;
      for (j = c[0]; j >= 10; j /= 10, i2++) ;
      if ((e = i2 + e * LOG_BASE - 1) > MAX_EXP) {
        n.c = n.e = null;
      } else if (e < MIN_EXP) {
        n.c = [n.e = 0];
      } else {
        n.e = e;
        n.c = c;
      }
      return n;
    }
    parseNumeric = /* @__PURE__ */ function() {
      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
      return function(x, str, isNum, b) {
        var base2, s2 = isNum ? str : str.replace(whitespaceOrPlus, "");
        if (isInfinityOrNaN.test(s2)) {
          x.s = isNaN(s2) ? null : s2 < 0 ? -1 : 1;
        } else {
          if (!isNum) {
            s2 = s2.replace(basePrefix, function(m, p1, p2) {
              base2 = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
              return !b || b == base2 ? p1 : m;
            });
            if (b) {
              base2 = b;
              s2 = s2.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
            }
            if (str != s2) return new BigNumber2(s2, base2);
          }
          if (BigNumber2.DEBUG) {
            throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
          }
          x.s = null;
        }
        x.c = x.e = null;
      };
    }();
    function round2(x, sd, rm, r2) {
      var d, i2, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
      if (xc) {
        out: {
          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) ;
          i2 = sd - d;
          if (i2 < 0) {
            i2 += LOG_BASE;
            j = sd;
            n = xc[ni = 0];
            rd = mathfloor(n / pows10[d - j - 1] % 10);
          } else {
            ni = mathceil((i2 + 1) / LOG_BASE);
            if (ni >= xc.length) {
              if (r2) {
                for (; xc.length <= ni; xc.push(0)) ;
                n = rd = 0;
                d = 1;
                i2 %= LOG_BASE;
                j = i2 - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              n = k = xc[ni];
              for (d = 1; k >= 10; k /= 10, d++) ;
              i2 %= LOG_BASE;
              j = i2 - LOG_BASE + d;
              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
            }
          }
          r2 = r2 || sd < 0 || // Are there any non-zero digits after the rounding digit?
          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
          r2 = rm < 4 ? (rd || r2) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r2 || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
          (i2 > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
          if (sd < 1 || !xc[0]) {
            xc.length = 0;
            if (r2) {
              sd -= x.e + 1;
              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
              x.e = -sd || 0;
            } else {
              xc[0] = x.e = 0;
            }
            return x;
          }
          if (i2 == 0) {
            xc.length = ni;
            k = 1;
            ni--;
          } else {
            xc.length = ni + 1;
            k = pows10[LOG_BASE - i2];
            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
          }
          if (r2) {
            for (; ; ) {
              if (ni == 0) {
                for (i2 = 1, j = xc[0]; j >= 10; j /= 10, i2++) ;
                j = xc[0] += k;
                for (k = 1; j >= 10; j /= 10, k++) ;
                if (i2 != k) {
                  x.e++;
                  if (xc[0] == BASE) xc[0] = 1;
                }
                break;
              } else {
                xc[ni] += k;
                if (xc[ni] != BASE) break;
                xc[ni--] = 0;
                k = 1;
              }
            }
          }
          for (i2 = xc.length; xc[--i2] === 0; xc.pop()) ;
        }
        if (x.e > MAX_EXP) {
          x.c = x.e = null;
        } else if (x.e < MIN_EXP) {
          x.c = [x.e = 0];
        }
      }
      return x;
    }
    function valueOf(n) {
      var str, e = n.e;
      if (e === null) return n.toString();
      str = coeffToString(n.c);
      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
      return n.s < 0 ? "-" + str : str;
    }
    P.absoluteValue = P.abs = function() {
      var x = new BigNumber2(this);
      if (x.s < 0) x.s = 1;
      return x;
    };
    P.comparedTo = function(y, b) {
      return compare$o(this, new BigNumber2(y, b));
    };
    P.decimalPlaces = P.dp = function(dp, rm) {
      var c, n, v, x = this;
      if (dp != null) {
        intCheck(dp, 0, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);
        return round2(new BigNumber2(x), dp + x.e + 1, rm);
      }
      if (!(c = x.c)) return null;
      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) ;
      if (n < 0) n = 0;
      return n;
    };
    P.dividedBy = P.div = function(y, b) {
      return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    };
    P.dividedToIntegerBy = P.idiv = function(y, b) {
      return div(this, new BigNumber2(y, b), 0, 1);
    };
    P.exponentiatedBy = P.pow = function(n, m) {
      var half, isModExp, i2, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
      n = new BigNumber2(n);
      if (n.c && !n.isInteger()) {
        throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
      }
      if (m != null) m = new BigNumber2(m);
      nIsBig = n.e > 14;
      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
        y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
        return m ? y.mod(m) : y;
      }
      nIsNeg = n.s < 0;
      if (m) {
        if (m.c ? !m.c[0] : !m.s) return new BigNumber2(NaN);
        isModExp = !nIsNeg && x.isInteger() && m.isInteger();
        if (isModExp) x = x.mod(m);
      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
        k = x.s < 0 && isOdd(n) ? -0 : 0;
        if (x.e > -1) k = 1 / k;
        return new BigNumber2(nIsNeg ? 1 / k : k);
      } else if (POW_PRECISION) {
        k = mathceil(POW_PRECISION / LOG_BASE + 2);
      }
      if (nIsBig) {
        half = new BigNumber2(0.5);
        if (nIsNeg) n.s = 1;
        nIsOdd = isOdd(n);
      } else {
        i2 = Math.abs(+valueOf(n));
        nIsOdd = i2 % 2;
      }
      y = new BigNumber2(ONE);
      for (; ; ) {
        if (nIsOdd) {
          y = y.times(x);
          if (!y.c) break;
          if (k) {
            if (y.c.length > k) y.c.length = k;
          } else if (isModExp) {
            y = y.mod(m);
          }
        }
        if (i2) {
          i2 = mathfloor(i2 / 2);
          if (i2 === 0) break;
          nIsOdd = i2 % 2;
        } else {
          n = n.times(half);
          round2(n, n.e + 1, 1);
          if (n.e > 14) {
            nIsOdd = isOdd(n);
          } else {
            i2 = +valueOf(n);
            if (i2 === 0) break;
            nIsOdd = i2 % 2;
          }
        }
        x = x.times(x);
        if (k) {
          if (x.c && x.c.length > k) x.c.length = k;
        } else if (isModExp) {
          x = x.mod(m);
        }
      }
      if (isModExp) return y;
      if (nIsNeg) y = ONE.div(y);
      return m ? y.mod(m) : k ? round2(y, POW_PRECISION, ROUNDING_MODE, more) : y;
    };
    P.integerValue = function(rm) {
      var n = new BigNumber2(this);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      return round2(n, n.e + 1, rm);
    };
    P.isEqualTo = P.eq = function(y, b) {
      return compare$o(this, new BigNumber2(y, b)) === 0;
    };
    P.isFinite = function() {
      return !!this.c;
    };
    P.isGreaterThan = P.gt = function(y, b) {
      return compare$o(this, new BigNumber2(y, b)) > 0;
    };
    P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
      return (b = compare$o(this, new BigNumber2(y, b))) === 1 || b === 0;
    };
    P.isInteger = function() {
      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };
    P.isLessThan = P.lt = function(y, b) {
      return compare$o(this, new BigNumber2(y, b)) < 0;
    };
    P.isLessThanOrEqualTo = P.lte = function(y, b) {
      return (b = compare$o(this, new BigNumber2(y, b))) === -1 || b === 0;
    };
    P.isNaN = function() {
      return !this.s;
    };
    P.isNegative = function() {
      return this.s < 0;
    };
    P.isPositive = function() {
      return this.s > 0;
    };
    P.isZero = function() {
      return !!this.c && this.c[0] == 0;
    };
    P.minus = function(y, b) {
      var i2, j, t2, xLTy, x = this, a = x.s;
      y = new BigNumber2(y, b);
      b = y.s;
      if (!a || !b) return new BigNumber2(NaN);
      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }
      var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
      if (!xe || !ye) {
        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
        if (!xc[0] || !yc[0]) {
          return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
            // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
            ROUNDING_MODE == 3 ? -0 : 0
          ));
        }
      }
      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();
      if (a = xe - ye) {
        if (xLTy = a < 0) {
          a = -a;
          t2 = xc;
        } else {
          ye = xe;
          t2 = yc;
        }
        t2.reverse();
        for (b = a; b--; t2.push(0)) ;
        t2.reverse();
      } else {
        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
        for (a = b = 0; b < j; b++) {
          if (xc[b] != yc[b]) {
            xLTy = xc[b] < yc[b];
            break;
          }
        }
      }
      if (xLTy) {
        t2 = xc;
        xc = yc;
        yc = t2;
        y.s = -y.s;
      }
      b = (j = yc.length) - (i2 = xc.length);
      if (b > 0) for (; b--; xc[i2++] = 0) ;
      b = BASE - 1;
      for (; j > a; ) {
        if (xc[--j] < yc[j]) {
          for (i2 = j; i2 && !xc[--i2]; xc[i2] = b) ;
          --xc[i2];
          xc[j] += BASE;
        }
        xc[j] -= yc[j];
      }
      for (; xc[0] == 0; xc.splice(0, 1), --ye) ;
      if (!xc[0]) {
        y.s = ROUNDING_MODE == 3 ? -1 : 1;
        y.c = [y.e = 0];
        return y;
      }
      return normalise(y, xc, ye);
    };
    P.modulo = P.mod = function(y, b) {
      var q, s2, x = this;
      y = new BigNumber2(y, b);
      if (!x.c || !y.s || y.c && !y.c[0]) {
        return new BigNumber2(NaN);
      } else if (!y.c || x.c && !x.c[0]) {
        return new BigNumber2(x);
      }
      if (MODULO_MODE == 9) {
        s2 = y.s;
        y.s = 1;
        q = div(x, y, 0, 3);
        y.s = s2;
        q.s *= s2;
      } else {
        q = div(x, y, 0, MODULO_MODE);
      }
      y = x.minus(q.times(y));
      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
      return y;
    };
    P.multipliedBy = P.times = function(y, b) {
      var c, e, i2, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base2, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
      if (!xc || !yc || !xc[0] || !yc[0]) {
        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
          y.c = y.e = y.s = null;
        } else {
          y.s *= x.s;
          if (!xc || !yc) {
            y.c = y.e = null;
          } else {
            y.c = [0];
            y.e = 0;
          }
        }
        return y;
      }
      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
      y.s *= x.s;
      xcL = xc.length;
      ycL = yc.length;
      if (xcL < ycL) {
        zc = xc;
        xc = yc;
        yc = zc;
        i2 = xcL;
        xcL = ycL;
        ycL = i2;
      }
      for (i2 = xcL + ycL, zc = []; i2--; zc.push(0)) ;
      base2 = BASE;
      sqrtBase = SQRT_BASE;
      for (i2 = ycL; --i2 >= 0; ) {
        c = 0;
        ylo = yc[i2] % sqrtBase;
        yhi = yc[i2] / sqrtBase | 0;
        for (k = xcL, j = i2 + k; j > i2; ) {
          xlo = xc[--k] % sqrtBase;
          xhi = xc[k] / sqrtBase | 0;
          m = yhi * xlo + xhi * ylo;
          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
          c = (xlo / base2 | 0) + (m / sqrtBase | 0) + yhi * xhi;
          zc[j--] = xlo % base2;
        }
        zc[j] = c;
      }
      if (c) {
        ++e;
      } else {
        zc.splice(0, 1);
      }
      return normalise(y, zc, e);
    };
    P.negated = function() {
      var x = new BigNumber2(this);
      x.s = -x.s || null;
      return x;
    };
    P.plus = function(y, b) {
      var t2, x = this, a = x.s;
      y = new BigNumber2(y, b);
      b = y.s;
      if (!a || !b) return new BigNumber2(NaN);
      if (a != b) {
        y.s = -b;
        return x.minus(y);
      }
      var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
      if (!xe || !ye) {
        if (!xc || !yc) return new BigNumber2(a / 0);
        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
      }
      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();
      if (a = xe - ye) {
        if (a > 0) {
          ye = xe;
          t2 = yc;
        } else {
          a = -a;
          t2 = xc;
        }
        t2.reverse();
        for (; a--; t2.push(0)) ;
        t2.reverse();
      }
      a = xc.length;
      b = yc.length;
      if (a - b < 0) {
        t2 = yc;
        yc = xc;
        xc = t2;
        b = a;
      }
      for (a = 0; b; ) {
        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
      }
      if (a) {
        xc = [a].concat(xc);
        ++ye;
      }
      return normalise(y, xc, ye);
    };
    P.precision = P.sd = function(sd, rm) {
      var c, n, v, x = this;
      if (sd != null && sd !== !!sd) {
        intCheck(sd, 1, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);
        return round2(new BigNumber2(x), sd, rm);
      }
      if (!(c = x.c)) return null;
      v = c.length - 1;
      n = v * LOG_BASE + 1;
      if (v = c[v]) {
        for (; v % 10 == 0; v /= 10, n--) ;
        for (v = c[0]; v >= 10; v /= 10, n++) ;
      }
      if (sd && x.e + 1 > n) n = x.e + 1;
      return n;
    };
    P.shiftedBy = function(k) {
      intCheck(k, -9007199254740991, MAX_SAFE_INTEGER$5);
      return this.times("1e" + k);
    };
    P.squareRoot = P.sqrt = function() {
      var m, n, r2, rep, t2, x = this, c = x.c, s2 = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
      if (s2 !== 1 || !c || !c[0]) {
        return new BigNumber2(!s2 || s2 < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
      }
      s2 = Math.sqrt(+valueOf(x));
      if (s2 == 0 || s2 == 1 / 0) {
        n = coeffToString(c);
        if ((n.length + e) % 2 == 0) n += "0";
        s2 = Math.sqrt(+n);
        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
        if (s2 == 1 / 0) {
          n = "5e" + e;
        } else {
          n = s2.toExponential();
          n = n.slice(0, n.indexOf("e") + 1) + e;
        }
        r2 = new BigNumber2(n);
      } else {
        r2 = new BigNumber2(s2 + "");
      }
      if (r2.c[0]) {
        e = r2.e;
        s2 = e + dp;
        if (s2 < 3) s2 = 0;
        for (; ; ) {
          t2 = r2;
          r2 = half.times(t2.plus(div(x, t2, dp, 1)));
          if (coeffToString(t2.c).slice(0, s2) === (n = coeffToString(r2.c)).slice(0, s2)) {
            if (r2.e < e) --s2;
            n = n.slice(s2 - 3, s2 + 1);
            if (n == "9999" || !rep && n == "4999") {
              if (!rep) {
                round2(t2, t2.e + DECIMAL_PLACES + 2, 0);
                if (t2.times(t2).eq(x)) {
                  r2 = t2;
                  break;
                }
              }
              dp += 4;
              s2 += 4;
              rep = 1;
            } else {
              if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                round2(r2, r2.e + DECIMAL_PLACES + 2, 1);
                m = !r2.times(r2).eq(x);
              }
              break;
            }
          }
        }
      }
      return round2(r2, r2.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    };
    P.toExponential = function(dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp++;
      }
      return format2(this, dp, rm, 1);
    };
    P.toFixed = function(dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp = dp + this.e + 1;
      }
      return format2(this, dp, rm);
    };
    P.toFormat = function(dp, rm, format3) {
      var str, x = this;
      if (format3 == null) {
        if (dp != null && rm && typeof rm == "object") {
          format3 = rm;
          rm = null;
        } else if (dp && typeof dp == "object") {
          format3 = dp;
          dp = rm = null;
        } else {
          format3 = FORMAT;
        }
      } else if (typeof format3 != "object") {
        throw Error(bignumberError + "Argument not an object: " + format3);
      }
      str = x.toFixed(dp, rm);
      if (x.c) {
        var i2, arr = str.split("."), g1 = +format3.groupSize, g2 = +format3.secondaryGroupSize, groupSeparator = format3.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len2 = intDigits.length;
        if (g2) {
          i2 = g1;
          g1 = g2;
          g2 = i2;
          len2 -= i2;
        }
        if (g1 > 0 && len2 > 0) {
          i2 = len2 % g1 || g1;
          intPart = intDigits.substr(0, i2);
          for (; i2 < len2; i2 += g1) intPart += groupSeparator + intDigits.substr(i2, g1);
          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i2);
          if (isNeg) intPart = "-" + intPart;
        }
        str = fractionPart ? intPart + (format3.decimalSeparator || "") + ((g2 = +format3.fractionGroupSize) ? fractionPart.replace(
          new RegExp("\\d{" + g2 + "}\\B", "g"),
          "$&" + (format3.fractionGroupSeparator || "")
        ) : fractionPart) : intPart;
      }
      return (format3.prefix || "") + str + (format3.suffix || "");
    };
    P.toFraction = function(md) {
      var d, d0, d1, d2, e, exp, n, n0, n1, q, r2, s2, x = this, xc = x.c;
      if (md != null) {
        n = new BigNumber2(md);
        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
          throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
        }
      }
      if (!xc) return new BigNumber2(x);
      d = new BigNumber2(ONE);
      n1 = d0 = new BigNumber2(ONE);
      d1 = n0 = new BigNumber2(ONE);
      s2 = coeffToString(xc);
      e = d.e = s2.length - x.e - 1;
      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
      exp = MAX_EXP;
      MAX_EXP = 1 / 0;
      n = new BigNumber2(s2);
      n0.c[0] = 0;
      for (; ; ) {
        q = div(n, d, 0, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.comparedTo(md) == 1) break;
        d0 = d1;
        d1 = d2;
        n1 = n0.plus(q.times(d2 = n1));
        n0 = d2;
        d = n.minus(q.times(d2 = d));
        n = d2;
      }
      d2 = div(md.minus(d0), d1, 0, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      e = e * 2;
      r2 = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
      ) < 1 ? [n1, d1] : [n0, d0];
      MAX_EXP = exp;
      return r2;
    };
    P.toNumber = function() {
      return +valueOf(this);
    };
    P.toPrecision = function(sd, rm) {
      if (sd != null) intCheck(sd, 1, MAX);
      return format2(this, sd, rm, 2);
    };
    P.toString = function(b) {
      var str, n = this, s2 = n.s, e = n.e;
      if (e === null) {
        if (s2) {
          str = "Infinity";
          if (s2 < 0) str = "-" + str;
        } else {
          str = "NaN";
        }
      } else {
        if (b == null) {
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
          n = round2(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
          str = toFixedPoint(coeffToString(n.c), n.e, "0");
        } else {
          intCheck(b, 2, ALPHABET2.length, "Base");
          str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s2, true);
        }
        if (s2 < 0 && n.c[0]) str = "-" + str;
      }
      return str;
    };
    P.valueOf = P.toJSON = function() {
      return valueOf(this);
    };
    P._isBigNumber = true;
    P[Symbol.toStringTag] = "BigNumber";
    P[Symbol.for("nodejs.util.inspect.custom")] = P.valueOf;
    if (configObject != null) BigNumber2.set(configObject);
    return BigNumber2;
  }
  function bitFloor(n) {
    var i2 = n | 0;
    return n > 0 || n === i2 ? i2 : i2 - 1;
  }
  function coeffToString(a) {
    var s2, z, i2 = 1, j = a.length, r2 = a[0] + "";
    for (; i2 < j; ) {
      s2 = a[i2++] + "";
      z = LOG_BASE - s2.length;
      for (; z--; s2 = "0" + s2) ;
      r2 += s2;
    }
    for (j = r2.length; r2.charCodeAt(--j) === 48; ) ;
    return r2.slice(0, j + 1 || 1);
  }
  function compare$o(x, y) {
    var a, b, xc = x.c, yc = y.c, i2 = x.s, j = y.s, k = x.e, l = y.e;
    if (!i2 || !j) return null;
    a = xc && !xc[0];
    b = yc && !yc[0];
    if (a || b) return a ? b ? 0 : -j : i2;
    if (i2 != j) return i2;
    a = i2 < 0;
    b = k == l;
    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
    if (!b) return k > l ^ a ? 1 : -1;
    j = (k = xc.length) < (l = yc.length) ? k : l;
    for (i2 = 0; i2 < j; i2++) if (xc[i2] != yc[i2]) return xc[i2] > yc[i2] ^ a ? 1 : -1;
    return k == l ? 0 : k > l ^ a ? 1 : -1;
  }
  function intCheck(n, min2, max2, name2) {
    if (n < min2 || n > max2 || n !== mathfloor(n)) {
      throw Error(bignumberError + (name2 || "Argument") + (typeof n == "number" ? n < min2 || n > max2 ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
    }
  }
  function isOdd(n) {
    var k = n.c.length - 1;
    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
  }
  function toExponential(str, e) {
    return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
  }
  function toFixedPoint(str, e, z) {
    var len2, zs;
    if (e < 0) {
      for (zs = z + "."; ++e; zs += z) ;
      str = zs + str;
    } else {
      len2 = str.length;
      if (++e > len2) {
        for (zs = z, e -= len2; --e; zs += z) ;
        str += zs;
      } else if (e < len2) {
        str = str.slice(0, e) + "." + str.slice(e);
      }
    }
    return str;
  }
  var BigNumber$1 = clone();
  const version$a = "logger/5.7.0";
  let _permanentCensorErrors = false;
  let _censorErrors = false;
  const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
  let _logLevel = LogLevels["default"];
  let _globalLogger = null;
  function _checkNormalize() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
          ;
        } catch (error2) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
        throw new Error("broken implementation");
      }
    } catch (error2) {
      return error2.message;
    }
    return null;
  }
  const _normalizeError = _checkNormalize();
  var LogLevel;
  (function(LogLevel2) {
    LogLevel2["DEBUG"] = "DEBUG";
    LogLevel2["INFO"] = "INFO";
    LogLevel2["WARNING"] = "WARNING";
    LogLevel2["ERROR"] = "ERROR";
    LogLevel2["OFF"] = "OFF";
  })(LogLevel || (LogLevel = {}));
  var ErrorCode;
  (function(ErrorCode2) {
    ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
    ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
    ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
    ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
    ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
    ErrorCode2["TIMEOUT"] = "TIMEOUT";
    ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
    ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
    ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
    ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
    ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
    ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
    ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
    ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
    ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
    ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
    ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
    ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
    ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
  })(ErrorCode || (ErrorCode = {}));
  const HEX = "0123456789abcdef";
  class Logger {
    constructor(version2) {
      Object.defineProperty(this, "version", {
        enumerable: true,
        value: version2,
        writable: false
      });
    }
    _log(logLevel, args) {
      const level = logLevel.toLowerCase();
      if (LogLevels[level] == null) {
        this.throwArgumentError("invalid log level name", "logLevel", logLevel);
      }
      if (_logLevel > LogLevels[level]) {
        return;
      }
      console.log.apply(console, args);
    }
    debug(...args) {
      this._log(Logger.levels.DEBUG, args);
    }
    info(...args) {
      this._log(Logger.levels.INFO, args);
    }
    warn(...args) {
      this._log(Logger.levels.WARNING, args);
    }
    makeError(message, code2, params) {
      if (_censorErrors) {
        return this.makeError("censored error", code2, {});
      }
      if (!code2) {
        code2 = Logger.errors.UNKNOWN_ERROR;
      }
      if (!params) {
        params = {};
      }
      const messageDetails = [];
      Object.keys(params).forEach((key2) => {
        const value = params[key2];
        try {
          if (value instanceof Uint8Array) {
            let hex2 = "";
            for (let i2 = 0; i2 < value.length; i2++) {
              hex2 += HEX[value[i2] >> 4];
              hex2 += HEX[value[i2] & 15];
            }
            messageDetails.push(key2 + "=Uint8Array(0x" + hex2 + ")");
          } else {
            messageDetails.push(key2 + "=" + JSON.stringify(value));
          }
        } catch (error3) {
          messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
        }
      });
      messageDetails.push(`code=${code2}`);
      messageDetails.push(`version=${this.version}`);
      const reason = message;
      let url2 = "";
      switch (code2) {
        case ErrorCode.NUMERIC_FAULT: {
          url2 = "NUMERIC_FAULT";
          const fault = message;
          switch (fault) {
            case "overflow":
            case "underflow":
            case "division-by-zero":
              url2 += "-" + fault;
              break;
            case "negative-power":
            case "negative-width":
              url2 += "-unsupported";
              break;
            case "unbound-bitwise-result":
              url2 += "-unbound-result";
              break;
          }
          break;
        }
        case ErrorCode.CALL_EXCEPTION:
        case ErrorCode.INSUFFICIENT_FUNDS:
        case ErrorCode.MISSING_NEW:
        case ErrorCode.NONCE_EXPIRED:
        case ErrorCode.REPLACEMENT_UNDERPRICED:
        case ErrorCode.TRANSACTION_REPLACED:
        case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
          url2 = code2;
          break;
      }
      if (url2) {
        message += " [ See: https://links.ethers.org/v5-errors-" + url2 + " ]";
      }
      if (messageDetails.length) {
        message += " (" + messageDetails.join(", ") + ")";
      }
      const error2 = new Error(message);
      error2.reason = reason;
      error2.code = code2;
      Object.keys(params).forEach(function(key2) {
        error2[key2] = params[key2];
      });
      return error2;
    }
    throwError(message, code2, params) {
      throw this.makeError(message, code2, params);
    }
    throwArgumentError(message, name2, value) {
      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
        argument: name2,
        value
      });
    }
    assert(condition, message, code2, params) {
      if (!!condition) {
        return;
      }
      this.throwError(message, code2, params);
    }
    assertArgument(condition, message, name2, value) {
      if (!!condition) {
        return;
      }
      this.throwArgumentError(message, name2, value);
    }
    checkNormalize(message) {
      if (_normalizeError) {
        this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "String.prototype.normalize",
          form: _normalizeError
        });
      }
    }
    checkSafeUint53(value, message) {
      if (typeof value !== "number") {
        return;
      }
      if (message == null) {
        message = "value not safe";
      }
      if (value < 0 || value >= 9007199254740991) {
        this.throwError(message, Logger.errors.NUMERIC_FAULT, {
          operation: "checkSafeInteger",
          fault: "out-of-safe-range",
          value
        });
      }
      if (value % 1) {
        this.throwError(message, Logger.errors.NUMERIC_FAULT, {
          operation: "checkSafeInteger",
          fault: "non-integer",
          value
        });
      }
    }
    checkArgumentCount(count, expectedCount, message) {
      if (message) {
        message = ": " + message;
      } else {
        message = "";
      }
      if (count < expectedCount) {
        this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
          count,
          expectedCount
        });
      }
      if (count > expectedCount) {
        this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
          count,
          expectedCount
        });
      }
    }
    checkNew(target, kind) {
      if (target === Object || target == null) {
        this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
      }
    }
    checkAbstract(target, kind) {
      if (target === kind) {
        this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
      } else if (target === Object || target == null) {
        this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
      }
    }
    static globalLogger() {
      if (!_globalLogger) {
        _globalLogger = new Logger(version$a);
      }
      return _globalLogger;
    }
    static setCensorship(censorship, permanent) {
      if (!censorship && permanent) {
        this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setCensorship"
        });
      }
      if (_permanentCensorErrors) {
        if (!censorship) {
          return;
        }
        this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setCensorship"
        });
      }
      _censorErrors = !!censorship;
      _permanentCensorErrors = !!permanent;
    }
    static setLogLevel(logLevel) {
      const level = LogLevels[logLevel.toLowerCase()];
      if (level == null) {
        Logger.globalLogger().warn("invalid log level - " + logLevel);
        return;
      }
      _logLevel = level;
    }
    static from(version2) {
      return new Logger(version2);
    }
  }
  Logger.errors = ErrorCode;
  Logger.levels = LogLevel;
  const version$9 = "bytes/5.7.0";
  const logger$c = new Logger(version$9);
  function isHexable(value) {
    return !!value.toHexString;
  }
  function addSlice(array2) {
    if (array2.slice) {
      return array2;
    }
    array2.slice = function() {
      const args = Array.prototype.slice.call(arguments);
      return addSlice(new Uint8Array(Array.prototype.slice.apply(array2, args)));
    };
    return array2;
  }
  function isBytesLike(value) {
    return isHexString$1(value) && !(value.length % 2) || isBytes$3(value);
  }
  function isInteger(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes$3(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger(value.length) || value.length < 0) {
      return false;
    }
    for (let i2 = 0; i2 < value.length; i2++) {
      const v = value[i2];
      if (!isInteger(v) || v < 0 || v >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger$c.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice(new Uint8Array(result));
    }
    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (isHexable(value)) {
      value = value.toHexString();
    }
    if (isHexString$1(value)) {
      let hex2 = value.substring(2);
      if (hex2.length % 2) {
        if (options.hexPad === "left") {
          hex2 = "0" + hex2;
        } else if (options.hexPad === "right") {
          hex2 += "0";
        } else {
          logger$c.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i2 = 0; i2 < hex2.length; i2 += 2) {
        result.push(parseInt(hex2.substring(i2, i2 + 2), 16));
      }
      return addSlice(new Uint8Array(result));
    }
    if (isBytes$3(value)) {
      return addSlice(new Uint8Array(value));
    }
    return logger$c.throwArgumentError("invalid arrayify value", "value", value);
  }
  function concat(items) {
    const objects = items.map((item) => arrayify(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice(result);
  }
  function stripZeros(value) {
    let result = arrayify(value);
    if (result.length === 0) {
      return result;
    }
    let start = 0;
    while (start < result.length && result[start] === 0) {
      start++;
    }
    if (start) {
      result = result.slice(start);
    }
    return result;
  }
  function zeroPad(value, length) {
    value = arrayify(value);
    if (value.length > length) {
      logger$c.throwArgumentError("value out of range", "value", arguments[0]);
    }
    const result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice(result);
  }
  function isHexString$1(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  const HexCharacters = "0123456789abcdef";
  function hexlify(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger$c.checkSafeUint53(value, "invalid hexlify value");
      let hex2 = "";
      while (value) {
        hex2 = HexCharacters[value & 15] + hex2;
        value = Math.floor(value / 16);
      }
      if (hex2.length) {
        if (hex2.length % 2) {
          hex2 = "0" + hex2;
        }
        return "0x" + hex2;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (isHexable(value)) {
      return value.toHexString();
    }
    if (isHexString$1(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger$c.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes$3(value)) {
      let result = "0x";
      for (let i2 = 0; i2 < value.length; i2++) {
        let v = value[i2];
        result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
      }
      return result;
    }
    return logger$c.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataLength(data) {
    if (typeof data !== "string") {
      data = hexlify(data);
    } else if (!isHexString$1(data) || data.length % 2) {
      return null;
    }
    return (data.length - 2) / 2;
  }
  function hexDataSlice(data, offset, endOffset) {
    if (typeof data !== "string") {
      data = hexlify(data);
    } else if (!isHexString$1(data) || data.length % 2) {
      logger$c.throwArgumentError("invalid hexData", "value", data);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
      return "0x" + data.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data.substring(offset);
  }
  function hexConcat(items) {
    let result = "0x";
    items.forEach((item) => {
      result += hexlify(item).substring(2);
    });
    return result;
  }
  function hexZeroPad(value, length) {
    if (typeof value !== "string") {
      value = hexlify(value);
    } else if (!isHexString$1(value)) {
      logger$c.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
      logger$c.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }
    return value;
  }
  function splitSignature(signature2) {
    const result = {
      r: "0x",
      s: "0x",
      _vs: "0x",
      recoveryParam: 0,
      v: 0,
      yParityAndS: "0x",
      compact: "0x"
    };
    if (isBytesLike(signature2)) {
      let bytes2 = arrayify(signature2);
      if (bytes2.length === 64) {
        result.v = 27 + (bytes2[32] >> 7);
        bytes2[32] &= 127;
        result.r = hexlify(bytes2.slice(0, 32));
        result.s = hexlify(bytes2.slice(32, 64));
      } else if (bytes2.length === 65) {
        result.r = hexlify(bytes2.slice(0, 32));
        result.s = hexlify(bytes2.slice(32, 64));
        result.v = bytes2[64];
      } else {
        logger$c.throwArgumentError("invalid signature string", "signature", signature2);
      }
      if (result.v < 27) {
        if (result.v === 0 || result.v === 1) {
          result.v += 27;
        } else {
          logger$c.throwArgumentError("signature invalid v byte", "signature", signature2);
        }
      }
      result.recoveryParam = 1 - result.v % 2;
      if (result.recoveryParam) {
        bytes2[32] |= 128;
      }
      result._vs = hexlify(bytes2.slice(32, 64));
    } else {
      result.r = signature2.r;
      result.s = signature2.s;
      result.v = signature2.v;
      result.recoveryParam = signature2.recoveryParam;
      result._vs = signature2._vs;
      if (result._vs != null) {
        const vs2 = zeroPad(arrayify(result._vs), 32);
        result._vs = hexlify(vs2);
        const recoveryParam = vs2[0] >= 128 ? 1 : 0;
        if (result.recoveryParam == null) {
          result.recoveryParam = recoveryParam;
        } else if (result.recoveryParam !== recoveryParam) {
          logger$c.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
        }
        vs2[0] &= 127;
        const s2 = hexlify(vs2);
        if (result.s == null) {
          result.s = s2;
        } else if (result.s !== s2) {
          logger$c.throwArgumentError("signature v mismatch _vs", "signature", signature2);
        }
      }
      if (result.recoveryParam == null) {
        if (result.v == null) {
          logger$c.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
        } else if (result.v === 0 || result.v === 1) {
          result.recoveryParam = result.v;
        } else {
          result.recoveryParam = 1 - result.v % 2;
        }
      } else {
        if (result.v == null) {
          result.v = 27 + result.recoveryParam;
        } else {
          const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
          if (result.recoveryParam !== recId) {
            logger$c.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
          }
        }
      }
      if (result.r == null || !isHexString$1(result.r)) {
        logger$c.throwArgumentError("signature missing or invalid r", "signature", signature2);
      } else {
        result.r = hexZeroPad(result.r, 32);
      }
      if (result.s == null || !isHexString$1(result.s)) {
        logger$c.throwArgumentError("signature missing or invalid s", "signature", signature2);
      } else {
        result.s = hexZeroPad(result.s, 32);
      }
      const vs = arrayify(result.s);
      if (vs[0] >= 128) {
        logger$c.throwArgumentError("signature s out of range", "signature", signature2);
      }
      if (result.recoveryParam) {
        vs[0] |= 128;
      }
      const _vs = hexlify(vs);
      if (result._vs) {
        if (!isHexString$1(result._vs)) {
          logger$c.throwArgumentError("signature invalid _vs", "signature", signature2);
        }
        result._vs = hexZeroPad(result._vs, 32);
      }
      if (result._vs == null) {
        result._vs = _vs;
      } else if (result._vs !== _vs) {
        logger$c.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
      }
    }
    result.yParityAndS = result._vs;
    result.compact = result.r + result.yParityAndS.substring(2);
    return result;
  }
  var bn$4 = { exports: {} };
  const require$$0$5 = /* @__PURE__ */ getAugmentedNamespace(dist$6);
  bn$4.exports;
  (function(module) {
    (function(module2, exports2) {
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number2, base2, endian) {
        if (BN2.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number2 || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN2;
      } else {
        exports2.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require$$0$5.Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num) {
        if (num instanceof BN2) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
      };
      BN2.max = function max2(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN2.min = function min2(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN2.prototype._init = function init(number2, base2, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base2, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base2 === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number2, base2, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN2.prototype._initArray = function _initArray(number2, base2, endian) {
        assert2(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i2 = number2.length - 1, j = 0; i2 >= 0; i2 -= 3) {
            w = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j = 0; i2 < number2.length; i2 += 3) {
            w = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string2, index) {
        var c = string2.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert2(false, "Invalid character in " + string2);
        }
      }
      function parseHexByte2(string2, lowerBound, index) {
        var r2 = parseHex4Bits(string2, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string2, index - 1) << 4;
        }
        return r2;
      }
      BN2.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
            w = parseHexByte2(number2, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
            w = parseHexByte2(number2, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var b = 0;
        var len2 = Math.min(str.length, end);
        for (var i2 = start; i2 < len2; i2++) {
          var c = str.charCodeAt(i2) - 48;
          r2 *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert2(c >= 0 && b < mul, "Invalid character");
          r2 += b;
        }
        return r2;
      }
      BN2.prototype._parseBase = function _parseBase(number2, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number2.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number2, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow3 = 1;
          word = parseBase(number2, i2, number2.length, base2);
          for (i2 = 0; i2 < mod2; i2++) {
            pow3 *= base2;
          }
          this.imuln(pow3);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN2.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN2.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN2.prototype.clone = function clone2() {
        var r2 = new BN2(null);
        this.copy(r2);
        return r2;
      };
      BN2.prototype._expand = function _expand(size2) {
        while (this.length < size2) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect2;
        } catch (e) {
          BN2.prototype.inspect = inspect2;
        }
      } else {
        BN2.prototype.inspect = inspect2;
      }
      function inspect2() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN2.prototype.toString = function toString2(base2, padding) {
        base2 = base2 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w = this.words[i2];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN2.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN2.prototype.toBuffer = function toBuffer2(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN2.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size2) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size2);
        }
        return new ArrayType(size2);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength2 = this.byteLength();
        var reqLength = length || Math.max(1, byteLength2);
        assert2(byteLength2 <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength2);
        return res;
      };
      BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength2) {
        var position = 0;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength2) {
        var position = res.length - 1;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t2 = w;
          var r2 = 0;
          if (t2 >= 4096) {
            r2 += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r2 += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r2 += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r2 += 2;
            t2 >>>= 2;
          }
          return r2 + t2;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t2 = w;
        var r2 = 0;
        if ((t2 & 8191) === 0) {
          r2 += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r2 += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r2 += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r2 += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b = this._zeroBits(this.words[i2]);
          r2 += b;
          if (b !== 26) break;
        }
        return r2;
      };
      BN2.prototype.byteLength = function byteLength2() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this._strip();
      };
      BN2.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN2.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b.length;
        return this._strip();
      };
      BN2.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN2.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = a.words[i2] ^ b.words[i2];
        }
        if (this !== a) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN2.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN2.prototype.xor = function xor2(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN2.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN2.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r2 = (a.words[i2] | 0) + (b.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        return this;
      };
      BN2.prototype.add = function add2(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp2 = this.cmp(num);
        if (cmp2 === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp2 > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r2 = (a.words[i2] | 0) - (b.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a.length && a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN2.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len2 = self2.length + num.length | 0;
        out.length = len2;
        len2 = len2 - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len2; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j | 0;
            a = self2.words[i2] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j;
            var a = self2.words[i2] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN2.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len2 = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len2 < 63) {
          res = smallMulTo(this, num, out);
        } else if (len2 < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      BN2.prototype.mul = function mul(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN2.prototype.mulf = function mulf(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN2.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN2.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w = (this.words[i2] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow3(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN2(1);
        var res = this;
        for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
          if (w[i2] !== 0) break;
        }
        if (++i2 < w.length) {
          for (var q = res.sqr(); i2 < w.length; i2++, q = q.sqr()) {
            if (w[i2] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this._strip();
      };
      BN2.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s2;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) ;
        else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask2;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN2.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN2.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN2.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN2.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN2.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2) return false;
        var w = this.words[s2];
        return !!(w & q);
      };
      BN2.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask2;
        }
        return this._strip();
      };
      BN2.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN2.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN2.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN2.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN2.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs2() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len2 = num.length + shift;
        var i2;
        this._expand(len2);
        var w;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i2 + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w = -(this.words[i2] | 0) + carry;
          carry = w >> 26;
          this.words[i2] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN2(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i2 = 0; i2 < q.length; i2++) {
            q.words[i2] = 0;
          }
        }
        var diff2 = a.clone()._ishlnsubmul(b, 1, m);
        if (diff2.negative === 0) {
          a = diff2;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN2.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN2(0),
            mod: new BN2(0)
          };
        }
        var div, mod2, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num);
            }
          }
          return {
            div,
            mod: mod2
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN2(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN2(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN2(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN2.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN2.prototype.mod = function mod2(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp2 = mod2.cmp(half);
        if (cmp2 < 0 || r2 === 1 && cmp2 === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p * acc + (this.words[i2] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN2.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN2.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN2.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN2(1);
        var B = new BN2(0);
        var C = new BN2(0);
        var D = new BN2(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i2 = 0, im = 1; (x.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            x.iushrn(i2);
            while (i2-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN2.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            a.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t2 = a;
            a = b;
            b = t2;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd2() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q;
          return this;
        }
        var carry = q;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w = this.words[i2] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i2] = w;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp2(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a = this.words[i2] | 0;
          var b = num.words[i2] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN2.prototype.gt = function gt2(num) {
        return this.cmp(num) === 1;
      };
      BN2.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN2.prototype.gte = function gte2(num) {
        return this.cmp(num) >= 0;
      };
      BN2.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN2.prototype.lt = function lt2(num) {
        return this.cmp(num) === -1;
      };
      BN2.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN2.prototype.lte = function lte2(num) {
        return this.cmp(num) <= 0;
      };
      BN2.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN2.prototype.eq = function eq2(num) {
        return this.cmp(num) === 0;
      };
      BN2.red = function red(num) {
        return new Red(num);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN2.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN2.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN2.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN2.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN2.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN2.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN2(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp2 = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp2 === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp2 > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split2(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits2(K256, MPrime);
      K256.prototype.split = function split2(input, output2) {
        var mask2 = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output2.words[i2] = input.words[i2];
        }
        output2.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output2.words[output2.length++] = prev & mask2;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask2) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w = num.words[i2] | 0;
          lo += w * 977;
          num.words[i2] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits2(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits2(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits2(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN2._prime = function prime(name2) {
        if (primes[name2]) return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN2._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add2(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow3 = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow3);
        }
        var q = this.m.subn(1);
        var s2 = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s2++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN2(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t2 = this.pow(a, q);
        var m = s2;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert2(i2 < m);
          var b = this.pow(c, new BN2(1).iushln(m - i2 - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t2 = t2.redMul(c);
          m = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow3(a, num) {
        if (num.isZero()) return new BN2(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont2(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits2(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t2 = a.imul(b);
        var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t2.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
        var t2 = a.mul(b);
        var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t2.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
  })(bn$4);
  var bnExports$1 = bn$4.exports;
  const _BN = /* @__PURE__ */ getDefaultExportFromCjs$1(bnExports$1);
  const version$8 = "bignumber/5.7.0";
  var BN$1 = _BN.BN;
  const logger$b = new Logger(version$8);
  const _constructorGuard$1 = {};
  const MAX_SAFE = 9007199254740991;
  let _warnedToStringRadix = false;
  class BigNumber {
    constructor(constructorGuard, hex2) {
      if (constructorGuard !== _constructorGuard$1) {
        logger$b.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new (BigNumber)"
        });
      }
      this._hex = hex2;
      this._isBigNumber = true;
      Object.freeze(this);
    }
    fromTwos(value) {
      return toBigNumber(toBN(this).fromTwos(value));
    }
    toTwos(value) {
      return toBigNumber(toBN(this).toTwos(value));
    }
    abs() {
      if (this._hex[0] === "-") {
        return BigNumber.from(this._hex.substring(1));
      }
      return this;
    }
    add(other) {
      return toBigNumber(toBN(this).add(toBN(other)));
    }
    sub(other) {
      return toBigNumber(toBN(this).sub(toBN(other)));
    }
    div(other) {
      const o = BigNumber.from(other);
      if (o.isZero()) {
        throwFault("division-by-zero", "div");
      }
      return toBigNumber(toBN(this).div(toBN(other)));
    }
    mul(other) {
      return toBigNumber(toBN(this).mul(toBN(other)));
    }
    mod(other) {
      const value = toBN(other);
      if (value.isNeg()) {
        throwFault("division-by-zero", "mod");
      }
      return toBigNumber(toBN(this).umod(value));
    }
    pow(other) {
      const value = toBN(other);
      if (value.isNeg()) {
        throwFault("negative-power", "pow");
      }
      return toBigNumber(toBN(this).pow(value));
    }
    and(other) {
      const value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault("unbound-bitwise-result", "and");
      }
      return toBigNumber(toBN(this).and(value));
    }
    or(other) {
      const value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault("unbound-bitwise-result", "or");
      }
      return toBigNumber(toBN(this).or(value));
    }
    xor(other) {
      const value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault("unbound-bitwise-result", "xor");
      }
      return toBigNumber(toBN(this).xor(value));
    }
    mask(value) {
      if (this.isNegative() || value < 0) {
        throwFault("negative-width", "mask");
      }
      return toBigNumber(toBN(this).maskn(value));
    }
    shl(value) {
      if (this.isNegative() || value < 0) {
        throwFault("negative-width", "shl");
      }
      return toBigNumber(toBN(this).shln(value));
    }
    shr(value) {
      if (this.isNegative() || value < 0) {
        throwFault("negative-width", "shr");
      }
      return toBigNumber(toBN(this).shrn(value));
    }
    eq(other) {
      return toBN(this).eq(toBN(other));
    }
    lt(other) {
      return toBN(this).lt(toBN(other));
    }
    lte(other) {
      return toBN(this).lte(toBN(other));
    }
    gt(other) {
      return toBN(this).gt(toBN(other));
    }
    gte(other) {
      return toBN(this).gte(toBN(other));
    }
    isNegative() {
      return this._hex[0] === "-";
    }
    isZero() {
      return toBN(this).isZero();
    }
    toNumber() {
      try {
        return toBN(this).toNumber();
      } catch (error2) {
        throwFault("overflow", "toNumber", this.toString());
      }
      return null;
    }
    toBigInt() {
      try {
        return BigInt(this.toString());
      } catch (e) {
      }
      return logger$b.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
        value: this.toString()
      });
    }
    toString() {
      if (arguments.length > 0) {
        if (arguments[0] === 10) {
          if (!_warnedToStringRadix) {
            _warnedToStringRadix = true;
            logger$b.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
          }
        } else if (arguments[0] === 16) {
          logger$b.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
        } else {
          logger$b.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
        }
      }
      return toBN(this).toString(10);
    }
    toHexString() {
      return this._hex;
    }
    toJSON(key2) {
      return { type: "BigNumber", hex: this.toHexString() };
    }
    static from(value) {
      if (value instanceof BigNumber) {
        return value;
      }
      if (typeof value === "string") {
        if (value.match(/^-?0x[0-9a-f]+$/i)) {
          return new BigNumber(_constructorGuard$1, toHex$1(value));
        }
        if (value.match(/^-?[0-9]+$/)) {
          return new BigNumber(_constructorGuard$1, toHex$1(new BN$1(value)));
        }
        return logger$b.throwArgumentError("invalid BigNumber string", "value", value);
      }
      if (typeof value === "number") {
        if (value % 1) {
          throwFault("underflow", "BigNumber.from", value);
        }
        if (value >= MAX_SAFE || value <= -9007199254740991) {
          throwFault("overflow", "BigNumber.from", value);
        }
        return BigNumber.from(String(value));
      }
      const anyValue = value;
      if (typeof anyValue === "bigint") {
        return BigNumber.from(anyValue.toString());
      }
      if (isBytes$3(anyValue)) {
        return BigNumber.from(hexlify(anyValue));
      }
      if (anyValue) {
        if (anyValue.toHexString) {
          const hex2 = anyValue.toHexString();
          if (typeof hex2 === "string") {
            return BigNumber.from(hex2);
          }
        } else {
          let hex2 = anyValue._hex;
          if (hex2 == null && anyValue.type === "BigNumber") {
            hex2 = anyValue.hex;
          }
          if (typeof hex2 === "string") {
            if (isHexString$1(hex2) || hex2[0] === "-" && isHexString$1(hex2.substring(1))) {
              return BigNumber.from(hex2);
            }
          }
        }
      }
      return logger$b.throwArgumentError("invalid BigNumber value", "value", value);
    }
    static isBigNumber(value) {
      return !!(value && value._isBigNumber);
    }
  }
  function toHex$1(value) {
    if (typeof value !== "string") {
      return toHex$1(value.toString(16));
    }
    if (value[0] === "-") {
      value = value.substring(1);
      if (value[0] === "-") {
        logger$b.throwArgumentError("invalid hex", "value", value);
      }
      value = toHex$1(value);
      if (value === "0x00") {
        return value;
      }
      return "-" + value;
    }
    if (value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (value === "0x") {
      return "0x00";
    }
    if (value.length % 2) {
      value = "0x0" + value.substring(2);
    }
    while (value.length > 4 && value.substring(0, 4) === "0x00") {
      value = "0x" + value.substring(4);
    }
    return value;
  }
  function toBigNumber(value) {
    return BigNumber.from(toHex$1(value));
  }
  function toBN(value) {
    const hex2 = BigNumber.from(value).toHexString();
    if (hex2[0] === "-") {
      return new BN$1("-" + hex2.substring(3), 16);
    }
    return new BN$1(hex2.substring(2), 16);
  }
  function throwFault(fault, operation, value) {
    const params = { fault, operation };
    if (value != null) {
      params.value = value;
    }
    return logger$b.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
  }
  function _base36To16(value) {
    return new BN$1(value, 36).toString(16);
  }
  var sha3$3 = { exports: {} };
  (function(module) {
    (function() {
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process$1 === "object" && process$1.versions && process$1.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && true && module.exports;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding, outputType) {
        return function(message) {
          return new Keccak2(bits2, padding, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits) {
          return new Keccak2(bits2, padding, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits, n, s2) {
          return methods["cshake" + bits2].update(message, outputBits, n, s2)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding, outputType) {
        return function(key2, message, outputBits, s2) {
          return methods["kmac" + bits2].update(key2, message, outputBits, s2)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding) {
        for (var i3 = 0; i3 < OUTPUT_TYPES.length; ++i3) {
          var type2 = OUTPUT_TYPES[i3];
          method[type2] = createMethod2(bits2, padding, type2);
        }
        return method;
      };
      var createMethod = function(bits2, padding) {
        var method = createOutputMethod(bits2, padding, "hex");
        method.create = function() {
          return new Keccak2(bits2, padding, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding);
      };
      var createShakeMethod = function(bits2, padding) {
        var method = createShakeOutputMethod(bits2, padding, "hex");
        method.create = function(outputBits) {
          return new Keccak2(bits2, padding, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding);
      };
      var createCshakeMethod = function(bits2, padding) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding, "hex");
        method.create = function(outputBits, n, s2) {
          if (!n && !s2) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak2(bits2, padding, outputBits).bytepad([n, s2], w);
          }
        };
        method.update = function(message, outputBits, n, s2) {
          return method.create(outputBits, n, s2).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding);
      };
      var createKmacMethod = function(bits2, padding) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding, "hex");
        method.create = function(key2, outputBits, s2) {
          return new Kmac(bits2, padding, outputBits).bytepad(["KMAC", s2], w).bytepad([key2], w);
        };
        method.update = function(key2, message, outputBits, s2) {
          return method.create(key2, outputBits, s2).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i2 = 0; i2 < algorithms.length; ++i2) {
        var algorithm = algorithms[i2];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + "_" + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak2(bits2, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i3 = 0; i3 < 50; ++i3) {
          this.s[i3] = 0;
        }
      }
      Keccak2.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type2 = typeof message;
        if (type2 !== "string") {
          if (type2 === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s2 = this.s, i3, code2;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i3 = 1; i3 < blockCount + 1; ++i3) {
              blocks[i3] = 0;
            }
          }
          if (notString) {
            for (i3 = this.start; index < length && i3 < byteCount; ++index) {
              blocks[i3 >> 2] |= message[index] << SHIFT[i3++ & 3];
            }
          } else {
            for (i3 = this.start; index < length && i3 < byteCount; ++index) {
              code2 = message.charCodeAt(index);
              if (code2 < 128) {
                blocks[i3 >> 2] |= code2 << SHIFT[i3++ & 3];
              } else if (code2 < 2048) {
                blocks[i3 >> 2] |= (192 | code2 >> 6) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code2 & 63) << SHIFT[i3++ & 3];
              } else if (code2 < 55296 || code2 >= 57344) {
                blocks[i3 >> 2] |= (224 | code2 >> 12) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code2 >> 6 & 63) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code2 & 63) << SHIFT[i3++ & 3];
              } else {
                code2 = 65536 + ((code2 & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i3 >> 2] |= (240 | code2 >> 18) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code2 >> 12 & 63) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code2 >> 6 & 63) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code2 & 63) << SHIFT[i3++ & 3];
              }
            }
          }
          this.lastByteIndex = i3;
          if (i3 >= byteCount) {
            this.start = i3 - byteCount;
            this.block = blocks[blockCount];
            for (i3 = 0; i3 < blockCount; ++i3) {
              s2[i3] ^= blocks[i3];
            }
            f2(s2);
            this.reset = true;
          } else {
            this.start = i3;
          }
        }
        return this;
      };
      Keccak2.prototype.encode = function(x, right) {
        var o = x & 255, n = 1;
        var bytes2 = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes2.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes2.push(n);
        } else {
          bytes2.unshift(n);
        }
        this.update(bytes2);
        return bytes2.length;
      };
      Keccak2.prototype.encodeString = function(str) {
        var notString, type2 = typeof str;
        if (type2 !== "string") {
          if (type2 === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes2 = 0, length = str.length;
        if (notString) {
          bytes2 = length;
        } else {
          for (var i3 = 0; i3 < str.length; ++i3) {
            var code2 = str.charCodeAt(i3);
            if (code2 < 128) {
              bytes2 += 1;
            } else if (code2 < 2048) {
              bytes2 += 2;
            } else if (code2 < 55296 || code2 >= 57344) {
              bytes2 += 3;
            } else {
              code2 = 65536 + ((code2 & 1023) << 10 | str.charCodeAt(++i3) & 1023);
              bytes2 += 4;
            }
          }
        }
        bytes2 += this.encode(bytes2 * 8);
        this.update(str);
        return bytes2;
      };
      Keccak2.prototype.bytepad = function(strs, w) {
        var bytes2 = this.encode(w);
        for (var i3 = 0; i3 < strs.length; ++i3) {
          bytes2 += this.encodeString(strs[i3]);
        }
        var paddingBytes = w - bytes2 % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };
      Keccak2.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i3 = this.lastByteIndex, blockCount = this.blockCount, s2 = this.s;
        blocks[i3 >> 2] |= this.padding[i3 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i3 = 1; i3 < blockCount + 1; ++i3) {
            blocks[i3] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i3 = 0; i3 < blockCount; ++i3) {
          s2[i3] ^= blocks[i3];
        }
        f2(s2);
      };
      Keccak2.prototype.toString = Keccak2.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j2 = 0;
        var hex2 = "", block;
        while (j2 < outputBlocks) {
          for (i3 = 0; i3 < blockCount && j2 < outputBlocks; ++i3, ++j2) {
            block = s2[i3];
            hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j2 % blockCount === 0) {
            f2(s2);
            i3 = 0;
          }
        }
        if (extraBytes) {
          block = s2[i3];
          hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex2 += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex2 += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex2;
      };
      Keccak2.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j2 = 0;
        var bytes2 = this.outputBits >> 3;
        var buffer2;
        if (extraBytes) {
          buffer2 = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer2 = new ArrayBuffer(bytes2);
        }
        var array2 = new Uint32Array(buffer2);
        while (j2 < outputBlocks) {
          for (i3 = 0; i3 < blockCount && j2 < outputBlocks; ++i3, ++j2) {
            array2[j2] = s2[i3];
          }
          if (j2 % blockCount === 0) {
            f2(s2);
          }
        }
        if (extraBytes) {
          array2[i3] = s2[i3];
          buffer2 = buffer2.slice(0, bytes2);
        }
        return buffer2;
      };
      Keccak2.prototype.buffer = Keccak2.prototype.arrayBuffer;
      Keccak2.prototype.digest = Keccak2.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j2 = 0;
        var array2 = [], offset, block;
        while (j2 < outputBlocks) {
          for (i3 = 0; i3 < blockCount && j2 < outputBlocks; ++i3, ++j2) {
            offset = j2 << 2;
            block = s2[i3];
            array2[offset] = block & 255;
            array2[offset + 1] = block >> 8 & 255;
            array2[offset + 2] = block >> 16 & 255;
            array2[offset + 3] = block >> 24 & 255;
          }
          if (j2 % blockCount === 0) {
            f2(s2);
          }
        }
        if (extraBytes) {
          offset = j2 << 2;
          block = s2[i3];
          array2[offset] = block & 255;
          if (extraBytes > 1) {
            array2[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array2[offset + 2] = block >> 16 & 255;
          }
        }
        return array2;
      };
      function Kmac(bits2, padding, outputBits) {
        Keccak2.call(this, bits2, padding, outputBits);
      }
      Kmac.prototype = new Keccak2();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak2.prototype.finalize.call(this);
      };
      var f2 = function(s2) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
          c1 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
          c2 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
          c3 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
          c4 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
          c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
          c6 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
          c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
          c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
          c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s2[0] ^= h;
          s2[1] ^= l;
          s2[10] ^= h;
          s2[11] ^= l;
          s2[20] ^= h;
          s2[21] ^= l;
          s2[30] ^= h;
          s2[31] ^= l;
          s2[40] ^= h;
          s2[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s2[2] ^= h;
          s2[3] ^= l;
          s2[12] ^= h;
          s2[13] ^= l;
          s2[22] ^= h;
          s2[23] ^= l;
          s2[32] ^= h;
          s2[33] ^= l;
          s2[42] ^= h;
          s2[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s2[4] ^= h;
          s2[5] ^= l;
          s2[14] ^= h;
          s2[15] ^= l;
          s2[24] ^= h;
          s2[25] ^= l;
          s2[34] ^= h;
          s2[35] ^= l;
          s2[44] ^= h;
          s2[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s2[6] ^= h;
          s2[7] ^= l;
          s2[16] ^= h;
          s2[17] ^= l;
          s2[26] ^= h;
          s2[27] ^= l;
          s2[36] ^= h;
          s2[37] ^= l;
          s2[46] ^= h;
          s2[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s2[8] ^= h;
          s2[9] ^= l;
          s2[18] ^= h;
          s2[19] ^= l;
          s2[28] ^= h;
          s2[29] ^= l;
          s2[38] ^= h;
          s2[39] ^= l;
          s2[48] ^= h;
          s2[49] ^= l;
          b0 = s2[0];
          b1 = s2[1];
          b32 = s2[11] << 4 | s2[10] >>> 28;
          b33 = s2[10] << 4 | s2[11] >>> 28;
          b14 = s2[20] << 3 | s2[21] >>> 29;
          b15 = s2[21] << 3 | s2[20] >>> 29;
          b46 = s2[31] << 9 | s2[30] >>> 23;
          b47 = s2[30] << 9 | s2[31] >>> 23;
          b28 = s2[40] << 18 | s2[41] >>> 14;
          b29 = s2[41] << 18 | s2[40] >>> 14;
          b20 = s2[2] << 1 | s2[3] >>> 31;
          b21 = s2[3] << 1 | s2[2] >>> 31;
          b2 = s2[13] << 12 | s2[12] >>> 20;
          b3 = s2[12] << 12 | s2[13] >>> 20;
          b34 = s2[22] << 10 | s2[23] >>> 22;
          b35 = s2[23] << 10 | s2[22] >>> 22;
          b16 = s2[33] << 13 | s2[32] >>> 19;
          b17 = s2[32] << 13 | s2[33] >>> 19;
          b48 = s2[42] << 2 | s2[43] >>> 30;
          b49 = s2[43] << 2 | s2[42] >>> 30;
          b40 = s2[5] << 30 | s2[4] >>> 2;
          b41 = s2[4] << 30 | s2[5] >>> 2;
          b22 = s2[14] << 6 | s2[15] >>> 26;
          b23 = s2[15] << 6 | s2[14] >>> 26;
          b4 = s2[25] << 11 | s2[24] >>> 21;
          b5 = s2[24] << 11 | s2[25] >>> 21;
          b36 = s2[34] << 15 | s2[35] >>> 17;
          b37 = s2[35] << 15 | s2[34] >>> 17;
          b18 = s2[45] << 29 | s2[44] >>> 3;
          b19 = s2[44] << 29 | s2[45] >>> 3;
          b10 = s2[6] << 28 | s2[7] >>> 4;
          b11 = s2[7] << 28 | s2[6] >>> 4;
          b42 = s2[17] << 23 | s2[16] >>> 9;
          b43 = s2[16] << 23 | s2[17] >>> 9;
          b24 = s2[26] << 25 | s2[27] >>> 7;
          b25 = s2[27] << 25 | s2[26] >>> 7;
          b6 = s2[36] << 21 | s2[37] >>> 11;
          b7 = s2[37] << 21 | s2[36] >>> 11;
          b38 = s2[47] << 24 | s2[46] >>> 8;
          b39 = s2[46] << 24 | s2[47] >>> 8;
          b30 = s2[8] << 27 | s2[9] >>> 5;
          b31 = s2[9] << 27 | s2[8] >>> 5;
          b12 = s2[18] << 20 | s2[19] >>> 12;
          b13 = s2[19] << 20 | s2[18] >>> 12;
          b44 = s2[29] << 7 | s2[28] >>> 25;
          b45 = s2[28] << 7 | s2[29] >>> 25;
          b26 = s2[38] << 8 | s2[39] >>> 24;
          b27 = s2[39] << 8 | s2[38] >>> 24;
          b8 = s2[48] << 14 | s2[49] >>> 18;
          b9 = s2[49] << 14 | s2[48] >>> 18;
          s2[0] = b0 ^ ~b2 & b4;
          s2[1] = b1 ^ ~b3 & b5;
          s2[10] = b10 ^ ~b12 & b14;
          s2[11] = b11 ^ ~b13 & b15;
          s2[20] = b20 ^ ~b22 & b24;
          s2[21] = b21 ^ ~b23 & b25;
          s2[30] = b30 ^ ~b32 & b34;
          s2[31] = b31 ^ ~b33 & b35;
          s2[40] = b40 ^ ~b42 & b44;
          s2[41] = b41 ^ ~b43 & b45;
          s2[2] = b2 ^ ~b4 & b6;
          s2[3] = b3 ^ ~b5 & b7;
          s2[12] = b12 ^ ~b14 & b16;
          s2[13] = b13 ^ ~b15 & b17;
          s2[22] = b22 ^ ~b24 & b26;
          s2[23] = b23 ^ ~b25 & b27;
          s2[32] = b32 ^ ~b34 & b36;
          s2[33] = b33 ^ ~b35 & b37;
          s2[42] = b42 ^ ~b44 & b46;
          s2[43] = b43 ^ ~b45 & b47;
          s2[4] = b4 ^ ~b6 & b8;
          s2[5] = b5 ^ ~b7 & b9;
          s2[14] = b14 ^ ~b16 & b18;
          s2[15] = b15 ^ ~b17 & b19;
          s2[24] = b24 ^ ~b26 & b28;
          s2[25] = b25 ^ ~b27 & b29;
          s2[34] = b34 ^ ~b36 & b38;
          s2[35] = b35 ^ ~b37 & b39;
          s2[44] = b44 ^ ~b46 & b48;
          s2[45] = b45 ^ ~b47 & b49;
          s2[6] = b6 ^ ~b8 & b0;
          s2[7] = b7 ^ ~b9 & b1;
          s2[16] = b16 ^ ~b18 & b10;
          s2[17] = b17 ^ ~b19 & b11;
          s2[26] = b26 ^ ~b28 & b20;
          s2[27] = b27 ^ ~b29 & b21;
          s2[36] = b36 ^ ~b38 & b30;
          s2[37] = b37 ^ ~b39 & b31;
          s2[46] = b46 ^ ~b48 & b40;
          s2[47] = b47 ^ ~b49 & b41;
          s2[8] = b8 ^ ~b0 & b2;
          s2[9] = b9 ^ ~b1 & b3;
          s2[18] = b18 ^ ~b10 & b12;
          s2[19] = b19 ^ ~b11 & b13;
          s2[28] = b28 ^ ~b20 & b22;
          s2[29] = b29 ^ ~b21 & b23;
          s2[38] = b38 ^ ~b30 & b32;
          s2[39] = b39 ^ ~b31 & b33;
          s2[48] = b48 ^ ~b40 & b42;
          s2[49] = b49 ^ ~b41 & b43;
          s2[0] ^= RC[n];
          s2[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i2 = 0; i2 < methodNames.length; ++i2) {
          root[methodNames[i2]] = methods[methodNames[i2]];
        }
      }
    })();
  })(sha3$3);
  var sha3Exports = sha3$3.exports;
  const sha3$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(sha3Exports);
  function keccak256(data) {
    return "0x" + sha3$2.keccak_256(arrayify(data));
  }
  const version$7 = "rlp/5.7.0";
  const logger$a = new Logger(version$7);
  function arrayifyInteger(value) {
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value >>= 8;
    }
    return result;
  }
  function unarrayifyInteger(data, offset, length) {
    let result = 0;
    for (let i2 = 0; i2 < length; i2++) {
      result = result * 256 + data[offset + i2];
    }
    return result;
  }
  function _encode(object) {
    if (Array.isArray(object)) {
      let payload = [];
      object.forEach(function(child) {
        payload = payload.concat(_encode(child));
      });
      if (payload.length <= 55) {
        payload.unshift(192 + payload.length);
        return payload;
      }
      const length2 = arrayifyInteger(payload.length);
      length2.unshift(247 + length2.length);
      return length2.concat(payload);
    }
    if (!isBytesLike(object)) {
      logger$a.throwArgumentError("RLP object must be BytesLike", "object", object);
    }
    const data = Array.prototype.slice.call(arrayify(object));
    if (data.length === 1 && data[0] <= 127) {
      return data;
    } else if (data.length <= 55) {
      data.unshift(128 + data.length);
      return data;
    }
    const length = arrayifyInteger(data.length);
    length.unshift(183 + length.length);
    return length.concat(data);
  }
  function encode$4(object) {
    return hexlify(_encode(object));
  }
  function _decodeChildren(data, offset, childOffset, length) {
    const result = [];
    while (childOffset < offset + 1 + length) {
      const decoded = _decode$1(data, childOffset);
      result.push(decoded.result);
      childOffset += decoded.consumed;
      if (childOffset > offset + 1 + length) {
        logger$a.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
      }
    }
    return { consumed: 1 + length, result };
  }
  function _decode$1(data, offset) {
    if (data.length === 0) {
      logger$a.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    if (data[offset] >= 248) {
      const lengthLength = data[offset] - 247;
      if (offset + 1 + lengthLength > data.length) {
        logger$a.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const length = unarrayifyInteger(data, offset + 1, lengthLength);
      if (offset + 1 + lengthLength + length > data.length) {
        logger$a.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
    } else if (data[offset] >= 192) {
      const length = data[offset] - 192;
      if (offset + 1 + length > data.length) {
        logger$a.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      return _decodeChildren(data, offset, offset + 1, length);
    } else if (data[offset] >= 184) {
      const lengthLength = data[offset] - 183;
      if (offset + 1 + lengthLength > data.length) {
        logger$a.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const length = unarrayifyInteger(data, offset + 1, lengthLength);
      if (offset + 1 + lengthLength + length > data.length) {
        logger$a.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
      return { consumed: 1 + lengthLength + length, result };
    } else if (data[offset] >= 128) {
      const length = data[offset] - 128;
      if (offset + 1 + length > data.length) {
        logger$a.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const result = hexlify(data.slice(offset + 1, offset + 1 + length));
      return { consumed: 1 + length, result };
    }
    return { consumed: 1, result: hexlify(data[offset]) };
  }
  function decode$2(data) {
    const bytes2 = arrayify(data);
    const decoded = _decode$1(bytes2, 0);
    if (decoded.consumed !== bytes2.length) {
      logger$a.throwArgumentError("invalid rlp data", "data", data);
    }
    return decoded.result;
  }
  const version$6 = "address/5.7.0";
  const logger$9 = new Logger(version$6);
  function getChecksumAddress(address2) {
    if (!isHexString$1(address2, 20)) {
      logger$9.throwArgumentError("invalid address", "address", address2);
    }
    address2 = address2.toLowerCase();
    const chars = address2.substring(2).split("");
    const expanded = new Uint8Array(40);
    for (let i2 = 0; i2 < 40; i2++) {
      expanded[i2] = chars[i2].charCodeAt(0);
    }
    const hashed = arrayify(keccak256(expanded));
    for (let i2 = 0; i2 < 40; i2 += 2) {
      if (hashed[i2 >> 1] >> 4 >= 8) {
        chars[i2] = chars[i2].toUpperCase();
      }
      if ((hashed[i2 >> 1] & 15) >= 8) {
        chars[i2 + 1] = chars[i2 + 1].toUpperCase();
      }
    }
    return "0x" + chars.join("");
  }
  const MAX_SAFE_INTEGER$4 = 9007199254740991;
  function log10(x) {
    if (Math.log10) {
      return Math.log10(x);
    }
    return Math.log(x) / Math.LN10;
  }
  const ibanLookup = {};
  for (let i2 = 0; i2 < 10; i2++) {
    ibanLookup[String(i2)] = String(i2);
  }
  for (let i2 = 0; i2 < 26; i2++) {
    ibanLookup[String.fromCharCode(65 + i2)] = String(10 + i2);
  }
  const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER$4));
  function ibanChecksum(address2) {
    address2 = address2.toUpperCase();
    address2 = address2.substring(4) + address2.substring(0, 2) + "00";
    let expanded = address2.split("").map((c) => {
      return ibanLookup[c];
    }).join("");
    while (expanded.length >= safeDigits) {
      let block = expanded.substring(0, safeDigits);
      expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }
    let checksum2 = String(98 - parseInt(expanded, 10) % 97);
    while (checksum2.length < 2) {
      checksum2 = "0" + checksum2;
    }
    return checksum2;
  }
  function getAddress(address2) {
    let result = null;
    if (typeof address2 !== "string") {
      logger$9.throwArgumentError("invalid address", "address", address2);
    }
    if (address2.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
      if (address2.substring(0, 2) !== "0x") {
        address2 = "0x" + address2;
      }
      result = getChecksumAddress(address2);
      if (address2.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address2) {
        logger$9.throwArgumentError("bad address checksum", "address", address2);
      }
    } else if (address2.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
      if (address2.substring(2, 4) !== ibanChecksum(address2)) {
        logger$9.throwArgumentError("bad icap checksum", "address", address2);
      }
      result = _base36To16(address2.substring(4));
      while (result.length < 40) {
        result = "0" + result;
      }
      result = getChecksumAddress("0x" + result);
    } else {
      logger$9.throwArgumentError("invalid address", "address", address2);
    }
    return result;
  }
  const AddressZero = "0x0000000000000000000000000000000000000000";
  const NegativeOne = /* @__PURE__ */ BigNumber.from(-1);
  const Zero = /* @__PURE__ */ BigNumber.from(0);
  const One = /* @__PURE__ */ BigNumber.from(1);
  const MaxUint256 = /* @__PURE__ */ BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  const version$5 = "properties/5.7.0";
  (function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  });
  const logger$8 = new Logger(version$5);
  function defineReadOnly(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false
    });
  }
  function getStatic(ctor, key2) {
    for (let i2 = 0; i2 < 32; i2++) {
      if (ctor[key2]) {
        return ctor[key2];
      }
      if (!ctor.prototype || typeof ctor.prototype !== "object") {
        break;
      }
      ctor = Object.getPrototypeOf(ctor.prototype).constructor;
    }
    return null;
  }
  const opaque$1 = { bigint: true, boolean: true, "function": true, number: true, string: true };
  function _isFrozen(object) {
    if (object === void 0 || object === null || opaque$1[typeof object]) {
      return true;
    }
    if (Array.isArray(object) || typeof object === "object") {
      if (!Object.isFrozen(object)) {
        return false;
      }
      const keys = Object.keys(object);
      for (let i2 = 0; i2 < keys.length; i2++) {
        let value = null;
        try {
          value = object[keys[i2]];
        } catch (error2) {
          continue;
        }
        if (!_isFrozen(value)) {
          return false;
        }
      }
      return true;
    }
    return logger$8.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
  }
  function _deepCopy(object) {
    if (_isFrozen(object)) {
      return object;
    }
    if (Array.isArray(object)) {
      return Object.freeze(object.map((item) => deepCopy(item)));
    }
    if (typeof object === "object") {
      const result = {};
      for (const key2 in object) {
        const value = object[key2];
        if (value === void 0) {
          continue;
        }
        defineReadOnly(result, key2, deepCopy(value));
      }
      return result;
    }
    return logger$8.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
  }
  function deepCopy(object) {
    return _deepCopy(object);
  }
  class Description {
    constructor(info) {
      for (const key2 in info) {
        this[key2] = deepCopy(info[key2]);
      }
    }
  }
  const global$1 = globalThis || void 0 || self;
  var bn$3 = { exports: {} };
  bn$3.exports;
  (function(module) {
    (function(module2, exports2) {
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number2, base2, endian) {
        if (BN2.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number2 || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN2;
      } else {
        exports2.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require$$0$5.Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num) {
        if (num instanceof BN2) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
      };
      BN2.max = function max2(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN2.min = function min2(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN2.prototype._init = function init(number2, base2, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base2, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base2 === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number2, base2, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN2.prototype._initArray = function _initArray(number2, base2, endian) {
        assert2(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i2 = number2.length - 1, j = 0; i2 >= 0; i2 -= 3) {
            w = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j = 0; i2 < number2.length; i2 += 3) {
            w = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string2, index) {
        var c = string2.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert2(false, "Invalid character in " + string2);
        }
      }
      function parseHexByte2(string2, lowerBound, index) {
        var r2 = parseHex4Bits(string2, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string2, index - 1) << 4;
        }
        return r2;
      }
      BN2.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
            w = parseHexByte2(number2, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
            w = parseHexByte2(number2, start, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var b = 0;
        var len2 = Math.min(str.length, end);
        for (var i2 = start; i2 < len2; i2++) {
          var c = str.charCodeAt(i2) - 48;
          r2 *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert2(c >= 0 && b < mul, "Invalid character");
          r2 += b;
        }
        return r2;
      }
      BN2.prototype._parseBase = function _parseBase(number2, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number2.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number2, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow3 = 1;
          word = parseBase(number2, i2, number2.length, base2);
          for (i2 = 0; i2 < mod2; i2++) {
            pow3 *= base2;
          }
          this.imuln(pow3);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN2.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN2.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN2.prototype.clone = function clone2() {
        var r2 = new BN2(null);
        this.copy(r2);
        return r2;
      };
      BN2.prototype._expand = function _expand(size2) {
        while (this.length < size2) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect2;
        } catch (e) {
          BN2.prototype.inspect = inspect2;
        }
      } else {
        BN2.prototype.inspect = inspect2;
      }
      function inspect2() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN2.prototype.toString = function toString2(base2, padding) {
        base2 = base2 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w = this.words[i2];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN2.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN2.prototype.toBuffer = function toBuffer2(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN2.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size2) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size2);
        }
        return new ArrayType(size2);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength2 = this.byteLength();
        var reqLength = length || Math.max(1, byteLength2);
        assert2(byteLength2 <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength2);
        return res;
      };
      BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength2) {
        var position = 0;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength2) {
        var position = res.length - 1;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t2 = w;
          var r2 = 0;
          if (t2 >= 4096) {
            r2 += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r2 += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r2 += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r2 += 2;
            t2 >>>= 2;
          }
          return r2 + t2;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t2 = w;
        var r2 = 0;
        if ((t2 & 8191) === 0) {
          r2 += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r2 += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r2 += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r2 += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b = this._zeroBits(this.words[i2]);
          r2 += b;
          if (b !== 26) break;
        }
        return r2;
      };
      BN2.prototype.byteLength = function byteLength2() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this._strip();
      };
      BN2.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN2.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b.length;
        return this._strip();
      };
      BN2.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN2.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = a.words[i2] ^ b.words[i2];
        }
        if (this !== a) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN2.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN2.prototype.xor = function xor2(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN2.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN2.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r2 = (a.words[i2] | 0) + (b.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        return this;
      };
      BN2.prototype.add = function add2(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp2 = this.cmp(num);
        if (cmp2 === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp2 > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r2 = (a.words[i2] | 0) - (b.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a.length && a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN2.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len2 = self2.length + num.length | 0;
        out.length = len2;
        len2 = len2 - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len2; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j | 0;
            a = self2.words[i2] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j;
            var a = self2.words[i2] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN2.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len2 = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len2 < 63) {
          res = smallMulTo(this, num, out);
        } else if (len2 < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      BN2.prototype.mul = function mul(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN2.prototype.mulf = function mulf(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN2.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN2.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w = (this.words[i2] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow3(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN2(1);
        var res = this;
        for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
          if (w[i2] !== 0) break;
        }
        if (++i2 < w.length) {
          for (var q = res.sqr(); i2 < w.length; i2++, q = q.sqr()) {
            if (w[i2] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this._strip();
      };
      BN2.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s2;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) ;
        else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask2;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN2.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN2.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN2.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN2.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN2.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2) return false;
        var w = this.words[s2];
        return !!(w & q);
      };
      BN2.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask2;
        }
        return this._strip();
      };
      BN2.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN2.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN2.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN2.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN2.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs2() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len2 = num.length + shift;
        var i2;
        this._expand(len2);
        var w;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i2 + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w = -(this.words[i2] | 0) + carry;
          carry = w >> 26;
          this.words[i2] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN2(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i2 = 0; i2 < q.length; i2++) {
            q.words[i2] = 0;
          }
        }
        var diff2 = a.clone()._ishlnsubmul(b, 1, m);
        if (diff2.negative === 0) {
          a = diff2;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN2.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN2(0),
            mod: new BN2(0)
          };
        }
        var div, mod2, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num);
            }
          }
          return {
            div,
            mod: mod2
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN2(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN2(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN2(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN2.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN2.prototype.mod = function mod2(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp2 = mod2.cmp(half);
        if (cmp2 < 0 || r2 === 1 && cmp2 === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p * acc + (this.words[i2] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN2.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN2.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN2.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN2(1);
        var B = new BN2(0);
        var C = new BN2(0);
        var D = new BN2(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i2 = 0, im = 1; (x.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            x.iushrn(i2);
            while (i2-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN2.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            a.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t2 = a;
            a = b;
            b = t2;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd2() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q;
          return this;
        }
        var carry = q;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w = this.words[i2] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i2] = w;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp2(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a = this.words[i2] | 0;
          var b = num.words[i2] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN2.prototype.gt = function gt2(num) {
        return this.cmp(num) === 1;
      };
      BN2.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN2.prototype.gte = function gte2(num) {
        return this.cmp(num) >= 0;
      };
      BN2.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN2.prototype.lt = function lt2(num) {
        return this.cmp(num) === -1;
      };
      BN2.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN2.prototype.lte = function lte2(num) {
        return this.cmp(num) <= 0;
      };
      BN2.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN2.prototype.eq = function eq2(num) {
        return this.cmp(num) === 0;
      };
      BN2.red = function red(num) {
        return new Red(num);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN2.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN2.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN2.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN2.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN2.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN2.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN2(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp2 = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp2 === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp2 > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split2(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits2(K256, MPrime);
      K256.prototype.split = function split2(input, output2) {
        var mask2 = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output2.words[i2] = input.words[i2];
        }
        output2.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output2.words[output2.length++] = prev & mask2;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask2) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w = num.words[i2] | 0;
          lo += w * 977;
          num.words[i2] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits2(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits2(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits2(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN2._prime = function prime(name2) {
        if (primes[name2]) return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN2._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add2(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow3 = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow3);
        }
        var q = this.m.subn(1);
        var s2 = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s2++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN2(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t2 = this.pow(a, q);
        var m = s2;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert2(i2 < m);
          var b = this.pow(c, new BN2(1).iushln(m - i2 - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t2 = t2.redMul(c);
          m = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow3(a, num) {
        if (num.isZero()) return new BN2(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont2(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits2(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t2 = a.imul(b);
        var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t2.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
        var t2 = a.mul(b);
        var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t2.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
  })(bn$3);
  var bnExports = bn$3.exports;
  const BN = /* @__PURE__ */ getDefaultExportFromCjs$1(bnExports);
  var hash$3 = {};
  var utils$o = {};
  var minimalisticAssert$1 = assert$b;
  function assert$b(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert$b.equal = function assertEqual(l, r2, msg) {
    if (l != r2)
      throw new Error(msg || "Assertion failed: " + l + " != " + r2);
  };
  var inherits_browser$1 = { exports: {} };
  var hasRequiredInherits_browser;
  function requireInherits_browser() {
    if (hasRequiredInherits_browser) return inherits_browser$1.exports;
    hasRequiredInherits_browser = 1;
    if (typeof Object.create === "function") {
      inherits_browser$1.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      inherits_browser$1.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    return inherits_browser$1.exports;
  }
  var assert$a = minimalisticAssert$1;
  var inherits$1 = requireInherits_browser();
  utils$o.inherits = inherits$1;
  function isSurrogatePair(msg, i2) {
    if ((msg.charCodeAt(i2) & 64512) !== 55296) {
      return false;
    }
    if (i2 < 0 || i2 + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i2 + 1) & 64512) === 56320;
  }
  function toArray$1(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === "string") {
      if (!enc) {
        var p = 0;
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c = msg.charCodeAt(i2);
          if (c < 128) {
            res[p++] = c;
          } else if (c < 2048) {
            res[p++] = c >> 6 | 192;
            res[p++] = c & 63 | 128;
          } else if (isSurrogatePair(msg, i2)) {
            c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i2) & 1023);
            res[p++] = c >> 18 | 240;
            res[p++] = c >> 12 & 63 | 128;
            res[p++] = c >> 6 & 63 | 128;
            res[p++] = c & 63 | 128;
          } else {
            res[p++] = c >> 12 | 224;
            res[p++] = c >> 6 & 63 | 128;
            res[p++] = c & 63 | 128;
          }
        }
      } else if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      }
    } else {
      for (i2 = 0; i2 < msg.length; i2++)
        res[i2] = msg[i2] | 0;
    }
    return res;
  }
  utils$o.toArray = toArray$1;
  function toHex(msg) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++)
      res += zero2(msg[i2].toString(16));
    return res;
  }
  utils$o.toHex = toHex;
  function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
  }
  utils$o.htonl = htonl;
  function toHex32(msg, endian) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++) {
      var w = msg[i2];
      if (endian === "little")
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  utils$o.toHex32 = toHex32;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  utils$o.zero2 = zero2;
  function zero8(word) {
    if (word.length === 7)
      return "0" + word;
    else if (word.length === 6)
      return "00" + word;
    else if (word.length === 5)
      return "000" + word;
    else if (word.length === 4)
      return "0000" + word;
    else if (word.length === 3)
      return "00000" + word;
    else if (word.length === 2)
      return "000000" + word;
    else if (word.length === 1)
      return "0000000" + word;
    else
      return word;
  }
  utils$o.zero8 = zero8;
  function join32(msg, start, end, endian) {
    var len2 = end - start;
    assert$a(len2 % 4 === 0);
    var res = new Array(len2 / 4);
    for (var i2 = 0, k = start; i2 < res.length; i2++, k += 4) {
      var w;
      if (endian === "big")
        w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
      else
        w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
      res[i2] = w >>> 0;
    }
    return res;
  }
  utils$o.join32 = join32;
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i2 = 0, k = 0; i2 < msg.length; i2++, k += 4) {
      var m = msg[i2];
      if (endian === "big") {
        res[k] = m >>> 24;
        res[k + 1] = m >>> 16 & 255;
        res[k + 2] = m >>> 8 & 255;
        res[k + 3] = m & 255;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = m >>> 16 & 255;
        res[k + 1] = m >>> 8 & 255;
        res[k] = m & 255;
      }
    }
    return res;
  }
  utils$o.split32 = split32;
  function rotr32$1(w, b) {
    return w >>> b | w << 32 - b;
  }
  utils$o.rotr32 = rotr32$1;
  function rotl32$2(w, b) {
    return w << b | w >>> 32 - b;
  }
  utils$o.rotl32 = rotl32$2;
  function sum32$3(a, b) {
    return a + b >>> 0;
  }
  utils$o.sum32 = sum32$3;
  function sum32_3$1(a, b, c) {
    return a + b + c >>> 0;
  }
  utils$o.sum32_3 = sum32_3$1;
  function sum32_4$2(a, b, c, d) {
    return a + b + c + d >>> 0;
  }
  utils$o.sum32_4 = sum32_4$2;
  function sum32_5$2(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
  }
  utils$o.sum32_5 = sum32_5$2;
  function sum64$1(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  utils$o.sum64 = sum64$1;
  function sum64_hi$1(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  utils$o.sum64_hi = sum64_hi$1;
  function sum64_lo$1(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  utils$o.sum64_lo = sum64_lo$1;
  function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh2, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh2 + carry;
    return hi >>> 0;
  }
  utils$o.sum64_4_hi = sum64_4_hi$1;
  function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh2, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  utils$o.sum64_4_lo = sum64_4_lo$1;
  function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh2, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh2 + eh + carry;
    return hi >>> 0;
  }
  utils$o.sum64_5_hi = sum64_5_hi$1;
  function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh2, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }
  utils$o.sum64_5_lo = sum64_5_lo$1;
  function rotr64_hi$1(ah, al, num) {
    var r2 = al << 32 - num | ah >>> num;
    return r2 >>> 0;
  }
  utils$o.rotr64_hi = rotr64_hi$1;
  function rotr64_lo$1(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  utils$o.rotr64_lo = rotr64_lo$1;
  function shr64_hi$1(ah, al, num) {
    return ah >>> num;
  }
  utils$o.shr64_hi = shr64_hi$1;
  function shr64_lo$1(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  utils$o.shr64_lo = shr64_lo$1;
  var common$7 = {};
  var utils$n = utils$o;
  var assert$9 = minimalisticAssert$1;
  function BlockHash$4() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  common$7.BlockHash = BlockHash$4;
  BlockHash$4.prototype.update = function update(msg, enc) {
    msg = utils$n.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r2 = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r2, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils$n.join32(msg, 0, msg.length - r2, this.endian);
      for (var i2 = 0; i2 < msg.length; i2 += this._delta32)
        this._update(msg, i2, i2 + this._delta32);
    }
    return this;
  };
  BlockHash$4.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert$9(this.pending === null);
    return this._digest(enc);
  };
  BlockHash$4.prototype._pad = function pad() {
    var len2 = this.pendingTotal;
    var bytes2 = this._delta8;
    var k = bytes2 - (len2 + this.padLength) % bytes2;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for (var i2 = 1; i2 < k; i2++)
      res[i2] = 0;
    len2 <<= 3;
    if (this.endian === "big") {
      for (var t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = len2 >>> 24 & 255;
      res[i2++] = len2 >>> 16 & 255;
      res[i2++] = len2 >>> 8 & 255;
      res[i2++] = len2 & 255;
    } else {
      res[i2++] = len2 & 255;
      res[i2++] = len2 >>> 8 & 255;
      res[i2++] = len2 >>> 16 & 255;
      res[i2++] = len2 >>> 24 & 255;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      for (t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
    }
    return res;
  };
  var sha$1 = {};
  var common$6 = {};
  var utils$m = utils$o;
  var rotr32 = utils$m.rotr32;
  function ft_1$1(s2, x, y, z) {
    if (s2 === 0)
      return ch32$1(x, y, z);
    if (s2 === 1 || s2 === 3)
      return p32(x, y, z);
    if (s2 === 2)
      return maj32$1(x, y, z);
  }
  common$6.ft_1 = ft_1$1;
  function ch32$1(x, y, z) {
    return x & y ^ ~x & z;
  }
  common$6.ch32 = ch32$1;
  function maj32$1(x, y, z) {
    return x & y ^ x & z ^ y & z;
  }
  common$6.maj32 = maj32$1;
  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  common$6.p32 = p32;
  function s0_256$1(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }
  common$6.s0_256 = s0_256$1;
  function s1_256$1(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }
  common$6.s1_256 = s1_256$1;
  function g0_256$1(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
  }
  common$6.g0_256 = g0_256$1;
  function g1_256$1(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
  }
  common$6.g1_256 = g1_256$1;
  var utils$l = utils$o;
  var common$5 = common$7;
  var shaCommon$1 = common$6;
  var rotl32$1 = utils$l.rotl32;
  var sum32$2 = utils$l.sum32;
  var sum32_5$1 = utils$l.sum32_5;
  var ft_1 = shaCommon$1.ft_1;
  var BlockHash$3 = common$5.BlockHash;
  var sha1_K = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
  ];
  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();
    BlockHash$3.call(this);
    this.h = [
      1732584193,
      4023233417,
      2562383102,
      271733878,
      3285377520
    ];
    this.W = new Array(80);
  }
  utils$l.inherits(SHA1, BlockHash$3);
  var _1 = SHA1;
  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;
  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W[i2] = msg[start + i2];
    for (; i2 < W.length; i2++)
      W[i2] = rotl32$1(W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for (i2 = 0; i2 < W.length; i2++) {
      var s2 = ~~(i2 / 20);
      var t2 = sum32_5$1(rotl32$1(a, 5), ft_1(s2, b, c, d), e, W[i2], sha1_K[s2]);
      e = d;
      d = c;
      c = rotl32$1(b, 30);
      b = a;
      a = t2;
    }
    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
  };
  SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$l.toHex32(this.h, "big");
    else
      return utils$l.split32(this.h, "big");
  };
  var utils$k = utils$o;
  var common$4 = common$7;
  var shaCommon = common$6;
  var assert$8 = minimalisticAssert$1;
  var sum32$1 = utils$k.sum32;
  var sum32_4$1 = utils$k.sum32_4;
  var sum32_5 = utils$k.sum32_5;
  var ch32 = shaCommon.ch32;
  var maj32 = shaCommon.maj32;
  var s0_256 = shaCommon.s0_256;
  var s1_256 = shaCommon.s1_256;
  var g0_256 = shaCommon.g0_256;
  var g1_256 = shaCommon.g1_256;
  var BlockHash$2 = common$4.BlockHash;
  var sha256_K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ];
  function SHA256$2() {
    if (!(this instanceof SHA256$2))
      return new SHA256$2();
    BlockHash$2.call(this);
    this.h = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils$k.inherits(SHA256$2, BlockHash$2);
  var _256 = SHA256$2;
  SHA256$2.blockSize = 512;
  SHA256$2.outSize = 256;
  SHA256$2.hmacStrength = 192;
  SHA256$2.padLength = 64;
  SHA256$2.prototype._update = function _update(msg, start) {
    var W = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W[i2] = msg[start + i2];
    for (; i2 < W.length; i2++)
      W[i2] = sum32_4$1(g1_256(W[i2 - 2]), W[i2 - 7], g0_256(W[i2 - 15]), W[i2 - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f2 = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert$8(this.k.length === W.length);
    for (i2 = 0; i2 < W.length; i2++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f2, g), this.k[i2], W[i2]);
      var T2 = sum32$1(s0_256(a), maj32(a, b, c));
      h = g;
      g = f2;
      f2 = e;
      e = sum32$1(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$1(T1, T2);
    }
    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
    this.h[5] = sum32$1(this.h[5], f2);
    this.h[6] = sum32$1(this.h[6], g);
    this.h[7] = sum32$1(this.h[7], h);
  };
  SHA256$2.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$k.toHex32(this.h, "big");
    else
      return utils$k.split32(this.h, "big");
  };
  var utils$j = utils$o;
  var SHA256$1 = _256;
  function SHA224$2() {
    if (!(this instanceof SHA224$2))
      return new SHA224$2();
    SHA256$1.call(this);
    this.h = [
      3238371032,
      914150663,
      812702999,
      4144912697,
      4290775857,
      1750603025,
      1694076839,
      3204075428
    ];
  }
  utils$j.inherits(SHA224$2, SHA256$1);
  var _224 = SHA224$2;
  SHA224$2.blockSize = 512;
  SHA224$2.outSize = 224;
  SHA224$2.hmacStrength = 192;
  SHA224$2.padLength = 64;
  SHA224$2.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$j.toHex32(this.h.slice(0, 7), "big");
    else
      return utils$j.split32(this.h.slice(0, 7), "big");
  };
  var utils$i = utils$o;
  var common$3 = common$7;
  var assert$7 = minimalisticAssert$1;
  var rotr64_hi = utils$i.rotr64_hi;
  var rotr64_lo = utils$i.rotr64_lo;
  var shr64_hi = utils$i.shr64_hi;
  var shr64_lo = utils$i.shr64_lo;
  var sum64 = utils$i.sum64;
  var sum64_hi = utils$i.sum64_hi;
  var sum64_lo = utils$i.sum64_lo;
  var sum64_4_hi = utils$i.sum64_4_hi;
  var sum64_4_lo = utils$i.sum64_4_lo;
  var sum64_5_hi = utils$i.sum64_5_hi;
  var sum64_5_lo = utils$i.sum64_5_lo;
  var BlockHash$1 = common$3.BlockHash;
  var sha512_K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
  ];
  function SHA512$1() {
    if (!(this instanceof SHA512$1))
      return new SHA512$1();
    BlockHash$1.call(this);
    this.h = [
      1779033703,
      4089235720,
      3144134277,
      2227873595,
      1013904242,
      4271175723,
      2773480762,
      1595750129,
      1359893119,
      2917565137,
      2600822924,
      725511199,
      528734635,
      4215389547,
      1541459225,
      327033209
    ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils$i.inherits(SHA512$1, BlockHash$1);
  var _512 = SHA512$1;
  SHA512$1.blockSize = 1024;
  SHA512$1.outSize = 512;
  SHA512$1.hmacStrength = 192;
  SHA512$1.padLength = 128;
  SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    for (var i2 = 0; i2 < 32; i2++)
      W[i2] = msg[start + i2];
    for (; i2 < W.length; i2 += 2) {
      var c0_hi = g1_512_hi(W[i2 - 4], W[i2 - 3]);
      var c0_lo = g1_512_lo(W[i2 - 4], W[i2 - 3]);
      var c1_hi = W[i2 - 14];
      var c1_lo = W[i2 - 13];
      var c2_hi = g0_512_hi(W[i2 - 30], W[i2 - 29]);
      var c2_lo = g0_512_lo(W[i2 - 30], W[i2 - 29]);
      var c3_hi = W[i2 - 32];
      var c3_lo = W[i2 - 31];
      W[i2] = sum64_4_hi(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo
      );
      W[i2 + 1] = sum64_4_lo(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo
      );
    }
  };
  SHA512$1.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh2 = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert$7(this.k.length === W.length);
    for (var i2 = 0; i2 < W.length; i2 += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i2];
      var c3_lo = this.k[i2 + 1];
      var c4_hi = W[i2];
      var c4_lo = W[i2 + 1];
      var T1_hi = sum64_5_hi(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo,
        c4_hi,
        c4_lo
      );
      var T1_lo = sum64_5_lo(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo,
        c4_hi,
        c4_lo
      );
      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      eh = sum64_hi(dh2, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);
      dh2 = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh2, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };
  SHA512$1.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$i.toHex32(this.h, "big");
    else
      return utils$i.split32(this.h, "big");
  };
  function ch64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ ~xh & zh;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ ~xl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ xh & zh ^ yh & zh;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ xl & zl ^ yl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);
    var c2_hi = rotr64_hi(xl, xh, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);
    var c2_lo = rotr64_lo(xl, xh, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);
    var c2_hi = shr64_hi(xh, xl, 6);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);
    var c2_lo = shr64_lo(xh, xl, 6);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  var utils$h = utils$o;
  var SHA512 = _512;
  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();
    SHA512.call(this);
    this.h = [
      3418070365,
      3238371032,
      1654270250,
      914150663,
      2438529370,
      812702999,
      355462360,
      4144912697,
      1731405415,
      4290775857,
      2394180231,
      1750603025,
      3675008525,
      1694076839,
      1203062813,
      3204075428
    ];
  }
  utils$h.inherits(SHA384, SHA512);
  var _384 = SHA384;
  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;
  SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$h.toHex32(this.h.slice(0, 12), "big");
    else
      return utils$h.split32(this.h.slice(0, 12), "big");
  };
  sha$1.sha1 = _1;
  sha$1.sha224 = _224;
  sha$1.sha256 = _256;
  sha$1.sha384 = _384;
  sha$1.sha512 = _512;
  var ripemd = {};
  var utils$g = utils$o;
  var common$2 = common$7;
  var rotl32 = utils$g.rotl32;
  var sum32 = utils$g.sum32;
  var sum32_3 = utils$g.sum32_3;
  var sum32_4 = utils$g.sum32_4;
  var BlockHash = common$2.BlockHash;
  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();
    BlockHash.call(this);
    this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    this.endian = "little";
  }
  utils$g.inherits(RIPEMD160, BlockHash);
  ripemd.ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32(
        rotl32(
          sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
          s[j]
        ),
        E
      );
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(
        rotl32(
          sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
          sh[j]
        ),
        Eh
      );
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };
  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$g.toHex32(this.h, "little");
    else
      return utils$g.split32(this.h, "little");
  };
  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return x & y | ~x & z;
    else if (j <= 47)
      return (x | ~y) ^ z;
    else if (j <= 63)
      return x & z | y & ~z;
    else
      return x ^ (y | ~z);
  }
  function K(j) {
    if (j <= 15)
      return 0;
    else if (j <= 31)
      return 1518500249;
    else if (j <= 47)
      return 1859775393;
    else if (j <= 63)
      return 2400959708;
    else
      return 2840853838;
  }
  function Kh(j) {
    if (j <= 15)
      return 1352829926;
    else if (j <= 31)
      return 1548603684;
    else if (j <= 47)
      return 1836072691;
    else if (j <= 63)
      return 2053994217;
    else
      return 0;
  }
  var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
  ];
  var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
  ];
  var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
  ];
  var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
  ];
  var utils$f = utils$o;
  var assert$6 = minimalisticAssert$1;
  function Hmac(hash2, key2, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash2, key2, enc);
    this.Hash = hash2;
    this.blockSize = hash2.blockSize / 8;
    this.outSize = hash2.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils$f.toArray(key2, enc));
  }
  var hmac$1 = Hmac;
  Hmac.prototype._init = function init(key2) {
    if (key2.length > this.blockSize)
      key2 = new this.Hash().update(key2).digest();
    assert$6(key2.length <= this.blockSize);
    for (var i2 = key2.length; i2 < this.blockSize; i2++)
      key2.push(0);
    for (i2 = 0; i2 < key2.length; i2++)
      key2[i2] ^= 54;
    this.inner = new this.Hash().update(key2);
    for (i2 = 0; i2 < key2.length; i2++)
      key2[i2] ^= 106;
    this.outer = new this.Hash().update(key2);
  };
  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
  (function(exports2) {
    var hash2 = exports2;
    hash2.utils = utils$o;
    hash2.common = common$7;
    hash2.sha = sha$1;
    hash2.ripemd = ripemd;
    hash2.hmac = hmac$1;
    hash2.sha1 = hash2.sha.sha1;
    hash2.sha256 = hash2.sha.sha256;
    hash2.sha224 = hash2.sha.sha224;
    hash2.sha384 = hash2.sha.sha384;
    hash2.sha512 = hash2.sha.sha512;
    hash2.ripemd160 = hash2.ripemd.ripemd160;
  })(hash$3);
  const hash$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(hash$3);
  function createCommonjsModule(fn, basedir, module) {
    return module = {
      path: basedir,
      exports: {},
      require: function(path, base2) {
        return commonjsRequire$1(path, base2 === void 0 || base2 === null ? module.path : base2);
      }
    }, fn(module, module.exports), module.exports;
  }
  function commonjsRequire$1() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
  }
  var minimalisticAssert = assert$5;
  function assert$5(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert$5.equal = function assertEqual(l, r2, msg) {
    if (l != r2)
      throw new Error(msg || "Assertion failed: " + l + " != " + r2);
  };
  var utils_1$9 = createCommonjsModule(function(module, exports2) {
    var utils2 = exports2;
    function toArray2(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i2 = 0; i2 < msg.length; i2++)
          res[i2] = msg[i2] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      } else {
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c = msg.charCodeAt(i2);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils2.toArray = toArray2;
    function zero22(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils2.zero2 = zero22;
    function toHex2(msg) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++)
        res += zero22(msg[i2].toString(16));
      return res;
    }
    utils2.toHex = toHex2;
    utils2.encode = function encode2(arr, enc) {
      if (enc === "hex")
        return toHex2(arr);
      else
        return arr;
    };
  });
  var utils_1$1$1 = createCommonjsModule(function(module, exports2) {
    var utils2 = exports2;
    utils2.assert = minimalisticAssert;
    utils2.toArray = utils_1$9.toArray;
    utils2.zero2 = utils_1$9.zero2;
    utils2.toHex = utils_1$9.toHex;
    utils2.encode = utils_1$9.encode;
    function getNAF2(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);
      var ws = 1 << w + 1;
      var k = num.clone();
      for (var i2 = 0; i2 < naf.length; i2++) {
        var z;
        var mod2 = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod2 > (ws >> 1) - 1)
            z = (ws >> 1) - mod2;
          else
            z = mod2;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i2] = z;
        k.iushrn(1);
      }
      return naf;
    }
    utils2.getNAF = getNAF2;
    function getJSF2(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils2.getJSF = getJSF2;
    function cachedProperty(obj, name2, computer) {
      var key2 = "_" + name2;
      obj.prototype[name2] = function cachedProperty2() {
        return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
      };
    }
    utils2.cachedProperty = cachedProperty;
    function parseBytes(bytes2) {
      return typeof bytes2 === "string" ? utils2.toArray(bytes2, "hex") : bytes2;
    }
    utils2.parseBytes = parseBytes;
    function intFromLE(bytes2) {
      return new BN(bytes2, "hex", "le");
    }
    utils2.intFromLE = intFromLE;
  });
  var getNAF = utils_1$1$1.getNAF;
  var getJSF = utils_1$1$1.getJSF;
  var assert$1$1 = utils_1$1$1.assert;
  function BaseCurve(type2, conf) {
    this.type = type2;
    this.p = new BN(conf.p, 16);
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  var base$2 = BaseCurve;
  BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype.validate = function validate2() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$1$1(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    var repr = [];
    var j;
    var nafW;
    for (j = 0; j < naf.length; j += doubles.step) {
      nafW = 0;
      for (var l = j + doubles.step - 1; l >= j; l--)
        nafW = (nafW << 1) + naf[l];
      repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i2 = I; i2 > 0; i2--) {
      for (j = 0; j < repr.length; j++) {
        nafW = repr[j];
        if (nafW === i2)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i2)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k, w, this._bitLength);
    var acc = this.jpoint(null, null, null);
    for (var i2 = naf.length - 1; i2 >= 0; i2--) {
      for (var l = 0; i2 >= 0 && naf[i2] === 0; i2--)
        l++;
      if (i2 >= 0)
        l++;
      acc = acc.dblp(l);
      if (i2 < 0)
        break;
      var z = naf[i2];
      assert$1$1(z !== 0);
      if (p.type === "affine") {
        if (z > 0)
          acc = acc.mixedAdd(wnd[z - 1 >> 1]);
        else
          acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
      } else {
        if (z > 0)
          acc = acc.add(wnd[z - 1 >> 1]);
        else
          acc = acc.add(wnd[-z - 1 >> 1].neg());
      }
    }
    return p.type === "affine" ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len2, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max2 = 0;
    var i2;
    var j;
    var p;
    for (i2 = 0; i2 < len2; i2++) {
      p = points[i2];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i2] = nafPoints.wnd;
      wnd[i2] = nafPoints.points;
    }
    for (i2 = len2 - 1; i2 >= 1; i2 -= 2) {
      var a = i2 - 1;
      var b = i2;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
        naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
        max2 = Math.max(naf[a].length, max2);
        max2 = Math.max(naf[b].length, max2);
        continue;
      }
      var comb = [
        points[a],
        /* 1 */
        null,
        /* 3 */
        null,
        /* 5 */
        points[b]
        /* 7 */
      ];
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }
      var index = [
        -3,
        /* -1 -1 */
        -1,
        /* -1 0 */
        -5,
        /* -1 1 */
        -7,
        /* 0 -1 */
        0,
        /* 0 0 */
        7,
        /* 0 1 */
        5,
        /* 1 -1 */
        1,
        /* 1 0 */
        3
        /* 1 1 */
      ];
      var jsf = getJSF(coeffs[a], coeffs[b]);
      max2 = Math.max(jsf[0].length, max2);
      naf[a] = new Array(max2);
      naf[b] = new Array(max2);
      for (j = 0; j < max2; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;
        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i2 = max2; i2 >= 0; i2--) {
      var k = 0;
      while (i2 >= 0) {
        var zero = true;
        for (j = 0; j < len2; j++) {
          tmp[j] = naf[j][i2] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i2--;
      }
      if (i2 >= 0)
        k++;
      acc = acc.dblp(k);
      if (i2 < 0)
        break;
      for (j = 0; j < len2; j++) {
        var z = tmp[j];
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][z - 1 >> 1];
        else if (z < 0)
          p = wnd[j][-z - 1 >> 1].neg();
        if (p.type === "affine")
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    for (i2 = 0; i2 < len2; i2++)
      wnd[i2] = null;
    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };
  function BasePoint(curve2, type2) {
    this.curve = curve2;
    this.type = type2;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.eq = function eq2() {
    throw new Error("Not implemented");
  };
  BasePoint.prototype.validate = function validate2() {
    return this.curve.validate(this);
  };
  BaseCurve.prototype.decodePoint = function decodePoint(bytes2, enc) {
    bytes2 = utils_1$1$1.toArray(bytes2, enc);
    var len2 = this.p.byteLength();
    if ((bytes2[0] === 4 || bytes2[0] === 6 || bytes2[0] === 7) && bytes2.length - 1 === 2 * len2) {
      if (bytes2[0] === 6)
        assert$1$1(bytes2[bytes2.length - 1] % 2 === 0);
      else if (bytes2[0] === 7)
        assert$1$1(bytes2[bytes2.length - 1] % 2 === 1);
      var res = this.point(
        bytes2.slice(1, 1 + len2),
        bytes2.slice(1 + len2, 1 + 2 * len2)
      );
      return res;
    } else if ((bytes2[0] === 2 || bytes2[0] === 3) && bytes2.length - 1 === len2) {
      return this.pointFromX(bytes2.slice(1, 1 + len2), bytes2[0] === 3);
    }
    throw new Error("Unknown point format");
  };
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };
  BasePoint.prototype._encode = function _encode2(compact2) {
    var len2 = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len2);
    if (compact2)
      return [this.getY().isEven() ? 2 : 3].concat(x);
    return [4].concat(x, this.getY().toArray("be", len2));
  };
  BasePoint.prototype.encode = function encode2(enc, compact2) {
    return utils_1$1$1.encode(this._encode(compact2), enc);
  };
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i2 = 0; i2 < power; i2 += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step,
      points: doubles
    };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    var res = [this];
    var max2 = (1 << wnd) - 1;
    var dbl = max2 === 1 ? null : this.dbl();
    for (var i2 = 1; i2 < max2; i2++)
      res[i2] = res[i2 - 1].add(dbl);
    return {
      wnd,
      points: res
    };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  BasePoint.prototype.dblp = function dblp(k) {
    var r2 = this;
    for (var i2 = 0; i2 < k; i2++)
      r2 = r2.dbl();
    return r2;
  };
  var inherits_browser = createCommonjsModule(function(module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  });
  var assert$2$1 = utils_1$1$1.assert;
  function ShortCurve(conf) {
    base$2.call(this, "short", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits_browser(ShortCurve, base$2);
  var short_1 = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new BN(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new BN(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert$2$1(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new BN(vec.a, 16),
          b: new BN(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
    return {
      beta,
      lambda,
      basis
    };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s2 = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s2).fromRed();
    var l2 = ntinv.redSub(s2).fromRed();
    return [l1, l2];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a2;
    var b2;
    var prevR;
    var i2 = 0;
    var r2;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r2 = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));
      if (!a1 && r2.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r2.neg();
        b1 = x;
      } else if (a1 && ++i2 === 2) {
        break;
      }
      prevR = r2;
      v = u;
      u = r2;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r2.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }
    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 }
    ];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1, k2 };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red)
      x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd2 = y.fromRed().isOdd();
    if (odd && !isOdd2 || !odd && isOdd2)
      y = y.redNeg();
    return this.point(x, y);
  };
  ShortCurve.prototype.validate = function validate2(point) {
    if (point.inf)
      return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i2 = 0; i2 < points.length; i2++) {
      var split2 = this._endoSplit(coeffs[i2]);
      var p = points[i2];
      var beta = p._getBeta();
      if (split2.k1.negative) {
        split2.k1.ineg();
        p = p.neg(true);
      }
      if (split2.k2.negative) {
        split2.k2.ineg();
        beta = beta.neg(true);
      }
      npoints[i2 * 2] = p;
      npoints[i2 * 2 + 1] = beta;
      ncoeffs[i2 * 2] = split2.k1;
      ncoeffs[i2 * 2 + 1] = split2.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i2 * 2, jacobianResult);
    for (var j = 0; j < i2 * 2; j++) {
      npoints[j] = null;
      ncoeffs[j] = null;
    }
    return res;
  };
  function Point(curve2, x, y, isRed) {
    base$2.BasePoint.call(this, curve2, "affine");
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits_browser(Point, base$2.BasePoint);
  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };
  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve2 = this.curve;
      var endoMul = function(p) {
        return curve2.point(p.x.redMul(curve2.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };
  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [this.x, this.y];
    return [this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    }];
  };
  Point.fromJSON = function fromJSON(curve2, obj, red) {
    if (typeof obj === "string")
      obj = JSON.parse(obj);
    var res = curve2.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
    function obj2point(obj2) {
      return curve2.point(obj2[0], obj2[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [res].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [res].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };
  Point.prototype.inspect = function inspect2() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  Point.prototype.add = function add2(p) {
    if (this.inf)
      return p;
    if (p.inf)
      return this;
    if (this.eq(p))
      return this.dbl();
    if (this.neg().eq(p))
      return this.curve.point(null, null);
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([this], [k]);
    else
      return this.curve._wnafMul(this, k);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  Point.prototype.eq = function eq2(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };
  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };
  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  function JPoint(curve2, x, y, z) {
    base$2.BasePoint.call(this, curve2, "jacobian");
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN(0);
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);
      this.z = new BN(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  inherits_browser(JPoint, base$2.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add2(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    if (this.isInfinity())
      return p.toJ();
    if (p.isInfinity())
      return this;
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp(pow3) {
    if (pow3 === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow3)
      return this.dbl();
    var i2;
    if (this.curve.zeroA || this.curve.threeA) {
      var r2 = this;
      for (i2 = 0; i2 < pow3; i2++)
        r2 = r2.dbl();
      return r2;
    }
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for (i2 = 0; i2 < pow3; i2++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i2 + 1 < pow3)
        jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m = xx.redAdd(xx).redIAdd(xx);
      var t2 = m.redSqr().redISub(s2).redISub(s2);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t2;
      ny = m.redMul(s2.redISub(t2)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = b.redSqr();
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      var e = a.redAdd(a).redIAdd(a);
      var f2 = e.redSqr();
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);
      nx = f2.redISub(d).redISub(d);
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t2 = m.redSqr().redISub(s2).redISub(s2);
      nx = t2;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s2.redISub(t2)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m = xx.redAdd(xx).redIAdd(xx);
    var mm = m.redSqr();
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    var ee = e.redSqr();
    var t2 = yyyy.redIAdd(yyyy);
    t2 = t2.redIAdd(t2);
    t2 = t2.redIAdd(t2);
    t2 = t2.redIAdd(t2);
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t2);
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u.redMul(t2.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
  };
  JPoint.prototype.eq = function eq2(p) {
    if (p.type === "affine")
      return this.eq(p.toJ());
    if (this === p)
      return true;
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };
  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x.clone();
    var t2 = this.curve.redN.redMul(zs);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t2);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  JPoint.prototype.inspect = function inspect2() {
    if (this.isInfinity())
      return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
  };
  JPoint.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  var curve_1 = createCommonjsModule(function(module, exports2) {
    var curve2 = exports2;
    curve2.base = base$2;
    curve2.short = short_1;
    curve2.mont = /*RicMoo:ethers:require(./mont)*/
    null;
    curve2.edwards = /*RicMoo:ethers:require(./edwards)*/
    null;
  });
  var curves_1 = createCommonjsModule(function(module, exports2) {
    var curves2 = exports2;
    var assert2 = utils_1$1$1.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve_1.short(options);
      else if (options.type === "edwards")
        this.curve = new curve_1.edwards(options);
      else
        this.curve = new curve_1.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert2(this.g.validate(), "Invalid curve");
      assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves2.PresetCurve = PresetCurve;
    function defineCurve(name2, options) {
      Object.defineProperty(curves2, name2, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves2, name2, {
            configurable: true,
            enumerable: true,
            value: curve2
          });
          return curve2;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash$2.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash$2.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash$2.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash$2.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash$2.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash$2.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash$2.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/
      null.crash();
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash$2.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  });
  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils_1$9.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils_1$9.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils_1$9.toArray(options.pers, options.persEnc || "hex");
    minimalisticAssert(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._init(entropy, nonce, pers);
  }
  var hmacDrbg$1 = HmacDRBG;
  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i2 = 0; i2 < this.V.length; i2++) {
      this.K[i2] = 0;
      this.V[i2] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656;
  };
  HmacDRBG.prototype._hmac = function hmac2() {
    return new hash$2.hmac(this.hash, this.K);
  };
  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([0]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
    this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add2, addEnc) {
    if (typeof entropyEnc !== "string") {
      addEnc = add2;
      add2 = entropyEnc;
      entropyEnc = null;
    }
    entropy = utils_1$9.toArray(entropy, entropyEnc);
    add2 = utils_1$9.toArray(add2, addEnc);
    minimalisticAssert(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._update(entropy.concat(add2 || []));
    this._reseed = 1;
  };
  HmacDRBG.prototype.generate = function generate(len2, enc, add2, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error("Reseed is required");
    if (typeof enc !== "string") {
      addEnc = add2;
      add2 = enc;
      enc = null;
    }
    if (add2) {
      add2 = utils_1$9.toArray(add2, addEnc || "hex");
      this._update(add2);
    }
    var temp = [];
    while (temp.length < len2) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len2);
    this._update(add2);
    this._reseed++;
    return utils_1$9.encode(res, enc);
  };
  var assert$3$1 = utils_1$1$1.assert;
  function KeyPair(ec2, options) {
    this.ec = ec2;
    this.priv = null;
    this.pub = null;
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  var key$2 = KeyPair;
  KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(ec2, {
      pub,
      pubEnc: enc
    });
  };
  KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;
    return new KeyPair(ec2, {
      priv,
      privEnc: enc
    });
  };
  KeyPair.prototype.validate = function validate2() {
    var pub = this.getPublic();
    if (pub.isInfinity())
      return { result: false, reason: "Invalid public key" };
    if (!pub.validate())
      return { result: false, reason: "Public key is not a point" };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: "Public key * N != O" };
    return { result: true, reason: null };
  };
  KeyPair.prototype.getPublic = function getPublic(compact2, enc) {
    if (typeof compact2 === "string") {
      enc = compact2;
      compact2 = null;
    }
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
    if (!enc)
      return this.pub;
    return this.pub.encode(enc, compact2);
  };
  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex")
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
    this.priv = new BN(key2, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
  };
  KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
    if (key2.x || key2.y) {
      if (this.ec.curve.type === "mont") {
        assert$3$1(key2.x, "Need x coordinate");
      } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
        assert$3$1(key2.x && key2.y, "Need both x and y coordinate");
      }
      this.pub = this.ec.curve.point(key2.x, key2.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key2, enc);
  };
  KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) {
      assert$3$1(pub.validate(), "public point not validated");
    }
    return pub.mul(this.priv).getX();
  };
  KeyPair.prototype.sign = function sign2(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };
  KeyPair.prototype.verify = function verify(msg, signature2) {
    return this.ec.verify(msg, signature2, this);
  };
  KeyPair.prototype.inspect = function inspect2() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
  };
  var assert$4$1 = utils_1$1$1.assert;
  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;
    if (this._importDER(options, enc))
      return;
    assert$4$1(options.r && options.s, "Signature without r or s");
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === void 0)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  var signature$3 = Signature;
  function Position() {
    this.place = 0;
  }
  function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 128)) {
      return initial;
    }
    var octetLen = initial & 15;
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }
    var val = 0;
    for (var i2 = 0, off = p.place; i2 < octetLen; i2++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }
    if (val <= 127) {
      return false;
    }
    p.place = off;
    return val;
  }
  function rmPadding(buf) {
    var i2 = 0;
    var len2 = buf.length - 1;
    while (!buf[i2] && !(buf[i2 + 1] & 128) && i2 < len2) {
      i2++;
    }
    if (i2 === 0) {
      return buf;
    }
    return buf.slice(i2);
  }
  Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils_1$1$1.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 48) {
      return false;
    }
    var len2 = getLength(data, p);
    if (len2 === false) {
      return false;
    }
    if (len2 + p.place !== data.length) {
      return false;
    }
    if (data[p.place++] !== 2) {
      return false;
    }
    var rlen = getLength(data, p);
    if (rlen === false) {
      return false;
    }
    var r2 = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 2) {
      return false;
    }
    var slen = getLength(data, p);
    if (slen === false) {
      return false;
    }
    if (data.length !== slen + p.place) {
      return false;
    }
    var s2 = data.slice(p.place, slen + p.place);
    if (r2[0] === 0) {
      if (r2[1] & 128) {
        r2 = r2.slice(1);
      } else {
        return false;
      }
    }
    if (s2[0] === 0) {
      if (s2[1] & 128) {
        s2 = s2.slice(1);
      } else {
        return false;
      }
    }
    this.r = new BN(r2);
    this.s = new BN(s2);
    this.recoveryParam = null;
    return true;
  };
  function constructLength(arr, len2) {
    if (len2 < 128) {
      arr.push(len2);
      return;
    }
    var octets = 1 + (Math.log(len2) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while (--octets) {
      arr.push(len2 >>> (octets << 3) & 255);
    }
    arr.push(len2);
  }
  Signature.prototype.toDER = function toDER(enc) {
    var r2 = this.r.toArray();
    var s2 = this.s.toArray();
    if (r2[0] & 128)
      r2 = [0].concat(r2);
    if (s2[0] & 128)
      s2 = [0].concat(s2);
    r2 = rmPadding(r2);
    s2 = rmPadding(s2);
    while (!s2[0] && !(s2[1] & 128)) {
      s2 = s2.slice(1);
    }
    var arr = [2];
    constructLength(arr, r2.length);
    arr = arr.concat(r2);
    arr.push(2);
    constructLength(arr, s2.length);
    var backHalf = arr.concat(s2);
    var res = [48];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils_1$1$1.encode(res, enc);
  };
  var rand = (
    /*RicMoo:ethers:require(brorand)*/
    function() {
      throw new Error("unsupported");
    }
  );
  var assert$5$1 = utils_1$1$1.assert;
  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);
    if (typeof options === "string") {
      assert$5$1(
        Object.prototype.hasOwnProperty.call(curves_1, options),
        "Unknown curve " + options
      );
      options = curves_1[options];
    }
    if (options instanceof curves_1.PresetCurve)
      options = { curve: options };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  var ec$1 = EC;
  EC.prototype.keyPair = function keyPair(options) {
    return new key$2(this, options);
  };
  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return key$2.fromPrivate(this, priv, enc);
  };
  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return key$2.fromPublic(this, pub, enc);
  };
  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
    var drbg = new hmacDrbg$1({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || "utf8",
      entropy: options.entropy || rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || "utf8",
      nonce: this.n.toArray()
    });
    var bytes2 = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for (; ; ) {
      var priv = new BN(drbg.generate(bytes2));
      if (priv.cmp(ns2) > 0)
        continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };
  EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  EC.prototype.sign = function sign2(msg, key2, enc, options) {
    if (typeof enc === "object") {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
    key2 = this.keyFromPrivate(key2, enc);
    msg = this._truncateToN(new BN(msg, 16));
    var bytes2 = this.n.byteLength();
    var bkey = key2.getPrivate().toArray("be", bytes2);
    var nonce = msg.toArray("be", bytes2);
    var drbg = new hmacDrbg$1({
      hash: this.hash,
      entropy: bkey,
      nonce,
      pers: options.pers,
      persEnc: options.persEnc || "utf8"
    });
    var ns1 = this.n.sub(new BN(1));
    for (var iter = 0; ; iter++) {
      var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;
      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;
      var kpX = kp.getX();
      var r2 = kpX.umod(this.n);
      if (r2.cmpn(0) === 0)
        continue;
      var s2 = k.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));
      s2 = s2.umod(this.n);
      if (s2.cmpn(0) === 0)
        continue;
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
      if (options.canonical && s2.cmp(this.nh) > 0) {
        s2 = this.n.sub(s2);
        recoveryParam ^= 1;
      }
      return new signature$3({ r: r2, s: s2, recoveryParam });
    }
  };
  EC.prototype.verify = function verify(msg, signature$12, key2, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key2 = this.keyFromPublic(key2, enc);
    signature$12 = new signature$3(signature$12, "hex");
    var r2 = signature$12.r;
    var s2 = signature$12.s;
    if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
      return false;
    if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
      return false;
    var sinv = s2.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r2).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
      p = this.g.mulAdd(u1, key2.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.getX().umod(this.n).cmp(r2) === 0;
    }
    p = this.g.jmulAdd(u1, key2.getPublic(), u2);
    if (p.isInfinity())
      return false;
    return p.eqXToP(r2);
  };
  EC.prototype.recoverPubKey = function(msg, signature$12, j, enc) {
    assert$5$1((3 & j) === j, "The recovery param is more than two bits");
    signature$12 = new signature$3(signature$12, enc);
    var n = this.n;
    var e = new BN(msg);
    var r2 = signature$12.r;
    var s2 = signature$12.s;
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error("Unable to find sencond key candinate");
    if (isSecondKey)
      r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
    else
      r2 = this.curve.pointFromX(r2, isYOdd);
    var rInv = signature$12.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s22 = s2.mul(rInv).umod(n);
    return this.g.mulAdd(s1, r2, s22);
  };
  EC.prototype.getKeyRecoveryParam = function(e, signature$12, Q, enc) {
    signature$12 = new signature$3(signature$12, enc);
    if (signature$12.recoveryParam !== null)
      return signature$12.recoveryParam;
    for (var i2 = 0; i2 < 4; i2++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature$12, i2);
      } catch (e2) {
        continue;
      }
      if (Qprime.eq(Q))
        return i2;
    }
    throw new Error("Unable to find valid recovery factor");
  };
  var elliptic_1 = createCommonjsModule(function(module, exports2) {
    var elliptic2 = exports2;
    elliptic2.version = /*RicMoo:ethers*/
    { version: "6.5.4" }.version;
    elliptic2.utils = utils_1$1$1;
    elliptic2.rand = /*RicMoo:ethers:require(brorand)*/
    function() {
      throw new Error("unsupported");
    };
    elliptic2.curve = curve_1;
    elliptic2.curves = curves_1;
    elliptic2.ec = ec$1;
    elliptic2.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/
    null;
  });
  var EC$1 = elliptic_1.ec;
  const version$4 = "signing-key/5.7.0";
  const logger$7 = new Logger(version$4);
  let _curve = null;
  function getCurve() {
    if (!_curve) {
      _curve = new EC$1("secp256k1");
    }
    return _curve;
  }
  class SigningKey {
    constructor(privateKey) {
      defineReadOnly(this, "curve", "secp256k1");
      defineReadOnly(this, "privateKey", hexlify(privateKey));
      if (hexDataLength(this.privateKey) !== 32) {
        logger$7.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
      }
      const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
      defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
      defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
      defineReadOnly(this, "_isSigningKey", true);
    }
    _addPoint(other) {
      const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
      const p1 = getCurve().keyFromPublic(arrayify(other));
      return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
    }
    signDigest(digest) {
      const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
      const digestBytes = arrayify(digest);
      if (digestBytes.length !== 32) {
        logger$7.throwArgumentError("bad digest length", "digest", digest);
      }
      const signature2 = keyPair.sign(digestBytes, { canonical: true });
      return splitSignature({
        recoveryParam: signature2.recoveryParam,
        r: hexZeroPad("0x" + signature2.r.toString(16), 32),
        s: hexZeroPad("0x" + signature2.s.toString(16), 32)
      });
    }
    computeSharedSecret(otherKey) {
      const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
      const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
      return hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
    }
    static isSigningKey(value) {
      return !!(value && value._isSigningKey);
    }
  }
  function recoverPublicKey$1(digest, signature2) {
    const sig = splitSignature(signature2);
    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
    return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
  }
  function computePublicKey(key2, compressed) {
    const bytes2 = arrayify(key2);
    if (bytes2.length === 32) {
      const signingKey = new SigningKey(bytes2);
      return signingKey.publicKey;
    } else if (bytes2.length === 33) {
      return "0x" + getCurve().keyFromPublic(bytes2).getPublic(false, "hex");
    } else if (bytes2.length === 65) {
      {
        return hexlify(bytes2);
      }
    }
    return logger$7.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
  }
  const version$3 = "transactions/5.7.0";
  const logger$6 = new Logger(version$3);
  var TransactionTypes;
  (function(TransactionTypes2) {
    TransactionTypes2[TransactionTypes2["legacy"] = 0] = "legacy";
    TransactionTypes2[TransactionTypes2["eip2930"] = 1] = "eip2930";
    TransactionTypes2[TransactionTypes2["eip1559"] = 2] = "eip1559";
  })(TransactionTypes || (TransactionTypes = {}));
  function handleAddress(value) {
    if (value === "0x") {
      return null;
    }
    return getAddress(value);
  }
  function handleNumber(value) {
    if (value === "0x") {
      return Zero;
    }
    return BigNumber.from(value);
  }
  function computeAddress(key2) {
    const publicKey = computePublicKey(key2);
    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
  }
  function recoverAddress(digest, signature2) {
    return computeAddress(recoverPublicKey$1(arrayify(digest), signature2));
  }
  function formatNumber(value, name2) {
    const result = stripZeros(BigNumber.from(value).toHexString());
    if (result.length > 32) {
      logger$6.throwArgumentError("invalid length for " + name2, "transaction:" + name2, value);
    }
    return result;
  }
  function accessSetify(addr, storageKeys) {
    return {
      address: getAddress(addr),
      storageKeys: (storageKeys || []).map((storageKey, index) => {
        if (hexDataLength(storageKey) !== 32) {
          logger$6.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
        }
        return storageKey.toLowerCase();
      })
    };
  }
  function accessListify(value) {
    if (Array.isArray(value)) {
      return value.map((set2, index) => {
        if (Array.isArray(set2)) {
          if (set2.length > 2) {
            logger$6.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set2);
          }
          return accessSetify(set2[0], set2[1]);
        }
        return accessSetify(set2.address, set2.storageKeys);
      });
    }
    const result = Object.keys(value).map((addr) => {
      const storageKeys = value[addr].reduce((accum, storageKey) => {
        accum[storageKey] = true;
        return accum;
      }, {});
      return accessSetify(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a, b) => a.address.localeCompare(b.address));
    return result;
  }
  function formatAccessList(value) {
    return accessListify(value).map((set2) => [set2.address, set2.storageKeys]);
  }
  function _serializeEip1559(transaction, signature2) {
    if (transaction.gasPrice != null) {
      const gasPrice = BigNumber.from(transaction.gasPrice);
      const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
      if (!gasPrice.eq(maxFeePerGas)) {
        logger$6.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
          gasPrice,
          maxFeePerGas
        });
      }
    }
    const fields = [
      formatNumber(transaction.chainId || 0, "chainId"),
      formatNumber(transaction.nonce || 0, "nonce"),
      formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
      formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
      formatNumber(transaction.gasLimit || 0, "gasLimit"),
      transaction.to != null ? getAddress(transaction.to) : "0x",
      formatNumber(transaction.value || 0, "value"),
      transaction.data || "0x",
      formatAccessList(transaction.accessList || [])
    ];
    if (signature2) {
      const sig = splitSignature(signature2);
      fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
      fields.push(stripZeros(sig.r));
      fields.push(stripZeros(sig.s));
    }
    return hexConcat(["0x02", encode$4(fields)]);
  }
  function _serializeEip2930(transaction, signature2) {
    const fields = [
      formatNumber(transaction.chainId || 0, "chainId"),
      formatNumber(transaction.nonce || 0, "nonce"),
      formatNumber(transaction.gasPrice || 0, "gasPrice"),
      formatNumber(transaction.gasLimit || 0, "gasLimit"),
      transaction.to != null ? getAddress(transaction.to) : "0x",
      formatNumber(transaction.value || 0, "value"),
      transaction.data || "0x",
      formatAccessList(transaction.accessList || [])
    ];
    if (signature2) {
      const sig = splitSignature(signature2);
      fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
      fields.push(stripZeros(sig.r));
      fields.push(stripZeros(sig.s));
    }
    return hexConcat(["0x01", encode$4(fields)]);
  }
  function _parseEipSignature(tx, fields, serialize) {
    try {
      const recid = handleNumber(fields[0]).toNumber();
      if (recid !== 0 && recid !== 1) {
        throw new Error("bad recid");
      }
      tx.v = recid;
    } catch (error2) {
      logger$6.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
    }
    tx.r = hexZeroPad(fields[1], 32);
    tx.s = hexZeroPad(fields[2], 32);
    try {
      const digest = keccak256(serialize(tx));
      tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
    } catch (error2) {
    }
  }
  function _parseEip1559(payload) {
    const transaction = decode$2(payload.slice(1));
    if (transaction.length !== 9 && transaction.length !== 12) {
      logger$6.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
    }
    const maxPriorityFeePerGas = handleNumber(transaction[2]);
    const maxFeePerGas = handleNumber(transaction[3]);
    const tx = {
      type: 2,
      chainId: handleNumber(transaction[0]).toNumber(),
      nonce: handleNumber(transaction[1]).toNumber(),
      maxPriorityFeePerGas,
      maxFeePerGas,
      gasPrice: null,
      gasLimit: handleNumber(transaction[4]),
      to: handleAddress(transaction[5]),
      value: handleNumber(transaction[6]),
      data: transaction[7],
      accessList: accessListify(transaction[8])
    };
    if (transaction.length === 9) {
      return tx;
    }
    tx.hash = keccak256(payload);
    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
    return tx;
  }
  function _parseEip2930(payload) {
    const transaction = decode$2(payload.slice(1));
    if (transaction.length !== 8 && transaction.length !== 11) {
      logger$6.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
    }
    const tx = {
      type: 1,
      chainId: handleNumber(transaction[0]).toNumber(),
      nonce: handleNumber(transaction[1]).toNumber(),
      gasPrice: handleNumber(transaction[2]),
      gasLimit: handleNumber(transaction[3]),
      to: handleAddress(transaction[4]),
      value: handleNumber(transaction[5]),
      data: transaction[6],
      accessList: accessListify(transaction[7])
    };
    if (transaction.length === 8) {
      return tx;
    }
    tx.hash = keccak256(payload);
    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
    return tx;
  }
  function _parse(rawTransaction) {
    const transaction = decode$2(rawTransaction);
    if (transaction.length !== 9 && transaction.length !== 6) {
      logger$6.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
    }
    const tx = {
      nonce: handleNumber(transaction[0]).toNumber(),
      gasPrice: handleNumber(transaction[1]),
      gasLimit: handleNumber(transaction[2]),
      to: handleAddress(transaction[3]),
      value: handleNumber(transaction[4]),
      data: transaction[5],
      chainId: 0
    };
    if (transaction.length === 6) {
      return tx;
    }
    try {
      tx.v = BigNumber.from(transaction[6]).toNumber();
    } catch (error2) {
      return tx;
    }
    tx.r = hexZeroPad(transaction[7], 32);
    tx.s = hexZeroPad(transaction[8], 32);
    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
      tx.chainId = tx.v;
      tx.v = 0;
    } else {
      tx.chainId = Math.floor((tx.v - 35) / 2);
      if (tx.chainId < 0) {
        tx.chainId = 0;
      }
      let recoveryParam = tx.v - 27;
      const raw = transaction.slice(0, 6);
      if (tx.chainId !== 0) {
        raw.push(hexlify(tx.chainId));
        raw.push("0x");
        raw.push("0x");
        recoveryParam -= tx.chainId * 2 + 8;
      }
      const digest = keccak256(encode$4(raw));
      try {
        tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam });
      } catch (error2) {
      }
      tx.hash = keccak256(rawTransaction);
    }
    tx.type = null;
    return tx;
  }
  function parse$i(rawTransaction) {
    const payload = arrayify(rawTransaction);
    if (payload[0] > 127) {
      return _parse(payload);
    }
    switch (payload[0]) {
      case 1:
        return _parseEip2930(payload);
      case 2:
        return _parseEip1559(payload);
    }
    return logger$6.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "parseTransaction",
      transactionType: payload[0]
    });
  }
  const EthAppPleaseEnableContractData = createCustomErrorClass("EthAppPleaseEnableContractData");
  const EthAppNftNotSupported = createCustomErrorClass("EthAppNftNotSupported");
  var re$5 = { exports: {} };
  const SEMVER_SPEC_VERSION$1 = "2.0.0";
  const MAX_LENGTH$3 = 256;
  const MAX_SAFE_INTEGER$3 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
  9007199254740991;
  const MAX_SAFE_COMPONENT_LENGTH$1 = 16;
  const MAX_SAFE_BUILD_LENGTH$1 = MAX_LENGTH$3 - 6;
  const RELEASE_TYPES$1 = [
    "major",
    "premajor",
    "minor",
    "preminor",
    "patch",
    "prepatch",
    "prerelease"
  ];
  var constants$6 = {
    MAX_LENGTH: MAX_LENGTH$3,
    MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH$1,
    MAX_SAFE_BUILD_LENGTH: MAX_SAFE_BUILD_LENGTH$1,
    MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$3,
    RELEASE_TYPES: RELEASE_TYPES$1,
    SEMVER_SPEC_VERSION: SEMVER_SPEC_VERSION$1,
    FLAG_INCLUDE_PRERELEASE: 1,
    FLAG_LOOSE: 2
  };
  var define_process_env_default$1 = {};
  const debug$3 = typeof process$1 === "object" && define_process_env_default$1 && define_process_env_default$1.NODE_DEBUG && /\bsemver\b/i.test(define_process_env_default$1.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
  };
  var debug_1$2 = debug$3;
  (function(module, exports2) {
    const {
      MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH2,
      MAX_SAFE_BUILD_LENGTH: MAX_SAFE_BUILD_LENGTH2,
      MAX_LENGTH: MAX_LENGTH2
    } = constants$6;
    const debug2 = debug_1$2;
    exports2 = module.exports = {};
    const re2 = exports2.re = [];
    const safeRe = exports2.safeRe = [];
    const src = exports2.src = [];
    const t2 = exports2.t = {};
    let R2 = 0;
    const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    const safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH2],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH2]
    ];
    const makeSafeRegex = (value) => {
      for (const [token, max2] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max2}}`).split(`${token}+`).join(`${token}{1,${max2}}`);
      }
      return value;
    };
    const createToken = (name2, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R2++;
      debug2(name2, index, value);
      t2[name2] = index;
      src[index] = value;
      re2[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t2.NUMERICIDENTIFIER]}|${src[t2.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t2.NUMERICIDENTIFIERLOOSE]}|${src[t2.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t2.PRERELEASEIDENTIFIER]}(?:\\.${src[t2.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t2.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t2.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t2.BUILDIDENTIFIER]}(?:\\.${src[t2.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t2.MAINVERSION]}${src[t2.PRERELEASE]}?${src[t2.BUILD]}?`);
    createToken("FULL", `^${src[t2.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t2.MAINVERSIONLOOSE]}${src[t2.PRERELEASELOOSE]}?${src[t2.BUILD]}?`);
    createToken("LOOSE", `^${src[t2.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t2.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t2.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:${src[t2.PRERELEASE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:${src[t2.PRERELEASELOOSE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH2}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}}))?`);
    createToken("COERCE", `${src[t2.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src[t2.COERCEPLAIN] + `(?:${src[t2.PRERELEASE]})?(?:${src[t2.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t2.COERCE], true);
    createToken("COERCERTLFULL", src[t2.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t2.LONETILDE]}\\s+`, true);
    exports2.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t2.LONECARET]}\\s+`, true);
    exports2.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t2.GTLT]}\\s*(${src[t2.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]}|${src[t2.XRANGEPLAIN]})`, true);
    exports2.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t2.XRANGEPLAIN]})\\s+-\\s+(${src[t2.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t2.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t2.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  })(re$5, re$5.exports);
  var reExports$1 = re$5.exports;
  const looseOption$1 = Object.freeze({ loose: true });
  const emptyOpts$1 = Object.freeze({});
  const parseOptions$3 = (options) => {
    if (!options) {
      return emptyOpts$1;
    }
    if (typeof options !== "object") {
      return looseOption$1;
    }
    return options;
  };
  var parseOptions_1$1 = parseOptions$3;
  const numeric$1 = /^[0-9]+$/;
  const compareIdentifiers$3 = (a, b) => {
    const anum2 = numeric$1.test(a);
    const bnum = numeric$1.test(b);
    if (anum2 && bnum) {
      a = +a;
      b = +b;
    }
    return a === b ? 0 : anum2 && !bnum ? -1 : bnum && !anum2 ? 1 : a < b ? -1 : 1;
  };
  const rcompareIdentifiers$1 = (a, b) => compareIdentifiers$3(b, a);
  var identifiers$3 = {
    compareIdentifiers: compareIdentifiers$3,
    rcompareIdentifiers: rcompareIdentifiers$1
  };
  const debug$2 = debug_1$2;
  const { MAX_LENGTH: MAX_LENGTH$2, MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$2 } = constants$6;
  const { safeRe: re$4, t: t$3 } = reExports$1;
  const parseOptions$2 = parseOptions_1$1;
  const { compareIdentifiers: compareIdentifiers$2 } = identifiers$3;
  let SemVer$r = class SemVer2 {
    constructor(version2, options) {
      options = parseOptions$2(options);
      if (version2 instanceof SemVer2) {
        if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
          return version2;
        } else {
          version2 = version2.version;
        }
      } else if (typeof version2 !== "string") {
        throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version2}".`);
      }
      if (version2.length > MAX_LENGTH$2) {
        throw new TypeError(
          `version is longer than ${MAX_LENGTH$2} characters`
        );
      }
      debug$2("SemVer", version2, options);
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      const m = version2.trim().match(options.loose ? re$4[t$3.LOOSE] : re$4[t$3.FULL]);
      if (!m) {
        throw new TypeError(`Invalid Version: ${version2}`);
      }
      this.raw = version2;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER$2 || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER$2 || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER$2 || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map((id2) => {
          if (/^[0-9]+$/.test(id2)) {
            const num = +id2;
            if (num >= 0 && num < MAX_SAFE_INTEGER$2) {
              return num;
            }
          }
          return id2;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    format() {
      this.version = `${this.major}.${this.minor}.${this.patch}`;
      if (this.prerelease.length) {
        this.version += `-${this.prerelease.join(".")}`;
      }
      return this.version;
    }
    toString() {
      return this.version;
    }
    compare(other) {
      debug$2("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer2)) {
        if (typeof other === "string" && other === this.version) {
          return 0;
        }
        other = new SemVer2(other, this.options);
      }
      if (other.version === this.version) {
        return 0;
      }
      return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
      if (!(other instanceof SemVer2)) {
        other = new SemVer2(other, this.options);
      }
      return compareIdentifiers$2(this.major, other.major) || compareIdentifiers$2(this.minor, other.minor) || compareIdentifiers$2(this.patch, other.patch);
    }
    comparePre(other) {
      if (!(other instanceof SemVer2)) {
        other = new SemVer2(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      let i2 = 0;
      do {
        const a = this.prerelease[i2];
        const b = other.prerelease[i2];
        debug$2("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers$2(a, b);
        }
      } while (++i2);
    }
    compareBuild(other) {
      if (!(other instanceof SemVer2)) {
        other = new SemVer2(other, this.options);
      }
      let i2 = 0;
      do {
        const a = this.build[i2];
        const b = other.build[i2];
        debug$2("build compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers$2(a, b);
        }
      } while (++i2);
    }
    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier, identifierBase);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier, identifierBase);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier, identifierBase);
          this.inc("pre", identifier, identifierBase);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier, identifierBase);
          }
          this.inc("pre", identifier, identifierBase);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre": {
          const base2 = Number(identifierBase) ? 1 : 0;
          if (!identifier && identifierBase === false) {
            throw new Error("invalid increment argument: identifier is empty");
          }
          if (this.prerelease.length === 0) {
            this.prerelease = [base2];
          } else {
            let i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              if (identifier === this.prerelease.join(".") && identifierBase === false) {
                throw new Error("invalid increment argument: identifier already exists");
              }
              this.prerelease.push(base2);
            }
          }
          if (identifier) {
            let prerelease2 = [identifier, base2];
            if (identifierBase === false) {
              prerelease2 = [identifier];
            }
            if (compareIdentifiers$2(this.prerelease[0], identifier) === 0) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = prerelease2;
              }
            } else {
              this.prerelease = prerelease2;
            }
          }
          break;
        }
        default:
          throw new Error(`invalid increment argument: ${release}`);
      }
      this.raw = this.format();
      if (this.build.length) {
        this.raw += `+${this.build.join(".")}`;
      }
      return this;
    }
  };
  var semver$4 = SemVer$r;
  const SemVer$q = semver$4;
  const parse$h = (version2, options, throwErrors = false) => {
    if (version2 instanceof SemVer$q) {
      return version2;
    }
    try {
      return new SemVer$q(version2, options);
    } catch (er) {
      if (!throwErrors) {
        return null;
      }
      throw er;
    }
  };
  var parse_1$1 = parse$h;
  const parse$g = parse_1$1;
  const valid$5 = (version2, options) => {
    const v = parse$g(version2, options);
    return v ? v.version : null;
  };
  var valid_1$1 = valid$5;
  const parse$f = parse_1$1;
  const clean$3 = (version2, options) => {
    const s2 = parse$f(version2.trim().replace(/^[=v]+/, ""), options);
    return s2 ? s2.version : null;
  };
  var clean_1$1 = clean$3;
  const SemVer$p = semver$4;
  const inc$3 = (version2, release, options, identifier, identifierBase) => {
    if (typeof options === "string") {
      identifierBase = identifier;
      identifier = options;
      options = void 0;
    }
    try {
      return new SemVer$p(
        version2 instanceof SemVer$p ? version2.version : version2,
        options
      ).inc(release, identifier, identifierBase).version;
    } catch (er) {
      return null;
    }
  };
  var inc_1$1 = inc$3;
  const parse$e = parse_1$1;
  const diff$3 = (version1, version2) => {
    const v1 = parse$e(version1, null, true);
    const v2 = parse$e(version2, null, true);
    const comparison = v1.compare(v2);
    if (comparison === 0) {
      return null;
    }
    const v1Higher = comparison > 0;
    const highVersion = v1Higher ? v1 : v2;
    const lowVersion = v1Higher ? v2 : v1;
    const highHasPre = !!highVersion.prerelease.length;
    const lowHasPre = !!lowVersion.prerelease.length;
    if (lowHasPre && !highHasPre) {
      if (!lowVersion.patch && !lowVersion.minor) {
        return "major";
      }
      if (highVersion.patch) {
        return "patch";
      }
      if (highVersion.minor) {
        return "minor";
      }
      return "major";
    }
    const prefix = highHasPre ? "pre" : "";
    if (v1.major !== v2.major) {
      return prefix + "major";
    }
    if (v1.minor !== v2.minor) {
      return prefix + "minor";
    }
    if (v1.patch !== v2.patch) {
      return prefix + "patch";
    }
    return "prerelease";
  };
  var diff_1$1 = diff$3;
  const SemVer$o = semver$4;
  const major$3 = (a, loose) => new SemVer$o(a, loose).major;
  var major_1$1 = major$3;
  const SemVer$n = semver$4;
  const minor$3 = (a, loose) => new SemVer$n(a, loose).minor;
  var minor_1$1 = minor$3;
  const SemVer$m = semver$4;
  const patch$3 = (a, loose) => new SemVer$m(a, loose).patch;
  var patch_1$1 = patch$3;
  const parse$d = parse_1$1;
  const prerelease$3 = (version2, options) => {
    const parsed = parse$d(version2, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  };
  var prerelease_1$1 = prerelease$3;
  const SemVer$l = semver$4;
  const compare$n = (a, b, loose) => new SemVer$l(a, loose).compare(new SemVer$l(b, loose));
  var compare_1$1 = compare$n;
  const compare$m = compare_1$1;
  const rcompare$3 = (a, b, loose) => compare$m(b, a, loose);
  var rcompare_1$1 = rcompare$3;
  const compare$l = compare_1$1;
  const compareLoose$3 = (a, b) => compare$l(a, b, true);
  var compareLoose_1$1 = compareLoose$3;
  const SemVer$k = semver$4;
  const compareBuild$7 = (a, b, loose) => {
    const versionA = new SemVer$k(a, loose);
    const versionB = new SemVer$k(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  };
  var compareBuild_1$1 = compareBuild$7;
  const compareBuild$6 = compareBuild_1$1;
  const sort$3 = (list, loose) => list.sort((a, b) => compareBuild$6(a, b, loose));
  var sort_1$1 = sort$3;
  const compareBuild$5 = compareBuild_1$1;
  const rsort$3 = (list, loose) => list.sort((a, b) => compareBuild$5(b, a, loose));
  var rsort_1$1 = rsort$3;
  const compare$k = compare_1$1;
  const gt$9 = (a, b, loose) => compare$k(a, b, loose) > 0;
  var gt_1$1 = gt$9;
  const compare$j = compare_1$1;
  const lt$7 = (a, b, loose) => compare$j(a, b, loose) < 0;
  var lt_1$1 = lt$7;
  const compare$i = compare_1$1;
  const eq$5 = (a, b, loose) => compare$i(a, b, loose) === 0;
  var eq_1$1 = eq$5;
  const compare$h = compare_1$1;
  const neq$5 = (a, b, loose) => compare$h(a, b, loose) !== 0;
  var neq_1$1 = neq$5;
  const compare$g = compare_1$1;
  const gte$7 = (a, b, loose) => compare$g(a, b, loose) >= 0;
  var gte_1$1 = gte$7;
  const compare$f = compare_1$1;
  const lte$7 = (a, b, loose) => compare$f(a, b, loose) <= 0;
  var lte_1$1 = lte$7;
  const eq$4 = eq_1$1;
  const neq$4 = neq_1$1;
  const gt$8 = gt_1$1;
  const gte$6 = gte_1$1;
  const lt$6 = lt_1$1;
  const lte$6 = lte_1$1;
  const cmp$3 = (a, op, b, loose) => {
    switch (op) {
      case "===":
        if (typeof a === "object") {
          a = a.version;
        }
        if (typeof b === "object") {
          b = b.version;
        }
        return a === b;
      case "!==":
        if (typeof a === "object") {
          a = a.version;
        }
        if (typeof b === "object") {
          b = b.version;
        }
        return a !== b;
      case "":
      case "=":
      case "==":
        return eq$4(a, b, loose);
      case "!=":
        return neq$4(a, b, loose);
      case ">":
        return gt$8(a, b, loose);
      case ">=":
        return gte$6(a, b, loose);
      case "<":
        return lt$6(a, b, loose);
      case "<=":
        return lte$6(a, b, loose);
      default:
        throw new TypeError(`Invalid operator: ${op}`);
    }
  };
  var cmp_1$1 = cmp$3;
  const SemVer$j = semver$4;
  const parse$c = parse_1$1;
  const { safeRe: re$3, t: t$2 } = reExports$1;
  const coerce$4 = (version2, options) => {
    if (version2 instanceof SemVer$j) {
      return version2;
    }
    if (typeof version2 === "number") {
      version2 = String(version2);
    }
    if (typeof version2 !== "string") {
      return null;
    }
    options = options || {};
    let match = null;
    if (!options.rtl) {
      match = version2.match(options.includePrerelease ? re$3[t$2.COERCEFULL] : re$3[t$2.COERCE]);
    } else {
      const coerceRtlRegex = options.includePrerelease ? re$3[t$2.COERCERTLFULL] : re$3[t$2.COERCERTL];
      let next;
      while ((next = coerceRtlRegex.exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
        if (!match || next.index + next[0].length !== match.index + match[0].length) {
          match = next;
        }
        coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
      }
      coerceRtlRegex.lastIndex = -1;
    }
    if (match === null) {
      return null;
    }
    const major2 = match[2];
    const minor2 = match[3] || "0";
    const patch2 = match[4] || "0";
    const prerelease2 = options.includePrerelease && match[5] ? `-${match[5]}` : "";
    const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
    return parse$c(`${major2}.${minor2}.${patch2}${prerelease2}${build}`, options);
  };
  var coerce_1$1 = coerce$4;
  let LRUCache$1 = class LRUCache {
    constructor() {
      this.max = 1e3;
      this.map = /* @__PURE__ */ new Map();
    }
    get(key2) {
      const value = this.map.get(key2);
      if (value === void 0) {
        return void 0;
      } else {
        this.map.delete(key2);
        this.map.set(key2, value);
        return value;
      }
    }
    delete(key2) {
      return this.map.delete(key2);
    }
    set(key2, value) {
      const deleted = this.delete(key2);
      if (!deleted && value !== void 0) {
        if (this.map.size >= this.max) {
          const firstKey = this.map.keys().next().value;
          this.delete(firstKey);
        }
        this.map.set(key2, value);
      }
      return this;
    }
  };
  var lrucache$1 = LRUCache$1;
  var range$2;
  var hasRequiredRange$2;
  function requireRange$2() {
    if (hasRequiredRange$2) return range$2;
    hasRequiredRange$2 = 1;
    const SPACE_CHARACTERS = /\s+/g;
    class Range2 {
      constructor(range2, options) {
        options = parseOptions2(options);
        if (range2 instanceof Range2) {
          if (range2.loose === !!options.loose && range2.includePrerelease === !!options.includePrerelease) {
            return range2;
          } else {
            return new Range2(range2.raw, options);
          }
        }
        if (range2 instanceof Comparator2) {
          this.raw = range2.value;
          this.set = [[range2]];
          this.formatted = void 0;
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range2.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r2) => this.parseRange(r2.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i2 = 0; i2 < this.set.length; i2++) {
            if (i2 > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i2];
            for (let k = 0; k < comps.length; k++) {
              if (k > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range2) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range2;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re2[t2.HYPHENRANGELOOSE] : re2[t2.HYPHENRANGE];
        range2 = range2.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug2("hyphen replace", range2);
        range2 = range2.replace(re2[t2.COMPARATORTRIM], comparatorTrimReplace);
        debug2("comparator trim", range2);
        range2 = range2.replace(re2[t2.TILDETRIM], tildeTrimReplace);
        debug2("tilde trim", range2);
        range2 = range2.replace(re2[t2.CARETTRIM], caretTrimReplace);
        debug2("caret trim", range2);
        let rangeList = range2.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug2("loose invalid filter", comp, this.options);
            return !!comp.match(re2[t2.COMPARATORLOOSE]);
          });
        }
        debug2("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator2(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range2, options) {
        if (!(range2 instanceof Range2)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range2.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer2(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i2 = 0; i2 < this.set.length; i2++) {
          if (testSet(this.set[i2], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    }
    range$2 = Range2;
    const LRU = lrucache$1;
    const cache = new LRU();
    const parseOptions2 = parseOptions_1$1;
    const Comparator2 = requireComparator$1();
    const debug2 = debug_1$2;
    const SemVer2 = semver$4;
    const {
      safeRe: re2,
      t: t2,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = reExports$1;
    const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = constants$6;
    const isNullSet = (c) => c.value === "<0.0.0-0";
    const isAny = (c) => c.value === "";
    const isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    const parseComparator = (comp, options) => {
      debug2("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug2("caret", comp);
      comp = replaceTildes(comp, options);
      debug2("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug2("xrange", comp);
      comp = replaceStars(comp, options);
      debug2("stars", comp);
      return comp;
    };
    const isX = (id2) => !id2 || id2.toLowerCase() === "x" || id2 === "*";
    const replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
    };
    const replaceTilde = (comp, options) => {
      const r2 = options.loose ? re2[t2.TILDELOOSE] : re2[t2.TILDE];
      return comp.replace(r2, (_, M, m, p, pr) => {
        debug2("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug2("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug2("tilde return", ret);
        return ret;
      });
    };
    const replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
    };
    const replaceCaret = (comp, options) => {
      debug2("caret", comp, options);
      const r2 = options.loose ? re2[t2.CARETLOOSE] : re2[t2.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r2, (_, M, m, p, pr) => {
        debug2("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug2("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug2("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug2("caret return", ret);
        return ret;
      });
    };
    const replaceXRanges = (comp, options) => {
      debug2("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
    };
    const replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r2 = options.loose ? re2[t2.XRANGELOOSE] : re2[t2.XRANGE];
      return comp.replace(r2, (ret, gtlt, M, m, p, pr) => {
        debug2("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug2("xRange return", ret);
        return ret;
      });
    };
    const replaceStars = (comp, options) => {
      debug2("replaceStars", comp, options);
      return comp.trim().replace(re2[t2.STAR], "");
    };
    const replaceGTE0 = (comp, options) => {
      debug2("replaceGTE0", comp, options);
      return comp.trim().replace(re2[options.includePrerelease ? t2.GTE0PRE : t2.GTE0], "");
    };
    const hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    const testSet = (set2, version2, options) => {
      for (let i2 = 0; i2 < set2.length; i2++) {
        if (!set2[i2].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i2 = 0; i2 < set2.length; i2++) {
          debug2(set2[i2].semver);
          if (set2[i2].semver === Comparator2.ANY) {
            continue;
          }
          if (set2[i2].semver.prerelease.length > 0) {
            const allowed = set2[i2].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
    return range$2;
  }
  var comparator$1;
  var hasRequiredComparator$1;
  function requireComparator$1() {
    if (hasRequiredComparator$1) return comparator$1;
    hasRequiredComparator$1 = 1;
    const ANY2 = Symbol("SemVer ANY");
    class Comparator2 {
      static get ANY() {
        return ANY2;
      }
      constructor(comp, options) {
        options = parseOptions2(options);
        if (comp instanceof Comparator2) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug2("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY2) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug2("comp", this);
      }
      parse(comp) {
        const r2 = this.options.loose ? re2[t2.COMPARATORLOOSE] : re2[t2.COMPARATOR];
        const m = comp.match(r2);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY2;
        } else {
          this.semver = new SemVer2(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug2("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY2 || version2 === ANY2) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer2(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp2(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator2)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range2(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range2(this.value, options).test(comp.semver);
        }
        options = parseOptions2(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp2(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp2(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    }
    comparator$1 = Comparator2;
    const parseOptions2 = parseOptions_1$1;
    const { safeRe: re2, t: t2 } = reExports$1;
    const cmp2 = cmp_1$1;
    const debug2 = debug_1$2;
    const SemVer2 = semver$4;
    const Range2 = requireRange$2();
    return comparator$1;
  }
  const Range$j = requireRange$2();
  const satisfies$9 = (version2, range2, options) => {
    try {
      range2 = new Range$j(range2, options);
    } catch (er) {
      return false;
    }
    return range2.test(version2);
  };
  var satisfies_1$1 = satisfies$9;
  const Range$i = requireRange$2();
  const toComparators$3 = (range2, options) => new Range$i(range2, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
  var toComparators_1$1 = toComparators$3;
  const SemVer$i = semver$4;
  const Range$h = requireRange$2();
  const maxSatisfying$3 = (versions2, range2, options) => {
    let max2 = null;
    let maxSV = null;
    let rangeObj = null;
    try {
      rangeObj = new Range$h(range2, options);
    } catch (er) {
      return null;
    }
    versions2.forEach((v) => {
      if (rangeObj.test(v)) {
        if (!max2 || maxSV.compare(v) === -1) {
          max2 = v;
          maxSV = new SemVer$i(max2, options);
        }
      }
    });
    return max2;
  };
  var maxSatisfying_1$1 = maxSatisfying$3;
  const SemVer$h = semver$4;
  const Range$g = requireRange$2();
  const minSatisfying$3 = (versions2, range2, options) => {
    let min2 = null;
    let minSV = null;
    let rangeObj = null;
    try {
      rangeObj = new Range$g(range2, options);
    } catch (er) {
      return null;
    }
    versions2.forEach((v) => {
      if (rangeObj.test(v)) {
        if (!min2 || minSV.compare(v) === 1) {
          min2 = v;
          minSV = new SemVer$h(min2, options);
        }
      }
    });
    return min2;
  };
  var minSatisfying_1$1 = minSatisfying$3;
  const SemVer$g = semver$4;
  const Range$f = requireRange$2();
  const gt$7 = gt_1$1;
  const minVersion$3 = (range2, loose) => {
    range2 = new Range$f(range2, loose);
    let minver = new SemVer$g("0.0.0");
    if (range2.test(minver)) {
      return minver;
    }
    minver = new SemVer$g("0.0.0-0");
    if (range2.test(minver)) {
      return minver;
    }
    minver = null;
    for (let i2 = 0; i2 < range2.set.length; ++i2) {
      const comparators = range2.set[i2];
      let setMin = null;
      comparators.forEach((comparator2) => {
        const compver = new SemVer$g(comparator2.semver.version);
        switch (comparator2.operator) {
          case ">":
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }
            compver.raw = compver.format();
          case "":
          case ">=":
            if (!setMin || gt$7(compver, setMin)) {
              setMin = compver;
            }
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error(`Unexpected operation: ${comparator2.operator}`);
        }
      });
      if (setMin && (!minver || gt$7(minver, setMin))) {
        minver = setMin;
      }
    }
    if (minver && range2.test(minver)) {
      return minver;
    }
    return null;
  };
  var minVersion_1$1 = minVersion$3;
  const Range$e = requireRange$2();
  const validRange$3 = (range2, options) => {
    try {
      return new Range$e(range2, options).range || "*";
    } catch (er) {
      return null;
    }
  };
  var valid$4 = validRange$3;
  const SemVer$f = semver$4;
  const Comparator$5 = requireComparator$1();
  const { ANY: ANY$3 } = Comparator$5;
  const Range$d = requireRange$2();
  const satisfies$8 = satisfies_1$1;
  const gt$6 = gt_1$1;
  const lt$5 = lt_1$1;
  const lte$5 = lte_1$1;
  const gte$5 = gte_1$1;
  const outside$7 = (version2, range2, hilo, options) => {
    version2 = new SemVer$f(version2, options);
    range2 = new Range$d(range2, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt$6;
        ltefn = lte$5;
        ltfn = lt$5;
        comp = ">";
        ecomp = ">=";
        break;
      case "<":
        gtfn = lt$5;
        ltefn = gte$5;
        ltfn = gt$6;
        comp = "<";
        ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies$8(version2, range2, options)) {
      return false;
    }
    for (let i2 = 0; i2 < range2.set.length; ++i2) {
      const comparators = range2.set[i2];
      let high = null;
      let low = null;
      comparators.forEach((comparator2) => {
        if (comparator2.semver === ANY$3) {
          comparator2 = new Comparator$5(">=0.0.0");
        }
        high = high || comparator2;
        low = low || comparator2;
        if (gtfn(comparator2.semver, high.semver, options)) {
          high = comparator2;
        } else if (ltfn(comparator2.semver, low.semver, options)) {
          low = comparator2;
        }
      });
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }
      if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
        return false;
      }
    }
    return true;
  };
  var outside_1$1 = outside$7;
  const outside$6 = outside_1$1;
  const gtr$3 = (version2, range2, options) => outside$6(version2, range2, ">", options);
  var gtr_1$1 = gtr$3;
  const outside$5 = outside_1$1;
  const ltr$3 = (version2, range2, options) => outside$5(version2, range2, "<", options);
  var ltr_1$1 = ltr$3;
  const Range$c = requireRange$2();
  const intersects$3 = (r1, r2, options) => {
    r1 = new Range$c(r1, options);
    r2 = new Range$c(r2, options);
    return r1.intersects(r2, options);
  };
  var intersects_1$1 = intersects$3;
  const satisfies$7 = satisfies_1$1;
  const compare$e = compare_1$1;
  var simplify$1 = (versions2, range2, options) => {
    const set2 = [];
    let first = null;
    let prev = null;
    const v = versions2.sort((a, b) => compare$e(a, b, options));
    for (const version2 of v) {
      const included = satisfies$7(version2, range2, options);
      if (included) {
        prev = version2;
        if (!first) {
          first = version2;
        }
      } else {
        if (prev) {
          set2.push([first, prev]);
        }
        prev = null;
        first = null;
      }
    }
    if (first) {
      set2.push([first, null]);
    }
    const ranges = [];
    for (const [min2, max2] of set2) {
      if (min2 === max2) {
        ranges.push(min2);
      } else if (!max2 && min2 === v[0]) {
        ranges.push("*");
      } else if (!max2) {
        ranges.push(`>=${min2}`);
      } else if (min2 === v[0]) {
        ranges.push(`<=${max2}`);
      } else {
        ranges.push(`${min2} - ${max2}`);
      }
    }
    const simplified = ranges.join(" || ");
    const original = typeof range2.raw === "string" ? range2.raw : String(range2);
    return simplified.length < original.length ? simplified : range2;
  };
  const Range$b = requireRange$2();
  const Comparator$4 = requireComparator$1();
  const { ANY: ANY$2 } = Comparator$4;
  const satisfies$6 = satisfies_1$1;
  const compare$d = compare_1$1;
  const subset$3 = (sub, dom, options = {}) => {
    if (sub === dom) {
      return true;
    }
    sub = new Range$b(sub, options);
    dom = new Range$b(dom, options);
    let sawNonNull = false;
    OUTER: for (const simpleSub of sub.set) {
      for (const simpleDom of dom.set) {
        const isSub = simpleSubset$1(simpleSub, simpleDom, options);
        sawNonNull = sawNonNull || isSub !== null;
        if (isSub) {
          continue OUTER;
        }
      }
      if (sawNonNull) {
        return false;
      }
    }
    return true;
  };
  const minimumVersionWithPreRelease$1 = [new Comparator$4(">=0.0.0-0")];
  const minimumVersion$1 = [new Comparator$4(">=0.0.0")];
  const simpleSubset$1 = (sub, dom, options) => {
    if (sub === dom) {
      return true;
    }
    if (sub.length === 1 && sub[0].semver === ANY$2) {
      if (dom.length === 1 && dom[0].semver === ANY$2) {
        return true;
      } else if (options.includePrerelease) {
        sub = minimumVersionWithPreRelease$1;
      } else {
        sub = minimumVersion$1;
      }
    }
    if (dom.length === 1 && dom[0].semver === ANY$2) {
      if (options.includePrerelease) {
        return true;
      } else {
        dom = minimumVersion$1;
      }
    }
    const eqSet = /* @__PURE__ */ new Set();
    let gt2, lt2;
    for (const c of sub) {
      if (c.operator === ">" || c.operator === ">=") {
        gt2 = higherGT$1(gt2, c, options);
      } else if (c.operator === "<" || c.operator === "<=") {
        lt2 = lowerLT$1(lt2, c, options);
      } else {
        eqSet.add(c.semver);
      }
    }
    if (eqSet.size > 1) {
      return null;
    }
    let gtltComp;
    if (gt2 && lt2) {
      gtltComp = compare$d(gt2.semver, lt2.semver, options);
      if (gtltComp > 0) {
        return null;
      } else if (gtltComp === 0 && (gt2.operator !== ">=" || lt2.operator !== "<=")) {
        return null;
      }
    }
    for (const eq2 of eqSet) {
      if (gt2 && !satisfies$6(eq2, String(gt2), options)) {
        return null;
      }
      if (lt2 && !satisfies$6(eq2, String(lt2), options)) {
        return null;
      }
      for (const c of dom) {
        if (!satisfies$6(eq2, String(c), options)) {
          return false;
        }
      }
      return true;
    }
    let higher, lower;
    let hasDomLT, hasDomGT;
    let needDomLTPre = lt2 && !options.includePrerelease && lt2.semver.prerelease.length ? lt2.semver : false;
    let needDomGTPre = gt2 && !options.includePrerelease && gt2.semver.prerelease.length ? gt2.semver : false;
    if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt2.operator === "<" && needDomLTPre.prerelease[0] === 0) {
      needDomLTPre = false;
    }
    for (const c of dom) {
      hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
      hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
      if (gt2) {
        if (needDomGTPre) {
          if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
            needDomGTPre = false;
          }
        }
        if (c.operator === ">" || c.operator === ">=") {
          higher = higherGT$1(gt2, c, options);
          if (higher === c && higher !== gt2) {
            return false;
          }
        } else if (gt2.operator === ">=" && !satisfies$6(gt2.semver, String(c), options)) {
          return false;
        }
      }
      if (lt2) {
        if (needDomLTPre) {
          if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
            needDomLTPre = false;
          }
        }
        if (c.operator === "<" || c.operator === "<=") {
          lower = lowerLT$1(lt2, c, options);
          if (lower === c && lower !== lt2) {
            return false;
          }
        } else if (lt2.operator === "<=" && !satisfies$6(lt2.semver, String(c), options)) {
          return false;
        }
      }
      if (!c.operator && (lt2 || gt2) && gtltComp !== 0) {
        return false;
      }
    }
    if (gt2 && hasDomLT && !lt2 && gtltComp !== 0) {
      return false;
    }
    if (lt2 && hasDomGT && !gt2 && gtltComp !== 0) {
      return false;
    }
    if (needDomGTPre || needDomLTPre) {
      return false;
    }
    return true;
  };
  const higherGT$1 = (a, b, options) => {
    if (!a) {
      return b;
    }
    const comp = compare$d(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
  };
  const lowerLT$1 = (a, b, options) => {
    if (!a) {
      return b;
    }
    const comp = compare$d(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
  };
  var subset_1$1 = subset$3;
  const internalRe$1 = reExports$1;
  const constants$5 = constants$6;
  const SemVer$e = semver$4;
  const identifiers$2 = identifiers$3;
  const parse$b = parse_1$1;
  const valid$3 = valid_1$1;
  const clean$2 = clean_1$1;
  const inc$2 = inc_1$1;
  const diff$2 = diff_1$1;
  const major$2 = major_1$1;
  const minor$2 = minor_1$1;
  const patch$2 = patch_1$1;
  const prerelease$2 = prerelease_1$1;
  const compare$c = compare_1$1;
  const rcompare$2 = rcompare_1$1;
  const compareLoose$2 = compareLoose_1$1;
  const compareBuild$4 = compareBuild_1$1;
  const sort$2 = sort_1$1;
  const rsort$2 = rsort_1$1;
  const gt$5 = gt_1$1;
  const lt$4 = lt_1$1;
  const eq$3 = eq_1$1;
  const neq$3 = neq_1$1;
  const gte$4 = gte_1$1;
  const lte$4 = lte_1$1;
  const cmp$2 = cmp_1$1;
  const coerce$3 = coerce_1$1;
  const Comparator$3 = requireComparator$1();
  const Range$a = requireRange$2();
  const satisfies$5 = satisfies_1$1;
  const toComparators$2 = toComparators_1$1;
  const maxSatisfying$2 = maxSatisfying_1$1;
  const minSatisfying$2 = minSatisfying_1$1;
  const minVersion$2 = minVersion_1$1;
  const validRange$2 = valid$4;
  const outside$4 = outside_1$1;
  const gtr$2 = gtr_1$1;
  const ltr$2 = ltr_1$1;
  const intersects$2 = intersects_1$1;
  const simplifyRange$1 = simplify$1;
  const subset$2 = subset_1$1;
  var semver$2 = {
    parse: parse$b,
    valid: valid$3,
    clean: clean$2,
    inc: inc$2,
    diff: diff$2,
    major: major$2,
    minor: minor$2,
    patch: patch$2,
    prerelease: prerelease$2,
    compare: compare$c,
    rcompare: rcompare$2,
    compareLoose: compareLoose$2,
    compareBuild: compareBuild$4,
    sort: sort$2,
    rsort: rsort$2,
    gt: gt$5,
    lt: lt$4,
    eq: eq$3,
    neq: neq$3,
    gte: gte$4,
    lte: lte$4,
    cmp: cmp$2,
    coerce: coerce$3,
    Comparator: Comparator$3,
    Range: Range$a,
    satisfies: satisfies$5,
    toComparators: toComparators$2,
    maxSatisfying: maxSatisfying$2,
    minSatisfying: minSatisfying$2,
    minVersion: minVersion$2,
    validRange: validRange$2,
    outside: outside$4,
    gtr: gtr$2,
    ltr: ltr$2,
    intersects: intersects$2,
    simplifyRange: simplifyRange$1,
    subset: subset$2,
    SemVer: SemVer$e,
    re: internalRe$1.re,
    src: internalRe$1.src,
    tokens: internalRe$1.t,
    SEMVER_SPEC_VERSION: constants$5.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: constants$5.RELEASE_TYPES,
    compareIdentifiers: identifiers$2.compareIdentifiers,
    rcompareIdentifiers: identifiers$2.rcompareIdentifiers
  };
  const semver$3 = /* @__PURE__ */ getDefaultExportFromCjs$1(semver$2);
  function bind(fn, thisArg) {
    return function wrap() {
      return fn.apply(thisArg, arguments);
    };
  }
  const { toString } = Object.prototype;
  const { getPrototypeOf } = Object;
  const kindOf = /* @__PURE__ */ ((cache) => (thing) => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  })(/* @__PURE__ */ Object.create(null));
  const kindOfTest = (type2) => {
    type2 = type2.toLowerCase();
    return (thing) => kindOf(thing) === type2;
  };
  const typeOfTest = (type2) => (thing) => typeof thing === type2;
  const { isArray: isArray$4 } = Array;
  const isUndefined = typeOfTest("undefined");
  function isBuffer$1(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction$1(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }
  const isArrayBuffer = kindOfTest("ArrayBuffer");
  function isArrayBufferView(val) {
    let result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && isArrayBuffer(val.buffer);
    }
    return result;
  }
  const isString$1 = typeOfTest("string");
  const isFunction$1 = typeOfTest("function");
  const isNumber$1 = typeOfTest("number");
  const isObject$1 = (thing) => thing !== null && typeof thing === "object";
  const isBoolean$1 = (thing) => thing === true || thing === false;
  const isPlainObject$1 = (val) => {
    if (kindOf(val) !== "object") {
      return false;
    }
    const prototype2 = getPrototypeOf(val);
    return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
  };
  const isDate$1 = kindOfTest("Date");
  const isFile = kindOfTest("File");
  const isBlob = kindOfTest("Blob");
  const isFileList = kindOfTest("FileList");
  const isStream = (val) => isObject$1(val) && isFunction$1(val.pipe);
  const isFormData = (thing) => {
    let kind;
    return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction$1(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
    kind === "object" && isFunction$1(thing.toString) && thing.toString() === "[object FormData]"));
  };
  const isURLSearchParams = kindOfTest("URLSearchParams");
  const [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
  const trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  function forEach(obj, fn, { allOwnKeys = false } = {}) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    let i2;
    let l;
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray$4(obj)) {
      for (i2 = 0, l = obj.length; i2 < l; i2++) {
        fn.call(null, obj[i2], i2, obj);
      }
    } else {
      const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len2 = keys.length;
      let key2;
      for (i2 = 0; i2 < len2; i2++) {
        key2 = keys[i2];
        fn.call(null, obj[key2], key2, obj);
      }
    }
  }
  function findKey(obj, key2) {
    key2 = key2.toLowerCase();
    const keys = Object.keys(obj);
    let i2 = keys.length;
    let _key;
    while (i2-- > 0) {
      _key = keys[i2];
      if (key2 === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }
  const _global = (() => {
    if (typeof globalThis !== "undefined") return globalThis;
    return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global$1;
  })();
  const isContextDefined = (context) => !isUndefined(context) && context !== _global;
  function merge$1() {
    const { caseless } = isContextDefined(this) && this || {};
    const result = {};
    const assignValue = (val, key2) => {
      const targetKey = caseless && findKey(result, key2) || key2;
      if (isPlainObject$1(result[targetKey]) && isPlainObject$1(val)) {
        result[targetKey] = merge$1(result[targetKey], val);
      } else if (isPlainObject$1(val)) {
        result[targetKey] = merge$1({}, val);
      } else if (isArray$4(val)) {
        result[targetKey] = val.slice();
      } else {
        result[targetKey] = val;
      }
    };
    for (let i2 = 0, l = arguments.length; i2 < l; i2++) {
      arguments[i2] && forEach(arguments[i2], assignValue);
    }
    return result;
  }
  const extend = (a, b, thisArg, { allOwnKeys } = {}) => {
    forEach(b, (val, key2) => {
      if (thisArg && isFunction$1(val)) {
        a[key2] = bind(val, thisArg);
      } else {
        a[key2] = val;
      }
    }, { allOwnKeys });
    return a;
  };
  const stripBOM = (content) => {
    if (content.charCodeAt(0) === 65279) {
      content = content.slice(1);
    }
    return content;
  };
  const inherits = (constructor, superConstructor, props, descriptors2) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, "super", {
      value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
  };
  const toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
    let props;
    let i2;
    let prop;
    const merged = {};
    destObj = destObj || {};
    if (sourceObj == null) return destObj;
    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i2 = props.length;
      while (i2-- > 0) {
        prop = props[i2];
        if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
  };
  const endsWith = (str, searchString, position) => {
    str = String(str);
    if (position === void 0 || position > str.length) {
      position = str.length;
    }
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
  const toArray = (thing) => {
    if (!thing) return null;
    if (isArray$4(thing)) return thing;
    let i2 = thing.length;
    if (!isNumber$1(i2)) return null;
    const arr = new Array(i2);
    while (i2-- > 0) {
      arr[i2] = thing[i2];
    }
    return arr;
  };
  const isTypedArray$1 = /* @__PURE__ */ ((TypedArray) => {
    return (thing) => {
      return TypedArray && thing instanceof TypedArray;
    };
  })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
  const forEachEntry = (obj, fn) => {
    const generator = obj && obj[Symbol.iterator];
    const iterator2 = generator.call(obj);
    let result;
    while ((result = iterator2.next()) && !result.done) {
      const pair = result.value;
      fn.call(obj, pair[0], pair[1]);
    }
  };
  const matchAll = (regExp, str) => {
    let matches;
    const arr = [];
    while ((matches = regExp.exec(str)) !== null) {
      arr.push(matches);
    }
    return arr;
  };
  const isHTMLForm = kindOfTest("HTMLFormElement");
  const toCamelCase = (str) => {
    return str.toLowerCase().replace(
      /[-_\s]([a-z\d])(\w*)/g,
      function replacer(m, p1, p2) {
        return p1.toUpperCase() + p2;
      }
    );
  };
  const hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
  const isRegExp$2 = kindOfTest("RegExp");
  const reduceDescriptors = (obj, reducer) => {
    const descriptors2 = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};
    forEach(descriptors2, (descriptor, name2) => {
      let ret;
      if ((ret = reducer(descriptor, name2, obj)) !== false) {
        reducedDescriptors[name2] = ret || descriptor;
      }
    });
    Object.defineProperties(obj, reducedDescriptors);
  };
  const freezeMethods = (obj) => {
    reduceDescriptors(obj, (descriptor, name2) => {
      if (isFunction$1(obj) && ["arguments", "caller", "callee"].indexOf(name2) !== -1) {
        return false;
      }
      const value = obj[name2];
      if (!isFunction$1(value)) return;
      descriptor.enumerable = false;
      if ("writable" in descriptor) {
        descriptor.writable = false;
        return;
      }
      if (!descriptor.set) {
        descriptor.set = () => {
          throw Error("Can not rewrite read-only method '" + name2 + "'");
        };
      }
    });
  };
  const toObjectSet = (arrayOrString, delimiter) => {
    const obj = {};
    const define = (arr) => {
      arr.forEach((value) => {
        obj[value] = true;
      });
    };
    isArray$4(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
    return obj;
  };
  const noop$1 = () => {
  };
  const toFiniteNumber = (value, defaultValue) => {
    return value != null && Number.isFinite(value = +value) ? value : defaultValue;
  };
  const ALPHA = "abcdefghijklmnopqrstuvwxyz";
  const DIGIT = "0123456789";
  const ALPHABET = {
    DIGIT,
    ALPHA,
    ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
  };
  const generateString = (size2 = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
    let str = "";
    const { length } = alphabet;
    while (size2--) {
      str += alphabet[Math.random() * length | 0];
    }
    return str;
  };
  function isSpecCompliantForm(thing) {
    return !!(thing && isFunction$1(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
  }
  const toJSONObject = (obj) => {
    const stack = new Array(10);
    const visit = (source, i2) => {
      if (isObject$1(source)) {
        if (stack.indexOf(source) >= 0) {
          return;
        }
        if (!("toJSON" in source)) {
          stack[i2] = source;
          const target = isArray$4(source) ? [] : {};
          forEach(source, (value, key2) => {
            const reducedValue = visit(value, i2 + 1);
            !isUndefined(reducedValue) && (target[key2] = reducedValue);
          });
          stack[i2] = void 0;
          return target;
        }
      }
      return source;
    };
    return visit(obj, 0);
  };
  const isAsyncFn = kindOfTest("AsyncFunction");
  const isThenable = (thing) => thing && (isObject$1(thing) || isFunction$1(thing)) && isFunction$1(thing.then) && isFunction$1(thing.catch);
  const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
    if (setImmediateSupported) {
      return setImmediate;
    }
    return postMessageSupported ? ((token, callbacks) => {
      _global.addEventListener("message", ({ source, data }) => {
        if (source === _global && data === token) {
          callbacks.length && callbacks.shift()();
        }
      }, false);
      return (cb) => {
        callbacks.push(cb);
        _global.postMessage(token, "*");
      };
    })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
  })(
    typeof setImmediate === "function",
    isFunction$1(_global.postMessage)
  );
  const asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process$1 !== "undefined" && process$1.nextTick || _setImmediate;
  const utils$e = {
    isArray: isArray$4,
    isArrayBuffer,
    isBuffer: isBuffer$1,
    isFormData,
    isArrayBufferView,
    isString: isString$1,
    isNumber: isNumber$1,
    isBoolean: isBoolean$1,
    isObject: isObject$1,
    isPlainObject: isPlainObject$1,
    isReadableStream,
    isRequest,
    isResponse,
    isHeaders,
    isUndefined,
    isDate: isDate$1,
    isFile,
    isBlob,
    isRegExp: isRegExp$2,
    isFunction: isFunction$1,
    isStream,
    isURLSearchParams,
    isTypedArray: isTypedArray$1,
    isFileList,
    forEach,
    merge: merge$1,
    extend,
    trim,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty,
    hasOwnProp: hasOwnProperty,
    // an alias to avoid ESLint no-prototype-builtins detection
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop: noop$1,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    ALPHABET,
    generateString,
    isSpecCompliantForm,
    toJSONObject,
    isAsyncFn,
    isThenable,
    setImmediate: _setImmediate,
    asap
  };
  function AxiosError(message, code2, config2, request2, response2) {
    Error.call(this);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack;
    }
    this.message = message;
    this.name = "AxiosError";
    code2 && (this.code = code2);
    config2 && (this.config = config2);
    request2 && (this.request = request2);
    if (response2) {
      this.response = response2;
      this.status = response2.status ? response2.status : null;
    }
  }
  utils$e.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: utils$e.toJSONObject(this.config),
        code: this.code,
        status: this.status
      };
    }
  });
  const prototype$1 = AxiosError.prototype;
  const descriptors = {};
  [
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED",
    "ERR_NOT_SUPPORT",
    "ERR_INVALID_URL"
    // eslint-disable-next-line func-names
  ].forEach((code2) => {
    descriptors[code2] = { value: code2 };
  });
  Object.defineProperties(AxiosError, descriptors);
  Object.defineProperty(prototype$1, "isAxiosError", { value: true });
  AxiosError.from = (error2, code2, config2, request2, response2, customProps) => {
    const axiosError = Object.create(prototype$1);
    utils$e.toFlatObject(error2, axiosError, function filter2(obj) {
      return obj !== Error.prototype;
    }, (prop) => {
      return prop !== "isAxiosError";
    });
    AxiosError.call(axiosError, error2.message, code2, config2, request2, response2);
    axiosError.cause = error2;
    axiosError.name = error2.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
  };
  const httpAdapter = null;
  function isVisitable(thing) {
    return utils$e.isPlainObject(thing) || utils$e.isArray(thing);
  }
  function removeBrackets(key2) {
    return utils$e.endsWith(key2, "[]") ? key2.slice(0, -2) : key2;
  }
  function renderKey(path, key2, dots) {
    if (!path) return key2;
    return path.concat(key2).map(function each(token, i2) {
      token = removeBrackets(token);
      return !dots && i2 ? "[" + token + "]" : token;
    }).join(dots ? "." : "");
  }
  function isFlatArray(arr) {
    return utils$e.isArray(arr) && !arr.some(isVisitable);
  }
  const predicates = utils$e.toFlatObject(utils$e, {}, null, function filter2(prop) {
    return /^is[A-Z]/.test(prop);
  });
  function toFormData(obj, formData, options) {
    if (!utils$e.isObject(obj)) {
      throw new TypeError("target must be an object");
    }
    formData = formData || new FormData();
    options = utils$e.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      return !utils$e.isUndefined(source[option]);
    });
    const metaTokens = options.metaTokens;
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
    const useBlob = _Blob && utils$e.isSpecCompliantForm(formData);
    if (!utils$e.isFunction(visitor)) {
      throw new TypeError("visitor must be a function");
    }
    function convertValue(value) {
      if (value === null) return "";
      if (utils$e.isDate(value)) {
        return value.toISOString();
      }
      if (!useBlob && utils$e.isBlob(value)) {
        throw new AxiosError("Blob is not supported. Use a Buffer instead.");
      }
      if (utils$e.isArrayBuffer(value) || utils$e.isTypedArray(value)) {
        return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
      }
      return value;
    }
    function defaultVisitor(value, key2, path) {
      let arr = value;
      if (value && !path && typeof value === "object") {
        if (utils$e.endsWith(key2, "{}")) {
          key2 = metaTokens ? key2 : key2.slice(0, -2);
          value = JSON.stringify(value);
        } else if (utils$e.isArray(value) && isFlatArray(value) || (utils$e.isFileList(value) || utils$e.endsWith(key2, "[]")) && (arr = utils$e.toArray(value))) {
          key2 = removeBrackets(key2);
          arr.forEach(function each(el, index) {
            !(utils$e.isUndefined(el) || el === null) && formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true ? renderKey([key2], index, dots) : indexes === null ? key2 : key2 + "[]",
              convertValue(el)
            );
          });
          return false;
        }
      }
      if (isVisitable(value)) {
        return true;
      }
      formData.append(renderKey(path, key2, dots), convertValue(value));
      return false;
    }
    const stack = [];
    const exposedHelpers = Object.assign(predicates, {
      defaultVisitor,
      convertValue,
      isVisitable
    });
    function build(value, path) {
      if (utils$e.isUndefined(value)) return;
      if (stack.indexOf(value) !== -1) {
        throw Error("Circular reference detected in " + path.join("."));
      }
      stack.push(value);
      utils$e.forEach(value, function each(el, key2) {
        const result = !(utils$e.isUndefined(el) || el === null) && visitor.call(
          formData,
          el,
          utils$e.isString(key2) ? key2.trim() : key2,
          path,
          exposedHelpers
        );
        if (result === true) {
          build(el, path ? path.concat(key2) : [key2]);
        }
      });
      stack.pop();
    }
    if (!utils$e.isObject(obj)) {
      throw new TypeError("data must be an object");
    }
    build(obj);
    return formData;
  }
  function encode$3(str) {
    const charMap = {
      "!": "%21",
      "'": "%27",
      "(": "%28",
      ")": "%29",
      "~": "%7E",
      "%20": "+",
      "%00": "\0"
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
      return charMap[match];
    });
  }
  function AxiosURLSearchParams(params, options) {
    this._pairs = [];
    params && toFormData(params, this, options);
  }
  const prototype = AxiosURLSearchParams.prototype;
  prototype.append = function append(name2, value) {
    this._pairs.push([name2, value]);
  };
  prototype.toString = function toString2(encoder) {
    const _encode2 = encoder ? function(value) {
      return encoder.call(this, value, encode$3);
    } : encode$3;
    return this._pairs.map(function each(pair) {
      return _encode2(pair[0]) + "=" + _encode2(pair[1]);
    }, "").join("&");
  };
  function encode$2(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }
  function buildURL(url2, params, options) {
    if (!params) {
      return url2;
    }
    const _encode2 = options && options.encode || encode$2;
    const serializeFn = options && options.serialize;
    let serializedParams;
    if (serializeFn) {
      serializedParams = serializeFn(params, options);
    } else {
      serializedParams = utils$e.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode2);
    }
    if (serializedParams) {
      const hashmarkIndex = url2.indexOf("#");
      if (hashmarkIndex !== -1) {
        url2 = url2.slice(0, hashmarkIndex);
      }
      url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url2;
  }
  class InterceptorManager {
    constructor() {
      this.handlers = [];
    }
    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }
    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
    eject(id2) {
      if (this.handlers[id2]) {
        this.handlers[id2] = null;
      }
    }
    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
    clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }
    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
    forEach(fn) {
      utils$e.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    }
  }
  const transitionalDefaults = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };
  const URLSearchParams$2 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
  const FormData$1 = typeof FormData !== "undefined" ? FormData : null;
  const Blob$1 = typeof Blob !== "undefined" ? Blob : null;
  const platform$1 = {
    isBrowser: true,
    classes: {
      URLSearchParams: URLSearchParams$2,
      FormData: FormData$1,
      Blob: Blob$1
    },
    protocols: ["http", "https", "file", "blob", "url", "data"]
  };
  const hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
  const _navigator = typeof navigator === "object" && navigator || void 0;
  const hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
  const hasStandardBrowserWebWorkerEnv = (() => {
    return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
  })();
  const origin = hasBrowserEnv && window.location.href || "http://localhost";
  const utils$d = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    hasBrowserEnv,
    hasStandardBrowserEnv,
    hasStandardBrowserWebWorkerEnv,
    navigator: _navigator,
    origin
  }, Symbol.toStringTag, { value: "Module" }));
  const platform = __spreadValues(__spreadValues({}, utils$d), platform$1);
  function toURLEncodedForm(data, options) {
    return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
      visitor: function(value, key2, path, helpers2) {
        if (platform.isNode && utils$e.isBuffer(value)) {
          this.append(key2, value.toString("base64"));
          return false;
        }
        return helpers2.defaultVisitor.apply(this, arguments);
      }
    }, options));
  }
  function parsePropPath(name2) {
    return utils$e.matchAll(/\w+|\[(\w*)]/g, name2).map((match) => {
      return match[0] === "[]" ? "" : match[1] || match[0];
    });
  }
  function arrayToObject$1(arr) {
    const obj = {};
    const keys = Object.keys(arr);
    let i2;
    const len2 = keys.length;
    let key2;
    for (i2 = 0; i2 < len2; i2++) {
      key2 = keys[i2];
      obj[key2] = arr[key2];
    }
    return obj;
  }
  function formDataToJSON(formData) {
    function buildPath(path, value, target, index) {
      let name2 = path[index++];
      if (name2 === "__proto__") return true;
      const isNumericKey = Number.isFinite(+name2);
      const isLast = index >= path.length;
      name2 = !name2 && utils$e.isArray(target) ? target.length : name2;
      if (isLast) {
        if (utils$e.hasOwnProp(target, name2)) {
          target[name2] = [target[name2], value];
        } else {
          target[name2] = value;
        }
        return !isNumericKey;
      }
      if (!target[name2] || !utils$e.isObject(target[name2])) {
        target[name2] = [];
      }
      const result = buildPath(path, value, target[name2], index);
      if (result && utils$e.isArray(target[name2])) {
        target[name2] = arrayToObject$1(target[name2]);
      }
      return !isNumericKey;
    }
    if (utils$e.isFormData(formData) && utils$e.isFunction(formData.entries)) {
      const obj = {};
      utils$e.forEachEntry(formData, (name2, value) => {
        buildPath(parsePropPath(name2), value, obj, 0);
      });
      return obj;
    }
    return null;
  }
  function stringifySafely(rawValue, parser2, encoder) {
    if (utils$e.isString(rawValue)) {
      try {
        (parser2 || JSON.parse)(rawValue);
        return utils$e.trim(rawValue);
      } catch (e) {
        if (e.name !== "SyntaxError") {
          throw e;
        }
      }
    }
    return (0, JSON.stringify)(rawValue);
  }
  const defaults$3 = {
    transitional: transitionalDefaults,
    adapter: ["xhr", "http", "fetch"],
    transformRequest: [function transformRequest(data, headers) {
      const contentType = headers.getContentType() || "";
      const hasJSONContentType = contentType.indexOf("application/json") > -1;
      const isObjectPayload = utils$e.isObject(data);
      if (isObjectPayload && utils$e.isHTMLForm(data)) {
        data = new FormData(data);
      }
      const isFormData2 = utils$e.isFormData(data);
      if (isFormData2) {
        return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
      }
      if (utils$e.isArrayBuffer(data) || utils$e.isBuffer(data) || utils$e.isStream(data) || utils$e.isFile(data) || utils$e.isBlob(data) || utils$e.isReadableStream(data)) {
        return data;
      }
      if (utils$e.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils$e.isURLSearchParams(data)) {
        headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
        return data.toString();
      }
      let isFileList2;
      if (isObjectPayload) {
        if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
          return toURLEncodedForm(data, this.formSerializer).toString();
        }
        if ((isFileList2 = utils$e.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
          const _FormData = this.env && this.env.FormData;
          return toFormData(
            isFileList2 ? { "files[]": data } : data,
            _FormData && new _FormData(),
            this.formSerializer
          );
        }
      }
      if (isObjectPayload || hasJSONContentType) {
        headers.setContentType("application/json", false);
        return stringifySafely(data);
      }
      return data;
    }],
    transformResponse: [function transformResponse(data) {
      const transitional = this.transitional || defaults$3.transitional;
      const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
      const JSONRequested = this.responseType === "json";
      if (utils$e.isResponse(data) || utils$e.isReadableStream(data)) {
        return data;
      }
      if (data && utils$e.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
        const silentJSONParsing = transitional && transitional.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;
        try {
          return JSON.parse(data);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === "SyntaxError") {
              throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e;
          }
        }
      }
      return data;
    }],
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: platform.classes.FormData,
      Blob: platform.classes.Blob
    },
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        "Accept": "application/json, text/plain, */*",
        "Content-Type": void 0
      }
    }
  };
  utils$e.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
    defaults$3.headers[method] = {};
  });
  const ignoreDuplicateOf = utils$e.toObjectSet([
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ]);
  const parseHeaders = (rawHeaders) => {
    const parsed = {};
    let key2;
    let val;
    let i2;
    rawHeaders && rawHeaders.split("\n").forEach(function parser2(line) {
      i2 = line.indexOf(":");
      key2 = line.substring(0, i2).trim().toLowerCase();
      val = line.substring(i2 + 1).trim();
      if (!key2 || parsed[key2] && ignoreDuplicateOf[key2]) {
        return;
      }
      if (key2 === "set-cookie") {
        if (parsed[key2]) {
          parsed[key2].push(val);
        } else {
          parsed[key2] = [val];
        }
      } else {
        parsed[key2] = parsed[key2] ? parsed[key2] + ", " + val : val;
      }
    });
    return parsed;
  };
  const $internals = Symbol("internals");
  function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
  }
  function normalizeValue(value) {
    if (value === false || value == null) {
      return value;
    }
    return utils$e.isArray(value) ? value.map(normalizeValue) : String(value);
  }
  function parseTokens(str) {
    const tokens = /* @__PURE__ */ Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match;
    while (match = tokensRE.exec(str)) {
      tokens[match[1]] = match[2];
    }
    return tokens;
  }
  const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
  function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
    if (utils$e.isFunction(filter2)) {
      return filter2.call(this, value, header);
    }
    if (isHeaderNameFilter) {
      value = header;
    }
    if (!utils$e.isString(value)) return;
    if (utils$e.isString(filter2)) {
      return value.indexOf(filter2) !== -1;
    }
    if (utils$e.isRegExp(filter2)) {
      return filter2.test(value);
    }
  }
  function formatHeader(header) {
    return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
  }
  function buildAccessors(obj, header) {
    const accessorName = utils$e.toCamelCase(" " + header);
    ["get", "set", "has"].forEach((methodName) => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }
  class AxiosHeaders {
    constructor(headers) {
      headers && this.set(headers);
    }
    set(header, valueOrRewrite, rewrite) {
      const self2 = this;
      function setHeader(_value, _header, _rewrite) {
        const lHeader = normalizeHeader(_header);
        if (!lHeader) {
          throw new Error("header name must be a non-empty string");
        }
        const key2 = utils$e.findKey(self2, lHeader);
        if (!key2 || self2[key2] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key2] !== false) {
          self2[key2 || _header] = normalizeValue(_value);
        }
      }
      const setHeaders = (headers, _rewrite) => utils$e.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
      if (utils$e.isPlainObject(header) || header instanceof this.constructor) {
        setHeaders(header, valueOrRewrite);
      } else if (utils$e.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
        setHeaders(parseHeaders(header), valueOrRewrite);
      } else if (utils$e.isHeaders(header)) {
        for (const [key2, value] of header.entries()) {
          setHeader(value, key2, rewrite);
        }
      } else {
        header != null && setHeader(valueOrRewrite, header, rewrite);
      }
      return this;
    }
    get(header, parser2) {
      header = normalizeHeader(header);
      if (header) {
        const key2 = utils$e.findKey(this, header);
        if (key2) {
          const value = this[key2];
          if (!parser2) {
            return value;
          }
          if (parser2 === true) {
            return parseTokens(value);
          }
          if (utils$e.isFunction(parser2)) {
            return parser2.call(this, value, key2);
          }
          if (utils$e.isRegExp(parser2)) {
            return parser2.exec(value);
          }
          throw new TypeError("parser must be boolean|regexp|function");
        }
      }
    }
    has(header, matcher) {
      header = normalizeHeader(header);
      if (header) {
        const key2 = utils$e.findKey(this, header);
        return !!(key2 && this[key2] !== void 0 && (!matcher || matchHeaderValue(this, this[key2], key2, matcher)));
      }
      return false;
    }
    delete(header, matcher) {
      const self2 = this;
      let deleted = false;
      function deleteHeader(_header) {
        _header = normalizeHeader(_header);
        if (_header) {
          const key2 = utils$e.findKey(self2, _header);
          if (key2 && (!matcher || matchHeaderValue(self2, self2[key2], key2, matcher))) {
            delete self2[key2];
            deleted = true;
          }
        }
      }
      if (utils$e.isArray(header)) {
        header.forEach(deleteHeader);
      } else {
        deleteHeader(header);
      }
      return deleted;
    }
    clear(matcher) {
      const keys = Object.keys(this);
      let i2 = keys.length;
      let deleted = false;
      while (i2--) {
        const key2 = keys[i2];
        if (!matcher || matchHeaderValue(this, this[key2], key2, matcher, true)) {
          delete this[key2];
          deleted = true;
        }
      }
      return deleted;
    }
    normalize(format2) {
      const self2 = this;
      const headers = {};
      utils$e.forEach(this, (value, header) => {
        const key2 = utils$e.findKey(headers, header);
        if (key2) {
          self2[key2] = normalizeValue(value);
          delete self2[header];
          return;
        }
        const normalized = format2 ? formatHeader(header) : String(header).trim();
        if (normalized !== header) {
          delete self2[header];
        }
        self2[normalized] = normalizeValue(value);
        headers[normalized] = true;
      });
      return this;
    }
    concat(...targets) {
      return this.constructor.concat(this, ...targets);
    }
    toJSON(asStrings) {
      const obj = /* @__PURE__ */ Object.create(null);
      utils$e.forEach(this, (value, header) => {
        value != null && value !== false && (obj[header] = asStrings && utils$e.isArray(value) ? value.join(", ") : value);
      });
      return obj;
    }
    [Symbol.iterator]() {
      return Object.entries(this.toJSON())[Symbol.iterator]();
    }
    toString() {
      return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
    }
    get [Symbol.toStringTag]() {
      return "AxiosHeaders";
    }
    static from(thing) {
      return thing instanceof this ? thing : new this(thing);
    }
    static concat(first, ...targets) {
      const computed = new this(first);
      targets.forEach((target) => computed.set(target));
      return computed;
    }
    static accessor(header) {
      const internals = this[$internals] = this[$internals] = {
        accessors: {}
      };
      const accessors = internals.accessors;
      const prototype2 = this.prototype;
      function defineAccessor(_header) {
        const lHeader = normalizeHeader(_header);
        if (!accessors[lHeader]) {
          buildAccessors(prototype2, _header);
          accessors[lHeader] = true;
        }
      }
      utils$e.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
      return this;
    }
  }
  AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
  utils$e.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key2) => {
    let mapped = key2[0].toUpperCase() + key2.slice(1);
    return {
      get: () => value,
      set(headerValue) {
        this[mapped] = headerValue;
      }
    };
  });
  utils$e.freezeMethods(AxiosHeaders);
  function transformData(fns, response2) {
    const config2 = this || defaults$3;
    const context = response2 || config2;
    const headers = AxiosHeaders.from(context.headers);
    let data = context.data;
    utils$e.forEach(fns, function transform(fn) {
      data = fn.call(config2, data, headers.normalize(), response2 ? response2.status : void 0);
    });
    headers.normalize();
    return data;
  }
  function isCancel(value) {
    return !!(value && value.__CANCEL__);
  }
  function CanceledError(message, config2, request2) {
    AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config2, request2);
    this.name = "CanceledError";
  }
  utils$e.inherits(CanceledError, AxiosError, {
    __CANCEL__: true
  });
  function settle(resolve2, reject, response2) {
    const validateStatus = response2.config.validateStatus;
    if (!response2.status || !validateStatus || validateStatus(response2.status)) {
      resolve2(response2);
    } else {
      reject(new AxiosError(
        "Request failed with status code " + response2.status,
        [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response2.status / 100) - 4],
        response2.config,
        response2.request,
        response2
      ));
    }
  }
  function parseProtocol(url2) {
    const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
    return match && match[1] || "";
  }
  function speedometer(samplesCount, min2) {
    samplesCount = samplesCount || 10;
    const bytes2 = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
    min2 = min2 !== void 0 ? min2 : 1e3;
    return function push2(chunkLength) {
      const now = Date.now();
      const startedAt = timestamps[tail];
      if (!firstSampleTS) {
        firstSampleTS = now;
      }
      bytes2[head] = chunkLength;
      timestamps[head] = now;
      let i2 = tail;
      let bytesCount = 0;
      while (i2 !== head) {
        bytesCount += bytes2[i2++];
        i2 = i2 % samplesCount;
      }
      head = (head + 1) % samplesCount;
      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }
      if (now - firstSampleTS < min2) {
        return;
      }
      const passed = startedAt && now - startedAt;
      return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
    };
  }
  function throttle(fn, freq) {
    let timestamp = 0;
    let threshold = 1e3 / freq;
    let lastArgs;
    let timer;
    const invoke = (args, now = Date.now()) => {
      timestamp = now;
      lastArgs = null;
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      fn.apply(null, args);
    };
    const throttled = (...args) => {
      const now = Date.now();
      const passed = now - timestamp;
      if (passed >= threshold) {
        invoke(args, now);
      } else {
        lastArgs = args;
        if (!timer) {
          timer = setTimeout(() => {
            timer = null;
            invoke(lastArgs);
          }, threshold - passed);
        }
      }
    };
    const flush = () => lastArgs && invoke(lastArgs);
    return [throttled, flush];
  }
  const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
    let bytesNotified = 0;
    const _speedometer = speedometer(50, 250);
    return throttle((e) => {
      const loaded = e.loaded;
      const total = e.lengthComputable ? e.total : void 0;
      const progressBytes = loaded - bytesNotified;
      const rate = _speedometer(progressBytes);
      const inRange = loaded <= total;
      bytesNotified = loaded;
      const data = {
        loaded,
        total,
        progress: total ? loaded / total : void 0,
        bytes: progressBytes,
        rate: rate ? rate : void 0,
        estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
        event: e,
        lengthComputable: total != null,
        [isDownloadStream ? "download" : "upload"]: true
      };
      listener(data);
    }, freq);
  };
  const progressEventDecorator = (total, throttled) => {
    const lengthComputable = total != null;
    return [(loaded) => throttled[0]({
      lengthComputable,
      total,
      loaded
    }), throttled[1]];
  };
  const asyncDecorator = (fn) => (...args) => utils$e.asap(() => fn(...args));
  const isURLSameOrigin = platform.hasStandardBrowserEnv ? (
    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
    function standardBrowserEnv() {
      const msie = platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent);
      const urlParsingNode = document.createElement("a");
      let originURL;
      function resolveURL(url2) {
        let href = url2;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin2(requestURL) {
        const parsed = utils$e.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }()
  ) : (
    // Non standard browser envs (web workers, react-native) lack needed support.
    /* @__PURE__ */ function nonStandardBrowserEnv() {
      return function isURLSameOrigin2() {
        return true;
      };
    }()
  );
  const cookies = platform.hasStandardBrowserEnv ? (
    // Standard browser envs support document.cookie
    {
      write(name2, value, expires, path, domain, secure) {
        const cookie = [name2 + "=" + encodeURIComponent(value)];
        utils$e.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
        utils$e.isString(path) && cookie.push("path=" + path);
        utils$e.isString(domain) && cookie.push("domain=" + domain);
        secure === true && cookie.push("secure");
        document.cookie = cookie.join("; ");
      },
      read(name2) {
        const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)"));
        return match ? decodeURIComponent(match[3]) : null;
      },
      remove(name2) {
        this.write(name2, "", Date.now() - 864e5);
      }
    }
  ) : (
    // Non-standard browser env (web workers, react-native) lack needed support.
    {
      write() {
      },
      read() {
        return null;
      },
      remove() {
      }
    }
  );
  function isAbsoluteURL(url2) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
  }
  function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  }
  function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }
  const headersToObject = (thing) => thing instanceof AxiosHeaders ? __spreadValues({}, thing) : thing;
  function mergeConfig(config1, config2) {
    config2 = config2 || {};
    const config3 = {};
    function getMergedValue(target, source, caseless) {
      if (utils$e.isPlainObject(target) && utils$e.isPlainObject(source)) {
        return utils$e.merge.call({ caseless }, target, source);
      } else if (utils$e.isPlainObject(source)) {
        return utils$e.merge({}, source);
      } else if (utils$e.isArray(source)) {
        return source.slice();
      }
      return source;
    }
    function mergeDeepProperties(a, b, caseless) {
      if (!utils$e.isUndefined(b)) {
        return getMergedValue(a, b, caseless);
      } else if (!utils$e.isUndefined(a)) {
        return getMergedValue(void 0, a, caseless);
      }
    }
    function valueFromConfig2(a, b) {
      if (!utils$e.isUndefined(b)) {
        return getMergedValue(void 0, b);
      }
    }
    function defaultToConfig2(a, b) {
      if (!utils$e.isUndefined(b)) {
        return getMergedValue(void 0, b);
      } else if (!utils$e.isUndefined(a)) {
        return getMergedValue(void 0, a);
      }
    }
    function mergeDirectKeys(a, b, prop) {
      if (prop in config2) {
        return getMergedValue(a, b);
      } else if (prop in config1) {
        return getMergedValue(void 0, a);
      }
    }
    const mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      withXSRFToken: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      beforeRedirect: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
      headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
    };
    utils$e.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
      const merge2 = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge2(config1[prop], config2[prop], prop);
      utils$e.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config3[prop] = configValue);
    });
    return config3;
  }
  const resolveConfig = (config2) => {
    const newConfig = mergeConfig({}, config2);
    let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
    newConfig.headers = headers = AxiosHeaders.from(headers);
    newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config2.params, config2.paramsSerializer);
    if (auth) {
      headers.set(
        "Authorization",
        "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
      );
    }
    let contentType;
    if (utils$e.isFormData(data)) {
      if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
        headers.setContentType(void 0);
      } else if ((contentType = headers.getContentType()) !== false) {
        const [type2, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
        headers.setContentType([type2 || "multipart/form-data", ...tokens].join("; "));
      }
    }
    if (platform.hasStandardBrowserEnv) {
      withXSRFToken && utils$e.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
      if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
        const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
        if (xsrfValue) {
          headers.set(xsrfHeaderName, xsrfValue);
        }
      }
    }
    return newConfig;
  };
  const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
  const xhrAdapter = isXHRAdapterSupported && function(config2) {
    return new Promise(function dispatchXhrRequest(resolve2, reject) {
      const _config = resolveConfig(config2);
      let requestData = _config.data;
      const requestHeaders = AxiosHeaders.from(_config.headers).normalize();
      let { responseType, onUploadProgress, onDownloadProgress } = _config;
      let onCanceled;
      let uploadThrottled, downloadThrottled;
      let flushUpload, flushDownload;
      function done() {
        flushUpload && flushUpload();
        flushDownload && flushDownload();
        _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
        _config.signal && _config.signal.removeEventListener("abort", onCanceled);
      }
      let request2 = new XMLHttpRequest();
      request2.open(_config.method.toUpperCase(), _config.url, true);
      request2.timeout = _config.timeout;
      function onloadend() {
        if (!request2) {
          return;
        }
        const responseHeaders = AxiosHeaders.from(
          "getAllResponseHeaders" in request2 && request2.getAllResponseHeaders()
        );
        const responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
        const response2 = {
          data: responseData,
          status: request2.status,
          statusText: request2.statusText,
          headers: responseHeaders,
          config: config2,
          request: request2
        };
        settle(function _resolve(value) {
          resolve2(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response2);
        request2 = null;
      }
      if ("onloadend" in request2) {
        request2.onloadend = onloadend;
      } else {
        request2.onreadystatechange = function handleLoad() {
          if (!request2 || request2.readyState !== 4) {
            return;
          }
          if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
            return;
          }
          setTimeout(onloadend);
        };
      }
      request2.onabort = function handleAbort() {
        if (!request2) {
          return;
        }
        reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config2, request2));
        request2 = null;
      };
      request2.onerror = function handleError() {
        reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config2, request2));
        request2 = null;
      };
      request2.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
        const transitional = _config.transitional || transitionalDefaults;
        if (_config.timeoutErrorMessage) {
          timeoutErrorMessage = _config.timeoutErrorMessage;
        }
        reject(new AxiosError(
          timeoutErrorMessage,
          transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
          config2,
          request2
        ));
        request2 = null;
      };
      requestData === void 0 && requestHeaders.setContentType(null);
      if ("setRequestHeader" in request2) {
        utils$e.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key2) {
          request2.setRequestHeader(key2, val);
        });
      }
      if (!utils$e.isUndefined(_config.withCredentials)) {
        request2.withCredentials = !!_config.withCredentials;
      }
      if (responseType && responseType !== "json") {
        request2.responseType = _config.responseType;
      }
      if (onDownloadProgress) {
        [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
        request2.addEventListener("progress", downloadThrottled);
      }
      if (onUploadProgress && request2.upload) {
        [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
        request2.upload.addEventListener("progress", uploadThrottled);
        request2.upload.addEventListener("loadend", flushUpload);
      }
      if (_config.cancelToken || _config.signal) {
        onCanceled = (cancel) => {
          if (!request2) {
            return;
          }
          reject(!cancel || cancel.type ? new CanceledError(null, config2, request2) : cancel);
          request2.abort();
          request2 = null;
        };
        _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
        if (_config.signal) {
          _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
        }
      }
      const protocol = parseProtocol(_config.url);
      if (protocol && platform.protocols.indexOf(protocol) === -1) {
        reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config2));
        return;
      }
      request2.send(requestData || null);
    });
  };
  const composeSignals = (signals, timeout) => {
    const { length } = signals = signals ? signals.filter(Boolean) : [];
    if (timeout || length) {
      let controller = new AbortController();
      let aborted;
      const onabort = function(reason) {
        if (!aborted) {
          aborted = true;
          unsubscribe();
          const err = reason instanceof Error ? reason : this.reason;
          controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
        }
      };
      let timer = timeout && setTimeout(() => {
        timer = null;
        onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
      }, timeout);
      const unsubscribe = () => {
        if (signals) {
          timer && clearTimeout(timer);
          timer = null;
          signals.forEach((signal2) => {
            signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
          });
          signals = null;
        }
      };
      signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
      const { signal } = controller;
      signal.unsubscribe = () => utils$e.asap(unsubscribe);
      return signal;
    }
  };
  const streamChunk = function* (chunk, chunkSize) {
    let len2 = chunk.byteLength;
    if (len2 < chunkSize) {
      yield chunk;
      return;
    }
    let pos = 0;
    let end;
    while (pos < len2) {
      end = pos + chunkSize;
      yield chunk.slice(pos, end);
      pos = end;
    }
  };
  const readBytes = function(iterable, chunkSize) {
    return __asyncGenerator(this, null, function* () {
      try {
        for (var iter = __forAwait(readStream(iterable)), more, temp, error2; more = !(temp = yield new __await(iter.next())).done; more = false) {
          const chunk = temp.value;
          yield* __yieldStar(streamChunk(chunk, chunkSize));
        }
      } catch (temp) {
        error2 = [temp];
      } finally {
        try {
          more && (temp = iter.return) && (yield new __await(temp.call(iter)));
        } finally {
          if (error2)
            throw error2[0];
        }
      }
    });
  };
  const readStream = function(stream) {
    return __asyncGenerator(this, null, function* () {
      if (stream[Symbol.asyncIterator]) {
        yield* __yieldStar(stream);
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value } = yield new __await(reader.read());
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        yield new __await(reader.cancel());
      }
    });
  };
  const trackStream = (stream, chunkSize, onProgress, onFinish) => {
    const iterator2 = readBytes(stream, chunkSize);
    let bytes2 = 0;
    let done;
    let _onFinish = (e) => {
      if (!done) {
        done = true;
        onFinish && onFinish(e);
      }
    };
    return new ReadableStream({
      pull(controller) {
        return __async(this, null, function* () {
          try {
            const { done: done2, value } = yield iterator2.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len2 = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes2 += len2;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        });
      },
      cancel(reason) {
        _onFinish(reason);
        return iterator2.return();
      }
    }, {
      highWaterMark: 2
    });
  };
  const isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
  const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
  const encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : (str) => __async(this, null, function* () {
    return new Uint8Array(yield new Response(str).arrayBuffer());
  }));
  const test = (fn, ...args) => {
    try {
      return !!fn(...args);
    } catch (e) {
      return false;
    }
  };
  const supportsRequestStream = isReadableStreamSupported && test(() => {
    let duplexAccessed = false;
    const hasContentType = new Request(platform.origin, {
      body: new ReadableStream(),
      method: "POST",
      get duplex() {
        duplexAccessed = true;
        return "half";
      }
    }).headers.has("Content-Type");
    return duplexAccessed && !hasContentType;
  });
  const DEFAULT_CHUNK_SIZE = 64 * 1024;
  const supportsResponseStream = isReadableStreamSupported && test(() => utils$e.isReadableStream(new Response("").body));
  const resolvers = {
    stream: supportsResponseStream && ((res) => res.body)
  };
  isFetchSupported && ((res) => {
    ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type2) => {
      !resolvers[type2] && (resolvers[type2] = utils$e.isFunction(res[type2]) ? (res2) => res2[type2]() : (_, config2) => {
        throw new AxiosError(`Response type '${type2}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config2);
      });
    });
  })(new Response());
  const getBodyLength = (body) => __async(this, null, function* () {
    if (body == null) {
      return 0;
    }
    if (utils$e.isBlob(body)) {
      return body.size;
    }
    if (utils$e.isSpecCompliantForm(body)) {
      const _request = new Request(platform.origin, {
        method: "POST",
        body
      });
      return (yield _request.arrayBuffer()).byteLength;
    }
    if (utils$e.isArrayBufferView(body) || utils$e.isArrayBuffer(body)) {
      return body.byteLength;
    }
    if (utils$e.isURLSearchParams(body)) {
      body = body + "";
    }
    if (utils$e.isString(body)) {
      return (yield encodeText(body)).byteLength;
    }
  });
  const resolveBodyLength = (headers, body) => __async(this, null, function* () {
    const length = utils$e.toFiniteNumber(headers.getContentLength());
    return length == null ? getBodyLength(body) : length;
  });
  const fetchAdapter = isFetchSupported && ((config2) => __async(this, null, function* () {
    let {
      url: url2,
      method,
      data,
      signal,
      cancelToken,
      timeout,
      onDownloadProgress,
      onUploadProgress,
      responseType,
      headers,
      withCredentials = "same-origin",
      fetchOptions
    } = resolveConfig(config2);
    responseType = responseType ? (responseType + "").toLowerCase() : "text";
    let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
    let request2;
    const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
    });
    let requestContentLength;
    try {
      if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = yield resolveBodyLength(headers, data)) !== 0) {
        let _request = new Request(url2, {
          method: "POST",
          body: data,
          duplex: "half"
        });
        let contentTypeHeader;
        if (utils$e.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
          headers.setContentType(contentTypeHeader);
        }
        if (_request.body) {
          const [onProgress, flush] = progressEventDecorator(
            requestContentLength,
            progressEventReducer(asyncDecorator(onUploadProgress))
          );
          data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
        }
      }
      if (!utils$e.isString(withCredentials)) {
        withCredentials = withCredentials ? "include" : "omit";
      }
      const isCredentialsSupported = "credentials" in Request.prototype;
      request2 = new Request(url2, __spreadProps(__spreadValues({}, fetchOptions), {
        signal: composedSignal,
        method: method.toUpperCase(),
        headers: headers.normalize().toJSON(),
        body: data,
        duplex: "half",
        credentials: isCredentialsSupported ? withCredentials : void 0
      }));
      let response2 = yield fetch(request2);
      const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
      if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
        const options = {};
        ["status", "statusText", "headers"].forEach((prop) => {
          options[prop] = response2[prop];
        });
        const responseContentLength = utils$e.toFiniteNumber(response2.headers.get("content-length"));
        const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
          responseContentLength,
          progressEventReducer(asyncDecorator(onDownloadProgress), true)
        ) || [];
        response2 = new Response(
          trackStream(response2.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
            flush && flush();
            unsubscribe && unsubscribe();
          }),
          options
        );
      }
      responseType = responseType || "text";
      let responseData = yield resolvers[utils$e.findKey(resolvers, responseType) || "text"](response2, config2);
      !isStreamResponse && unsubscribe && unsubscribe();
      return yield new Promise((resolve2, reject) => {
        settle(resolve2, reject, {
          data: responseData,
          headers: AxiosHeaders.from(response2.headers),
          status: response2.status,
          statusText: response2.statusText,
          config: config2,
          request: request2
        });
      });
    } catch (err) {
      unsubscribe && unsubscribe();
      if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
        throw Object.assign(
          new AxiosError("Network Error", AxiosError.ERR_NETWORK, config2, request2),
          {
            cause: err.cause || err
          }
        );
      }
      throw AxiosError.from(err, err && err.code, config2, request2);
    }
  }));
  const knownAdapters = {
    http: httpAdapter,
    xhr: xhrAdapter,
    fetch: fetchAdapter
  };
  utils$e.forEach(knownAdapters, (fn, value) => {
    if (fn) {
      try {
        Object.defineProperty(fn, "name", { value });
      } catch (e) {
      }
      Object.defineProperty(fn, "adapterName", { value });
    }
  });
  const renderReason = (reason) => `- ${reason}`;
  const isResolvedHandle = (adapter) => utils$e.isFunction(adapter) || adapter === null || adapter === false;
  const adapters = {
    getAdapter: (adapters2) => {
      adapters2 = utils$e.isArray(adapters2) ? adapters2 : [adapters2];
      const { length } = adapters2;
      let nameOrAdapter;
      let adapter;
      const rejectedReasons = {};
      for (let i2 = 0; i2 < length; i2++) {
        nameOrAdapter = adapters2[i2];
        let id2;
        adapter = nameOrAdapter;
        if (!isResolvedHandle(nameOrAdapter)) {
          adapter = knownAdapters[(id2 = String(nameOrAdapter)).toLowerCase()];
          if (adapter === void 0) {
            throw new AxiosError(`Unknown adapter '${id2}'`);
          }
        }
        if (adapter) {
          break;
        }
        rejectedReasons[id2 || "#" + i2] = adapter;
      }
      if (!adapter) {
        const reasons = Object.entries(rejectedReasons).map(
          ([id2, state2]) => `adapter ${id2} ` + (state2 === false ? "is not supported by the environment" : "is not available in the build")
        );
        let s2 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
        throw new AxiosError(
          `There is no suitable adapter to dispatch the request ` + s2,
          "ERR_NOT_SUPPORT"
        );
      }
      return adapter;
    },
    adapters: knownAdapters
  };
  function throwIfCancellationRequested(config2) {
    if (config2.cancelToken) {
      config2.cancelToken.throwIfRequested();
    }
    if (config2.signal && config2.signal.aborted) {
      throw new CanceledError(null, config2);
    }
  }
  function dispatchRequest(config2) {
    throwIfCancellationRequested(config2);
    config2.headers = AxiosHeaders.from(config2.headers);
    config2.data = transformData.call(
      config2,
      config2.transformRequest
    );
    if (["post", "put", "patch"].indexOf(config2.method) !== -1) {
      config2.headers.setContentType("application/x-www-form-urlencoded", false);
    }
    const adapter = adapters.getAdapter(config2.adapter || defaults$3.adapter);
    return adapter(config2).then(function onAdapterResolution(response2) {
      throwIfCancellationRequested(config2);
      response2.data = transformData.call(
        config2,
        config2.transformResponse,
        response2
      );
      response2.headers = AxiosHeaders.from(response2.headers);
      return response2;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config2);
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config2,
            config2.transformResponse,
            reason.response
          );
          reason.response.headers = AxiosHeaders.from(reason.response.headers);
        }
      }
      return Promise.reject(reason);
    });
  }
  const VERSION = "1.7.7";
  const validators$1 = {};
  ["object", "boolean", "number", "function", "string", "symbol"].forEach((type2, i2) => {
    validators$1[type2] = function validator2(thing) {
      return typeof thing === type2 || "a" + (i2 < 1 ? "n " : " ") + type2;
    };
  });
  const deprecatedWarnings = {};
  validators$1.transitional = function transitional(validator2, version2, message) {
    function formatMessage(opt, desc) {
      return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    return (value, opt, opts) => {
      if (validator2 === false) {
        throw new AxiosError(
          formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
          AxiosError.ERR_DEPRECATED
        );
      }
      if (version2 && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        console.warn(
          formatMessage(
            opt,
            " has been deprecated since v" + version2 + " and will be removed in the near future"
          )
        );
      }
      return validator2 ? validator2(value, opt, opts) : true;
    };
  };
  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") {
      throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
    }
    const keys = Object.keys(options);
    let i2 = keys.length;
    while (i2-- > 0) {
      const opt = keys[i2];
      const validator2 = schema[opt];
      if (validator2) {
        const value = options[opt];
        const result = value === void 0 || validator2(value, opt, options);
        if (result !== true) {
          throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
      }
    }
  }
  const validator = {
    assertOptions,
    validators: validators$1
  };
  const validators = validator.validators;
  class Axios {
    constructor(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    /**
     * Dispatch a request
     *
     * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
     * @param {?Object} config
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    request(configOrUrl, config2) {
      return __async(this, null, function* () {
        try {
          return yield this._request(configOrUrl, config2);
        } catch (err) {
          if (err instanceof Error) {
            let dummy;
            Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      });
    }
    _request(configOrUrl, config2) {
      if (typeof configOrUrl === "string") {
        config2 = config2 || {};
        config2.url = configOrUrl;
      } else {
        config2 = configOrUrl || {};
      }
      config2 = mergeConfig(this.defaults, config2);
      const { transitional, paramsSerializer, headers } = config2;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      if (paramsSerializer != null) {
        if (utils$e.isFunction(paramsSerializer)) {
          config2.paramsSerializer = {
            serialize: paramsSerializer
          };
        } else {
          validator.assertOptions(paramsSerializer, {
            encode: validators.function,
            serialize: validators.function
          }, true);
        }
      }
      config2.method = (config2.method || this.defaults.method || "get").toLowerCase();
      let contextHeaders = headers && utils$e.merge(
        headers.common,
        headers[config2.method]
      );
      headers && utils$e.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        (method) => {
          delete headers[method];
        }
      );
      config2.headers = AxiosHeaders.concat(contextHeaders, headers);
      const requestInterceptorChain = [];
      let synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      const responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      let promise2;
      let i2 = 0;
      let len2;
      if (!synchronousRequestInterceptors) {
        const chain = [dispatchRequest.bind(this), void 0];
        chain.unshift.apply(chain, requestInterceptorChain);
        chain.push.apply(chain, responseInterceptorChain);
        len2 = chain.length;
        promise2 = Promise.resolve(config2);
        while (i2 < len2) {
          promise2 = promise2.then(chain[i2++], chain[i2++]);
        }
        return promise2;
      }
      len2 = requestInterceptorChain.length;
      let newConfig = config2;
      i2 = 0;
      while (i2 < len2) {
        const onFulfilled = requestInterceptorChain[i2++];
        const onRejected = requestInterceptorChain[i2++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error2) {
          onRejected.call(this, error2);
          break;
        }
      }
      try {
        promise2 = dispatchRequest.call(this, newConfig);
      } catch (error2) {
        return Promise.reject(error2);
      }
      i2 = 0;
      len2 = responseInterceptorChain.length;
      while (i2 < len2) {
        promise2 = promise2.then(responseInterceptorChain[i2++], responseInterceptorChain[i2++]);
      }
      return promise2;
    }
    getUri(config2) {
      config2 = mergeConfig(this.defaults, config2);
      const fullPath = buildFullPath(config2.baseURL, config2.url);
      return buildURL(fullPath, config2.params, config2.paramsSerializer);
    }
  }
  utils$e.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
    Axios.prototype[method] = function(url2, config2) {
      return this.request(mergeConfig(config2 || {}, {
        method,
        url: url2,
        data: (config2 || {}).data
      }));
    };
  });
  utils$e.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
    function generateHTTPMethod(isForm) {
      return function httpMethod(url2, data, config2) {
        return this.request(mergeConfig(config2 || {}, {
          method,
          headers: isForm ? {
            "Content-Type": "multipart/form-data"
          } : {},
          url: url2,
          data
        }));
      };
    }
    Axios.prototype[method] = generateHTTPMethod();
    Axios.prototype[method + "Form"] = generateHTTPMethod(true);
  });
  class CancelToken {
    constructor(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      let resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve2) {
        resolvePromise = resolve2;
      });
      const token = this;
      this.promise.then((cancel) => {
        if (!token._listeners) return;
        let i2 = token._listeners.length;
        while (i2-- > 0) {
          token._listeners[i2](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = (onfulfilled) => {
        let _resolve;
        const promise2 = new Promise((resolve2) => {
          token.subscribe(resolve2);
          _resolve = resolve2;
        }).then(onfulfilled);
        promise2.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise2;
      };
      executor(function cancel(message, config2, request2) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError(message, config2, request2);
        resolvePromise(token.reason);
      });
    }
    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }
    /**
     * Subscribe to the cancel signal
     */
    subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    }
    /**
     * Unsubscribe from the cancel signal
     */
    unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      const index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    }
    toAbortSignal() {
      const controller = new AbortController();
      const abort = (err) => {
        controller.abort(err);
      };
      this.subscribe(abort);
      controller.signal.unsubscribe = () => this.unsubscribe(abort);
      return controller.signal;
    }
    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    static source() {
      let cancel;
      const token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    }
  }
  function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }
  function isAxiosError(payload) {
    return utils$e.isObject(payload) && payload.isAxiosError === true;
  }
  const HttpStatusCode = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511
  };
  Object.entries(HttpStatusCode).forEach(([key2, value]) => {
    HttpStatusCode[value] = key2;
  });
  function createInstance(defaultConfig) {
    const context = new Axios(defaultConfig);
    const instance = bind(Axios.prototype.request, context);
    utils$e.extend(instance, Axios.prototype, context, { allOwnKeys: true });
    utils$e.extend(instance, context, null, { allOwnKeys: true });
    instance.create = function create2(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
  }
  const axios = createInstance(defaults$3);
  axios.Axios = Axios;
  axios.CanceledError = CanceledError;
  axios.CancelToken = CancelToken;
  axios.isCancel = isCancel;
  axios.VERSION = VERSION;
  axios.toFormData = toFormData;
  axios.AxiosError = AxiosError;
  axios.Cancel = axios.CanceledError;
  axios.all = function all(promises) {
    return Promise.all(promises);
  };
  axios.spread = spread;
  axios.isAxiosError = isAxiosError;
  axios.mergeConfig = mergeConfig;
  axios.AxiosHeaders = AxiosHeaders;
  axios.formToJSON = (thing) => formDataToJSON(utils$e.isHTMLForm(thing) ? new FormData(thing) : thing);
  axios.getAdapter = adapters.getAdapter;
  axios.HttpStatusCode = HttpStatusCode;
  axios.default = axios;
  var sha224$2 = { exports: {} };
  function commonjsRequire(path) {
    throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }
  var core = { exports: {} };
  var cryptoBrowserify = {};
  var browser$e = { exports: {} };
  var safeBuffer$1 = { exports: {} };
  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
  var hasRequiredSafeBuffer$1;
  function requireSafeBuffer$1() {
    if (hasRequiredSafeBuffer$1) return safeBuffer$1.exports;
    hasRequiredSafeBuffer$1 = 1;
    (function(module, exports2) {
      var buffer2 = require$$0$5;
      var Buffer2 = buffer2.Buffer;
      function copyProps(src, dst) {
        for (var key2 in src) {
          dst[key2] = src[key2];
        }
      }
      if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
        module.exports = buffer2;
      } else {
        copyProps(buffer2, exports2);
        exports2.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer2(arg, encodingOrOffset, length);
      }
      SafeBuffer.prototype = Object.create(Buffer2.prototype);
      copyProps(Buffer2, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer2(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size2, fill, encoding2) {
        if (typeof size2 !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer2(size2);
        if (fill !== void 0) {
          if (typeof encoding2 === "string") {
            buf.fill(fill, encoding2);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size2) {
        if (typeof size2 !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer2(size2);
      };
      SafeBuffer.allocUnsafeSlow = function(size2) {
        if (typeof size2 !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer2.SlowBuffer(size2);
      };
    })(safeBuffer$1, safeBuffer$1.exports);
    return safeBuffer$1.exports;
  }
  var hasRequiredBrowser$d;
  function requireBrowser$d() {
    if (hasRequiredBrowser$d) return browser$e.exports;
    hasRequiredBrowser$d = 1;
    var MAX_BYTES = 65536;
    var MAX_UINT32 = 4294967295;
    function oldBrowser() {
      throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
    }
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var crypto2 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
    if (crypto2 && crypto2.getRandomValues) {
      browser$e.exports = randomBytes;
    } else {
      browser$e.exports = oldBrowser;
    }
    function randomBytes(size2, cb) {
      if (size2 > MAX_UINT32) throw new RangeError("requested too many random bytes");
      var bytes2 = Buffer2.allocUnsafe(size2);
      if (size2 > 0) {
        if (size2 > MAX_BYTES) {
          for (var generated = 0; generated < size2; generated += MAX_BYTES) {
            crypto2.getRandomValues(bytes2.slice(generated, generated + MAX_BYTES));
          }
        } else {
          crypto2.getRandomValues(bytes2);
        }
      }
      if (typeof cb === "function") {
        return process$1.nextTick(function() {
          cb(null, bytes2);
        });
      }
      return bytes2;
    }
    return browser$e.exports;
  }
  var readableBrowser$1 = { exports: {} };
  var streamBrowser$1;
  var hasRequiredStreamBrowser$1;
  function requireStreamBrowser$1() {
    if (hasRequiredStreamBrowser$1) return streamBrowser$1;
    hasRequiredStreamBrowser$1 = 1;
    streamBrowser$1 = eventsExports.EventEmitter;
    return streamBrowser$1;
  }
  var util$1 = {};
  var types$3 = {};
  var shams$1;
  var hasRequiredShams$1;
  function requireShams$1() {
    if (hasRequiredShams$1) return shams$1;
    hasRequiredShams$1 = 1;
    shams$1 = function hasSymbols2() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (var _ in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = (
          /** @type {PropertyDescriptor} */
          Object.getOwnPropertyDescriptor(obj, sym)
        );
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
    return shams$1;
  }
  var shams;
  var hasRequiredShams;
  function requireShams() {
    if (hasRequiredShams) return shams;
    hasRequiredShams = 1;
    var hasSymbols2 = requireShams$1();
    shams = function hasToStringTagShams() {
      return hasSymbols2() && !!Symbol.toStringTag;
    };
    return shams;
  }
  var esObjectAtoms;
  var hasRequiredEsObjectAtoms;
  function requireEsObjectAtoms() {
    if (hasRequiredEsObjectAtoms) return esObjectAtoms;
    hasRequiredEsObjectAtoms = 1;
    esObjectAtoms = Object;
    return esObjectAtoms;
  }
  var esErrors;
  var hasRequiredEsErrors;
  function requireEsErrors() {
    if (hasRequiredEsErrors) return esErrors;
    hasRequiredEsErrors = 1;
    esErrors = Error;
    return esErrors;
  }
  var _eval;
  var hasRequired_eval;
  function require_eval() {
    if (hasRequired_eval) return _eval;
    hasRequired_eval = 1;
    _eval = EvalError;
    return _eval;
  }
  var range$1;
  var hasRequiredRange$1;
  function requireRange$1() {
    if (hasRequiredRange$1) return range$1;
    hasRequiredRange$1 = 1;
    range$1 = RangeError;
    return range$1;
  }
  var ref;
  var hasRequiredRef;
  function requireRef() {
    if (hasRequiredRef) return ref;
    hasRequiredRef = 1;
    ref = ReferenceError;
    return ref;
  }
  var syntax;
  var hasRequiredSyntax;
  function requireSyntax() {
    if (hasRequiredSyntax) return syntax;
    hasRequiredSyntax = 1;
    syntax = SyntaxError;
    return syntax;
  }
  var type = TypeError;
  var uri;
  var hasRequiredUri;
  function requireUri() {
    if (hasRequiredUri) return uri;
    hasRequiredUri = 1;
    uri = URIError;
    return uri;
  }
  var abs;
  var hasRequiredAbs;
  function requireAbs() {
    if (hasRequiredAbs) return abs;
    hasRequiredAbs = 1;
    abs = Math.abs;
    return abs;
  }
  var floor;
  var hasRequiredFloor;
  function requireFloor() {
    if (hasRequiredFloor) return floor;
    hasRequiredFloor = 1;
    floor = Math.floor;
    return floor;
  }
  var max$1;
  var hasRequiredMax;
  function requireMax() {
    if (hasRequiredMax) return max$1;
    hasRequiredMax = 1;
    max$1 = Math.max;
    return max$1;
  }
  var min$1;
  var hasRequiredMin;
  function requireMin() {
    if (hasRequiredMin) return min$1;
    hasRequiredMin = 1;
    min$1 = Math.min;
    return min$1;
  }
  var pow$1;
  var hasRequiredPow;
  function requirePow() {
    if (hasRequiredPow) return pow$1;
    hasRequiredPow = 1;
    pow$1 = Math.pow;
    return pow$1;
  }
  var round;
  var hasRequiredRound;
  function requireRound() {
    if (hasRequiredRound) return round;
    hasRequiredRound = 1;
    round = Math.round;
    return round;
  }
  var _isNaN;
  var hasRequired_isNaN;
  function require_isNaN() {
    if (hasRequired_isNaN) return _isNaN;
    hasRequired_isNaN = 1;
    _isNaN = Number.isNaN || function isNaN2(a) {
      return a !== a;
    };
    return _isNaN;
  }
  var sign$1;
  var hasRequiredSign$1;
  function requireSign$1() {
    if (hasRequiredSign$1) return sign$1;
    hasRequiredSign$1 = 1;
    var $isNaN = require_isNaN();
    sign$1 = function sign2(number2) {
      if ($isNaN(number2) || number2 === 0) {
        return number2;
      }
      return number2 < 0 ? -1 : 1;
    };
    return sign$1;
  }
  var gOPD;
  var hasRequiredGOPD;
  function requireGOPD() {
    if (hasRequiredGOPD) return gOPD;
    hasRequiredGOPD = 1;
    gOPD = Object.getOwnPropertyDescriptor;
    return gOPD;
  }
  var gopd;
  var hasRequiredGopd;
  function requireGopd() {
    if (hasRequiredGopd) return gopd;
    hasRequiredGopd = 1;
    var $gOPD = requireGOPD();
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    gopd = $gOPD;
    return gopd;
  }
  var esDefineProperty;
  var hasRequiredEsDefineProperty;
  function requireEsDefineProperty() {
    if (hasRequiredEsDefineProperty) return esDefineProperty;
    hasRequiredEsDefineProperty = 1;
    var $defineProperty = Object.defineProperty || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    esDefineProperty = $defineProperty;
    return esDefineProperty;
  }
  var hasSymbols;
  var hasRequiredHasSymbols;
  function requireHasSymbols() {
    if (hasRequiredHasSymbols) return hasSymbols;
    hasRequiredHasSymbols = 1;
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = requireShams$1();
    hasSymbols = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
    return hasSymbols;
  }
  var Reflect_getPrototypeOf;
  var hasRequiredReflect_getPrototypeOf;
  function requireReflect_getPrototypeOf() {
    if (hasRequiredReflect_getPrototypeOf) return Reflect_getPrototypeOf;
    hasRequiredReflect_getPrototypeOf = 1;
    Reflect_getPrototypeOf = typeof Reflect !== "undefined" && Reflect.getPrototypeOf || null;
    return Reflect_getPrototypeOf;
  }
  var Object_getPrototypeOf;
  var hasRequiredObject_getPrototypeOf;
  function requireObject_getPrototypeOf() {
    if (hasRequiredObject_getPrototypeOf) return Object_getPrototypeOf;
    hasRequiredObject_getPrototypeOf = 1;
    var $Object = requireEsObjectAtoms();
    Object_getPrototypeOf = $Object.getPrototypeOf || null;
    return Object_getPrototypeOf;
  }
  var implementation$4;
  var hasRequiredImplementation$4;
  function requireImplementation$4() {
    if (hasRequiredImplementation$4) return implementation$4;
    hasRequiredImplementation$4 = 1;
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr2 = Object.prototype.toString;
    var max2 = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i2 = 0; i2 < a.length; i2 += 1) {
        arr[i2] = a[i2];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i2 = offset, j = 0; i2 < arrLike.length; i2 += 1, j += 1) {
        arr[j] = arrLike[i2];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i2 = 0; i2 < arr.length; i2 += 1) {
        str += arr[i2];
        if (i2 + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    implementation$4 = function bind2(that) {
      var target = this;
      if (typeof target !== "function" || toStr2.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max2(0, target.length - args.length);
      var boundArgs = [];
      for (var i2 = 0; i2 < boundLength; i2++) {
        boundArgs[i2] = "$" + i2;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
    return implementation$4;
  }
  var functionBind;
  var hasRequiredFunctionBind;
  function requireFunctionBind() {
    if (hasRequiredFunctionBind) return functionBind;
    hasRequiredFunctionBind = 1;
    var implementation2 = requireImplementation$4();
    functionBind = Function.prototype.bind || implementation2;
    return functionBind;
  }
  var functionCall;
  var hasRequiredFunctionCall;
  function requireFunctionCall() {
    if (hasRequiredFunctionCall) return functionCall;
    hasRequiredFunctionCall = 1;
    functionCall = Function.prototype.call;
    return functionCall;
  }
  var functionApply;
  var hasRequiredFunctionApply;
  function requireFunctionApply() {
    if (hasRequiredFunctionApply) return functionApply;
    hasRequiredFunctionApply = 1;
    functionApply = Function.prototype.apply;
    return functionApply;
  }
  var reflectApply;
  var hasRequiredReflectApply;
  function requireReflectApply() {
    if (hasRequiredReflectApply) return reflectApply;
    hasRequiredReflectApply = 1;
    reflectApply = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
    return reflectApply;
  }
  var actualApply;
  var hasRequiredActualApply;
  function requireActualApply() {
    if (hasRequiredActualApply) return actualApply;
    hasRequiredActualApply = 1;
    var bind2 = requireFunctionBind();
    var $apply = requireFunctionApply();
    var $call = requireFunctionCall();
    var $reflectApply = requireReflectApply();
    actualApply = $reflectApply || bind2.call($call, $apply);
    return actualApply;
  }
  var callBindApplyHelpers;
  var hasRequiredCallBindApplyHelpers;
  function requireCallBindApplyHelpers() {
    if (hasRequiredCallBindApplyHelpers) return callBindApplyHelpers;
    hasRequiredCallBindApplyHelpers = 1;
    var bind2 = requireFunctionBind();
    var $TypeError2 = type;
    var $call = requireFunctionCall();
    var $actualApply = requireActualApply();
    callBindApplyHelpers = function callBindBasic(args) {
      if (args.length < 1 || typeof args[0] !== "function") {
        throw new $TypeError2("a function is required");
      }
      return $actualApply(bind2, $call, args);
    };
    return callBindApplyHelpers;
  }
  var get$1;
  var hasRequiredGet;
  function requireGet() {
    if (hasRequiredGet) return get$1;
    hasRequiredGet = 1;
    var callBind2 = requireCallBindApplyHelpers();
    var gOPD2 = requireGopd();
    var hasProtoAccessor;
    try {
      hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */
      [].__proto__ === Array.prototype;
    } catch (e) {
      if (!e || typeof e !== "object" || !("code" in e) || e.code !== "ERR_PROTO_ACCESS") {
        throw e;
      }
    }
    var desc = !!hasProtoAccessor && gOPD2 && gOPD2(
      Object.prototype,
      /** @type {keyof typeof Object.prototype} */
      "__proto__"
    );
    var $Object = Object;
    var $getPrototypeOf = $Object.getPrototypeOf;
    get$1 = desc && typeof desc.get === "function" ? callBind2([desc.get]) : typeof $getPrototypeOf === "function" ? (
      /** @type {import('./get')} */
      function getDunder(value) {
        return $getPrototypeOf(value == null ? value : $Object(value));
      }
    ) : false;
    return get$1;
  }
  var getProto;
  var hasRequiredGetProto;
  function requireGetProto() {
    if (hasRequiredGetProto) return getProto;
    hasRequiredGetProto = 1;
    var reflectGetProto = requireReflect_getPrototypeOf();
    var originalGetProto = requireObject_getPrototypeOf();
    var getDunderProto = requireGet();
    getProto = reflectGetProto ? function getProto2(O) {
      return reflectGetProto(O);
    } : originalGetProto ? function getProto2(O) {
      if (!O || typeof O !== "object" && typeof O !== "function") {
        throw new TypeError("getProto: not an object");
      }
      return originalGetProto(O);
    } : getDunderProto ? function getProto2(O) {
      return getDunderProto(O);
    } : null;
    return getProto;
  }
  var hasown;
  var hasRequiredHasown;
  function requireHasown() {
    if (hasRequiredHasown) return hasown;
    hasRequiredHasown = 1;
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind2 = requireFunctionBind();
    hasown = bind2.call(call, $hasOwn);
    return hasown;
  }
  var getIntrinsic;
  var hasRequiredGetIntrinsic;
  function requireGetIntrinsic() {
    if (hasRequiredGetIntrinsic) return getIntrinsic;
    hasRequiredGetIntrinsic = 1;
    var undefined$1;
    var $Object = requireEsObjectAtoms();
    var $Error = requireEsErrors();
    var $EvalError = require_eval();
    var $RangeError = requireRange$1();
    var $ReferenceError = requireRef();
    var $SyntaxError = requireSyntax();
    var $TypeError2 = type;
    var $URIError = requireUri();
    var abs2 = requireAbs();
    var floor2 = requireFloor();
    var max2 = requireMax();
    var min2 = requireMin();
    var pow3 = requirePow();
    var round2 = requireRound();
    var sign2 = requireSign$1();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = requireGopd();
    var $defineProperty = requireEsDefineProperty();
    var throwTypeError = function() {
      throw new $TypeError2();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols2 = requireHasSymbols()();
    var getProto2 = requireGetProto();
    var $ObjectGPO = requireObject_getPrototypeOf();
    var $ReflectGPO = requireReflect_getPrototypeOf();
    var $apply = requireFunctionApply();
    var $call = requireFunctionCall();
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto2 ? undefined$1 : getProto2(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols2 && getProto2 ? getProto2([][Symbol.iterator]()) : undefined$1,
      "%AsyncFromSyncIteratorPrototype%": undefined$1,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined$1 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined$1 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols2 && getProto2 ? getProto2(getProto2([][Symbol.iterator]())) : undefined$1,
      "%JSON%": typeof JSON === "object" ? JSON : undefined$1,
      "%Map%": typeof Map === "undefined" ? undefined$1 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols2 || !getProto2 ? undefined$1 : getProto2((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": $Object,
      "%Object.getOwnPropertyDescriptor%": $gOPD,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined$1 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols2 || !getProto2 ? undefined$1 : getProto2((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols2 && getProto2 ? getProto2(""[Symbol.iterator]()) : undefined$1,
      "%Symbol%": hasSymbols2 ? Symbol : undefined$1,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError2,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet,
      "%Function.prototype.call%": $call,
      "%Function.prototype.apply%": $apply,
      "%Object.defineProperty%": $defineProperty,
      "%Object.getPrototypeOf%": $ObjectGPO,
      "%Math.abs%": abs2,
      "%Math.floor%": floor2,
      "%Math.max%": max2,
      "%Math.min%": min2,
      "%Math.pow%": pow3,
      "%Math.round%": round2,
      "%Math.sign%": sign2,
      "%Reflect.getPrototypeOf%": $ReflectGPO
    };
    if (getProto2) {
      try {
        null.error;
      } catch (e) {
        var errorProto = getProto2(getProto2(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var doEval = function doEval2(name2) {
      var value;
      if (name2 === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name2 === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name2 === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name2 === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name2 === "%AsyncIteratorPrototype%") {
        var gen2 = doEval2("%AsyncGenerator%");
        if (gen2 && getProto2) {
          value = getProto2(gen2.prototype);
        }
      }
      INTRINSICS[name2] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind2 = requireFunctionBind();
    var hasOwn2 = requireHasown();
    var $concat2 = bind2.call($call, Array.prototype.concat);
    var $spliceApply = bind2.call($apply, Array.prototype.splice);
    var $replace2 = bind2.call($call, String.prototype.replace);
    var $strSlice = bind2.call($call, String.prototype.slice);
    var $exec = bind2.call($call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string2) {
      var first = $strSlice(string2, 0, 1);
      var last = $strSlice(string2, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace2(string2, rePropName, function(match, number2, quote2, subString) {
        result[result.length] = quote2 ? $replace2(subString, reEscapeChar, "$1") : number2 || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name2, allowMissing) {
      var intrinsicName = name2;
      var alias;
      if (hasOwn2(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn2(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError2("intrinsic " + name2 + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name2 + " does not exist!");
    };
    getIntrinsic = function GetIntrinsic2(name2, allowMissing) {
      if (typeof name2 !== "string" || name2.length === 0) {
        throw new $TypeError2("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError2('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name2) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name2);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat2([0, 1], alias));
      }
      for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
        var part = parts[i2];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn2(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError2("base intrinsic for " + name2 + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i2 + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn2(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
    return getIntrinsic;
  }
  var callBound$3;
  var hasRequiredCallBound$1;
  function requireCallBound$1() {
    if (hasRequiredCallBound$1) return callBound$3;
    hasRequiredCallBound$1 = 1;
    var GetIntrinsic2 = requireGetIntrinsic();
    var callBindBasic = requireCallBindApplyHelpers();
    var $indexOf = callBindBasic([GetIntrinsic2("%String.prototype.indexOf%")]);
    callBound$3 = function callBoundIntrinsic(name2, allowMissing) {
      var intrinsic = (
        /** @type {Parameters<typeof callBindBasic>[0][0]} */
        GetIntrinsic2(name2, !!allowMissing)
      );
      if (typeof intrinsic === "function" && $indexOf(name2, ".prototype.") > -1) {
        return callBindBasic([intrinsic]);
      }
      return intrinsic;
    };
    return callBound$3;
  }
  var isArguments$1;
  var hasRequiredIsArguments$1;
  function requireIsArguments$1() {
    if (hasRequiredIsArguments$1) return isArguments$1;
    hasRequiredIsArguments$1 = 1;
    var hasToStringTag = requireShams()();
    var callBound2 = requireCallBound$1();
    var $toString = callBound2("Object.prototype.toString");
    var isStandardArguments = function isArguments2(value) {
      if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
        return false;
      }
      return $toString(value) === "[object Arguments]";
    };
    var isLegacyArguments = function isArguments2(value) {
      if (isStandardArguments(value)) {
        return true;
      }
      return value !== null && typeof value === "object" && "length" in value && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && "callee" in value && $toString(value.callee) === "[object Function]";
    };
    var supportsStandardArguments = function() {
      return isStandardArguments(arguments);
    }();
    isStandardArguments.isLegacyArguments = isLegacyArguments;
    isArguments$1 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
    return isArguments$1;
  }
  var isRegex;
  var hasRequiredIsRegex;
  function requireIsRegex() {
    if (hasRequiredIsRegex) return isRegex;
    hasRequiredIsRegex = 1;
    var callBound2 = requireCallBound$1();
    var hasToStringTag = requireShams()();
    var hasOwn2 = requireHasown();
    var gOPD2 = requireGopd();
    var fn;
    if (hasToStringTag) {
      var $exec = callBound2("RegExp.prototype.exec");
      var isRegexMarker = {};
      var throwRegexMarker = function() {
        throw isRegexMarker;
      };
      var badStringifier = {
        toString: throwRegexMarker,
        valueOf: throwRegexMarker
      };
      if (typeof Symbol.toPrimitive === "symbol") {
        badStringifier[Symbol.toPrimitive] = throwRegexMarker;
      }
      fn = function isRegex2(value) {
        if (!value || typeof value !== "object") {
          return false;
        }
        var descriptor = (
          /** @type {NonNullable<typeof gOPD>} */
          gOPD2(
            /** @type {{ lastIndex?: unknown }} */
            value,
            "lastIndex"
          )
        );
        var hasLastIndexDataProperty = descriptor && hasOwn2(descriptor, "value");
        if (!hasLastIndexDataProperty) {
          return false;
        }
        try {
          $exec(
            value,
            /** @type {string} */
            /** @type {unknown} */
            badStringifier
          );
        } catch (e) {
          return e === isRegexMarker;
        }
      };
    } else {
      var $toString = callBound2("Object.prototype.toString");
      var regexClass = "[object RegExp]";
      fn = function isRegex2(value) {
        if (!value || typeof value !== "object" && typeof value !== "function") {
          return false;
        }
        return $toString(value) === regexClass;
      };
    }
    isRegex = fn;
    return isRegex;
  }
  var safeRegexTest;
  var hasRequiredSafeRegexTest;
  function requireSafeRegexTest() {
    if (hasRequiredSafeRegexTest) return safeRegexTest;
    hasRequiredSafeRegexTest = 1;
    var callBound2 = requireCallBound$1();
    var isRegex2 = requireIsRegex();
    var $exec = callBound2("RegExp.prototype.exec");
    var $TypeError2 = type;
    safeRegexTest = function regexTester(regex) {
      if (!isRegex2(regex)) {
        throw new $TypeError2("`regex` must be a RegExp");
      }
      return function test2(s2) {
        return $exec(regex, s2) !== null;
      };
    };
    return safeRegexTest;
  }
  var isGeneratorFunction;
  var hasRequiredIsGeneratorFunction;
  function requireIsGeneratorFunction() {
    if (hasRequiredIsGeneratorFunction) return isGeneratorFunction;
    hasRequiredIsGeneratorFunction = 1;
    var callBound2 = requireCallBound$1();
    var safeRegexTest2 = requireSafeRegexTest();
    var isFnRegex = safeRegexTest2(/^\s*(?:function)?\*/);
    var hasToStringTag = requireShams()();
    var getProto2 = requireGetProto();
    var toStr2 = callBound2("Object.prototype.toString");
    var fnToStr = callBound2("Function.prototype.toString");
    var getGeneratorFunc = function() {
      if (!hasToStringTag) {
        return false;
      }
      try {
        return Function("return function*() {}")();
      } catch (e) {
      }
    };
    var GeneratorFunction;
    isGeneratorFunction = function isGeneratorFunction2(fn) {
      if (typeof fn !== "function") {
        return false;
      }
      if (isFnRegex(fnToStr(fn))) {
        return true;
      }
      if (!hasToStringTag) {
        var str = toStr2(fn);
        return str === "[object GeneratorFunction]";
      }
      if (!getProto2) {
        return false;
      }
      if (typeof GeneratorFunction === "undefined") {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? (
          /** @type {GeneratorFunctionConstructor} */
          getProto2(generatorFunc)
        ) : false;
      }
      return getProto2(fn) === GeneratorFunction;
    };
    return isGeneratorFunction;
  }
  var isCallable;
  var hasRequiredIsCallable;
  function requireIsCallable() {
    if (hasRequiredIsCallable) return isCallable;
    hasRequiredIsCallable = 1;
    var fnToStr = Function.prototype.toString;
    var reflectApply2 = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply2 === "function" && typeof Object.defineProperty === "function") {
      try {
        badArrayLike = Object.defineProperty({}, "length", {
          get: function() {
            throw isCallableMarker;
          }
        });
        isCallableMarker = {};
        reflectApply2(function() {
          throw 42;
        }, null, badArrayLike);
      } catch (_) {
        if (_ !== isCallableMarker) {
          reflectApply2 = null;
        }
      }
    } else {
      reflectApply2 = null;
    }
    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
      try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
      } catch (e) {
        return false;
      }
    };
    var tryFunctionObject = function tryFunctionToStr(value) {
      try {
        if (isES6ClassFn(value)) {
          return false;
        }
        fnToStr.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr2 = Object.prototype.toString;
    var objectClass = "[object Object]";
    var fnClass = "[object Function]";
    var genClass = "[object GeneratorFunction]";
    var ddaClass = "[object HTMLAllCollection]";
    var ddaClass2 = "[object HTML document.all class]";
    var ddaClass3 = "[object HTMLCollection]";
    var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
    var isIE68 = !(0 in [,]);
    var isDDA = function isDocumentDotAll() {
      return false;
    };
    if (typeof document === "object") {
      var all = document.all;
      if (toStr2.call(all) === toStr2.call(document.all)) {
        isDDA = function isDocumentDotAll(value) {
          if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
            try {
              var str = toStr2.call(value);
              return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
            } catch (e) {
            }
          }
          return false;
        };
      }
    }
    isCallable = reflectApply2 ? function isCallable2(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      try {
        reflectApply2(value, null, badArrayLike);
      } catch (e) {
        if (e !== isCallableMarker) {
          return false;
        }
      }
      return !isES6ClassFn(value) && tryFunctionObject(value);
    } : function isCallable2(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      if (hasToStringTag) {
        return tryFunctionObject(value);
      }
      if (isES6ClassFn(value)) {
        return false;
      }
      var strClass = toStr2.call(value);
      if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
        return false;
      }
      return tryFunctionObject(value);
    };
    return isCallable;
  }
  var forEach_1;
  var hasRequiredForEach;
  function requireForEach() {
    if (hasRequiredForEach) return forEach_1;
    hasRequiredForEach = 1;
    var isCallable2 = requireIsCallable();
    var toStr2 = Object.prototype.toString;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var forEachArray = function forEachArray2(array2, iterator2, receiver) {
      for (var i2 = 0, len2 = array2.length; i2 < len2; i2++) {
        if (hasOwnProperty2.call(array2, i2)) {
          if (receiver == null) {
            iterator2(array2[i2], i2, array2);
          } else {
            iterator2.call(receiver, array2[i2], i2, array2);
          }
        }
      }
    };
    var forEachString = function forEachString2(string2, iterator2, receiver) {
      for (var i2 = 0, len2 = string2.length; i2 < len2; i2++) {
        if (receiver == null) {
          iterator2(string2.charAt(i2), i2, string2);
        } else {
          iterator2.call(receiver, string2.charAt(i2), i2, string2);
        }
      }
    };
    var forEachObject = function forEachObject2(object, iterator2, receiver) {
      for (var k in object) {
        if (hasOwnProperty2.call(object, k)) {
          if (receiver == null) {
            iterator2(object[k], k, object);
          } else {
            iterator2.call(receiver, object[k], k, object);
          }
        }
      }
    };
    var forEach2 = function forEach3(list, iterator2, thisArg) {
      if (!isCallable2(iterator2)) {
        throw new TypeError("iterator must be a function");
      }
      var receiver;
      if (arguments.length >= 3) {
        receiver = thisArg;
      }
      if (toStr2.call(list) === "[object Array]") {
        forEachArray(list, iterator2, receiver);
      } else if (typeof list === "string") {
        forEachString(list, iterator2, receiver);
      } else {
        forEachObject(list, iterator2, receiver);
      }
    };
    forEach_1 = forEach2;
    return forEach_1;
  }
  var possibleTypedArrayNames;
  var hasRequiredPossibleTypedArrayNames;
  function requirePossibleTypedArrayNames() {
    if (hasRequiredPossibleTypedArrayNames) return possibleTypedArrayNames;
    hasRequiredPossibleTypedArrayNames = 1;
    possibleTypedArrayNames = [
      "Float32Array",
      "Float64Array",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "BigInt64Array",
      "BigUint64Array"
    ];
    return possibleTypedArrayNames;
  }
  var availableTypedArrays;
  var hasRequiredAvailableTypedArrays;
  function requireAvailableTypedArrays() {
    if (hasRequiredAvailableTypedArrays) return availableTypedArrays;
    hasRequiredAvailableTypedArrays = 1;
    var possibleNames = requirePossibleTypedArrayNames();
    var g = typeof globalThis === "undefined" ? commonjsGlobal : globalThis;
    availableTypedArrays = function availableTypedArrays2() {
      var out = [];
      for (var i2 = 0; i2 < possibleNames.length; i2++) {
        if (typeof g[possibleNames[i2]] === "function") {
          out[out.length] = possibleNames[i2];
        }
      }
      return out;
    };
    return availableTypedArrays;
  }
  var callBind = { exports: {} };
  var defineDataProperty;
  var hasRequiredDefineDataProperty;
  function requireDefineDataProperty() {
    if (hasRequiredDefineDataProperty) return defineDataProperty;
    hasRequiredDefineDataProperty = 1;
    var $defineProperty = requireEsDefineProperty();
    var $SyntaxError = requireSyntax();
    var $TypeError2 = type;
    var gopd2 = requireGopd();
    defineDataProperty = function defineDataProperty2(obj, property, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError2("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError2("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError2("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError2("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError2("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError2("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd2 && gopd2(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
    return defineDataProperty;
  }
  var hasPropertyDescriptors_1;
  var hasRequiredHasPropertyDescriptors;
  function requireHasPropertyDescriptors() {
    if (hasRequiredHasPropertyDescriptors) return hasPropertyDescriptors_1;
    hasRequiredHasPropertyDescriptors = 1;
    var $defineProperty = requireEsDefineProperty();
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      return !!$defineProperty;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!$defineProperty) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    hasPropertyDescriptors_1 = hasPropertyDescriptors;
    return hasPropertyDescriptors_1;
  }
  var setFunctionLength;
  var hasRequiredSetFunctionLength;
  function requireSetFunctionLength() {
    if (hasRequiredSetFunctionLength) return setFunctionLength;
    hasRequiredSetFunctionLength = 1;
    var GetIntrinsic2 = requireGetIntrinsic();
    var define = requireDefineDataProperty();
    var hasDescriptors = requireHasPropertyDescriptors()();
    var gOPD2 = requireGopd();
    var $TypeError2 = type;
    var $floor2 = GetIntrinsic2("%Math.floor%");
    setFunctionLength = function setFunctionLength2(fn, length) {
      if (typeof fn !== "function") {
        throw new $TypeError2("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor2(length) !== length) {
        throw new $TypeError2("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn && gOPD2) {
        var desc = gOPD2(fn, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length,
            true,
            true
          );
        } else {
          define(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length
          );
        }
      }
      return fn;
    };
    return setFunctionLength;
  }
  var applyBind;
  var hasRequiredApplyBind;
  function requireApplyBind() {
    if (hasRequiredApplyBind) return applyBind;
    hasRequiredApplyBind = 1;
    var bind2 = requireFunctionBind();
    var $apply = requireFunctionApply();
    var actualApply2 = requireActualApply();
    applyBind = function applyBind2() {
      return actualApply2(bind2, $apply, arguments);
    };
    return applyBind;
  }
  var hasRequiredCallBind;
  function requireCallBind() {
    if (hasRequiredCallBind) return callBind.exports;
    hasRequiredCallBind = 1;
    (function(module) {
      var setFunctionLength2 = requireSetFunctionLength();
      var $defineProperty = requireEsDefineProperty();
      var callBindBasic = requireCallBindApplyHelpers();
      var applyBind2 = requireApplyBind();
      module.exports = function callBind2(originalFunction) {
        var func = callBindBasic(arguments);
        var adjustedLength = originalFunction.length - (arguments.length - 1);
        return setFunctionLength2(
          func,
          1 + (adjustedLength > 0 ? adjustedLength : 0),
          true
        );
      };
      if ($defineProperty) {
        $defineProperty(module.exports, "apply", { value: applyBind2 });
      } else {
        module.exports.apply = applyBind2;
      }
    })(callBind);
    return callBind.exports;
  }
  var whichTypedArray;
  var hasRequiredWhichTypedArray;
  function requireWhichTypedArray() {
    if (hasRequiredWhichTypedArray) return whichTypedArray;
    hasRequiredWhichTypedArray = 1;
    var forEach2 = requireForEach();
    var availableTypedArrays2 = requireAvailableTypedArrays();
    var callBind2 = requireCallBind();
    var callBound2 = requireCallBound$1();
    var gOPD2 = requireGopd();
    var $toString = callBound2("Object.prototype.toString");
    var hasToStringTag = requireShams()();
    var g = typeof globalThis === "undefined" ? commonjsGlobal : globalThis;
    var typedArrays = availableTypedArrays2();
    var $slice2 = callBound2("String.prototype.slice");
    var getPrototypeOf2 = Object.getPrototypeOf;
    var $indexOf = callBound2("Array.prototype.indexOf", true) || function indexOf2(array2, value) {
      for (var i2 = 0; i2 < array2.length; i2 += 1) {
        if (array2[i2] === value) {
          return i2;
        }
      }
      return -1;
    };
    var cache = { __proto__: null };
    if (hasToStringTag && gOPD2 && getPrototypeOf2) {
      forEach2(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        if (Symbol.toStringTag in arr) {
          var proto = getPrototypeOf2(arr);
          var descriptor = gOPD2(proto, Symbol.toStringTag);
          if (!descriptor) {
            var superProto = getPrototypeOf2(proto);
            descriptor = gOPD2(superProto, Symbol.toStringTag);
          }
          cache["$" + typedArray] = callBind2(descriptor.get);
        }
      });
    } else {
      forEach2(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        var fn = arr.slice || arr.set;
        if (fn) {
          cache["$" + typedArray] = callBind2(fn);
        }
      });
    }
    var tryTypedArrays = function tryAllTypedArrays(value) {
      var found = false;
      forEach2(
        // eslint-disable-next-line no-extra-parens
        /** @type {Record<`\$${TypedArrayName}`, Getter>} */
        /** @type {any} */
        cache,
        /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
        function(getter, typedArray) {
          if (!found) {
            try {
              if ("$" + getter(value) === typedArray) {
                found = $slice2(typedArray, 1);
              }
            } catch (e) {
            }
          }
        }
      );
      return found;
    };
    var trySlices = function tryAllSlices(value) {
      var found = false;
      forEach2(
        // eslint-disable-next-line no-extra-parens
        /** @type {Record<`\$${TypedArrayName}`, Getter>} */
        /** @type {any} */
        cache,
        /** @type {(getter: typeof cache, name: `\$${import('.').TypedArrayName}`) => void} */
        function(getter, name2) {
          if (!found) {
            try {
              getter(value);
              found = $slice2(name2, 1);
            } catch (e) {
            }
          }
        }
      );
      return found;
    };
    whichTypedArray = function whichTypedArray2(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      if (!hasToStringTag) {
        var tag = $slice2($toString(value), 8, -1);
        if ($indexOf(typedArrays, tag) > -1) {
          return tag;
        }
        if (tag !== "Object") {
          return false;
        }
        return trySlices(value);
      }
      if (!gOPD2) {
        return null;
      }
      return tryTypedArrays(value);
    };
    return whichTypedArray;
  }
  var isTypedArray;
  var hasRequiredIsTypedArray;
  function requireIsTypedArray() {
    if (hasRequiredIsTypedArray) return isTypedArray;
    hasRequiredIsTypedArray = 1;
    var whichTypedArray2 = requireWhichTypedArray();
    isTypedArray = function isTypedArray2(value) {
      return !!whichTypedArray2(value);
    };
    return isTypedArray;
  }
  var hasRequiredTypes$1;
  function requireTypes$1() {
    if (hasRequiredTypes$1) return types$3;
    hasRequiredTypes$1 = 1;
    (function(exports2) {
      var isArgumentsObject = requireIsArguments$1();
      var isGeneratorFunction2 = requireIsGeneratorFunction();
      var whichTypedArray2 = requireWhichTypedArray();
      var isTypedArray2 = requireIsTypedArray();
      function uncurryThis(f2) {
        return f2.call.bind(f2);
      }
      var BigIntSupported = typeof BigInt !== "undefined";
      var SymbolSupported = typeof Symbol !== "undefined";
      var ObjectToString = uncurryThis(Object.prototype.toString);
      var numberValue = uncurryThis(Number.prototype.valueOf);
      var stringValue = uncurryThis(String.prototype.valueOf);
      var booleanValue = uncurryThis(Boolean.prototype.valueOf);
      if (BigIntSupported) {
        var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
      }
      if (SymbolSupported) {
        var symbolValue = uncurryThis(Symbol.prototype.valueOf);
      }
      function checkBoxedPrimitive(value, prototypeValueOf) {
        if (typeof value !== "object") {
          return false;
        }
        try {
          prototypeValueOf(value);
          return true;
        } catch (e) {
          return false;
        }
      }
      exports2.isArgumentsObject = isArgumentsObject;
      exports2.isGeneratorFunction = isGeneratorFunction2;
      exports2.isTypedArray = isTypedArray2;
      function isPromise(input) {
        return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
      }
      exports2.isPromise = isPromise;
      function isArrayBufferView2(value) {
        if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
          return ArrayBuffer.isView(value);
        }
        return isTypedArray2(value) || isDataView(value);
      }
      exports2.isArrayBufferView = isArrayBufferView2;
      function isUint8Array(value) {
        return whichTypedArray2(value) === "Uint8Array";
      }
      exports2.isUint8Array = isUint8Array;
      function isUint8ClampedArray(value) {
        return whichTypedArray2(value) === "Uint8ClampedArray";
      }
      exports2.isUint8ClampedArray = isUint8ClampedArray;
      function isUint16Array(value) {
        return whichTypedArray2(value) === "Uint16Array";
      }
      exports2.isUint16Array = isUint16Array;
      function isUint32Array(value) {
        return whichTypedArray2(value) === "Uint32Array";
      }
      exports2.isUint32Array = isUint32Array;
      function isInt8Array(value) {
        return whichTypedArray2(value) === "Int8Array";
      }
      exports2.isInt8Array = isInt8Array;
      function isInt16Array(value) {
        return whichTypedArray2(value) === "Int16Array";
      }
      exports2.isInt16Array = isInt16Array;
      function isInt32Array(value) {
        return whichTypedArray2(value) === "Int32Array";
      }
      exports2.isInt32Array = isInt32Array;
      function isFloat32Array(value) {
        return whichTypedArray2(value) === "Float32Array";
      }
      exports2.isFloat32Array = isFloat32Array;
      function isFloat64Array(value) {
        return whichTypedArray2(value) === "Float64Array";
      }
      exports2.isFloat64Array = isFloat64Array;
      function isBigInt64Array(value) {
        return whichTypedArray2(value) === "BigInt64Array";
      }
      exports2.isBigInt64Array = isBigInt64Array;
      function isBigUint64Array(value) {
        return whichTypedArray2(value) === "BigUint64Array";
      }
      exports2.isBigUint64Array = isBigUint64Array;
      function isMapToString(value) {
        return ObjectToString(value) === "[object Map]";
      }
      isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
      function isMap2(value) {
        if (typeof Map === "undefined") {
          return false;
        }
        return isMapToString.working ? isMapToString(value) : value instanceof Map;
      }
      exports2.isMap = isMap2;
      function isSetToString(value) {
        return ObjectToString(value) === "[object Set]";
      }
      isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
      function isSet2(value) {
        if (typeof Set === "undefined") {
          return false;
        }
        return isSetToString.working ? isSetToString(value) : value instanceof Set;
      }
      exports2.isSet = isSet2;
      function isWeakMapToString(value) {
        return ObjectToString(value) === "[object WeakMap]";
      }
      isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
      function isWeakMap2(value) {
        if (typeof WeakMap === "undefined") {
          return false;
        }
        return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
      }
      exports2.isWeakMap = isWeakMap2;
      function isWeakSetToString(value) {
        return ObjectToString(value) === "[object WeakSet]";
      }
      isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
      function isWeakSet2(value) {
        return isWeakSetToString(value);
      }
      exports2.isWeakSet = isWeakSet2;
      function isArrayBufferToString(value) {
        return ObjectToString(value) === "[object ArrayBuffer]";
      }
      isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
      function isArrayBuffer2(value) {
        if (typeof ArrayBuffer === "undefined") {
          return false;
        }
        return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
      }
      exports2.isArrayBuffer = isArrayBuffer2;
      function isDataViewToString(value) {
        return ObjectToString(value) === "[object DataView]";
      }
      isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
      function isDataView(value) {
        if (typeof DataView === "undefined") {
          return false;
        }
        return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
      }
      exports2.isDataView = isDataView;
      var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
      function isSharedArrayBufferToString(value) {
        return ObjectToString(value) === "[object SharedArrayBuffer]";
      }
      function isSharedArrayBuffer(value) {
        if (typeof SharedArrayBufferCopy === "undefined") {
          return false;
        }
        if (typeof isSharedArrayBufferToString.working === "undefined") {
          isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
        }
        return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
      }
      exports2.isSharedArrayBuffer = isSharedArrayBuffer;
      function isAsyncFunction(value) {
        return ObjectToString(value) === "[object AsyncFunction]";
      }
      exports2.isAsyncFunction = isAsyncFunction;
      function isMapIterator(value) {
        return ObjectToString(value) === "[object Map Iterator]";
      }
      exports2.isMapIterator = isMapIterator;
      function isSetIterator(value) {
        return ObjectToString(value) === "[object Set Iterator]";
      }
      exports2.isSetIterator = isSetIterator;
      function isGeneratorObject(value) {
        return ObjectToString(value) === "[object Generator]";
      }
      exports2.isGeneratorObject = isGeneratorObject;
      function isWebAssemblyCompiledModule(value) {
        return ObjectToString(value) === "[object WebAssembly.Module]";
      }
      exports2.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
      function isNumberObject(value) {
        return checkBoxedPrimitive(value, numberValue);
      }
      exports2.isNumberObject = isNumberObject;
      function isStringObject(value) {
        return checkBoxedPrimitive(value, stringValue);
      }
      exports2.isStringObject = isStringObject;
      function isBooleanObject(value) {
        return checkBoxedPrimitive(value, booleanValue);
      }
      exports2.isBooleanObject = isBooleanObject;
      function isBigIntObject(value) {
        return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
      }
      exports2.isBigIntObject = isBigIntObject;
      function isSymbolObject(value) {
        return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
      }
      exports2.isSymbolObject = isSymbolObject;
      function isBoxedPrimitive(value) {
        return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
      }
      exports2.isBoxedPrimitive = isBoxedPrimitive;
      function isAnyArrayBuffer(value) {
        return typeof Uint8Array !== "undefined" && (isArrayBuffer2(value) || isSharedArrayBuffer(value));
      }
      exports2.isAnyArrayBuffer = isAnyArrayBuffer;
      ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
        Object.defineProperty(exports2, method, {
          enumerable: false,
          value: function() {
            throw new Error(method + " is not supported in userland");
          }
        });
      });
    })(types$3);
    return types$3;
  }
  var isBufferBrowser;
  var hasRequiredIsBufferBrowser;
  function requireIsBufferBrowser() {
    if (hasRequiredIsBufferBrowser) return isBufferBrowser;
    hasRequiredIsBufferBrowser = 1;
    isBufferBrowser = function isBuffer2(arg) {
      return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
    };
    return isBufferBrowser;
  }
  var hasRequiredUtil$1;
  function requireUtil$1() {
    if (hasRequiredUtil$1) return util$1;
    hasRequiredUtil$1 = 1;
    (function(exports2) {
      var define_process_env_default2 = {};
      var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
        var keys = Object.keys(obj);
        var descriptors2 = {};
        for (var i2 = 0; i2 < keys.length; i2++) {
          descriptors2[keys[i2]] = Object.getOwnPropertyDescriptor(obj, keys[i2]);
        }
        return descriptors2;
      };
      var formatRegExp = /%[sdj%]/g;
      exports2.format = function(f2) {
        if (!isString2(f2)) {
          var objects = [];
          for (var i2 = 0; i2 < arguments.length; i2++) {
            objects.push(inspect2(arguments[i2]));
          }
          return objects.join(" ");
        }
        var i2 = 1;
        var args = arguments;
        var len2 = args.length;
        var str = String(f2).replace(formatRegExp, function(x2) {
          if (x2 === "%%") return "%";
          if (i2 >= len2) return x2;
          switch (x2) {
            case "%s":
              return String(args[i2++]);
            case "%d":
              return Number(args[i2++]);
            case "%j":
              try {
                return JSON.stringify(args[i2++]);
              } catch (_) {
                return "[Circular]";
              }
            default:
              return x2;
          }
        });
        for (var x = args[i2]; i2 < len2; x = args[++i2]) {
          if (isNull(x) || !isObject2(x)) {
            str += " " + x;
          } else {
            str += " " + inspect2(x);
          }
        }
        return str;
      };
      exports2.deprecate = function(fn, msg) {
        if (typeof process$1 !== "undefined" && process$1.noDeprecation === true) {
          return fn;
        }
        if (typeof process$1 === "undefined") {
          return function() {
            return exports2.deprecate(fn, msg).apply(this, arguments);
          };
        }
        var warned = false;
        function deprecated() {
          if (!warned) {
            if (process$1.throwDeprecation) {
              throw new Error(msg);
            } else if (process$1.traceDeprecation) {
              console.trace(msg);
            } else {
              console.error(msg);
            }
            warned = true;
          }
          return fn.apply(this, arguments);
        }
        return deprecated;
      };
      var debugs = {};
      var debugEnvRegex = /^$/;
      if (define_process_env_default2.NODE_DEBUG) {
        var debugEnv = define_process_env_default2.NODE_DEBUG;
        debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
        debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
      }
      exports2.debuglog = function(set2) {
        set2 = set2.toUpperCase();
        if (!debugs[set2]) {
          if (debugEnvRegex.test(set2)) {
            var pid = process$1.pid;
            debugs[set2] = function() {
              var msg = exports2.format.apply(exports2, arguments);
              console.error("%s %d: %s", set2, pid, msg);
            };
          } else {
            debugs[set2] = function() {
            };
          }
        }
        return debugs[set2];
      };
      function inspect2(obj, opts) {
        var ctx = {
          seen: [],
          stylize: stylizeNoColor
        };
        if (arguments.length >= 3) ctx.depth = arguments[2];
        if (arguments.length >= 4) ctx.colors = arguments[3];
        if (isBoolean2(opts)) {
          ctx.showHidden = opts;
        } else if (opts) {
          exports2._extend(ctx, opts);
        }
        if (isUndefined2(ctx.showHidden)) ctx.showHidden = false;
        if (isUndefined2(ctx.depth)) ctx.depth = 2;
        if (isUndefined2(ctx.colors)) ctx.colors = false;
        if (isUndefined2(ctx.customInspect)) ctx.customInspect = true;
        if (ctx.colors) ctx.stylize = stylizeWithColor;
        return formatValue(ctx, obj, ctx.depth);
      }
      exports2.inspect = inspect2;
      inspect2.colors = {
        "bold": [1, 22],
        "italic": [3, 23],
        "underline": [4, 24],
        "inverse": [7, 27],
        "white": [37, 39],
        "grey": [90, 39],
        "black": [30, 39],
        "blue": [34, 39],
        "cyan": [36, 39],
        "green": [32, 39],
        "magenta": [35, 39],
        "red": [31, 39],
        "yellow": [33, 39]
      };
      inspect2.styles = {
        "special": "cyan",
        "number": "yellow",
        "boolean": "yellow",
        "undefined": "grey",
        "null": "bold",
        "string": "green",
        "date": "magenta",
        // "name": intentionally not styling
        "regexp": "red"
      };
      function stylizeWithColor(str, styleType) {
        var style = inspect2.styles[styleType];
        if (style) {
          return "\x1B[" + inspect2.colors[style][0] + "m" + str + "\x1B[" + inspect2.colors[style][1] + "m";
        } else {
          return str;
        }
      }
      function stylizeNoColor(str, styleType) {
        return str;
      }
      function arrayToHash(array2) {
        var hash2 = {};
        array2.forEach(function(val, idx) {
          hash2[val] = true;
        });
        return hash2;
      }
      function formatValue(ctx, value, recurseTimes) {
        if (ctx.customInspect && value && isFunction2(value.inspect) && // Filter out the util module, it's inspect function is special
        value.inspect !== exports2.inspect && // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
          var ret = value.inspect(recurseTimes, ctx);
          if (!isString2(ret)) {
            ret = formatValue(ctx, ret, recurseTimes);
          }
          return ret;
        }
        var primitive = formatPrimitive(ctx, value);
        if (primitive) {
          return primitive;
        }
        var keys = Object.keys(value);
        var visibleKeys = arrayToHash(keys);
        if (ctx.showHidden) {
          keys = Object.getOwnPropertyNames(value);
        }
        if (isError2(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
          return formatError(value);
        }
        if (keys.length === 0) {
          if (isFunction2(value)) {
            var name2 = value.name ? ": " + value.name : "";
            return ctx.stylize("[Function" + name2 + "]", "special");
          }
          if (isRegExp2(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
          }
          if (isDate2(value)) {
            return ctx.stylize(Date.prototype.toString.call(value), "date");
          }
          if (isError2(value)) {
            return formatError(value);
          }
        }
        var base2 = "", array2 = false, braces = ["{", "}"];
        if (isArray2(value)) {
          array2 = true;
          braces = ["[", "]"];
        }
        if (isFunction2(value)) {
          var n = value.name ? ": " + value.name : "";
          base2 = " [Function" + n + "]";
        }
        if (isRegExp2(value)) {
          base2 = " " + RegExp.prototype.toString.call(value);
        }
        if (isDate2(value)) {
          base2 = " " + Date.prototype.toUTCString.call(value);
        }
        if (isError2(value)) {
          base2 = " " + formatError(value);
        }
        if (keys.length === 0 && (!array2 || value.length == 0)) {
          return braces[0] + base2 + braces[1];
        }
        if (recurseTimes < 0) {
          if (isRegExp2(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
          } else {
            return ctx.stylize("[Object]", "special");
          }
        }
        ctx.seen.push(value);
        var output2;
        if (array2) {
          output2 = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
        } else {
          output2 = keys.map(function(key2) {
            return formatProperty(ctx, value, recurseTimes, visibleKeys, key2, array2);
          });
        }
        ctx.seen.pop();
        return reduceToSingleString(output2, base2, braces);
      }
      function formatPrimitive(ctx, value) {
        if (isUndefined2(value))
          return ctx.stylize("undefined", "undefined");
        if (isString2(value)) {
          var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
          return ctx.stylize(simple, "string");
        }
        if (isNumber2(value))
          return ctx.stylize("" + value, "number");
        if (isBoolean2(value))
          return ctx.stylize("" + value, "boolean");
        if (isNull(value))
          return ctx.stylize("null", "null");
      }
      function formatError(value) {
        return "[" + Error.prototype.toString.call(value) + "]";
      }
      function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
        var output2 = [];
        for (var i2 = 0, l = value.length; i2 < l; ++i2) {
          if (hasOwnProperty2(value, String(i2))) {
            output2.push(formatProperty(
              ctx,
              value,
              recurseTimes,
              visibleKeys,
              String(i2),
              true
            ));
          } else {
            output2.push("");
          }
        }
        keys.forEach(function(key2) {
          if (!key2.match(/^\d+$/)) {
            output2.push(formatProperty(
              ctx,
              value,
              recurseTimes,
              visibleKeys,
              key2,
              true
            ));
          }
        });
        return output2;
      }
      function formatProperty(ctx, value, recurseTimes, visibleKeys, key2, array2) {
        var name2, str, desc;
        desc = Object.getOwnPropertyDescriptor(value, key2) || { value: value[key2] };
        if (desc.get) {
          if (desc.set) {
            str = ctx.stylize("[Getter/Setter]", "special");
          } else {
            str = ctx.stylize("[Getter]", "special");
          }
        } else {
          if (desc.set) {
            str = ctx.stylize("[Setter]", "special");
          }
        }
        if (!hasOwnProperty2(visibleKeys, key2)) {
          name2 = "[" + key2 + "]";
        }
        if (!str) {
          if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) {
              str = formatValue(ctx, desc.value, null);
            } else {
              str = formatValue(ctx, desc.value, recurseTimes - 1);
            }
            if (str.indexOf("\n") > -1) {
              if (array2) {
                str = str.split("\n").map(function(line) {
                  return "  " + line;
                }).join("\n").slice(2);
              } else {
                str = "\n" + str.split("\n").map(function(line) {
                  return "   " + line;
                }).join("\n");
              }
            }
          } else {
            str = ctx.stylize("[Circular]", "special");
          }
        }
        if (isUndefined2(name2)) {
          if (array2 && key2.match(/^\d+$/)) {
            return str;
          }
          name2 = JSON.stringify("" + key2);
          if (name2.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name2 = name2.slice(1, -1);
            name2 = ctx.stylize(name2, "name");
          } else {
            name2 = name2.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name2 = ctx.stylize(name2, "string");
          }
        }
        return name2 + ": " + str;
      }
      function reduceToSingleString(output2, base2, braces) {
        var length = output2.reduce(function(prev, cur) {
          if (cur.indexOf("\n") >= 0) ;
          return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
        }, 0);
        if (length > 60) {
          return braces[0] + (base2 === "" ? "" : base2 + "\n ") + " " + output2.join(",\n  ") + " " + braces[1];
        }
        return braces[0] + base2 + " " + output2.join(", ") + " " + braces[1];
      }
      exports2.types = requireTypes$1();
      function isArray2(ar) {
        return Array.isArray(ar);
      }
      exports2.isArray = isArray2;
      function isBoolean2(arg) {
        return typeof arg === "boolean";
      }
      exports2.isBoolean = isBoolean2;
      function isNull(arg) {
        return arg === null;
      }
      exports2.isNull = isNull;
      function isNullOrUndefined(arg) {
        return arg == null;
      }
      exports2.isNullOrUndefined = isNullOrUndefined;
      function isNumber2(arg) {
        return typeof arg === "number";
      }
      exports2.isNumber = isNumber2;
      function isString2(arg) {
        return typeof arg === "string";
      }
      exports2.isString = isString2;
      function isSymbol2(arg) {
        return typeof arg === "symbol";
      }
      exports2.isSymbol = isSymbol2;
      function isUndefined2(arg) {
        return arg === void 0;
      }
      exports2.isUndefined = isUndefined2;
      function isRegExp2(re2) {
        return isObject2(re2) && objectToString2(re2) === "[object RegExp]";
      }
      exports2.isRegExp = isRegExp2;
      exports2.types.isRegExp = isRegExp2;
      function isObject2(arg) {
        return typeof arg === "object" && arg !== null;
      }
      exports2.isObject = isObject2;
      function isDate2(d) {
        return isObject2(d) && objectToString2(d) === "[object Date]";
      }
      exports2.isDate = isDate2;
      exports2.types.isDate = isDate2;
      function isError2(e) {
        return isObject2(e) && (objectToString2(e) === "[object Error]" || e instanceof Error);
      }
      exports2.isError = isError2;
      exports2.types.isNativeError = isError2;
      function isFunction2(arg) {
        return typeof arg === "function";
      }
      exports2.isFunction = isFunction2;
      function isPrimitive(arg) {
        return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
        typeof arg === "undefined";
      }
      exports2.isPrimitive = isPrimitive;
      exports2.isBuffer = requireIsBufferBrowser();
      function objectToString2(o) {
        return Object.prototype.toString.call(o);
      }
      function pad(n) {
        return n < 10 ? "0" + n.toString(10) : n.toString(10);
      }
      var months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ];
      function timestamp() {
        var d = /* @__PURE__ */ new Date();
        var time2 = [
          pad(d.getHours()),
          pad(d.getMinutes()),
          pad(d.getSeconds())
        ].join(":");
        return [d.getDate(), months[d.getMonth()], time2].join(" ");
      }
      exports2.log = function() {
        console.log("%s - %s", timestamp(), exports2.format.apply(exports2, arguments));
      };
      exports2.inherits = requireInherits_browser();
      exports2._extend = function(origin2, add2) {
        if (!add2 || !isObject2(add2)) return origin2;
        var keys = Object.keys(add2);
        var i2 = keys.length;
        while (i2--) {
          origin2[keys[i2]] = add2[keys[i2]];
        }
        return origin2;
      };
      function hasOwnProperty2(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }
      var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
      exports2.promisify = function promisify(original) {
        if (typeof original !== "function")
          throw new TypeError('The "original" argument must be of type Function');
        if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
          var fn = original[kCustomPromisifiedSymbol];
          if (typeof fn !== "function") {
            throw new TypeError('The "util.promisify.custom" argument must be of type Function');
          }
          Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
          });
          return fn;
        }
        function fn() {
          var promiseResolve, promiseReject;
          var promise2 = new Promise(function(resolve2, reject) {
            promiseResolve = resolve2;
            promiseReject = reject;
          });
          var args = [];
          for (var i2 = 0; i2 < arguments.length; i2++) {
            args.push(arguments[i2]);
          }
          args.push(function(err, value) {
            if (err) {
              promiseReject(err);
            } else {
              promiseResolve(value);
            }
          });
          try {
            original.apply(this, args);
          } catch (err) {
            promiseReject(err);
          }
          return promise2;
        }
        Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
        if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
        return Object.defineProperties(
          fn,
          getOwnPropertyDescriptors(original)
        );
      };
      exports2.promisify.custom = kCustomPromisifiedSymbol;
      function callbackifyOnRejected(reason, cb) {
        if (!reason) {
          var newReason = new Error("Promise was rejected with a falsy value");
          newReason.reason = reason;
          reason = newReason;
        }
        return cb(reason);
      }
      function callbackify(original) {
        if (typeof original !== "function") {
          throw new TypeError('The "original" argument must be of type Function');
        }
        function callbackified() {
          var args = [];
          for (var i2 = 0; i2 < arguments.length; i2++) {
            args.push(arguments[i2]);
          }
          var maybeCb = args.pop();
          if (typeof maybeCb !== "function") {
            throw new TypeError("The last argument must be of type Function");
          }
          var self2 = this;
          var cb = function() {
            return maybeCb.apply(self2, arguments);
          };
          original.apply(this, args).then(
            function(ret) {
              process$1.nextTick(cb.bind(null, null, ret));
            },
            function(rej) {
              process$1.nextTick(callbackifyOnRejected.bind(null, rej, cb));
            }
          );
        }
        Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
        Object.defineProperties(
          callbackified,
          getOwnPropertyDescriptors(original)
        );
        return callbackified;
      }
      exports2.callbackify = callbackify;
    })(util$1);
    return util$1;
  }
  var buffer_list;
  var hasRequiredBuffer_list;
  function requireBuffer_list() {
    if (hasRequiredBuffer_list) return buffer_list;
    hasRequiredBuffer_list = 1;
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = null != arguments[i2] ? arguments[i2] : {};
        i2 % 2 ? ownKeys(Object(source), true).forEach(function(key2) {
          _defineProperty(target, key2, source[key2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key2) {
          Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
        });
      }
      return target;
    }
    function _defineProperty(obj, key2, value) {
      key2 = _toPropertyKey(key2);
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      _defineProperties(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key2 = _toPrimitive(arg, "string");
      return typeof key2 === "symbol" ? key2 : String(key2);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint);
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(input);
    }
    var _require = require$$0$5, Buffer2 = _require.Buffer;
    var _require2 = requireUtil$1(), inspect2 = _require2.inspect;
    var custom = inspect2 && inspect2.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    buffer_list = /* @__PURE__ */ function() {
      function BufferList2() {
        _classCallCheck(this, BufferList2);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList2, [{
        key: "push",
        value: function push2(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0) this.tail.next = entry;
          else this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;
          else this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s2) {
          if (this.length === 0) return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next) ret += s2 + p.data;
          return ret;
        }
      }, {
        key: "concat",
        value: function concat2(n) {
          if (this.length === 0) return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p = this.head;
          var i2 = 0;
          while (p) {
            copyBuffer(p.data, ret, i2);
            i2 += p.data.length;
            p = p.next;
          }
          return ret;
        }
        // Consumes a specified amount of bytes or characters from the buffered data.
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
        // Consumes a specified amount of characters from the buffered data.
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;
            else ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) this.head = p.next;
                else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Consumes a specified amount of bytes from the buffered data.
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) this.head = p.next;
                else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Make sure the linked list only shows the minimal necessary information.
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect2(this, _objectSpread(_objectSpread({}, options), {}, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);
      return BufferList2;
    }();
    return buffer_list;
  }
  var destroy_1$1;
  var hasRequiredDestroy$1;
  function requireDestroy$1() {
    if (hasRequiredDestroy$1) return destroy_1$1;
    hasRequiredDestroy$1 = 1;
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process$1.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process$1.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process$1.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process$1.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process$1.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process$1.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process$1.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose) return;
      if (self2._readableState && !self2._readableState.emitClose) return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
      else stream.emit("error", err);
    }
    destroy_1$1 = {
      destroy,
      undestroy,
      errorOrDestroy
    };
    return destroy_1$1;
  }
  var errorsBrowser = {};
  var hasRequiredErrorsBrowser;
  function requireErrorsBrowser() {
    if (hasRequiredErrorsBrowser) return errorsBrowser;
    hasRequiredErrorsBrowser = 1;
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var codes = {};
    function createErrorType(code2, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = /* @__PURE__ */ function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
      }(Base);
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code2;
      codes[code2] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len2 = expected.length;
        expected = expected.map(function(i2) {
          return String(i2);
        });
        if (len2 > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len2 - 1).join(", "), ", or ") + expected[len2 - 1];
        } else if (len2 === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(0, search.length) === search;
    }
    function endsWith2(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value) {
      return 'The value "' + value + '" is invalid for option "' + name2 + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith2(name2, " argument")) {
        msg = "The ".concat(name2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type2 = includes(name2, ".") ? "property" : "argument";
        msg = 'The "'.concat(name2, '" ').concat(type2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
      return "The " + name2 + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name2) {
      return "Cannot call " + name2 + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    errorsBrowser.codes = codes;
    return errorsBrowser;
  }
  var state;
  var hasRequiredState;
  function requireState() {
    if (hasRequiredState) return state;
    hasRequiredState = 1;
    var ERR_INVALID_OPT_VALUE = requireErrorsBrowser().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state2, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name2 = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name2, hwm);
        }
        return Math.floor(hwm);
      }
      return state2.objectMode ? 16 : 16 * 1024;
    }
    state = {
      getHighWaterMark
    };
    return state;
  }
  var browser$d;
  var hasRequiredBrowser$c;
  function requireBrowser$c() {
    if (hasRequiredBrowser$c) return browser$d;
    hasRequiredBrowser$c = 1;
    browser$d = deprecate;
    function deprecate(fn, msg) {
      if (config2("noDeprecation")) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config2("throwDeprecation")) {
            throw new Error(msg);
          } else if (config2("traceDeprecation")) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    }
    function config2(name2) {
      try {
        if (!commonjsGlobal.localStorage) return false;
      } catch (_) {
        return false;
      }
      var val = commonjsGlobal.localStorage[name2];
      if (null == val) return false;
      return String(val).toLowerCase() === "true";
    }
    return browser$d;
  }
  var _stream_writable$1;
  var hasRequired_stream_writable$1;
  function require_stream_writable$1() {
    if (hasRequired_stream_writable$1) return _stream_writable$1;
    hasRequired_stream_writable$1 = 1;
    _stream_writable$1 = Writable;
    function CorkedRequest(state2) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state2);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: requireBrowser$c()
    };
    var Stream = requireStreamBrowser$1();
    var Buffer2 = require$$0$5.Buffer;
    var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = requireDestroy$1();
    var _require = requireState(), getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    requireInherits_browser()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex$1();
      options = options || {};
      if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable) return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex$1();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process$1.nextTick(cb, er);
    }
    function validChunk(stream, state2, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state2.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process$1.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding2, cb) {
      var state2 = this._writableState;
      var ret = false;
      var isBuf = !state2.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding2 === "function") {
        cb = encoding2;
        encoding2 = null;
      }
      if (isBuf) encoding2 = "buffer";
      else if (!encoding2) encoding2 = state2.defaultEncoding;
      if (typeof cb !== "function") cb = nop;
      if (state2.ending) writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state2, chunk, cb)) {
        state2.pendingcb++;
        ret = writeOrBuffer(this, state2, isBuf, chunk, encoding2, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state2 = this._writableState;
      if (state2.corked) {
        state2.corked--;
        if (!state2.writing && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) clearBuffer(this, state2);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding2) {
      if (typeof encoding2 === "string") encoding2 = encoding2.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding2 + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding2);
      this._writableState.defaultEncoding = encoding2;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state2, chunk, encoding2) {
      if (!state2.objectMode && state2.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding2);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state2, isBuf, chunk, encoding2, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state2, chunk, encoding2);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding2 = "buffer";
          chunk = newChunk;
        }
      }
      var len2 = state2.objectMode ? 1 : chunk.length;
      state2.length += len2;
      var ret = state2.length < state2.highWaterMark;
      if (!ret) state2.needDrain = true;
      if (state2.writing || state2.corked) {
        var last = state2.lastBufferedRequest;
        state2.lastBufferedRequest = {
          chunk,
          encoding: encoding2,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state2.lastBufferedRequest;
        } else {
          state2.bufferedRequest = state2.lastBufferedRequest;
        }
        state2.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state2, false, len2, chunk, encoding2, cb);
      }
      return ret;
    }
    function doWrite(stream, state2, writev, len2, chunk, encoding2, cb) {
      state2.writelen = len2;
      state2.writecb = cb;
      state2.writing = true;
      state2.sync = true;
      if (state2.destroyed) state2.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev) stream._writev(chunk, state2.onwrite);
      else stream._write(chunk, encoding2, state2.onwrite);
      state2.sync = false;
    }
    function onwriteError(stream, state2, sync, er, cb) {
      --state2.pendingcb;
      if (sync) {
        process$1.nextTick(cb, er);
        process$1.nextTick(finishMaybe, stream, state2);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state2);
      }
    }
    function onwriteStateUpdate(state2) {
      state2.writing = false;
      state2.writecb = null;
      state2.length -= state2.writelen;
      state2.writelen = 0;
    }
    function onwrite(stream, er) {
      var state2 = stream._writableState;
      var sync = state2.sync;
      var cb = state2.writecb;
      if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state2);
      if (er) onwriteError(stream, state2, sync, er, cb);
      else {
        var finished = needFinish(state2) || stream.destroyed;
        if (!finished && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) {
          clearBuffer(stream, state2);
        }
        if (sync) {
          process$1.nextTick(afterWrite, stream, state2, finished, cb);
        } else {
          afterWrite(stream, state2, finished, cb);
        }
      }
    }
    function afterWrite(stream, state2, finished, cb) {
      if (!finished) onwriteDrain(stream, state2);
      state2.pendingcb--;
      cb();
      finishMaybe(stream, state2);
    }
    function onwriteDrain(stream, state2) {
      if (state2.length === 0 && state2.needDrain) {
        state2.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state2) {
      state2.bufferProcessing = true;
      var entry = state2.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state2.bufferedRequestCount;
        var buffer2 = new Array(l);
        var holder = state2.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer2[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer2.allBuffers = allBuffers;
        doWrite(stream, state2, true, state2.length, buffer2, "", holder.finish);
        state2.pendingcb++;
        state2.lastBufferedRequest = null;
        if (holder.next) {
          state2.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state2.corkedRequestsFree = new CorkedRequest(state2);
        }
        state2.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding2 = entry.encoding;
          var cb = entry.callback;
          var len2 = state2.objectMode ? 1 : chunk.length;
          doWrite(stream, state2, false, len2, chunk, encoding2, cb);
          entry = entry.next;
          state2.bufferedRequestCount--;
          if (state2.writing) {
            break;
          }
        }
        if (entry === null) state2.lastBufferedRequest = null;
      }
      state2.bufferedRequest = entry;
      state2.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding2, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding2, cb) {
      var state2 = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding2 = null;
      } else if (typeof encoding2 === "function") {
        cb = encoding2;
        encoding2 = null;
      }
      if (chunk !== null && chunk !== void 0) this.write(chunk, encoding2);
      if (state2.corked) {
        state2.corked = 1;
        this.uncork();
      }
      if (!state2.ending) endWritable(this, state2, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        return this._writableState.length;
      }
    });
    function needFinish(state2) {
      return state2.ending && state2.length === 0 && state2.bufferedRequest === null && !state2.finished && !state2.writing;
    }
    function callFinal(stream, state2) {
      stream._final(function(err) {
        state2.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state2.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state2);
      });
    }
    function prefinish(stream, state2) {
      if (!state2.prefinished && !state2.finalCalled) {
        if (typeof stream._final === "function" && !state2.destroyed) {
          state2.pendingcb++;
          state2.finalCalled = true;
          process$1.nextTick(callFinal, stream, state2);
        } else {
          state2.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state2) {
      var need = needFinish(state2);
      if (need) {
        prefinish(stream, state2);
        if (state2.pendingcb === 0) {
          state2.finished = true;
          stream.emit("finish");
          if (state2.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state2, cb) {
      state2.ending = true;
      finishMaybe(stream, state2);
      if (cb) {
        if (state2.finished) process$1.nextTick(cb);
        else stream.once("finish", cb);
      }
      state2.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state2, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state2.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state2.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set2(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    return _stream_writable$1;
  }
  var _stream_duplex$1;
  var hasRequired_stream_duplex$1;
  function require_stream_duplex$1() {
    if (hasRequired_stream_duplex$1) return _stream_duplex$1;
    hasRequired_stream_duplex$1 = 1;
    var objectKeys2 = Object.keys || function(obj) {
      var keys2 = [];
      for (var key2 in obj) keys2.push(key2);
      return keys2;
    };
    _stream_duplex$1 = Duplex;
    var Readable = require_stream_readable$1();
    var Writable = require_stream_writable$1();
    requireInherits_browser()(Duplex, Readable);
    {
      var keys = objectKeys2(Writable.prototype);
      for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended) return;
      process$1.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set2(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
    return _stream_duplex$1;
  }
  var string_decoder = {};
  var hasRequiredString_decoder;
  function requireString_decoder() {
    if (hasRequiredString_decoder) return string_decoder;
    hasRequiredString_decoder = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding2) {
      encoding2 = "" + encoding2;
      switch (encoding2 && encoding2.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc) return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried) return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    string_decoder.StringDecoder = StringDecoder;
    function StringDecoder(encoding2) {
      this.encoding = normalizeEncoding(encoding2);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0) return "";
      var r2;
      var i2;
      if (this.lastNeed) {
        r2 = this.fillLast(buf);
        if (r2 === void 0) return "";
        i2 = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i2 = 0;
      }
      if (i2 < buf.length) return r2 ? r2 + this.text(buf, i2) : this.text(buf, i2);
      return r2 || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127) return 0;
      else if (byte >> 5 === 6) return 2;
      else if (byte >> 4 === 14) return 3;
      else if (byte >> 3 === 30) return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i2) {
      var j = buf.length - 1;
      if (j < i2) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i2 || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i2 || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;
          else self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "�";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "�";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "�";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r2 = utf8CheckExtraBytes(this, buf);
      if (r2 !== void 0) return r2;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i2) {
      var total = utf8CheckIncomplete(this, buf, i2);
      if (!this.lastNeed) return buf.toString("utf8", i2);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i2, end);
    }
    function utf8End(buf) {
      var r2 = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) return r2 + "�";
      return r2;
    }
    function utf16Text(buf, i2) {
      if ((buf.length - i2) % 2 === 0) {
        var r2 = buf.toString("utf16le", i2);
        if (r2) {
          var c = r2.charCodeAt(r2.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r2.slice(0, -1);
          }
        }
        return r2;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i2, buf.length - 1);
    }
    function utf16End(buf) {
      var r2 = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r2 + this.lastChar.toString("utf16le", 0, end);
      }
      return r2;
    }
    function base64Text(buf, i2) {
      var n = (buf.length - i2) % 3;
      if (n === 0) return buf.toString("base64", i2);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i2, buf.length - n);
    }
    function base64End(buf) {
      var r2 = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) return r2 + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r2;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
    return string_decoder;
  }
  var endOfStream;
  var hasRequiredEndOfStream;
  function requireEndOfStream() {
    if (hasRequiredEndOfStream) return endOfStream;
    hasRequiredEndOfStream = 1;
    var ERR_STREAM_PREMATURE_CLOSE = requireErrorsBrowser().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once2(callback) {
      var called = false;
      return function() {
        if (called) return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop2() {
    }
    function isRequest2(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function") return eos(stream, null, opts);
      if (!opts) opts = {};
      callback = once2(callback || noop2);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable) onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest2(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false) stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    endOfStream = eos;
    return endOfStream;
  }
  var async_iterator;
  var hasRequiredAsync_iterator;
  function requireAsync_iterator() {
    if (hasRequiredAsync_iterator) return async_iterator;
    hasRequiredAsync_iterator = 1;
    var _Object$setPrototypeO;
    function _defineProperty(obj, key2, value) {
      key2 = _toPropertyKey(key2);
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key2 = _toPrimitive(arg, "string");
      return typeof key2 === "symbol" ? key2 : String(key2);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var finished = requireEndOfStream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve2 = iter[kLastResolve];
      if (resolve2 !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve2(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process$1.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve2, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve2(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve2, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error2 = this[kError];
        if (error2 !== null) {
          return Promise.reject(error2);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve2, reject) {
            process$1.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve2(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise2;
        if (lastPromise) {
          promise2 = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise2 = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise2;
        return promise2;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve2, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve2(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator2 = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve2, reject) {
          var data = iterator2[kStream].read();
          if (data) {
            iterator2[kLastPromise] = null;
            iterator2[kLastResolve] = null;
            iterator2[kLastReject] = null;
            resolve2(createIterResult(data, false));
          } else {
            iterator2[kLastResolve] = resolve2;
            iterator2[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator2[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator2[kLastReject];
          if (reject !== null) {
            iterator2[kLastPromise] = null;
            iterator2[kLastResolve] = null;
            iterator2[kLastReject] = null;
            reject(err);
          }
          iterator2[kError] = err;
          return;
        }
        var resolve2 = iterator2[kLastResolve];
        if (resolve2 !== null) {
          iterator2[kLastPromise] = null;
          iterator2[kLastResolve] = null;
          iterator2[kLastReject] = null;
          resolve2(createIterResult(void 0, true));
        }
        iterator2[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator2));
      return iterator2;
    };
    async_iterator = createReadableStreamAsyncIterator;
    return async_iterator;
  }
  var fromBrowser;
  var hasRequiredFromBrowser;
  function requireFromBrowser() {
    if (hasRequiredFromBrowser) return fromBrowser;
    hasRequiredFromBrowser = 1;
    fromBrowser = function() {
      throw new Error("Readable.from is not available in the browser");
    };
    return fromBrowser;
  }
  var _stream_readable$1;
  var hasRequired_stream_readable$1;
  function require_stream_readable$1() {
    if (hasRequired_stream_readable$1) return _stream_readable$1;
    hasRequired_stream_readable$1 = 1;
    _stream_readable$1 = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    eventsExports.EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type2) {
      return emitter.listeners(type2).length;
    };
    var Stream = requireStreamBrowser$1();
    var Buffer2 = require$$0$5.Buffer;
    var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = requireUtil$1();
    var debug2;
    if (debugUtil && debugUtil.debuglog) {
      debug2 = debugUtil.debuglog("stream");
    } else {
      debug2 = function debug3() {
      };
    }
    var BufferList2 = requireBuffer_list();
    var destroyImpl = requireDestroy$1();
    var _require = requireState(), getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    requireInherits_browser()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
      else emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex$1();
      options = options || {};
      if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList2();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex$1();
      if (!(this instanceof Readable)) return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set2(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding2) {
      var state2 = this._readableState;
      var skipChunkCheck;
      if (!state2.objectMode) {
        if (typeof chunk === "string") {
          encoding2 = encoding2 || state2.defaultEncoding;
          if (encoding2 !== state2.encoding) {
            chunk = Buffer2.from(chunk, encoding2);
            encoding2 = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding2, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding2, addToFront, skipChunkCheck) {
      debug2("readableAddChunk", chunk);
      var state2 = stream._readableState;
      if (chunk === null) {
        state2.reading = false;
        onEofChunk(stream, state2);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state2, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state2.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state2.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state2.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else addChunk(stream, state2, chunk, true);
          } else if (state2.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state2.destroyed) {
            return false;
          } else {
            state2.reading = false;
            if (state2.decoder && !encoding2) {
              chunk = state2.decoder.write(chunk);
              if (state2.objectMode || chunk.length !== 0) addChunk(stream, state2, chunk, false);
              else maybeReadMore(stream, state2);
            } else {
              addChunk(stream, state2, chunk, false);
            }
          }
        } else if (!addToFront) {
          state2.reading = false;
          maybeReadMore(stream, state2);
        }
      }
      return !state2.ended && (state2.length < state2.highWaterMark || state2.length === 0);
    }
    function addChunk(stream, state2, chunk, addToFront) {
      if (state2.flowing && state2.length === 0 && !state2.sync) {
        state2.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state2.length += state2.objectMode ? 1 : chunk.length;
        if (addToFront) state2.buffer.unshift(chunk);
        else state2.buffer.push(chunk);
        if (state2.needReadable) emitReadable(stream);
      }
      maybeReadMore(stream, state2);
    }
    function chunkInvalid(state2, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state2.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p = this._readableState.buffer.head;
      var content = "";
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== "") this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state2) {
      if (n <= 0 || state2.length === 0 && state2.ended) return 0;
      if (state2.objectMode) return 1;
      if (n !== n) {
        if (state2.flowing && state2.length) return state2.buffer.head.data.length;
        else return state2.length;
      }
      if (n > state2.highWaterMark) state2.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state2.length) return n;
      if (!state2.ended) {
        state2.needReadable = true;
        return 0;
      }
      return state2.length;
    }
    Readable.prototype.read = function(n) {
      debug2("read", n);
      n = parseInt(n, 10);
      var state2 = this._readableState;
      var nOrig = n;
      if (n !== 0) state2.emittedReadable = false;
      if (n === 0 && state2.needReadable && ((state2.highWaterMark !== 0 ? state2.length >= state2.highWaterMark : state2.length > 0) || state2.ended)) {
        debug2("read: emitReadable", state2.length, state2.ended);
        if (state2.length === 0 && state2.ended) endReadable(this);
        else emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state2);
      if (n === 0 && state2.ended) {
        if (state2.length === 0) endReadable(this);
        return null;
      }
      var doRead = state2.needReadable;
      debug2("need readable", doRead);
      if (state2.length === 0 || state2.length - n < state2.highWaterMark) {
        doRead = true;
        debug2("length less than watermark", doRead);
      }
      if (state2.ended || state2.reading) {
        doRead = false;
        debug2("reading or ended", doRead);
      } else if (doRead) {
        debug2("do read");
        state2.reading = true;
        state2.sync = true;
        if (state2.length === 0) state2.needReadable = true;
        this._read(state2.highWaterMark);
        state2.sync = false;
        if (!state2.reading) n = howMuchToRead(nOrig, state2);
      }
      var ret;
      if (n > 0) ret = fromList(n, state2);
      else ret = null;
      if (ret === null) {
        state2.needReadable = state2.length <= state2.highWaterMark;
        n = 0;
      } else {
        state2.length -= n;
        state2.awaitDrain = 0;
      }
      if (state2.length === 0) {
        if (!state2.ended) state2.needReadable = true;
        if (nOrig !== n && state2.ended) endReadable(this);
      }
      if (ret !== null) this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state2) {
      debug2("onEofChunk");
      if (state2.ended) return;
      if (state2.decoder) {
        var chunk = state2.decoder.end();
        if (chunk && chunk.length) {
          state2.buffer.push(chunk);
          state2.length += state2.objectMode ? 1 : chunk.length;
        }
      }
      state2.ended = true;
      if (state2.sync) {
        emitReadable(stream);
      } else {
        state2.needReadable = false;
        if (!state2.emittedReadable) {
          state2.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state2 = stream._readableState;
      debug2("emitReadable", state2.needReadable, state2.emittedReadable);
      state2.needReadable = false;
      if (!state2.emittedReadable) {
        debug2("emitReadable", state2.flowing);
        state2.emittedReadable = true;
        process$1.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state2 = stream._readableState;
      debug2("emitReadable_", state2.destroyed, state2.length, state2.ended);
      if (!state2.destroyed && (state2.length || state2.ended)) {
        stream.emit("readable");
        state2.emittedReadable = false;
      }
      state2.needReadable = !state2.flowing && !state2.ended && state2.length <= state2.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state2) {
      if (!state2.readingMore) {
        state2.readingMore = true;
        process$1.nextTick(maybeReadMore_, stream, state2);
      }
    }
    function maybeReadMore_(stream, state2) {
      while (!state2.reading && !state2.ended && (state2.length < state2.highWaterMark || state2.flowing && state2.length === 0)) {
        var len2 = state2.length;
        debug2("maybeReadMore read 0");
        stream.read(0);
        if (len2 === state2.length)
          break;
      }
      state2.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state2 = this._readableState;
      switch (state2.pipesCount) {
        case 0:
          state2.pipes = dest;
          break;
        case 1:
          state2.pipes = [state2.pipes, dest];
          break;
        default:
          state2.pipes.push(dest);
          break;
      }
      state2.pipesCount += 1;
      debug2("pipe count=%d opts=%j", state2.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state2.endEmitted) process$1.nextTick(endFn);
      else src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug2("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug2("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug2("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state2.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug2("ondata");
        var ret = dest.write(chunk);
        debug2("dest.write", ret);
        if (ret === false) {
          if ((state2.pipesCount === 1 && state2.pipes === dest || state2.pipesCount > 1 && indexOf2(state2.pipes, dest) !== -1) && !cleanedUp) {
            debug2("false write response, pause", state2.awaitDrain);
            state2.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug2("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug2("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug2("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state2.flowing) {
        debug2("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state2 = src._readableState;
        debug2("pipeOnDrain", state2.awaitDrain);
        if (state2.awaitDrain) state2.awaitDrain--;
        if (state2.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state2.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state2 = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state2.pipesCount === 0) return this;
      if (state2.pipesCount === 1) {
        if (dest && dest !== state2.pipes) return this;
        if (!dest) dest = state2.pipes;
        state2.pipes = null;
        state2.pipesCount = 0;
        state2.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state2.pipes;
        var len2 = state2.pipesCount;
        state2.pipes = null;
        state2.pipesCount = 0;
        state2.flowing = false;
        for (var i2 = 0; i2 < len2; i2++) dests[i2].emit("unpipe", this, {
          hasUnpiped: false
        });
        return this;
      }
      var index = indexOf2(state2.pipes, dest);
      if (index === -1) return this;
      state2.pipes.splice(index, 1);
      state2.pipesCount -= 1;
      if (state2.pipesCount === 1) state2.pipes = state2.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state2 = this._readableState;
      if (ev === "data") {
        state2.readableListening = this.listenerCount("readable") > 0;
        if (state2.flowing !== false) this.resume();
      } else if (ev === "readable") {
        if (!state2.endEmitted && !state2.readableListening) {
          state2.readableListening = state2.needReadable = true;
          state2.flowing = false;
          state2.emittedReadable = false;
          debug2("on readable", state2.length, state2.reading);
          if (state2.length) {
            emitReadable(this);
          } else if (!state2.reading) {
            process$1.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process$1.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process$1.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state2 = self2._readableState;
      state2.readableListening = self2.listenerCount("readable") > 0;
      if (state2.resumeScheduled && !state2.paused) {
        state2.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug2("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state2 = this._readableState;
      if (!state2.flowing) {
        debug2("resume");
        state2.flowing = !state2.readableListening;
        resume(this, state2);
      }
      state2.paused = false;
      return this;
    };
    function resume(stream, state2) {
      if (!state2.resumeScheduled) {
        state2.resumeScheduled = true;
        process$1.nextTick(resume_, stream, state2);
      }
    }
    function resume_(stream, state2) {
      debug2("resume", state2.reading);
      if (!state2.reading) {
        stream.read(0);
      }
      state2.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state2.flowing && !state2.reading) stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug2("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug2("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state2 = stream._readableState;
      debug2("flow", state2.flowing);
      while (state2.flowing && stream.read() !== null) ;
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state2 = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug2("wrapped end");
        if (state2.decoder && !state2.ended) {
          var chunk = state2.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug2("wrapped data");
        if (state2.decoder) chunk = state2.decoder.write(chunk);
        if (state2.objectMode && (chunk === null || chunk === void 0)) return;
        else if (!state2.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i2 in stream) {
        if (this[i2] === void 0 && typeof stream[i2] === "function") {
          this[i2] = /* @__PURE__ */ function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i2);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug2("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = requireAsync_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        return this._readableState.flowing;
      },
      set: function set2(state2) {
        if (this._readableState) {
          this._readableState.flowing = state2;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get2() {
        return this._readableState.length;
      }
    });
    function fromList(n, state2) {
      if (state2.length === 0) return null;
      var ret;
      if (state2.objectMode) ret = state2.buffer.shift();
      else if (!n || n >= state2.length) {
        if (state2.decoder) ret = state2.buffer.join("");
        else if (state2.buffer.length === 1) ret = state2.buffer.first();
        else ret = state2.buffer.concat(state2.length);
        state2.buffer.clear();
      } else {
        ret = state2.buffer.consume(n, state2.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state2 = stream._readableState;
      debug2("endReadable", state2.endEmitted);
      if (!state2.endEmitted) {
        state2.ended = true;
        process$1.nextTick(endReadableNT, state2, stream);
      }
    }
    function endReadableNT(state2, stream) {
      debug2("endReadableNT", state2.endEmitted, state2.length);
      if (!state2.endEmitted && state2.length === 0) {
        state2.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state2.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = requireFromBrowser();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf2(xs, x) {
      for (var i2 = 0, l = xs.length; i2 < l; i2++) {
        if (xs[i2] === x) return i2;
      }
      return -1;
    }
    return _stream_readable$1;
  }
  var _stream_transform$1;
  var hasRequired_stream_transform$1;
  function require_stream_transform$1() {
    if (hasRequired_stream_transform$1) return _stream_transform$1;
    hasRequired_stream_transform$1 = 1;
    _stream_transform$1 = Transform;
    var _require$codes = requireErrorsBrowser().codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex$1();
    requireInherits_browser()(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding2) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding2);
    };
    Transform.prototype._transform = function(chunk, encoding2, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform.prototype._write = function(chunk, encoding2, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding2;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er) return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
    return _stream_transform$1;
  }
  var _stream_passthrough$1;
  var hasRequired_stream_passthrough$1;
  function require_stream_passthrough$1() {
    if (hasRequired_stream_passthrough$1) return _stream_passthrough$1;
    hasRequired_stream_passthrough$1 = 1;
    _stream_passthrough$1 = PassThrough;
    var Transform = require_stream_transform$1();
    requireInherits_browser()(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding2, cb) {
      cb(null, chunk);
    };
    return _stream_passthrough$1;
  }
  var pipeline_1;
  var hasRequiredPipeline;
  function requirePipeline() {
    if (hasRequiredPipeline) return pipeline_1;
    hasRequiredPipeline = 1;
    var eos;
    function once2(callback) {
      var called = false;
      return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = requireErrorsBrowser().codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop2(err) {
      if (err) throw err;
    }
    function isRequest2(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once2(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0) eos = requireEndOfStream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        if (isRequest2(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length) return noop2;
      if (typeof streams[streams.length - 1] !== "function") return noop2;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0])) streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error2;
      var destroys = streams.map(function(stream, i2) {
        var reading = i2 < streams.length - 1;
        var writing = i2 > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error2) error2 = err;
          if (err) destroys.forEach(call);
          if (reading) return;
          destroys.forEach(call);
          callback(error2);
        });
      });
      return streams.reduce(pipe);
    }
    pipeline_1 = pipeline;
    return pipeline_1;
  }
  var hasRequiredReadableBrowser$1;
  function requireReadableBrowser$1() {
    if (hasRequiredReadableBrowser$1) return readableBrowser$1.exports;
    hasRequiredReadableBrowser$1 = 1;
    (function(module, exports2) {
      exports2 = module.exports = require_stream_readable$1();
      exports2.Stream = exports2;
      exports2.Readable = exports2;
      exports2.Writable = require_stream_writable$1();
      exports2.Duplex = require_stream_duplex$1();
      exports2.Transform = require_stream_transform$1();
      exports2.PassThrough = require_stream_passthrough$1();
      exports2.finished = requireEndOfStream();
      exports2.pipeline = requirePipeline();
    })(readableBrowser$1, readableBrowser$1.exports);
    return readableBrowser$1.exports;
  }
  var hashBase$1;
  var hasRequiredHashBase$1;
  function requireHashBase$1() {
    if (hasRequiredHashBase$1) return hashBase$1;
    hasRequiredHashBase$1 = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var Transform = requireReadableBrowser$1().Transform;
    var inherits2 = requireInherits_browser();
    function throwIfNotStringOrBuffer(val, prefix) {
      if (!Buffer2.isBuffer(val) && typeof val !== "string") {
        throw new TypeError(prefix + " must be a string or a buffer");
      }
    }
    function HashBase(blockSize) {
      Transform.call(this);
      this._block = Buffer2.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];
      this._finalized = false;
    }
    inherits2(HashBase, Transform);
    HashBase.prototype._transform = function(chunk, encoding2, callback) {
      var error2 = null;
      try {
        this.update(chunk, encoding2);
      } catch (err) {
        error2 = err;
      }
      callback(error2);
    };
    HashBase.prototype._flush = function(callback) {
      var error2 = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error2 = err;
      }
      callback(error2);
    };
    HashBase.prototype.update = function(data, encoding2) {
      throwIfNotStringOrBuffer(data, "Data");
      if (this._finalized) throw new Error("Digest already called");
      if (!Buffer2.isBuffer(data)) data = Buffer2.from(data, encoding2);
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i2 = this._blockOffset; i2 < this._blockSize; ) block[i2++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++];
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0) this._length[j] -= 4294967296 * carry;
      }
      return this;
    };
    HashBase.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    HashBase.prototype.digest = function(encoding2) {
      if (this._finalized) throw new Error("Digest already called");
      this._finalized = true;
      var digest = this._digest();
      if (encoding2 !== void 0) digest = digest.toString(encoding2);
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i2 = 0; i2 < 4; ++i2) this._length[i2] = 0;
      return digest;
    };
    HashBase.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    hashBase$1 = HashBase;
    return hashBase$1;
  }
  var md5_js;
  var hasRequiredMd5_js;
  function requireMd5_js() {
    if (hasRequiredMd5_js) return md5_js;
    hasRequiredMd5_js = 1;
    var inherits2 = requireInherits_browser();
    var HashBase = requireHashBase$1();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var ARRAY16 = new Array(16);
    function MD5() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
    }
    inherits2(MD5, HashBase);
    MD5.prototype._update = function() {
      var M = ARRAY16;
      for (var i2 = 0; i2 < 16; ++i2) M[i2] = this._block.readInt32LE(i2 * 4);
      var a = this._a;
      var b = this._b;
      var c = this._c;
      var d = this._d;
      a = fnF(a, b, c, d, M[0], 3614090360, 7);
      d = fnF(d, a, b, c, M[1], 3905402710, 12);
      c = fnF(c, d, a, b, M[2], 606105819, 17);
      b = fnF(b, c, d, a, M[3], 3250441966, 22);
      a = fnF(a, b, c, d, M[4], 4118548399, 7);
      d = fnF(d, a, b, c, M[5], 1200080426, 12);
      c = fnF(c, d, a, b, M[6], 2821735955, 17);
      b = fnF(b, c, d, a, M[7], 4249261313, 22);
      a = fnF(a, b, c, d, M[8], 1770035416, 7);
      d = fnF(d, a, b, c, M[9], 2336552879, 12);
      c = fnF(c, d, a, b, M[10], 4294925233, 17);
      b = fnF(b, c, d, a, M[11], 2304563134, 22);
      a = fnF(a, b, c, d, M[12], 1804603682, 7);
      d = fnF(d, a, b, c, M[13], 4254626195, 12);
      c = fnF(c, d, a, b, M[14], 2792965006, 17);
      b = fnF(b, c, d, a, M[15], 1236535329, 22);
      a = fnG(a, b, c, d, M[1], 4129170786, 5);
      d = fnG(d, a, b, c, M[6], 3225465664, 9);
      c = fnG(c, d, a, b, M[11], 643717713, 14);
      b = fnG(b, c, d, a, M[0], 3921069994, 20);
      a = fnG(a, b, c, d, M[5], 3593408605, 5);
      d = fnG(d, a, b, c, M[10], 38016083, 9);
      c = fnG(c, d, a, b, M[15], 3634488961, 14);
      b = fnG(b, c, d, a, M[4], 3889429448, 20);
      a = fnG(a, b, c, d, M[9], 568446438, 5);
      d = fnG(d, a, b, c, M[14], 3275163606, 9);
      c = fnG(c, d, a, b, M[3], 4107603335, 14);
      b = fnG(b, c, d, a, M[8], 1163531501, 20);
      a = fnG(a, b, c, d, M[13], 2850285829, 5);
      d = fnG(d, a, b, c, M[2], 4243563512, 9);
      c = fnG(c, d, a, b, M[7], 1735328473, 14);
      b = fnG(b, c, d, a, M[12], 2368359562, 20);
      a = fnH(a, b, c, d, M[5], 4294588738, 4);
      d = fnH(d, a, b, c, M[8], 2272392833, 11);
      c = fnH(c, d, a, b, M[11], 1839030562, 16);
      b = fnH(b, c, d, a, M[14], 4259657740, 23);
      a = fnH(a, b, c, d, M[1], 2763975236, 4);
      d = fnH(d, a, b, c, M[4], 1272893353, 11);
      c = fnH(c, d, a, b, M[7], 4139469664, 16);
      b = fnH(b, c, d, a, M[10], 3200236656, 23);
      a = fnH(a, b, c, d, M[13], 681279174, 4);
      d = fnH(d, a, b, c, M[0], 3936430074, 11);
      c = fnH(c, d, a, b, M[3], 3572445317, 16);
      b = fnH(b, c, d, a, M[6], 76029189, 23);
      a = fnH(a, b, c, d, M[9], 3654602809, 4);
      d = fnH(d, a, b, c, M[12], 3873151461, 11);
      c = fnH(c, d, a, b, M[15], 530742520, 16);
      b = fnH(b, c, d, a, M[2], 3299628645, 23);
      a = fnI(a, b, c, d, M[0], 4096336452, 6);
      d = fnI(d, a, b, c, M[7], 1126891415, 10);
      c = fnI(c, d, a, b, M[14], 2878612391, 15);
      b = fnI(b, c, d, a, M[5], 4237533241, 21);
      a = fnI(a, b, c, d, M[12], 1700485571, 6);
      d = fnI(d, a, b, c, M[3], 2399980690, 10);
      c = fnI(c, d, a, b, M[10], 4293915773, 15);
      b = fnI(b, c, d, a, M[1], 2240044497, 21);
      a = fnI(a, b, c, d, M[8], 1873313359, 6);
      d = fnI(d, a, b, c, M[15], 4264355552, 10);
      c = fnI(c, d, a, b, M[6], 2734768916, 15);
      b = fnI(b, c, d, a, M[13], 1309151649, 21);
      a = fnI(a, b, c, d, M[4], 4149444226, 6);
      d = fnI(d, a, b, c, M[11], 3174756917, 10);
      c = fnI(c, d, a, b, M[2], 718787259, 15);
      b = fnI(b, c, d, a, M[9], 3951481745, 21);
      this._a = this._a + a | 0;
      this._b = this._b + b | 0;
      this._c = this._c + c | 0;
      this._d = this._d + d | 0;
    };
    MD5.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer2 = Buffer2.allocUnsafe(16);
      buffer2.writeInt32LE(this._a, 0);
      buffer2.writeInt32LE(this._b, 4);
      buffer2.writeInt32LE(this._c, 8);
      buffer2.writeInt32LE(this._d, 12);
      return buffer2;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fnF(a, b, c, d, m, k, s2) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s2) + b | 0;
    }
    function fnG(a, b, c, d, m, k, s2) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s2) + b | 0;
    }
    function fnH(a, b, c, d, m, k, s2) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s2) + b | 0;
    }
    function fnI(a, b, c, d, m, k, s2) {
      return rotl(a + (c ^ (b | ~d)) + m + k | 0, s2) + b | 0;
    }
    md5_js = MD5;
    return md5_js;
  }
  var hashBase;
  var hasRequiredHashBase;
  function requireHashBase() {
    if (hasRequiredHashBase) return hashBase;
    hasRequiredHashBase = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var Transform = requireReadableBrowser$1().Transform;
    var inherits2 = requireInherits_browser();
    function throwIfNotStringOrBuffer(val, prefix) {
      if (!Buffer2.isBuffer(val) && typeof val !== "string") {
        throw new TypeError(prefix + " must be a string or a buffer");
      }
    }
    function HashBase(blockSize) {
      Transform.call(this);
      this._block = Buffer2.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];
      this._finalized = false;
    }
    inherits2(HashBase, Transform);
    HashBase.prototype._transform = function(chunk, encoding2, callback) {
      var error2 = null;
      try {
        this.update(chunk, encoding2);
      } catch (err) {
        error2 = err;
      }
      callback(error2);
    };
    HashBase.prototype._flush = function(callback) {
      var error2 = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error2 = err;
      }
      callback(error2);
    };
    HashBase.prototype.update = function(data, encoding2) {
      throwIfNotStringOrBuffer(data, "Data");
      if (this._finalized) throw new Error("Digest already called");
      if (!Buffer2.isBuffer(data)) data = Buffer2.from(data, encoding2);
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i2 = this._blockOffset; i2 < this._blockSize; ) block[i2++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++];
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0) this._length[j] -= 4294967296 * carry;
      }
      return this;
    };
    HashBase.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    HashBase.prototype.digest = function(encoding2) {
      if (this._finalized) throw new Error("Digest already called");
      this._finalized = true;
      var digest = this._digest();
      if (encoding2 !== void 0) digest = digest.toString(encoding2);
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i2 = 0; i2 < 4; ++i2) this._length[i2] = 0;
      return digest;
    };
    HashBase.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    hashBase = HashBase;
    return hashBase;
  }
  var ripemd160;
  var hasRequiredRipemd160;
  function requireRipemd160() {
    if (hasRequiredRipemd160) return ripemd160;
    hasRequiredRipemd160 = 1;
    var Buffer2 = require$$0$5.Buffer;
    var inherits2 = requireInherits_browser();
    var HashBase = requireHashBase();
    var ARRAY16 = new Array(16);
    var zl = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var zr = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var sl = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sr = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
    var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
    var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
    function RIPEMD1602() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
    }
    inherits2(RIPEMD1602, HashBase);
    RIPEMD1602.prototype._update = function() {
      var words = ARRAY16;
      for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);
      var al = this._a | 0;
      var bl = this._b | 0;
      var cl = this._c | 0;
      var dl = this._d | 0;
      var el = this._e | 0;
      var ar = this._a | 0;
      var br = this._b | 0;
      var cr = this._c | 0;
      var dr = this._d | 0;
      var er = this._e | 0;
      for (var i2 = 0; i2 < 80; i2 += 1) {
        var tl;
        var tr;
        if (i2 < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i2]], hl[0], sl[i2]);
          tr = fn5(ar, br, cr, dr, er, words[zr[i2]], hr[0], sr[i2]);
        } else if (i2 < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i2]], hl[1], sl[i2]);
          tr = fn4(ar, br, cr, dr, er, words[zr[i2]], hr[1], sr[i2]);
        } else if (i2 < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i2]], hl[2], sl[i2]);
          tr = fn3(ar, br, cr, dr, er, words[zr[i2]], hr[2], sr[i2]);
        } else if (i2 < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i2]], hl[3], sl[i2]);
          tr = fn2(ar, br, cr, dr, er, words[zr[i2]], hr[3], sr[i2]);
        } else {
          tl = fn5(al, bl, cl, dl, el, words[zl[i2]], hl[4], sl[i2]);
          tr = fn1(ar, br, cr, dr, er, words[zr[i2]], hr[4], sr[i2]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
      }
      var t2 = this._b + cl + dr | 0;
      this._b = this._c + dl + er | 0;
      this._c = this._d + el + ar | 0;
      this._d = this._e + al + br | 0;
      this._e = this._a + bl + cr | 0;
      this._a = t2;
    };
    RIPEMD1602.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer2 = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);
      buffer2.writeInt32LE(this._a, 0);
      buffer2.writeInt32LE(this._b, 4);
      buffer2.writeInt32LE(this._c, 8);
      buffer2.writeInt32LE(this._d, 12);
      buffer2.writeInt32LE(this._e, 16);
      return buffer2;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fn1(a, b, c, d, e, m, k, s2) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s2) + e | 0;
    }
    function fn2(a, b, c, d, e, m, k, s2) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s2) + e | 0;
    }
    function fn3(a, b, c, d, e, m, k, s2) {
      return rotl(a + ((b | ~c) ^ d) + m + k | 0, s2) + e | 0;
    }
    function fn4(a, b, c, d, e, m, k, s2) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s2) + e | 0;
    }
    function fn5(a, b, c, d, e, m, k, s2) {
      return rotl(a + (b ^ (c | ~d)) + m + k | 0, s2) + e | 0;
    }
    ripemd160 = RIPEMD1602;
    return ripemd160;
  }
  var sha_js = { exports: {} };
  var hash$1;
  var hasRequiredHash;
  function requireHash() {
    if (hasRequiredHash) return hash$1;
    hasRequiredHash = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function Hash(blockSize, finalSize) {
      this._block = Buffer2.alloc(blockSize);
      this._finalSize = finalSize;
      this._blockSize = blockSize;
      this._len = 0;
    }
    Hash.prototype.update = function(data, enc) {
      if (typeof data === "string") {
        enc = enc || "utf8";
        data = Buffer2.from(data, enc);
      }
      var block = this._block;
      var blockSize = this._blockSize;
      var length = data.length;
      var accum = this._len;
      for (var offset = 0; offset < length; ) {
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for (var i2 = 0; i2 < remainder; i2++) {
          block[assigned + i2] = data[offset + i2];
        }
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) {
          this._update(block);
        }
      }
      this._len += length;
      return this;
    };
    Hash.prototype.digest = function(enc) {
      var rem = this._len % this._blockSize;
      this._block[rem] = 128;
      this._block.fill(0, rem + 1);
      if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
      }
      var bits = this._len * 8;
      if (bits <= 4294967295) {
        this._block.writeUInt32BE(bits, this._blockSize - 4);
      } else {
        var lowBits = (bits & 4294967295) >>> 0;
        var highBits = (bits - lowBits) / 4294967296;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
      }
      this._update(this._block);
      var hash2 = this._hash();
      return enc ? hash2.toString(enc) : hash2;
    };
    Hash.prototype._update = function() {
      throw new Error("_update must be implemented by subclass");
    };
    hash$1 = Hash;
    return hash$1;
  }
  var sha;
  var hasRequiredSha;
  function requireSha() {
    if (hasRequiredSha) return sha;
    hasRequiredSha = 1;
    var inherits2 = requireInherits_browser();
    var Hash = requireHash();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var K2 = [
      1518500249,
      1859775393,
      2400959708 | 0,
      3395469782 | 0
    ];
    var W = new Array(80);
    function Sha() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits2(Sha, Hash);
    Sha.prototype.init = function() {
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
      return this;
    };
    function rotl5(num) {
      return num << 5 | num >>> 27;
    }
    function rotl30(num) {
      return num << 30 | num >>> 2;
    }
    function ft(s2, b, c, d) {
      if (s2 === 0) return b & c | ~b & d;
      if (s2 === 2) return b & c | b & d | c & d;
      return b ^ c ^ d;
    }
    Sha.prototype._update = function(M) {
      var W2 = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      for (var i2 = 0; i2 < 16; ++i2) W2[i2] = M.readInt32BE(i2 * 4);
      for (; i2 < 80; ++i2) W2[i2] = W2[i2 - 3] ^ W2[i2 - 8] ^ W2[i2 - 14] ^ W2[i2 - 16];
      for (var j = 0; j < 80; ++j) {
        var s2 = ~~(j / 20);
        var t2 = rotl5(a) + ft(s2, b, c, d) + e + W2[j] + K2[s2] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t2;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
    };
    Sha.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
      return H;
    };
    sha = Sha;
    return sha;
  }
  var sha1;
  var hasRequiredSha1;
  function requireSha1() {
    if (hasRequiredSha1) return sha1;
    hasRequiredSha1 = 1;
    var inherits2 = requireInherits_browser();
    var Hash = requireHash();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var K2 = [
      1518500249,
      1859775393,
      2400959708 | 0,
      3395469782 | 0
    ];
    var W = new Array(80);
    function Sha1() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits2(Sha1, Hash);
    Sha1.prototype.init = function() {
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
      return this;
    };
    function rotl1(num) {
      return num << 1 | num >>> 31;
    }
    function rotl5(num) {
      return num << 5 | num >>> 27;
    }
    function rotl30(num) {
      return num << 30 | num >>> 2;
    }
    function ft(s2, b, c, d) {
      if (s2 === 0) return b & c | ~b & d;
      if (s2 === 2) return b & c | b & d | c & d;
      return b ^ c ^ d;
    }
    Sha1.prototype._update = function(M) {
      var W2 = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      for (var i2 = 0; i2 < 16; ++i2) W2[i2] = M.readInt32BE(i2 * 4);
      for (; i2 < 80; ++i2) W2[i2] = rotl1(W2[i2 - 3] ^ W2[i2 - 8] ^ W2[i2 - 14] ^ W2[i2 - 16]);
      for (var j = 0; j < 80; ++j) {
        var s2 = ~~(j / 20);
        var t2 = rotl5(a) + ft(s2, b, c, d) + e + W2[j] + K2[s2] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t2;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
    };
    Sha1.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
      return H;
    };
    sha1 = Sha1;
    return sha1;
  }
  var sha256$3;
  var hasRequiredSha256$1;
  function requireSha256$1() {
    if (hasRequiredSha256$1) return sha256$3;
    hasRequiredSha256$1 = 1;
    var inherits2 = requireInherits_browser();
    var Hash = requireHash();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var K2 = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    var W = new Array(64);
    function Sha256() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits2(Sha256, Hash);
    Sha256.prototype.init = function() {
      this._a = 1779033703;
      this._b = 3144134277;
      this._c = 1013904242;
      this._d = 2773480762;
      this._e = 1359893119;
      this._f = 2600822924;
      this._g = 528734635;
      this._h = 1541459225;
      return this;
    };
    function ch(x, y, z) {
      return z ^ x & (y ^ z);
    }
    function maj(x, y, z) {
      return x & y | z & (x | y);
    }
    function sigma0(x) {
      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
    }
    function sigma1(x) {
      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
    }
    function gamma0(x) {
      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
    }
    function gamma1(x) {
      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
    }
    Sha256.prototype._update = function(M) {
      var W2 = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      var f2 = this._f | 0;
      var g = this._g | 0;
      var h = this._h | 0;
      for (var i2 = 0; i2 < 16; ++i2) W2[i2] = M.readInt32BE(i2 * 4);
      for (; i2 < 64; ++i2) W2[i2] = gamma1(W2[i2 - 2]) + W2[i2 - 7] + gamma0(W2[i2 - 15]) + W2[i2 - 16] | 0;
      for (var j = 0; j < 64; ++j) {
        var T1 = h + sigma1(e) + ch(e, f2, g) + K2[j] + W2[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f2;
        f2 = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
      this._f = f2 + this._f | 0;
      this._g = g + this._g | 0;
      this._h = h + this._h | 0;
    };
    Sha256.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(32);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      H.writeInt32BE(this._h, 28);
      return H;
    };
    sha256$3 = Sha256;
    return sha256$3;
  }
  var sha224$1;
  var hasRequiredSha224;
  function requireSha224() {
    if (hasRequiredSha224) return sha224$1;
    hasRequiredSha224 = 1;
    var inherits2 = requireInherits_browser();
    var Sha256 = requireSha256$1();
    var Hash = requireHash();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var W = new Array(64);
    function Sha224() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits2(Sha224, Sha256);
    Sha224.prototype.init = function() {
      this._a = 3238371032;
      this._b = 914150663;
      this._c = 812702999;
      this._d = 4144912697;
      this._e = 4290775857;
      this._f = 1750603025;
      this._g = 1694076839;
      this._h = 3204075428;
      return this;
    };
    Sha224.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(28);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      return H;
    };
    sha224$1 = Sha224;
    return sha224$1;
  }
  var sha512$1;
  var hasRequiredSha512;
  function requireSha512() {
    if (hasRequiredSha512) return sha512$1;
    hasRequiredSha512 = 1;
    var inherits2 = requireInherits_browser();
    var Hash = requireHash();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var K2 = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    var W = new Array(160);
    function Sha512() {
      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
    }
    inherits2(Sha512, Hash);
    Sha512.prototype.init = function() {
      this._ah = 1779033703;
      this._bh = 3144134277;
      this._ch = 1013904242;
      this._dh = 2773480762;
      this._eh = 1359893119;
      this._fh = 2600822924;
      this._gh = 528734635;
      this._hh = 1541459225;
      this._al = 4089235720;
      this._bl = 2227873595;
      this._cl = 4271175723;
      this._dl = 1595750129;
      this._el = 2917565137;
      this._fl = 725511199;
      this._gl = 4215389547;
      this._hl = 327033209;
      return this;
    };
    function Ch(x, y, z) {
      return z ^ x & (y ^ z);
    }
    function maj(x, y, z) {
      return x & y | z & (x | y);
    }
    function sigma0(x, xl) {
      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
    }
    function sigma1(x, xl) {
      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
    }
    function Gamma0(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
    }
    function Gamma0l(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
    }
    function Gamma1(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
    }
    function Gamma1l(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
    }
    function getCarry(a, b) {
      return a >>> 0 < b >>> 0 ? 1 : 0;
    }
    Sha512.prototype._update = function(M) {
      var W2 = this._w;
      var ah = this._ah | 0;
      var bh = this._bh | 0;
      var ch = this._ch | 0;
      var dh2 = this._dh | 0;
      var eh = this._eh | 0;
      var fh = this._fh | 0;
      var gh = this._gh | 0;
      var hh = this._hh | 0;
      var al = this._al | 0;
      var bl = this._bl | 0;
      var cl = this._cl | 0;
      var dl = this._dl | 0;
      var el = this._el | 0;
      var fl = this._fl | 0;
      var gl = this._gl | 0;
      var hl = this._hl | 0;
      for (var i2 = 0; i2 < 32; i2 += 2) {
        W2[i2] = M.readInt32BE(i2 * 4);
        W2[i2 + 1] = M.readInt32BE(i2 * 4 + 4);
      }
      for (; i2 < 160; i2 += 2) {
        var xh = W2[i2 - 15 * 2];
        var xl = W2[i2 - 15 * 2 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W2[i2 - 2 * 2];
        xl = W2[i2 - 2 * 2 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        var Wi7h = W2[i2 - 7 * 2];
        var Wi7l = W2[i2 - 7 * 2 + 1];
        var Wi16h = W2[i2 - 16 * 2];
        var Wi16l = W2[i2 - 16 * 2 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W2[i2] = Wih;
        W2[i2 + 1] = Wil;
      }
      for (var j = 0; j < 160; j += 2) {
        Wih = W2[j];
        Wil = W2[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        var Kih = K2[j];
        var Kil = K2[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh2 + t1h + getCarry(el, dl) | 0;
        dh2 = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
      }
      this._al = this._al + al | 0;
      this._bl = this._bl + bl | 0;
      this._cl = this._cl + cl | 0;
      this._dl = this._dl + dl | 0;
      this._el = this._el + el | 0;
      this._fl = this._fl + fl | 0;
      this._gl = this._gl + gl | 0;
      this._hl = this._hl + hl | 0;
      this._ah = this._ah + ah + getCarry(this._al, al) | 0;
      this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
      this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
      this._dh = this._dh + dh2 + getCarry(this._dl, dl) | 0;
      this._eh = this._eh + eh + getCarry(this._el, el) | 0;
      this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
      this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
      this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
    };
    Sha512.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(64);
      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      writeInt64BE(this._gh, this._gl, 48);
      writeInt64BE(this._hh, this._hl, 56);
      return H;
    };
    sha512$1 = Sha512;
    return sha512$1;
  }
  var sha384$1;
  var hasRequiredSha384;
  function requireSha384() {
    if (hasRequiredSha384) return sha384$1;
    hasRequiredSha384 = 1;
    var inherits2 = requireInherits_browser();
    var SHA5122 = requireSha512();
    var Hash = requireHash();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var W = new Array(160);
    function Sha384() {
      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
    }
    inherits2(Sha384, SHA5122);
    Sha384.prototype.init = function() {
      this._ah = 3418070365;
      this._bh = 1654270250;
      this._ch = 2438529370;
      this._dh = 355462360;
      this._eh = 1731405415;
      this._fh = 2394180231;
      this._gh = 3675008525;
      this._hh = 1203062813;
      this._al = 3238371032;
      this._bl = 914150663;
      this._cl = 812702999;
      this._dl = 4144912697;
      this._el = 4290775857;
      this._fl = 1750603025;
      this._gl = 1694076839;
      this._hl = 3204075428;
      return this;
    };
    Sha384.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(48);
      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      return H;
    };
    sha384$1 = Sha384;
    return sha384$1;
  }
  var hasRequiredSha_js;
  function requireSha_js() {
    if (hasRequiredSha_js) return sha_js.exports;
    hasRequiredSha_js = 1;
    var exports2 = sha_js.exports = function SHA(algorithm) {
      algorithm = algorithm.toLowerCase();
      var Algorithm = exports2[algorithm];
      if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
      return new Algorithm();
    };
    exports2.sha = requireSha();
    exports2.sha1 = requireSha1();
    exports2.sha224 = requireSha224();
    exports2.sha256 = requireSha256$1();
    exports2.sha384 = requireSha384();
    exports2.sha512 = requireSha512();
    return sha_js.exports;
  }
  var streamBrowserify;
  var hasRequiredStreamBrowserify;
  function requireStreamBrowserify() {
    if (hasRequiredStreamBrowserify) return streamBrowserify;
    hasRequiredStreamBrowserify = 1;
    streamBrowserify = Stream;
    var EE = eventsExports.EventEmitter;
    var inherits2 = requireInherits_browser();
    inherits2(Stream, EE);
    Stream.Readable = require_stream_readable$1();
    Stream.Writable = require_stream_writable$1();
    Stream.Duplex = require_stream_duplex$1();
    Stream.Transform = require_stream_transform$1();
    Stream.PassThrough = require_stream_passthrough$1();
    Stream.finished = requireEndOfStream();
    Stream.pipeline = requirePipeline();
    Stream.Stream = Stream;
    function Stream() {
      EE.call(this);
    }
    Stream.prototype.pipe = function(dest, options) {
      var source = this;
      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }
      source.on("data", ondata);
      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }
      dest.on("drain", ondrain);
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
      }
      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
      }
      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === "function") dest.destroy();
      }
      function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, "error") === 0) {
          throw er;
        }
      }
      source.on("error", onerror);
      dest.on("error", onerror);
      function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
      }
      source.on("end", cleanup);
      source.on("close", cleanup);
      dest.on("close", cleanup);
      dest.emit("pipe", source);
      return dest;
    };
    return streamBrowserify;
  }
  var cipherBase;
  var hasRequiredCipherBase;
  function requireCipherBase() {
    if (hasRequiredCipherBase) return cipherBase;
    hasRequiredCipherBase = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var Transform = requireStreamBrowserify().Transform;
    var StringDecoder = requireString_decoder().StringDecoder;
    var inherits2 = requireInherits_browser();
    function CipherBase(hashMode) {
      Transform.call(this);
      this.hashMode = typeof hashMode === "string";
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest;
      } else {
        this["final"] = this._finalOrDigest;
      }
      if (this._final) {
        this.__final = this._final;
        this._final = null;
      }
      this._decoder = null;
      this._encoding = null;
    }
    inherits2(CipherBase, Transform);
    var useUint8Array = typeof Uint8Array !== "undefined";
    var useArrayBuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined" && ArrayBuffer.isView && (Buffer2.prototype instanceof Uint8Array || Buffer2.TYPED_ARRAY_SUPPORT);
    function toBuffer2(data, encoding2) {
      if (data instanceof Buffer2) {
        return data;
      }
      if (typeof data === "string") {
        return Buffer2.from(data, encoding2);
      }
      if (useArrayBuffer && ArrayBuffer.isView(data)) {
        if (data.byteLength === 0) {
          return Buffer2.alloc(0);
        }
        var res = Buffer2.from(data.buffer, data.byteOffset, data.byteLength);
        if (res.byteLength === data.byteLength) {
          return res;
        }
      }
      if (useUint8Array && data instanceof Uint8Array) {
        return Buffer2.from(data);
      }
      if (Buffer2.isBuffer(data) && data.constructor && typeof data.constructor.isBuffer === "function" && data.constructor.isBuffer(data)) {
        return Buffer2.from(data);
      }
      throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
    }
    CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
      var bufferData = toBuffer2(data, inputEnc);
      var outData = this._update(bufferData);
      if (this.hashMode) {
        return this;
      }
      if (outputEnc) {
        outData = this._toString(outData, outputEnc);
      }
      return outData;
    };
    CipherBase.prototype.setAutoPadding = function() {
    };
    CipherBase.prototype.getAuthTag = function() {
      throw new Error("trying to get auth tag in unsupported state");
    };
    CipherBase.prototype.setAuthTag = function() {
      throw new Error("trying to set auth tag in unsupported state");
    };
    CipherBase.prototype.setAAD = function() {
      throw new Error("trying to set aad in unsupported state");
    };
    CipherBase.prototype._transform = function(data, _, next) {
      var err;
      try {
        if (this.hashMode) {
          this._update(data);
        } else {
          this.push(this._update(data));
        }
      } catch (e) {
        err = e;
      } finally {
        next(err);
      }
    };
    CipherBase.prototype._flush = function(done) {
      var err;
      try {
        this.push(this.__final());
      } catch (e) {
        err = e;
      }
      done(err);
    };
    CipherBase.prototype._finalOrDigest = function(outputEnc) {
      var outData = this.__final() || Buffer2.alloc(0);
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true);
      }
      return outData;
    };
    CipherBase.prototype._toString = function(value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
      }
      if (this._encoding !== enc) {
        throw new Error("can’t switch encodings");
      }
      var out = this._decoder.write(value);
      if (fin) {
        out += this._decoder.end();
      }
      return out;
    };
    cipherBase = CipherBase;
    return cipherBase;
  }
  var browser$c;
  var hasRequiredBrowser$b;
  function requireBrowser$b() {
    if (hasRequiredBrowser$b) return browser$c;
    hasRequiredBrowser$b = 1;
    var inherits2 = requireInherits_browser();
    var MD5 = requireMd5_js();
    var RIPEMD1602 = requireRipemd160();
    var sha2 = requireSha_js();
    var Base = requireCipherBase();
    function Hash(hash2) {
      Base.call(this, "digest");
      this._hash = hash2;
    }
    inherits2(Hash, Base);
    Hash.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hash.prototype._final = function() {
      return this._hash.digest();
    };
    browser$c = function createHash(alg) {
      alg = alg.toLowerCase();
      if (alg === "md5") return new MD5();
      if (alg === "rmd160" || alg === "ripemd160") return new RIPEMD1602();
      return new Hash(sha2(alg));
    };
    return browser$c;
  }
  var legacy;
  var hasRequiredLegacy;
  function requireLegacy() {
    if (hasRequiredLegacy) return legacy;
    hasRequiredLegacy = 1;
    var inherits2 = requireInherits_browser();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var Base = requireCipherBase();
    var ZEROS = Buffer2.alloc(128);
    var blocksize = 64;
    function Hmac2(alg, key2) {
      Base.call(this, "digest");
      if (typeof key2 === "string") {
        key2 = Buffer2.from(key2);
      }
      this._alg = alg;
      this._key = key2;
      if (key2.length > blocksize) {
        key2 = alg(key2);
      } else if (key2.length < blocksize) {
        key2 = Buffer2.concat([key2, ZEROS], blocksize);
      }
      var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
      var opad = this._opad = Buffer2.allocUnsafe(blocksize);
      for (var i2 = 0; i2 < blocksize; i2++) {
        ipad[i2] = key2[i2] ^ 54;
        opad[i2] = key2[i2] ^ 92;
      }
      this._hash = [ipad];
    }
    inherits2(Hmac2, Base);
    Hmac2.prototype._update = function(data) {
      this._hash.push(data);
    };
    Hmac2.prototype._final = function() {
      var h = this._alg(Buffer2.concat(this._hash));
      return this._alg(Buffer2.concat([this._opad, h]));
    };
    legacy = Hmac2;
    return legacy;
  }
  var md5;
  var hasRequiredMd5;
  function requireMd5() {
    if (hasRequiredMd5) return md5;
    hasRequiredMd5 = 1;
    var MD5 = requireMd5_js();
    md5 = function(buffer2) {
      return new MD5().update(buffer2).digest();
    };
    return md5;
  }
  var browser$b;
  var hasRequiredBrowser$a;
  function requireBrowser$a() {
    if (hasRequiredBrowser$a) return browser$b;
    hasRequiredBrowser$a = 1;
    var inherits2 = requireInherits_browser();
    var Legacy = requireLegacy();
    var Base = requireCipherBase();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var md52 = requireMd5();
    var RIPEMD1602 = requireRipemd160();
    var sha2 = requireSha_js();
    var ZEROS = Buffer2.alloc(128);
    function Hmac2(alg, key2) {
      Base.call(this, "digest");
      if (typeof key2 === "string") {
        key2 = Buffer2.from(key2);
      }
      var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
      this._alg = alg;
      this._key = key2;
      if (key2.length > blocksize) {
        var hash2 = alg === "rmd160" ? new RIPEMD1602() : sha2(alg);
        key2 = hash2.update(key2).digest();
      } else if (key2.length < blocksize) {
        key2 = Buffer2.concat([key2, ZEROS], blocksize);
      }
      var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
      var opad = this._opad = Buffer2.allocUnsafe(blocksize);
      for (var i2 = 0; i2 < blocksize; i2++) {
        ipad[i2] = key2[i2] ^ 54;
        opad[i2] = key2[i2] ^ 92;
      }
      this._hash = alg === "rmd160" ? new RIPEMD1602() : sha2(alg);
      this._hash.update(ipad);
    }
    inherits2(Hmac2, Base);
    Hmac2.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hmac2.prototype._final = function() {
      var h = this._hash.digest();
      var hash2 = this._alg === "rmd160" ? new RIPEMD1602() : sha2(this._alg);
      return hash2.update(this._opad).update(h).digest();
    };
    browser$b = function createHmac(alg, key2) {
      alg = alg.toLowerCase();
      if (alg === "rmd160" || alg === "ripemd160") {
        return new Hmac2("rmd160", key2);
      }
      if (alg === "md5") {
        return new Legacy(md52, key2);
      }
      return new Hmac2(alg, key2);
    };
    return browser$b;
  }
  const sha224WithRSAEncryption = {
    sign: "rsa",
    hash: "sha224",
    id: "302d300d06096086480165030402040500041c"
  };
  const sha256WithRSAEncryption = {
    sign: "rsa",
    hash: "sha256",
    id: "3031300d060960864801650304020105000420"
  };
  const sha384WithRSAEncryption = {
    sign: "rsa",
    hash: "sha384",
    id: "3041300d060960864801650304020205000430"
  };
  const sha512WithRSAEncryption = {
    sign: "rsa",
    hash: "sha512",
    id: "3051300d060960864801650304020305000440"
  };
  const sha256$2 = {
    sign: "ecdsa",
    hash: "sha256",
    id: ""
  };
  const sha224 = {
    sign: "ecdsa",
    hash: "sha224",
    id: ""
  };
  const sha384 = {
    sign: "ecdsa",
    hash: "sha384",
    id: ""
  };
  const sha512 = {
    sign: "ecdsa",
    hash: "sha512",
    id: ""
  };
  const DSA = {
    sign: "dsa",
    hash: "sha1",
    id: ""
  };
  const ripemd160WithRSA = {
    sign: "rsa",
    hash: "rmd160",
    id: "3021300906052b2403020105000414"
  };
  const md5WithRSAEncryption = {
    sign: "rsa",
    hash: "md5",
    id: "3020300c06082a864886f70d020505000410"
  };
  const require$$6 = {
    sha224WithRSAEncryption,
    "RSA-SHA224": {
      sign: "ecdsa/rsa",
      hash: "sha224",
      id: "302d300d06096086480165030402040500041c"
    },
    sha256WithRSAEncryption,
    "RSA-SHA256": {
      sign: "ecdsa/rsa",
      hash: "sha256",
      id: "3031300d060960864801650304020105000420"
    },
    sha384WithRSAEncryption,
    "RSA-SHA384": {
      sign: "ecdsa/rsa",
      hash: "sha384",
      id: "3041300d060960864801650304020205000430"
    },
    sha512WithRSAEncryption,
    "RSA-SHA512": {
      sign: "ecdsa/rsa",
      hash: "sha512",
      id: "3051300d060960864801650304020305000440"
    },
    "RSA-SHA1": {
      sign: "rsa",
      hash: "sha1",
      id: "3021300906052b0e03021a05000414"
    },
    "ecdsa-with-SHA1": {
      sign: "ecdsa",
      hash: "sha1",
      id: ""
    },
    sha256: sha256$2,
    sha224,
    sha384,
    sha512,
    "DSA-SHA": {
      sign: "dsa",
      hash: "sha1",
      id: ""
    },
    "DSA-SHA1": {
      sign: "dsa",
      hash: "sha1",
      id: ""
    },
    DSA,
    "DSA-WITH-SHA224": {
      sign: "dsa",
      hash: "sha224",
      id: ""
    },
    "DSA-SHA224": {
      sign: "dsa",
      hash: "sha224",
      id: ""
    },
    "DSA-WITH-SHA256": {
      sign: "dsa",
      hash: "sha256",
      id: ""
    },
    "DSA-SHA256": {
      sign: "dsa",
      hash: "sha256",
      id: ""
    },
    "DSA-WITH-SHA384": {
      sign: "dsa",
      hash: "sha384",
      id: ""
    },
    "DSA-SHA384": {
      sign: "dsa",
      hash: "sha384",
      id: ""
    },
    "DSA-WITH-SHA512": {
      sign: "dsa",
      hash: "sha512",
      id: ""
    },
    "DSA-SHA512": {
      sign: "dsa",
      hash: "sha512",
      id: ""
    },
    "DSA-RIPEMD160": {
      sign: "dsa",
      hash: "rmd160",
      id: ""
    },
    ripemd160WithRSA,
    "RSA-RIPEMD160": {
      sign: "rsa",
      hash: "rmd160",
      id: "3021300906052b2403020105000414"
    },
    md5WithRSAEncryption,
    "RSA-MD5": {
      sign: "rsa",
      hash: "md5",
      id: "3020300c06082a864886f70d020505000410"
    }
  };
  var algos;
  var hasRequiredAlgos;
  function requireAlgos() {
    if (hasRequiredAlgos) return algos;
    hasRequiredAlgos = 1;
    algos = require$$6;
    return algos;
  }
  var browser$a = {};
  var precondition;
  var hasRequiredPrecondition;
  function requirePrecondition() {
    if (hasRequiredPrecondition) return precondition;
    hasRequiredPrecondition = 1;
    var MAX_ALLOC = Math.pow(2, 30) - 1;
    precondition = function(iterations, keylen) {
      if (typeof iterations !== "number") {
        throw new TypeError("Iterations not a number");
      }
      if (iterations < 0) {
        throw new TypeError("Bad iterations");
      }
      if (typeof keylen !== "number") {
        throw new TypeError("Key length not a number");
      }
      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
        throw new TypeError("Bad key length");
      }
    };
    return precondition;
  }
  var defaultEncoding_1;
  var hasRequiredDefaultEncoding;
  function requireDefaultEncoding() {
    if (hasRequiredDefaultEncoding) return defaultEncoding_1;
    hasRequiredDefaultEncoding = 1;
    var defaultEncoding;
    if (commonjsGlobal.process && commonjsGlobal.process.browser) {
      defaultEncoding = "utf-8";
    } else if (commonjsGlobal.process && commonjsGlobal.process.version) {
      var pVersionMajor = parseInt(process$1.version.split(".")[0].slice(1), 10);
      defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
    } else {
      defaultEncoding = "utf-8";
    }
    defaultEncoding_1 = defaultEncoding;
    return defaultEncoding_1;
  }
  var toBuffer;
  var hasRequiredToBuffer;
  function requireToBuffer() {
    if (hasRequiredToBuffer) return toBuffer;
    hasRequiredToBuffer = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    toBuffer = function(thing, encoding2, name2) {
      if (Buffer2.isBuffer(thing)) {
        return thing;
      } else if (typeof thing === "string") {
        return Buffer2.from(thing, encoding2);
      } else if (ArrayBuffer.isView(thing)) {
        return Buffer2.from(thing.buffer);
      } else {
        throw new TypeError(name2 + " must be a string, a Buffer, a typed array or a DataView");
      }
    };
    return toBuffer;
  }
  var syncBrowser;
  var hasRequiredSyncBrowser;
  function requireSyncBrowser() {
    if (hasRequiredSyncBrowser) return syncBrowser;
    hasRequiredSyncBrowser = 1;
    var md52 = requireMd5();
    var RIPEMD1602 = requireRipemd160();
    var sha2 = requireSha_js();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var checkParameters = requirePrecondition();
    var defaultEncoding = requireDefaultEncoding();
    var toBuffer2 = requireToBuffer();
    var ZEROS = Buffer2.alloc(128);
    var sizes = {
      md5: 16,
      sha1: 20,
      sha224: 28,
      sha256: 32,
      sha384: 48,
      sha512: 64,
      rmd160: 20,
      ripemd160: 20
    };
    function Hmac2(alg, key2, saltLen) {
      var hash2 = getDigest(alg);
      var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
      if (key2.length > blocksize) {
        key2 = hash2(key2);
      } else if (key2.length < blocksize) {
        key2 = Buffer2.concat([key2, ZEROS], blocksize);
      }
      var ipad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
      var opad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
      for (var i2 = 0; i2 < blocksize; i2++) {
        ipad[i2] = key2[i2] ^ 54;
        opad[i2] = key2[i2] ^ 92;
      }
      var ipad1 = Buffer2.allocUnsafe(blocksize + saltLen + 4);
      ipad.copy(ipad1, 0, 0, blocksize);
      this.ipad1 = ipad1;
      this.ipad2 = ipad;
      this.opad = opad;
      this.alg = alg;
      this.blocksize = blocksize;
      this.hash = hash2;
      this.size = sizes[alg];
    }
    Hmac2.prototype.run = function(data, ipad) {
      data.copy(ipad, this.blocksize);
      var h = this.hash(ipad);
      h.copy(this.opad, this.blocksize);
      return this.hash(this.opad);
    };
    function getDigest(alg) {
      function shaFunc(data) {
        return sha2(alg).update(data).digest();
      }
      function rmd160Func(data) {
        return new RIPEMD1602().update(data).digest();
      }
      if (alg === "rmd160" || alg === "ripemd160") return rmd160Func;
      if (alg === "md5") return md52;
      return shaFunc;
    }
    function pbkdf2(password, salt, iterations, keylen, digest) {
      checkParameters(iterations, keylen);
      password = toBuffer2(password, defaultEncoding, "Password");
      salt = toBuffer2(salt, defaultEncoding, "Salt");
      digest = digest || "sha1";
      var hmac2 = new Hmac2(digest, password, salt.length);
      var DK = Buffer2.allocUnsafe(keylen);
      var block1 = Buffer2.allocUnsafe(salt.length + 4);
      salt.copy(block1, 0, 0, salt.length);
      var destPos = 0;
      var hLen = sizes[digest];
      var l = Math.ceil(keylen / hLen);
      for (var i2 = 1; i2 <= l; i2++) {
        block1.writeUInt32BE(i2, salt.length);
        var T = hmac2.run(block1, hmac2.ipad1);
        var U = T;
        for (var j = 1; j < iterations; j++) {
          U = hmac2.run(U, hmac2.ipad2);
          for (var k = 0; k < hLen; k++) T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
      }
      return DK;
    }
    syncBrowser = pbkdf2;
    return syncBrowser;
  }
  var async;
  var hasRequiredAsync;
  function requireAsync() {
    if (hasRequiredAsync) return async;
    hasRequiredAsync = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var checkParameters = requirePrecondition();
    var defaultEncoding = requireDefaultEncoding();
    var sync = requireSyncBrowser();
    var toBuffer2 = requireToBuffer();
    var ZERO_BUF;
    var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;
    var toBrowser = {
      sha: "SHA-1",
      "sha-1": "SHA-1",
      sha1: "SHA-1",
      sha256: "SHA-256",
      "sha-256": "SHA-256",
      sha384: "SHA-384",
      "sha-384": "SHA-384",
      "sha-512": "SHA-512",
      sha512: "SHA-512"
    };
    var checks = [];
    function checkNative(algo) {
      if (commonjsGlobal.process && !commonjsGlobal.process.browser) {
        return Promise.resolve(false);
      }
      if (!subtle || !subtle.importKey || !subtle.deriveBits) {
        return Promise.resolve(false);
      }
      if (checks[algo] !== void 0) {
        return checks[algo];
      }
      ZERO_BUF = ZERO_BUF || Buffer2.alloc(8);
      var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
        return true;
      }).catch(function() {
        return false;
      });
      checks[algo] = prom;
      return prom;
    }
    var nextTick;
    function getNextTick() {
      if (nextTick) {
        return nextTick;
      }
      if (commonjsGlobal.process && commonjsGlobal.process.nextTick) {
        nextTick = commonjsGlobal.process.nextTick;
      } else if (commonjsGlobal.queueMicrotask) {
        nextTick = commonjsGlobal.queueMicrotask;
      } else if (commonjsGlobal.setImmediate) {
        nextTick = commonjsGlobal.setImmediate;
      } else {
        nextTick = commonjsGlobal.setTimeout;
      }
      return nextTick;
    }
    function browserPbkdf2(password, salt, iterations, length, algo) {
      return subtle.importKey(
        "raw",
        password,
        { name: "PBKDF2" },
        false,
        ["deriveBits"]
      ).then(function(key2) {
        return subtle.deriveBits({
          name: "PBKDF2",
          salt,
          iterations,
          hash: {
            name: algo
          }
        }, key2, length << 3);
      }).then(function(res) {
        return Buffer2.from(res);
      });
    }
    function resolvePromise(promise2, callback) {
      promise2.then(function(out) {
        getNextTick()(function() {
          callback(null, out);
        });
      }, function(e) {
        getNextTick()(function() {
          callback(e);
        });
      });
    }
    async = function(password, salt, iterations, keylen, digest, callback) {
      if (typeof digest === "function") {
        callback = digest;
        digest = void 0;
      }
      digest = digest || "sha1";
      var algo = toBrowser[digest.toLowerCase()];
      if (!algo || typeof commonjsGlobal.Promise !== "function") {
        getNextTick()(function() {
          var out;
          try {
            out = sync(password, salt, iterations, keylen, digest);
          } catch (e) {
            return callback(e);
          }
          callback(null, out);
        });
        return;
      }
      checkParameters(iterations, keylen);
      password = toBuffer2(password, defaultEncoding, "Password");
      salt = toBuffer2(salt, defaultEncoding, "Salt");
      if (typeof callback !== "function") throw new Error("No callback provided to pbkdf2");
      resolvePromise(checkNative(algo).then(function(resp) {
        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
        return sync(password, salt, iterations, keylen, digest);
      }), callback);
    };
    return async;
  }
  var hasRequiredBrowser$9;
  function requireBrowser$9() {
    if (hasRequiredBrowser$9) return browser$a;
    hasRequiredBrowser$9 = 1;
    browser$a.pbkdf2 = requireAsync();
    browser$a.pbkdf2Sync = requireSyncBrowser();
    return browser$a;
  }
  var browser$9 = {};
  var des$1 = {};
  var utils$c = {};
  var hasRequiredUtils$2;
  function requireUtils$2() {
    if (hasRequiredUtils$2) return utils$c;
    hasRequiredUtils$2 = 1;
    utils$c.readUInt32BE = function readUInt32BE(bytes2, off) {
      var res = bytes2[0 + off] << 24 | bytes2[1 + off] << 16 | bytes2[2 + off] << 8 | bytes2[3 + off];
      return res >>> 0;
    };
    utils$c.writeUInt32BE = function writeUInt32BE(bytes2, value, off) {
      bytes2[0 + off] = value >>> 24;
      bytes2[1 + off] = value >>> 16 & 255;
      bytes2[2 + off] = value >>> 8 & 255;
      bytes2[3 + off] = value & 255;
    };
    utils$c.ip = function ip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i2 = 6; i2 >= 0; i2 -= 2) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >>> j + i2 & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >>> j + i2 & 1;
        }
      }
      for (var i2 = 6; i2 >= 0; i2 -= 2) {
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inR >>> j + i2 & 1;
        }
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inL >>> j + i2 & 1;
        }
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    utils$c.rip = function rip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i2 = 0; i2 < 4; i2++) {
        for (var j = 24; j >= 0; j -= 8) {
          outL <<= 1;
          outL |= inR >>> j + i2 & 1;
          outL <<= 1;
          outL |= inL >>> j + i2 & 1;
        }
      }
      for (var i2 = 4; i2 < 8; i2++) {
        for (var j = 24; j >= 0; j -= 8) {
          outR <<= 1;
          outR |= inR >>> j + i2 & 1;
          outR <<= 1;
          outR |= inL >>> j + i2 & 1;
        }
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    utils$c.pc1 = function pc1(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i2 = 7; i2 >= 5; i2--) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >> j + i2 & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >> j + i2 & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= inR >> j + i2 & 1;
      }
      for (var i2 = 1; i2 <= 3; i2++) {
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inR >> j + i2 & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inL >> j + i2 & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= inL >> j + i2 & 1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    utils$c.r28shl = function r28shl(num, shift) {
      return num << shift & 268435455 | num >>> 28 - shift;
    };
    var pc2table = [
      // inL => outL
      14,
      11,
      17,
      4,
      27,
      23,
      25,
      0,
      13,
      22,
      7,
      18,
      5,
      9,
      16,
      24,
      2,
      20,
      12,
      21,
      1,
      8,
      15,
      26,
      // inR => outR
      15,
      4,
      25,
      19,
      9,
      1,
      26,
      16,
      5,
      11,
      23,
      8,
      12,
      7,
      17,
      0,
      22,
      3,
      10,
      14,
      6,
      20,
      27,
      24
    ];
    utils$c.pc2 = function pc2(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      var len2 = pc2table.length >>> 1;
      for (var i2 = 0; i2 < len2; i2++) {
        outL <<= 1;
        outL |= inL >>> pc2table[i2] & 1;
      }
      for (var i2 = len2; i2 < pc2table.length; i2++) {
        outR <<= 1;
        outR |= inR >>> pc2table[i2] & 1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    utils$c.expand = function expand(r2, out, off) {
      var outL = 0;
      var outR = 0;
      outL = (r2 & 1) << 5 | r2 >>> 27;
      for (var i2 = 23; i2 >= 15; i2 -= 4) {
        outL <<= 6;
        outL |= r2 >>> i2 & 63;
      }
      for (var i2 = 11; i2 >= 3; i2 -= 4) {
        outR |= r2 >>> i2 & 63;
        outR <<= 6;
      }
      outR |= (r2 & 31) << 1 | r2 >>> 31;
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    var sTable = [
      14,
      0,
      4,
      15,
      13,
      7,
      1,
      4,
      2,
      14,
      15,
      2,
      11,
      13,
      8,
      1,
      3,
      10,
      10,
      6,
      6,
      12,
      12,
      11,
      5,
      9,
      9,
      5,
      0,
      3,
      7,
      8,
      4,
      15,
      1,
      12,
      14,
      8,
      8,
      2,
      13,
      4,
      6,
      9,
      2,
      1,
      11,
      7,
      15,
      5,
      12,
      11,
      9,
      3,
      7,
      14,
      3,
      10,
      10,
      0,
      5,
      6,
      0,
      13,
      15,
      3,
      1,
      13,
      8,
      4,
      14,
      7,
      6,
      15,
      11,
      2,
      3,
      8,
      4,
      14,
      9,
      12,
      7,
      0,
      2,
      1,
      13,
      10,
      12,
      6,
      0,
      9,
      5,
      11,
      10,
      5,
      0,
      13,
      14,
      8,
      7,
      10,
      11,
      1,
      10,
      3,
      4,
      15,
      13,
      4,
      1,
      2,
      5,
      11,
      8,
      6,
      12,
      7,
      6,
      12,
      9,
      0,
      3,
      5,
      2,
      14,
      15,
      9,
      10,
      13,
      0,
      7,
      9,
      0,
      14,
      9,
      6,
      3,
      3,
      4,
      15,
      6,
      5,
      10,
      1,
      2,
      13,
      8,
      12,
      5,
      7,
      14,
      11,
      12,
      4,
      11,
      2,
      15,
      8,
      1,
      13,
      1,
      6,
      10,
      4,
      13,
      9,
      0,
      8,
      6,
      15,
      9,
      3,
      8,
      0,
      7,
      11,
      4,
      1,
      15,
      2,
      14,
      12,
      3,
      5,
      11,
      10,
      5,
      14,
      2,
      7,
      12,
      7,
      13,
      13,
      8,
      14,
      11,
      3,
      5,
      0,
      6,
      6,
      15,
      9,
      0,
      10,
      3,
      1,
      4,
      2,
      7,
      8,
      2,
      5,
      12,
      11,
      1,
      12,
      10,
      4,
      14,
      15,
      9,
      10,
      3,
      6,
      15,
      9,
      0,
      0,
      6,
      12,
      10,
      11,
      1,
      7,
      13,
      13,
      8,
      15,
      9,
      1,
      4,
      3,
      5,
      14,
      11,
      5,
      12,
      2,
      7,
      8,
      2,
      4,
      14,
      2,
      14,
      12,
      11,
      4,
      2,
      1,
      12,
      7,
      4,
      10,
      7,
      11,
      13,
      6,
      1,
      8,
      5,
      5,
      0,
      3,
      15,
      15,
      10,
      13,
      3,
      0,
      9,
      14,
      8,
      9,
      6,
      4,
      11,
      2,
      8,
      1,
      12,
      11,
      7,
      10,
      1,
      13,
      14,
      7,
      2,
      8,
      13,
      15,
      6,
      9,
      15,
      12,
      0,
      5,
      9,
      6,
      10,
      3,
      4,
      0,
      5,
      14,
      3,
      12,
      10,
      1,
      15,
      10,
      4,
      15,
      2,
      9,
      7,
      2,
      12,
      6,
      9,
      8,
      5,
      0,
      6,
      13,
      1,
      3,
      13,
      4,
      14,
      14,
      0,
      7,
      11,
      5,
      3,
      11,
      8,
      9,
      4,
      14,
      3,
      15,
      2,
      5,
      12,
      2,
      9,
      8,
      5,
      12,
      15,
      3,
      10,
      7,
      11,
      0,
      14,
      4,
      1,
      10,
      7,
      1,
      6,
      13,
      0,
      11,
      8,
      6,
      13,
      4,
      13,
      11,
      0,
      2,
      11,
      14,
      7,
      15,
      4,
      0,
      9,
      8,
      1,
      13,
      10,
      3,
      14,
      12,
      3,
      9,
      5,
      7,
      12,
      5,
      2,
      10,
      15,
      6,
      8,
      1,
      6,
      1,
      6,
      4,
      11,
      11,
      13,
      13,
      8,
      12,
      1,
      3,
      4,
      7,
      10,
      14,
      7,
      10,
      9,
      15,
      5,
      6,
      0,
      8,
      15,
      0,
      14,
      5,
      2,
      9,
      3,
      2,
      12,
      13,
      1,
      2,
      15,
      8,
      13,
      4,
      8,
      6,
      10,
      15,
      3,
      11,
      7,
      1,
      4,
      10,
      12,
      9,
      5,
      3,
      6,
      14,
      11,
      5,
      0,
      0,
      14,
      12,
      9,
      7,
      2,
      7,
      2,
      11,
      1,
      4,
      14,
      1,
      7,
      9,
      4,
      12,
      10,
      14,
      8,
      2,
      13,
      0,
      15,
      6,
      12,
      10,
      9,
      13,
      0,
      15,
      3,
      3,
      5,
      5,
      6,
      8,
      11
    ];
    utils$c.substitute = function substitute(inL, inR) {
      var out = 0;
      for (var i2 = 0; i2 < 4; i2++) {
        var b = inL >>> 18 - i2 * 6 & 63;
        var sb = sTable[i2 * 64 + b];
        out <<= 4;
        out |= sb;
      }
      for (var i2 = 0; i2 < 4; i2++) {
        var b = inR >>> 18 - i2 * 6 & 63;
        var sb = sTable[4 * 64 + i2 * 64 + b];
        out <<= 4;
        out |= sb;
      }
      return out >>> 0;
    };
    var permuteTable = [
      16,
      25,
      12,
      11,
      3,
      20,
      4,
      15,
      31,
      17,
      9,
      6,
      27,
      14,
      1,
      22,
      30,
      24,
      8,
      18,
      0,
      5,
      29,
      23,
      13,
      19,
      2,
      26,
      10,
      21,
      28,
      7
    ];
    utils$c.permute = function permute(num) {
      var out = 0;
      for (var i2 = 0; i2 < permuteTable.length; i2++) {
        out <<= 1;
        out |= num >>> permuteTable[i2] & 1;
      }
      return out >>> 0;
    };
    utils$c.padSplit = function padSplit(num, size2, group) {
      var str = num.toString(2);
      while (str.length < size2)
        str = "0" + str;
      var out = [];
      for (var i2 = 0; i2 < size2; i2 += group)
        out.push(str.slice(i2, i2 + group));
      return out.join(" ");
    };
    return utils$c;
  }
  var cipher;
  var hasRequiredCipher;
  function requireCipher() {
    if (hasRequiredCipher) return cipher;
    hasRequiredCipher = 1;
    var assert2 = minimalisticAssert$1;
    function Cipher(options) {
      this.options = options;
      this.type = this.options.type;
      this.blockSize = 8;
      this._init();
      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
      this.padding = options.padding !== false;
    }
    cipher = Cipher;
    Cipher.prototype._init = function _init() {
    };
    Cipher.prototype.update = function update(data) {
      if (data.length === 0)
        return [];
      if (this.type === "decrypt")
        return this._updateDecrypt(data);
      else
        return this._updateEncrypt(data);
    };
    Cipher.prototype._buffer = function _buffer(data, off) {
      var min2 = Math.min(this.buffer.length - this.bufferOff, data.length - off);
      for (var i2 = 0; i2 < min2; i2++)
        this.buffer[this.bufferOff + i2] = data[off + i2];
      this.bufferOff += min2;
      return min2;
    };
    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
      this._update(this.buffer, 0, out, off);
      this.bufferOff = 0;
      return this.blockSize;
    };
    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = (this.bufferOff + data.length) / this.blockSize | 0;
      var out = new Array(count * this.blockSize);
      if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length)
          outputOff += this._flushBuffer(out, outputOff);
      }
      var max2 = data.length - (data.length - inputOff) % this.blockSize;
      for (; inputOff < max2; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
      }
      for (; inputOff < data.length; inputOff++, this.bufferOff++)
        this.buffer[this.bufferOff] = data[inputOff];
      return out;
    };
    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize);
      for (; count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      }
      inputOff += this._buffer(data, inputOff);
      return out;
    };
    Cipher.prototype.final = function final(buffer2) {
      var first;
      if (buffer2)
        first = this.update(buffer2);
      var last;
      if (this.type === "encrypt")
        last = this._finalEncrypt();
      else
        last = this._finalDecrypt();
      if (first)
        return first.concat(last);
      else
        return last;
    };
    Cipher.prototype._pad = function _pad(buffer2, off) {
      if (off === 0)
        return false;
      while (off < buffer2.length)
        buffer2[off++] = 0;
      return true;
    };
    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
      if (!this._pad(this.buffer, this.bufferOff))
        return [];
      var out = new Array(this.blockSize);
      this._update(this.buffer, 0, out, 0);
      return out;
    };
    Cipher.prototype._unpad = function _unpad(buffer2) {
      return buffer2;
    };
    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
      assert2.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
      var out = new Array(this.blockSize);
      this._flushBuffer(out, 0);
      return this._unpad(out);
    };
    return cipher;
  }
  var des;
  var hasRequiredDes$1;
  function requireDes$1() {
    if (hasRequiredDes$1) return des;
    hasRequiredDes$1 = 1;
    var assert2 = minimalisticAssert$1;
    var inherits2 = requireInherits_browser();
    var utils2 = requireUtils$2();
    var Cipher = requireCipher();
    function DESState() {
      this.tmp = new Array(2);
      this.keys = null;
    }
    function DES(options) {
      Cipher.call(this, options);
      var state2 = new DESState();
      this._desState = state2;
      this.deriveKeys(state2, options.key);
    }
    inherits2(DES, Cipher);
    des = DES;
    DES.create = function create2(options) {
      return new DES(options);
    };
    var shiftTable = [
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      1
    ];
    DES.prototype.deriveKeys = function deriveKeys(state2, key2) {
      state2.keys = new Array(16 * 2);
      assert2.equal(key2.length, this.blockSize, "Invalid key length");
      var kL = utils2.readUInt32BE(key2, 0);
      var kR = utils2.readUInt32BE(key2, 4);
      utils2.pc1(kL, kR, state2.tmp, 0);
      kL = state2.tmp[0];
      kR = state2.tmp[1];
      for (var i2 = 0; i2 < state2.keys.length; i2 += 2) {
        var shift = shiftTable[i2 >>> 1];
        kL = utils2.r28shl(kL, shift);
        kR = utils2.r28shl(kR, shift);
        utils2.pc2(kL, kR, state2.keys, i2);
      }
    };
    DES.prototype._update = function _update(inp, inOff, out, outOff) {
      var state2 = this._desState;
      var l = utils2.readUInt32BE(inp, inOff);
      var r2 = utils2.readUInt32BE(inp, inOff + 4);
      utils2.ip(l, r2, state2.tmp, 0);
      l = state2.tmp[0];
      r2 = state2.tmp[1];
      if (this.type === "encrypt")
        this._encrypt(state2, l, r2, state2.tmp, 0);
      else
        this._decrypt(state2, l, r2, state2.tmp, 0);
      l = state2.tmp[0];
      r2 = state2.tmp[1];
      utils2.writeUInt32BE(out, l, outOff);
      utils2.writeUInt32BE(out, r2, outOff + 4);
    };
    DES.prototype._pad = function _pad(buffer2, off) {
      if (this.padding === false) {
        return false;
      }
      var value = buffer2.length - off;
      for (var i2 = off; i2 < buffer2.length; i2++)
        buffer2[i2] = value;
      return true;
    };
    DES.prototype._unpad = function _unpad(buffer2) {
      if (this.padding === false) {
        return buffer2;
      }
      var pad = buffer2[buffer2.length - 1];
      for (var i2 = buffer2.length - pad; i2 < buffer2.length; i2++)
        assert2.equal(buffer2[i2], pad);
      return buffer2.slice(0, buffer2.length - pad);
    };
    DES.prototype._encrypt = function _encrypt(state2, lStart, rStart, out, off) {
      var l = lStart;
      var r2 = rStart;
      for (var i2 = 0; i2 < state2.keys.length; i2 += 2) {
        var keyL = state2.keys[i2];
        var keyR = state2.keys[i2 + 1];
        utils2.expand(r2, state2.tmp, 0);
        keyL ^= state2.tmp[0];
        keyR ^= state2.tmp[1];
        var s2 = utils2.substitute(keyL, keyR);
        var f2 = utils2.permute(s2);
        var t2 = r2;
        r2 = (l ^ f2) >>> 0;
        l = t2;
      }
      utils2.rip(r2, l, out, off);
    };
    DES.prototype._decrypt = function _decrypt(state2, lStart, rStart, out, off) {
      var l = rStart;
      var r2 = lStart;
      for (var i2 = state2.keys.length - 2; i2 >= 0; i2 -= 2) {
        var keyL = state2.keys[i2];
        var keyR = state2.keys[i2 + 1];
        utils2.expand(l, state2.tmp, 0);
        keyL ^= state2.tmp[0];
        keyR ^= state2.tmp[1];
        var s2 = utils2.substitute(keyL, keyR);
        var f2 = utils2.permute(s2);
        var t2 = l;
        l = (r2 ^ f2) >>> 0;
        r2 = t2;
      }
      utils2.rip(l, r2, out, off);
    };
    return des;
  }
  var cbc$1 = {};
  var hasRequiredCbc$1;
  function requireCbc$1() {
    if (hasRequiredCbc$1) return cbc$1;
    hasRequiredCbc$1 = 1;
    var assert2 = minimalisticAssert$1;
    var inherits2 = requireInherits_browser();
    var proto = {};
    function CBCState(iv) {
      assert2.equal(iv.length, 8, "Invalid IV length");
      this.iv = new Array(8);
      for (var i2 = 0; i2 < this.iv.length; i2++)
        this.iv[i2] = iv[i2];
    }
    function instantiate(Base) {
      function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
      }
      inherits2(CBC, Base);
      var keys = Object.keys(proto);
      for (var i2 = 0; i2 < keys.length; i2++) {
        var key2 = keys[i2];
        CBC.prototype[key2] = proto[key2];
      }
      CBC.create = function create2(options) {
        return new CBC(options);
      };
      return CBC;
    }
    cbc$1.instantiate = instantiate;
    proto._cbcInit = function _cbcInit() {
      var state2 = new CBCState(this.options.iv);
      this._cbcState = state2;
    };
    proto._update = function _update(inp, inOff, out, outOff) {
      var state2 = this._cbcState;
      var superProto = this.constructor.super_.prototype;
      var iv = state2.iv;
      if (this.type === "encrypt") {
        for (var i2 = 0; i2 < this.blockSize; i2++)
          iv[i2] ^= inp[inOff + i2];
        superProto._update.call(this, iv, 0, out, outOff);
        for (var i2 = 0; i2 < this.blockSize; i2++)
          iv[i2] = out[outOff + i2];
      } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for (var i2 = 0; i2 < this.blockSize; i2++)
          out[outOff + i2] ^= iv[i2];
        for (var i2 = 0; i2 < this.blockSize; i2++)
          iv[i2] = inp[inOff + i2];
      }
    };
    return cbc$1;
  }
  var ede;
  var hasRequiredEde;
  function requireEde() {
    if (hasRequiredEde) return ede;
    hasRequiredEde = 1;
    var assert2 = minimalisticAssert$1;
    var inherits2 = requireInherits_browser();
    var Cipher = requireCipher();
    var DES = requireDes$1();
    function EDEState(type2, key2) {
      assert2.equal(key2.length, 24, "Invalid key length");
      var k1 = key2.slice(0, 8);
      var k2 = key2.slice(8, 16);
      var k3 = key2.slice(16, 24);
      if (type2 === "encrypt") {
        this.ciphers = [
          DES.create({ type: "encrypt", key: k1 }),
          DES.create({ type: "decrypt", key: k2 }),
          DES.create({ type: "encrypt", key: k3 })
        ];
      } else {
        this.ciphers = [
          DES.create({ type: "decrypt", key: k3 }),
          DES.create({ type: "encrypt", key: k2 }),
          DES.create({ type: "decrypt", key: k1 })
        ];
      }
    }
    function EDE(options) {
      Cipher.call(this, options);
      var state2 = new EDEState(this.type, this.options.key);
      this._edeState = state2;
    }
    inherits2(EDE, Cipher);
    ede = EDE;
    EDE.create = function create2(options) {
      return new EDE(options);
    };
    EDE.prototype._update = function _update(inp, inOff, out, outOff) {
      var state2 = this._edeState;
      state2.ciphers[0]._update(inp, inOff, out, outOff);
      state2.ciphers[1]._update(out, outOff, out, outOff);
      state2.ciphers[2]._update(out, outOff, out, outOff);
    };
    EDE.prototype._pad = DES.prototype._pad;
    EDE.prototype._unpad = DES.prototype._unpad;
    return ede;
  }
  var hasRequiredDes;
  function requireDes() {
    if (hasRequiredDes) return des$1;
    hasRequiredDes = 1;
    des$1.utils = requireUtils$2();
    des$1.Cipher = requireCipher();
    des$1.DES = requireDes$1();
    des$1.CBC = requireCbc$1();
    des$1.EDE = requireEde();
    return des$1;
  }
  var browserifyDes;
  var hasRequiredBrowserifyDes;
  function requireBrowserifyDes() {
    if (hasRequiredBrowserifyDes) return browserifyDes;
    hasRequiredBrowserifyDes = 1;
    var CipherBase = requireCipherBase();
    var des2 = requireDes();
    var inherits2 = requireInherits_browser();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var modes2 = {
      "des-ede3-cbc": des2.CBC.instantiate(des2.EDE),
      "des-ede3": des2.EDE,
      "des-ede-cbc": des2.CBC.instantiate(des2.EDE),
      "des-ede": des2.EDE,
      "des-cbc": des2.CBC.instantiate(des2.DES),
      "des-ecb": des2.DES
    };
    modes2.des = modes2["des-cbc"];
    modes2.des3 = modes2["des-ede3-cbc"];
    browserifyDes = DES;
    inherits2(DES, CipherBase);
    function DES(opts) {
      CipherBase.call(this);
      var modeName = opts.mode.toLowerCase();
      var mode = modes2[modeName];
      var type2;
      if (opts.decrypt) {
        type2 = "decrypt";
      } else {
        type2 = "encrypt";
      }
      var key2 = opts.key;
      if (!Buffer2.isBuffer(key2)) {
        key2 = Buffer2.from(key2);
      }
      if (modeName === "des-ede" || modeName === "des-ede-cbc") {
        key2 = Buffer2.concat([key2, key2.slice(0, 8)]);
      }
      var iv = opts.iv;
      if (!Buffer2.isBuffer(iv)) {
        iv = Buffer2.from(iv);
      }
      this._des = mode.create({
        key: key2,
        iv,
        type: type2
      });
    }
    DES.prototype._update = function(data) {
      return Buffer2.from(this._des.update(data));
    };
    DES.prototype._final = function() {
      return Buffer2.from(this._des.final());
    };
    return browserifyDes;
  }
  var browser$8 = {};
  var encrypter = {};
  var ecb = {};
  var hasRequiredEcb;
  function requireEcb() {
    if (hasRequiredEcb) return ecb;
    hasRequiredEcb = 1;
    ecb.encrypt = function(self2, block) {
      return self2._cipher.encryptBlock(block);
    };
    ecb.decrypt = function(self2, block) {
      return self2._cipher.decryptBlock(block);
    };
    return ecb;
  }
  var cbc = {};
  var bufferXor;
  var hasRequiredBufferXor;
  function requireBufferXor() {
    if (hasRequiredBufferXor) return bufferXor;
    hasRequiredBufferXor = 1;
    bufferXor = function xor2(a, b) {
      var length = Math.min(a.length, b.length);
      var buffer2 = new Buffer(length);
      for (var i2 = 0; i2 < length; ++i2) {
        buffer2[i2] = a[i2] ^ b[i2];
      }
      return buffer2;
    };
    return bufferXor;
  }
  var hasRequiredCbc;
  function requireCbc() {
    if (hasRequiredCbc) return cbc;
    hasRequiredCbc = 1;
    var xor2 = requireBufferXor();
    cbc.encrypt = function(self2, block) {
      var data = xor2(block, self2._prev);
      self2._prev = self2._cipher.encryptBlock(data);
      return self2._prev;
    };
    cbc.decrypt = function(self2, block) {
      var pad = self2._prev;
      self2._prev = block;
      var out = self2._cipher.decryptBlock(block);
      return xor2(out, pad);
    };
    return cbc;
  }
  var cfb = {};
  var hasRequiredCfb;
  function requireCfb() {
    if (hasRequiredCfb) return cfb;
    hasRequiredCfb = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var xor2 = requireBufferXor();
    function encryptStart(self2, data, decrypt2) {
      var len2 = data.length;
      var out = xor2(data, self2._cache);
      self2._cache = self2._cache.slice(len2);
      self2._prev = Buffer2.concat([self2._prev, decrypt2 ? data : out]);
      return out;
    }
    cfb.encrypt = function(self2, data, decrypt2) {
      var out = Buffer2.allocUnsafe(0);
      var len2;
      while (data.length) {
        if (self2._cache.length === 0) {
          self2._cache = self2._cipher.encryptBlock(self2._prev);
          self2._prev = Buffer2.allocUnsafe(0);
        }
        if (self2._cache.length <= data.length) {
          len2 = self2._cache.length;
          out = Buffer2.concat([out, encryptStart(self2, data.slice(0, len2), decrypt2)]);
          data = data.slice(len2);
        } else {
          out = Buffer2.concat([out, encryptStart(self2, data, decrypt2)]);
          break;
        }
      }
      return out;
    };
    return cfb;
  }
  var cfb8 = {};
  var hasRequiredCfb8;
  function requireCfb8() {
    if (hasRequiredCfb8) return cfb8;
    hasRequiredCfb8 = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function encryptByte(self2, byteParam, decrypt2) {
      var pad = self2._cipher.encryptBlock(self2._prev);
      var out = pad[0] ^ byteParam;
      self2._prev = Buffer2.concat([
        self2._prev.slice(1),
        Buffer2.from([decrypt2 ? byteParam : out])
      ]);
      return out;
    }
    cfb8.encrypt = function(self2, chunk, decrypt2) {
      var len2 = chunk.length;
      var out = Buffer2.allocUnsafe(len2);
      var i2 = -1;
      while (++i2 < len2) {
        out[i2] = encryptByte(self2, chunk[i2], decrypt2);
      }
      return out;
    };
    return cfb8;
  }
  var cfb1 = {};
  var hasRequiredCfb1;
  function requireCfb1() {
    if (hasRequiredCfb1) return cfb1;
    hasRequiredCfb1 = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function encryptByte(self2, byteParam, decrypt2) {
      var pad;
      var i2 = -1;
      var len2 = 8;
      var out = 0;
      var bit, value;
      while (++i2 < len2) {
        pad = self2._cipher.encryptBlock(self2._prev);
        bit = byteParam & 1 << 7 - i2 ? 128 : 0;
        value = pad[0] ^ bit;
        out += (value & 128) >> i2 % 8;
        self2._prev = shiftIn(self2._prev, decrypt2 ? bit : value);
      }
      return out;
    }
    function shiftIn(buffer2, value) {
      var len2 = buffer2.length;
      var i2 = -1;
      var out = Buffer2.allocUnsafe(buffer2.length);
      buffer2 = Buffer2.concat([buffer2, Buffer2.from([value])]);
      while (++i2 < len2) {
        out[i2] = buffer2[i2] << 1 | buffer2[i2 + 1] >> 7;
      }
      return out;
    }
    cfb1.encrypt = function(self2, chunk, decrypt2) {
      var len2 = chunk.length;
      var out = Buffer2.allocUnsafe(len2);
      var i2 = -1;
      while (++i2 < len2) {
        out[i2] = encryptByte(self2, chunk[i2], decrypt2);
      }
      return out;
    };
    return cfb1;
  }
  var ofb = {};
  var hasRequiredOfb;
  function requireOfb() {
    if (hasRequiredOfb) return ofb;
    hasRequiredOfb = 1;
    var xor2 = requireBufferXor();
    function getBlock(self2) {
      self2._prev = self2._cipher.encryptBlock(self2._prev);
      return self2._prev;
    }
    ofb.encrypt = function(self2, chunk) {
      while (self2._cache.length < chunk.length) {
        self2._cache = Buffer.concat([self2._cache, getBlock(self2)]);
      }
      var pad = self2._cache.slice(0, chunk.length);
      self2._cache = self2._cache.slice(chunk.length);
      return xor2(chunk, pad);
    };
    return ofb;
  }
  var ctr = {};
  var incr32_1;
  var hasRequiredIncr32;
  function requireIncr32() {
    if (hasRequiredIncr32) return incr32_1;
    hasRequiredIncr32 = 1;
    function incr32(iv) {
      var len2 = iv.length;
      var item;
      while (len2--) {
        item = iv.readUInt8(len2);
        if (item === 255) {
          iv.writeUInt8(0, len2);
        } else {
          item++;
          iv.writeUInt8(item, len2);
          break;
        }
      }
    }
    incr32_1 = incr32;
    return incr32_1;
  }
  var hasRequiredCtr;
  function requireCtr() {
    if (hasRequiredCtr) return ctr;
    hasRequiredCtr = 1;
    var xor2 = requireBufferXor();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var incr32 = requireIncr32();
    function getBlock(self2) {
      var out = self2._cipher.encryptBlockRaw(self2._prev);
      incr32(self2._prev);
      return out;
    }
    var blockSize = 16;
    ctr.encrypt = function(self2, chunk) {
      var chunkNum = Math.ceil(chunk.length / blockSize);
      var start = self2._cache.length;
      self2._cache = Buffer2.concat([
        self2._cache,
        Buffer2.allocUnsafe(chunkNum * blockSize)
      ]);
      for (var i2 = 0; i2 < chunkNum; i2++) {
        var out = getBlock(self2);
        var offset = start + i2 * blockSize;
        self2._cache.writeUInt32BE(out[0], offset + 0);
        self2._cache.writeUInt32BE(out[1], offset + 4);
        self2._cache.writeUInt32BE(out[2], offset + 8);
        self2._cache.writeUInt32BE(out[3], offset + 12);
      }
      var pad = self2._cache.slice(0, chunk.length);
      self2._cache = self2._cache.slice(chunk.length);
      return xor2(chunk, pad);
    };
    return ctr;
  }
  const aes128 = {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CBC",
    type: "block"
  };
  const aes192 = {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CBC",
    type: "block"
  };
  const aes256 = {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CBC",
    type: "block"
  };
  const require$$2$1 = {
    "aes-128-ecb": {
      cipher: "AES",
      key: 128,
      iv: 0,
      mode: "ECB",
      type: "block"
    },
    "aes-192-ecb": {
      cipher: "AES",
      key: 192,
      iv: 0,
      mode: "ECB",
      type: "block"
    },
    "aes-256-ecb": {
      cipher: "AES",
      key: 256,
      iv: 0,
      mode: "ECB",
      type: "block"
    },
    "aes-128-cbc": {
      cipher: "AES",
      key: 128,
      iv: 16,
      mode: "CBC",
      type: "block"
    },
    "aes-192-cbc": {
      cipher: "AES",
      key: 192,
      iv: 16,
      mode: "CBC",
      type: "block"
    },
    "aes-256-cbc": {
      cipher: "AES",
      key: 256,
      iv: 16,
      mode: "CBC",
      type: "block"
    },
    aes128,
    aes192,
    aes256,
    "aes-128-cfb": {
      cipher: "AES",
      key: 128,
      iv: 16,
      mode: "CFB",
      type: "stream"
    },
    "aes-192-cfb": {
      cipher: "AES",
      key: 192,
      iv: 16,
      mode: "CFB",
      type: "stream"
    },
    "aes-256-cfb": {
      cipher: "AES",
      key: 256,
      iv: 16,
      mode: "CFB",
      type: "stream"
    },
    "aes-128-cfb8": {
      cipher: "AES",
      key: 128,
      iv: 16,
      mode: "CFB8",
      type: "stream"
    },
    "aes-192-cfb8": {
      cipher: "AES",
      key: 192,
      iv: 16,
      mode: "CFB8",
      type: "stream"
    },
    "aes-256-cfb8": {
      cipher: "AES",
      key: 256,
      iv: 16,
      mode: "CFB8",
      type: "stream"
    },
    "aes-128-cfb1": {
      cipher: "AES",
      key: 128,
      iv: 16,
      mode: "CFB1",
      type: "stream"
    },
    "aes-192-cfb1": {
      cipher: "AES",
      key: 192,
      iv: 16,
      mode: "CFB1",
      type: "stream"
    },
    "aes-256-cfb1": {
      cipher: "AES",
      key: 256,
      iv: 16,
      mode: "CFB1",
      type: "stream"
    },
    "aes-128-ofb": {
      cipher: "AES",
      key: 128,
      iv: 16,
      mode: "OFB",
      type: "stream"
    },
    "aes-192-ofb": {
      cipher: "AES",
      key: 192,
      iv: 16,
      mode: "OFB",
      type: "stream"
    },
    "aes-256-ofb": {
      cipher: "AES",
      key: 256,
      iv: 16,
      mode: "OFB",
      type: "stream"
    },
    "aes-128-ctr": {
      cipher: "AES",
      key: 128,
      iv: 16,
      mode: "CTR",
      type: "stream"
    },
    "aes-192-ctr": {
      cipher: "AES",
      key: 192,
      iv: 16,
      mode: "CTR",
      type: "stream"
    },
    "aes-256-ctr": {
      cipher: "AES",
      key: 256,
      iv: 16,
      mode: "CTR",
      type: "stream"
    },
    "aes-128-gcm": {
      cipher: "AES",
      key: 128,
      iv: 12,
      mode: "GCM",
      type: "auth"
    },
    "aes-192-gcm": {
      cipher: "AES",
      key: 192,
      iv: 12,
      mode: "GCM",
      type: "auth"
    },
    "aes-256-gcm": {
      cipher: "AES",
      key: 256,
      iv: 12,
      mode: "GCM",
      type: "auth"
    }
  };
  var modes_1;
  var hasRequiredModes$1;
  function requireModes$1() {
    if (hasRequiredModes$1) return modes_1;
    hasRequiredModes$1 = 1;
    var modeModules = {
      ECB: requireEcb(),
      CBC: requireCbc(),
      CFB: requireCfb(),
      CFB8: requireCfb8(),
      CFB1: requireCfb1(),
      OFB: requireOfb(),
      CTR: requireCtr(),
      GCM: requireCtr()
    };
    var modes2 = require$$2$1;
    for (var key2 in modes2) {
      modes2[key2].module = modeModules[modes2[key2].mode];
    }
    modes_1 = modes2;
    return modes_1;
  }
  var aes = {};
  var hasRequiredAes;
  function requireAes() {
    if (hasRequiredAes) return aes;
    hasRequiredAes = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function asUInt32Array(buf) {
      if (!Buffer2.isBuffer(buf)) buf = Buffer2.from(buf);
      var len2 = buf.length / 4 | 0;
      var out = new Array(len2);
      for (var i2 = 0; i2 < len2; i2++) {
        out[i2] = buf.readUInt32BE(i2 * 4);
      }
      return out;
    }
    function scrubVec(v) {
      for (var i2 = 0; i2 < v.length; v++) {
        v[i2] = 0;
      }
    }
    function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
      var SUB_MIX0 = SUB_MIX[0];
      var SUB_MIX1 = SUB_MIX[1];
      var SUB_MIX2 = SUB_MIX[2];
      var SUB_MIX3 = SUB_MIX[3];
      var s0 = M[0] ^ keySchedule[0];
      var s1 = M[1] ^ keySchedule[1];
      var s2 = M[2] ^ keySchedule[2];
      var s3 = M[3] ^ keySchedule[3];
      var t0, t1, t2, t3;
      var ksRow = 4;
      for (var round2 = 1; round2 < nRounds; round2++) {
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
      }
      t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
      t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
      t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
      t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
      t0 = t0 >>> 0;
      t1 = t1 >>> 0;
      t2 = t2 >>> 0;
      t3 = t3 >>> 0;
      return [t0, t1, t2, t3];
    }
    var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
    var G = function() {
      var d = new Array(256);
      for (var j = 0; j < 256; j++) {
        if (j < 128) {
          d[j] = j << 1;
        } else {
          d[j] = j << 1 ^ 283;
        }
      }
      var SBOX = [];
      var INV_SBOX = [];
      var SUB_MIX = [[], [], [], []];
      var INV_SUB_MIX = [[], [], [], []];
      var x = 0;
      var xi = 0;
      for (var i2 = 0; i2 < 256; ++i2) {
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 255 ^ 99;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        var t2 = d[sx] * 257 ^ sx * 16843008;
        SUB_MIX[0][x] = t2 << 24 | t2 >>> 8;
        SUB_MIX[1][x] = t2 << 16 | t2 >>> 16;
        SUB_MIX[2][x] = t2 << 8 | t2 >>> 24;
        SUB_MIX[3][x] = t2;
        t2 = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
        INV_SUB_MIX[0][sx] = t2 << 24 | t2 >>> 8;
        INV_SUB_MIX[1][sx] = t2 << 16 | t2 >>> 16;
        INV_SUB_MIX[2][sx] = t2 << 8 | t2 >>> 24;
        INV_SUB_MIX[3][sx] = t2;
        if (x === 0) {
          x = xi = 1;
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]];
          xi ^= d[d[xi]];
        }
      }
      return {
        SBOX,
        INV_SBOX,
        SUB_MIX,
        INV_SUB_MIX
      };
    }();
    function AES(key2) {
      this._key = asUInt32Array(key2);
      this._reset();
    }
    AES.blockSize = 4 * 4;
    AES.keySize = 256 / 8;
    AES.prototype.blockSize = AES.blockSize;
    AES.prototype.keySize = AES.keySize;
    AES.prototype._reset = function() {
      var keyWords = this._key;
      var keySize = keyWords.length;
      var nRounds = keySize + 6;
      var ksRows = (nRounds + 1) * 4;
      var keySchedule = [];
      for (var k = 0; k < keySize; k++) {
        keySchedule[k] = keyWords[k];
      }
      for (k = keySize; k < ksRows; k++) {
        var t2 = keySchedule[k - 1];
        if (k % keySize === 0) {
          t2 = t2 << 8 | t2 >>> 24;
          t2 = G.SBOX[t2 >>> 24] << 24 | G.SBOX[t2 >>> 16 & 255] << 16 | G.SBOX[t2 >>> 8 & 255] << 8 | G.SBOX[t2 & 255];
          t2 ^= RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) {
          t2 = G.SBOX[t2 >>> 24] << 24 | G.SBOX[t2 >>> 16 & 255] << 16 | G.SBOX[t2 >>> 8 & 255] << 8 | G.SBOX[t2 & 255];
        }
        keySchedule[k] = keySchedule[k - keySize] ^ t2;
      }
      var invKeySchedule = [];
      for (var ik = 0; ik < ksRows; ik++) {
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) {
          invKeySchedule[ik] = tt;
        } else {
          invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 255]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 255]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 255]];
        }
      }
      this._nRounds = nRounds;
      this._keySchedule = keySchedule;
      this._invKeySchedule = invKeySchedule;
    };
    AES.prototype.encryptBlockRaw = function(M) {
      M = asUInt32Array(M);
      return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
    };
    AES.prototype.encryptBlock = function(M) {
      var out = this.encryptBlockRaw(M);
      var buf = Buffer2.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[1], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[3], 12);
      return buf;
    };
    AES.prototype.decryptBlock = function(M) {
      M = asUInt32Array(M);
      var m1 = M[1];
      M[1] = M[3];
      M[3] = m1;
      var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
      var buf = Buffer2.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[3], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[1], 12);
      return buf;
    };
    AES.prototype.scrub = function() {
      scrubVec(this._keySchedule);
      scrubVec(this._invKeySchedule);
      scrubVec(this._key);
    };
    aes.AES = AES;
    return aes;
  }
  var ghash;
  var hasRequiredGhash;
  function requireGhash() {
    if (hasRequiredGhash) return ghash;
    hasRequiredGhash = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var ZEROES = Buffer2.alloc(16, 0);
    function toArray2(buf) {
      return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
      ];
    }
    function fromArray(out) {
      var buf = Buffer2.allocUnsafe(16);
      buf.writeUInt32BE(out[0] >>> 0, 0);
      buf.writeUInt32BE(out[1] >>> 0, 4);
      buf.writeUInt32BE(out[2] >>> 0, 8);
      buf.writeUInt32BE(out[3] >>> 0, 12);
      return buf;
    }
    function GHASH(key2) {
      this.h = key2;
      this.state = Buffer2.alloc(16, 0);
      this.cache = Buffer2.allocUnsafe(0);
    }
    GHASH.prototype.ghash = function(block) {
      var i2 = -1;
      while (++i2 < block.length) {
        this.state[i2] ^= block[i2];
      }
      this._multiply();
    };
    GHASH.prototype._multiply = function() {
      var Vi = toArray2(this.h);
      var Zi = [0, 0, 0, 0];
      var j, xi, lsbVi;
      var i2 = -1;
      while (++i2 < 128) {
        xi = (this.state[~~(i2 / 8)] & 1 << 7 - i2 % 8) !== 0;
        if (xi) {
          Zi[0] ^= Vi[0];
          Zi[1] ^= Vi[1];
          Zi[2] ^= Vi[2];
          Zi[3] ^= Vi[3];
        }
        lsbVi = (Vi[3] & 1) !== 0;
        for (j = 3; j > 0; j--) {
          Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        }
        Vi[0] = Vi[0] >>> 1;
        if (lsbVi) {
          Vi[0] = Vi[0] ^ 225 << 24;
        }
      }
      this.state = fromArray(Zi);
    };
    GHASH.prototype.update = function(buf) {
      this.cache = Buffer2.concat([this.cache, buf]);
      var chunk;
      while (this.cache.length >= 16) {
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
      }
    };
    GHASH.prototype.final = function(abl, bl) {
      if (this.cache.length) {
        this.ghash(Buffer2.concat([this.cache, ZEROES], 16));
      }
      this.ghash(fromArray([0, abl, 0, bl]));
      return this.state;
    };
    ghash = GHASH;
    return ghash;
  }
  var authCipher;
  var hasRequiredAuthCipher;
  function requireAuthCipher() {
    if (hasRequiredAuthCipher) return authCipher;
    hasRequiredAuthCipher = 1;
    var aes2 = requireAes();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var Transform = requireCipherBase();
    var inherits2 = requireInherits_browser();
    var GHASH = requireGhash();
    var xor2 = requireBufferXor();
    var incr32 = requireIncr32();
    function xorTest(a, b) {
      var out = 0;
      if (a.length !== b.length) out++;
      var len2 = Math.min(a.length, b.length);
      for (var i2 = 0; i2 < len2; ++i2) {
        out += a[i2] ^ b[i2];
      }
      return out;
    }
    function calcIv(self2, iv, ck) {
      if (iv.length === 12) {
        self2._finID = Buffer2.concat([iv, Buffer2.from([0, 0, 0, 1])]);
        return Buffer2.concat([iv, Buffer2.from([0, 0, 0, 2])]);
      }
      var ghash2 = new GHASH(ck);
      var len2 = iv.length;
      var toPad = len2 % 16;
      ghash2.update(iv);
      if (toPad) {
        toPad = 16 - toPad;
        ghash2.update(Buffer2.alloc(toPad, 0));
      }
      ghash2.update(Buffer2.alloc(8, 0));
      var ivBits = len2 * 8;
      var tail = Buffer2.alloc(8);
      tail.writeUIntBE(ivBits, 0, 8);
      ghash2.update(tail);
      self2._finID = ghash2.state;
      var out = Buffer2.from(self2._finID);
      incr32(out);
      return out;
    }
    function StreamCipher(mode, key2, iv, decrypt2) {
      Transform.call(this);
      var h = Buffer2.alloc(4, 0);
      this._cipher = new aes2.AES(key2);
      var ck = this._cipher.encryptBlock(h);
      this._ghash = new GHASH(ck);
      iv = calcIv(this, iv, ck);
      this._prev = Buffer2.from(iv);
      this._cache = Buffer2.allocUnsafe(0);
      this._secCache = Buffer2.allocUnsafe(0);
      this._decrypt = decrypt2;
      this._alen = 0;
      this._len = 0;
      this._mode = mode;
      this._authTag = null;
      this._called = false;
    }
    inherits2(StreamCipher, Transform);
    StreamCipher.prototype._update = function(chunk) {
      if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
          rump = Buffer2.alloc(rump, 0);
          this._ghash.update(rump);
        }
      }
      this._called = true;
      var out = this._mode.encrypt(this, chunk);
      if (this._decrypt) {
        this._ghash.update(chunk);
      } else {
        this._ghash.update(out);
      }
      this._len += chunk.length;
      return out;
    };
    StreamCipher.prototype._final = function() {
      if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
      var tag = xor2(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
      if (this._decrypt && xorTest(tag, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
      this._authTag = tag;
      this._cipher.scrub();
    };
    StreamCipher.prototype.getAuthTag = function getAuthTag() {
      if (this._decrypt || !Buffer2.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
      return this._authTag;
    };
    StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
      if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
      this._authTag = tag;
    };
    StreamCipher.prototype.setAAD = function setAAD(buf) {
      if (this._called) throw new Error("Attempting to set AAD in unsupported state");
      this._ghash.update(buf);
      this._alen += buf.length;
    };
    authCipher = StreamCipher;
    return authCipher;
  }
  var streamCipher;
  var hasRequiredStreamCipher;
  function requireStreamCipher() {
    if (hasRequiredStreamCipher) return streamCipher;
    hasRequiredStreamCipher = 1;
    var aes2 = requireAes();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var Transform = requireCipherBase();
    var inherits2 = requireInherits_browser();
    function StreamCipher(mode, key2, iv, decrypt2) {
      Transform.call(this);
      this._cipher = new aes2.AES(key2);
      this._prev = Buffer2.from(iv);
      this._cache = Buffer2.allocUnsafe(0);
      this._secCache = Buffer2.allocUnsafe(0);
      this._decrypt = decrypt2;
      this._mode = mode;
    }
    inherits2(StreamCipher, Transform);
    StreamCipher.prototype._update = function(chunk) {
      return this._mode.encrypt(this, chunk, this._decrypt);
    };
    StreamCipher.prototype._final = function() {
      this._cipher.scrub();
    };
    streamCipher = StreamCipher;
    return streamCipher;
  }
  var evp_bytestokey;
  var hasRequiredEvp_bytestokey;
  function requireEvp_bytestokey() {
    if (hasRequiredEvp_bytestokey) return evp_bytestokey;
    hasRequiredEvp_bytestokey = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var MD5 = requireMd5_js();
    function EVP_BytesToKey(password, salt, keyBits, ivLen) {
      if (!Buffer2.isBuffer(password)) password = Buffer2.from(password, "binary");
      if (salt) {
        if (!Buffer2.isBuffer(salt)) salt = Buffer2.from(salt, "binary");
        if (salt.length !== 8) throw new RangeError("salt should be Buffer with 8 byte length");
      }
      var keyLen = keyBits / 8;
      var key2 = Buffer2.alloc(keyLen);
      var iv = Buffer2.alloc(ivLen || 0);
      var tmp = Buffer2.alloc(0);
      while (keyLen > 0 || ivLen > 0) {
        var hash2 = new MD5();
        hash2.update(tmp);
        hash2.update(password);
        if (salt) hash2.update(salt);
        tmp = hash2.digest();
        var used = 0;
        if (keyLen > 0) {
          var keyStart = key2.length - keyLen;
          used = Math.min(keyLen, tmp.length);
          tmp.copy(key2, keyStart, 0, used);
          keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
          var ivStart = iv.length - ivLen;
          var length = Math.min(ivLen, tmp.length - used);
          tmp.copy(iv, ivStart, used, used + length);
          ivLen -= length;
        }
      }
      tmp.fill(0);
      return { key: key2, iv };
    }
    evp_bytestokey = EVP_BytesToKey;
    return evp_bytestokey;
  }
  var hasRequiredEncrypter;
  function requireEncrypter() {
    if (hasRequiredEncrypter) return encrypter;
    hasRequiredEncrypter = 1;
    var MODES = requireModes$1();
    var AuthCipher = requireAuthCipher();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var StreamCipher = requireStreamCipher();
    var Transform = requireCipherBase();
    var aes2 = requireAes();
    var ebtk = requireEvp_bytestokey();
    var inherits2 = requireInherits_browser();
    function Cipher(mode, key2, iv) {
      Transform.call(this);
      this._cache = new Splitter();
      this._cipher = new aes2.AES(key2);
      this._prev = Buffer2.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }
    inherits2(Cipher, Transform);
    Cipher.prototype._update = function(data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while (chunk = this._cache.get()) {
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
      }
      return Buffer2.concat(out);
    };
    var PADDING = Buffer2.alloc(16, 16);
    Cipher.prototype._final = function() {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
      }
      if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
        throw new Error("data not multiple of block length");
      }
    };
    Cipher.prototype.setAutoPadding = function(setTo) {
      this._autopadding = !!setTo;
      return this;
    };
    function Splitter() {
      this.cache = Buffer2.allocUnsafe(0);
    }
    Splitter.prototype.add = function(data) {
      this.cache = Buffer2.concat([this.cache, data]);
    };
    Splitter.prototype.get = function() {
      if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
      }
      return null;
    };
    Splitter.prototype.flush = function() {
      var len2 = 16 - this.cache.length;
      var padBuff = Buffer2.allocUnsafe(len2);
      var i2 = -1;
      while (++i2 < len2) {
        padBuff.writeUInt8(len2, i2);
      }
      return Buffer2.concat([this.cache, padBuff]);
    };
    function createCipheriv(suite, password, iv) {
      var config2 = MODES[suite.toLowerCase()];
      if (!config2) throw new TypeError("invalid suite type");
      if (typeof password === "string") password = Buffer2.from(password);
      if (password.length !== config2.key / 8) throw new TypeError("invalid key length " + password.length);
      if (typeof iv === "string") iv = Buffer2.from(iv);
      if (config2.mode !== "GCM" && iv.length !== config2.iv) throw new TypeError("invalid iv length " + iv.length);
      if (config2.type === "stream") {
        return new StreamCipher(config2.module, password, iv);
      } else if (config2.type === "auth") {
        return new AuthCipher(config2.module, password, iv);
      }
      return new Cipher(config2.module, password, iv);
    }
    function createCipher(suite, password) {
      var config2 = MODES[suite.toLowerCase()];
      if (!config2) throw new TypeError("invalid suite type");
      var keys = ebtk(password, false, config2.key, config2.iv);
      return createCipheriv(suite, keys.key, keys.iv);
    }
    encrypter.createCipheriv = createCipheriv;
    encrypter.createCipher = createCipher;
    return encrypter;
  }
  var decrypter = {};
  var hasRequiredDecrypter;
  function requireDecrypter() {
    if (hasRequiredDecrypter) return decrypter;
    hasRequiredDecrypter = 1;
    var AuthCipher = requireAuthCipher();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var MODES = requireModes$1();
    var StreamCipher = requireStreamCipher();
    var Transform = requireCipherBase();
    var aes2 = requireAes();
    var ebtk = requireEvp_bytestokey();
    var inherits2 = requireInherits_browser();
    function Decipher(mode, key2, iv) {
      Transform.call(this);
      this._cache = new Splitter();
      this._last = void 0;
      this._cipher = new aes2.AES(key2);
      this._prev = Buffer2.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }
    inherits2(Decipher, Transform);
    Decipher.prototype._update = function(data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while (chunk = this._cache.get(this._autopadding)) {
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
      }
      return Buffer2.concat(out);
    };
    Decipher.prototype._final = function() {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        return unpad(this._mode.decrypt(this, chunk));
      } else if (chunk) {
        throw new Error("data not multiple of block length");
      }
    };
    Decipher.prototype.setAutoPadding = function(setTo) {
      this._autopadding = !!setTo;
      return this;
    };
    function Splitter() {
      this.cache = Buffer2.allocUnsafe(0);
    }
    Splitter.prototype.add = function(data) {
      this.cache = Buffer2.concat([this.cache, data]);
    };
    Splitter.prototype.get = function(autoPadding) {
      var out;
      if (autoPadding) {
        if (this.cache.length > 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      } else {
        if (this.cache.length >= 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      }
      return null;
    };
    Splitter.prototype.flush = function() {
      if (this.cache.length) return this.cache;
    };
    function unpad(last) {
      var padded = last[15];
      if (padded < 1 || padded > 16) {
        throw new Error("unable to decrypt data");
      }
      var i2 = -1;
      while (++i2 < padded) {
        if (last[i2 + (16 - padded)] !== padded) {
          throw new Error("unable to decrypt data");
        }
      }
      if (padded === 16) return;
      return last.slice(0, 16 - padded);
    }
    function createDecipheriv(suite, password, iv) {
      var config2 = MODES[suite.toLowerCase()];
      if (!config2) throw new TypeError("invalid suite type");
      if (typeof iv === "string") iv = Buffer2.from(iv);
      if (config2.mode !== "GCM" && iv.length !== config2.iv) throw new TypeError("invalid iv length " + iv.length);
      if (typeof password === "string") password = Buffer2.from(password);
      if (password.length !== config2.key / 8) throw new TypeError("invalid key length " + password.length);
      if (config2.type === "stream") {
        return new StreamCipher(config2.module, password, iv, true);
      } else if (config2.type === "auth") {
        return new AuthCipher(config2.module, password, iv, true);
      }
      return new Decipher(config2.module, password, iv);
    }
    function createDecipher(suite, password) {
      var config2 = MODES[suite.toLowerCase()];
      if (!config2) throw new TypeError("invalid suite type");
      var keys = ebtk(password, false, config2.key, config2.iv);
      return createDecipheriv(suite, keys.key, keys.iv);
    }
    decrypter.createDecipher = createDecipher;
    decrypter.createDecipheriv = createDecipheriv;
    return decrypter;
  }
  var hasRequiredBrowser$8;
  function requireBrowser$8() {
    if (hasRequiredBrowser$8) return browser$8;
    hasRequiredBrowser$8 = 1;
    var ciphers = requireEncrypter();
    var deciphers = requireDecrypter();
    var modes2 = require$$2$1;
    function getCiphers() {
      return Object.keys(modes2);
    }
    browser$8.createCipher = browser$8.Cipher = ciphers.createCipher;
    browser$8.createCipheriv = browser$8.Cipheriv = ciphers.createCipheriv;
    browser$8.createDecipher = browser$8.Decipher = deciphers.createDecipher;
    browser$8.createDecipheriv = browser$8.Decipheriv = deciphers.createDecipheriv;
    browser$8.listCiphers = browser$8.getCiphers = getCiphers;
    return browser$8;
  }
  var modes = {};
  var hasRequiredModes;
  function requireModes() {
    if (hasRequiredModes) return modes;
    hasRequiredModes = 1;
    (function(exports2) {
      exports2["des-ecb"] = {
        key: 8,
        iv: 0
      };
      exports2["des-cbc"] = exports2.des = {
        key: 8,
        iv: 8
      };
      exports2["des-ede3-cbc"] = exports2.des3 = {
        key: 24,
        iv: 8
      };
      exports2["des-ede3"] = {
        key: 24,
        iv: 0
      };
      exports2["des-ede-cbc"] = {
        key: 16,
        iv: 8
      };
      exports2["des-ede"] = {
        key: 16,
        iv: 0
      };
    })(modes);
    return modes;
  }
  var hasRequiredBrowser$7;
  function requireBrowser$7() {
    if (hasRequiredBrowser$7) return browser$9;
    hasRequiredBrowser$7 = 1;
    var DES = requireBrowserifyDes();
    var aes2 = requireBrowser$8();
    var aesModes = requireModes$1();
    var desModes = requireModes();
    var ebtk = requireEvp_bytestokey();
    function createCipher(suite, password) {
      suite = suite.toLowerCase();
      var keyLen, ivLen;
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
        throw new TypeError("invalid suite type");
      }
      var keys = ebtk(password, false, keyLen, ivLen);
      return createCipheriv(suite, keys.key, keys.iv);
    }
    function createDecipher(suite, password) {
      suite = suite.toLowerCase();
      var keyLen, ivLen;
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
        throw new TypeError("invalid suite type");
      }
      var keys = ebtk(password, false, keyLen, ivLen);
      return createDecipheriv(suite, keys.key, keys.iv);
    }
    function createCipheriv(suite, key2, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite]) return aes2.createCipheriv(suite, key2, iv);
      if (desModes[suite]) return new DES({ key: key2, iv, mode: suite });
      throw new TypeError("invalid suite type");
    }
    function createDecipheriv(suite, key2, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite]) return aes2.createDecipheriv(suite, key2, iv);
      if (desModes[suite]) return new DES({ key: key2, iv, mode: suite, decrypt: true });
      throw new TypeError("invalid suite type");
    }
    function getCiphers() {
      return Object.keys(desModes).concat(aes2.getCiphers());
    }
    browser$9.createCipher = browser$9.Cipher = createCipher;
    browser$9.createCipheriv = browser$9.Cipheriv = createCipheriv;
    browser$9.createDecipher = browser$9.Decipher = createDecipher;
    browser$9.createDecipheriv = browser$9.Decipheriv = createDecipheriv;
    browser$9.listCiphers = browser$9.getCiphers = getCiphers;
    return browser$9;
  }
  var browser$7 = {};
  var bn$2 = { exports: {} };
  bn$2.exports;
  var hasRequiredBn$2;
  function requireBn$2() {
    if (hasRequiredBn$2) return bn$2.exports;
    hasRequiredBn$2 = 1;
    (function(module) {
      (function(module2, exports2) {
        function assert2(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN2(number2, base2, endian) {
          if (BN2.isBN(number2)) {
            return number2;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number2 !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number2 || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN2;
        } else {
          exports2.BN = BN2;
        }
        BN2.BN = BN2;
        BN2.wordSize = 26;
        var Buffer2;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer2 = window.Buffer;
          } else {
            Buffer2 = require$$0$5.Buffer;
          }
        } catch (e) {
        }
        BN2.isBN = function isBN(num) {
          if (num instanceof BN2) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
        };
        BN2.max = function max2(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN2.min = function min2(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN2.prototype._init = function init(number2, base2, endian) {
          if (typeof number2 === "number") {
            return this._initNumber(number2, base2, endian);
          }
          if (typeof number2 === "object") {
            return this._initArray(number2, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number2 = number2.toString().replace(/\s+/g, "");
          var start = 0;
          if (number2[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number2.length) {
            if (base2 === 16) {
              this._parseHex(number2, start, endian);
            } else {
              this._parseBase(number2, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN2.prototype._initNumber = function _initNumber(number2, base2, endian) {
          if (number2 < 0) {
            this.negative = 1;
            number2 = -number2;
          }
          if (number2 < 67108864) {
            this.words = [number2 & 67108863];
            this.length = 1;
          } else if (number2 < 4503599627370496) {
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert2(number2 < 9007199254740992);
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN2.prototype._initArray = function _initArray(number2, base2, endian) {
          assert2(typeof number2.length === "number");
          if (number2.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number2.length / 3);
          this.words = new Array(this.length);
          for (var i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = 0;
          }
          var j, w;
          var off = 0;
          if (endian === "be") {
            for (i2 = number2.length - 1, j = 0; i2 >= 0; i2 -= 3) {
              w = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i2 = 0, j = 0; i2 < number2.length; i2 += 3) {
              w = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          }
          return this.strip();
        };
        function parseHex4Bits(string2, index) {
          var c = string2.charCodeAt(index);
          if (c >= 65 && c <= 70) {
            return c - 55;
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            return c - 48 & 15;
          }
        }
        function parseHexByte2(string2, lowerBound, index) {
          var r2 = parseHex4Bits(string2, index);
          if (index - 1 >= lowerBound) {
            r2 |= parseHex4Bits(string2, index - 1) << 4;
          }
          return r2;
        }
        BN2.prototype._parseHex = function _parseHex(number2, start, endian) {
          this.length = Math.ceil((number2.length - start) / 6);
          this.words = new Array(this.length);
          for (var i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = 0;
          }
          var off = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
              w = parseHexByte2(number2, start, i2) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number2.length - start;
            for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
              w = parseHexByte2(number2, start, i2) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          }
          this.strip();
        };
        function parseBase(str, start, end, mul) {
          var r2 = 0;
          var len2 = Math.min(str.length, end);
          for (var i2 = start; i2 < len2; i2++) {
            var c = str.charCodeAt(i2) - 48;
            r2 *= mul;
            if (c >= 49) {
              r2 += c - 49 + 10;
            } else if (c >= 17) {
              r2 += c - 17 + 10;
            } else {
              r2 += c;
            }
          }
          return r2;
        }
        BN2.prototype._parseBase = function _parseBase(number2, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number2.length - start;
          var mod2 = total % limbLen;
          var end = Math.min(total, total - mod2) + start;
          var word = 0;
          for (var i2 = start; i2 < end; i2 += limbLen) {
            word = parseBase(number2, i2, i2 + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod2 !== 0) {
            var pow3 = 1;
            word = parseBase(number2, i2, number2.length, base2);
            for (i2 = 0; i2 < mod2; i2++) {
              pow3 *= base2;
            }
            this.imuln(pow3);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this.strip();
        };
        BN2.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for (var i2 = 0; i2 < this.length; i2++) {
            dest.words[i2] = this.words[i2];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN2.prototype.clone = function clone2() {
          var r2 = new BN2(null);
          this.copy(r2);
          return r2;
        };
        BN2.prototype._expand = function _expand(size2) {
          while (this.length < size2) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN2.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN2.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN2.prototype.inspect = function inspect2() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN2.prototype.toString = function toString2(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i2 = 0; i2 < this.length; i2++) {
              var w = this.words[i2];
              var word = ((w << off | carry) & 16777215).toString(16);
              carry = w >>> 24 - off & 16777215;
              off += 2;
              if (off >= 26) {
                off -= 26;
                i2--;
              }
              if (carry !== 0 || i2 !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r2 = c.modn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r2.length] + r2 + out;
              } else {
                out = r2 + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert2(false, "Base should be between 2 and 36");
        };
        BN2.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert2(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN2.prototype.toJSON = function toJSON() {
          return this.toString(16);
        };
        BN2.prototype.toBuffer = function toBuffer2(endian, length) {
          assert2(typeof Buffer2 !== "undefined");
          return this.toArrayLike(Buffer2, endian, length);
        };
        BN2.prototype.toArray = function toArray2(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          var byteLength2 = this.byteLength();
          var reqLength = length || Math.max(1, byteLength2);
          assert2(byteLength2 <= reqLength, "byte array longer than desired length");
          assert2(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b, i2;
          var q = this.clone();
          if (!littleEndian) {
            for (i2 = 0; i2 < reqLength - byteLength2; i2++) {
              res[i2] = 0;
            }
            for (i2 = 0; !q.isZero(); i2++) {
              b = q.andln(255);
              q.iushrn(8);
              res[reqLength - i2 - 1] = b;
            }
          } else {
            for (i2 = 0; !q.isZero(); i2++) {
              b = q.andln(255);
              q.iushrn(8);
              res[i2] = b;
            }
            for (; i2 < reqLength; i2++) {
              res[i2] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN2.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN2.prototype._countBits = function _countBits(w) {
            var t2 = w;
            var r2 = 0;
            if (t2 >= 4096) {
              r2 += 13;
              t2 >>>= 13;
            }
            if (t2 >= 64) {
              r2 += 7;
              t2 >>>= 7;
            }
            if (t2 >= 8) {
              r2 += 4;
              t2 >>>= 4;
            }
            if (t2 >= 2) {
              r2 += 2;
              t2 >>>= 2;
            }
            return r2 + t2;
          };
        }
        BN2.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t2 = w;
          var r2 = 0;
          if ((t2 & 8191) === 0) {
            r2 += 13;
            t2 >>>= 13;
          }
          if ((t2 & 127) === 0) {
            r2 += 7;
            t2 >>>= 7;
          }
          if ((t2 & 15) === 0) {
            r2 += 4;
            t2 >>>= 4;
          }
          if ((t2 & 3) === 0) {
            r2 += 2;
            t2 >>>= 2;
          }
          if ((t2 & 1) === 0) {
            r2++;
          }
          return r2;
        };
        BN2.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
          }
          return w;
        }
        BN2.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r2 = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var b = this._zeroBits(this.words[i2]);
            r2 += b;
            if (b !== 26) break;
          }
          return r2;
        };
        BN2.prototype.byteLength = function byteLength2() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN2.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN2.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN2.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN2.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN2.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN2.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i2 = 0; i2 < num.length; i2++) {
            this.words[i2] = this.words[i2] | num.words[i2];
          }
          return this.strip();
        };
        BN2.prototype.ior = function ior(num) {
          assert2((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN2.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN2.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN2.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i2 = 0; i2 < b.length; i2++) {
            this.words[i2] = this.words[i2] & num.words[i2];
          }
          this.length = b.length;
          return this.strip();
        };
        BN2.prototype.iand = function iand(num) {
          assert2((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN2.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN2.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN2.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i2 = 0; i2 < b.length; i2++) {
            this.words[i2] = a.words[i2] ^ b.words[i2];
          }
          if (this !== a) {
            for (; i2 < a.length; i2++) {
              this.words[i2] = a.words[i2];
            }
          }
          this.length = a.length;
          return this.strip();
        };
        BN2.prototype.ixor = function ixor(num) {
          assert2((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN2.prototype.xor = function xor2(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN2.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN2.prototype.inotn = function inotn(width) {
          assert2(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i2 = 0; i2 < bytesNeeded; i2++) {
            this.words[i2] = ~this.words[i2] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
          }
          return this.strip();
        };
        BN2.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN2.prototype.setn = function setn(bit, val) {
          assert2(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | 1 << wbit;
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN2.prototype.iadd = function iadd(num) {
          var r2;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r2 = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r2 = this.isub(num);
            num.negative = 1;
            return r2._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i2 = 0; i2 < b.length; i2++) {
            r2 = (a.words[i2] | 0) + (b.words[i2] | 0) + carry;
            this.words[i2] = r2 & 67108863;
            carry = r2 >>> 26;
          }
          for (; carry !== 0 && i2 < a.length; i2++) {
            r2 = (a.words[i2] | 0) + carry;
            this.words[i2] = r2 & 67108863;
            carry = r2 >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i2 < a.length; i2++) {
              this.words[i2] = a.words[i2];
            }
          }
          return this;
        };
        BN2.prototype.add = function add2(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN2.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r2 = this.iadd(num);
            num.negative = 1;
            return r2._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp2 = this.cmp(num);
          if (cmp2 === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp2 > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i2 = 0; i2 < b.length; i2++) {
            r2 = (a.words[i2] | 0) - (b.words[i2] | 0) + carry;
            carry = r2 >> 26;
            this.words[i2] = r2 & 67108863;
          }
          for (; carry !== 0 && i2 < a.length; i2++) {
            r2 = (a.words[i2] | 0) + carry;
            carry = r2 >> 26;
            this.words[i2] = r2 & 67108863;
          }
          if (carry === 0 && i2 < a.length && a !== this) {
            for (; i2 < a.length; i2++) {
              this.words[i2] = a.words[i2];
            }
          }
          this.length = Math.max(this.length, i2);
          if (a !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN2.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len2 = self2.length + num.length | 0;
          out.length = len2;
          len2 = len2 - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r2 = a * b;
          var lo = r2 & 67108863;
          var carry = r2 / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len2; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i2 = k - j | 0;
              a = self2.words[i2] | 0;
              b = num.words[j] | 0;
              r2 = a * b + rword;
              ncarry += r2 / 67108864 | 0;
              rword = r2 & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i2 = k - j;
              var a = self2.words[i2] | 0;
              var b = num.words[j] | 0;
              var r2 = a * b;
              var lo = r2 & 67108863;
              ncarry = ncarry + (r2 / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN2.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len2 = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len2 < 63) {
            res = smallMulTo(this, num, out);
          } else if (len2 < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t2 = new Array(N);
          var l = BN2.prototype._countBits(N) - 1;
          for (var i2 = 0; i2 < N; i2++) {
            t2[i2] = this.revBin(i2, l, N);
          }
          return t2;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;
          var rb = 0;
          for (var i2 = 0; i2 < l; i2++) {
            rb |= (x & 1) << l - i2 - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i2 = 0; i2 < N; i2++) {
            rtws[i2] = rws[rbt[i2]];
            itws[i2] = iws[rbt[i2]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s2 = 1; s2 < N; s2 <<= 1) {
            var l = s2 << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s2; j++) {
                var re2 = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s2];
                var io = itws[p + j + s2];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re2 + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s2] = re2 - ro;
                itws[p + j + s2] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i2 = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i2++;
          }
          return 1 << i2 + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;
          for (var i2 = 0; i2 < N / 2; i2++) {
            var t2 = rws[i2];
            rws[i2] = rws[N - i2 - 1];
            rws[N - i2 - 1] = t2;
            t2 = iws[i2];
            iws[i2] = -iws[N - i2 - 1];
            iws[N - i2 - 1] = -t2;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i2 = 0; i2 < N / 2; i2++) {
            var w = Math.round(ws[2 * i2 + 1] / N) * 8192 + Math.round(ws[2 * i2] / N) + carry;
            ws[i2] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len2, rws, N) {
          var carry = 0;
          for (var i2 = 0; i2 < len2; i2++) {
            carry = carry + (ws[i2] | 0);
            rws[2 * i2] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i2 + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i2 = 2 * len2; i2 < N; ++i2) {
            rws[i2] = 0;
          }
          assert2(carry === 0);
          assert2((carry & -8192) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i2 = 0; i2 < N; i2++) {
            ph[i2] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i2 = 0; i2 < N; i2++) {
            var rx = rwst[i2] * nrwst[i2] - iwst[i2] * niwst[i2];
            iwst[i2] = rwst[i2] * niwst[i2] + iwst[i2] * nrwst[i2];
            rwst[i2] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out.strip();
        };
        BN2.prototype.mul = function mul(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN2.prototype.mulf = function mulf(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN2.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN2.prototype.imuln = function imuln(num) {
          assert2(typeof num === "number");
          assert2(num < 67108864);
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w = (this.words[i2] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i2] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i2] = carry;
            this.length++;
          }
          return this;
        };
        BN2.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN2.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN2.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN2.prototype.pow = function pow3(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN2(1);
          var res = this;
          for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
            if (w[i2] !== 0) break;
          }
          if (++i2 < w.length) {
            for (var q = res.sqr(); i2 < w.length; i2++, q = q.sqr()) {
              if (w[i2] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN2.prototype.iushln = function iushln(bits) {
          assert2(typeof bits === "number" && bits >= 0);
          var r2 = bits % 26;
          var s2 = (bits - r2) / 26;
          var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
          var i2;
          if (r2 !== 0) {
            var carry = 0;
            for (i2 = 0; i2 < this.length; i2++) {
              var newCarry = this.words[i2] & carryMask;
              var c = (this.words[i2] | 0) - newCarry << r2;
              this.words[i2] = c | carry;
              carry = newCarry >>> 26 - r2;
            }
            if (carry) {
              this.words[i2] = carry;
              this.length++;
            }
          }
          if (s2 !== 0) {
            for (i2 = this.length - 1; i2 >= 0; i2--) {
              this.words[i2 + s2] = this.words[i2];
            }
            for (i2 = 0; i2 < s2; i2++) {
              this.words[i2] = 0;
            }
            this.length += s2;
          }
          return this.strip();
        };
        BN2.prototype.ishln = function ishln(bits) {
          assert2(this.negative === 0);
          return this.iushln(bits);
        };
        BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert2(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r2 = bits % 26;
          var s2 = Math.min((bits - r2) / 26, this.length);
          var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
          var maskedWords = extended;
          h -= s2;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i2 = 0; i2 < s2; i2++) {
              maskedWords.words[i2] = this.words[i2];
            }
            maskedWords.length = s2;
          }
          if (s2 === 0) ;
          else if (this.length > s2) {
            this.length -= s2;
            for (i2 = 0; i2 < this.length; i2++) {
              this.words[i2] = this.words[i2 + s2];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h); i2--) {
            var word = this.words[i2] | 0;
            this.words[i2] = carry << 26 - r2 | word >>> r2;
            carry = word & mask2;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert2(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN2.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN2.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN2.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN2.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN2.prototype.testn = function testn(bit) {
          assert2(typeof bit === "number" && bit >= 0);
          var r2 = bit % 26;
          var s2 = (bit - r2) / 26;
          var q = 1 << r2;
          if (this.length <= s2) return false;
          var w = this.words[s2];
          return !!(w & q);
        };
        BN2.prototype.imaskn = function imaskn(bits) {
          assert2(typeof bits === "number" && bits >= 0);
          var r2 = bits % 26;
          var s2 = (bits - r2) / 26;
          assert2(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s2) {
            return this;
          }
          if (r2 !== 0) {
            s2++;
          }
          this.length = Math.min(s2, this.length);
          if (r2 !== 0) {
            var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
            this.words[this.length - 1] &= mask2;
          }
          return this.strip();
        };
        BN2.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN2.prototype.iaddn = function iaddn(num) {
          assert2(typeof num === "number");
          assert2(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN2.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
            this.words[i2] -= 67108864;
            if (i2 === this.length - 1) {
              this.words[i2 + 1] = 1;
            } else {
              this.words[i2 + 1]++;
            }
          }
          this.length = Math.max(this.length, i2 + 1);
          return this;
        };
        BN2.prototype.isubn = function isubn(num) {
          assert2(typeof num === "number");
          assert2(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
              this.words[i2] += 67108864;
              this.words[i2 + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN2.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN2.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN2.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN2.prototype.abs = function abs2() {
          return this.clone().iabs();
        };
        BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len2 = num.length + shift;
          var i2;
          this._expand(len2);
          var w;
          var carry = 0;
          for (i2 = 0; i2 < num.length; i2++) {
            w = (this.words[i2 + shift] | 0) + carry;
            var right = (num.words[i2] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i2 + shift] = w & 67108863;
          }
          for (; i2 < this.length - shift; i2++) {
            w = (this.words[i2 + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i2 + shift] = w & 67108863;
          }
          if (carry === 0) return this.strip();
          assert2(carry === -1);
          carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            w = -(this.words[i2] | 0) + carry;
            carry = w >> 26;
            this.words[i2] = w & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN2.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN2(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i2 = 0; i2 < q.length; i2++) {
              q.words[i2] = 0;
            }
          }
          var diff2 = a.clone()._ishlnsubmul(b, 1, m);
          if (diff2.negative === 0) {
            a = diff2;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q.strip();
          }
          a.strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN2.prototype.divmod = function divmod(num, mode, positive) {
          assert2(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN2(0),
              mod: new BN2(0)
            };
          }
          var div, mod2, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.iadd(num);
              }
            }
            return {
              div,
              mod: mod2
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.isub(num);
              }
            }
            return {
              div: res.div,
              mod: mod2
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN2(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN2(this.modn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN2(this.modn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN2.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN2.prototype.mod = function mod2(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN2.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN2.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp2 = mod2.cmp(half);
          if (cmp2 < 0 || r2 === 1 && cmp2 === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN2.prototype.modn = function modn(num) {
          assert2(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i2 = this.length - 1; i2 >= 0; i2--) {
            acc = (p * acc + (this.words[i2] | 0)) % num;
          }
          return acc;
        };
        BN2.prototype.idivn = function idivn(num) {
          assert2(num <= 67108863);
          var carry = 0;
          for (var i2 = this.length - 1; i2 >= 0; i2--) {
            var w = (this.words[i2] | 0) + carry * 67108864;
            this.words[i2] = w / num | 0;
            carry = w % num;
          }
          return this.strip();
        };
        BN2.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN2.prototype.egcd = function egcd(p) {
          assert2(p.negative === 0);
          assert2(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN2(1);
          var B = new BN2(0);
          var C = new BN2(0);
          var D = new BN2(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i2 = 0, im = 1; (x.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
            if (i2 > 0) {
              x.iushrn(i2);
              while (i2-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN2.prototype._invmp = function _invmp(p) {
          assert2(p.negative === 0);
          assert2(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN2(1);
          var x2 = new BN2(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
            if (i2 > 0) {
              a.iushrn(i2);
              while (i2-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN2.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r2 = a.cmp(b);
            if (r2 < 0) {
              var t2 = a;
              a = b;
              b = t2;
            } else if (r2 === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN2.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN2.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN2.prototype.isOdd = function isOdd2() {
          return (this.words[0] & 1) === 1;
        };
        BN2.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN2.prototype.bincn = function bincn(bit) {
          assert2(typeof bit === "number");
          var r2 = bit % 26;
          var s2 = (bit - r2) / 26;
          var q = 1 << r2;
          if (this.length <= s2) {
            this._expand(s2 + 1);
            this.words[s2] |= q;
            return this;
          }
          var carry = q;
          for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
            var w = this.words[i2] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i2] = w;
          }
          if (carry !== 0) {
            this.words[i2] = carry;
            this.length++;
          }
          return this;
        };
        BN2.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN2.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert2(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN2.prototype.cmp = function cmp2(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN2.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i2 = this.length - 1; i2 >= 0; i2--) {
            var a = this.words[i2] | 0;
            var b = num.words[i2] | 0;
            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN2.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN2.prototype.gt = function gt2(num) {
          return this.cmp(num) === 1;
        };
        BN2.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN2.prototype.gte = function gte2(num) {
          return this.cmp(num) >= 0;
        };
        BN2.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN2.prototype.lt = function lt2(num) {
          return this.cmp(num) === -1;
        };
        BN2.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN2.prototype.lte = function lte2(num) {
          return this.cmp(num) <= 0;
        };
        BN2.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN2.prototype.eq = function eq2(num) {
          return this.cmp(num) === 0;
        };
        BN2.red = function red(num) {
          return new Red(num);
        };
        BN2.prototype.toRed = function toRed(ctx) {
          assert2(!this.red, "Already a number in reduction context");
          assert2(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN2.prototype.fromRed = function fromRed() {
          assert2(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN2.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN2.prototype.forceRed = function forceRed(ctx) {
          assert2(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN2.prototype.redAdd = function redAdd(num) {
          assert2(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN2.prototype.redIAdd = function redIAdd(num) {
          assert2(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN2.prototype.redSub = function redSub(num) {
          assert2(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN2.prototype.redISub = function redISub(num) {
          assert2(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN2.prototype.redShl = function redShl(num) {
          assert2(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN2.prototype.redMul = function redMul(num) {
          assert2(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN2.prototype.redIMul = function redIMul(num) {
          assert2(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN2.prototype.redSqr = function redSqr() {
          assert2(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN2.prototype.redISqr = function redISqr() {
          assert2(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN2.prototype.redSqrt = function redSqrt() {
          assert2(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN2.prototype.redInvm = function redInvm() {
          assert2(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN2.prototype.redNeg = function redNeg() {
          assert2(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN2.prototype.redPow = function redPow(num) {
          assert2(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name2, p) {
          this.name = name2;
          this.p = new BN2(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN2(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN2(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r2 = num;
          var rlen;
          do {
            this.split(r2, this.tmp);
            r2 = this.imulK(r2);
            r2 = r2.iadd(this.tmp);
            rlen = r2.bitLength();
          } while (rlen > this.n);
          var cmp2 = rlen < this.n ? -1 : r2.ucmp(this.p);
          if (cmp2 === 0) {
            r2.words[0] = 0;
            r2.length = 1;
          } else if (cmp2 > 0) {
            r2.isub(this.p);
          } else {
            if (r2.strip !== void 0) {
              r2.strip();
            } else {
              r2._strip();
            }
          }
          return r2;
        };
        MPrime.prototype.split = function split2(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split2(input, output2) {
          var mask2 = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i2 = 0; i2 < outLen; i2++) {
            output2.words[i2] = input.words[i2];
          }
          output2.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output2.words[output2.length++] = prev & mask2;
          for (i2 = 10; i2 < input.length; i2++) {
            var next = input.words[i2] | 0;
            input.words[i2 - 10] = (next & mask2) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i2 - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i2 = 0; i2 < num.length; i2++) {
            var w = num.words[i2] | 0;
            lo += w * 977;
            num.words[i2] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i2 = 0; i2 < num.length; i2++) {
            var hi = (num.words[i2] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i2] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN2._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN2._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert2(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert2(a.negative === 0, "red works only with positives");
          assert2(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert2((a.negative | b.negative) === 0, "red works only with positives");
          assert2(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          return a.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add2(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert2(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow3 = this.m.add(new BN2(1)).iushrn(2);
            return this.pow(a, pow3);
          }
          var q = this.m.subn(1);
          var s2 = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s2++;
            q.iushrn(1);
          }
          assert2(!q.isZero());
          var one = new BN2(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN2(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r2 = this.pow(a, q.addn(1).iushrn(1));
          var t2 = this.pow(a, q);
          var m = s2;
          while (t2.cmp(one) !== 0) {
            var tmp = t2;
            for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
              tmp = tmp.redSqr();
            }
            assert2(i2 < m);
            var b = this.pow(c, new BN2(1).iushln(m - i2 - 1));
            r2 = r2.redMul(b);
            c = b.redSqr();
            t2 = t2.redMul(c);
            m = i2;
          }
          return r2;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow3(a, num) {
          if (num.isZero()) return new BN2(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN2(1).toRed(this);
          wnd[1] = a;
          for (var i2 = 2; i2 < wnd.length; i2++) {
            wnd[i2] = this.mul(wnd[i2 - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i2 = num.length - 1; i2 >= 0; i2--) {
            var word = num.words[i2];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i2 !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r2 = num.umod(this.m);
          return r2 === num ? r2.clone() : r2;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN2.mont = function mont2(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN2(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r2 = this.imod(num.mul(this.rinv));
          r2.red = null;
          return r2;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t2 = a.imul(b);
          var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t2.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
          var t2 = a.mul(b);
          var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t2.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(module, commonjsGlobal);
    })(bn$2);
    return bn$2.exports;
  }
  var brorand = { exports: {} };
  var hasRequiredBrorand;
  function requireBrorand() {
    if (hasRequiredBrorand) return brorand.exports;
    hasRequiredBrorand = 1;
    var r2;
    brorand.exports = function rand2(len2) {
      if (!r2)
        r2 = new Rand(null);
      return r2.generate(len2);
    };
    function Rand(rand2) {
      this.rand = rand2;
    }
    brorand.exports.Rand = Rand;
    Rand.prototype.generate = function generate(len2) {
      return this._rand(len2);
    };
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);
      var res = new Uint8Array(n);
      for (var i2 = 0; i2 < res.length; i2++)
        res[i2] = this.rand.getByte();
      return res;
    };
    if (typeof self === "object") {
      if (self.crypto && self.crypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };
      } else if (typeof window === "object") {
        Rand.prototype._rand = function() {
          throw new Error("Not implemented yet");
        };
      }
    } else {
      try {
        var crypto2 = requireCryptoBrowserify();
        if (typeof crypto2.randomBytes !== "function")
          throw new Error("Not supported");
        Rand.prototype._rand = function _rand(n) {
          return crypto2.randomBytes(n);
        };
      } catch (e) {
      }
    }
    return brorand.exports;
  }
  var mr;
  var hasRequiredMr;
  function requireMr() {
    if (hasRequiredMr) return mr;
    hasRequiredMr = 1;
    var bn2 = requireBn$2();
    var brorand2 = requireBrorand();
    function MillerRabin(rand2) {
      this.rand = rand2 || new brorand2.Rand();
    }
    mr = MillerRabin;
    MillerRabin.create = function create2(rand2) {
      return new MillerRabin(rand2);
    };
    MillerRabin.prototype._randbelow = function _randbelow(n) {
      var len2 = n.bitLength();
      var min_bytes = Math.ceil(len2 / 8);
      do
        var a = new bn2(this.rand.generate(min_bytes));
      while (a.cmp(n) >= 0);
      return a;
    };
    MillerRabin.prototype._randrange = function _randrange(start, stop) {
      var size2 = stop.sub(start);
      return start.add(this._randbelow(size2));
    };
    MillerRabin.prototype.test = function test2(n, k, cb) {
      var len2 = n.bitLength();
      var red = bn2.mont(n);
      var rone = new bn2(1).toRed(red);
      if (!k)
        k = Math.max(1, len2 / 48 | 0);
      var n1 = n.subn(1);
      for (var s2 = 0; !n1.testn(s2); s2++) {
      }
      var d = n.shrn(s2);
      var rn1 = n1.toRed(red);
      var prime = true;
      for (; k > 0; k--) {
        var a = this._randrange(new bn2(2), n1);
        if (cb)
          cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;
        for (var i2 = 1; i2 < s2; i2++) {
          x = x.redSqr();
          if (x.cmp(rone) === 0)
            return false;
          if (x.cmp(rn1) === 0)
            break;
        }
        if (i2 === s2)
          return false;
      }
      return prime;
    };
    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
      var len2 = n.bitLength();
      var red = bn2.mont(n);
      var rone = new bn2(1).toRed(red);
      if (!k)
        k = Math.max(1, len2 / 48 | 0);
      var n1 = n.subn(1);
      for (var s2 = 0; !n1.testn(s2); s2++) {
      }
      var d = n.shrn(s2);
      var rn1 = n1.toRed(red);
      for (; k > 0; k--) {
        var a = this._randrange(new bn2(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0)
          return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;
        for (var i2 = 1; i2 < s2; i2++) {
          x = x.redSqr();
          if (x.cmp(rone) === 0)
            return x.fromRed().subn(1).gcd(n);
          if (x.cmp(rn1) === 0)
            break;
        }
        if (i2 === s2) {
          x = x.redSqr();
          return x.fromRed().subn(1).gcd(n);
        }
      }
      return false;
    };
    return mr;
  }
  var generatePrime;
  var hasRequiredGeneratePrime;
  function requireGeneratePrime() {
    if (hasRequiredGeneratePrime) return generatePrime;
    hasRequiredGeneratePrime = 1;
    var randomBytes = requireBrowser$d();
    generatePrime = findPrime;
    findPrime.simpleSieve = simpleSieve;
    findPrime.fermatTest = fermatTest;
    var BN2 = requireBn$2();
    var TWENTYFOUR = new BN2(24);
    var MillerRabin = requireMr();
    var millerRabin = new MillerRabin();
    var ONE = new BN2(1);
    var TWO = new BN2(2);
    var FIVE = new BN2(5);
    new BN2(16);
    new BN2(8);
    var TEN = new BN2(10);
    var THREE = new BN2(3);
    new BN2(7);
    var ELEVEN = new BN2(11);
    var FOUR = new BN2(4);
    new BN2(12);
    var primes = null;
    function _getPrimes() {
      if (primes !== null)
        return primes;
      var limit2 = 1048576;
      var res = [];
      res[0] = 2;
      for (var i2 = 1, k = 3; k < limit2; k += 2) {
        var sqrt = Math.ceil(Math.sqrt(k));
        for (var j = 0; j < i2 && res[j] <= sqrt; j++)
          if (k % res[j] === 0)
            break;
        if (i2 !== j && res[j] <= sqrt)
          continue;
        res[i2++] = k;
      }
      primes = res;
      return res;
    }
    function simpleSieve(p) {
      var primes2 = _getPrimes();
      for (var i2 = 0; i2 < primes2.length; i2++)
        if (p.modn(primes2[i2]) === 0) {
          if (p.cmpn(primes2[i2]) === 0) {
            return true;
          } else {
            return false;
          }
        }
      return true;
    }
    function fermatTest(p) {
      var red = BN2.mont(p);
      return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
    }
    function findPrime(bits, gen2) {
      if (bits < 16) {
        if (gen2 === 2 || gen2 === 5) {
          return new BN2([140, 123]);
        } else {
          return new BN2([140, 39]);
        }
      }
      gen2 = new BN2(gen2);
      var num, n2;
      while (true) {
        num = new BN2(randomBytes(Math.ceil(bits / 8)));
        while (num.bitLength() > bits) {
          num.ishrn(1);
        }
        if (num.isEven()) {
          num.iadd(ONE);
        }
        if (!num.testn(1)) {
          num.iadd(TWO);
        }
        if (!gen2.cmp(TWO)) {
          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
            num.iadd(FOUR);
          }
        } else if (!gen2.cmp(FIVE)) {
          while (num.mod(TEN).cmp(THREE)) {
            num.iadd(FOUR);
          }
        }
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
          return num;
        }
      }
    }
    return generatePrime;
  }
  const modp1 = {
    gen: "02",
    prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
  };
  const modp2 = {
    gen: "02",
    prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
  };
  const modp5 = {
    gen: "02",
    prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
  };
  const modp14 = {
    gen: "02",
    prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
  };
  const modp15 = {
    gen: "02",
    prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
  };
  const modp16 = {
    gen: "02",
    prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
  };
  const modp17 = {
    gen: "02",
    prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
  };
  const modp18 = {
    gen: "02",
    prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
  };
  const require$$1$4 = {
    modp1,
    modp2,
    modp5,
    modp14,
    modp15,
    modp16,
    modp17,
    modp18
  };
  var dh;
  var hasRequiredDh;
  function requireDh() {
    if (hasRequiredDh) return dh;
    hasRequiredDh = 1;
    var BN2 = requireBn$2();
    var MillerRabin = requireMr();
    var millerRabin = new MillerRabin();
    var TWENTYFOUR = new BN2(24);
    var ELEVEN = new BN2(11);
    var TEN = new BN2(10);
    var THREE = new BN2(3);
    var SEVEN = new BN2(7);
    var primes = requireGeneratePrime();
    var randomBytes = requireBrowser$d();
    dh = DH;
    function setPublicKey(pub, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(pub)) {
        pub = new Buffer(pub, enc);
      }
      this._pub = new BN2(pub);
      return this;
    }
    function setPrivateKey(priv, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(priv)) {
        priv = new Buffer(priv, enc);
      }
      this._priv = new BN2(priv);
      return this;
    }
    var primeCache = {};
    function checkPrime(prime, generator) {
      var gen2 = generator.toString("hex");
      var hex2 = [gen2, prime.toString(16)].join("_");
      if (hex2 in primeCache) {
        return primeCache[hex2];
      }
      var error2 = 0;
      if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
        error2 += 1;
        if (gen2 === "02" || gen2 === "05") {
          error2 += 8;
        } else {
          error2 += 4;
        }
        primeCache[hex2] = error2;
        return error2;
      }
      if (!millerRabin.test(prime.shrn(1))) {
        error2 += 2;
      }
      var rem;
      switch (gen2) {
        case "02":
          if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
            error2 += 8;
          }
          break;
        case "05":
          rem = prime.mod(TEN);
          if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
            error2 += 8;
          }
          break;
        default:
          error2 += 4;
      }
      primeCache[hex2] = error2;
      return error2;
    }
    function DH(prime, generator, malleable) {
      this.setGenerator(generator);
      this.__prime = new BN2(prime);
      this._prime = BN2.mont(this.__prime);
      this._primeLen = prime.length;
      this._pub = void 0;
      this._priv = void 0;
      this._primeCode = void 0;
      if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
      } else {
        this._primeCode = 8;
      }
    }
    Object.defineProperty(DH.prototype, "verifyError", {
      enumerable: true,
      get: function() {
        if (typeof this._primeCode !== "number") {
          this._primeCode = checkPrime(this.__prime, this.__gen);
        }
        return this._primeCode;
      }
    });
    DH.prototype.generateKeys = function() {
      if (!this._priv) {
        this._priv = new BN2(randomBytes(this._primeLen));
      }
      this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
      return this.getPublicKey();
    };
    DH.prototype.computeSecret = function(other) {
      other = new BN2(other);
      other = other.toRed(this._prime);
      var secret = other.redPow(this._priv).fromRed();
      var out = new Buffer(secret.toArray());
      var prime = this.getPrime();
      if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([front, out]);
      }
      return out;
    };
    DH.prototype.getPublicKey = function getPublicKey(enc) {
      return formatReturnValue(this._pub, enc);
    };
    DH.prototype.getPrivateKey = function getPrivateKey(enc) {
      return formatReturnValue(this._priv, enc);
    };
    DH.prototype.getPrime = function(enc) {
      return formatReturnValue(this.__prime, enc);
    };
    DH.prototype.getGenerator = function(enc) {
      return formatReturnValue(this._gen, enc);
    };
    DH.prototype.setGenerator = function(gen2, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(gen2)) {
        gen2 = new Buffer(gen2, enc);
      }
      this.__gen = gen2;
      this._gen = new BN2(gen2);
      return this;
    };
    function formatReturnValue(bn2, enc) {
      var buf = new Buffer(bn2.toArray());
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }
    return dh;
  }
  var hasRequiredBrowser$6;
  function requireBrowser$6() {
    if (hasRequiredBrowser$6) return browser$7;
    hasRequiredBrowser$6 = 1;
    var generatePrime2 = requireGeneratePrime();
    var primes = require$$1$4;
    var DH = requireDh();
    function getDiffieHellman(mod2) {
      var prime = new Buffer(primes[mod2].prime, "hex");
      var gen2 = new Buffer(primes[mod2].gen, "hex");
      return new DH(prime, gen2);
    }
    var ENCODINGS = {
      "binary": true,
      "hex": true,
      "base64": true
    };
    function createDiffieHellman(prime, enc, generator, genc) {
      if (Buffer.isBuffer(enc) || ENCODINGS[enc] === void 0) {
        return createDiffieHellman(prime, "binary", enc, generator);
      }
      enc = enc || "binary";
      genc = genc || "binary";
      generator = generator || new Buffer([2]);
      if (!Buffer.isBuffer(generator)) {
        generator = new Buffer(generator, genc);
      }
      if (typeof prime === "number") {
        return new DH(generatePrime2(prime, generator), generator, true);
      }
      if (!Buffer.isBuffer(prime)) {
        prime = new Buffer(prime, enc);
      }
      return new DH(prime, generator, true);
    }
    browser$7.DiffieHellmanGroup = browser$7.createDiffieHellmanGroup = browser$7.getDiffieHellman = getDiffieHellman;
    browser$7.createDiffieHellman = browser$7.DiffieHellman = createDiffieHellman;
    return browser$7;
  }
  var readableBrowser = { exports: {} };
  var processNextickArgs = { exports: {} };
  var hasRequiredProcessNextickArgs;
  function requireProcessNextickArgs() {
    if (hasRequiredProcessNextickArgs) return processNextickArgs.exports;
    hasRequiredProcessNextickArgs = 1;
    if (typeof process$1 === "undefined" || !process$1.version || process$1.version.indexOf("v0.") === 0 || process$1.version.indexOf("v1.") === 0 && process$1.version.indexOf("v1.8.") !== 0) {
      processNextickArgs.exports = { nextTick };
    } else {
      processNextickArgs.exports = process$1;
    }
    function nextTick(fn, arg1, arg2, arg3) {
      if (typeof fn !== "function") {
        throw new TypeError('"callback" argument must be a function');
      }
      var len2 = arguments.length;
      var args, i2;
      switch (len2) {
        case 0:
        case 1:
          return process$1.nextTick(fn);
        case 2:
          return process$1.nextTick(function afterTickOne() {
            fn.call(null, arg1);
          });
        case 3:
          return process$1.nextTick(function afterTickTwo() {
            fn.call(null, arg1, arg2);
          });
        case 4:
          return process$1.nextTick(function afterTickThree() {
            fn.call(null, arg1, arg2, arg3);
          });
        default:
          args = new Array(len2 - 1);
          i2 = 0;
          while (i2 < args.length) {
            args[i2++] = arguments[i2];
          }
          return process$1.nextTick(function afterTick() {
            fn.apply(null, args);
          });
      }
    }
    return processNextickArgs.exports;
  }
  var isarray;
  var hasRequiredIsarray;
  function requireIsarray() {
    if (hasRequiredIsarray) return isarray;
    hasRequiredIsarray = 1;
    var toString2 = {}.toString;
    isarray = Array.isArray || function(arr) {
      return toString2.call(arr) == "[object Array]";
    };
    return isarray;
  }
  var streamBrowser;
  var hasRequiredStreamBrowser;
  function requireStreamBrowser() {
    if (hasRequiredStreamBrowser) return streamBrowser;
    hasRequiredStreamBrowser = 1;
    streamBrowser = eventsExports.EventEmitter;
    return streamBrowser;
  }
  var safeBuffer = { exports: {} };
  var hasRequiredSafeBuffer;
  function requireSafeBuffer() {
    if (hasRequiredSafeBuffer) return safeBuffer.exports;
    hasRequiredSafeBuffer = 1;
    (function(module, exports2) {
      var buffer2 = require$$0$5;
      var Buffer2 = buffer2.Buffer;
      function copyProps(src, dst) {
        for (var key2 in src) {
          dst[key2] = src[key2];
        }
      }
      if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
        module.exports = buffer2;
      } else {
        copyProps(buffer2, exports2);
        exports2.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer2(arg, encodingOrOffset, length);
      }
      copyProps(Buffer2, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer2(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size2, fill, encoding2) {
        if (typeof size2 !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer2(size2);
        if (fill !== void 0) {
          if (typeof encoding2 === "string") {
            buf.fill(fill, encoding2);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size2) {
        if (typeof size2 !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer2(size2);
      };
      SafeBuffer.allocUnsafeSlow = function(size2) {
        if (typeof size2 !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer2.SlowBuffer(size2);
      };
    })(safeBuffer, safeBuffer.exports);
    return safeBuffer.exports;
  }
  var util = {};
  var hasRequiredUtil;
  function requireUtil() {
    if (hasRequiredUtil) return util;
    hasRequiredUtil = 1;
    function isArray2(arg) {
      if (Array.isArray) {
        return Array.isArray(arg);
      }
      return objectToString2(arg) === "[object Array]";
    }
    util.isArray = isArray2;
    function isBoolean2(arg) {
      return typeof arg === "boolean";
    }
    util.isBoolean = isBoolean2;
    function isNull(arg) {
      return arg === null;
    }
    util.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    util.isNullOrUndefined = isNullOrUndefined;
    function isNumber2(arg) {
      return typeof arg === "number";
    }
    util.isNumber = isNumber2;
    function isString2(arg) {
      return typeof arg === "string";
    }
    util.isString = isString2;
    function isSymbol2(arg) {
      return typeof arg === "symbol";
    }
    util.isSymbol = isSymbol2;
    function isUndefined2(arg) {
      return arg === void 0;
    }
    util.isUndefined = isUndefined2;
    function isRegExp2(re2) {
      return objectToString2(re2) === "[object RegExp]";
    }
    util.isRegExp = isRegExp2;
    function isObject2(arg) {
      return typeof arg === "object" && arg !== null;
    }
    util.isObject = isObject2;
    function isDate2(d) {
      return objectToString2(d) === "[object Date]";
    }
    util.isDate = isDate2;
    function isError2(e) {
      return objectToString2(e) === "[object Error]" || e instanceof Error;
    }
    util.isError = isError2;
    function isFunction2(arg) {
      return typeof arg === "function";
    }
    util.isFunction = isFunction2;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    util.isPrimitive = isPrimitive;
    util.isBuffer = require$$0$5.Buffer.isBuffer;
    function objectToString2(o) {
      return Object.prototype.toString.call(o);
    }
    return util;
  }
  var BufferList = { exports: {} };
  var hasRequiredBufferList;
  function requireBufferList() {
    if (hasRequiredBufferList) return BufferList.exports;
    hasRequiredBufferList = 1;
    (function(module) {
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var Buffer2 = requireSafeBuffer().Buffer;
      var util2 = requireUtil$1();
      function copyBuffer(src, target, offset) {
        src.copy(target, offset);
      }
      module.exports = function() {
        function BufferList2() {
          _classCallCheck(this, BufferList2);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        BufferList2.prototype.push = function push2(v) {
          var entry = { data: v, next: null };
          if (this.length > 0) this.tail.next = entry;
          else this.head = entry;
          this.tail = entry;
          ++this.length;
        };
        BufferList2.prototype.unshift = function unshift(v) {
          var entry = { data: v, next: this.head };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        };
        BufferList2.prototype.shift = function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;
          else this.head = this.head.next;
          --this.length;
          return ret;
        };
        BufferList2.prototype.clear = function clear() {
          this.head = this.tail = null;
          this.length = 0;
        };
        BufferList2.prototype.join = function join(s2) {
          if (this.length === 0) return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next) {
            ret += s2 + p.data;
          }
          return ret;
        };
        BufferList2.prototype.concat = function concat2(n) {
          if (this.length === 0) return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p = this.head;
          var i2 = 0;
          while (p) {
            copyBuffer(p.data, ret, i2);
            i2 += p.data.length;
            p = p.next;
          }
          return ret;
        };
        return BufferList2;
      }();
      if (util2 && util2.inspect && util2.inspect.custom) {
        module.exports.prototype[util2.inspect.custom] = function() {
          var obj = util2.inspect({ length: this.length });
          return this.constructor.name + " " + obj;
        };
      }
    })(BufferList);
    return BufferList.exports;
  }
  var destroy_1;
  var hasRequiredDestroy;
  function requireDestroy() {
    if (hasRequiredDestroy) return destroy_1;
    hasRequiredDestroy = 1;
    var pna = requireProcessNextickArgs();
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            pna.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            pna.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            pna.nextTick(emitErrorNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            pna.nextTick(emitErrorNT, _this, err2);
          }
        } else if (cb) {
          cb(err2);
        }
      });
      return this;
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    destroy_1 = {
      destroy,
      undestroy
    };
    return destroy_1;
  }
  var _stream_writable;
  var hasRequired_stream_writable;
  function require_stream_writable() {
    if (hasRequired_stream_writable) return _stream_writable;
    hasRequired_stream_writable = 1;
    var pna = requireProcessNextickArgs();
    _stream_writable = Writable;
    function CorkedRequest(state2) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state2);
      };
    }
    var asyncWrite = !process$1.browser && ["v0.10", "v0.9."].indexOf(process$1.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
    var Duplex;
    Writable.WritableState = WritableState;
    var util2 = Object.create(requireUtil());
    util2.inherits = requireInherits_browser();
    var internalUtil = {
      deprecate: requireBrowser$c()
    };
    var Stream = requireStreamBrowser();
    var Buffer2 = requireSafeBuffer().Buffer;
    var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = requireDestroy();
    util2.inherits(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      var isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
      var hwm = options.highWaterMark;
      var writableHwm = options.writableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      if (hwm || hwm === 0) this.highWaterMark = hwm;
      else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;
      else this.highWaterMark = defaultHwm;
      this.highWaterMark = Math.floor(this.highWaterMark);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function(object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable) return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
        return new Writable(options);
      }
      this._writableState = new WritableState(options, this);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      this.emit("error", new Error("Cannot pipe, not readable"));
    };
    function writeAfterEnd(stream, cb) {
      var er = new Error("write after end");
      stream.emit("error", er);
      pna.nextTick(cb, er);
    }
    function validChunk(stream, state2, chunk, cb) {
      var valid2 = true;
      var er = false;
      if (chunk === null) {
        er = new TypeError("May not write null values to stream");
      } else if (typeof chunk !== "string" && chunk !== void 0 && !state2.objectMode) {
        er = new TypeError("Invalid non-string/buffer chunk");
      }
      if (er) {
        stream.emit("error", er);
        pna.nextTick(cb, er);
        valid2 = false;
      }
      return valid2;
    }
    Writable.prototype.write = function(chunk, encoding2, cb) {
      var state2 = this._writableState;
      var ret = false;
      var isBuf = !state2.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding2 === "function") {
        cb = encoding2;
        encoding2 = null;
      }
      if (isBuf) encoding2 = "buffer";
      else if (!encoding2) encoding2 = state2.defaultEncoding;
      if (typeof cb !== "function") cb = nop;
      if (state2.ended) writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state2, chunk, cb)) {
        state2.pendingcb++;
        ret = writeOrBuffer(this, state2, isBuf, chunk, encoding2, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      var state2 = this._writableState;
      state2.corked++;
    };
    Writable.prototype.uncork = function() {
      var state2 = this._writableState;
      if (state2.corked) {
        state2.corked--;
        if (!state2.writing && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) clearBuffer(this, state2);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding2) {
      if (typeof encoding2 === "string") encoding2 = encoding2.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding2 + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding2);
      this._writableState.defaultEncoding = encoding2;
      return this;
    };
    function decodeChunk(state2, chunk, encoding2) {
      if (!state2.objectMode && state2.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding2);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state2, isBuf, chunk, encoding2, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state2, chunk, encoding2);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding2 = "buffer";
          chunk = newChunk;
        }
      }
      var len2 = state2.objectMode ? 1 : chunk.length;
      state2.length += len2;
      var ret = state2.length < state2.highWaterMark;
      if (!ret) state2.needDrain = true;
      if (state2.writing || state2.corked) {
        var last = state2.lastBufferedRequest;
        state2.lastBufferedRequest = {
          chunk,
          encoding: encoding2,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state2.lastBufferedRequest;
        } else {
          state2.bufferedRequest = state2.lastBufferedRequest;
        }
        state2.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state2, false, len2, chunk, encoding2, cb);
      }
      return ret;
    }
    function doWrite(stream, state2, writev, len2, chunk, encoding2, cb) {
      state2.writelen = len2;
      state2.writecb = cb;
      state2.writing = true;
      state2.sync = true;
      if (writev) stream._writev(chunk, state2.onwrite);
      else stream._write(chunk, encoding2, state2.onwrite);
      state2.sync = false;
    }
    function onwriteError(stream, state2, sync, er, cb) {
      --state2.pendingcb;
      if (sync) {
        pna.nextTick(cb, er);
        pna.nextTick(finishMaybe, stream, state2);
        stream._writableState.errorEmitted = true;
        stream.emit("error", er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        stream.emit("error", er);
        finishMaybe(stream, state2);
      }
    }
    function onwriteStateUpdate(state2) {
      state2.writing = false;
      state2.writecb = null;
      state2.length -= state2.writelen;
      state2.writelen = 0;
    }
    function onwrite(stream, er) {
      var state2 = stream._writableState;
      var sync = state2.sync;
      var cb = state2.writecb;
      onwriteStateUpdate(state2);
      if (er) onwriteError(stream, state2, sync, er, cb);
      else {
        var finished = needFinish(state2);
        if (!finished && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) {
          clearBuffer(stream, state2);
        }
        if (sync) {
          asyncWrite(afterWrite, stream, state2, finished, cb);
        } else {
          afterWrite(stream, state2, finished, cb);
        }
      }
    }
    function afterWrite(stream, state2, finished, cb) {
      if (!finished) onwriteDrain(stream, state2);
      state2.pendingcb--;
      cb();
      finishMaybe(stream, state2);
    }
    function onwriteDrain(stream, state2) {
      if (state2.length === 0 && state2.needDrain) {
        state2.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state2) {
      state2.bufferProcessing = true;
      var entry = state2.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state2.bufferedRequestCount;
        var buffer2 = new Array(l);
        var holder = state2.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer2[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer2.allBuffers = allBuffers;
        doWrite(stream, state2, true, state2.length, buffer2, "", holder.finish);
        state2.pendingcb++;
        state2.lastBufferedRequest = null;
        if (holder.next) {
          state2.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state2.corkedRequestsFree = new CorkedRequest(state2);
        }
        state2.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding2 = entry.encoding;
          var cb = entry.callback;
          var len2 = state2.objectMode ? 1 : chunk.length;
          doWrite(stream, state2, false, len2, chunk, encoding2, cb);
          entry = entry.next;
          state2.bufferedRequestCount--;
          if (state2.writing) {
            break;
          }
        }
        if (entry === null) state2.lastBufferedRequest = null;
      }
      state2.bufferedRequest = entry;
      state2.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding2, cb) {
      cb(new Error("_write() is not implemented"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding2, cb) {
      var state2 = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding2 = null;
      } else if (typeof encoding2 === "function") {
        cb = encoding2;
        encoding2 = null;
      }
      if (chunk !== null && chunk !== void 0) this.write(chunk, encoding2);
      if (state2.corked) {
        state2.corked = 1;
        this.uncork();
      }
      if (!state2.ending) endWritable(this, state2, cb);
    };
    function needFinish(state2) {
      return state2.ending && state2.length === 0 && state2.bufferedRequest === null && !state2.finished && !state2.writing;
    }
    function callFinal(stream, state2) {
      stream._final(function(err) {
        state2.pendingcb--;
        if (err) {
          stream.emit("error", err);
        }
        state2.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state2);
      });
    }
    function prefinish(stream, state2) {
      if (!state2.prefinished && !state2.finalCalled) {
        if (typeof stream._final === "function") {
          state2.pendingcb++;
          state2.finalCalled = true;
          pna.nextTick(callFinal, stream, state2);
        } else {
          state2.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state2) {
      var need = needFinish(state2);
      if (need) {
        prefinish(stream, state2);
        if (state2.pendingcb === 0) {
          state2.finished = true;
          stream.emit("finish");
        }
      }
      return need;
    }
    function endWritable(stream, state2, cb) {
      state2.ending = true;
      finishMaybe(stream, state2);
      if (cb) {
        if (state2.finished) pna.nextTick(cb);
        else stream.once("finish", cb);
      }
      state2.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state2, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state2.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state2.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      get: function() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      this.end();
      cb(err);
    };
    return _stream_writable;
  }
  var _stream_duplex;
  var hasRequired_stream_duplex;
  function require_stream_duplex() {
    if (hasRequired_stream_duplex) return _stream_duplex;
    hasRequired_stream_duplex = 1;
    var pna = requireProcessNextickArgs();
    var objectKeys2 = Object.keys || function(obj) {
      var keys2 = [];
      for (var key2 in obj) {
        keys2.push(key2);
      }
      return keys2;
    };
    _stream_duplex = Duplex;
    var util2 = Object.create(requireUtil());
    util2.inherits = requireInherits_browser();
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    util2.inherits(Duplex, Readable);
    {
      var keys = objectKeys2(Writable.prototype);
      for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      if (options && options.readable === false) this.readable = false;
      if (options && options.writable === false) this.writable = false;
      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
      this.once("end", onend);
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function() {
        return this._writableState.highWaterMark;
      }
    });
    function onend() {
      if (this.allowHalfOpen || this._writableState.ended) return;
      pna.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      get: function() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
    Duplex.prototype._destroy = function(err, cb) {
      this.push(null);
      this.end();
      pna.nextTick(cb, err);
    };
    return _stream_duplex;
  }
  var _stream_readable;
  var hasRequired_stream_readable;
  function require_stream_readable() {
    if (hasRequired_stream_readable) return _stream_readable;
    hasRequired_stream_readable = 1;
    var pna = requireProcessNextickArgs();
    _stream_readable = Readable;
    var isArray2 = requireIsarray();
    var Duplex;
    Readable.ReadableState = ReadableState;
    eventsExports.EventEmitter;
    var EElistenerCount = function(emitter, type2) {
      return emitter.listeners(type2).length;
    };
    var Stream = requireStreamBrowser();
    var Buffer2 = requireSafeBuffer().Buffer;
    var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var util2 = Object.create(requireUtil());
    util2.inherits = requireInherits_browser();
    var debugUtil = requireUtil$1();
    var debug2 = void 0;
    if (debugUtil && debugUtil.debuglog) {
      debug2 = debugUtil.debuglog("stream");
    } else {
      debug2 = function() {
      };
    }
    var BufferList2 = requireBufferList();
    var destroyImpl = requireDestroy();
    var StringDecoder;
    util2.inherits(Readable, Stream);
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
      else if (isArray2(emitter._events[event])) emitter._events[event].unshift(fn);
      else emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      var isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
      var hwm = options.highWaterMark;
      var readableHwm = options.readableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      if (hwm || hwm === 0) this.highWaterMark = hwm;
      else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;
      else this.highWaterMark = defaultHwm;
      this.highWaterMark = Math.floor(this.highWaterMark);
      this.buffer = new BufferList2();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable)) return new Readable(options);
      this._readableState = new ReadableState(options, this);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      get: function() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      this.push(null);
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding2) {
      var state2 = this._readableState;
      var skipChunkCheck;
      if (!state2.objectMode) {
        if (typeof chunk === "string") {
          encoding2 = encoding2 || state2.defaultEncoding;
          if (encoding2 !== state2.encoding) {
            chunk = Buffer2.from(chunk, encoding2);
            encoding2 = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding2, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding2, addToFront, skipChunkCheck) {
      var state2 = stream._readableState;
      if (chunk === null) {
        state2.reading = false;
        onEofChunk(stream, state2);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state2, chunk);
        if (er) {
          stream.emit("error", er);
        } else if (state2.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state2.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state2.endEmitted) stream.emit("error", new Error("stream.unshift() after end event"));
            else addChunk(stream, state2, chunk, true);
          } else if (state2.ended) {
            stream.emit("error", new Error("stream.push() after EOF"));
          } else {
            state2.reading = false;
            if (state2.decoder && !encoding2) {
              chunk = state2.decoder.write(chunk);
              if (state2.objectMode || chunk.length !== 0) addChunk(stream, state2, chunk, false);
              else maybeReadMore(stream, state2);
            } else {
              addChunk(stream, state2, chunk, false);
            }
          }
        } else if (!addToFront) {
          state2.reading = false;
        }
      }
      return needMoreData(state2);
    }
    function addChunk(stream, state2, chunk, addToFront) {
      if (state2.flowing && state2.length === 0 && !state2.sync) {
        stream.emit("data", chunk);
        stream.read(0);
      } else {
        state2.length += state2.objectMode ? 1 : chunk.length;
        if (addToFront) state2.buffer.unshift(chunk);
        else state2.buffer.push(chunk);
        if (state2.needReadable) emitReadable(stream);
      }
      maybeReadMore(stream, state2);
    }
    function chunkInvalid(state2, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state2.objectMode) {
        er = new TypeError("Invalid non-string/buffer chunk");
      }
      return er;
    }
    function needMoreData(state2) {
      return !state2.ended && (state2.needReadable || state2.length < state2.highWaterMark || state2.length === 0);
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };
    var MAX_HWM = 8388608;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state2) {
      if (n <= 0 || state2.length === 0 && state2.ended) return 0;
      if (state2.objectMode) return 1;
      if (n !== n) {
        if (state2.flowing && state2.length) return state2.buffer.head.data.length;
        else return state2.length;
      }
      if (n > state2.highWaterMark) state2.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state2.length) return n;
      if (!state2.ended) {
        state2.needReadable = true;
        return 0;
      }
      return state2.length;
    }
    Readable.prototype.read = function(n) {
      debug2("read", n);
      n = parseInt(n, 10);
      var state2 = this._readableState;
      var nOrig = n;
      if (n !== 0) state2.emittedReadable = false;
      if (n === 0 && state2.needReadable && (state2.length >= state2.highWaterMark || state2.ended)) {
        debug2("read: emitReadable", state2.length, state2.ended);
        if (state2.length === 0 && state2.ended) endReadable(this);
        else emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state2);
      if (n === 0 && state2.ended) {
        if (state2.length === 0) endReadable(this);
        return null;
      }
      var doRead = state2.needReadable;
      debug2("need readable", doRead);
      if (state2.length === 0 || state2.length - n < state2.highWaterMark) {
        doRead = true;
        debug2("length less than watermark", doRead);
      }
      if (state2.ended || state2.reading) {
        doRead = false;
        debug2("reading or ended", doRead);
      } else if (doRead) {
        debug2("do read");
        state2.reading = true;
        state2.sync = true;
        if (state2.length === 0) state2.needReadable = true;
        this._read(state2.highWaterMark);
        state2.sync = false;
        if (!state2.reading) n = howMuchToRead(nOrig, state2);
      }
      var ret;
      if (n > 0) ret = fromList(n, state2);
      else ret = null;
      if (ret === null) {
        state2.needReadable = true;
        n = 0;
      } else {
        state2.length -= n;
      }
      if (state2.length === 0) {
        if (!state2.ended) state2.needReadable = true;
        if (nOrig !== n && state2.ended) endReadable(this);
      }
      if (ret !== null) this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state2) {
      if (state2.ended) return;
      if (state2.decoder) {
        var chunk = state2.decoder.end();
        if (chunk && chunk.length) {
          state2.buffer.push(chunk);
          state2.length += state2.objectMode ? 1 : chunk.length;
        }
      }
      state2.ended = true;
      emitReadable(stream);
    }
    function emitReadable(stream) {
      var state2 = stream._readableState;
      state2.needReadable = false;
      if (!state2.emittedReadable) {
        debug2("emitReadable", state2.flowing);
        state2.emittedReadable = true;
        if (state2.sync) pna.nextTick(emitReadable_, stream);
        else emitReadable_(stream);
      }
    }
    function emitReadable_(stream) {
      debug2("emit readable");
      stream.emit("readable");
      flow(stream);
    }
    function maybeReadMore(stream, state2) {
      if (!state2.readingMore) {
        state2.readingMore = true;
        pna.nextTick(maybeReadMore_, stream, state2);
      }
    }
    function maybeReadMore_(stream, state2) {
      var len2 = state2.length;
      while (!state2.reading && !state2.flowing && !state2.ended && state2.length < state2.highWaterMark) {
        debug2("maybeReadMore read 0");
        stream.read(0);
        if (len2 === state2.length)
          break;
        else len2 = state2.length;
      }
      state2.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      this.emit("error", new Error("_read() is not implemented"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state2 = this._readableState;
      switch (state2.pipesCount) {
        case 0:
          state2.pipes = dest;
          break;
        case 1:
          state2.pipes = [state2.pipes, dest];
          break;
        default:
          state2.pipes.push(dest);
          break;
      }
      state2.pipesCount += 1;
      debug2("pipe count=%d opts=%j", state2.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state2.endEmitted) pna.nextTick(endFn);
      else src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug2("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug2("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug2("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state2.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }
      var increasedAwaitDrain = false;
      src.on("data", ondata);
      function ondata(chunk) {
        debug2("ondata");
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          if ((state2.pipesCount === 1 && state2.pipes === dest || state2.pipesCount > 1 && indexOf2(state2.pipes, dest) !== -1) && !cleanedUp) {
            debug2("false write response, pause", state2.awaitDrain);
            state2.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug2("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) dest.emit("error", er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug2("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug2("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state2.flowing) {
        debug2("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function() {
        var state2 = src._readableState;
        debug2("pipeOnDrain", state2.awaitDrain);
        if (state2.awaitDrain) state2.awaitDrain--;
        if (state2.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state2.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state2 = this._readableState;
      var unpipeInfo = { hasUnpiped: false };
      if (state2.pipesCount === 0) return this;
      if (state2.pipesCount === 1) {
        if (dest && dest !== state2.pipes) return this;
        if (!dest) dest = state2.pipes;
        state2.pipes = null;
        state2.pipesCount = 0;
        state2.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state2.pipes;
        var len2 = state2.pipesCount;
        state2.pipes = null;
        state2.pipesCount = 0;
        state2.flowing = false;
        for (var i2 = 0; i2 < len2; i2++) {
          dests[i2].emit("unpipe", this, { hasUnpiped: false });
        }
        return this;
      }
      var index = indexOf2(state2.pipes, dest);
      if (index === -1) return this;
      state2.pipes.splice(index, 1);
      state2.pipesCount -= 1;
      if (state2.pipesCount === 1) state2.pipes = state2.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      if (ev === "data") {
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === "readable") {
        var state2 = this._readableState;
        if (!state2.endEmitted && !state2.readableListening) {
          state2.readableListening = state2.needReadable = true;
          state2.emittedReadable = false;
          if (!state2.reading) {
            pna.nextTick(nReadingNextTick, this);
          } else if (state2.length) {
            emitReadable(this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    function nReadingNextTick(self2) {
      debug2("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state2 = this._readableState;
      if (!state2.flowing) {
        debug2("resume");
        state2.flowing = true;
        resume(this, state2);
      }
      return this;
    };
    function resume(stream, state2) {
      if (!state2.resumeScheduled) {
        state2.resumeScheduled = true;
        pna.nextTick(resume_, stream, state2);
      }
    }
    function resume_(stream, state2) {
      if (!state2.reading) {
        debug2("resume read 0");
        stream.read(0);
      }
      state2.resumeScheduled = false;
      state2.awaitDrain = 0;
      stream.emit("resume");
      flow(stream);
      if (state2.flowing && !state2.reading) stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug2("call pause flowing=%j", this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug2("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      return this;
    };
    function flow(stream) {
      var state2 = stream._readableState;
      debug2("flow", state2.flowing);
      while (state2.flowing && stream.read() !== null) {
      }
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state2 = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug2("wrapped end");
        if (state2.decoder && !state2.ended) {
          var chunk = state2.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug2("wrapped data");
        if (state2.decoder) chunk = state2.decoder.write(chunk);
        if (state2.objectMode && (chunk === null || chunk === void 0)) return;
        else if (!state2.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i2 in stream) {
        if (this[i2] === void 0 && typeof stream[i2] === "function") {
          this[i2] = /* @__PURE__ */ function(method) {
            return function() {
              return stream[method].apply(stream, arguments);
            };
          }(i2);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug2("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function() {
        return this._readableState.highWaterMark;
      }
    });
    Readable._fromList = fromList;
    function fromList(n, state2) {
      if (state2.length === 0) return null;
      var ret;
      if (state2.objectMode) ret = state2.buffer.shift();
      else if (!n || n >= state2.length) {
        if (state2.decoder) ret = state2.buffer.join("");
        else if (state2.buffer.length === 1) ret = state2.buffer.head.data;
        else ret = state2.buffer.concat(state2.length);
        state2.buffer.clear();
      } else {
        ret = fromListPartial(n, state2.buffer, state2.decoder);
      }
      return ret;
    }
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        ret = list.shift();
      } else {
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;
        else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;
            else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }
    function copyFromBuffer(n, list) {
      var ret = Buffer2.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;
            else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }
    function endReadable(stream) {
      var state2 = stream._readableState;
      if (state2.length > 0) throw new Error('"endReadable()" called on non-empty stream');
      if (!state2.endEmitted) {
        state2.ended = true;
        pna.nextTick(endReadableNT, state2, stream);
      }
    }
    function endReadableNT(state2, stream) {
      if (!state2.endEmitted && state2.length === 0) {
        state2.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
      }
    }
    function indexOf2(xs, x) {
      for (var i2 = 0, l = xs.length; i2 < l; i2++) {
        if (xs[i2] === x) return i2;
      }
      return -1;
    }
    return _stream_readable;
  }
  var _stream_transform;
  var hasRequired_stream_transform;
  function require_stream_transform() {
    if (hasRequired_stream_transform) return _stream_transform;
    hasRequired_stream_transform = 1;
    _stream_transform = Transform;
    var Duplex = require_stream_duplex();
    var util2 = Object.create(requireUtil());
    util2.inherits = requireInherits_browser();
    util2.inherits(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (!cb) {
        return this.emit("error", new Error("write callback called multiple times"));
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function") {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding2) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding2);
    };
    Transform.prototype._transform = function(chunk, encoding2, cb) {
      throw new Error("_transform() is not implemented");
    };
    Transform.prototype._write = function(chunk, encoding2, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding2;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      var _this2 = this;
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
        _this2.emit("close");
      });
    };
    function done(stream, er, data) {
      if (er) return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length) throw new Error("Calling transform done when ws.length != 0");
      if (stream._transformState.transforming) throw new Error("Calling transform done when still transforming");
      return stream.push(null);
    }
    return _stream_transform;
  }
  var _stream_passthrough;
  var hasRequired_stream_passthrough;
  function require_stream_passthrough() {
    if (hasRequired_stream_passthrough) return _stream_passthrough;
    hasRequired_stream_passthrough = 1;
    _stream_passthrough = PassThrough;
    var Transform = require_stream_transform();
    var util2 = Object.create(requireUtil());
    util2.inherits = requireInherits_browser();
    util2.inherits(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding2, cb) {
      cb(null, chunk);
    };
    return _stream_passthrough;
  }
  var hasRequiredReadableBrowser;
  function requireReadableBrowser() {
    if (hasRequiredReadableBrowser) return readableBrowser.exports;
    hasRequiredReadableBrowser = 1;
    (function(module, exports2) {
      exports2 = module.exports = require_stream_readable();
      exports2.Stream = exports2;
      exports2.Readable = exports2;
      exports2.Writable = require_stream_writable();
      exports2.Duplex = require_stream_duplex();
      exports2.Transform = require_stream_transform();
      exports2.PassThrough = require_stream_passthrough();
    })(readableBrowser, readableBrowser.exports);
    return readableBrowser.exports;
  }
  var sign = { exports: {} };
  var bn$1 = { exports: {} };
  bn$1.exports;
  var hasRequiredBn$1;
  function requireBn$1() {
    if (hasRequiredBn$1) return bn$1.exports;
    hasRequiredBn$1 = 1;
    (function(module) {
      (function(module2, exports2) {
        function assert2(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN2(number2, base2, endian) {
          if (BN2.isBN(number2)) {
            return number2;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number2 !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number2 || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN2;
        } else {
          exports2.BN = BN2;
        }
        BN2.BN = BN2;
        BN2.wordSize = 26;
        var Buffer2;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer2 = window.Buffer;
          } else {
            Buffer2 = require$$0$5.Buffer;
          }
        } catch (e) {
        }
        BN2.isBN = function isBN(num) {
          if (num instanceof BN2) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
        };
        BN2.max = function max2(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN2.min = function min2(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN2.prototype._init = function init(number2, base2, endian) {
          if (typeof number2 === "number") {
            return this._initNumber(number2, base2, endian);
          }
          if (typeof number2 === "object") {
            return this._initArray(number2, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number2 = number2.toString().replace(/\s+/g, "");
          var start = 0;
          if (number2[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number2.length) {
            if (base2 === 16) {
              this._parseHex(number2, start, endian);
            } else {
              this._parseBase(number2, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN2.prototype._initNumber = function _initNumber(number2, base2, endian) {
          if (number2 < 0) {
            this.negative = 1;
            number2 = -number2;
          }
          if (number2 < 67108864) {
            this.words = [number2 & 67108863];
            this.length = 1;
          } else if (number2 < 4503599627370496) {
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert2(number2 < 9007199254740992);
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN2.prototype._initArray = function _initArray(number2, base2, endian) {
          assert2(typeof number2.length === "number");
          if (number2.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number2.length / 3);
          this.words = new Array(this.length);
          for (var i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = 0;
          }
          var j, w;
          var off = 0;
          if (endian === "be") {
            for (i2 = number2.length - 1, j = 0; i2 >= 0; i2 -= 3) {
              w = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i2 = 0, j = 0; i2 < number2.length; i2 += 3) {
              w = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          }
          return this._strip();
        };
        function parseHex4Bits(string2, index) {
          var c = string2.charCodeAt(index);
          if (c >= 48 && c <= 57) {
            return c - 48;
          } else if (c >= 65 && c <= 70) {
            return c - 55;
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            assert2(false, "Invalid character in " + string2);
          }
        }
        function parseHexByte2(string2, lowerBound, index) {
          var r2 = parseHex4Bits(string2, index);
          if (index - 1 >= lowerBound) {
            r2 |= parseHex4Bits(string2, index - 1) << 4;
          }
          return r2;
        }
        BN2.prototype._parseHex = function _parseHex(number2, start, endian) {
          this.length = Math.ceil((number2.length - start) / 6);
          this.words = new Array(this.length);
          for (var i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = 0;
          }
          var off = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
              w = parseHexByte2(number2, start, i2) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number2.length - start;
            for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
              w = parseHexByte2(number2, start, i2) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          }
          this._strip();
        };
        function parseBase(str, start, end, mul) {
          var r2 = 0;
          var b = 0;
          var len2 = Math.min(str.length, end);
          for (var i2 = start; i2 < len2; i2++) {
            var c = str.charCodeAt(i2) - 48;
            r2 *= mul;
            if (c >= 49) {
              b = c - 49 + 10;
            } else if (c >= 17) {
              b = c - 17 + 10;
            } else {
              b = c;
            }
            assert2(c >= 0 && b < mul, "Invalid character");
            r2 += b;
          }
          return r2;
        }
        BN2.prototype._parseBase = function _parseBase(number2, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number2.length - start;
          var mod2 = total % limbLen;
          var end = Math.min(total, total - mod2) + start;
          var word = 0;
          for (var i2 = start; i2 < end; i2 += limbLen) {
            word = parseBase(number2, i2, i2 + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod2 !== 0) {
            var pow3 = 1;
            word = parseBase(number2, i2, number2.length, base2);
            for (i2 = 0; i2 < mod2; i2++) {
              pow3 *= base2;
            }
            this.imuln(pow3);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this._strip();
        };
        BN2.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for (var i2 = 0; i2 < this.length; i2++) {
            dest.words[i2] = this.words[i2];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        function move(dest, src) {
          dest.words = src.words;
          dest.length = src.length;
          dest.negative = src.negative;
          dest.red = src.red;
        }
        BN2.prototype._move = function _move(dest) {
          move(dest, this);
        };
        BN2.prototype.clone = function clone2() {
          var r2 = new BN2(null);
          this.copy(r2);
          return r2;
        };
        BN2.prototype._expand = function _expand(size2) {
          while (this.length < size2) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN2.prototype._strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN2.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
          try {
            BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect2;
          } catch (e) {
            BN2.prototype.inspect = inspect2;
          }
        } else {
          BN2.prototype.inspect = inspect2;
        }
        function inspect2() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN2.prototype.toString = function toString2(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i2 = 0; i2 < this.length; i2++) {
              var w = this.words[i2];
              var word = ((w << off | carry) & 16777215).toString(16);
              carry = w >>> 24 - off & 16777215;
              off += 2;
              if (off >= 26) {
                off -= 26;
                i2--;
              }
              if (carry !== 0 || i2 !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r2 = c.modrn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r2.length] + r2 + out;
              } else {
                out = r2 + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert2(false, "Base should be between 2 and 36");
        };
        BN2.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert2(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN2.prototype.toJSON = function toJSON() {
          return this.toString(16, 2);
        };
        if (Buffer2) {
          BN2.prototype.toBuffer = function toBuffer2(endian, length) {
            return this.toArrayLike(Buffer2, endian, length);
          };
        }
        BN2.prototype.toArray = function toArray2(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        var allocate = function allocate2(ArrayType, size2) {
          if (ArrayType.allocUnsafe) {
            return ArrayType.allocUnsafe(size2);
          }
          return new ArrayType(size2);
        };
        BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          this._strip();
          var byteLength2 = this.byteLength();
          var reqLength = length || Math.max(1, byteLength2);
          assert2(byteLength2 <= reqLength, "byte array longer than desired length");
          assert2(reqLength > 0, "Requested array length <= 0");
          var res = allocate(ArrayType, reqLength);
          var postfix = endian === "le" ? "LE" : "BE";
          this["_toArrayLike" + postfix](res, byteLength2);
          return res;
        };
        BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength2) {
          var position = 0;
          var carry = 0;
          for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
            var word = this.words[i2] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) {
              res[position++] = word >> 8 & 255;
            }
            if (position < res.length) {
              res[position++] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position < res.length) {
                res[position++] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position < res.length) {
            res[position++] = carry;
            while (position < res.length) {
              res[position++] = 0;
            }
          }
        };
        BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength2) {
          var position = res.length - 1;
          var carry = 0;
          for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
            var word = this.words[i2] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) {
              res[position--] = word >> 8 & 255;
            }
            if (position >= 0) {
              res[position--] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position >= 0) {
                res[position--] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position >= 0) {
            res[position--] = carry;
            while (position >= 0) {
              res[position--] = 0;
            }
          }
        };
        if (Math.clz32) {
          BN2.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN2.prototype._countBits = function _countBits(w) {
            var t2 = w;
            var r2 = 0;
            if (t2 >= 4096) {
              r2 += 13;
              t2 >>>= 13;
            }
            if (t2 >= 64) {
              r2 += 7;
              t2 >>>= 7;
            }
            if (t2 >= 8) {
              r2 += 4;
              t2 >>>= 4;
            }
            if (t2 >= 2) {
              r2 += 2;
              t2 >>>= 2;
            }
            return r2 + t2;
          };
        }
        BN2.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t2 = w;
          var r2 = 0;
          if ((t2 & 8191) === 0) {
            r2 += 13;
            t2 >>>= 13;
          }
          if ((t2 & 127) === 0) {
            r2 += 7;
            t2 >>>= 7;
          }
          if ((t2 & 15) === 0) {
            r2 += 4;
            t2 >>>= 4;
          }
          if ((t2 & 3) === 0) {
            r2 += 2;
            t2 >>>= 2;
          }
          if ((t2 & 1) === 0) {
            r2++;
          }
          return r2;
        };
        BN2.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
          }
          return w;
        }
        BN2.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r2 = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var b = this._zeroBits(this.words[i2]);
            r2 += b;
            if (b !== 26) break;
          }
          return r2;
        };
        BN2.prototype.byteLength = function byteLength2() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN2.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN2.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN2.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN2.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN2.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN2.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i2 = 0; i2 < num.length; i2++) {
            this.words[i2] = this.words[i2] | num.words[i2];
          }
          return this._strip();
        };
        BN2.prototype.ior = function ior(num) {
          assert2((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN2.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN2.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN2.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i2 = 0; i2 < b.length; i2++) {
            this.words[i2] = this.words[i2] & num.words[i2];
          }
          this.length = b.length;
          return this._strip();
        };
        BN2.prototype.iand = function iand(num) {
          assert2((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN2.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN2.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN2.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i2 = 0; i2 < b.length; i2++) {
            this.words[i2] = a.words[i2] ^ b.words[i2];
          }
          if (this !== a) {
            for (; i2 < a.length; i2++) {
              this.words[i2] = a.words[i2];
            }
          }
          this.length = a.length;
          return this._strip();
        };
        BN2.prototype.ixor = function ixor(num) {
          assert2((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN2.prototype.xor = function xor2(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN2.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN2.prototype.inotn = function inotn(width) {
          assert2(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i2 = 0; i2 < bytesNeeded; i2++) {
            this.words[i2] = ~this.words[i2] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
          }
          return this._strip();
        };
        BN2.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN2.prototype.setn = function setn(bit, val) {
          assert2(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | 1 << wbit;
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this._strip();
        };
        BN2.prototype.iadd = function iadd(num) {
          var r2;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r2 = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r2 = this.isub(num);
            num.negative = 1;
            return r2._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i2 = 0; i2 < b.length; i2++) {
            r2 = (a.words[i2] | 0) + (b.words[i2] | 0) + carry;
            this.words[i2] = r2 & 67108863;
            carry = r2 >>> 26;
          }
          for (; carry !== 0 && i2 < a.length; i2++) {
            r2 = (a.words[i2] | 0) + carry;
            this.words[i2] = r2 & 67108863;
            carry = r2 >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i2 < a.length; i2++) {
              this.words[i2] = a.words[i2];
            }
          }
          return this;
        };
        BN2.prototype.add = function add2(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN2.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r2 = this.iadd(num);
            num.negative = 1;
            return r2._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp2 = this.cmp(num);
          if (cmp2 === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp2 > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i2 = 0; i2 < b.length; i2++) {
            r2 = (a.words[i2] | 0) - (b.words[i2] | 0) + carry;
            carry = r2 >> 26;
            this.words[i2] = r2 & 67108863;
          }
          for (; carry !== 0 && i2 < a.length; i2++) {
            r2 = (a.words[i2] | 0) + carry;
            carry = r2 >> 26;
            this.words[i2] = r2 & 67108863;
          }
          if (carry === 0 && i2 < a.length && a !== this) {
            for (; i2 < a.length; i2++) {
              this.words[i2] = a.words[i2];
            }
          }
          this.length = Math.max(this.length, i2);
          if (a !== this) {
            this.negative = 1;
          }
          return this._strip();
        };
        BN2.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len2 = self2.length + num.length | 0;
          out.length = len2;
          len2 = len2 - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r2 = a * b;
          var lo = r2 & 67108863;
          var carry = r2 / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len2; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i2 = k - j | 0;
              a = self2.words[i2] | 0;
              b = num.words[j] | 0;
              r2 = a * b + rword;
              ncarry += r2 / 67108864 | 0;
              rword = r2 & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out._strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i2 = k - j;
              var a = self2.words[i2] | 0;
              var b = num.words[j] | 0;
              var r2 = a * b;
              var lo = r2 & 67108863;
              ncarry = ncarry + (r2 / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out._strip();
        }
        function jumboMulTo(self2, num, out) {
          return bigMulTo(self2, num, out);
        }
        BN2.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len2 = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len2 < 63) {
            res = smallMulTo(this, num, out);
          } else if (len2 < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        BN2.prototype.mul = function mul(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN2.prototype.mulf = function mulf(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN2.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN2.prototype.imuln = function imuln(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert2(typeof num === "number");
          assert2(num < 67108864);
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w = (this.words[i2] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i2] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i2] = carry;
            this.length++;
          }
          return isNegNum ? this.ineg() : this;
        };
        BN2.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN2.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN2.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN2.prototype.pow = function pow3(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN2(1);
          var res = this;
          for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
            if (w[i2] !== 0) break;
          }
          if (++i2 < w.length) {
            for (var q = res.sqr(); i2 < w.length; i2++, q = q.sqr()) {
              if (w[i2] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN2.prototype.iushln = function iushln(bits) {
          assert2(typeof bits === "number" && bits >= 0);
          var r2 = bits % 26;
          var s2 = (bits - r2) / 26;
          var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
          var i2;
          if (r2 !== 0) {
            var carry = 0;
            for (i2 = 0; i2 < this.length; i2++) {
              var newCarry = this.words[i2] & carryMask;
              var c = (this.words[i2] | 0) - newCarry << r2;
              this.words[i2] = c | carry;
              carry = newCarry >>> 26 - r2;
            }
            if (carry) {
              this.words[i2] = carry;
              this.length++;
            }
          }
          if (s2 !== 0) {
            for (i2 = this.length - 1; i2 >= 0; i2--) {
              this.words[i2 + s2] = this.words[i2];
            }
            for (i2 = 0; i2 < s2; i2++) {
              this.words[i2] = 0;
            }
            this.length += s2;
          }
          return this._strip();
        };
        BN2.prototype.ishln = function ishln(bits) {
          assert2(this.negative === 0);
          return this.iushln(bits);
        };
        BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert2(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r2 = bits % 26;
          var s2 = Math.min((bits - r2) / 26, this.length);
          var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
          var maskedWords = extended;
          h -= s2;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i2 = 0; i2 < s2; i2++) {
              maskedWords.words[i2] = this.words[i2];
            }
            maskedWords.length = s2;
          }
          if (s2 === 0) ;
          else if (this.length > s2) {
            this.length -= s2;
            for (i2 = 0; i2 < this.length; i2++) {
              this.words[i2] = this.words[i2 + s2];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h); i2--) {
            var word = this.words[i2] | 0;
            this.words[i2] = carry << 26 - r2 | word >>> r2;
            carry = word & mask2;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this._strip();
        };
        BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert2(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN2.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN2.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN2.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN2.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN2.prototype.testn = function testn(bit) {
          assert2(typeof bit === "number" && bit >= 0);
          var r2 = bit % 26;
          var s2 = (bit - r2) / 26;
          var q = 1 << r2;
          if (this.length <= s2) return false;
          var w = this.words[s2];
          return !!(w & q);
        };
        BN2.prototype.imaskn = function imaskn(bits) {
          assert2(typeof bits === "number" && bits >= 0);
          var r2 = bits % 26;
          var s2 = (bits - r2) / 26;
          assert2(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s2) {
            return this;
          }
          if (r2 !== 0) {
            s2++;
          }
          this.length = Math.min(s2, this.length);
          if (r2 !== 0) {
            var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
            this.words[this.length - 1] &= mask2;
          }
          return this._strip();
        };
        BN2.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN2.prototype.iaddn = function iaddn(num) {
          assert2(typeof num === "number");
          assert2(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN2.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
            this.words[i2] -= 67108864;
            if (i2 === this.length - 1) {
              this.words[i2 + 1] = 1;
            } else {
              this.words[i2 + 1]++;
            }
          }
          this.length = Math.max(this.length, i2 + 1);
          return this;
        };
        BN2.prototype.isubn = function isubn(num) {
          assert2(typeof num === "number");
          assert2(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
              this.words[i2] += 67108864;
              this.words[i2 + 1] -= 1;
            }
          }
          return this._strip();
        };
        BN2.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN2.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN2.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN2.prototype.abs = function abs2() {
          return this.clone().iabs();
        };
        BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len2 = num.length + shift;
          var i2;
          this._expand(len2);
          var w;
          var carry = 0;
          for (i2 = 0; i2 < num.length; i2++) {
            w = (this.words[i2 + shift] | 0) + carry;
            var right = (num.words[i2] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i2 + shift] = w & 67108863;
          }
          for (; i2 < this.length - shift; i2++) {
            w = (this.words[i2 + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i2 + shift] = w & 67108863;
          }
          if (carry === 0) return this._strip();
          assert2(carry === -1);
          carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            w = -(this.words[i2] | 0) + carry;
            carry = w >> 26;
            this.words[i2] = w & 67108863;
          }
          this.negative = 1;
          return this._strip();
        };
        BN2.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN2(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i2 = 0; i2 < q.length; i2++) {
              q.words[i2] = 0;
            }
          }
          var diff2 = a.clone()._ishlnsubmul(b, 1, m);
          if (diff2.negative === 0) {
            a = diff2;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q._strip();
          }
          a._strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN2.prototype.divmod = function divmod(num, mode, positive) {
          assert2(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN2(0),
              mod: new BN2(0)
            };
          }
          var div, mod2, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.iadd(num);
              }
            }
            return {
              div,
              mod: mod2
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.isub(num);
              }
            }
            return {
              div: res.div,
              mod: mod2
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN2(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN2(this.modrn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN2(this.modrn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN2.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN2.prototype.mod = function mod2(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN2.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN2.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp2 = mod2.cmp(half);
          if (cmp2 < 0 || r2 === 1 && cmp2 === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN2.prototype.modrn = function modrn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert2(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i2 = this.length - 1; i2 >= 0; i2--) {
            acc = (p * acc + (this.words[i2] | 0)) % num;
          }
          return isNegNum ? -acc : acc;
        };
        BN2.prototype.modn = function modn(num) {
          return this.modrn(num);
        };
        BN2.prototype.idivn = function idivn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert2(num <= 67108863);
          var carry = 0;
          for (var i2 = this.length - 1; i2 >= 0; i2--) {
            var w = (this.words[i2] | 0) + carry * 67108864;
            this.words[i2] = w / num | 0;
            carry = w % num;
          }
          this._strip();
          return isNegNum ? this.ineg() : this;
        };
        BN2.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN2.prototype.egcd = function egcd(p) {
          assert2(p.negative === 0);
          assert2(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN2(1);
          var B = new BN2(0);
          var C = new BN2(0);
          var D = new BN2(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i2 = 0, im = 1; (x.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
            if (i2 > 0) {
              x.iushrn(i2);
              while (i2-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN2.prototype._invmp = function _invmp(p) {
          assert2(p.negative === 0);
          assert2(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN2(1);
          var x2 = new BN2(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
            if (i2 > 0) {
              a.iushrn(i2);
              while (i2-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN2.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r2 = a.cmp(b);
            if (r2 < 0) {
              var t2 = a;
              a = b;
              b = t2;
            } else if (r2 === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN2.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN2.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN2.prototype.isOdd = function isOdd2() {
          return (this.words[0] & 1) === 1;
        };
        BN2.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN2.prototype.bincn = function bincn(bit) {
          assert2(typeof bit === "number");
          var r2 = bit % 26;
          var s2 = (bit - r2) / 26;
          var q = 1 << r2;
          if (this.length <= s2) {
            this._expand(s2 + 1);
            this.words[s2] |= q;
            return this;
          }
          var carry = q;
          for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
            var w = this.words[i2] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i2] = w;
          }
          if (carry !== 0) {
            this.words[i2] = carry;
            this.length++;
          }
          return this;
        };
        BN2.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN2.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this._strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert2(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN2.prototype.cmp = function cmp2(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN2.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i2 = this.length - 1; i2 >= 0; i2--) {
            var a = this.words[i2] | 0;
            var b = num.words[i2] | 0;
            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN2.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN2.prototype.gt = function gt2(num) {
          return this.cmp(num) === 1;
        };
        BN2.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN2.prototype.gte = function gte2(num) {
          return this.cmp(num) >= 0;
        };
        BN2.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN2.prototype.lt = function lt2(num) {
          return this.cmp(num) === -1;
        };
        BN2.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN2.prototype.lte = function lte2(num) {
          return this.cmp(num) <= 0;
        };
        BN2.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN2.prototype.eq = function eq2(num) {
          return this.cmp(num) === 0;
        };
        BN2.red = function red(num) {
          return new Red(num);
        };
        BN2.prototype.toRed = function toRed(ctx) {
          assert2(!this.red, "Already a number in reduction context");
          assert2(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN2.prototype.fromRed = function fromRed() {
          assert2(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN2.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN2.prototype.forceRed = function forceRed(ctx) {
          assert2(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN2.prototype.redAdd = function redAdd(num) {
          assert2(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN2.prototype.redIAdd = function redIAdd(num) {
          assert2(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN2.prototype.redSub = function redSub(num) {
          assert2(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN2.prototype.redISub = function redISub(num) {
          assert2(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN2.prototype.redShl = function redShl(num) {
          assert2(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN2.prototype.redMul = function redMul(num) {
          assert2(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN2.prototype.redIMul = function redIMul(num) {
          assert2(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN2.prototype.redSqr = function redSqr() {
          assert2(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN2.prototype.redISqr = function redISqr() {
          assert2(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN2.prototype.redSqrt = function redSqrt() {
          assert2(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN2.prototype.redInvm = function redInvm() {
          assert2(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN2.prototype.redNeg = function redNeg() {
          assert2(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN2.prototype.redPow = function redPow(num) {
          assert2(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name2, p) {
          this.name = name2;
          this.p = new BN2(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN2(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN2(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r2 = num;
          var rlen;
          do {
            this.split(r2, this.tmp);
            r2 = this.imulK(r2);
            r2 = r2.iadd(this.tmp);
            rlen = r2.bitLength();
          } while (rlen > this.n);
          var cmp2 = rlen < this.n ? -1 : r2.ucmp(this.p);
          if (cmp2 === 0) {
            r2.words[0] = 0;
            r2.length = 1;
          } else if (cmp2 > 0) {
            r2.isub(this.p);
          } else {
            if (r2.strip !== void 0) {
              r2.strip();
            } else {
              r2._strip();
            }
          }
          return r2;
        };
        MPrime.prototype.split = function split2(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split2(input, output2) {
          var mask2 = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i2 = 0; i2 < outLen; i2++) {
            output2.words[i2] = input.words[i2];
          }
          output2.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output2.words[output2.length++] = prev & mask2;
          for (i2 = 10; i2 < input.length; i2++) {
            var next = input.words[i2] | 0;
            input.words[i2 - 10] = (next & mask2) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i2 - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i2 = 0; i2 < num.length; i2++) {
            var w = num.words[i2] | 0;
            lo += w * 977;
            num.words[i2] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i2 = 0; i2 < num.length; i2++) {
            var hi = (num.words[i2] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i2] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN2._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN2._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert2(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert2(a.negative === 0, "red works only with positives");
          assert2(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert2((a.negative | b.negative) === 0, "red works only with positives");
          assert2(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          move(a, a.umod(this.m)._forceRed(this));
          return a;
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add2(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert2(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow3 = this.m.add(new BN2(1)).iushrn(2);
            return this.pow(a, pow3);
          }
          var q = this.m.subn(1);
          var s2 = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s2++;
            q.iushrn(1);
          }
          assert2(!q.isZero());
          var one = new BN2(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN2(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r2 = this.pow(a, q.addn(1).iushrn(1));
          var t2 = this.pow(a, q);
          var m = s2;
          while (t2.cmp(one) !== 0) {
            var tmp = t2;
            for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
              tmp = tmp.redSqr();
            }
            assert2(i2 < m);
            var b = this.pow(c, new BN2(1).iushln(m - i2 - 1));
            r2 = r2.redMul(b);
            c = b.redSqr();
            t2 = t2.redMul(c);
            m = i2;
          }
          return r2;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow3(a, num) {
          if (num.isZero()) return new BN2(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN2(1).toRed(this);
          wnd[1] = a;
          for (var i2 = 2; i2 < wnd.length; i2++) {
            wnd[i2] = this.mul(wnd[i2 - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i2 = num.length - 1; i2 >= 0; i2--) {
            var word = num.words[i2];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i2 !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r2 = num.umod(this.m);
          return r2 === num ? r2.clone() : r2;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN2.mont = function mont2(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN2(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r2 = this.imod(num.mul(this.rinv));
          r2.red = null;
          return r2;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t2 = a.imul(b);
          var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t2.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
          var t2 = a.mul(b);
          var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t2.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(module, commonjsGlobal);
    })(bn$1);
    return bn$1.exports;
  }
  var browserifyRsa;
  var hasRequiredBrowserifyRsa;
  function requireBrowserifyRsa() {
    if (hasRequiredBrowserifyRsa) return browserifyRsa;
    hasRequiredBrowserifyRsa = 1;
    var BN2 = requireBn$1();
    var randomBytes = requireBrowser$d();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function getr(priv) {
      var len2 = priv.modulus.byteLength();
      var r2;
      do {
        r2 = new BN2(randomBytes(len2));
      } while (r2.cmp(priv.modulus) >= 0 || !r2.umod(priv.prime1) || !r2.umod(priv.prime2));
      return r2;
    }
    function blind(priv) {
      var r2 = getr(priv);
      var blinder = r2.toRed(BN2.mont(priv.modulus)).redPow(new BN2(priv.publicExponent)).fromRed();
      return { blinder, unblinder: r2.invm(priv.modulus) };
    }
    function crt(msg, priv) {
      var blinds = blind(priv);
      var len2 = priv.modulus.byteLength();
      var blinded = new BN2(msg).mul(blinds.blinder).umod(priv.modulus);
      var c1 = blinded.toRed(BN2.mont(priv.prime1));
      var c2 = blinded.toRed(BN2.mont(priv.prime2));
      var qinv = priv.coefficient;
      var p = priv.prime1;
      var q = priv.prime2;
      var m1 = c1.redPow(priv.exponent1).fromRed();
      var m2 = c2.redPow(priv.exponent2).fromRed();
      var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
      return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer2, "be", len2);
    }
    crt.getr = getr;
    browserifyRsa = crt;
    return browserifyRsa;
  }
  var elliptic = {};
  const name = "elliptic";
  const version$2 = "6.6.1";
  const description = "EC cryptography";
  const main = "lib/elliptic.js";
  const files = [
    "lib"
  ];
  const scripts = {
    lint: "eslint lib test",
    "lint:fix": "npm run lint -- --fix",
    unit: "istanbul test _mocha --reporter=spec test/index.js",
    test: "npm run lint && npm run unit",
    version: "grunt dist && git add dist/"
  };
  const repository = {
    type: "git",
    url: "git@github.com:indutny/elliptic"
  };
  const keywords = [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ];
  const author = "Fedor Indutny <fedor@indutny.com>";
  const license = "MIT";
  const bugs = {
    url: "https://github.com/indutny/elliptic/issues"
  };
  const homepage = "https://github.com/indutny/elliptic";
  const devDependencies = {
    brfs: "^2.0.2",
    coveralls: "^3.1.0",
    eslint: "^7.6.0",
    grunt: "^1.2.1",
    "grunt-browserify": "^5.3.0",
    "grunt-cli": "^1.3.2",
    "grunt-contrib-connect": "^3.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^5.0.0",
    "grunt-mocha-istanbul": "^5.0.2",
    "grunt-saucelabs": "^9.0.1",
    istanbul: "^0.4.5",
    mocha: "^8.0.1"
  };
  const dependencies = {
    "bn.js": "^4.11.9",
    brorand: "^1.1.0",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.1",
    inherits: "^2.0.4",
    "minimalistic-assert": "^1.0.1",
    "minimalistic-crypto-utils": "^1.0.1"
  };
  const require$$0$4 = {
    name,
    version: version$2,
    description,
    main,
    files,
    scripts,
    repository,
    keywords,
    author,
    license,
    bugs,
    homepage,
    devDependencies,
    dependencies
  };
  var utils$b = {};
  var utils$a = {};
  var hasRequiredUtils$1;
  function requireUtils$1() {
    if (hasRequiredUtils$1) return utils$a;
    hasRequiredUtils$1 = 1;
    (function(exports2) {
      var utils2 = exports2;
      function toArray2(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg !== "string") {
          for (var i2 = 0; i2 < msg.length; i2++)
            res[i2] = msg[i2] | 0;
          return res;
        }
        if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (var i2 = 0; i2 < msg.length; i2 += 2)
            res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
        } else {
          for (var i2 = 0; i2 < msg.length; i2++) {
            var c = msg.charCodeAt(i2);
            var hi = c >> 8;
            var lo = c & 255;
            if (hi)
              res.push(hi, lo);
            else
              res.push(lo);
          }
        }
        return res;
      }
      utils2.toArray = toArray2;
      function zero22(word) {
        if (word.length === 1)
          return "0" + word;
        else
          return word;
      }
      utils2.zero2 = zero22;
      function toHex2(msg) {
        var res = "";
        for (var i2 = 0; i2 < msg.length; i2++)
          res += zero22(msg[i2].toString(16));
        return res;
      }
      utils2.toHex = toHex2;
      utils2.encode = function encode2(arr, enc) {
        if (enc === "hex")
          return toHex2(arr);
        else
          return arr;
      };
    })(utils$a);
    return utils$a;
  }
  var hasRequiredUtils;
  function requireUtils() {
    if (hasRequiredUtils) return utils$b;
    hasRequiredUtils = 1;
    (function(exports2) {
      var utils2 = exports2;
      var BN2 = requireBn$2();
      var minAssert = minimalisticAssert$1;
      var minUtils = requireUtils$1();
      utils2.assert = minAssert;
      utils2.toArray = minUtils.toArray;
      utils2.zero2 = minUtils.zero2;
      utils2.toHex = minUtils.toHex;
      utils2.encode = minUtils.encode;
      function getNAF2(num, w, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        var i2;
        for (i2 = 0; i2 < naf.length; i2 += 1) {
          naf[i2] = 0;
        }
        var ws = 1 << w + 1;
        var k = num.clone();
        for (i2 = 0; i2 < naf.length; i2++) {
          var z;
          var mod2 = k.andln(ws - 1);
          if (k.isOdd()) {
            if (mod2 > (ws >> 1) - 1)
              z = (ws >> 1) - mod2;
            else
              z = mod2;
            k.isubn(z);
          } else {
            z = 0;
          }
          naf[i2] = z;
          k.iushrn(1);
        }
        return naf;
      }
      utils2.getNAF = getNAF2;
      function getJSF2(k1, k2) {
        var jsf = [
          [],
          []
        ];
        k1 = k1.clone();
        k2 = k2.clone();
        var d1 = 0;
        var d2 = 0;
        var m8;
        while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
          var m14 = k1.andln(3) + d1 & 3;
          var m24 = k2.andln(3) + d2 & 3;
          if (m14 === 3)
            m14 = -1;
          if (m24 === 3)
            m24 = -1;
          var u1;
          if ((m14 & 1) === 0) {
            u1 = 0;
          } else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2)
              u1 = -m14;
            else
              u1 = m14;
          }
          jsf[0].push(u1);
          var u2;
          if ((m24 & 1) === 0) {
            u2 = 0;
          } else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2)
              u2 = -m24;
            else
              u2 = m24;
          }
          jsf[1].push(u2);
          if (2 * d1 === u1 + 1)
            d1 = 1 - d1;
          if (2 * d2 === u2 + 1)
            d2 = 1 - d2;
          k1.iushrn(1);
          k2.iushrn(1);
        }
        return jsf;
      }
      utils2.getJSF = getJSF2;
      function cachedProperty(obj, name2, computer) {
        var key2 = "_" + name2;
        obj.prototype[name2] = function cachedProperty2() {
          return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
        };
      }
      utils2.cachedProperty = cachedProperty;
      function parseBytes(bytes2) {
        return typeof bytes2 === "string" ? utils2.toArray(bytes2, "hex") : bytes2;
      }
      utils2.parseBytes = parseBytes;
      function intFromLE(bytes2) {
        return new BN2(bytes2, "hex", "le");
      }
      utils2.intFromLE = intFromLE;
    })(utils$b);
    return utils$b;
  }
  var curve$1 = {};
  var base$1;
  var hasRequiredBase$1;
  function requireBase$1() {
    if (hasRequiredBase$1) return base$1;
    hasRequiredBase$1 = 1;
    var BN2 = requireBn$2();
    var utils2 = requireUtils();
    var getNAF2 = utils2.getNAF;
    var getJSF2 = utils2.getJSF;
    var assert2 = utils2.assert;
    function BaseCurve2(type2, conf) {
      this.type = type2;
      this.p = new BN2(conf.p, 16);
      this.red = conf.prime ? BN2.red(conf.prime) : BN2.mont(this.p);
      this.zero = new BN2(0).toRed(this.red);
      this.one = new BN2(1).toRed(this.red);
      this.two = new BN2(2).toRed(this.red);
      this.n = conf.n && new BN2(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    base$1 = BaseCurve2;
    BaseCurve2.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve2.prototype.validate = function validate2() {
      throw new Error("Not implemented");
    };
    BaseCurve2.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert2(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF2(k, 1, this._bitLength);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i2 = I; i2 > 0; i2--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i2)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i2)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };
    BaseCurve2.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF2(k, w, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i2 = naf.length - 1; i2 >= 0; i2--) {
        for (var l = 0; i2 >= 0 && naf[i2] === 0; i2--)
          l++;
        if (i2 >= 0)
          l++;
        acc = acc.dblp(l);
        if (i2 < 0)
          break;
        var z = naf[i2];
        assert2(z !== 0);
        if (p.type === "affine") {
          if (z > 0)
            acc = acc.mixedAdd(wnd[z - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
          if (z > 0)
            acc = acc.add(wnd[z - 1 >> 1]);
          else
            acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
      }
      return p.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve2.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len2, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max2 = 0;
      var i2;
      var j;
      var p;
      for (i2 = 0; i2 < len2; i2++) {
        p = points[i2];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i2] = nafPoints.wnd;
        wnd[i2] = nafPoints.points;
      }
      for (i2 = len2 - 1; i2 >= 1; i2 -= 2) {
        var a = i2 - 1;
        var b = i2;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF2(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF2(coeffs[b], wndWidth[b], this._bitLength);
          max2 = Math.max(naf[a].length, max2);
          max2 = Math.max(naf[b].length, max2);
          continue;
        }
        var comb = [
          points[a],
          /* 1 */
          null,
          /* 3 */
          null,
          /* 5 */
          points[b]
          /* 7 */
        ];
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
          -3,
          /* -1 -1 */
          -1,
          /* -1 0 */
          -5,
          /* -1 1 */
          -7,
          /* 0 -1 */
          0,
          /* 0 0 */
          7,
          /* 0 1 */
          5,
          /* 1 -1 */
          1,
          /* 1 0 */
          3
          /* 1 1 */
        ];
        var jsf = getJSF2(coeffs[a], coeffs[b]);
        max2 = Math.max(jsf[0].length, max2);
        naf[a] = new Array(max2);
        naf[b] = new Array(max2);
        for (j = 0; j < max2; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i2 = max2; i2 >= 0; i2--) {
        var k = 0;
        while (i2 >= 0) {
          var zero = true;
          for (j = 0; j < len2; j++) {
            tmp[j] = naf[j][i2] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i2--;
        }
        if (i2 >= 0)
          k++;
        acc = acc.dblp(k);
        if (i2 < 0)
          break;
        for (j = 0; j < len2; j++) {
          var z = tmp[j];
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][z - 1 >> 1];
          else if (z < 0)
            p = wnd[j][-z - 1 >> 1].neg();
          if (p.type === "affine")
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      for (i2 = 0; i2 < len2; i2++)
        wnd[i2] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    function BasePoint2(curve2, type2) {
      this.curve = curve2;
      this.type = type2;
      this.precomputed = null;
    }
    BaseCurve2.BasePoint = BasePoint2;
    BasePoint2.prototype.eq = function eq2() {
      throw new Error("Not implemented");
    };
    BasePoint2.prototype.validate = function validate2() {
      return this.curve.validate(this);
    };
    BaseCurve2.prototype.decodePoint = function decodePoint(bytes2, enc) {
      bytes2 = utils2.toArray(bytes2, enc);
      var len2 = this.p.byteLength();
      if ((bytes2[0] === 4 || bytes2[0] === 6 || bytes2[0] === 7) && bytes2.length - 1 === 2 * len2) {
        if (bytes2[0] === 6)
          assert2(bytes2[bytes2.length - 1] % 2 === 0);
        else if (bytes2[0] === 7)
          assert2(bytes2[bytes2.length - 1] % 2 === 1);
        var res = this.point(
          bytes2.slice(1, 1 + len2),
          bytes2.slice(1 + len2, 1 + 2 * len2)
        );
        return res;
      } else if ((bytes2[0] === 2 || bytes2[0] === 3) && bytes2.length - 1 === len2) {
        return this.pointFromX(bytes2.slice(1, 1 + len2), bytes2[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint2.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint2.prototype._encode = function _encode2(compact2) {
      var len2 = this.curve.p.byteLength();
      var x = this.getX().toArray("be", len2);
      if (compact2)
        return [this.getY().isEven() ? 2 : 3].concat(x);
      return [4].concat(x, this.getY().toArray("be", len2));
    };
    BasePoint2.prototype.encode = function encode2(enc, compact2) {
      return utils2.encode(this._encode(compact2), enc);
    };
    BasePoint2.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint2.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    BasePoint2.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i2 = 0; i2 < power; i2 += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint2.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max2 = (1 << wnd) - 1;
      var dbl = max2 === 1 ? null : this.dbl();
      for (var i2 = 1; i2 < max2; i2++)
        res[i2] = res[i2 - 1].add(dbl);
      return {
        wnd,
        points: res
      };
    };
    BasePoint2.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint2.prototype.dblp = function dblp(k) {
      var r2 = this;
      for (var i2 = 0; i2 < k; i2++)
        r2 = r2.dbl();
      return r2;
    };
    return base$1;
  }
  var short;
  var hasRequiredShort;
  function requireShort() {
    if (hasRequiredShort) return short;
    hasRequiredShort = 1;
    var utils2 = requireUtils();
    var BN2 = requireBn$2();
    var inherits2 = requireInherits_browser();
    var Base = requireBase$1();
    var assert2 = utils2.assert;
    function ShortCurve2(conf) {
      Base.call(this, "short", conf);
      this.a = new BN2(conf.a, 16).toRed(this.red);
      this.b = new BN2(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits2(ShortCurve2, Base);
    short = ShortCurve2;
    ShortCurve2.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN2(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN2(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN2(vec.a, 16),
            b: new BN2(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve2.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : BN2.mont(num);
      var tinv = new BN2(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s2 = new BN2(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s2).fromRed();
      var l2 = ntinv.redSub(s2).fromRed();
      return [l1, l2];
    };
    ShortCurve2.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN2(1);
      var y1 = new BN2(0);
      var x2 = new BN2(0);
      var y2 = new BN2(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i2 = 0;
      var r2;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r2 = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r2.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r2.neg();
          b1 = x;
        } else if (a1 && ++i2 === 2) {
          break;
        }
        prevR = r2;
        v = u;
        u = r2;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r2.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
      ];
    };
    ShortCurve2.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1, k2 };
    };
    ShortCurve2.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN2(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd2 = y.fromRed().isOdd();
      if (odd && !isOdd2 || !odd && isOdd2)
        y = y.redNeg();
      return this.point(x, y);
    };
    ShortCurve2.prototype.validate = function validate2(point) {
      if (point.inf)
        return true;
      var x = point.x;
      var y = point.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve2.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i2 = 0; i2 < points.length; i2++) {
        var split2 = this._endoSplit(coeffs[i2]);
        var p = points[i2];
        var beta = p._getBeta();
        if (split2.k1.negative) {
          split2.k1.ineg();
          p = p.neg(true);
        }
        if (split2.k2.negative) {
          split2.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i2 * 2] = p;
        npoints[i2 * 2 + 1] = beta;
        ncoeffs[i2 * 2] = split2.k1;
        ncoeffs[i2 * 2 + 1] = split2.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i2 * 2, jacobianResult);
      for (var j = 0; j < i2 * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    function Point2(curve2, x, y, isRed) {
      Base.BasePoint.call(this, curve2, "affine");
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN2(x, 16);
        this.y = new BN2(y, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits2(Point2, Base.BasePoint);
    ShortCurve2.prototype.point = function point(x, y, isRed) {
      return new Point2(this, x, y, isRed);
    };
    ShortCurve2.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point2.fromJSON(this, obj, red);
    };
    Point2.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve2 = this.curve;
        var endoMul = function(p) {
          return curve2.point(p.x.redMul(curve2.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point2.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point2.fromJSON = function fromJSON(curve2, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve2.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve2.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point2.prototype.inspect = function inspect2() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point2.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point2.prototype.add = function add2(p) {
      if (this.inf)
        return p;
      if (p.inf)
        return this;
      if (this.eq(p))
        return this.dbl();
      if (this.neg().eq(p))
        return this.curve.point(null, null);
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point2.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point2.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point2.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point2.prototype.mul = function mul(k) {
      k = new BN2(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
      else
        return this.curve._wnafMul(this, k);
    };
    Point2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point2.prototype.eq = function eq2(p) {
      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };
    Point2.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point2.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint2(curve2, x, y, z) {
      Base.BasePoint.call(this, curve2, "jacobian");
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN2(0);
      } else {
        this.x = new BN2(x, 16);
        this.y = new BN2(y, 16);
        this.z = new BN2(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }
    inherits2(JPoint2, Base.BasePoint);
    ShortCurve2.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint2(this, x, y, z);
    };
    JPoint2.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint2.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint2.prototype.add = function add2(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r2 = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r2.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.mixedAdd = function mixedAdd(p) {
      if (this.isInfinity())
        return p.toJ();
      if (p.isInfinity())
        return this;
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r2 = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r2.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.dblp = function dblp(pow3) {
      if (pow3 === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow3)
        return this.dbl();
      var i2;
      if (this.curve.zeroA || this.curve.threeA) {
        var r2 = this;
        for (i2 = 0; i2 < pow3; i2++)
          r2 = r2.dbl();
        return r2;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i2 = 0; i2 < pow3; i2++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i2 + 1 < pow3)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint2.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint2.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s2 = s2.redIAdd(s2);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t2 = m.redSqr().redISub(s2).redISub(s2);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t2;
        ny = m.redMul(s2.redISub(t2)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f2 = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f2.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s2 = s2.redIAdd(s2);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t2 = m.redSqr().redISub(s2).redISub(s2);
        nx = t2;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s2.redISub(t2)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype._dbl = function _dbl() {
      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m = xx.redAdd(xx).redIAdd(xx);
      var mm = m.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee = e.redSqr();
      var t2 = yyyy.redIAdd(yyyy);
      t2 = t2.redIAdd(t2);
      t2 = t2.redIAdd(t2);
      t2 = t2.redIAdd(t2);
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t2);
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u.redMul(t2.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.mul = function mul(k, kbase) {
      k = new BN2(k, kbase);
      return this.curve._wnafMul(this, k);
    };
    JPoint2.prototype.eq = function eq2(p) {
      if (p.type === "affine")
        return this.eq(p.toJ());
      if (this === p)
        return true;
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint2.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t2 = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t2);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint2.prototype.inspect = function inspect2() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint2.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
    return short;
  }
  var mont;
  var hasRequiredMont;
  function requireMont() {
    if (hasRequiredMont) return mont;
    hasRequiredMont = 1;
    var BN2 = requireBn$2();
    var inherits2 = requireInherits_browser();
    var Base = requireBase$1();
    var utils2 = requireUtils();
    function MontCurve(conf) {
      Base.call(this, "mont", conf);
      this.a = new BN2(conf.a, 16).toRed(this.red);
      this.b = new BN2(conf.b, 16).toRed(this.red);
      this.i4 = new BN2(4).toRed(this.red).redInvm();
      this.two = new BN2(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits2(MontCurve, Base);
    mont = MontCurve;
    MontCurve.prototype.validate = function validate2(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
      return y.redSqr().cmp(rhs) === 0;
    };
    function Point2(curve2, x, z) {
      Base.BasePoint.call(this, curve2, "projective");
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN2(x, 16);
        this.z = new BN2(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits2(Point2, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint(bytes2, enc) {
      return this.point(utils2.toArray(bytes2, enc), 1);
    };
    MontCurve.prototype.point = function point(x, z) {
      return new Point2(this, x, z);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point2.fromJSON(this, obj);
    };
    Point2.prototype.precompute = function precompute() {
    };
    Point2.prototype._encode = function _encode2() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Point2.fromJSON = function fromJSON(curve2, obj) {
      return new Point2(curve2, obj[0], obj[1] || curve2.one);
    };
    Point2.prototype.inspect = function inspect2() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point2.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
    Point2.prototype.dbl = function dbl() {
      var a = this.x.redAdd(this.z);
      var aa = a.redSqr();
      var b = this.x.redSub(this.z);
      var bb = b.redSqr();
      var c = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };
    Point2.prototype.add = function add2() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point2.prototype.diffAdd = function diffAdd(p, diff2) {
      var a = this.x.redAdd(this.z);
      var b = this.x.redSub(this.z);
      var c = p.x.redAdd(p.z);
      var d = p.x.redSub(p.z);
      var da = d.redMul(a);
      var cb = c.redMul(b);
      var nx = diff2.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff2.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point2.prototype.mul = function mul(k) {
      var t2 = k.clone();
      var a = this;
      var b = this.curve.point(null, null);
      var c = this;
      for (var bits = []; t2.cmpn(0) !== 0; t2.iushrn(1))
        bits.push(t2.andln(1));
      for (var i2 = bits.length - 1; i2 >= 0; i2--) {
        if (bits[i2] === 0) {
          a = a.diffAdd(b, c);
          b = b.dbl();
        } else {
          b = a.diffAdd(b, c);
          a = a.dbl();
        }
      }
      return b;
    };
    Point2.prototype.mulAdd = function mulAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point2.prototype.jumlAdd = function jumlAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point2.prototype.eq = function eq2(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    Point2.prototype.normalize = function normalize2() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point2.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    return mont;
  }
  var edwards;
  var hasRequiredEdwards;
  function requireEdwards() {
    if (hasRequiredEdwards) return edwards;
    hasRequiredEdwards = 1;
    var utils2 = requireUtils();
    var BN2 = requireBn$2();
    var inherits2 = requireInherits_browser();
    var Base = requireBase$1();
    var assert2 = utils2.assert;
    function EdwardsCurve(conf) {
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, "edwards", conf);
      this.a = new BN2(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN2(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN2(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert2(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits2(EdwardsCurve, Base);
    edwards = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t2) {
      return this.point(x, y, z, t2);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN2(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd2 = y.fromRed().isOdd();
      if (odd && !isOdd2 || !odd && isOdd2)
        y = y.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN2(y, 16);
      if (!y.red)
        y = y.toRed(this.red);
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());
      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error("invalid point");
        else
          return this.point(this.zero, y);
      }
      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.validate = function validate2(point) {
      if (point.isInfinity())
        return true;
      point.normalize();
      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
      return lhs.cmp(rhs) === 0;
    };
    function Point2(curve2, x, y, z, t2) {
      Base.BasePoint.call(this, curve2, "projective");
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN2(x, 16);
        this.y = new BN2(y, 16);
        this.z = z ? new BN2(z, 16) : this.curve.one;
        this.t = t2 && new BN2(t2, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits2(Point2, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point2.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point(x, y, z, t2) {
      return new Point2(this, x, y, z, t2);
    };
    Point2.fromJSON = function fromJSON(curve2, obj) {
      return new Point2(curve2, obj[0], obj[1], obj[2]);
    };
    Point2.prototype.inspect = function inspect2() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point2.prototype.isInfinity = function isInfinity() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    Point2.prototype._extDbl = function _extDbl() {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      var d = this.curve._mulA(a);
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      var g = d.redAdd(b);
      var f2 = g.redSub(c);
      var h = d.redSub(b);
      var nx = e.redMul(f2);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f2.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point2.prototype._projDbl = function _projDbl() {
      var b = this.x.redAdd(this.y).redSqr();
      var c = this.x.redSqr();
      var d = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        e = this.curve._mulA(c);
        var f2 = e.redAdd(d);
        if (this.zOne) {
          nx = b.redSub(c).redSub(d).redMul(f2.redSub(this.curve.two));
          ny = f2.redMul(e.redSub(d));
          nz = f2.redSqr().redSub(f2).redSub(f2);
        } else {
          h = this.z.redSqr();
          j = f2.redSub(h).redISub(h);
          nx = b.redSub(c).redISub(d).redMul(j);
          ny = f2.redMul(e.redSub(d));
          nz = f2.redMul(j);
        }
      } else {
        e = c.redAdd(d);
        h = this.curve._mulC(this.z).redSqr();
        j = e.redSub(h).redSub(h);
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point2.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };
    Point2.prototype._extAdd = function _extAdd(p) {
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      var d = this.z.redMul(p.z.redAdd(p.z));
      var e = b.redSub(a);
      var f2 = d.redSub(c);
      var g = d.redAdd(c);
      var h = b.redAdd(a);
      var nx = e.redMul(f2);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f2.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point2.prototype._projAdd = function _projAdd(p) {
      var a = this.z.redMul(p.z);
      var b = a.redSqr();
      var c = this.x.redMul(p.x);
      var d = this.y.redMul(p.y);
      var e = this.curve.d.redMul(c).redMul(d);
      var f2 = b.redSub(e);
      var g = b.redAdd(e);
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f2).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        nz = f2.redMul(g);
      } else {
        ny = a.redMul(g).redMul(d.redSub(c));
        nz = this.curve._mulC(f2).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point2.prototype.add = function add2(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };
    Point2.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };
    Point2.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
    };
    Point2.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
    };
    Point2.prototype.normalize = function normalize2() {
      if (this.zOne)
        return this;
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point2.prototype.neg = function neg() {
      return this.curve.point(
        this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg()
      );
    };
    Point2.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    Point2.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };
    Point2.prototype.eq = function eq2(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };
    Point2.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t2 = this.curve.redN.redMul(this.z);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t2);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    Point2.prototype.toP = Point2.prototype.normalize;
    Point2.prototype.mixedAdd = Point2.prototype.add;
    return edwards;
  }
  var hasRequiredCurve;
  function requireCurve() {
    if (hasRequiredCurve) return curve$1;
    hasRequiredCurve = 1;
    (function(exports2) {
      var curve2 = exports2;
      curve2.base = requireBase$1();
      curve2.short = requireShort();
      curve2.mont = requireMont();
      curve2.edwards = requireEdwards();
    })(curve$1);
    return curve$1;
  }
  var curves = {};
  var secp256k1$2;
  var hasRequiredSecp256k1;
  function requireSecp256k1() {
    if (hasRequiredSecp256k1) return secp256k1$2;
    hasRequiredSecp256k1 = 1;
    secp256k1$2 = {
      doubles: {
        step: 4,
        points: [
          [
            "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
            "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
          ],
          [
            "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
            "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
          ],
          [
            "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
            "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
          ],
          [
            "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
            "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
          ],
          [
            "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
            "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
          ],
          [
            "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
            "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
          ],
          [
            "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
            "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
          ],
          [
            "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
            "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
          ],
          [
            "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
            "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
          ],
          [
            "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
            "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
          ],
          [
            "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
            "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
          ],
          [
            "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
            "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
          ],
          [
            "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
            "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
          ],
          [
            "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
            "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
          ],
          [
            "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
            "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
          ],
          [
            "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
            "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
          ],
          [
            "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
            "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
          ],
          [
            "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
            "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
          ],
          [
            "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
            "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
          ],
          [
            "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
            "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
          ],
          [
            "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
            "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
          ],
          [
            "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
            "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
          ],
          [
            "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
            "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
          ],
          [
            "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
            "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
          ],
          [
            "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
            "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
          ],
          [
            "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
            "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
          ],
          [
            "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
            "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
          ],
          [
            "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
            "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
          ],
          [
            "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
            "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
          ],
          [
            "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
            "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
          ],
          [
            "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
            "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
          ],
          [
            "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
            "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
          ],
          [
            "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
            "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
          ],
          [
            "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
            "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
          ],
          [
            "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
            "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
          ],
          [
            "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
            "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
          ],
          [
            "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
            "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
          ],
          [
            "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
            "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
          ],
          [
            "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
            "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
          ],
          [
            "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
            "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
          ],
          [
            "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
            "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
          ],
          [
            "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
            "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
          ],
          [
            "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
            "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
          ],
          [
            "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
            "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
          ],
          [
            "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
            "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
          ],
          [
            "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
            "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
          ],
          [
            "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
            "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
          ],
          [
            "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
            "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
          ],
          [
            "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
            "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
          ],
          [
            "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
            "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
          ],
          [
            "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
            "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
          ],
          [
            "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
            "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
          ],
          [
            "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
            "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
          ],
          [
            "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
            "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
          ],
          [
            "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
            "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
          ],
          [
            "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
            "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
          ],
          [
            "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
            "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
          ],
          [
            "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
            "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
          ],
          [
            "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
            "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
          ],
          [
            "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
            "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
          ],
          [
            "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
            "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
          ],
          [
            "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
            "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
          ],
          [
            "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
            "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
          ],
          [
            "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
            "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
          ],
          [
            "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
            "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
          ],
          [
            "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
          ],
          [
            "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
          ],
          [
            "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
          ],
          [
            "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
          ],
          [
            "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
          ],
          [
            "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
          ],
          [
            "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
            "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
          ],
          [
            "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
            "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
          ],
          [
            "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
            "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
          ],
          [
            "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
            "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
          ],
          [
            "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
            "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
          ],
          [
            "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
            "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
          ],
          [
            "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
            "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
          ],
          [
            "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
            "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
          ],
          [
            "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
            "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
          ],
          [
            "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
            "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
          ],
          [
            "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
            "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
          ],
          [
            "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
            "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
          ],
          [
            "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
            "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
          ],
          [
            "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
            "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
          ],
          [
            "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
            "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
          ],
          [
            "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
            "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
          ],
          [
            "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
            "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
          ],
          [
            "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
            "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
          ],
          [
            "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
            "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
          ],
          [
            "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
            "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
          ],
          [
            "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
            "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
          ],
          [
            "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
            "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
          ],
          [
            "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
            "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
          ],
          [
            "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
            "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
          ],
          [
            "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
            "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
          ],
          [
            "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
            "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
          ],
          [
            "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
            "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
          ],
          [
            "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
            "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
          ],
          [
            "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
            "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
          ],
          [
            "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
            "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
          ],
          [
            "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
            "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
          ],
          [
            "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
            "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
          ],
          [
            "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
            "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
          ],
          [
            "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
            "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
          ],
          [
            "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
            "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
          ],
          [
            "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
            "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
          ],
          [
            "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
            "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
          ],
          [
            "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
            "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
          ],
          [
            "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
            "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
          ],
          [
            "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
            "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
          ],
          [
            "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
            "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
          ],
          [
            "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
            "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
          ],
          [
            "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
            "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
          ],
          [
            "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
            "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
          ],
          [
            "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
            "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
          ],
          [
            "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
            "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
          ],
          [
            "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
            "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
          ],
          [
            "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
            "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
          ],
          [
            "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
            "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
          ],
          [
            "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
            "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
          ],
          [
            "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
            "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
          ],
          [
            "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
            "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
          ],
          [
            "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
            "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
          ],
          [
            "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
            "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
          ],
          [
            "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
            "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
          ],
          [
            "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
            "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
          ],
          [
            "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
            "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
          ],
          [
            "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
            "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
          ],
          [
            "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
            "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
          ],
          [
            "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
            "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
          ],
          [
            "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
            "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
          ],
          [
            "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
            "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
          ],
          [
            "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
            "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
          ],
          [
            "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
            "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
          ],
          [
            "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
            "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
          ],
          [
            "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
            "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
          ],
          [
            "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
            "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
          ],
          [
            "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
            "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
          ],
          [
            "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
            "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
          ],
          [
            "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
            "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
          ],
          [
            "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
            "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
          ],
          [
            "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
            "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
          ],
          [
            "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
            "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
          ],
          [
            "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
            "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
          ],
          [
            "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
            "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
          ],
          [
            "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
            "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
          ],
          [
            "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
            "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
          ],
          [
            "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
            "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
          ],
          [
            "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
            "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
          ],
          [
            "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
            "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
          ],
          [
            "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
            "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
          ],
          [
            "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
            "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
          ],
          [
            "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
            "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
          ],
          [
            "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
            "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
          ],
          [
            "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
            "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
          ],
          [
            "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
            "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
          ],
          [
            "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
            "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
          ],
          [
            "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
            "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
          ],
          [
            "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
            "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
          ],
          [
            "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
            "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
          ],
          [
            "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
            "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
          ],
          [
            "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
            "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
          ],
          [
            "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
            "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
          ],
          [
            "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
            "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
          ],
          [
            "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
            "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
          ],
          [
            "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
            "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
          ],
          [
            "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
            "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
          ],
          [
            "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
            "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
          ],
          [
            "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
            "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
          ],
          [
            "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
            "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
          ],
          [
            "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
            "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
          ],
          [
            "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
            "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
          ],
          [
            "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
            "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
          ],
          [
            "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
            "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
          ],
          [
            "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
            "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
          ],
          [
            "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
            "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
          ],
          [
            "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
            "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
          ],
          [
            "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
            "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
          ],
          [
            "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
            "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
          ],
          [
            "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
            "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
          ],
          [
            "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
            "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
          ],
          [
            "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
            "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
          ],
          [
            "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
            "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
          ],
          [
            "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
            "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
          ],
          [
            "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
            "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
          ],
          [
            "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
            "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
          ],
          [
            "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
            "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
          ],
          [
            "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
            "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
          ],
          [
            "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
            "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
          ],
          [
            "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
            "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
          ]
        ]
      }
    };
    return secp256k1$2;
  }
  var hasRequiredCurves;
  function requireCurves() {
    if (hasRequiredCurves) return curves;
    hasRequiredCurves = 1;
    (function(exports2) {
      var curves2 = exports2;
      var hash2 = hash$3;
      var curve2 = requireCurve();
      var utils2 = requireUtils();
      var assert2 = utils2.assert;
      function PresetCurve(options) {
        if (options.type === "short")
          this.curve = new curve2.short(options);
        else if (options.type === "edwards")
          this.curve = new curve2.edwards(options);
        else
          this.curve = new curve2.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;
        assert2(this.g.validate(), "Invalid curve");
        assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
      }
      curves2.PresetCurve = PresetCurve;
      function defineCurve(name2, options) {
        Object.defineProperty(curves2, name2, {
          configurable: true,
          enumerable: true,
          get: function() {
            var curve3 = new PresetCurve(options);
            Object.defineProperty(curves2, name2, {
              configurable: true,
              enumerable: true,
              value: curve3
            });
            return curve3;
          }
        });
      }
      defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: hash2.sha256,
        gRed: false,
        g: [
          "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
          "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
        ]
      });
      defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: hash2.sha256,
        gRed: false,
        g: [
          "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
          "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
        ]
      });
      defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: hash2.sha256,
        gRed: false,
        g: [
          "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
          "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
        ]
      });
      defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: hash2.sha384,
        gRed: false,
        g: [
          "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
          "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
        ]
      });
      defineCurve("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: hash2.sha512,
        gRed: false,
        g: [
          "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
          "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
        ]
      });
      defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash2.sha256,
        gRed: false,
        g: [
          "9"
        ]
      });
      defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        // -121665 * (121666^(-1)) (mod P)
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash2.sha256,
        gRed: false,
        g: [
          "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
          // 4/5
          "6666666666666666666666666666666666666666666666666666666666666658"
        ]
      });
      var pre;
      try {
        pre = requireSecp256k1();
      } catch (e) {
        pre = void 0;
      }
      defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: hash2.sha256,
        // Precomputed endomorphism
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
          {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
          },
          {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
          }
        ],
        gRed: false,
        g: [
          "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
          "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
          pre
        ]
      });
    })(curves);
    return curves;
  }
  var hmacDrbg;
  var hasRequiredHmacDrbg;
  function requireHmacDrbg() {
    if (hasRequiredHmacDrbg) return hmacDrbg;
    hasRequiredHmacDrbg = 1;
    var hash2 = hash$3;
    var utils2 = requireUtils$1();
    var assert2 = minimalisticAssert$1;
    function HmacDRBG2(options) {
      if (!(this instanceof HmacDRBG2))
        return new HmacDRBG2(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils2.toArray(options.entropy, options.entropyEnc || "hex");
      var nonce = utils2.toArray(options.nonce, options.nonceEnc || "hex");
      var pers = utils2.toArray(options.pers, options.persEnc || "hex");
      assert2(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._init(entropy, nonce, pers);
    }
    hmacDrbg = HmacDRBG2;
    HmacDRBG2.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i2 = 0; i2 < this.V.length; i2++) {
        this.K[i2] = 0;
        this.V[i2] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG2.prototype._hmac = function hmac2() {
      return new hash2.hmac(this.hash, this.K);
    };
    HmacDRBG2.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG2.prototype.reseed = function reseed(entropy, entropyEnc, add2, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add2;
        add2 = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils2.toArray(entropy, entropyEnc);
      add2 = utils2.toArray(add2, addEnc);
      assert2(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._update(entropy.concat(add2 || []));
      this._reseed = 1;
    };
    HmacDRBG2.prototype.generate = function generate(len2, enc, add2, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add2;
        add2 = enc;
        enc = null;
      }
      if (add2) {
        add2 = utils2.toArray(add2, addEnc || "hex");
        this._update(add2);
      }
      var temp = [];
      while (temp.length < len2) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len2);
      this._update(add2);
      this._reseed++;
      return utils2.encode(res, enc);
    };
    return hmacDrbg;
  }
  var key$1;
  var hasRequiredKey$1;
  function requireKey$1() {
    if (hasRequiredKey$1) return key$1;
    hasRequiredKey$1 = 1;
    var BN2 = requireBn$2();
    var utils2 = requireUtils();
    var assert2 = utils2.assert;
    function KeyPair2(ec2, options) {
      this.ec = ec2;
      this.priv = null;
      this.pub = null;
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    key$1 = KeyPair2;
    KeyPair2.fromPublic = function fromPublic(ec2, pub, enc) {
      if (pub instanceof KeyPair2)
        return pub;
      return new KeyPair2(ec2, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair2.fromPrivate = function fromPrivate(ec2, priv, enc) {
      if (priv instanceof KeyPair2)
        return priv;
      return new KeyPair2(ec2, {
        priv,
        privEnc: enc
      });
    };
    KeyPair2.prototype.validate = function validate2() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair2.prototype.getPublic = function getPublic(compact2, enc) {
      if (typeof compact2 === "string") {
        enc = compact2;
        compact2 = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact2);
    };
    KeyPair2.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair2.prototype._importPrivate = function _importPrivate(key2, enc) {
      this.priv = new BN2(key2, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair2.prototype._importPublic = function _importPublic(key2, enc) {
      if (key2.x || key2.y) {
        if (this.ec.curve.type === "mont") {
          assert2(key2.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert2(key2.x && key2.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key2.x, key2.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key2, enc);
    };
    KeyPair2.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert2(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair2.prototype.sign = function sign2(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair2.prototype.verify = function verify(msg, signature2, options) {
      return this.ec.verify(msg, signature2, this, void 0, options);
    };
    KeyPair2.prototype.inspect = function inspect2() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
    return key$1;
  }
  var signature$2;
  var hasRequiredSignature$1;
  function requireSignature$1() {
    if (hasRequiredSignature$1) return signature$2;
    hasRequiredSignature$1 = 1;
    var BN2 = requireBn$2();
    var utils2 = requireUtils();
    var assert2 = utils2.assert;
    function Signature2(options, enc) {
      if (options instanceof Signature2)
        return options;
      if (this._importDER(options, enc))
        return;
      assert2(options.r && options.s, "Signature without r or s");
      this.r = new BN2(options.r, 16);
      this.s = new BN2(options.s, 16);
      if (options.recoveryParam === void 0)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    signature$2 = Signature2;
    function Position2() {
      this.place = 0;
    }
    function getLength2(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 128)) {
        return initial;
      }
      var octetLen = initial & 15;
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
      if (buf[p.place] === 0) {
        return false;
      }
      var val = 0;
      for (var i2 = 0, off = p.place; i2 < octetLen; i2++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
      if (val <= 127) {
        return false;
      }
      p.place = off;
      return val;
    }
    function rmPadding2(buf) {
      var i2 = 0;
      var len2 = buf.length - 1;
      while (!buf[i2] && !(buf[i2 + 1] & 128) && i2 < len2) {
        i2++;
      }
      if (i2 === 0) {
        return buf;
      }
      return buf.slice(i2);
    }
    Signature2.prototype._importDER = function _importDER(data, enc) {
      data = utils2.toArray(data, enc);
      var p = new Position2();
      if (data[p.place++] !== 48) {
        return false;
      }
      var len2 = getLength2(data, p);
      if (len2 === false) {
        return false;
      }
      if (len2 + p.place !== data.length) {
        return false;
      }
      if (data[p.place++] !== 2) {
        return false;
      }
      var rlen = getLength2(data, p);
      if (rlen === false) {
        return false;
      }
      if ((data[p.place] & 128) !== 0) {
        return false;
      }
      var r2 = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 2) {
        return false;
      }
      var slen = getLength2(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      if ((data[p.place] & 128) !== 0) {
        return false;
      }
      var s2 = data.slice(p.place, slen + p.place);
      if (r2[0] === 0) {
        if (r2[1] & 128) {
          r2 = r2.slice(1);
        } else {
          return false;
        }
      }
      if (s2[0] === 0) {
        if (s2[1] & 128) {
          s2 = s2.slice(1);
        } else {
          return false;
        }
      }
      this.r = new BN2(r2);
      this.s = new BN2(s2);
      this.recoveryParam = null;
      return true;
    };
    function constructLength2(arr, len2) {
      if (len2 < 128) {
        arr.push(len2);
        return;
      }
      var octets = 1 + (Math.log(len2) / Math.LN2 >>> 3);
      arr.push(octets | 128);
      while (--octets) {
        arr.push(len2 >>> (octets << 3) & 255);
      }
      arr.push(len2);
    }
    Signature2.prototype.toDER = function toDER(enc) {
      var r2 = this.r.toArray();
      var s2 = this.s.toArray();
      if (r2[0] & 128)
        r2 = [0].concat(r2);
      if (s2[0] & 128)
        s2 = [0].concat(s2);
      r2 = rmPadding2(r2);
      s2 = rmPadding2(s2);
      while (!s2[0] && !(s2[1] & 128)) {
        s2 = s2.slice(1);
      }
      var arr = [2];
      constructLength2(arr, r2.length);
      arr = arr.concat(r2);
      arr.push(2);
      constructLength2(arr, s2.length);
      var backHalf = arr.concat(s2);
      var res = [48];
      constructLength2(res, backHalf.length);
      res = res.concat(backHalf);
      return utils2.encode(res, enc);
    };
    return signature$2;
  }
  var ec;
  var hasRequiredEc;
  function requireEc() {
    if (hasRequiredEc) return ec;
    hasRequiredEc = 1;
    var BN2 = requireBn$2();
    var HmacDRBG2 = requireHmacDrbg();
    var utils2 = requireUtils();
    var curves2 = requireCurves();
    var rand2 = requireBrorand();
    var assert2 = utils2.assert;
    var KeyPair2 = requireKey$1();
    var Signature2 = requireSignature$1();
    function EC2(options) {
      if (!(this instanceof EC2))
        return new EC2(options);
      if (typeof options === "string") {
        assert2(
          Object.prototype.hasOwnProperty.call(curves2, options),
          "Unknown curve " + options
        );
        options = curves2[options];
      }
      if (options instanceof curves2.PresetCurve)
        options = { curve: options };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    ec = EC2;
    EC2.prototype.keyPair = function keyPair(options) {
      return new KeyPair2(this, options);
    };
    EC2.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair2.fromPrivate(this, priv, enc);
    };
    EC2.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair2.fromPublic(this, pub, enc);
    };
    EC2.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
      var drbg = new HmacDRBG2({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand2(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes2 = this.n.byteLength();
      var ns2 = this.n.sub(new BN2(2));
      for (; ; ) {
        var priv = new BN2(drbg.generate(bytes2));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC2.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {
      var byteLength2;
      if (BN2.isBN(msg) || typeof msg === "number") {
        msg = new BN2(msg, 16);
        byteLength2 = msg.byteLength();
      } else if (typeof msg === "object") {
        byteLength2 = msg.length;
        msg = new BN2(msg, 16);
      } else {
        var str = msg.toString();
        byteLength2 = str.length + 1 >>> 1;
        msg = new BN2(str, 16);
      }
      if (typeof bitLength !== "number") {
        bitLength = byteLength2 * 8;
      }
      var delta = bitLength - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC2.prototype.sign = function sign2(msg, key2, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      if (typeof msg !== "string" && typeof msg !== "number" && !BN2.isBN(msg)) {
        assert2(
          typeof msg === "object" && msg && typeof msg.length === "number",
          "Expected message to be an array-like, a hex string, or a BN instance"
        );
        assert2(msg.length >>> 0 === msg.length);
        for (var i2 = 0; i2 < msg.length; i2++) assert2((msg[i2] & 255) === msg[i2]);
      }
      key2 = this.keyFromPrivate(key2, enc);
      msg = this._truncateToN(msg, false, options.msgBitLength);
      assert2(!msg.isNeg(), "Can not sign a negative message");
      var bytes2 = this.n.byteLength();
      var bkey = key2.getPrivate().toArray("be", bytes2);
      var nonce = msg.toArray("be", bytes2);
      assert2(new BN2(nonce).eq(msg), "Can not sign message");
      var drbg = new HmacDRBG2({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new BN2(1));
      for (var iter = 0; ; iter++) {
        var k = options.k ? options.k(iter) : new BN2(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r2 = kpX.umod(this.n);
        if (r2.cmpn(0) === 0)
          continue;
        var s2 = k.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));
        s2 = s2.umod(this.n);
        if (s2.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
        if (options.canonical && s2.cmp(this.nh) > 0) {
          s2 = this.n.sub(s2);
          recoveryParam ^= 1;
        }
        return new Signature2({ r: r2, s: s2, recoveryParam });
      }
    };
    EC2.prototype.verify = function verify(msg, signature2, key2, enc, options) {
      if (!options)
        options = {};
      msg = this._truncateToN(msg, false, options.msgBitLength);
      key2 = this.keyFromPublic(key2, enc);
      signature2 = new Signature2(signature2, "hex");
      var r2 = signature2.r;
      var s2 = signature2.s;
      if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
        return false;
      if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
        return false;
      var sinv = s2.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r2).umod(this.n);
      var p;
      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key2.getPublic(), u2);
        if (p.isInfinity())
          return false;
        return p.getX().umod(this.n).cmp(r2) === 0;
      }
      p = this.g.jmulAdd(u1, key2.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.eqXToP(r2);
    };
    EC2.prototype.recoverPubKey = function(msg, signature2, j, enc) {
      assert2((3 & j) === j, "The recovery param is more than two bits");
      signature2 = new Signature2(signature2, enc);
      var n = this.n;
      var e = new BN2(msg);
      var r2 = signature2.r;
      var s2 = signature2.s;
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
      else
        r2 = this.curve.pointFromX(r2, isYOdd);
      var rInv = signature2.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s22 = s2.mul(rInv).umod(n);
      return this.g.mulAdd(s1, r2, s22);
    };
    EC2.prototype.getKeyRecoveryParam = function(e, signature2, Q, enc) {
      signature2 = new Signature2(signature2, enc);
      if (signature2.recoveryParam !== null)
        return signature2.recoveryParam;
      for (var i2 = 0; i2 < 4; i2++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature2, i2);
        } catch (e2) {
          continue;
        }
        if (Qprime.eq(Q))
          return i2;
      }
      throw new Error("Unable to find valid recovery factor");
    };
    return ec;
  }
  var key;
  var hasRequiredKey;
  function requireKey() {
    if (hasRequiredKey) return key;
    hasRequiredKey = 1;
    var utils2 = requireUtils();
    var assert2 = utils2.assert;
    var parseBytes = utils2.parseBytes;
    var cachedProperty = utils2.cachedProperty;
    function KeyPair2(eddsa2, params) {
      this.eddsa = eddsa2;
      this._secret = parseBytes(params.secret);
      if (eddsa2.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }
    KeyPair2.fromPublic = function fromPublic(eddsa2, pub) {
      if (pub instanceof KeyPair2)
        return pub;
      return new KeyPair2(eddsa2, { pub });
    };
    KeyPair2.fromSecret = function fromSecret(eddsa2, secret) {
      if (secret instanceof KeyPair2)
        return secret;
      return new KeyPair2(eddsa2, { secret });
    };
    KeyPair2.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair2, "pubBytes", function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair2, "pub", function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair2, "privBytes", function privBytes() {
      var eddsa2 = this.eddsa;
      var hash2 = this.hash();
      var lastIx = eddsa2.encodingLength - 1;
      var a = hash2.slice(0, eddsa2.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
      return a;
    });
    cachedProperty(KeyPair2, "priv", function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair2, "hash", function hash2() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair2, "messagePrefix", function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair2.prototype.sign = function sign2(message) {
      assert2(this._secret, "KeyPair can only verify");
      return this.eddsa.sign(message, this);
    };
    KeyPair2.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair2.prototype.getSecret = function getSecret(enc) {
      assert2(this._secret, "KeyPair is public only");
      return utils2.encode(this.secret(), enc);
    };
    KeyPair2.prototype.getPublic = function getPublic(enc) {
      return utils2.encode(this.pubBytes(), enc);
    };
    key = KeyPair2;
    return key;
  }
  var signature$1;
  var hasRequiredSignature;
  function requireSignature() {
    if (hasRequiredSignature) return signature$1;
    hasRequiredSignature = 1;
    var BN2 = requireBn$2();
    var utils2 = requireUtils();
    var assert2 = utils2.assert;
    var cachedProperty = utils2.cachedProperty;
    var parseBytes = utils2.parseBytes;
    function Signature2(eddsa2, sig) {
      this.eddsa = eddsa2;
      if (typeof sig !== "object")
        sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        assert2(sig.length === eddsa2.encodingLength * 2, "Signature has invalid size");
        sig = {
          R: sig.slice(0, eddsa2.encodingLength),
          S: sig.slice(eddsa2.encodingLength)
        };
      }
      assert2(sig.R && sig.S, "Signature without R or S");
      if (eddsa2.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN2)
        this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature2, "S", function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature2, "R", function R2() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature2, "Rencoded", function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature2, "Sencoded", function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature2.prototype.toBytes = function toBytes2() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature2.prototype.toHex = function toHex2() {
      return utils2.encode(this.toBytes(), "hex").toUpperCase();
    };
    signature$1 = Signature2;
    return signature$1;
  }
  var eddsa;
  var hasRequiredEddsa;
  function requireEddsa() {
    if (hasRequiredEddsa) return eddsa;
    hasRequiredEddsa = 1;
    var hash2 = hash$3;
    var curves2 = requireCurves();
    var utils2 = requireUtils();
    var assert2 = utils2.assert;
    var parseBytes = utils2.parseBytes;
    var KeyPair2 = requireKey();
    var Signature2 = requireSignature();
    function EDDSA(curve2) {
      assert2(curve2 === "ed25519", "only tested with ed25519 so far");
      if (!(this instanceof EDDSA))
        return new EDDSA(curve2);
      curve2 = curves2[curve2].curve;
      this.curve = curve2;
      this.g = curve2.g;
      this.g.precompute(curve2.n.bitLength() + 1);
      this.pointClass = curve2.point().constructor;
      this.encodingLength = Math.ceil(curve2.n.bitLength() / 8);
      this.hash = hash2.sha512;
    }
    eddsa = EDDSA;
    EDDSA.prototype.sign = function sign2(message, secret) {
      message = parseBytes(message);
      var key2 = this.keyFromSecret(secret);
      var r2 = this.hashInt(key2.messagePrefix(), message);
      var R2 = this.g.mul(r2);
      var Rencoded = this.encodePoint(R2);
      var s_ = this.hashInt(Rencoded, key2.pubBytes(), message).mul(key2.priv());
      var S = r2.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R2, S, Rencoded });
    };
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
        return false;
      }
      var key2 = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key2.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key2.pub().mul(h));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash3 = this.hash();
      for (var i2 = 0; i2 < arguments.length; i2++)
        hash3.update(arguments[i2]);
      return utils2.intFromLE(hash3.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair2.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair2.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature2)
        return sig;
      return new Signature2(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray("le", this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint(bytes2) {
      bytes2 = utils2.parseBytes(bytes2);
      var lastIx = bytes2.length - 1;
      var normed = bytes2.slice(0, lastIx).concat(bytes2[lastIx] & -129);
      var xIsOdd = (bytes2[lastIx] & 128) !== 0;
      var y = utils2.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray("le", this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes2) {
      return utils2.intFromLE(bytes2);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
    return eddsa;
  }
  var hasRequiredElliptic;
  function requireElliptic() {
    if (hasRequiredElliptic) return elliptic;
    hasRequiredElliptic = 1;
    (function(exports2) {
      var elliptic2 = exports2;
      elliptic2.version = require$$0$4.version;
      elliptic2.utils = requireUtils();
      elliptic2.rand = requireBrorand();
      elliptic2.curve = requireCurve();
      elliptic2.curves = requireCurves();
      elliptic2.ec = requireEc();
      elliptic2.eddsa = requireEddsa();
    })(elliptic);
    return elliptic;
  }
  var bn = { exports: {} };
  bn.exports;
  var hasRequiredBn;
  function requireBn() {
    if (hasRequiredBn) return bn.exports;
    hasRequiredBn = 1;
    (function(module) {
      (function(module2, exports2) {
        function assert2(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits2(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN2(number2, base2, endian) {
          if (BN2.isBN(number2)) {
            return number2;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number2 !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number2 || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN2;
        } else {
          exports2.BN = BN2;
        }
        BN2.BN = BN2;
        BN2.wordSize = 26;
        var Buffer2;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer2 = window.Buffer;
          } else {
            Buffer2 = require$$0$5.Buffer;
          }
        } catch (e) {
        }
        BN2.isBN = function isBN(num) {
          if (num instanceof BN2) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
        };
        BN2.max = function max2(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN2.min = function min2(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN2.prototype._init = function init(number2, base2, endian) {
          if (typeof number2 === "number") {
            return this._initNumber(number2, base2, endian);
          }
          if (typeof number2 === "object") {
            return this._initArray(number2, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number2 = number2.toString().replace(/\s+/g, "");
          var start = 0;
          if (number2[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number2.length) {
            if (base2 === 16) {
              this._parseHex(number2, start, endian);
            } else {
              this._parseBase(number2, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN2.prototype._initNumber = function _initNumber(number2, base2, endian) {
          if (number2 < 0) {
            this.negative = 1;
            number2 = -number2;
          }
          if (number2 < 67108864) {
            this.words = [number2 & 67108863];
            this.length = 1;
          } else if (number2 < 4503599627370496) {
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert2(number2 < 9007199254740992);
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN2.prototype._initArray = function _initArray(number2, base2, endian) {
          assert2(typeof number2.length === "number");
          if (number2.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number2.length / 3);
          this.words = new Array(this.length);
          for (var i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = 0;
          }
          var j, w;
          var off = 0;
          if (endian === "be") {
            for (i2 = number2.length - 1, j = 0; i2 >= 0; i2 -= 3) {
              w = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i2 = 0, j = 0; i2 < number2.length; i2 += 3) {
              w = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          }
          return this._strip();
        };
        function parseHex4Bits(string2, index) {
          var c = string2.charCodeAt(index);
          if (c >= 48 && c <= 57) {
            return c - 48;
          } else if (c >= 65 && c <= 70) {
            return c - 55;
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            assert2(false, "Invalid character in " + string2);
          }
        }
        function parseHexByte2(string2, lowerBound, index) {
          var r2 = parseHex4Bits(string2, index);
          if (index - 1 >= lowerBound) {
            r2 |= parseHex4Bits(string2, index - 1) << 4;
          }
          return r2;
        }
        BN2.prototype._parseHex = function _parseHex(number2, start, endian) {
          this.length = Math.ceil((number2.length - start) / 6);
          this.words = new Array(this.length);
          for (var i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = 0;
          }
          var off = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
              w = parseHexByte2(number2, start, i2) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number2.length - start;
            for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
              w = parseHexByte2(number2, start, i2) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          }
          this._strip();
        };
        function parseBase(str, start, end, mul) {
          var r2 = 0;
          var b = 0;
          var len2 = Math.min(str.length, end);
          for (var i2 = start; i2 < len2; i2++) {
            var c = str.charCodeAt(i2) - 48;
            r2 *= mul;
            if (c >= 49) {
              b = c - 49 + 10;
            } else if (c >= 17) {
              b = c - 17 + 10;
            } else {
              b = c;
            }
            assert2(c >= 0 && b < mul, "Invalid character");
            r2 += b;
          }
          return r2;
        }
        BN2.prototype._parseBase = function _parseBase(number2, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number2.length - start;
          var mod2 = total % limbLen;
          var end = Math.min(total, total - mod2) + start;
          var word = 0;
          for (var i2 = start; i2 < end; i2 += limbLen) {
            word = parseBase(number2, i2, i2 + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod2 !== 0) {
            var pow3 = 1;
            word = parseBase(number2, i2, number2.length, base2);
            for (i2 = 0; i2 < mod2; i2++) {
              pow3 *= base2;
            }
            this.imuln(pow3);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this._strip();
        };
        BN2.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for (var i2 = 0; i2 < this.length; i2++) {
            dest.words[i2] = this.words[i2];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        function move(dest, src) {
          dest.words = src.words;
          dest.length = src.length;
          dest.negative = src.negative;
          dest.red = src.red;
        }
        BN2.prototype._move = function _move(dest) {
          move(dest, this);
        };
        BN2.prototype.clone = function clone2() {
          var r2 = new BN2(null);
          this.copy(r2);
          return r2;
        };
        BN2.prototype._expand = function _expand(size2) {
          while (this.length < size2) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN2.prototype._strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN2.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
          try {
            BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect2;
          } catch (e) {
            BN2.prototype.inspect = inspect2;
          }
        } else {
          BN2.prototype.inspect = inspect2;
        }
        function inspect2() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN2.prototype.toString = function toString2(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i2 = 0; i2 < this.length; i2++) {
              var w = this.words[i2];
              var word = ((w << off | carry) & 16777215).toString(16);
              carry = w >>> 24 - off & 16777215;
              off += 2;
              if (off >= 26) {
                off -= 26;
                i2--;
              }
              if (carry !== 0 || i2 !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r2 = c.modrn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r2.length] + r2 + out;
              } else {
                out = r2 + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert2(false, "Base should be between 2 and 36");
        };
        BN2.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert2(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN2.prototype.toJSON = function toJSON() {
          return this.toString(16, 2);
        };
        if (Buffer2) {
          BN2.prototype.toBuffer = function toBuffer2(endian, length) {
            return this.toArrayLike(Buffer2, endian, length);
          };
        }
        BN2.prototype.toArray = function toArray2(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        var allocate = function allocate2(ArrayType, size2) {
          if (ArrayType.allocUnsafe) {
            return ArrayType.allocUnsafe(size2);
          }
          return new ArrayType(size2);
        };
        BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          this._strip();
          var byteLength2 = this.byteLength();
          var reqLength = length || Math.max(1, byteLength2);
          assert2(byteLength2 <= reqLength, "byte array longer than desired length");
          assert2(reqLength > 0, "Requested array length <= 0");
          var res = allocate(ArrayType, reqLength);
          var postfix = endian === "le" ? "LE" : "BE";
          this["_toArrayLike" + postfix](res, byteLength2);
          return res;
        };
        BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength2) {
          var position = 0;
          var carry = 0;
          for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
            var word = this.words[i2] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) {
              res[position++] = word >> 8 & 255;
            }
            if (position < res.length) {
              res[position++] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position < res.length) {
                res[position++] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position < res.length) {
            res[position++] = carry;
            while (position < res.length) {
              res[position++] = 0;
            }
          }
        };
        BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength2) {
          var position = res.length - 1;
          var carry = 0;
          for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
            var word = this.words[i2] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) {
              res[position--] = word >> 8 & 255;
            }
            if (position >= 0) {
              res[position--] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position >= 0) {
                res[position--] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position >= 0) {
            res[position--] = carry;
            while (position >= 0) {
              res[position--] = 0;
            }
          }
        };
        if (Math.clz32) {
          BN2.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN2.prototype._countBits = function _countBits(w) {
            var t2 = w;
            var r2 = 0;
            if (t2 >= 4096) {
              r2 += 13;
              t2 >>>= 13;
            }
            if (t2 >= 64) {
              r2 += 7;
              t2 >>>= 7;
            }
            if (t2 >= 8) {
              r2 += 4;
              t2 >>>= 4;
            }
            if (t2 >= 2) {
              r2 += 2;
              t2 >>>= 2;
            }
            return r2 + t2;
          };
        }
        BN2.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0) return 26;
          var t2 = w;
          var r2 = 0;
          if ((t2 & 8191) === 0) {
            r2 += 13;
            t2 >>>= 13;
          }
          if ((t2 & 127) === 0) {
            r2 += 7;
            t2 >>>= 7;
          }
          if ((t2 & 15) === 0) {
            r2 += 4;
            t2 >>>= 4;
          }
          if ((t2 & 3) === 0) {
            r2 += 2;
            t2 >>>= 2;
          }
          if ((t2 & 1) === 0) {
            r2++;
          }
          return r2;
        };
        BN2.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
          }
          return w;
        }
        BN2.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r2 = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var b = this._zeroBits(this.words[i2]);
            r2 += b;
            if (b !== 26) break;
          }
          return r2;
        };
        BN2.prototype.byteLength = function byteLength2() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN2.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN2.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN2.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN2.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN2.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN2.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i2 = 0; i2 < num.length; i2++) {
            this.words[i2] = this.words[i2] | num.words[i2];
          }
          return this._strip();
        };
        BN2.prototype.ior = function ior(num) {
          assert2((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN2.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN2.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN2.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i2 = 0; i2 < b.length; i2++) {
            this.words[i2] = this.words[i2] & num.words[i2];
          }
          this.length = b.length;
          return this._strip();
        };
        BN2.prototype.iand = function iand(num) {
          assert2((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN2.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN2.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN2.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i2 = 0; i2 < b.length; i2++) {
            this.words[i2] = a.words[i2] ^ b.words[i2];
          }
          if (this !== a) {
            for (; i2 < a.length; i2++) {
              this.words[i2] = a.words[i2];
            }
          }
          this.length = a.length;
          return this._strip();
        };
        BN2.prototype.ixor = function ixor(num) {
          assert2((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN2.prototype.xor = function xor2(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN2.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN2.prototype.inotn = function inotn(width) {
          assert2(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i2 = 0; i2 < bytesNeeded; i2++) {
            this.words[i2] = ~this.words[i2] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
          }
          return this._strip();
        };
        BN2.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN2.prototype.setn = function setn(bit, val) {
          assert2(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | 1 << wbit;
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this._strip();
        };
        BN2.prototype.iadd = function iadd(num) {
          var r2;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r2 = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r2 = this.isub(num);
            num.negative = 1;
            return r2._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i2 = 0; i2 < b.length; i2++) {
            r2 = (a.words[i2] | 0) + (b.words[i2] | 0) + carry;
            this.words[i2] = r2 & 67108863;
            carry = r2 >>> 26;
          }
          for (; carry !== 0 && i2 < a.length; i2++) {
            r2 = (a.words[i2] | 0) + carry;
            this.words[i2] = r2 & 67108863;
            carry = r2 >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i2 < a.length; i2++) {
              this.words[i2] = a.words[i2];
            }
          }
          return this;
        };
        BN2.prototype.add = function add2(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN2.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r2 = this.iadd(num);
            num.negative = 1;
            return r2._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp2 = this.cmp(num);
          if (cmp2 === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp2 > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i2 = 0; i2 < b.length; i2++) {
            r2 = (a.words[i2] | 0) - (b.words[i2] | 0) + carry;
            carry = r2 >> 26;
            this.words[i2] = r2 & 67108863;
          }
          for (; carry !== 0 && i2 < a.length; i2++) {
            r2 = (a.words[i2] | 0) + carry;
            carry = r2 >> 26;
            this.words[i2] = r2 & 67108863;
          }
          if (carry === 0 && i2 < a.length && a !== this) {
            for (; i2 < a.length; i2++) {
              this.words[i2] = a.words[i2];
            }
          }
          this.length = Math.max(this.length, i2);
          if (a !== this) {
            this.negative = 1;
          }
          return this._strip();
        };
        BN2.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len2 = self2.length + num.length | 0;
          out.length = len2;
          len2 = len2 - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r2 = a * b;
          var lo = r2 & 67108863;
          var carry = r2 / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len2; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i2 = k - j | 0;
              a = self2.words[i2] | 0;
              b = num.words[j] | 0;
              r2 = a * b + rword;
              ncarry += r2 / 67108864 | 0;
              rword = r2 & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out._strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i2 = k - j;
              var a = self2.words[i2] | 0;
              var b = num.words[j] | 0;
              var r2 = a * b;
              var lo = r2 & 67108863;
              ncarry = ncarry + (r2 / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out._strip();
        }
        function jumboMulTo(self2, num, out) {
          return bigMulTo(self2, num, out);
        }
        BN2.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len2 = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len2 < 63) {
            res = smallMulTo(this, num, out);
          } else if (len2 < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        BN2.prototype.mul = function mul(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN2.prototype.mulf = function mulf(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN2.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN2.prototype.imuln = function imuln(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert2(typeof num === "number");
          assert2(num < 67108864);
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w = (this.words[i2] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i2] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i2] = carry;
            this.length++;
          }
          return isNegNum ? this.ineg() : this;
        };
        BN2.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN2.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN2.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN2.prototype.pow = function pow3(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN2(1);
          var res = this;
          for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
            if (w[i2] !== 0) break;
          }
          if (++i2 < w.length) {
            for (var q = res.sqr(); i2 < w.length; i2++, q = q.sqr()) {
              if (w[i2] === 0) continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN2.prototype.iushln = function iushln(bits) {
          assert2(typeof bits === "number" && bits >= 0);
          var r2 = bits % 26;
          var s2 = (bits - r2) / 26;
          var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
          var i2;
          if (r2 !== 0) {
            var carry = 0;
            for (i2 = 0; i2 < this.length; i2++) {
              var newCarry = this.words[i2] & carryMask;
              var c = (this.words[i2] | 0) - newCarry << r2;
              this.words[i2] = c | carry;
              carry = newCarry >>> 26 - r2;
            }
            if (carry) {
              this.words[i2] = carry;
              this.length++;
            }
          }
          if (s2 !== 0) {
            for (i2 = this.length - 1; i2 >= 0; i2--) {
              this.words[i2 + s2] = this.words[i2];
            }
            for (i2 = 0; i2 < s2; i2++) {
              this.words[i2] = 0;
            }
            this.length += s2;
          }
          return this._strip();
        };
        BN2.prototype.ishln = function ishln(bits) {
          assert2(this.negative === 0);
          return this.iushln(bits);
        };
        BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert2(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r2 = bits % 26;
          var s2 = Math.min((bits - r2) / 26, this.length);
          var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
          var maskedWords = extended;
          h -= s2;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i2 = 0; i2 < s2; i2++) {
              maskedWords.words[i2] = this.words[i2];
            }
            maskedWords.length = s2;
          }
          if (s2 === 0) ;
          else if (this.length > s2) {
            this.length -= s2;
            for (i2 = 0; i2 < this.length; i2++) {
              this.words[i2] = this.words[i2 + s2];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h); i2--) {
            var word = this.words[i2] | 0;
            this.words[i2] = carry << 26 - r2 | word >>> r2;
            carry = word & mask2;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this._strip();
        };
        BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert2(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN2.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN2.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN2.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN2.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN2.prototype.testn = function testn(bit) {
          assert2(typeof bit === "number" && bit >= 0);
          var r2 = bit % 26;
          var s2 = (bit - r2) / 26;
          var q = 1 << r2;
          if (this.length <= s2) return false;
          var w = this.words[s2];
          return !!(w & q);
        };
        BN2.prototype.imaskn = function imaskn(bits) {
          assert2(typeof bits === "number" && bits >= 0);
          var r2 = bits % 26;
          var s2 = (bits - r2) / 26;
          assert2(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s2) {
            return this;
          }
          if (r2 !== 0) {
            s2++;
          }
          this.length = Math.min(s2, this.length);
          if (r2 !== 0) {
            var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
            this.words[this.length - 1] &= mask2;
          }
          return this._strip();
        };
        BN2.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN2.prototype.iaddn = function iaddn(num) {
          assert2(typeof num === "number");
          assert2(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN2.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
            this.words[i2] -= 67108864;
            if (i2 === this.length - 1) {
              this.words[i2 + 1] = 1;
            } else {
              this.words[i2 + 1]++;
            }
          }
          this.length = Math.max(this.length, i2 + 1);
          return this;
        };
        BN2.prototype.isubn = function isubn(num) {
          assert2(typeof num === "number");
          assert2(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
              this.words[i2] += 67108864;
              this.words[i2 + 1] -= 1;
            }
          }
          return this._strip();
        };
        BN2.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN2.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN2.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN2.prototype.abs = function abs2() {
          return this.clone().iabs();
        };
        BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len2 = num.length + shift;
          var i2;
          this._expand(len2);
          var w;
          var carry = 0;
          for (i2 = 0; i2 < num.length; i2++) {
            w = (this.words[i2 + shift] | 0) + carry;
            var right = (num.words[i2] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i2 + shift] = w & 67108863;
          }
          for (; i2 < this.length - shift; i2++) {
            w = (this.words[i2 + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i2 + shift] = w & 67108863;
          }
          if (carry === 0) return this._strip();
          assert2(carry === -1);
          carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            w = -(this.words[i2] | 0) + carry;
            carry = w >> 26;
            this.words[i2] = w & 67108863;
          }
          this.negative = 1;
          return this._strip();
        };
        BN2.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN2(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i2 = 0; i2 < q.length; i2++) {
              q.words[i2] = 0;
            }
          }
          var diff2 = a.clone()._ishlnsubmul(b, 1, m);
          if (diff2.negative === 0) {
            a = diff2;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q._strip();
          }
          a._strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN2.prototype.divmod = function divmod(num, mode, positive) {
          assert2(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN2(0),
              mod: new BN2(0)
            };
          }
          var div, mod2, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.iadd(num);
              }
            }
            return {
              div,
              mod: mod2
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.isub(num);
              }
            }
            return {
              div: res.div,
              mod: mod2
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN2(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN2(this.modrn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN2(this.modrn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN2.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN2.prototype.mod = function mod2(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN2.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN2.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp2 = mod2.cmp(half);
          if (cmp2 < 0 || r2 === 1 && cmp2 === 0) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN2.prototype.modrn = function modrn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert2(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i2 = this.length - 1; i2 >= 0; i2--) {
            acc = (p * acc + (this.words[i2] | 0)) % num;
          }
          return isNegNum ? -acc : acc;
        };
        BN2.prototype.modn = function modn(num) {
          return this.modrn(num);
        };
        BN2.prototype.idivn = function idivn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert2(num <= 67108863);
          var carry = 0;
          for (var i2 = this.length - 1; i2 >= 0; i2--) {
            var w = (this.words[i2] | 0) + carry * 67108864;
            this.words[i2] = w / num | 0;
            carry = w % num;
          }
          this._strip();
          return isNegNum ? this.ineg() : this;
        };
        BN2.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN2.prototype.egcd = function egcd(p) {
          assert2(p.negative === 0);
          assert2(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN2(1);
          var B = new BN2(0);
          var C = new BN2(0);
          var D = new BN2(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i2 = 0, im = 1; (x.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
            if (i2 > 0) {
              x.iushrn(i2);
              while (i2-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN2.prototype._invmp = function _invmp(p) {
          assert2(p.negative === 0);
          assert2(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN2(1);
          var x2 = new BN2(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
            if (i2 > 0) {
              a.iushrn(i2);
              while (i2-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN2.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r2 = a.cmp(b);
            if (r2 < 0) {
              var t2 = a;
              a = b;
              b = t2;
            } else if (r2 === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN2.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN2.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN2.prototype.isOdd = function isOdd2() {
          return (this.words[0] & 1) === 1;
        };
        BN2.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN2.prototype.bincn = function bincn(bit) {
          assert2(typeof bit === "number");
          var r2 = bit % 26;
          var s2 = (bit - r2) / 26;
          var q = 1 << r2;
          if (this.length <= s2) {
            this._expand(s2 + 1);
            this.words[s2] |= q;
            return this;
          }
          var carry = q;
          for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
            var w = this.words[i2] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i2] = w;
          }
          if (carry !== 0) {
            this.words[i2] = carry;
            this.length++;
          }
          return this;
        };
        BN2.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN2.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this._strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert2(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN2.prototype.cmp = function cmp2(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN2.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i2 = this.length - 1; i2 >= 0; i2--) {
            var a = this.words[i2] | 0;
            var b = num.words[i2] | 0;
            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN2.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN2.prototype.gt = function gt2(num) {
          return this.cmp(num) === 1;
        };
        BN2.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN2.prototype.gte = function gte2(num) {
          return this.cmp(num) >= 0;
        };
        BN2.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN2.prototype.lt = function lt2(num) {
          return this.cmp(num) === -1;
        };
        BN2.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN2.prototype.lte = function lte2(num) {
          return this.cmp(num) <= 0;
        };
        BN2.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN2.prototype.eq = function eq2(num) {
          return this.cmp(num) === 0;
        };
        BN2.red = function red(num) {
          return new Red(num);
        };
        BN2.prototype.toRed = function toRed(ctx) {
          assert2(!this.red, "Already a number in reduction context");
          assert2(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN2.prototype.fromRed = function fromRed() {
          assert2(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN2.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN2.prototype.forceRed = function forceRed(ctx) {
          assert2(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN2.prototype.redAdd = function redAdd(num) {
          assert2(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN2.prototype.redIAdd = function redIAdd(num) {
          assert2(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN2.prototype.redSub = function redSub(num) {
          assert2(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN2.prototype.redISub = function redISub(num) {
          assert2(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN2.prototype.redShl = function redShl(num) {
          assert2(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN2.prototype.redMul = function redMul(num) {
          assert2(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN2.prototype.redIMul = function redIMul(num) {
          assert2(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN2.prototype.redSqr = function redSqr() {
          assert2(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN2.prototype.redISqr = function redISqr() {
          assert2(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN2.prototype.redSqrt = function redSqrt() {
          assert2(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN2.prototype.redInvm = function redInvm() {
          assert2(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN2.prototype.redNeg = function redNeg() {
          assert2(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN2.prototype.redPow = function redPow(num) {
          assert2(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name2, p) {
          this.name = name2;
          this.p = new BN2(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN2(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN2(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r2 = num;
          var rlen;
          do {
            this.split(r2, this.tmp);
            r2 = this.imulK(r2);
            r2 = r2.iadd(this.tmp);
            rlen = r2.bitLength();
          } while (rlen > this.n);
          var cmp2 = rlen < this.n ? -1 : r2.ucmp(this.p);
          if (cmp2 === 0) {
            r2.words[0] = 0;
            r2.length = 1;
          } else if (cmp2 > 0) {
            r2.isub(this.p);
          } else {
            if (r2.strip !== void 0) {
              r2.strip();
            } else {
              r2._strip();
            }
          }
          return r2;
        };
        MPrime.prototype.split = function split2(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits2(K256, MPrime);
        K256.prototype.split = function split2(input, output2) {
          var mask2 = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i2 = 0; i2 < outLen; i2++) {
            output2.words[i2] = input.words[i2];
          }
          output2.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output2.words[output2.length++] = prev & mask2;
          for (i2 = 10; i2 < input.length; i2++) {
            var next = input.words[i2] | 0;
            input.words[i2 - 10] = (next & mask2) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i2 - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i2 = 0; i2 < num.length; i2++) {
            var w = num.words[i2] | 0;
            lo += w * 977;
            num.words[i2] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits2(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits2(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits2(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i2 = 0; i2 < num.length; i2++) {
            var hi = (num.words[i2] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i2] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN2._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN2._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert2(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert2(a.negative === 0, "red works only with positives");
          assert2(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert2((a.negative | b.negative) === 0, "red works only with positives");
          assert2(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          move(a, a.umod(this.m)._forceRed(this));
          return a;
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add2(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert2(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow3 = this.m.add(new BN2(1)).iushrn(2);
            return this.pow(a, pow3);
          }
          var q = this.m.subn(1);
          var s2 = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s2++;
            q.iushrn(1);
          }
          assert2(!q.isZero());
          var one = new BN2(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN2(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r2 = this.pow(a, q.addn(1).iushrn(1));
          var t2 = this.pow(a, q);
          var m = s2;
          while (t2.cmp(one) !== 0) {
            var tmp = t2;
            for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
              tmp = tmp.redSqr();
            }
            assert2(i2 < m);
            var b = this.pow(c, new BN2(1).iushln(m - i2 - 1));
            r2 = r2.redMul(b);
            c = b.redSqr();
            t2 = t2.redMul(c);
            m = i2;
          }
          return r2;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow3(a, num) {
          if (num.isZero()) return new BN2(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN2(1).toRed(this);
          wnd[1] = a;
          for (var i2 = 2; i2 < wnd.length; i2++) {
            wnd[i2] = this.mul(wnd[i2 - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i2 = num.length - 1; i2 >= 0; i2--) {
            var word = num.words[i2];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i2 !== 0 || j !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r2 = num.umod(this.m);
          return r2 === num ? r2.clone() : r2;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN2.mont = function mont2(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN2(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits2(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r2 = this.imod(num.mul(this.rinv));
          r2.red = null;
          return r2;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t2 = a.imul(b);
          var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t2.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
          var t2 = a.mul(b);
          var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t2.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(module, commonjsGlobal);
    })(bn);
    return bn.exports;
  }
  var asn1$1 = {};
  var asn1 = {};
  var api$1 = {};
  var vmBrowserify = {};
  var hasRequiredVmBrowserify;
  function requireVmBrowserify() {
    if (hasRequiredVmBrowserify) return vmBrowserify;
    hasRequiredVmBrowserify = 1;
    (function(exports) {
      var indexOf = function(xs, item) {
        if (xs.indexOf) return xs.indexOf(item);
        else for (var i2 = 0; i2 < xs.length; i2++) {
          if (xs[i2] === item) return i2;
        }
        return -1;
      };
      var Object_keys = function(obj) {
        if (Object.keys) return Object.keys(obj);
        else {
          var res = [];
          for (var key2 in obj) res.push(key2);
          return res;
        }
      };
      var forEach = function(xs, fn) {
        if (xs.forEach) return xs.forEach(fn);
        else for (var i2 = 0; i2 < xs.length; i2++) {
          fn(xs[i2], i2, xs);
        }
      };
      var defineProp = function() {
        try {
          Object.defineProperty({}, "_", {});
          return function(obj, name2, value) {
            Object.defineProperty(obj, name2, {
              writable: true,
              enumerable: false,
              configurable: true,
              value
            });
          };
        } catch (e) {
          return function(obj, name2, value) {
            obj[name2] = value;
          };
        }
      }();
      var globals = [
        "Array",
        "Boolean",
        "Date",
        "Error",
        "EvalError",
        "Function",
        "Infinity",
        "JSON",
        "Math",
        "NaN",
        "Number",
        "Object",
        "RangeError",
        "ReferenceError",
        "RegExp",
        "String",
        "SyntaxError",
        "TypeError",
        "URIError",
        "decodeURI",
        "decodeURIComponent",
        "encodeURI",
        "encodeURIComponent",
        "escape",
        "eval",
        "isFinite",
        "isNaN",
        "parseFloat",
        "parseInt",
        "undefined",
        "unescape"
      ];
      function Context() {
      }
      Context.prototype = {};
      var Script = exports.Script = function NodeScript(code2) {
        if (!(this instanceof Script)) return new Script(code2);
        this.code = code2;
      };
      Script.prototype.runInContext = function(context) {
        if (!(context instanceof Context)) {
          throw new TypeError("needs a 'context' argument.");
        }
        var iframe = document.createElement("iframe");
        if (!iframe.style) iframe.style = {};
        iframe.style.display = "none";
        document.body.appendChild(iframe);
        var win = iframe.contentWindow;
        var wEval = win.eval, wExecScript = win.execScript;
        if (!wEval && wExecScript) {
          wExecScript.call(win, "null");
          wEval = win.eval;
        }
        forEach(Object_keys(context), function(key2) {
          win[key2] = context[key2];
        });
        forEach(globals, function(key2) {
          if (context[key2]) {
            win[key2] = context[key2];
          }
        });
        var winKeys = Object_keys(win);
        var res = wEval.call(win, this.code);
        forEach(Object_keys(win), function(key2) {
          if (key2 in context || indexOf(winKeys, key2) === -1) {
            context[key2] = win[key2];
          }
        });
        forEach(globals, function(key2) {
          if (!(key2 in context)) {
            defineProp(context, key2, win[key2]);
          }
        });
        document.body.removeChild(iframe);
        return res;
      };
      Script.prototype.runInThisContext = function() {
        return eval(this.code);
      };
      Script.prototype.runInNewContext = function(context) {
        var ctx = Script.createContext(context);
        var res = this.runInContext(ctx);
        if (context) {
          forEach(Object_keys(ctx), function(key2) {
            context[key2] = ctx[key2];
          });
        }
        return res;
      };
      forEach(Object_keys(Script.prototype), function(name2) {
        exports[name2] = Script[name2] = function(code2) {
          var s2 = Script(code2);
          return s2[name2].apply(s2, [].slice.call(arguments, 1));
        };
      });
      exports.isContext = function(context) {
        return context instanceof Context;
      };
      exports.createScript = function(code2) {
        return exports.Script(code2);
      };
      exports.createContext = Script.createContext = function(context) {
        var copy = new Context();
        if (typeof context === "object") {
          forEach(Object_keys(context), function(key2) {
            copy[key2] = context[key2];
          });
        }
        return copy;
      };
    })(vmBrowserify);
    return vmBrowserify;
  }
  var hasRequiredApi;
  function requireApi() {
    if (hasRequiredApi) return api$1;
    hasRequiredApi = 1;
    (function(exports2) {
      var asn12 = requireAsn1$1();
      var inherits2 = requireInherits_browser();
      var api2 = exports2;
      api2.define = function define(name2, body) {
        return new Entity(name2, body);
      };
      function Entity(name2, body) {
        this.name = name2;
        this.body = body;
        this.decoders = {};
        this.encoders = {};
      }
      Entity.prototype._createNamed = function createNamed(base2) {
        var named;
        try {
          named = requireVmBrowserify().runInThisContext(
            "(function " + this.name + "(entity) {\n  this._initNamed(entity);\n})"
          );
        } catch (e) {
          named = function(entity) {
            this._initNamed(entity);
          };
        }
        inherits2(named, base2);
        named.prototype._initNamed = function initnamed(entity) {
          base2.call(this, entity);
        };
        return new named(this);
      };
      Entity.prototype._getDecoder = function _getDecoder(enc) {
        enc = enc || "der";
        if (!this.decoders.hasOwnProperty(enc))
          this.decoders[enc] = this._createNamed(asn12.decoders[enc]);
        return this.decoders[enc];
      };
      Entity.prototype.decode = function decode2(data, enc, options) {
        return this._getDecoder(enc).decode(data, options);
      };
      Entity.prototype._getEncoder = function _getEncoder(enc) {
        enc = enc || "der";
        if (!this.encoders.hasOwnProperty(enc))
          this.encoders[enc] = this._createNamed(asn12.encoders[enc]);
        return this.encoders[enc];
      };
      Entity.prototype.encode = function encode2(data, enc, reporter2) {
        return this._getEncoder(enc).encode(data, reporter2);
      };
    })(api$1);
    return api$1;
  }
  var base = {};
  var reporter = {};
  var hasRequiredReporter;
  function requireReporter() {
    if (hasRequiredReporter) return reporter;
    hasRequiredReporter = 1;
    var inherits2 = requireInherits_browser();
    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
      };
    }
    reporter.Reporter = Reporter;
    Reporter.prototype.isError = function isError2(obj) {
      return obj instanceof ReporterError;
    };
    Reporter.prototype.save = function save() {
      var state2 = this._reporterState;
      return { obj: state2.obj, pathLen: state2.path.length };
    };
    Reporter.prototype.restore = function restore(data) {
      var state2 = this._reporterState;
      state2.obj = data.obj;
      state2.path = state2.path.slice(0, data.pathLen);
    };
    Reporter.prototype.enterKey = function enterKey(key2) {
      return this._reporterState.path.push(key2);
    };
    Reporter.prototype.exitKey = function exitKey(index) {
      var state2 = this._reporterState;
      state2.path = state2.path.slice(0, index - 1);
    };
    Reporter.prototype.leaveKey = function leaveKey(index, key2, value) {
      var state2 = this._reporterState;
      this.exitKey(index);
      if (state2.obj !== null)
        state2.obj[key2] = value;
    };
    Reporter.prototype.path = function path() {
      return this._reporterState.path.join("/");
    };
    Reporter.prototype.enterObject = function enterObject() {
      var state2 = this._reporterState;
      var prev = state2.obj;
      state2.obj = {};
      return prev;
    };
    Reporter.prototype.leaveObject = function leaveObject(prev) {
      var state2 = this._reporterState;
      var now = state2.obj;
      state2.obj = prev;
      return now;
    };
    Reporter.prototype.error = function error2(msg) {
      var err;
      var state2 = this._reporterState;
      var inherited = msg instanceof ReporterError;
      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(state2.path.map(function(elem) {
          return "[" + JSON.stringify(elem) + "]";
        }).join(""), msg.message || msg, msg.stack);
      }
      if (!state2.options.partial)
        throw err;
      if (!inherited)
        state2.errors.push(err);
      return err;
    };
    Reporter.prototype.wrapResult = function wrapResult(result) {
      var state2 = this._reporterState;
      if (!state2.options.partial)
        return result;
      return {
        result: this.isError(result) ? null : result,
        errors: state2.errors
      };
    };
    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    }
    inherits2(ReporterError, Error);
    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + " at: " + (this.path || "(shallow)");
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, ReporterError);
      if (!this.stack) {
        try {
          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
      }
      return this;
    };
    return reporter;
  }
  var buffer$1 = {};
  var hasRequiredBuffer;
  function requireBuffer() {
    if (hasRequiredBuffer) return buffer$1;
    hasRequiredBuffer = 1;
    var inherits2 = requireInherits_browser();
    var Reporter = requireBase().Reporter;
    var Buffer2 = require$$0$5.Buffer;
    function DecoderBuffer(base2, options) {
      Reporter.call(this, options);
      if (!Buffer2.isBuffer(base2)) {
        this.error("Input not Buffer");
        return;
      }
      this.base = base2;
      this.offset = 0;
      this.length = base2.length;
    }
    inherits2(DecoderBuffer, Reporter);
    buffer$1.DecoderBuffer = DecoderBuffer;
    DecoderBuffer.prototype.save = function save() {
      return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
    };
    DecoderBuffer.prototype.restore = function restore(save) {
      var res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;
      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);
      return res;
    };
    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };
    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length)
        return this.base.readUInt8(this.offset++, true);
      else
        return this.error(fail || "DecoderBuffer overrun");
    };
    DecoderBuffer.prototype.skip = function skip(bytes2, fail) {
      if (!(this.offset + bytes2 <= this.length))
        return this.error(fail || "DecoderBuffer overrun");
      var res = new DecoderBuffer(this.base);
      res._reporterState = this._reporterState;
      res.offset = this.offset;
      res.length = this.offset + bytes2;
      this.offset += bytes2;
      return res;
    };
    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };
    function EncoderBuffer(value, reporter2) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
          if (!(item instanceof EncoderBuffer))
            item = new EncoderBuffer(item, reporter2);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === "number") {
        if (!(0 <= value && value <= 255))
          return reporter2.error("non-byte EncoderBuffer value");
        this.value = value;
        this.length = 1;
      } else if (typeof value === "string") {
        this.value = value;
        this.length = Buffer2.byteLength(value);
      } else if (Buffer2.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter2.error("Unsupported type: " + typeof value);
      }
    }
    buffer$1.EncoderBuffer = EncoderBuffer;
    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out)
        out = new Buffer2(this.length);
      if (!offset)
        offset = 0;
      if (this.length === 0)
        return out;
      if (Array.isArray(this.value)) {
        this.value.forEach(function(item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === "number")
          out[offset] = this.value;
        else if (typeof this.value === "string")
          out.write(this.value, offset);
        else if (Buffer2.isBuffer(this.value))
          this.value.copy(out, offset);
        offset += this.length;
      }
      return out;
    };
    return buffer$1;
  }
  var node;
  var hasRequiredNode;
  function requireNode() {
    if (hasRequiredNode) return node;
    hasRequiredNode = 1;
    var Reporter = requireBase().Reporter;
    var EncoderBuffer = requireBase().EncoderBuffer;
    var DecoderBuffer = requireBase().DecoderBuffer;
    var assert2 = minimalisticAssert$1;
    var tags = [
      "seq",
      "seqof",
      "set",
      "setof",
      "objid",
      "bool",
      "gentime",
      "utctime",
      "null_",
      "enum",
      "int",
      "objDesc",
      "bitstr",
      "bmpstr",
      "charstr",
      "genstr",
      "graphstr",
      "ia5str",
      "iso646str",
      "numstr",
      "octstr",
      "printstr",
      "t61str",
      "unistr",
      "utf8str",
      "videostr"
    ];
    var methods = [
      "key",
      "obj",
      "use",
      "optional",
      "explicit",
      "implicit",
      "def",
      "choice",
      "any",
      "contains"
    ].concat(tags);
    var overrided = [
      "_peekTag",
      "_decodeTag",
      "_use",
      "_decodeStr",
      "_decodeObjid",
      "_decodeTime",
      "_decodeNull",
      "_decodeInt",
      "_decodeBool",
      "_decodeList",
      "_encodeComposite",
      "_encodeStr",
      "_encodeObjid",
      "_encodeTime",
      "_encodeNull",
      "_encodeInt",
      "_encodeBool"
    ];
    function Node(enc, parent) {
      var state2 = {};
      this._baseState = state2;
      state2.enc = enc;
      state2.parent = parent || null;
      state2.children = null;
      state2.tag = null;
      state2.args = null;
      state2.reverseArgs = null;
      state2.choice = null;
      state2.optional = false;
      state2.any = false;
      state2.obj = false;
      state2.use = null;
      state2.useDecoder = null;
      state2.key = null;
      state2["default"] = null;
      state2.explicit = null;
      state2.implicit = null;
      state2.contains = null;
      if (!state2.parent) {
        state2.children = [];
        this._wrap();
      }
    }
    node = Node;
    var stateProps = [
      "enc",
      "parent",
      "children",
      "tag",
      "args",
      "reverseArgs",
      "choice",
      "optional",
      "any",
      "obj",
      "use",
      "alteredUse",
      "key",
      "default",
      "explicit",
      "implicit",
      "contains"
    ];
    Node.prototype.clone = function clone2() {
      var state2 = this._baseState;
      var cstate = {};
      stateProps.forEach(function(prop) {
        cstate[prop] = state2[prop];
      });
      var res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };
    Node.prototype._wrap = function wrap() {
      var state2 = this._baseState;
      methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
          var clone2 = new this.constructor(this);
          state2.children.push(clone2);
          return clone2[method].apply(clone2, arguments);
        };
      }, this);
    };
    Node.prototype._init = function init(body) {
      var state2 = this._baseState;
      assert2(state2.parent === null);
      body.call(this);
      state2.children = state2.children.filter(function(child) {
        return child._baseState.parent === this;
      }, this);
      assert2.equal(state2.children.length, 1, "Root node can have only one child");
    };
    Node.prototype._useArgs = function useArgs(args) {
      var state2 = this._baseState;
      var children = args.filter(function(arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
      }, this);
      if (children.length !== 0) {
        assert2(state2.children === null);
        state2.children = children;
        children.forEach(function(child) {
          child._baseState.parent = this;
        }, this);
      }
      if (args.length !== 0) {
        assert2(state2.args === null);
        state2.args = args;
        state2.reverseArgs = args.map(function(arg) {
          if (typeof arg !== "object" || arg.constructor !== Object)
            return arg;
          var res = {};
          Object.keys(arg).forEach(function(key2) {
            if (key2 == (key2 | 0))
              key2 |= 0;
            var value = arg[key2];
            res[value] = key2;
          });
          return res;
        });
      }
    };
    overrided.forEach(function(method) {
      Node.prototype[method] = function _overrided() {
        var state2 = this._baseState;
        throw new Error(method + " not implemented for encoding: " + state2.enc);
      };
    });
    tags.forEach(function(tag) {
      Node.prototype[tag] = function _tagMethod() {
        var state2 = this._baseState;
        var args = Array.prototype.slice.call(arguments);
        assert2(state2.tag === null);
        state2.tag = tag;
        this._useArgs(args);
        return this;
      };
    });
    Node.prototype.use = function use(item) {
      assert2(item);
      var state2 = this._baseState;
      assert2(state2.use === null);
      state2.use = item;
      return this;
    };
    Node.prototype.optional = function optional() {
      var state2 = this._baseState;
      state2.optional = true;
      return this;
    };
    Node.prototype.def = function def(val) {
      var state2 = this._baseState;
      assert2(state2["default"] === null);
      state2["default"] = val;
      state2.optional = true;
      return this;
    };
    Node.prototype.explicit = function explicit(num) {
      var state2 = this._baseState;
      assert2(state2.explicit === null && state2.implicit === null);
      state2.explicit = num;
      return this;
    };
    Node.prototype.implicit = function implicit(num) {
      var state2 = this._baseState;
      assert2(state2.explicit === null && state2.implicit === null);
      state2.implicit = num;
      return this;
    };
    Node.prototype.obj = function obj() {
      var state2 = this._baseState;
      var args = Array.prototype.slice.call(arguments);
      state2.obj = true;
      if (args.length !== 0)
        this._useArgs(args);
      return this;
    };
    Node.prototype.key = function key2(newKey) {
      var state2 = this._baseState;
      assert2(state2.key === null);
      state2.key = newKey;
      return this;
    };
    Node.prototype.any = function any() {
      var state2 = this._baseState;
      state2.any = true;
      return this;
    };
    Node.prototype.choice = function choice(obj) {
      var state2 = this._baseState;
      assert2(state2.choice === null);
      state2.choice = obj;
      this._useArgs(Object.keys(obj).map(function(key2) {
        return obj[key2];
      }));
      return this;
    };
    Node.prototype.contains = function contains(item) {
      var state2 = this._baseState;
      assert2(state2.use === null);
      state2.contains = item;
      return this;
    };
    Node.prototype._decode = function decode2(input, options) {
      var state2 = this._baseState;
      if (state2.parent === null)
        return input.wrapResult(state2.children[0]._decode(input, options));
      var result = state2["default"];
      var present = true;
      var prevKey = null;
      if (state2.key !== null)
        prevKey = input.enterKey(state2.key);
      if (state2.optional) {
        var tag = null;
        if (state2.explicit !== null)
          tag = state2.explicit;
        else if (state2.implicit !== null)
          tag = state2.implicit;
        else if (state2.tag !== null)
          tag = state2.tag;
        if (tag === null && !state2.any) {
          var save = input.save();
          try {
            if (state2.choice === null)
              this._decodeGeneric(state2.tag, input, options);
            else
              this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }
          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state2.any);
          if (input.isError(present))
            return present;
        }
      }
      var prevObj;
      if (state2.obj && present)
        prevObj = input.enterObject();
      if (present) {
        if (state2.explicit !== null) {
          var explicit = this._decodeTag(input, state2.explicit);
          if (input.isError(explicit))
            return explicit;
          input = explicit;
        }
        var start = input.offset;
        if (state2.use === null && state2.choice === null) {
          if (state2.any)
            var save = input.save();
          var body = this._decodeTag(
            input,
            state2.implicit !== null ? state2.implicit : state2.tag,
            state2.any
          );
          if (input.isError(body))
            return body;
          if (state2.any)
            result = input.raw(save);
          else
            input = body;
        }
        if (options && options.track && state2.tag !== null)
          options.track(input.path(), start, input.length, "tagged");
        if (options && options.track && state2.tag !== null)
          options.track(input.path(), input.offset, input.length, "content");
        if (state2.any)
          result = result;
        else if (state2.choice === null)
          result = this._decodeGeneric(state2.tag, input, options);
        else
          result = this._decodeChoice(input, options);
        if (input.isError(result))
          return result;
        if (!state2.any && state2.choice === null && state2.children !== null) {
          state2.children.forEach(function decodeChildren(child) {
            child._decode(input, options);
          });
        }
        if (state2.contains && (state2.tag === "octstr" || state2.tag === "bitstr")) {
          var data = new DecoderBuffer(result);
          result = this._getUse(state2.contains, input._reporterState.obj)._decode(data, options);
        }
      }
      if (state2.obj && present)
        result = input.leaveObject(prevObj);
      if (state2.key !== null && (result !== null || present === true))
        input.leaveKey(prevKey, state2.key, result);
      else if (prevKey !== null)
        input.exitKey(prevKey);
      return result;
    };
    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
      var state2 = this._baseState;
      if (tag === "seq" || tag === "set")
        return null;
      if (tag === "seqof" || tag === "setof")
        return this._decodeList(input, tag, state2.args[0], options);
      else if (/str$/.test(tag))
        return this._decodeStr(input, tag, options);
      else if (tag === "objid" && state2.args)
        return this._decodeObjid(input, state2.args[0], state2.args[1], options);
      else if (tag === "objid")
        return this._decodeObjid(input, null, null, options);
      else if (tag === "gentime" || tag === "utctime")
        return this._decodeTime(input, tag, options);
      else if (tag === "null_")
        return this._decodeNull(input, options);
      else if (tag === "bool")
        return this._decodeBool(input, options);
      else if (tag === "objDesc")
        return this._decodeStr(input, tag, options);
      else if (tag === "int" || tag === "enum")
        return this._decodeInt(input, state2.args && state2.args[0], options);
      if (state2.use !== null) {
        return this._getUse(state2.use, input._reporterState.obj)._decode(input, options);
      } else {
        return input.error("unknown tag: " + tag);
      }
    };
    Node.prototype._getUse = function _getUse(entity, obj) {
      var state2 = this._baseState;
      state2.useDecoder = this._use(entity, obj);
      assert2(state2.useDecoder._baseState.parent === null);
      state2.useDecoder = state2.useDecoder._baseState.children[0];
      if (state2.implicit !== state2.useDecoder._baseState.implicit) {
        state2.useDecoder = state2.useDecoder.clone();
        state2.useDecoder._baseState.implicit = state2.implicit;
      }
      return state2.useDecoder;
    };
    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      var state2 = this._baseState;
      var result = null;
      var match = false;
      Object.keys(state2.choice).some(function(key2) {
        var save = input.save();
        var node2 = state2.choice[key2];
        try {
          var value = node2._decode(input, options);
          if (input.isError(value))
            return false;
          result = { type: key2, value };
          match = true;
        } catch (e) {
          input.restore(save);
          return false;
        }
        return true;
      }, this);
      if (!match)
        return input.error("Choice not matched");
      return result;
    };
    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer(data, this.reporter);
    };
    Node.prototype._encode = function encode2(data, reporter2, parent) {
      var state2 = this._baseState;
      if (state2["default"] !== null && state2["default"] === data)
        return;
      var result = this._encodeValue(data, reporter2, parent);
      if (result === void 0)
        return;
      if (this._skipDefault(result, reporter2, parent))
        return;
      return result;
    };
    Node.prototype._encodeValue = function encode2(data, reporter2, parent) {
      var state2 = this._baseState;
      if (state2.parent === null)
        return state2.children[0]._encode(data, reporter2 || new Reporter());
      var result = null;
      this.reporter = reporter2;
      if (state2.optional && data === void 0) {
        if (state2["default"] !== null)
          data = state2["default"];
        else
          return;
      }
      var content = null;
      var primitive = false;
      if (state2.any) {
        result = this._createEncoderBuffer(data);
      } else if (state2.choice) {
        result = this._encodeChoice(data, reporter2);
      } else if (state2.contains) {
        content = this._getUse(state2.contains, parent)._encode(data, reporter2);
        primitive = true;
      } else if (state2.children) {
        content = state2.children.map(function(child2) {
          if (child2._baseState.tag === "null_")
            return child2._encode(null, reporter2, data);
          if (child2._baseState.key === null)
            return reporter2.error("Child should have a key");
          var prevKey = reporter2.enterKey(child2._baseState.key);
          if (typeof data !== "object")
            return reporter2.error("Child expected, but input is not object");
          var res = child2._encode(data[child2._baseState.key], reporter2, data);
          reporter2.leaveKey(prevKey);
          return res;
        }, this).filter(function(child2) {
          return child2;
        });
        content = this._createEncoderBuffer(content);
      } else {
        if (state2.tag === "seqof" || state2.tag === "setof") {
          if (!(state2.args && state2.args.length === 1))
            return reporter2.error("Too many args for : " + state2.tag);
          if (!Array.isArray(data))
            return reporter2.error("seqof/setof, but data is not Array");
          var child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(data.map(function(item) {
            var state3 = this._baseState;
            return this._getUse(state3.args[0], data)._encode(item, reporter2);
          }, child));
        } else if (state2.use !== null) {
          result = this._getUse(state2.use, parent)._encode(data, reporter2);
        } else {
          content = this._encodePrimitive(state2.tag, data);
          primitive = true;
        }
      }
      var result;
      if (!state2.any && state2.choice === null) {
        var tag = state2.implicit !== null ? state2.implicit : state2.tag;
        var cls = state2.implicit === null ? "universal" : "context";
        if (tag === null) {
          if (state2.use === null)
            reporter2.error("Tag could be omitted only for .use()");
        } else {
          if (state2.use === null)
            result = this._encodeComposite(tag, primitive, cls, content);
        }
      }
      if (state2.explicit !== null)
        result = this._encodeComposite(state2.explicit, false, "context", result);
      return result;
    };
    Node.prototype._encodeChoice = function encodeChoice(data, reporter2) {
      var state2 = this._baseState;
      var node2 = state2.choice[data.type];
      if (!node2) {
        assert2(
          false,
          data.type + " not found in " + JSON.stringify(Object.keys(state2.choice))
        );
      }
      return node2._encode(data.value, reporter2);
    };
    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      var state2 = this._baseState;
      if (/str$/.test(tag))
        return this._encodeStr(data, tag);
      else if (tag === "objid" && state2.args)
        return this._encodeObjid(data, state2.reverseArgs[0], state2.args[1]);
      else if (tag === "objid")
        return this._encodeObjid(data, null, null);
      else if (tag === "gentime" || tag === "utctime")
        return this._encodeTime(data, tag);
      else if (tag === "null_")
        return this._encodeNull();
      else if (tag === "int" || tag === "enum")
        return this._encodeInt(data, state2.args && state2.reverseArgs[0]);
      else if (tag === "bool")
        return this._encodeBool(data);
      else if (tag === "objDesc")
        return this._encodeStr(data, tag);
      else
        throw new Error("Unsupported tag: " + tag);
    };
    Node.prototype._isNumstr = function isNumstr(str) {
      return /^[0-9 ]*$/.test(str);
    };
    Node.prototype._isPrintstr = function isPrintstr(str) {
      return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
    };
    return node;
  }
  var hasRequiredBase;
  function requireBase() {
    if (hasRequiredBase) return base;
    hasRequiredBase = 1;
    (function(exports2) {
      var base2 = exports2;
      base2.Reporter = requireReporter().Reporter;
      base2.DecoderBuffer = requireBuffer().DecoderBuffer;
      base2.EncoderBuffer = requireBuffer().EncoderBuffer;
      base2.Node = requireNode();
    })(base);
    return base;
  }
  var constants$4 = {};
  var der = {};
  var hasRequiredDer$2;
  function requireDer$2() {
    if (hasRequiredDer$2) return der;
    hasRequiredDer$2 = 1;
    (function(exports2) {
      var constants2 = requireConstants$1();
      exports2.tagClass = {
        0: "universal",
        1: "application",
        2: "context",
        3: "private"
      };
      exports2.tagClassByName = constants2._reverse(exports2.tagClass);
      exports2.tag = {
        0: "end",
        1: "bool",
        2: "int",
        3: "bitstr",
        4: "octstr",
        5: "null_",
        6: "objid",
        7: "objDesc",
        8: "external",
        9: "real",
        10: "enum",
        11: "embed",
        12: "utf8str",
        13: "relativeOid",
        16: "seq",
        17: "set",
        18: "numstr",
        19: "printstr",
        20: "t61str",
        21: "videostr",
        22: "ia5str",
        23: "utctime",
        24: "gentime",
        25: "graphstr",
        26: "iso646str",
        27: "genstr",
        28: "unistr",
        29: "charstr",
        30: "bmpstr"
      };
      exports2.tagByName = constants2._reverse(exports2.tag);
    })(der);
    return der;
  }
  var hasRequiredConstants$1;
  function requireConstants$1() {
    if (hasRequiredConstants$1) return constants$4;
    hasRequiredConstants$1 = 1;
    (function(exports2) {
      var constants2 = exports2;
      constants2._reverse = function reverse(map) {
        var res = {};
        Object.keys(map).forEach(function(key2) {
          if ((key2 | 0) == key2)
            key2 = key2 | 0;
          var value = map[key2];
          res[value] = key2;
        });
        return res;
      };
      constants2.der = requireDer$2();
    })(constants$4);
    return constants$4;
  }
  var decoders = {};
  var der_1$1;
  var hasRequiredDer$1;
  function requireDer$1() {
    if (hasRequiredDer$1) return der_1$1;
    hasRequiredDer$1 = 1;
    var inherits2 = requireInherits_browser();
    var asn12 = requireAsn1$1();
    var base2 = asn12.base;
    var bignum = asn12.bignum;
    var der2 = asn12.constants.der;
    function DERDecoder(entity) {
      this.enc = "der";
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    der_1$1 = DERDecoder;
    DERDecoder.prototype.decode = function decode2(data, options) {
      if (!(data instanceof base2.DecoderBuffer))
        data = new base2.DecoderBuffer(data, options);
      return this.tree._decode(data, options);
    };
    function DERNode(parent) {
      base2.Node.call(this, "der", parent);
    }
    inherits2(DERNode, base2.Node);
    DERNode.prototype._peekTag = function peekTag(buffer2, tag, any) {
      if (buffer2.isEmpty())
        return false;
      var state2 = buffer2.save();
      var decodedTag = derDecodeTag(buffer2, 'Failed to peek tag: "' + tag + '"');
      if (buffer2.isError(decodedTag))
        return decodedTag;
      buffer2.restore(state2);
      return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
    };
    DERNode.prototype._decodeTag = function decodeTag(buffer2, tag, any) {
      var decodedTag = derDecodeTag(
        buffer2,
        'Failed to decode tag of "' + tag + '"'
      );
      if (buffer2.isError(decodedTag))
        return decodedTag;
      var len2 = derDecodeLen(
        buffer2,
        decodedTag.primitive,
        'Failed to get length of "' + tag + '"'
      );
      if (buffer2.isError(len2))
        return len2;
      if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) {
        return buffer2.error('Failed to match tag: "' + tag + '"');
      }
      if (decodedTag.primitive || len2 !== null)
        return buffer2.skip(len2, 'Failed to match body of: "' + tag + '"');
      var state2 = buffer2.save();
      var res = this._skipUntilEnd(
        buffer2,
        'Failed to skip indefinite length body: "' + this.tag + '"'
      );
      if (buffer2.isError(res))
        return res;
      len2 = buffer2.offset - state2.offset;
      buffer2.restore(state2);
      return buffer2.skip(len2, 'Failed to match body of: "' + tag + '"');
    };
    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer2, fail) {
      while (true) {
        var tag = derDecodeTag(buffer2, fail);
        if (buffer2.isError(tag))
          return tag;
        var len2 = derDecodeLen(buffer2, tag.primitive, fail);
        if (buffer2.isError(len2))
          return len2;
        var res;
        if (tag.primitive || len2 !== null)
          res = buffer2.skip(len2);
        else
          res = this._skipUntilEnd(buffer2, fail);
        if (buffer2.isError(res))
          return res;
        if (tag.tagStr === "end")
          break;
      }
    };
    DERNode.prototype._decodeList = function decodeList(buffer2, tag, decoder, options) {
      var result = [];
      while (!buffer2.isEmpty()) {
        var possibleEnd = this._peekTag(buffer2, "end");
        if (buffer2.isError(possibleEnd))
          return possibleEnd;
        var res = decoder.decode(buffer2, "der", options);
        if (buffer2.isError(res) && possibleEnd)
          break;
        result.push(res);
      }
      return result;
    };
    DERNode.prototype._decodeStr = function decodeStr(buffer2, tag) {
      if (tag === "bitstr") {
        var unused = buffer2.readUInt8();
        if (buffer2.isError(unused))
          return unused;
        return { unused, data: buffer2.raw() };
      } else if (tag === "bmpstr") {
        var raw = buffer2.raw();
        if (raw.length % 2 === 1)
          return buffer2.error("Decoding of string type: bmpstr length mismatch");
        var str = "";
        for (var i2 = 0; i2 < raw.length / 2; i2++) {
          str += String.fromCharCode(raw.readUInt16BE(i2 * 2));
        }
        return str;
      } else if (tag === "numstr") {
        var numstr = buffer2.raw().toString("ascii");
        if (!this._isNumstr(numstr)) {
          return buffer2.error("Decoding of string type: numstr unsupported characters");
        }
        return numstr;
      } else if (tag === "octstr") {
        return buffer2.raw();
      } else if (tag === "objDesc") {
        return buffer2.raw();
      } else if (tag === "printstr") {
        var printstr = buffer2.raw().toString("ascii");
        if (!this._isPrintstr(printstr)) {
          return buffer2.error("Decoding of string type: printstr unsupported characters");
        }
        return printstr;
      } else if (/str$/.test(tag)) {
        return buffer2.raw().toString();
      } else {
        return buffer2.error("Decoding of string type: " + tag + " unsupported");
      }
    };
    DERNode.prototype._decodeObjid = function decodeObjid(buffer2, values, relative) {
      var result;
      var identifiers2 = [];
      var ident = 0;
      while (!buffer2.isEmpty()) {
        var subident = buffer2.readUInt8();
        ident <<= 7;
        ident |= subident & 127;
        if ((subident & 128) === 0) {
          identifiers2.push(ident);
          ident = 0;
        }
      }
      if (subident & 128)
        identifiers2.push(ident);
      var first = identifiers2[0] / 40 | 0;
      var second = identifiers2[0] % 40;
      if (relative)
        result = identifiers2;
      else
        result = [first, second].concat(identifiers2.slice(1));
      if (values) {
        var tmp = values[result.join(" ")];
        if (tmp === void 0)
          tmp = values[result.join(".")];
        if (tmp !== void 0)
          result = tmp;
      }
      return result;
    };
    DERNode.prototype._decodeTime = function decodeTime(buffer2, tag) {
      var str = buffer2.raw().toString();
      if (tag === "gentime") {
        var year = str.slice(0, 4) | 0;
        var mon = str.slice(4, 6) | 0;
        var day = str.slice(6, 8) | 0;
        var hour = str.slice(8, 10) | 0;
        var min2 = str.slice(10, 12) | 0;
        var sec = str.slice(12, 14) | 0;
      } else if (tag === "utctime") {
        var year = str.slice(0, 2) | 0;
        var mon = str.slice(2, 4) | 0;
        var day = str.slice(4, 6) | 0;
        var hour = str.slice(6, 8) | 0;
        var min2 = str.slice(8, 10) | 0;
        var sec = str.slice(10, 12) | 0;
        if (year < 70)
          year = 2e3 + year;
        else
          year = 1900 + year;
      } else {
        return buffer2.error("Decoding " + tag + " time is not supported yet");
      }
      return Date.UTC(year, mon - 1, day, hour, min2, sec, 0);
    };
    DERNode.prototype._decodeNull = function decodeNull(buffer2) {
      return null;
    };
    DERNode.prototype._decodeBool = function decodeBool(buffer2) {
      var res = buffer2.readUInt8();
      if (buffer2.isError(res))
        return res;
      else
        return res !== 0;
    };
    DERNode.prototype._decodeInt = function decodeInt(buffer2, values) {
      var raw = buffer2.raw();
      var res = new bignum(raw);
      if (values)
        res = values[res.toString(10)] || res;
      return res;
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === "function")
        entity = entity(obj);
      return entity._getDecoder("der").tree;
    };
    function derDecodeTag(buf, fail) {
      var tag = buf.readUInt8(fail);
      if (buf.isError(tag))
        return tag;
      var cls = der2.tagClass[tag >> 6];
      var primitive = (tag & 32) === 0;
      if ((tag & 31) === 31) {
        var oct = tag;
        tag = 0;
        while ((oct & 128) === 128) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct))
            return oct;
          tag <<= 7;
          tag |= oct & 127;
        }
      } else {
        tag &= 31;
      }
      var tagStr = der2.tag[tag];
      return {
        cls,
        primitive,
        tag,
        tagStr
      };
    }
    function derDecodeLen(buf, primitive, fail) {
      var len2 = buf.readUInt8(fail);
      if (buf.isError(len2))
        return len2;
      if (!primitive && len2 === 128)
        return null;
      if ((len2 & 128) === 0) {
        return len2;
      }
      var num = len2 & 127;
      if (num > 4)
        return buf.error("length octect is too long");
      len2 = 0;
      for (var i2 = 0; i2 < num; i2++) {
        len2 <<= 8;
        var j = buf.readUInt8(fail);
        if (buf.isError(j))
          return j;
        len2 |= j;
      }
      return len2;
    }
    return der_1$1;
  }
  var pem$1;
  var hasRequiredPem$1;
  function requirePem$1() {
    if (hasRequiredPem$1) return pem$1;
    hasRequiredPem$1 = 1;
    var inherits2 = requireInherits_browser();
    var Buffer2 = require$$0$5.Buffer;
    var DERDecoder = requireDer$1();
    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = "pem";
    }
    inherits2(PEMDecoder, DERDecoder);
    pem$1 = PEMDecoder;
    PEMDecoder.prototype.decode = function decode2(data, options) {
      var lines = data.toString().split(/[\r\n]+/g);
      var label = options.label.toUpperCase();
      var re2 = /^-----(BEGIN|END) ([^-]+)-----$/;
      var start = -1;
      var end = -1;
      for (var i2 = 0; i2 < lines.length; i2++) {
        var match = lines[i2].match(re2);
        if (match === null)
          continue;
        if (match[2] !== label)
          continue;
        if (start === -1) {
          if (match[1] !== "BEGIN")
            break;
          start = i2;
        } else {
          if (match[1] !== "END")
            break;
          end = i2;
          break;
        }
      }
      if (start === -1 || end === -1)
        throw new Error("PEM section not found for: " + label);
      var base642 = lines.slice(start + 1, end).join("");
      base642.replace(/[^a-z0-9\+\/=]+/gi, "");
      var input = new Buffer2(base642, "base64");
      return DERDecoder.prototype.decode.call(this, input, options);
    };
    return pem$1;
  }
  var hasRequiredDecoders;
  function requireDecoders() {
    if (hasRequiredDecoders) return decoders;
    hasRequiredDecoders = 1;
    (function(exports2) {
      var decoders2 = exports2;
      decoders2.der = requireDer$1();
      decoders2.pem = requirePem$1();
    })(decoders);
    return decoders;
  }
  var encoders = {};
  var der_1;
  var hasRequiredDer;
  function requireDer() {
    if (hasRequiredDer) return der_1;
    hasRequiredDer = 1;
    var inherits2 = requireInherits_browser();
    var Buffer2 = require$$0$5.Buffer;
    var asn12 = requireAsn1$1();
    var base2 = asn12.base;
    var der2 = asn12.constants.der;
    function DEREncoder(entity) {
      this.enc = "der";
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    der_1 = DEREncoder;
    DEREncoder.prototype.encode = function encode2(data, reporter2) {
      return this.tree._encode(data, reporter2).join();
    };
    function DERNode(parent) {
      base2.Node.call(this, "der", parent);
    }
    inherits2(DERNode, base2.Node);
    DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
      var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
      if (content.length < 128) {
        var header = new Buffer2(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([header, content]);
      }
      var lenOctets = 1;
      for (var i2 = content.length; i2 >= 256; i2 >>= 8)
        lenOctets++;
      var header = new Buffer2(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 128 | lenOctets;
      for (var i2 = 1 + lenOctets, j = content.length; j > 0; i2--, j >>= 8)
        header[i2] = j & 255;
      return this._createEncoderBuffer([header, content]);
    };
    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === "bitstr") {
        return this._createEncoderBuffer([str.unused | 0, str.data]);
      } else if (tag === "bmpstr") {
        var buf = new Buffer2(str.length * 2);
        for (var i2 = 0; i2 < str.length; i2++) {
          buf.writeUInt16BE(str.charCodeAt(i2), i2 * 2);
        }
        return this._createEncoderBuffer(buf);
      } else if (tag === "numstr") {
        if (!this._isNumstr(str)) {
          return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        }
        return this._createEncoderBuffer(str);
      } else if (tag === "printstr") {
        if (!this._isPrintstr(str)) {
          return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        }
        return this._createEncoderBuffer(str);
      } else if (/str$/.test(tag)) {
        return this._createEncoderBuffer(str);
      } else if (tag === "objDesc") {
        return this._createEncoderBuffer(str);
      } else {
        return this.reporter.error("Encoding of string type: " + tag + " unsupported");
      }
    };
    DERNode.prototype._encodeObjid = function encodeObjid(id2, values, relative) {
      if (typeof id2 === "string") {
        if (!values)
          return this.reporter.error("string objid given, but no values map found");
        if (!values.hasOwnProperty(id2))
          return this.reporter.error("objid not found in values map");
        id2 = values[id2].split(/[\s\.]+/g);
        for (var i2 = 0; i2 < id2.length; i2++)
          id2[i2] |= 0;
      } else if (Array.isArray(id2)) {
        id2 = id2.slice();
        for (var i2 = 0; i2 < id2.length; i2++)
          id2[i2] |= 0;
      }
      if (!Array.isArray(id2)) {
        return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id2));
      }
      if (!relative) {
        if (id2[1] >= 40)
          return this.reporter.error("Second objid identifier OOB");
        id2.splice(0, 2, id2[0] * 40 + id2[1]);
      }
      var size2 = 0;
      for (var i2 = 0; i2 < id2.length; i2++) {
        var ident = id2[i2];
        for (size2++; ident >= 128; ident >>= 7)
          size2++;
      }
      var objid = new Buffer2(size2);
      var offset = objid.length - 1;
      for (var i2 = id2.length - 1; i2 >= 0; i2--) {
        var ident = id2[i2];
        objid[offset--] = ident & 127;
        while ((ident >>= 7) > 0)
          objid[offset--] = 128 | ident & 127;
      }
      return this._createEncoderBuffer(objid);
    };
    function two(num) {
      if (num < 10)
        return "0" + num;
      else
        return num;
    }
    DERNode.prototype._encodeTime = function encodeTime(time2, tag) {
      var str;
      var date = new Date(time2);
      if (tag === "gentime") {
        str = [
          two(date.getFullYear()),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          "Z"
        ].join("");
      } else if (tag === "utctime") {
        str = [
          two(date.getFullYear() % 100),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          "Z"
        ].join("");
      } else {
        this.reporter.error("Encoding " + tag + " time is not supported yet");
      }
      return this._encodeStr(str, "octstr");
    };
    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer("");
    };
    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === "string") {
        if (!values)
          return this.reporter.error("String int or enum given, but no values map");
        if (!values.hasOwnProperty(num)) {
          return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
        }
        num = values[num];
      }
      if (typeof num !== "number" && !Buffer2.isBuffer(num)) {
        var numArray = num.toArray();
        if (!num.sign && numArray[0] & 128) {
          numArray.unshift(0);
        }
        num = new Buffer2(numArray);
      }
      if (Buffer2.isBuffer(num)) {
        var size2 = num.length;
        if (num.length === 0)
          size2++;
        var out = new Buffer2(size2);
        num.copy(out);
        if (num.length === 0)
          out[0] = 0;
        return this._createEncoderBuffer(out);
      }
      if (num < 128)
        return this._createEncoderBuffer(num);
      if (num < 256)
        return this._createEncoderBuffer([0, num]);
      var size2 = 1;
      for (var i2 = num; i2 >= 256; i2 >>= 8)
        size2++;
      var out = new Array(size2);
      for (var i2 = out.length - 1; i2 >= 0; i2--) {
        out[i2] = num & 255;
        num >>= 8;
      }
      if (out[0] & 128) {
        out.unshift(0);
      }
      return this._createEncoderBuffer(new Buffer2(out));
    };
    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 255 : 0);
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === "function")
        entity = entity(obj);
      return entity._getEncoder("der").tree;
    };
    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter2, parent) {
      var state2 = this._baseState;
      var i2;
      if (state2["default"] === null)
        return false;
      var data = dataBuffer.join();
      if (state2.defaultBuffer === void 0)
        state2.defaultBuffer = this._encodeValue(state2["default"], reporter2, parent).join();
      if (data.length !== state2.defaultBuffer.length)
        return false;
      for (i2 = 0; i2 < data.length; i2++)
        if (data[i2] !== state2.defaultBuffer[i2])
          return false;
      return true;
    };
    function encodeTag(tag, primitive, cls, reporter2) {
      var res;
      if (tag === "seqof")
        tag = "seq";
      else if (tag === "setof")
        tag = "set";
      if (der2.tagByName.hasOwnProperty(tag))
        res = der2.tagByName[tag];
      else if (typeof tag === "number" && (tag | 0) === tag)
        res = tag;
      else
        return reporter2.error("Unknown tag: " + tag);
      if (res >= 31)
        return reporter2.error("Multi-octet tag encoding unsupported");
      if (!primitive)
        res |= 32;
      res |= der2.tagClassByName[cls || "universal"] << 6;
      return res;
    }
    return der_1;
  }
  var pem;
  var hasRequiredPem;
  function requirePem() {
    if (hasRequiredPem) return pem;
    hasRequiredPem = 1;
    var inherits2 = requireInherits_browser();
    var DEREncoder = requireDer();
    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = "pem";
    }
    inherits2(PEMEncoder, DEREncoder);
    pem = PEMEncoder;
    PEMEncoder.prototype.encode = function encode2(data, options) {
      var buf = DEREncoder.prototype.encode.call(this, data);
      var p = buf.toString("base64");
      var out = ["-----BEGIN " + options.label + "-----"];
      for (var i2 = 0; i2 < p.length; i2 += 64)
        out.push(p.slice(i2, i2 + 64));
      out.push("-----END " + options.label + "-----");
      return out.join("\n");
    };
    return pem;
  }
  var hasRequiredEncoders;
  function requireEncoders() {
    if (hasRequiredEncoders) return encoders;
    hasRequiredEncoders = 1;
    (function(exports2) {
      var encoders2 = exports2;
      encoders2.der = requireDer();
      encoders2.pem = requirePem();
    })(encoders);
    return encoders;
  }
  var hasRequiredAsn1$1;
  function requireAsn1$1() {
    if (hasRequiredAsn1$1) return asn1;
    hasRequiredAsn1$1 = 1;
    (function(exports2) {
      var asn12 = exports2;
      asn12.bignum = requireBn$2();
      asn12.define = requireApi().define;
      asn12.base = requireBase();
      asn12.constants = requireConstants$1();
      asn12.decoders = requireDecoders();
      asn12.encoders = requireEncoders();
    })(asn1);
    return asn1;
  }
  var certificate;
  var hasRequiredCertificate;
  function requireCertificate() {
    if (hasRequiredCertificate) return certificate;
    hasRequiredCertificate = 1;
    var asn = requireAsn1$1();
    var Time = asn.define("Time", function() {
      this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
      });
    });
    var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
      this.seq().obj(
        this.key("type").objid(),
        this.key("value").any()
      );
    });
    var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
      this.seq().obj(
        this.key("algorithm").objid(),
        this.key("parameters").optional(),
        this.key("curve").objid().optional()
      );
    });
    var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(
        this.key("algorithm").use(AlgorithmIdentifier),
        this.key("subjectPublicKey").bitstr()
      );
    });
    var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
      this.setof(AttributeTypeValue);
    });
    var RDNSequence = asn.define("RDNSequence", function() {
      this.seqof(RelativeDistinguishedName);
    });
    var Name = asn.define("Name", function() {
      this.choice({
        rdnSequence: this.use(RDNSequence)
      });
    });
    var Validity = asn.define("Validity", function() {
      this.seq().obj(
        this.key("notBefore").use(Time),
        this.key("notAfter").use(Time)
      );
    });
    var Extension = asn.define("Extension", function() {
      this.seq().obj(
        this.key("extnID").objid(),
        this.key("critical").bool().def(false),
        this.key("extnValue").octstr()
      );
    });
    var TBSCertificate = asn.define("TBSCertificate", function() {
      this.seq().obj(
        this.key("version").explicit(0)["int"]().optional(),
        this.key("serialNumber")["int"](),
        this.key("signature").use(AlgorithmIdentifier),
        this.key("issuer").use(Name),
        this.key("validity").use(Validity),
        this.key("subject").use(Name),
        this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo),
        this.key("issuerUniqueID").implicit(1).bitstr().optional(),
        this.key("subjectUniqueID").implicit(2).bitstr().optional(),
        this.key("extensions").explicit(3).seqof(Extension).optional()
      );
    });
    var X509Certificate = asn.define("X509Certificate", function() {
      this.seq().obj(
        this.key("tbsCertificate").use(TBSCertificate),
        this.key("signatureAlgorithm").use(AlgorithmIdentifier),
        this.key("signatureValue").bitstr()
      );
    });
    certificate = X509Certificate;
    return certificate;
  }
  var hasRequiredAsn1;
  function requireAsn1() {
    if (hasRequiredAsn1) return asn1$1;
    hasRequiredAsn1 = 1;
    var asn12 = requireAsn1$1();
    asn1$1.certificate = requireCertificate();
    var RSAPrivateKey = asn12.define("RSAPrivateKey", function() {
      this.seq().obj(
        this.key("version")["int"](),
        this.key("modulus")["int"](),
        this.key("publicExponent")["int"](),
        this.key("privateExponent")["int"](),
        this.key("prime1")["int"](),
        this.key("prime2")["int"](),
        this.key("exponent1")["int"](),
        this.key("exponent2")["int"](),
        this.key("coefficient")["int"]()
      );
    });
    asn1$1.RSAPrivateKey = RSAPrivateKey;
    var RSAPublicKey = asn12.define("RSAPublicKey", function() {
      this.seq().obj(
        this.key("modulus")["int"](),
        this.key("publicExponent")["int"]()
      );
    });
    asn1$1.RSAPublicKey = RSAPublicKey;
    var AlgorithmIdentifier = asn12.define("AlgorithmIdentifier", function() {
      this.seq().obj(
        this.key("algorithm").objid(),
        this.key("none").null_().optional(),
        this.key("curve").objid().optional(),
        this.key("params").seq().obj(
          this.key("p")["int"](),
          this.key("q")["int"](),
          this.key("g")["int"]()
        ).optional()
      );
    });
    var PublicKey = asn12.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(
        this.key("algorithm").use(AlgorithmIdentifier),
        this.key("subjectPublicKey").bitstr()
      );
    });
    asn1$1.PublicKey = PublicKey;
    var PrivateKeyInfo = asn12.define("PrivateKeyInfo", function() {
      this.seq().obj(
        this.key("version")["int"](),
        this.key("algorithm").use(AlgorithmIdentifier),
        this.key("subjectPrivateKey").octstr()
      );
    });
    asn1$1.PrivateKey = PrivateKeyInfo;
    var EncryptedPrivateKeyInfo = asn12.define("EncryptedPrivateKeyInfo", function() {
      this.seq().obj(
        this.key("algorithm").seq().obj(
          this.key("id").objid(),
          this.key("decrypt").seq().obj(
            this.key("kde").seq().obj(
              this.key("id").objid(),
              this.key("kdeparams").seq().obj(
                this.key("salt").octstr(),
                this.key("iters")["int"]()
              )
            ),
            this.key("cipher").seq().obj(
              this.key("algo").objid(),
              this.key("iv").octstr()
            )
          )
        ),
        this.key("subjectPrivateKey").octstr()
      );
    });
    asn1$1.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
    var DSAPrivateKey = asn12.define("DSAPrivateKey", function() {
      this.seq().obj(
        this.key("version")["int"](),
        this.key("p")["int"](),
        this.key("q")["int"](),
        this.key("g")["int"](),
        this.key("pub_key")["int"](),
        this.key("priv_key")["int"]()
      );
    });
    asn1$1.DSAPrivateKey = DSAPrivateKey;
    asn1$1.DSAparam = asn12.define("DSAparam", function() {
      this["int"]();
    });
    var ECParameters = asn12.define("ECParameters", function() {
      this.choice({
        namedCurve: this.objid()
      });
    });
    var ECPrivateKey = asn12.define("ECPrivateKey", function() {
      this.seq().obj(
        this.key("version")["int"](),
        this.key("privateKey").octstr(),
        this.key("parameters").optional().explicit(0).use(ECParameters),
        this.key("publicKey").optional().explicit(1).bitstr()
      );
    });
    asn1$1.ECPrivateKey = ECPrivateKey;
    asn1$1.signature = asn12.define("signature", function() {
      this.seq().obj(
        this.key("r")["int"](),
        this.key("s")["int"]()
      );
    });
    return asn1$1;
  }
  const require$$1$3 = {
    "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
    "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
    "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
    "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
    "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
    "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
    "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
    "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
    "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
    "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
    "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
    "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
  };
  var fixProc;
  var hasRequiredFixProc;
  function requireFixProc() {
    if (hasRequiredFixProc) return fixProc;
    hasRequiredFixProc = 1;
    var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
    var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
    var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
    var evp = requireEvp_bytestokey();
    var ciphers = requireBrowser$8();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    fixProc = function(okey, password) {
      var key2 = okey.toString();
      var match = key2.match(findProc);
      var decrypted;
      if (!match) {
        var match2 = key2.match(fullRegex);
        decrypted = Buffer2.from(match2[2].replace(/[\r\n]/g, ""), "base64");
      } else {
        var suite = "aes" + match[1];
        var iv = Buffer2.from(match[2], "hex");
        var cipherText = Buffer2.from(match[3].replace(/[\r\n]/g, ""), "base64");
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher2 = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher2.update(cipherText));
        out.push(cipher2["final"]());
        decrypted = Buffer2.concat(out);
      }
      var tag = key2.match(startRegex)[1];
      return {
        tag,
        data: decrypted
      };
    };
    return fixProc;
  }
  var parseAsn1;
  var hasRequiredParseAsn1;
  function requireParseAsn1() {
    if (hasRequiredParseAsn1) return parseAsn1;
    hasRequiredParseAsn1 = 1;
    var asn12 = requireAsn1();
    var aesid = require$$1$3;
    var fixProc2 = requireFixProc();
    var ciphers = requireBrowser$8();
    var compat = requireBrowser$9();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function decrypt2(data, password) {
      var salt = data.algorithm.decrypt.kde.kdeparams.salt;
      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
      var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
      var iv = data.algorithm.decrypt.cipher.iv;
      var cipherText = data.subjectPrivateKey;
      var keylen = parseInt(algo.split("-")[1], 10) / 8;
      var key2 = compat.pbkdf2Sync(password, salt, iters, keylen, "sha1");
      var cipher2 = ciphers.createDecipheriv(algo, key2, iv);
      var out = [];
      out.push(cipher2.update(cipherText));
      out.push(cipher2["final"]());
      return Buffer2.concat(out);
    }
    function parseKeys2(buffer2) {
      var password;
      if (typeof buffer2 === "object" && !Buffer2.isBuffer(buffer2)) {
        password = buffer2.passphrase;
        buffer2 = buffer2.key;
      }
      if (typeof buffer2 === "string") {
        buffer2 = Buffer2.from(buffer2);
      }
      var stripped = fixProc2(buffer2, password);
      var type2 = stripped.tag;
      var data = stripped.data;
      var subtype, ndata;
      switch (type2) {
        case "CERTIFICATE":
          ndata = asn12.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
        case "PUBLIC KEY":
          if (!ndata) {
            ndata = asn12.PublicKey.decode(data, "der");
          }
          subtype = ndata.algorithm.algorithm.join(".");
          switch (subtype) {
            case "1.2.840.113549.1.1.1":
              return asn12.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
            case "1.2.840.10045.2.1":
              ndata.subjectPrivateKey = ndata.subjectPublicKey;
              return {
                type: "ec",
                data: ndata
              };
            case "1.2.840.10040.4.1":
              ndata.algorithm.params.pub_key = asn12.DSAparam.decode(ndata.subjectPublicKey.data, "der");
              return {
                type: "dsa",
                data: ndata.algorithm.params
              };
            default:
              throw new Error("unknown key id " + subtype);
          }
        case "ENCRYPTED PRIVATE KEY":
          data = asn12.EncryptedPrivateKey.decode(data, "der");
          data = decrypt2(data, password);
        case "PRIVATE KEY":
          ndata = asn12.PrivateKey.decode(data, "der");
          subtype = ndata.algorithm.algorithm.join(".");
          switch (subtype) {
            case "1.2.840.113549.1.1.1":
              return asn12.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
            case "1.2.840.10045.2.1":
              return {
                curve: ndata.algorithm.curve,
                privateKey: asn12.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
              };
            case "1.2.840.10040.4.1":
              ndata.algorithm.params.priv_key = asn12.DSAparam.decode(ndata.subjectPrivateKey, "der");
              return {
                type: "dsa",
                params: ndata.algorithm.params
              };
            default:
              throw new Error("unknown key id " + subtype);
          }
        case "RSA PUBLIC KEY":
          return asn12.RSAPublicKey.decode(data, "der");
        case "RSA PRIVATE KEY":
          return asn12.RSAPrivateKey.decode(data, "der");
        case "DSA PRIVATE KEY":
          return {
            type: "dsa",
            params: asn12.DSAPrivateKey.decode(data, "der")
          };
        case "EC PRIVATE KEY":
          data = asn12.ECPrivateKey.decode(data, "der");
          return {
            curve: data.parameters.value,
            privateKey: data.privateKey
          };
        default:
          throw new Error("unknown key type " + type2);
      }
    }
    parseKeys2.signature = asn12.signature;
    parseAsn1 = parseKeys2;
    return parseAsn1;
  }
  const require$$4$1 = {
    "1.3.132.0.10": "secp256k1",
    "1.3.132.0.33": "p224",
    "1.2.840.10045.3.1.1": "p192",
    "1.2.840.10045.3.1.7": "p256",
    "1.3.132.0.34": "p384",
    "1.3.132.0.35": "p521"
  };
  var hasRequiredSign;
  function requireSign() {
    if (hasRequiredSign) return sign.exports;
    hasRequiredSign = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var createHmac = requireBrowser$a();
    var crt = requireBrowserifyRsa();
    var EC2 = requireElliptic().ec;
    var BN2 = requireBn();
    var parseKeys2 = requireParseAsn1();
    var curves2 = require$$4$1;
    var RSA_PKCS1_PADDING = 1;
    function sign$12(hash2, key2, hashType, signType, tag) {
      var priv = parseKeys2(key2);
      if (priv.curve) {
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") {
          throw new Error("wrong private key type");
        }
        return ecSign(hash2, priv);
      } else if (priv.type === "dsa") {
        if (signType !== "dsa") {
          throw new Error("wrong private key type");
        }
        return dsaSign(hash2, priv, hashType);
      }
      if (signType !== "rsa" && signType !== "ecdsa/rsa") {
        throw new Error("wrong private key type");
      }
      if (key2.padding !== void 0 && key2.padding !== RSA_PKCS1_PADDING) {
        throw new Error("illegal or unsupported padding mode");
      }
      hash2 = Buffer2.concat([tag, hash2]);
      var len2 = priv.modulus.byteLength();
      var pad = [0, 1];
      while (hash2.length + pad.length + 1 < len2) {
        pad.push(255);
      }
      pad.push(0);
      var i2 = -1;
      while (++i2 < hash2.length) {
        pad.push(hash2[i2]);
      }
      var out = crt(pad, priv);
      return out;
    }
    function ecSign(hash2, priv) {
      var curveId = curves2[priv.curve.join(".")];
      if (!curveId) {
        throw new Error("unknown curve " + priv.curve.join("."));
      }
      var curve2 = new EC2(curveId);
      var key2 = curve2.keyFromPrivate(priv.privateKey);
      var out = key2.sign(hash2);
      return Buffer2.from(out.toDER());
    }
    function dsaSign(hash2, priv, algo) {
      var x = priv.params.priv_key;
      var p = priv.params.p;
      var q = priv.params.q;
      var g = priv.params.g;
      var r2 = new BN2(0);
      var k;
      var H = bits2int(hash2, q).mod(q);
      var s2 = false;
      var kv = getKey(x, q, hash2, algo);
      while (s2 === false) {
        k = makeKey(q, kv, algo);
        r2 = makeR(g, k, p, q);
        s2 = k.invm(q).imul(H.add(x.mul(r2))).mod(q);
        if (s2.cmpn(0) === 0) {
          s2 = false;
          r2 = new BN2(0);
        }
      }
      return toDER(r2, s2);
    }
    function toDER(r2, s2) {
      r2 = r2.toArray();
      s2 = s2.toArray();
      if (r2[0] & 128) {
        r2 = [0].concat(r2);
      }
      if (s2[0] & 128) {
        s2 = [0].concat(s2);
      }
      var total = r2.length + s2.length + 4;
      var res = [
        48,
        total,
        2,
        r2.length
      ];
      res = res.concat(r2, [2, s2.length], s2);
      return Buffer2.from(res);
    }
    function getKey(x, q, hash2, algo) {
      x = Buffer2.from(x.toArray());
      if (x.length < q.byteLength()) {
        var zeros = Buffer2.alloc(q.byteLength() - x.length);
        x = Buffer2.concat([zeros, x]);
      }
      var hlen = hash2.length;
      var hbits = bits2octets(hash2, q);
      var v = Buffer2.alloc(hlen);
      v.fill(1);
      var k = Buffer2.alloc(hlen);
      k = createHmac(algo, k).update(v).update(Buffer2.from([0])).update(x).update(hbits).digest();
      v = createHmac(algo, k).update(v).digest();
      k = createHmac(algo, k).update(v).update(Buffer2.from([1])).update(x).update(hbits).digest();
      v = createHmac(algo, k).update(v).digest();
      return { k, v };
    }
    function bits2int(obits, q) {
      var bits = new BN2(obits);
      var shift = (obits.length << 3) - q.bitLength();
      if (shift > 0) {
        bits.ishrn(shift);
      }
      return bits;
    }
    function bits2octets(bits, q) {
      bits = bits2int(bits, q);
      bits = bits.mod(q);
      var out = Buffer2.from(bits.toArray());
      if (out.length < q.byteLength()) {
        var zeros = Buffer2.alloc(q.byteLength() - out.length);
        out = Buffer2.concat([zeros, out]);
      }
      return out;
    }
    function makeKey(q, kv, algo) {
      var t2;
      var k;
      do {
        t2 = Buffer2.alloc(0);
        while (t2.length * 8 < q.bitLength()) {
          kv.v = createHmac(algo, kv.k).update(kv.v).digest();
          t2 = Buffer2.concat([t2, kv.v]);
        }
        k = bits2int(t2, q);
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer2.from([0])).digest();
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      } while (k.cmp(q) !== -1);
      return k;
    }
    function makeR(g, k, p, q) {
      return g.toRed(BN2.mont(p)).redPow(k).fromRed().mod(q);
    }
    sign.exports = sign$12;
    sign.exports.getKey = getKey;
    sign.exports.makeKey = makeKey;
    return sign.exports;
  }
  var verify_1;
  var hasRequiredVerify;
  function requireVerify() {
    if (hasRequiredVerify) return verify_1;
    hasRequiredVerify = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var BN2 = requireBn();
    var EC2 = requireElliptic().ec;
    var parseKeys2 = requireParseAsn1();
    var curves2 = require$$4$1;
    function verify(sig, hash2, key2, signType, tag) {
      var pub = parseKeys2(key2);
      if (pub.type === "ec") {
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") {
          throw new Error("wrong public key type");
        }
        return ecVerify(sig, hash2, pub);
      } else if (pub.type === "dsa") {
        if (signType !== "dsa") {
          throw new Error("wrong public key type");
        }
        return dsaVerify(sig, hash2, pub);
      }
      if (signType !== "rsa" && signType !== "ecdsa/rsa") {
        throw new Error("wrong public key type");
      }
      hash2 = Buffer2.concat([tag, hash2]);
      var len2 = pub.modulus.byteLength();
      var pad = [1];
      var padNum = 0;
      while (hash2.length + pad.length + 2 < len2) {
        pad.push(255);
        padNum += 1;
      }
      pad.push(0);
      var i2 = -1;
      while (++i2 < hash2.length) {
        pad.push(hash2[i2]);
      }
      pad = Buffer2.from(pad);
      var red = BN2.mont(pub.modulus);
      sig = new BN2(sig).toRed(red);
      sig = sig.redPow(new BN2(pub.publicExponent));
      sig = Buffer2.from(sig.fromRed().toArray());
      var out = padNum < 8 ? 1 : 0;
      len2 = Math.min(sig.length, pad.length);
      if (sig.length !== pad.length) {
        out = 1;
      }
      i2 = -1;
      while (++i2 < len2) {
        out |= sig[i2] ^ pad[i2];
      }
      return out === 0;
    }
    function ecVerify(sig, hash2, pub) {
      var curveId = curves2[pub.data.algorithm.curve.join(".")];
      if (!curveId) {
        throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
      }
      var curve2 = new EC2(curveId);
      var pubkey = pub.data.subjectPrivateKey.data;
      return curve2.verify(hash2, sig, pubkey);
    }
    function dsaVerify(sig, hash2, pub) {
      var p = pub.data.p;
      var q = pub.data.q;
      var g = pub.data.g;
      var y = pub.data.pub_key;
      var unpacked = parseKeys2.signature.decode(sig, "der");
      var s2 = unpacked.s;
      var r2 = unpacked.r;
      checkValue(s2, q);
      checkValue(r2, q);
      var montp = BN2.mont(p);
      var w = s2.invm(q);
      var v = g.toRed(montp).redPow(new BN2(hash2).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r2.mul(w).mod(q)).fromRed()).mod(p).mod(q);
      return v.cmp(r2) === 0;
    }
    function checkValue(b, q) {
      if (b.cmpn(0) <= 0) {
        throw new Error("invalid sig");
      }
      if (b.cmp(q) >= 0) {
        throw new Error("invalid sig");
      }
    }
    verify_1 = verify;
    return verify_1;
  }
  var browser$6;
  var hasRequiredBrowser$5;
  function requireBrowser$5() {
    if (hasRequiredBrowser$5) return browser$6;
    hasRequiredBrowser$5 = 1;
    var Buffer2 = requireSafeBuffer$1().Buffer;
    var createHash = requireBrowser$b();
    var stream = requireReadableBrowser();
    var inherits2 = requireInherits_browser();
    var sign2 = requireSign();
    var verify = requireVerify();
    var algorithms = require$$6;
    Object.keys(algorithms).forEach(function(key2) {
      algorithms[key2].id = Buffer2.from(algorithms[key2].id, "hex");
      algorithms[key2.toLowerCase()] = algorithms[key2];
    });
    function Sign(algorithm) {
      stream.Writable.call(this);
      var data = algorithms[algorithm];
      if (!data) {
        throw new Error("Unknown message digest");
      }
      this._hashType = data.hash;
      this._hash = createHash(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }
    inherits2(Sign, stream.Writable);
    Sign.prototype._write = function _write(data, _, done) {
      this._hash.update(data);
      done();
    };
    Sign.prototype.update = function update(data, enc) {
      this._hash.update(typeof data === "string" ? Buffer2.from(data, enc) : data);
      return this;
    };
    Sign.prototype.sign = function signMethod(key2, enc) {
      this.end();
      var hash2 = this._hash.digest();
      var sig = sign2(hash2, key2, this._hashType, this._signType, this._tag);
      return enc ? sig.toString(enc) : sig;
    };
    function Verify(algorithm) {
      stream.Writable.call(this);
      var data = algorithms[algorithm];
      if (!data) {
        throw new Error("Unknown message digest");
      }
      this._hash = createHash(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }
    inherits2(Verify, stream.Writable);
    Verify.prototype._write = function _write(data, _, done) {
      this._hash.update(data);
      done();
    };
    Verify.prototype.update = function update(data, enc) {
      this._hash.update(typeof data === "string" ? Buffer2.from(data, enc) : data);
      return this;
    };
    Verify.prototype.verify = function verifyMethod(key2, sig, enc) {
      var sigBuffer = typeof sig === "string" ? Buffer2.from(sig, enc) : sig;
      this.end();
      var hash2 = this._hash.digest();
      return verify(sigBuffer, hash2, key2, this._signType, this._tag);
    };
    function createSign(algorithm) {
      return new Sign(algorithm);
    }
    function createVerify(algorithm) {
      return new Verify(algorithm);
    }
    browser$6 = {
      Sign: createSign,
      Verify: createVerify,
      createSign,
      createVerify
    };
    return browser$6;
  }
  var browser$5;
  var hasRequiredBrowser$4;
  function requireBrowser$4() {
    if (hasRequiredBrowser$4) return browser$5;
    hasRequiredBrowser$4 = 1;
    var elliptic2 = requireElliptic();
    var BN2 = requireBn$2();
    browser$5 = function createECDH(curve2) {
      return new ECDH(curve2);
    };
    var aliases = {
      secp256k1: {
        name: "secp256k1",
        byteLength: 32
      },
      secp224r1: {
        name: "p224",
        byteLength: 28
      },
      prime256v1: {
        name: "p256",
        byteLength: 32
      },
      prime192v1: {
        name: "p192",
        byteLength: 24
      },
      ed25519: {
        name: "ed25519",
        byteLength: 32
      },
      secp384r1: {
        name: "p384",
        byteLength: 48
      },
      secp521r1: {
        name: "p521",
        byteLength: 66
      }
    };
    aliases.p224 = aliases.secp224r1;
    aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
    aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
    aliases.p384 = aliases.secp384r1;
    aliases.p521 = aliases.secp521r1;
    function ECDH(curve2) {
      this.curveType = aliases[curve2];
      if (!this.curveType) {
        this.curveType = {
          name: curve2
        };
      }
      this.curve = new elliptic2.ec(this.curveType.name);
      this.keys = void 0;
    }
    ECDH.prototype.generateKeys = function(enc, format2) {
      this.keys = this.curve.genKeyPair();
      return this.getPublicKey(enc, format2);
    };
    ECDH.prototype.computeSecret = function(other, inenc, enc) {
      inenc = inenc || "utf8";
      if (!Buffer.isBuffer(other)) {
        other = new Buffer(other, inenc);
      }
      var otherPub = this.curve.keyFromPublic(other).getPublic();
      var out = otherPub.mul(this.keys.getPrivate()).getX();
      return formatReturnValue(out, enc, this.curveType.byteLength);
    };
    ECDH.prototype.getPublicKey = function(enc, format2) {
      var key2 = this.keys.getPublic(format2 === "compressed", true);
      if (format2 === "hybrid") {
        if (key2[key2.length - 1] % 2) {
          key2[0] = 7;
        } else {
          key2[0] = 6;
        }
      }
      return formatReturnValue(key2, enc);
    };
    ECDH.prototype.getPrivateKey = function(enc) {
      return formatReturnValue(this.keys.getPrivate(), enc);
    };
    ECDH.prototype.setPublicKey = function(pub, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(pub)) {
        pub = new Buffer(pub, enc);
      }
      this.keys._importPublic(pub);
      return this;
    };
    ECDH.prototype.setPrivateKey = function(priv, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(priv)) {
        priv = new Buffer(priv, enc);
      }
      var _priv = new BN2(priv);
      _priv = _priv.toString(16);
      this.keys = this.curve.genKeyPair();
      this.keys._importPrivate(_priv);
      return this;
    };
    function formatReturnValue(bn2, enc, len2) {
      if (!Array.isArray(bn2)) {
        bn2 = bn2.toArray();
      }
      var buf = new Buffer(bn2);
      if (len2 && buf.length < len2) {
        var zeros = new Buffer(len2 - buf.length);
        zeros.fill(0);
        buf = Buffer.concat([zeros, buf]);
      }
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }
    return browser$5;
  }
  var browser$4 = {};
  var mgf;
  var hasRequiredMgf;
  function requireMgf() {
    if (hasRequiredMgf) return mgf;
    hasRequiredMgf = 1;
    var createHash = requireBrowser$b();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    mgf = function(seed, len2) {
      var t2 = Buffer2.alloc(0);
      var i2 = 0;
      var c;
      while (t2.length < len2) {
        c = i2ops(i2++);
        t2 = Buffer2.concat([t2, createHash("sha1").update(seed).update(c).digest()]);
      }
      return t2.slice(0, len2);
    };
    function i2ops(c) {
      var out = Buffer2.allocUnsafe(4);
      out.writeUInt32BE(c, 0);
      return out;
    }
    return mgf;
  }
  var xor;
  var hasRequiredXor;
  function requireXor() {
    if (hasRequiredXor) return xor;
    hasRequiredXor = 1;
    xor = function xor2(a, b) {
      var len2 = a.length;
      var i2 = -1;
      while (++i2 < len2) {
        a[i2] ^= b[i2];
      }
      return a;
    };
    return xor;
  }
  var withPublic_1;
  var hasRequiredWithPublic;
  function requireWithPublic() {
    if (hasRequiredWithPublic) return withPublic_1;
    hasRequiredWithPublic = 1;
    var BN2 = requireBn$2();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    function withPublic(paddedMsg, key2) {
      return Buffer2.from(paddedMsg.toRed(BN2.mont(key2.modulus)).redPow(new BN2(key2.publicExponent)).fromRed().toArray());
    }
    withPublic_1 = withPublic;
    return withPublic_1;
  }
  var publicEncrypt;
  var hasRequiredPublicEncrypt;
  function requirePublicEncrypt() {
    if (hasRequiredPublicEncrypt) return publicEncrypt;
    hasRequiredPublicEncrypt = 1;
    var parseKeys2 = requireParseAsn1();
    var randomBytes = requireBrowser$d();
    var createHash = requireBrowser$b();
    var mgf2 = requireMgf();
    var xor2 = requireXor();
    var BN2 = requireBn$2();
    var withPublic = requireWithPublic();
    var crt = requireBrowserifyRsa();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    publicEncrypt = function publicEncrypt2(publicKey, msg, reverse) {
      var padding;
      if (publicKey.padding) {
        padding = publicKey.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }
      var key2 = parseKeys2(publicKey);
      var paddedMsg;
      if (padding === 4) {
        paddedMsg = oaep(key2, msg);
      } else if (padding === 1) {
        paddedMsg = pkcs1(key2, msg, reverse);
      } else if (padding === 3) {
        paddedMsg = new BN2(msg);
        if (paddedMsg.cmp(key2.modulus) >= 0) {
          throw new Error("data too long for modulus");
        }
      } else {
        throw new Error("unknown padding");
      }
      if (reverse) {
        return crt(paddedMsg, key2);
      } else {
        return withPublic(paddedMsg, key2);
      }
    };
    function oaep(key2, msg) {
      var k = key2.modulus.byteLength();
      var mLen = msg.length;
      var iHash = createHash("sha1").update(Buffer2.alloc(0)).digest();
      var hLen = iHash.length;
      var hLen2 = 2 * hLen;
      if (mLen > k - hLen2 - 2) {
        throw new Error("message too long");
      }
      var ps = Buffer2.alloc(k - mLen - hLen2 - 2);
      var dblen = k - hLen - 1;
      var seed = randomBytes(hLen);
      var maskedDb = xor2(Buffer2.concat([iHash, ps, Buffer2.alloc(1, 1), msg], dblen), mgf2(seed, dblen));
      var maskedSeed = xor2(seed, mgf2(maskedDb, hLen));
      return new BN2(Buffer2.concat([Buffer2.alloc(1), maskedSeed, maskedDb], k));
    }
    function pkcs1(key2, msg, reverse) {
      var mLen = msg.length;
      var k = key2.modulus.byteLength();
      if (mLen > k - 11) {
        throw new Error("message too long");
      }
      var ps;
      if (reverse) {
        ps = Buffer2.alloc(k - mLen - 3, 255);
      } else {
        ps = nonZero(k - mLen - 3);
      }
      return new BN2(Buffer2.concat([Buffer2.from([0, reverse ? 1 : 2]), ps, Buffer2.alloc(1), msg], k));
    }
    function nonZero(len2) {
      var out = Buffer2.allocUnsafe(len2);
      var i2 = 0;
      var cache = randomBytes(len2 * 2);
      var cur = 0;
      var num;
      while (i2 < len2) {
        if (cur === cache.length) {
          cache = randomBytes(len2 * 2);
          cur = 0;
        }
        num = cache[cur++];
        if (num) {
          out[i2++] = num;
        }
      }
      return out;
    }
    return publicEncrypt;
  }
  var privateDecrypt;
  var hasRequiredPrivateDecrypt;
  function requirePrivateDecrypt() {
    if (hasRequiredPrivateDecrypt) return privateDecrypt;
    hasRequiredPrivateDecrypt = 1;
    var parseKeys2 = requireParseAsn1();
    var mgf2 = requireMgf();
    var xor2 = requireXor();
    var BN2 = requireBn$2();
    var crt = requireBrowserifyRsa();
    var createHash = requireBrowser$b();
    var withPublic = requireWithPublic();
    var Buffer2 = requireSafeBuffer$1().Buffer;
    privateDecrypt = function privateDecrypt2(privateKey, enc, reverse) {
      var padding;
      if (privateKey.padding) {
        padding = privateKey.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }
      var key2 = parseKeys2(privateKey);
      var k = key2.modulus.byteLength();
      if (enc.length > k || new BN2(enc).cmp(key2.modulus) >= 0) {
        throw new Error("decryption error");
      }
      var msg;
      if (reverse) {
        msg = withPublic(new BN2(enc), key2);
      } else {
        msg = crt(enc, key2);
      }
      var zBuffer = Buffer2.alloc(k - msg.length);
      msg = Buffer2.concat([zBuffer, msg], k);
      if (padding === 4) {
        return oaep(key2, msg);
      } else if (padding === 1) {
        return pkcs1(key2, msg, reverse);
      } else if (padding === 3) {
        return msg;
      } else {
        throw new Error("unknown padding");
      }
    };
    function oaep(key2, msg) {
      var k = key2.modulus.byteLength();
      var iHash = createHash("sha1").update(Buffer2.alloc(0)).digest();
      var hLen = iHash.length;
      if (msg[0] !== 0) {
        throw new Error("decryption error");
      }
      var maskedSeed = msg.slice(1, hLen + 1);
      var maskedDb = msg.slice(hLen + 1);
      var seed = xor2(maskedSeed, mgf2(maskedDb, hLen));
      var db = xor2(maskedDb, mgf2(seed, k - hLen - 1));
      if (compare2(iHash, db.slice(0, hLen))) {
        throw new Error("decryption error");
      }
      var i2 = hLen;
      while (db[i2] === 0) {
        i2++;
      }
      if (db[i2++] !== 1) {
        throw new Error("decryption error");
      }
      return db.slice(i2);
    }
    function pkcs1(key2, msg, reverse) {
      var p1 = msg.slice(0, 2);
      var i2 = 2;
      var status = 0;
      while (msg[i2++] !== 0) {
        if (i2 >= msg.length) {
          status++;
          break;
        }
      }
      var ps = msg.slice(2, i2 - 1);
      if (p1.toString("hex") !== "0002" && !reverse || p1.toString("hex") !== "0001" && reverse) {
        status++;
      }
      if (ps.length < 8) {
        status++;
      }
      if (status) {
        throw new Error("decryption error");
      }
      return msg.slice(i2);
    }
    function compare2(a, b) {
      a = Buffer2.from(a);
      b = Buffer2.from(b);
      var dif = 0;
      var len2 = a.length;
      if (a.length !== b.length) {
        dif++;
        len2 = Math.min(a.length, b.length);
      }
      var i2 = -1;
      while (++i2 < len2) {
        dif += a[i2] ^ b[i2];
      }
      return dif;
    }
    return privateDecrypt;
  }
  var hasRequiredBrowser$3;
  function requireBrowser$3() {
    if (hasRequiredBrowser$3) return browser$4;
    hasRequiredBrowser$3 = 1;
    (function(exports2) {
      exports2.publicEncrypt = requirePublicEncrypt();
      exports2.privateDecrypt = requirePrivateDecrypt();
      exports2.privateEncrypt = function privateEncrypt(key2, buf) {
        return exports2.publicEncrypt(key2, buf, true);
      };
      exports2.publicDecrypt = function publicDecrypt(key2, buf) {
        return exports2.privateDecrypt(key2, buf, true);
      };
    })(browser$4);
    return browser$4;
  }
  var browser$3 = {};
  var hasRequiredBrowser$2;
  function requireBrowser$2() {
    if (hasRequiredBrowser$2) return browser$3;
    hasRequiredBrowser$2 = 1;
    function oldBrowser() {
      throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
    }
    var safeBuffer2 = requireSafeBuffer$1();
    var randombytes = requireBrowser$d();
    var Buffer2 = safeBuffer2.Buffer;
    var kBufferMaxLength = safeBuffer2.kMaxLength;
    var crypto2 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
    var kMaxUint32 = Math.pow(2, 32) - 1;
    function assertOffset(offset, length) {
      if (typeof offset !== "number" || offset !== offset) {
        throw new TypeError("offset must be a number");
      }
      if (offset > kMaxUint32 || offset < 0) {
        throw new TypeError("offset must be a uint32");
      }
      if (offset > kBufferMaxLength || offset > length) {
        throw new RangeError("offset out of range");
      }
    }
    function assertSize(size2, offset, length) {
      if (typeof size2 !== "number" || size2 !== size2) {
        throw new TypeError("size must be a number");
      }
      if (size2 > kMaxUint32 || size2 < 0) {
        throw new TypeError("size must be a uint32");
      }
      if (size2 + offset > length || size2 > kBufferMaxLength) {
        throw new RangeError("buffer too small");
      }
    }
    if (crypto2 && crypto2.getRandomValues || !process$1.browser) {
      browser$3.randomFill = randomFill;
      browser$3.randomFillSync = randomFillSync;
    } else {
      browser$3.randomFill = oldBrowser;
      browser$3.randomFillSync = oldBrowser;
    }
    function randomFill(buf, offset, size2, cb) {
      if (!Buffer2.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      }
      if (typeof offset === "function") {
        cb = offset;
        offset = 0;
        size2 = buf.length;
      } else if (typeof size2 === "function") {
        cb = size2;
        size2 = buf.length - offset;
      } else if (typeof cb !== "function") {
        throw new TypeError('"cb" argument must be a function');
      }
      assertOffset(offset, buf.length);
      assertSize(size2, offset, buf.length);
      return actualFill(buf, offset, size2, cb);
    }
    function actualFill(buf, offset, size2, cb) {
      if (process$1.browser) {
        var ourBuf = buf.buffer;
        var uint = new Uint8Array(ourBuf, offset, size2);
        crypto2.getRandomValues(uint);
        if (cb) {
          process$1.nextTick(function() {
            cb(null, buf);
          });
          return;
        }
        return buf;
      }
      if (cb) {
        randombytes(size2, function(err, bytes3) {
          if (err) {
            return cb(err);
          }
          bytes3.copy(buf, offset);
          cb(null, buf);
        });
        return;
      }
      var bytes2 = randombytes(size2);
      bytes2.copy(buf, offset);
      return buf;
    }
    function randomFillSync(buf, offset, size2) {
      if (typeof offset === "undefined") {
        offset = 0;
      }
      if (!Buffer2.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      }
      assertOffset(offset, buf.length);
      if (size2 === void 0) size2 = buf.length - offset;
      assertSize(size2, offset, buf.length);
      return actualFill(buf, offset, size2);
    }
    return browser$3;
  }
  var hasRequiredCryptoBrowserify;
  function requireCryptoBrowserify() {
    if (hasRequiredCryptoBrowserify) return cryptoBrowserify;
    hasRequiredCryptoBrowserify = 1;
    cryptoBrowserify.randomBytes = cryptoBrowserify.rng = cryptoBrowserify.pseudoRandomBytes = cryptoBrowserify.prng = requireBrowser$d();
    cryptoBrowserify.createHash = cryptoBrowserify.Hash = requireBrowser$b();
    cryptoBrowserify.createHmac = cryptoBrowserify.Hmac = requireBrowser$a();
    var algos2 = requireAlgos();
    var algoKeys = Object.keys(algos2);
    var hashes = [
      "sha1",
      "sha224",
      "sha256",
      "sha384",
      "sha512",
      "md5",
      "rmd160"
    ].concat(algoKeys);
    cryptoBrowserify.getHashes = function() {
      return hashes;
    };
    var p = requireBrowser$9();
    cryptoBrowserify.pbkdf2 = p.pbkdf2;
    cryptoBrowserify.pbkdf2Sync = p.pbkdf2Sync;
    var aes2 = requireBrowser$7();
    cryptoBrowserify.Cipher = aes2.Cipher;
    cryptoBrowserify.createCipher = aes2.createCipher;
    cryptoBrowserify.Cipheriv = aes2.Cipheriv;
    cryptoBrowserify.createCipheriv = aes2.createCipheriv;
    cryptoBrowserify.Decipher = aes2.Decipher;
    cryptoBrowserify.createDecipher = aes2.createDecipher;
    cryptoBrowserify.Decipheriv = aes2.Decipheriv;
    cryptoBrowserify.createDecipheriv = aes2.createDecipheriv;
    cryptoBrowserify.getCiphers = aes2.getCiphers;
    cryptoBrowserify.listCiphers = aes2.listCiphers;
    var dh2 = requireBrowser$6();
    cryptoBrowserify.DiffieHellmanGroup = dh2.DiffieHellmanGroup;
    cryptoBrowserify.createDiffieHellmanGroup = dh2.createDiffieHellmanGroup;
    cryptoBrowserify.getDiffieHellman = dh2.getDiffieHellman;
    cryptoBrowserify.createDiffieHellman = dh2.createDiffieHellman;
    cryptoBrowserify.DiffieHellman = dh2.DiffieHellman;
    var sign2 = requireBrowser$5();
    cryptoBrowserify.createSign = sign2.createSign;
    cryptoBrowserify.Sign = sign2.Sign;
    cryptoBrowserify.createVerify = sign2.createVerify;
    cryptoBrowserify.Verify = sign2.Verify;
    cryptoBrowserify.createECDH = requireBrowser$4();
    var publicEncrypt2 = requireBrowser$3();
    cryptoBrowserify.publicEncrypt = publicEncrypt2.publicEncrypt;
    cryptoBrowserify.privateEncrypt = publicEncrypt2.privateEncrypt;
    cryptoBrowserify.publicDecrypt = publicEncrypt2.publicDecrypt;
    cryptoBrowserify.privateDecrypt = publicEncrypt2.privateDecrypt;
    var rf = requireBrowser$2();
    cryptoBrowserify.randomFill = rf.randomFill;
    cryptoBrowserify.randomFillSync = rf.randomFillSync;
    cryptoBrowserify.createCredentials = function() {
      throw new Error("sorry, createCredentials is not implemented yet\nwe accept pull requests\nhttps://github.com/browserify/crypto-browserify");
    };
    cryptoBrowserify.constants = {
      DH_CHECK_P_NOT_SAFE_PRIME: 2,
      DH_CHECK_P_NOT_PRIME: 1,
      DH_UNABLE_TO_CHECK_GENERATOR: 4,
      DH_NOT_SUITABLE_GENERATOR: 8,
      NPN_ENABLED: 1,
      ALPN_ENABLED: 1,
      RSA_PKCS1_PADDING: 1,
      RSA_SSLV23_PADDING: 2,
      RSA_NO_PADDING: 3,
      RSA_PKCS1_OAEP_PADDING: 4,
      RSA_X931_PADDING: 5,
      RSA_PKCS1_PSS_PADDING: 6,
      POINT_CONVERSION_COMPRESSED: 2,
      POINT_CONVERSION_UNCOMPRESSED: 4,
      POINT_CONVERSION_HYBRID: 6
    };
    return cryptoBrowserify;
  }
  var hasRequiredCore;
  function requireCore() {
    if (hasRequiredCore) return core.exports;
    hasRequiredCore = 1;
    (function(module, exports2) {
      (function(root, factory) {
        {
          module.exports = factory();
        }
      })(commonjsGlobal, function() {
        var CryptoJS = CryptoJS || function(Math2, undefined$1) {
          var crypto2;
          if (typeof window !== "undefined" && window.crypto) {
            crypto2 = window.crypto;
          }
          if (typeof self !== "undefined" && self.crypto) {
            crypto2 = self.crypto;
          }
          if (typeof globalThis !== "undefined" && globalThis.crypto) {
            crypto2 = globalThis.crypto;
          }
          if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
            crypto2 = window.msCrypto;
          }
          if (!crypto2 && typeof commonjsGlobal !== "undefined" && commonjsGlobal.crypto) {
            crypto2 = commonjsGlobal.crypto;
          }
          if (!crypto2 && typeof commonjsRequire === "function") {
            try {
              crypto2 = requireCryptoBrowserify();
            } catch (err) {
            }
          }
          var cryptoSecureRandomInt = function() {
            if (crypto2) {
              if (typeof crypto2.getRandomValues === "function") {
                try {
                  return crypto2.getRandomValues(new Uint32Array(1))[0];
                } catch (err) {
                }
              }
              if (typeof crypto2.randomBytes === "function") {
                try {
                  return crypto2.randomBytes(4).readInt32LE();
                } catch (err) {
                }
              }
            }
            throw new Error("Native crypto module could not be used to get secure random number.");
          };
          var create2 = Object.create || /* @__PURE__ */ function() {
            function F() {
            }
            return function(obj) {
              var subtype;
              F.prototype = obj;
              subtype = new F();
              F.prototype = null;
              return subtype;
            };
          }();
          var C = {};
          var C_lib = C.lib = {};
          var Base = C_lib.Base = /* @__PURE__ */ function() {
            return {
              /**
               * Creates a new object that inherits from this object.
               *
               * @param {Object} overrides Properties to copy into the new object.
               *
               * @return {Object} The new object.
               *
               * @static
               *
               * @example
               *
               *     var MyType = CryptoJS.lib.Base.extend({
               *         field: 'value',
               *
               *         method: function () {
               *         }
               *     });
               */
              extend: function(overrides) {
                var subtype = create2(this);
                if (overrides) {
                  subtype.mixIn(overrides);
                }
                if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                  subtype.init = function() {
                    subtype.$super.init.apply(this, arguments);
                  };
                }
                subtype.init.prototype = subtype;
                subtype.$super = this;
                return subtype;
              },
              /**
               * Extends this object and runs the init method.
               * Arguments to create() will be passed to init().
               *
               * @return {Object} The new object.
               *
               * @static
               *
               * @example
               *
               *     var instance = MyType.create();
               */
              create: function() {
                var instance = this.extend();
                instance.init.apply(instance, arguments);
                return instance;
              },
              /**
               * Initializes a newly created object.
               * Override this method to add some logic when your objects are created.
               *
               * @example
               *
               *     var MyType = CryptoJS.lib.Base.extend({
               *         init: function () {
               *             // ...
               *         }
               *     });
               */
              init: function() {
              },
              /**
               * Copies properties into this object.
               *
               * @param {Object} properties The properties to mix in.
               *
               * @example
               *
               *     MyType.mixIn({
               *         field: 'value'
               *     });
               */
              mixIn: function(properties) {
                for (var propertyName in properties) {
                  if (properties.hasOwnProperty(propertyName)) {
                    this[propertyName] = properties[propertyName];
                  }
                }
                if (properties.hasOwnProperty("toString")) {
                  this.toString = properties.toString;
                }
              },
              /**
               * Creates a copy of this object.
               *
               * @return {Object} The clone.
               *
               * @example
               *
               *     var clone = instance.clone();
               */
              clone: function() {
                return this.init.prototype.extend(this);
              }
            };
          }();
          var WordArray = C_lib.WordArray = Base.extend({
            /**
             * Initializes a newly created word array.
             *
             * @param {Array} words (Optional) An array of 32-bit words.
             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.create();
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
             */
            init: function(words, sigBytes) {
              words = this.words = words || [];
              if (sigBytes != undefined$1) {
                this.sigBytes = sigBytes;
              } else {
                this.sigBytes = words.length * 4;
              }
            },
            /**
             * Converts this word array to a string.
             *
             * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
             *
             * @return {string} The stringified word array.
             *
             * @example
             *
             *     var string = wordArray + '';
             *     var string = wordArray.toString();
             *     var string = wordArray.toString(CryptoJS.enc.Utf8);
             */
            toString: function(encoder) {
              return (encoder || Hex).stringify(this);
            },
            /**
             * Concatenates a word array to this word array.
             *
             * @param {WordArray} wordArray The word array to append.
             *
             * @return {WordArray} This word array.
             *
             * @example
             *
             *     wordArray1.concat(wordArray2);
             */
            concat: function(wordArray) {
              var thisWords = this.words;
              var thatWords = wordArray.words;
              var thisSigBytes = this.sigBytes;
              var thatSigBytes = wordArray.sigBytes;
              this.clamp();
              if (thisSigBytes % 4) {
                for (var i2 = 0; i2 < thatSigBytes; i2++) {
                  var thatByte = thatWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                  thisWords[thisSigBytes + i2 >>> 2] |= thatByte << 24 - (thisSigBytes + i2) % 4 * 8;
                }
              } else {
                for (var j = 0; j < thatSigBytes; j += 4) {
                  thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
                }
              }
              this.sigBytes += thatSigBytes;
              return this;
            },
            /**
             * Removes insignificant bits.
             *
             * @example
             *
             *     wordArray.clamp();
             */
            clamp: function() {
              var words = this.words;
              var sigBytes = this.sigBytes;
              words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
              words.length = Math2.ceil(sigBytes / 4);
            },
            /**
             * Creates a copy of this word array.
             *
             * @return {WordArray} The clone.
             *
             * @example
             *
             *     var clone = wordArray.clone();
             */
            clone: function() {
              var clone2 = Base.clone.call(this);
              clone2.words = this.words.slice(0);
              return clone2;
            },
            /**
             * Creates a word array filled with random bytes.
             *
             * @param {number} nBytes The number of random bytes to generate.
             *
             * @return {WordArray} The random word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.random(16);
             */
            random: function(nBytes) {
              var words = [];
              for (var i2 = 0; i2 < nBytes; i2 += 4) {
                words.push(cryptoSecureRandomInt());
              }
              return new WordArray.init(words, nBytes);
            }
          });
          var C_enc = C.enc = {};
          var Hex = C_enc.Hex = {
            /**
             * Converts a word array to a hex string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The hex string.
             *
             * @static
             *
             * @example
             *
             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
             */
            stringify: function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var hexChars = [];
              for (var i2 = 0; i2 < sigBytes; i2++) {
                var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                hexChars.push((bite >>> 4).toString(16));
                hexChars.push((bite & 15).toString(16));
              }
              return hexChars.join("");
            },
            /**
             * Converts a hex string to a word array.
             *
             * @param {string} hexStr The hex string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
             */
            parse: function(hexStr) {
              var hexStrLength = hexStr.length;
              var words = [];
              for (var i2 = 0; i2 < hexStrLength; i2 += 2) {
                words[i2 >>> 3] |= parseInt(hexStr.substr(i2, 2), 16) << 24 - i2 % 8 * 4;
              }
              return new WordArray.init(words, hexStrLength / 2);
            }
          };
          var Latin1 = C_enc.Latin1 = {
            /**
             * Converts a word array to a Latin1 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Latin1 string.
             *
             * @static
             *
             * @example
             *
             *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
             */
            stringify: function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var latin1Chars = [];
              for (var i2 = 0; i2 < sigBytes; i2++) {
                var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                latin1Chars.push(String.fromCharCode(bite));
              }
              return latin1Chars.join("");
            },
            /**
             * Converts a Latin1 string to a word array.
             *
             * @param {string} latin1Str The Latin1 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
             */
            parse: function(latin1Str) {
              var latin1StrLength = latin1Str.length;
              var words = [];
              for (var i2 = 0; i2 < latin1StrLength; i2++) {
                words[i2 >>> 2] |= (latin1Str.charCodeAt(i2) & 255) << 24 - i2 % 4 * 8;
              }
              return new WordArray.init(words, latin1StrLength);
            }
          };
          var Utf8 = C_enc.Utf8 = {
            /**
             * Converts a word array to a UTF-8 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-8 string.
             *
             * @static
             *
             * @example
             *
             *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
             */
            stringify: function(wordArray) {
              try {
                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
              } catch (e) {
                throw new Error("Malformed UTF-8 data");
              }
            },
            /**
             * Converts a UTF-8 string to a word array.
             *
             * @param {string} utf8Str The UTF-8 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
             */
            parse: function(utf8Str) {
              return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
            }
          };
          var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
            /**
             * Resets this block algorithm's data buffer to its initial state.
             *
             * @example
             *
             *     bufferedBlockAlgorithm.reset();
             */
            reset: function() {
              this._data = new WordArray.init();
              this._nDataBytes = 0;
            },
            /**
             * Adds new data to this block algorithm's buffer.
             *
             * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
             *
             * @example
             *
             *     bufferedBlockAlgorithm._append('data');
             *     bufferedBlockAlgorithm._append(wordArray);
             */
            _append: function(data) {
              if (typeof data == "string") {
                data = Utf8.parse(data);
              }
              this._data.concat(data);
              this._nDataBytes += data.sigBytes;
            },
            /**
             * Processes available data blocks.
             *
             * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
             *
             * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
             *
             * @return {WordArray} The processed data.
             *
             * @example
             *
             *     var processedData = bufferedBlockAlgorithm._process();
             *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
             */
            _process: function(doFlush) {
              var processedWords;
              var data = this._data;
              var dataWords = data.words;
              var dataSigBytes = data.sigBytes;
              var blockSize = this.blockSize;
              var blockSizeBytes = blockSize * 4;
              var nBlocksReady = dataSigBytes / blockSizeBytes;
              if (doFlush) {
                nBlocksReady = Math2.ceil(nBlocksReady);
              } else {
                nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
              }
              var nWordsReady = nBlocksReady * blockSize;
              var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
              if (nWordsReady) {
                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                  this._doProcessBlock(dataWords, offset);
                }
                processedWords = dataWords.splice(0, nWordsReady);
                data.sigBytes -= nBytesReady;
              }
              return new WordArray.init(processedWords, nBytesReady);
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = bufferedBlockAlgorithm.clone();
             */
            clone: function() {
              var clone2 = Base.clone.call(this);
              clone2._data = this._data.clone();
              return clone2;
            },
            _minBufferSize: 0
          });
          C_lib.Hasher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             */
            cfg: Base.extend(),
            /**
             * Initializes a newly created hasher.
             *
             * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
             *
             * @example
             *
             *     var hasher = CryptoJS.algo.SHA256.create();
             */
            init: function(cfg) {
              this.cfg = this.cfg.extend(cfg);
              this.reset();
            },
            /**
             * Resets this hasher to its initial state.
             *
             * @example
             *
             *     hasher.reset();
             */
            reset: function() {
              BufferedBlockAlgorithm.reset.call(this);
              this._doReset();
            },
            /**
             * Updates this hasher with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {Hasher} This hasher.
             *
             * @example
             *
             *     hasher.update('message');
             *     hasher.update(wordArray);
             */
            update: function(messageUpdate) {
              this._append(messageUpdate);
              this._process();
              return this;
            },
            /**
             * Finalizes the hash computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The hash.
             *
             * @example
             *
             *     var hash = hasher.finalize();
             *     var hash = hasher.finalize('message');
             *     var hash = hasher.finalize(wordArray);
             */
            finalize: function(messageUpdate) {
              if (messageUpdate) {
                this._append(messageUpdate);
              }
              var hash2 = this._doFinalize();
              return hash2;
            },
            blockSize: 512 / 32,
            /**
             * Creates a shortcut function to a hasher's object interface.
             *
             * @param {Hasher} hasher The hasher to create a helper for.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
             */
            _createHelper: function(hasher) {
              return function(message, cfg) {
                return new hasher.init(cfg).finalize(message);
              };
            },
            /**
             * Creates a shortcut function to the HMAC's object interface.
             *
             * @param {Hasher} hasher The hasher to use in this HMAC helper.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
             */
            _createHmacHelper: function(hasher) {
              return function(message, key2) {
                return new C_algo.HMAC.init(hasher, key2).finalize(message);
              };
            }
          });
          var C_algo = C.algo = {};
          return C;
        }(Math);
        return CryptoJS;
      });
    })(core);
    return core.exports;
  }
  var sha256$1 = { exports: {} };
  var hasRequiredSha256;
  function requireSha256() {
    if (hasRequiredSha256) return sha256$1.exports;
    hasRequiredSha256 = 1;
    (function(module, exports2) {
      (function(root, factory) {
        {
          module.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS) {
        (function(Math2) {
          var C = CryptoJS;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C.algo;
          var H = [];
          var K2 = [];
          (function() {
            function isPrime(n2) {
              var sqrtN = Math2.sqrt(n2);
              for (var factor = 2; factor <= sqrtN; factor++) {
                if (!(n2 % factor)) {
                  return false;
                }
              }
              return true;
            }
            function getFractionalBits(n2) {
              return (n2 - (n2 | 0)) * 4294967296 | 0;
            }
            var n = 2;
            var nPrime = 0;
            while (nPrime < 64) {
              if (isPrime(n)) {
                if (nPrime < 8) {
                  H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
                }
                K2[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
                nPrime++;
              }
              n++;
            }
          })();
          var W = [];
          var SHA2562 = C_algo.SHA256 = Hasher.extend({
            _doReset: function() {
              this._hash = new WordArray.init(H.slice(0));
            },
            _doProcessBlock: function(M, offset) {
              var H2 = this._hash.words;
              var a = H2[0];
              var b = H2[1];
              var c = H2[2];
              var d = H2[3];
              var e = H2[4];
              var f2 = H2[5];
              var g = H2[6];
              var h = H2[7];
              for (var i2 = 0; i2 < 64; i2++) {
                if (i2 < 16) {
                  W[i2] = M[offset + i2] | 0;
                } else {
                  var gamma0x = W[i2 - 15];
                  var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                  var gamma1x = W[i2 - 2];
                  var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                  W[i2] = gamma0 + W[i2 - 7] + gamma1 + W[i2 - 16];
                }
                var ch = e & f2 ^ ~e & g;
                var maj = a & b ^ a & c ^ b & c;
                var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
                var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
                var t1 = h + sigma1 + ch + K2[i2] + W[i2];
                var t2 = sigma0 + maj;
                h = g;
                g = f2;
                f2 = e;
                e = d + t1 | 0;
                d = c;
                c = b;
                b = a;
                a = t1 + t2 | 0;
              }
              H2[0] = H2[0] + a | 0;
              H2[1] = H2[1] + b | 0;
              H2[2] = H2[2] + c | 0;
              H2[3] = H2[3] + d | 0;
              H2[4] = H2[4] + e | 0;
              H2[5] = H2[5] + f2 | 0;
              H2[6] = H2[6] + g | 0;
              H2[7] = H2[7] + h | 0;
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
              data.sigBytes = dataWords.length * 4;
              this._process();
              return this._hash;
            },
            clone: function() {
              var clone2 = Hasher.clone.call(this);
              clone2._hash = this._hash.clone();
              return clone2;
            }
          });
          C.SHA256 = Hasher._createHelper(SHA2562);
          C.HmacSHA256 = Hasher._createHmacHelper(SHA2562);
        })(Math);
        return CryptoJS.SHA256;
      });
    })(sha256$1);
    return sha256$1.exports;
  }
  (function(module, exports2) {
    (function(root, factory, undef) {
      {
        module.exports = factory(requireCore(), requireSha256());
      }
    })(commonjsGlobal, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA2562 = C_algo.SHA256;
        var SHA2242 = C_algo.SHA224 = SHA2562.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash2 = SHA2562._doFinalize.call(this);
            hash2.sigBytes -= 4;
            return hash2;
          }
        });
        C.SHA224 = SHA2562._createHelper(SHA2242);
        C.HmacSHA224 = SHA2562._createHmacHelper(SHA2242);
      })();
      return CryptoJS.SHA224;
    });
  })(sha224$2);
  var sha224Exports = sha224$2.exports;
  const SHA224$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(sha224Exports);
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  function __values(o) {
    var s2 = typeof Symbol === "function" && Symbol.iterator, m = s2 && o[s2], i2 = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function() {
        if (o && i2 >= o.length) o = void 0;
        return { value: o && o[i2++], done: !o };
      }
    };
    throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i2 = m.call(o), r2, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r2 = i2.next()).done) ar.push(r2.value);
    } catch (error2) {
      e = { error: error2 };
    } finally {
      try {
        if (r2 && !r2.done && (m = i2["return"])) m.call(i2);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  }
  function __spreadArray(to, from, pack2) {
    if (pack2 || arguments.length === 2) for (var i2 = 0, l = from.length, ar; i2 < l; i2++) {
      if (ar || !(i2 in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i2);
        ar[i2] = from[i2];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  }
  typeof SuppressedError === "function" ? SuppressedError : function(error2, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error2, e.suppressed = suppressed, e;
  };
  function isFunction(value) {
    return typeof value === "function";
  }
  function createErrorClass(createImpl) {
    var _super = function(instance) {
      Error.call(instance);
      instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
  }
  var UnsubscriptionError = createErrorClass(function(_super) {
    return function UnsubscriptionErrorImpl(errors2) {
      _super(this);
      this.message = errors2 ? errors2.length + " errors occurred during unsubscription:\n" + errors2.map(function(err, i2) {
        return i2 + 1 + ") " + err.toString();
      }).join("\n  ") : "";
      this.name = "UnsubscriptionError";
      this.errors = errors2;
    };
  });
  function arrRemove(arr, item) {
    if (arr) {
      var index = arr.indexOf(item);
      0 <= index && arr.splice(index, 1);
    }
  }
  var Subscription = function() {
    function Subscription2(initialTeardown) {
      this.initialTeardown = initialTeardown;
      this.closed = false;
      this._parentage = null;
      this._finalizers = null;
    }
    Subscription2.prototype.unsubscribe = function() {
      var e_1, _a2, e_2, _b;
      var errors2;
      if (!this.closed) {
        this.closed = true;
        var _parentage = this._parentage;
        if (_parentage) {
          this._parentage = null;
          if (Array.isArray(_parentage)) {
            try {
              for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                var parent_1 = _parentage_1_1.value;
                parent_1.remove(this);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_parentage_1_1 && !_parentage_1_1.done && (_a2 = _parentage_1.return)) _a2.call(_parentage_1);
              } finally {
                if (e_1) throw e_1.error;
              }
            }
          } else {
            _parentage.remove(this);
          }
        }
        var initialFinalizer = this.initialTeardown;
        if (isFunction(initialFinalizer)) {
          try {
            initialFinalizer();
          } catch (e) {
            errors2 = e instanceof UnsubscriptionError ? e.errors : [e];
          }
        }
        var _finalizers = this._finalizers;
        if (_finalizers) {
          this._finalizers = null;
          try {
            for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
              var finalizer = _finalizers_1_1.value;
              try {
                execFinalizer(finalizer);
              } catch (err) {
                errors2 = errors2 !== null && errors2 !== void 0 ? errors2 : [];
                if (err instanceof UnsubscriptionError) {
                  errors2 = __spreadArray(__spreadArray([], __read(errors2)), __read(err.errors));
                } else {
                  errors2.push(err);
                }
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
            } finally {
              if (e_2) throw e_2.error;
            }
          }
        }
        if (errors2) {
          throw new UnsubscriptionError(errors2);
        }
      }
    };
    Subscription2.prototype.add = function(teardown) {
      var _a2;
      if (teardown && teardown !== this) {
        if (this.closed) {
          execFinalizer(teardown);
        } else {
          if (teardown instanceof Subscription2) {
            if (teardown.closed || teardown._hasParent(this)) {
              return;
            }
            teardown._addParent(this);
          }
          (this._finalizers = (_a2 = this._finalizers) !== null && _a2 !== void 0 ? _a2 : []).push(teardown);
        }
      }
    };
    Subscription2.prototype._hasParent = function(parent) {
      var _parentage = this._parentage;
      return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
    };
    Subscription2.prototype._addParent = function(parent) {
      var _parentage = this._parentage;
      this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription2.prototype._removeParent = function(parent) {
      var _parentage = this._parentage;
      if (_parentage === parent) {
        this._parentage = null;
      } else if (Array.isArray(_parentage)) {
        arrRemove(_parentage, parent);
      }
    };
    Subscription2.prototype.remove = function(teardown) {
      var _finalizers = this._finalizers;
      _finalizers && arrRemove(_finalizers, teardown);
      if (teardown instanceof Subscription2) {
        teardown._removeParent(this);
      }
    };
    Subscription2.EMPTY = function() {
      var empty2 = new Subscription2();
      empty2.closed = true;
      return empty2;
    }();
    return Subscription2;
  }();
  var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
  function isSubscription(value) {
    return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
  }
  function execFinalizer(finalizer) {
    if (isFunction(finalizer)) {
      finalizer();
    } else {
      finalizer.unsubscribe();
    }
  }
  var config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: void 0,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false
  };
  var timeoutProvider = {
    setTimeout: function(handler, timeout) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearTimeout: function(handle) {
      return clearTimeout(handle);
    },
    delegate: void 0
  };
  function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function() {
      {
        throw err;
      }
    });
  }
  function noop() {
  }
  function errorContext(cb) {
    {
      cb();
    }
  }
  var Subscriber = function(_super) {
    __extends(Subscriber2, _super);
    function Subscriber2(destination) {
      var _this = _super.call(this) || this;
      _this.isStopped = false;
      if (destination) {
        _this.destination = destination;
        if (isSubscription(destination)) {
          destination.add(_this);
        }
      } else {
        _this.destination = EMPTY_OBSERVER;
      }
      return _this;
    }
    Subscriber2.create = function(next, error2, complete) {
      return new SafeSubscriber(next, error2, complete);
    };
    Subscriber2.prototype.next = function(value) {
      if (this.isStopped) ;
      else {
        this._next(value);
      }
    };
    Subscriber2.prototype.error = function(err) {
      if (this.isStopped) ;
      else {
        this.isStopped = true;
        this._error(err);
      }
    };
    Subscriber2.prototype.complete = function() {
      if (this.isStopped) ;
      else {
        this.isStopped = true;
        this._complete();
      }
    };
    Subscriber2.prototype.unsubscribe = function() {
      if (!this.closed) {
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
        this.destination = null;
      }
    };
    Subscriber2.prototype._next = function(value) {
      this.destination.next(value);
    };
    Subscriber2.prototype._error = function(err) {
      try {
        this.destination.error(err);
      } finally {
        this.unsubscribe();
      }
    };
    Subscriber2.prototype._complete = function() {
      try {
        this.destination.complete();
      } finally {
        this.unsubscribe();
      }
    };
    return Subscriber2;
  }(Subscription);
  var ConsumerObserver = function() {
    function ConsumerObserver2(partialObserver) {
      this.partialObserver = partialObserver;
    }
    ConsumerObserver2.prototype.next = function(value) {
      var partialObserver = this.partialObserver;
      if (partialObserver.next) {
        try {
          partialObserver.next(value);
        } catch (error2) {
          handleUnhandledError(error2);
        }
      }
    };
    ConsumerObserver2.prototype.error = function(err) {
      var partialObserver = this.partialObserver;
      if (partialObserver.error) {
        try {
          partialObserver.error(err);
        } catch (error2) {
          handleUnhandledError(error2);
        }
      } else {
        handleUnhandledError(err);
      }
    };
    ConsumerObserver2.prototype.complete = function() {
      var partialObserver = this.partialObserver;
      if (partialObserver.complete) {
        try {
          partialObserver.complete();
        } catch (error2) {
          handleUnhandledError(error2);
        }
      }
    };
    return ConsumerObserver2;
  }();
  var SafeSubscriber = function(_super) {
    __extends(SafeSubscriber2, _super);
    function SafeSubscriber2(observerOrNext, error2, complete) {
      var _this = _super.call(this) || this;
      var partialObserver;
      if (isFunction(observerOrNext) || !observerOrNext) {
        partialObserver = {
          next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
          error: error2 !== null && error2 !== void 0 ? error2 : void 0,
          complete: complete !== null && complete !== void 0 ? complete : void 0
        };
      } else {
        {
          partialObserver = observerOrNext;
        }
      }
      _this.destination = new ConsumerObserver(partialObserver);
      return _this;
    }
    return SafeSubscriber2;
  }(Subscriber);
  function handleUnhandledError(error2) {
    {
      reportUnhandledError(error2);
    }
  }
  function defaultErrorHandler(err) {
    throw err;
  }
  var EMPTY_OBSERVER = {
    closed: true,
    next: noop,
    error: defaultErrorHandler,
    complete: noop
  };
  var observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }();
  function identity(x) {
    return x;
  }
  function pipeFromArray(fns) {
    if (fns.length === 0) {
      return identity;
    }
    if (fns.length === 1) {
      return fns[0];
    }
    return function piped(input) {
      return fns.reduce(function(prev, fn) {
        return fn(prev);
      }, input);
    };
  }
  var Observable = function() {
    function Observable2(subscribe) {
      if (subscribe) {
        this._subscribe = subscribe;
      }
    }
    Observable2.prototype.lift = function(operator) {
      var observable2 = new Observable2();
      observable2.source = this;
      observable2.operator = operator;
      return observable2;
    };
    Observable2.prototype.subscribe = function(observerOrNext, error2, complete) {
      var _this = this;
      var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error2, complete);
      errorContext(function() {
        var _a2 = _this, operator = _a2.operator, source = _a2.source;
        subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
      });
      return subscriber;
    };
    Observable2.prototype._trySubscribe = function(sink) {
      try {
        return this._subscribe(sink);
      } catch (err) {
        sink.error(err);
      }
    };
    Observable2.prototype.forEach = function(next, promiseCtor) {
      var _this = this;
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function(resolve2, reject) {
        var subscriber = new SafeSubscriber({
          next: function(value) {
            try {
              next(value);
            } catch (err) {
              reject(err);
              subscriber.unsubscribe();
            }
          },
          error: reject,
          complete: resolve2
        });
        _this.subscribe(subscriber);
      });
    };
    Observable2.prototype._subscribe = function(subscriber) {
      var _a2;
      return (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber);
    };
    Observable2.prototype[observable] = function() {
      return this;
    };
    Observable2.prototype.pipe = function() {
      var operations = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        operations[_i] = arguments[_i];
      }
      return pipeFromArray(operations)(this);
    };
    Observable2.prototype.toPromise = function(promiseCtor) {
      var _this = this;
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function(resolve2, reject) {
        var value;
        _this.subscribe(function(x) {
          return value = x;
        }, function(err) {
          return reject(err);
        }, function() {
          return resolve2(value);
        });
      });
    };
    Observable2.create = function(subscribe) {
      return new Observable2(subscribe);
    };
    return Observable2;
  }();
  function getPromiseCtor(promiseCtor) {
    var _a2;
    return (_a2 = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a2 !== void 0 ? _a2 : Promise;
  }
  function isObserver(value) {
    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
  }
  function isSubscriber(value) {
    return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
  }
  var ObjectUnsubscribedError = createErrorClass(function(_super) {
    return function ObjectUnsubscribedErrorImpl() {
      _super(this);
      this.name = "ObjectUnsubscribedError";
      this.message = "object unsubscribed";
    };
  });
  var Subject = function(_super) {
    __extends(Subject2, _super);
    function Subject2() {
      var _this = _super.call(this) || this;
      _this.closed = false;
      _this.currentObservers = null;
      _this.observers = [];
      _this.isStopped = false;
      _this.hasError = false;
      _this.thrownError = null;
      return _this;
    }
    Subject2.prototype.lift = function(operator) {
      var subject = new AnonymousSubject(this, this);
      subject.operator = operator;
      return subject;
    };
    Subject2.prototype._throwIfClosed = function() {
      if (this.closed) {
        throw new ObjectUnsubscribedError();
      }
    };
    Subject2.prototype.next = function(value) {
      var _this = this;
      errorContext(function() {
        var e_1, _a2;
        _this._throwIfClosed();
        if (!_this.isStopped) {
          if (!_this.currentObservers) {
            _this.currentObservers = Array.from(_this.observers);
          }
          try {
            for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
              var observer = _c.value;
              observer.next(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        }
      });
    };
    Subject2.prototype.error = function(err) {
      var _this = this;
      errorContext(function() {
        _this._throwIfClosed();
        if (!_this.isStopped) {
          _this.hasError = _this.isStopped = true;
          _this.thrownError = err;
          var observers = _this.observers;
          while (observers.length) {
            observers.shift().error(err);
          }
        }
      });
    };
    Subject2.prototype.complete = function() {
      var _this = this;
      errorContext(function() {
        _this._throwIfClosed();
        if (!_this.isStopped) {
          _this.isStopped = true;
          var observers = _this.observers;
          while (observers.length) {
            observers.shift().complete();
          }
        }
      });
    };
    Subject2.prototype.unsubscribe = function() {
      this.isStopped = this.closed = true;
      this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject2.prototype, "observed", {
      get: function() {
        var _a2;
        return ((_a2 = this.observers) === null || _a2 === void 0 ? void 0 : _a2.length) > 0;
      },
      enumerable: false,
      configurable: true
    });
    Subject2.prototype._trySubscribe = function(subscriber) {
      this._throwIfClosed();
      return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject2.prototype._subscribe = function(subscriber) {
      this._throwIfClosed();
      this._checkFinalizedStatuses(subscriber);
      return this._innerSubscribe(subscriber);
    };
    Subject2.prototype._innerSubscribe = function(subscriber) {
      var _this = this;
      var _a2 = this, hasError = _a2.hasError, isStopped = _a2.isStopped, observers = _a2.observers;
      if (hasError || isStopped) {
        return EMPTY_SUBSCRIPTION;
      }
      this.currentObservers = null;
      observers.push(subscriber);
      return new Subscription(function() {
        _this.currentObservers = null;
        arrRemove(observers, subscriber);
      });
    };
    Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
      var _a2 = this, hasError = _a2.hasError, thrownError = _a2.thrownError, isStopped = _a2.isStopped;
      if (hasError) {
        subscriber.error(thrownError);
      } else if (isStopped) {
        subscriber.complete();
      }
    };
    Subject2.prototype.asObservable = function() {
      var observable2 = new Observable();
      observable2.source = this;
      return observable2;
    };
    Subject2.create = function(destination, source) {
      return new AnonymousSubject(destination, source);
    };
    return Subject2;
  }(Observable);
  var AnonymousSubject = function(_super) {
    __extends(AnonymousSubject2, _super);
    function AnonymousSubject2(destination, source) {
      var _this = _super.call(this) || this;
      _this.destination = destination;
      _this.source = source;
      return _this;
    }
    AnonymousSubject2.prototype.next = function(value) {
      var _a2, _b;
      (_b = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.next) === null || _b === void 0 ? void 0 : _b.call(_a2, value);
    };
    AnonymousSubject2.prototype.error = function(err) {
      var _a2, _b;
      (_b = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.error) === null || _b === void 0 ? void 0 : _b.call(_a2, err);
    };
    AnonymousSubject2.prototype.complete = function() {
      var _a2, _b;
      (_b = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.complete) === null || _b === void 0 ? void 0 : _b.call(_a2);
    };
    AnonymousSubject2.prototype._subscribe = function(subscriber) {
      var _a2, _b;
      return (_b = (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject2;
  }(Subject);
  const intParser = (v) => {
    if (!Number.isNaN(v))
      return parseInt(v, 10);
  };
  const floatParser = (v) => {
    if (!Number.isNaN(v))
      return parseFloat(v);
  };
  const boolParser = (v) => {
    if (typeof v === "boolean")
      return v;
    return !(v === "0" || v === "false");
  };
  const stringParser = (v) => typeof v === "string" ? v : void 0;
  const jsonParser = (v) => {
    try {
      if (typeof v !== "string")
        throw new Error();
      return JSON.parse(v);
    } catch (e) {
      return void 0;
    }
  };
  const stringArrayParser = (v) => {
    const v_array = typeof v === "string" ? v.split(",") : null;
    if (Array.isArray(v_array) && v_array.length > 0)
      return v_array;
  };
  const envDefinitions = {
    ADDRESS_POISONING_FAMILIES: {
      def: "evm,tron",
      parser: stringParser,
      desc: "List of families impacted by the address poisoning attack"
    },
    ANALYTICS_CONSOLE: {
      def: false,
      parser: boolParser,
      desc: "Show tracking overlays on the app UI"
    },
    DEBUG_THEME: {
      def: false,
      parser: boolParser,
      desc: "Show theme debug overlay UI"
    },
    API_ICP_ENDPOINT: {
      def: "https://icp.coin.ledger.com/",
      parser: stringParser,
      desc: "Rosetta API for ICP"
    },
    APTOS_API_ENDPOINT: {
      def: "https://apt.coin.ledger.com/node/v1",
      parser: stringParser,
      desc: "API enpoint for Aptos"
    },
    APTOS_TESTNET_API_ENDPOINT: {
      def: "https://apt.coin.ledger-stg.com/node/v1",
      parser: stringParser,
      desc: "API enpoint for Aptos"
    },
    APTOS_INDEXER_ENDPOINT: {
      def: "https://apt.coin.ledger.com/node/v1/graphql",
      parser: stringParser,
      desc: "Indexer endpoint for Aptos"
    },
    APTOS_TESTNET_INDEXER_ENDPOINT: {
      def: "https://apt.coin.ledger-stg.com/node/v1/graphql",
      parser: stringParser,
      desc: "Indexer endpoint for Aptos"
    },
    API_CASPER_INDEXER_ENDPOINT: {
      parser: stringParser,
      def: "https://casper.coin.ledger.com/indexer",
      desc: "Casper API url indexer"
    },
    API_CASPER_NODE_ENDPOINT: {
      parser: stringParser,
      def: "https://casper.coin.ledger.com/node/",
      desc: "Casper API url node"
    },
    API_ALGORAND_BLOCKCHAIN_EXPLORER_API_ENDPOINT: {
      def: "https://algorand.coin.ledger.com",
      parser: stringParser,
      desc: "Node API endpoint for algorand"
    },
    API_CELO_INDEXER: {
      def: "https://celo.coin.ledger.com/indexer/",
      parser: stringParser,
      desc: "Explorer API for celo"
    },
    API_CELO_NODE: {
      def: "https://celo.coin.ledger.com/archive/",
      parser: stringParser,
      desc: "Node endpoint for celo"
    },
    COSMOS_GAS_AMPLIFIER: {
      def: 1.3,
      // Same as Keplr
      parser: intParser,
      desc: "Cosmos gas estimate multiplier"
    },
    API_FILECOIN_ENDPOINT: {
      parser: stringParser,
      def: "https://filecoin.coin.ledger.com",
      desc: "Filecoin API url"
    },
    API_STACKS_ENDPOINT: {
      parser: stringParser,
      def: "https://stacks.coin.ledger.com",
      desc: "Stacks API url"
    },
    API_POLKADOT_INDEXER: {
      parser: stringParser,
      def: "https://polkadot.coin.ledger.com",
      desc: "Explorer API for polkadot"
    },
    API_POLKADOT_SIDECAR: {
      parser: stringParser,
      def: "https://polkadot-sidecar.coin.ledger.com",
      desc: "Polkadot Sidecar API url"
    },
    API_POLKADOT_SIDECAR_CREDENTIALS: {
      parser: stringParser,
      def: "",
      desc: "Polkadot Sidecar API credentials"
    },
    API_POLKADOT_NODE: {
      parser: stringParser,
      def: "https://polkadot-fullnodes.api.live.ledger.com",
      desc: "Polkadot Node"
    },
    ELROND_API_ENDPOINT: {
      parser: stringParser,
      def: "https://elrond.coin.ledger.com",
      desc: "Elrond API url"
    },
    ELROND_DELEGATION_API_ENDPOINT: {
      parser: stringParser,
      def: "https://delegations-elrond.coin.ledger.com",
      desc: "Elrond DELEGATION API url"
    },
    API_STELLAR_HORIZON: {
      parser: stringParser,
      def: "https://stellar.coin.ledger.com",
      desc: "Stellar Horizon API url"
    },
    API_STELLAR_HORIZON_FETCH_LIMIT: {
      parser: intParser,
      def: 100,
      desc: "Limit of operation that Horizon will fetch per page"
    },
    API_STELLAR_HORIZON_STATIC_FEE: {
      def: false,
      parser: boolParser,
      desc: "Static fee for Stellar account"
    },
    API_TEZOS_BAKER: {
      parser: stringParser,
      def: "https://tezos-bakers.api.live.ledger.com",
      desc: "bakers API for tezos"
    },
    API_TEZOS_BLOCKCHAIN_EXPLORER_API_ENDPOINT: {
      def: "https://xtz-explorer.api.live.ledger.com/explorer",
      parser: stringParser,
      desc: "Ledger explorer API for tezos"
    },
    API_TEZOS_TZKT_API: {
      def: "https://xtz-tzkt-explorer.api.live.ledger.com",
      parser: stringParser,
      desc: "tzkt.io explorer"
    },
    API_TEZOS_NODE: {
      def: "https://xtz-node.api.live.ledger.com",
      parser: stringParser,
      desc: "node API for tezos (for broadcast only)"
    },
    API_TRONGRID_PROXY: {
      parser: stringParser,
      def: "https://tron.coin.ledger.com",
      desc: "proxy url for trongrid API"
    },
    API_SOLANA_PROXY: {
      parser: stringParser,
      def: "https://solana.coin.ledger.com",
      desc: "proxy url for solana API"
    },
    SOLANA_VALIDATORS_APP_BASE_URL: {
      parser: stringParser,
      def: "https://earn.api.live.ledger.com/v0/network/solana/validator-details",
      desc: "base url for validators.app validator list"
    },
    SOLANA_TESTNET_VALIDATORS_APP_BASE_URL: {
      parser: stringParser,
      def: "https://validators-solana.coin.ledger.com/api/v1/validators",
      desc: "base url for testnet validators.app validator list"
    },
    SOLANA_TX_CONFIRMATION_TIMEOUT: {
      def: 100 * 1e3,
      parser: intParser,
      desc: "solana transaction broadcast confirmation timeout"
    },
    API_HEDERA_MIRROR: {
      def: "https://hedera.coin.ledger.com",
      parser: stringParser,
      desc: "mirror node API for Hedera"
    },
    API_VECHAIN_THOREST: {
      def: "https://vechain.coin.ledger.com",
      parser: stringParser,
      desc: "Thorest API for VeChain"
    },
    BASE_SOCKET_URL: {
      def: "wss://scriptrunner.api.live.ledger.com/update",
      parser: stringParser,
      desc: "Ledger script runner API"
    },
    BOT_TIMEOUT_SCAN_ACCOUNTS: {
      def: 10 * 60 * 1e3,
      parser: intParser,
      desc: "bot's default timeout for scanAccounts"
    },
    BOT_SPEC_DEFAULT_TIMEOUT: {
      def: 30 * 60 * 1e3,
      parser: intParser,
      desc: "define the default value of spec.skipMutationsTimeout (if not overriden by spec)"
    },
    BUY_API_BASE: {
      def: "https://buy.api.live.ledger.com/buy/v1",
      parser: stringParser,
      desc: "Buy crypto API base url - version 1"
    },
    CARDANO_API_ENDPOINT: {
      def: "https://cardano.coin.ledger.com/api",
      parser: stringParser,
      desc: "Cardano API url"
    },
    CARDANO_TESTNET_API_ENDPOINT: {
      def: "https://testnet-ledger.cardanoscan.io/api",
      parser: stringParser,
      desc: "Cardano API url"
    },
    ICON_NODE_ENDPOINT: {
      parser: stringParser,
      def: "https://icon.coin.ledger.com/api/v3",
      desc: "ICON RPC url"
    },
    ICON_DEBUG_ENDPOINT: {
      parser: stringParser,
      def: "https://icon.coin.ledger.com/api/v3d",
      desc: "ICON debug RPC url"
    },
    ICON_INDEXER_ENDPOINT: {
      parser: stringParser,
      def: "https://icon.coin.ledger.com/api/v1",
      desc: "ICON API url"
    },
    ICON_TESTNET_NODE_ENDPOINT: {
      parser: stringParser,
      def: "https://berlin.net.solidwallet.io/api/v3",
      desc: "ICON Berlin Testnet API url"
    },
    ICON_TESTNET_DEBUG_ENDPOINT: {
      parser: stringParser,
      def: "https://berlin.net.solidwallet.io/api/v3d",
      desc: "ICON Berlin Testnet debug"
    },
    ICON_TESTNET_INDEXER_ENDPOINT: {
      parser: stringParser,
      def: "https://tracker.berlin.icon.community/api/v1",
      desc: "ICON Berlin Testnet API url"
    },
    COINAPPS: {
      def: "",
      parser: stringParser,
      desc: "(dev feature) defines the folder for speculos mode that contains Nano apps binaries (.elf) in a specific structure: <device>/<firmware>/<appName>/app_<appVersion>.elf"
    },
    CRYPTO_ORG_INDEXER: {
      def: "https://cryptoorg-rpc-indexer.coin.ledger.com",
      parser: stringParser,
      desc: "location of the Cronos POS Chain (formerly Crypto.org) indexer API"
    },
    CRYPTO_ORG_TESTNET_INDEXER: {
      def: "https://cronos-pos.org/explorer/croeseid4",
      parser: stringParser,
      desc: "location of the Cronos POS Chain (formerly Crypto.org) indexer testnet API"
    },
    CRYPTO_ORG_RPC_URL: {
      def: "https://cryptoorg-rpc-node.coin.ledger.com",
      parser: stringParser,
      desc: "location of the Cronos POS Chain (formerly Crypto.org) chain node"
    },
    CRYPTO_ORG_TESTNET_RPC_URL: {
      def: "https://rpc-testnet-croeseid-4.crypto.org",
      parser: stringParser,
      desc: "location of the Cronos POS Chain (formerly Crypto.org) chain testnet node"
    },
    DEBUG_UTXO_DISPLAY: {
      def: 4,
      parser: intParser,
      desc: "define maximum number of utxos to display in CLI"
    },
    DEBUG_HTTP_RESPONSE: {
      def: false,
      parser: boolParser,
      desc: "includes HTTP response body in logs"
    },
    DEVICE_CANCEL_APDU_FLUSH_MECHANISM: {
      def: true,
      parser: boolParser,
      desc: "enable a mechanism that send a 0x00 apdu to force device to awake from its 'Processing' UI state"
    },
    DEVICE_PROXY_URL: {
      def: "",
      parser: stringParser,
      desc: "enable a proxy to use instead of a physical device"
    },
    DEVICE_PROXY_MODEL: {
      def: "nanoS",
      parser: stringParser,
      desc: "allow to override the default model of a proxied device"
    },
    DISABLE_TRANSACTION_BROADCAST: {
      def: false,
      parser: boolParser,
      desc: "disable broadcast of transactions"
    },
    DISABLE_SYNC_TOKEN: {
      def: true,
      parser: boolParser,
      desc: "disable a problematic mechanism of our API"
    },
    DISABLE_FW_UPDATE_VERSION_CHECK: {
      def: false,
      parser: boolParser,
      desc: "disable the version check for firmware update eligibility"
    },
    DETOX: {
      def: "",
      parser: stringParser,
      desc: "switch the app into a DETOX mode for test purpose. Avoid falsy values."
    },
    EIP1559_MINIMUM_FEES_GATE: {
      def: true,
      parser: boolParser,
      desc: "prevents the user from doing an EIP1559 transaction with fees too low"
    },
    EIP1559_PRIORITY_FEE_LOWER_GATE: {
      def: 0.85,
      parser: floatParser,
      desc: "minimum priority fee percents allowed compared to network conditions allowed when EIP1559_MINIMUM_FEES_GATE is activated"
    },
    EIP1559_BASE_FEE_MULTIPLIER: {
      def: 1.27,
      parser: floatParser,
      desc: "mutiplier for the base fee that is composing the maxFeePerGas property"
    },
    EXPERIMENTAL_BLE: {
      def: false,
      parser: boolParser,
      desc: "enable experimental support of Bluetooth"
    },
    EXPERIMENTAL_CURRENCIES: {
      def: "",
      parser: stringParser,
      desc: "enable experimental support of currencies (comma separated)"
    },
    EXPERIMENTAL_EXPLORERS: {
      def: false,
      parser: boolParser,
      desc: "enable experimental explorer APIs"
    },
    EXPERIMENTAL_LANGUAGES: {
      def: false,
      parser: boolParser,
      desc: "enable experimental languages"
    },
    EXPERIMENTAL_MANAGER: {
      def: false,
      parser: boolParser,
      desc: "enable an experimental version of Manager"
    },
    EXPERIMENTAL_ROI_CALCULATION: {
      def: false,
      parser: boolParser,
      desc: "enable an experimental version of the portfolio percentage calculation"
    },
    EXPERIMENTAL_SEND_MAX: {
      def: false,
      parser: boolParser,
      desc: "force enabling SEND MAX even if not yet stable"
    },
    EXPERIMENTAL_USB: {
      def: false,
      parser: boolParser,
      desc: "enable an experimental implementation of USB support"
    },
    EXPERIMENTAL_SWAP: {
      def: false,
      parser: boolParser,
      desc: "enable an experimental swap interface"
    },
    EXPLORER: {
      def: "https://explorers.api.live.ledger.com",
      parser: stringParser,
      desc: "Ledger generic explorer API"
    },
    EXPLORER_STAGING: {
      def: "https://explorers.api-01.live.ledger-stg.com",
      parser: stringParser,
      desc: "Ledger staging explorer API"
    },
    EXPLORER_BETA: {
      def: "https://explorers.api.live.ledger.com",
      parser: stringParser,
      desc: "Ledger generic explorer beta API"
    },
    EXPLORER_SATSTACK: {
      def: "http://localhost:20000",
      parser: stringParser,
      desc: "Ledger satstack Bitcoin explorer API"
    },
    EXPORT_EXCLUDED_LOG_TYPES: {
      def: "ble-frame",
      parser: stringParser,
      desc: "comma-separated list of excluded log types for exported logs"
    },
    EXPORT_MAX_LOGS: {
      def: 5e3,
      parser: intParser,
      desc: "maximum logs to keep for export"
    },
    DISABLE_APP_VERSION_REQUIREMENTS: {
      def: false,
      parser: boolParser,
      desc: "force an old application version to be accepted regardless of its version"
    },
    FORCE_PROVIDER: {
      def: 1,
      parser: intParser,
      desc: "use a different provider for app store (for developers only)"
    },
    FILTER_ZERO_AMOUNT_ERC20_EVENTS: {
      def: true,
      parser: boolParser,
      desc: "Remove filter of address poisoning"
    },
    GET_CALLS_RETRY: {
      def: 2,
      parser: intParser,
      desc: "how many times to retry a GET http call"
    },
    GET_CALLS_TIMEOUT: {
      def: 60 * 1e3,
      parser: intParser,
      desc: "how much time to timeout a GET http call"
    },
    HIDE_EMPTY_TOKEN_ACCOUNTS: {
      def: false,
      parser: boolParser,
      desc: "hide the sub accounts when they are empty"
    },
    KEYCHAIN_OBSERVABLE_RANGE: {
      def: 0,
      parser: intParser,
      desc: "overrides the gap limit specified by BIP44 (default to 20)"
    },
    LEDGER_CLIENT_VERSION: {
      def: "",
      parser: stringParser,
      desc: "the 'X-Ledger-Client-Version' HTTP header to use for queries to Ledger APIs"
    },
    LEDGER_COUNTERVALUES_API: {
      def: "https://countervalues.live.ledger.com",
      parser: stringParser,
      desc: "Ledger countervalues API"
    },
    LEDGER_REST_API_BASE: {
      def: "https://explorers.api.live.ledger.com",
      parser: stringParser,
      desc: "DEPRECATED"
    },
    LEGACY_KT_SUPPORT_TO_YOUR_OWN_RISK: {
      def: false,
      parser: boolParser,
      desc: "enable sending to KT accounts. Not tested."
    },
    MANAGER_API_BASE: {
      def: "https://manager.api.live.ledger.com/api",
      parser: stringParser,
      desc: "Ledger Manager API"
    },
    MANAGER_DEV_MODE: {
      def: false,
      parser: boolParser,
      desc: "enable visibility of utility apps in Manager"
    },
    MANAGER_INSTALL_DELAY: {
      def: 1e3,
      parser: intParser,
      desc: "defines the time to wait before installing apps to prevent known glitch (<=1.5.5) when chaining installs"
    },
    MAPPING_SERVICE: {
      def: "https://mapping-service.api.ledger.com",
      parser: stringParser,
      desc: ""
    },
    MAX_ACCOUNT_NAME_SIZE: {
      def: 50,
      parser: intParser,
      desc: "maximum size of account names"
    },
    MOCK: {
      def: "",
      parser: stringParser,
      desc: "switch the app into a MOCK mode for test purpose, the value will be used as a seed for the rng. Avoid falsy values."
    },
    MOCK_COUNTERVALUES: {
      def: "",
      parser: stringParser,
      desc: "switch the countervalues resolution into a MOCK mode for test purpose"
    },
    MOCK_APP_UPDATE: {
      def: false,
      parser: boolParser,
      desc: "Always shows app update in the manager"
    },
    /**
     * Note: the mocked cryptoassets config and test partner are signed with the
     * Ledger test private key
     */
    MOCK_EXCHANGE_TEST_CONFIG: {
      def: false,
      parser: boolParser,
      desc: "mock the cryptoassets config and test partner (in the context of app-exchange)"
    },
    MOCK_EXCHANGE_TEST_PARTNER: {
      def: false,
      parser: boolParser,
      desc: "change CAL partner context to test"
    },
    MOCK_REMOTE_LIVE_MANIFEST: {
      def: "",
      parser: stringParser,
      desc: "mock remote live app manifest"
    },
    MOCK_OS_VERSION: {
      def: "",
      parser: stringParser,
      desc: "if defined, overrides the os and version. format: os@version. Example: Windows_NT@6.1.7601"
    },
    MOCK_NO_BYPASS: {
      def: false,
      parser: boolParser,
      desc: "if defined, avoids bypass of the currentDevice in the store."
    },
    NFT_CURRENCIES: {
      def: ["avalanche_c_chain", "bsc", "ethereum", "polygon"],
      parser: stringArrayParser,
      desc: "set the currencies where NFT is active"
    },
    NFT_ETH_METADATA_SERVICE: {
      def: "https://nft.api.live.ledger.com",
      parser: stringParser,
      desc: "service uri used to get the metadata of an nft"
    },
    OPERATION_ADDRESSES_LIMIT: {
      def: 100,
      parser: intParser,
      desc: "limit the number of addresses in from/to of operations"
    },
    OPERATION_OPTIMISTIC_RETENTION: {
      def: 30 * 60 * 1e3,
      parser: intParser,
      desc: "timeout to keep an optimistic operation that was broadcasted but not yet visible from the coin implementation or the API"
    },
    OPERATION_PAGE_SIZE_INITIAL: {
      def: 100,
      parser: intParser,
      desc: "defines the initial default operation length page to use"
    },
    POLKADOT_ELECTION_STATUS_THRESHOLD: {
      def: 25,
      parser: intParser,
      desc: "in blocks - number of blocks before Polkadot election effectively opens to consider it as open and disable all staking features"
    },
    SATSTACK: {
      def: false,
      parser: boolParser,
      desc: "Switch to satstack mode"
    },
    SCAN_FOR_INVALID_PATHS: {
      def: false,
      parser: boolParser,
      desc: "enable searching accounts in exotic derivation paths"
    },
    SEED: {
      def: "",
      parser: stringParser,
      desc: "(dev feature) seed to be used by speculos (device simulator)"
    },
    SHOW_LEGACY_NEW_ACCOUNT: {
      def: false,
      parser: boolParser,
      desc: "allow the creation of legacy accounts"
    },
    SIMPLE_HASH_API_BASE: {
      def: "https://simplehash.api.live.ledger.com/api/v0",
      parser: stringParser,
      desc: "SimpleHash API base url"
    },
    SKIP_ONBOARDING: {
      def: false,
      parser: boolParser,
      desc: "dev flag to skip onboarding flow"
    },
    SPECULOS_API_PORT: {
      def: 0,
      parser: intParser,
      desc: "API port for speculos"
    },
    SPECULOS_PID_OFFSET: {
      def: 0,
      parser: intParser,
      desc: "offset to be added to the speculos pid and avoid collision with other instances"
    },
    /**
     * It's just here as a backup, the REST API is supposed to be the right mode
     * We can always fallback on the previous method if we need to.
     * The websocket option is harmless, we can remove it at some point but let's
     * keep it for a while just in case.
     * Introduced on June 27th 2023 by https://github.com/LedgerHQ/ledger-live/pull/3824
     */
    SPECULOS_USE_WEBSOCKET: {
      def: false,
      parser: boolParser,
      desc: "Use speculos websocket interface instead of Rest API"
    },
    SWAP_API_BASE: {
      def: "https://swap.ledger.com/v5",
      parser: stringParser,
      desc: "Swap API base"
    },
    SWAP_USER_IP: {
      def: "",
      parser: stringParser,
      desc: "Swap IP"
    },
    SWAP_DISABLE_APPS_INSTALL: {
      def: false,
      parser: boolParser,
      desc: "bypass app checks on Nano for speculos swap tests"
    },
    SYNC_ALL_INTERVAL: {
      def: 8 * 60 * 1e3,
      parser: intParser,
      desc: "delay between successive sync"
    },
    SYNC_BOOT_DELAY: {
      def: 2 * 1e3,
      parser: intParser,
      desc: "delay before the sync starts"
    },
    SYNC_PENDING_INTERVAL: {
      def: 10 * 1e3,
      parser: intParser,
      desc: "delay between sync when an operation is still pending"
    },
    SYNC_OUTDATED_CONSIDERED_DELAY: {
      def: 10 * 60 * 1e3,
      parser: intParser,
      desc: "delay until Live consider a sync outdated"
    },
    SYNC_MAX_CONCURRENT: {
      def: 4,
      parser: intParser,
      desc: "maximum limit to synchronize accounts concurrently to limit overload"
    },
    BOT_MAX_CONCURRENT: {
      def: 10,
      parser: intParser,
      desc: "maximum limit to run bot spec in parallel"
    },
    USER_ID: {
      def: "",
      parser: stringParser,
      desc: "unique identifier of app instance. used to derivate dissociated ids for difference purposes (e.g. the firmware update incremental deployment)."
    },
    WALLETCONNECT: {
      def: false,
      parser: boolParser,
      desc: "is walletconnect enabled"
    },
    CLOUD_SYNC_API_STAGING: {
      def: "https://cloud-sync-backend.api.aws.stg.ldg-tech.com",
      parser: stringParser,
      desc: "wallet sync api staging base url"
    },
    CLOUD_SYNC_API_PROD: {
      def: "https://cloud-sync.api.live.ledger.com",
      parser: stringParser,
      desc: "wallet sync api production base url"
    },
    WITH_DEVICE_POLLING_DELAY: {
      def: 500,
      parser: floatParser,
      desc: "delay when polling device"
    },
    ANNOUNCEMENTS_API_URL: {
      def: "https://cdn.live.ledger.com/announcements",
      parser: stringParser,
      desc: "url used to fetch new announcements"
    },
    ANNOUNCEMENTS_API_VERSION: {
      def: 1,
      parser: intParser,
      desc: "version used for the announcements api"
    },
    STATUS_API_URL: {
      def: "https://ledger.statuspage.io/api",
      parser: stringParser,
      desc: "url used to fetch ledger status"
    },
    STATUS_API_VERSION: {
      def: 2,
      parser: intParser,
      desc: "version used for ledger status api"
    },
    TEZOS_MAX_TX_QUERIES: {
      def: 100,
      parser: intParser,
      desc: "safe max on maximum number of queries to synchronize a tezos account"
    },
    TRUSTCHAIN_API_STAGING: {
      def: "https://trustchain-backend.api.aws.stg.ldg-tech.com",
      parser: stringParser,
      desc: "Trustchain API Staging"
    },
    TRUSTCHAIN_API_PROD: {
      def: "https://trustchain.api.live.ledger.com",
      parser: stringParser,
      desc: "Trustchain API Prod"
    },
    PLATFORM_DEBUG: {
      def: false,
      parser: boolParser,
      desc: "enable visibility of debug apps and tools in Platform Catalog"
    },
    PLATFORM_EXPERIMENTAL_APPS: {
      def: false,
      parser: boolParser,
      desc: "enable visibility of experimental apps and tools in Platform Catalog"
    },
    PLATFORM_MANIFEST_API_URL: {
      def: "https://live-app-catalog.ledger.com/api/v1/apps",
      parser: stringParser,
      desc: "url used to fetch platform app manifests"
    },
    PLATFORM_LOCAL_MANIFEST_JSON: {
      def: "",
      parser: stringParser,
      desc: 'json manifest for a local (test) platform app manifests. How to use: PLATFORM_LOCAL_MANIFEST_JSON="$(cat /path/to/file.json)"'
    },
    PLATFORM_GLOBAL_CATALOG_API_URL: {
      def: "https://cdn.live.ledger.com/platform/catalog/v1/data.json",
      parser: stringParser,
      desc: "url used to fetch platform app manifests"
    },
    PLATFORM_GLOBAL_CATALOG_STAGING_API_URL: {
      def: "https://cdn.live.ledger-stg.com/platform/catalog/v1/data.json",
      parser: stringParser,
      desc: "url used to fetch platform app manifests (staging)"
    },
    PLATFORM_RAMP_CATALOG_API_URL: {
      def: "https://cdn.live.ledger.com/platform/trade/v1/data.json",
      parser: stringParser,
      desc: "url used to fetch platform app manifests"
    },
    PLATFORM_RAMP_CATALOG_STAGING_API_URL: {
      def: "https://cdn.live.ledger-stg.com/platform/trade/v1/data.json",
      parser: stringParser,
      desc: "url used to fetch platform app manifests (staging)"
    },
    PLATFORM_API_URL: {
      def: "",
      parser: stringParser,
      desc: "url used to fetch platform catalog"
    },
    PLATFORM_API_VERSION: {
      def: 1,
      parser: intParser,
      desc: "version used for the platform api"
    },
    PLAYWRIGHT_RUN: {
      def: false,
      parser: boolParser,
      desc: "true when launched for E2E testing"
    },
    MARKET_API_URL: {
      def: "https://proxycg.api.live.ledger.com/api/v3",
      parser: stringParser,
      desc: "Market data api"
    },
    USE_LEARN_STAGING_URL: {
      def: false,
      parser: boolParser,
      desc: "use the staging URL for the learn page"
    },
    DYNAMIC_CAL_BASE_URL: {
      def: "https://cdn.live.ledger.com/cryptoassets",
      parser: stringParser,
      desc: "bucket S3 of the dynamic cryptoassets list"
    },
    CAL_SERVICE_URL: {
      def: "https://crypto-assets-service.api.ledger.com",
      parser: stringParser,
      desc: "Cryptoassets list service url"
    },
    FEATURE_FLAGS: {
      def: "{}",
      parser: jsonParser,
      desc: "key value map for feature flags: {[key in FeatureId]?: Feature]}"
    },
    PERFORMANCE_CONSOLE: {
      def: false,
      parser: boolParser,
      desc: "Show a performance overlay on the app UI"
    },
    ETHEREUM_STUCK_TRANSACTION_TIMEOUT: {
      def: 5 * 60 * 1e3,
      parser: intParser,
      desc: "Time after which an optimisc operation is considered stuck"
    },
    EVM_REPLACE_TX_LEGACY_GASPRICE_FACTOR: {
      def: 1.3,
      parser: floatParser,
      desc: "Replace transaction gasprice factor for legacy evm transaction. This value should be 1.1 minimum since this is the minimum increase required by most nodes"
    },
    EVM_REPLACE_TX_EIP1559_MAXFEE_FACTOR: {
      def: 1.3,
      parser: floatParser,
      desc: "Replace transaction max fee factor for EIP1559 evm transaction. This value should be 1.1 minimum since this is the minimum increase required by most nodes"
    },
    EVM_REPLACE_TX_EIP1559_MAXPRIORITYFEE_FACTOR: {
      def: 1.1,
      parser: floatParser,
      desc: "Replace transaction max priority fee factor for EIP1559 evm transaction. This value should be 1.1 minimum since this is the minimum increase required by most nodes"
    },
    EVM_FORCE_LEGACY_TRANSACTIONS: {
      def: false,
      parser: boolParser,
      desc: "Force transaction type 0 on EVM networks"
    },
    ENABLE_NETWORK_LOGS: {
      def: false,
      parser: boolParser,
      desc: "Enable network request and responses logs. Errors are always logged"
    },
    CRYPTO_ASSET_SEARCH_KEYS: {
      def: ["ticker", "name", "keywords"],
      parser: stringArrayParser,
      desc: "Fuse search attributes to find a currency according to user input"
    },
    VERBOSE: {
      def: [],
      parser: stringArrayParser,
      desc: 'Sets up debug console printing of logs. `VERBOSE=1` or `VERBOSE=true`: to print all logs | `VERBOSE="apdu,hw,transport,hid-verbose"` : filtering on a list of log `type` separated by a `,`'
    },
    DEFAULT_TRANSACTION_POLLING_INTERVAL: {
      def: 30 * 1e3,
      parser: intParser,
      desc: "Default interval to poll for transaction confirmation in speedup/cancel evm flow (in ms)"
    },
    LOW_BATTERY_PERCENTAGE: {
      def: 20,
      parser: intParser,
      desc: "Configure the low battery percentage threshold"
    },
    LOG_DRAWERS: {
      def: false,
      parser: boolParser,
      desc: "Enable logs for drawers"
    }
  };
  const defaults$2 = Object.keys(envDefinitions).reduce((acc, curr) => {
    return Object.assign(Object.assign({}, acc), { [curr]: envDefinitions[curr].def });
  }, {});
  Object.assign({}, defaults$2);
  new Subject();
  const version$1 = "strings/5.7.0";
  const logger$5 = new Logger(version$1);
  var UnicodeNormalizationForm;
  (function(UnicodeNormalizationForm2) {
    UnicodeNormalizationForm2["current"] = "";
    UnicodeNormalizationForm2["NFC"] = "NFC";
    UnicodeNormalizationForm2["NFD"] = "NFD";
    UnicodeNormalizationForm2["NFKC"] = "NFKC";
    UnicodeNormalizationForm2["NFKD"] = "NFKD";
  })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
  var Utf8ErrorReason;
  (function(Utf8ErrorReason2) {
    Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
    Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
    Utf8ErrorReason2["OVERRUN"] = "string overrun";
    Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
    Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
    Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
    Utf8ErrorReason2["OVERLONG"] = "overlong representation";
  })(Utf8ErrorReason || (Utf8ErrorReason = {}));
  function errorFunc(reason, offset, bytes2, output2, badCodepoint) {
    return logger$5.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes2);
  }
  function ignoreFunc(reason, offset, bytes2, output2, badCodepoint) {
    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
      let i2 = 0;
      for (let o = offset + 1; o < bytes2.length; o++) {
        if (bytes2[o] >> 6 !== 2) {
          break;
        }
        i2++;
      }
      return i2;
    }
    if (reason === Utf8ErrorReason.OVERRUN) {
      return bytes2.length - offset - 1;
    }
    return 0;
  }
  function replaceFunc(reason, offset, bytes2, output2, badCodepoint) {
    if (reason === Utf8ErrorReason.OVERLONG) {
      output2.push(badCodepoint);
      return 0;
    }
    output2.push(65533);
    return ignoreFunc(reason, offset, bytes2);
  }
  const Utf8ErrorFuncs = Object.freeze({
    error: errorFunc,
    ignore: ignoreFunc,
    replace: replaceFunc
  });
  function getUtf8CodePoints(bytes2, onError) {
    if (onError == null) {
      onError = Utf8ErrorFuncs.error;
    }
    bytes2 = arrayify(bytes2);
    const result = [];
    let i2 = 0;
    while (i2 < bytes2.length) {
      const c = bytes2[i2++];
      if (c >> 7 === 0) {
        result.push(c);
        continue;
      }
      let extraLength = null;
      let overlongMask = null;
      if ((c & 224) === 192) {
        extraLength = 1;
        overlongMask = 127;
      } else if ((c & 240) === 224) {
        extraLength = 2;
        overlongMask = 2047;
      } else if ((c & 248) === 240) {
        extraLength = 3;
        overlongMask = 65535;
      } else {
        if ((c & 192) === 128) {
          i2 += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i2 - 1, bytes2, result);
        } else {
          i2 += onError(Utf8ErrorReason.BAD_PREFIX, i2 - 1, bytes2, result);
        }
        continue;
      }
      if (i2 - 1 + extraLength >= bytes2.length) {
        i2 += onError(Utf8ErrorReason.OVERRUN, i2 - 1, bytes2, result);
        continue;
      }
      let res = c & (1 << 8 - extraLength - 1) - 1;
      for (let j = 0; j < extraLength; j++) {
        let nextChar = bytes2[i2];
        if ((nextChar & 192) != 128) {
          i2 += onError(Utf8ErrorReason.MISSING_CONTINUE, i2, bytes2, result);
          res = null;
          break;
        }
        res = res << 6 | nextChar & 63;
        i2++;
      }
      if (res === null) {
        continue;
      }
      if (res > 1114111) {
        i2 += onError(Utf8ErrorReason.OUT_OF_RANGE, i2 - 1 - extraLength, bytes2, result, res);
        continue;
      }
      if (res >= 55296 && res <= 57343) {
        i2 += onError(Utf8ErrorReason.UTF16_SURROGATE, i2 - 1 - extraLength, bytes2, result, res);
        continue;
      }
      if (res <= overlongMask) {
        i2 += onError(Utf8ErrorReason.OVERLONG, i2 - 1 - extraLength, bytes2, result, res);
        continue;
      }
      result.push(res);
    }
    return result;
  }
  function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
    if (form != UnicodeNormalizationForm.current) {
      logger$5.checkNormalize();
      str = str.normalize(form);
    }
    let result = [];
    for (let i2 = 0; i2 < str.length; i2++) {
      const c = str.charCodeAt(i2);
      if (c < 128) {
        result.push(c);
      } else if (c < 2048) {
        result.push(c >> 6 | 192);
        result.push(c & 63 | 128);
      } else if ((c & 64512) == 55296) {
        i2++;
        const c2 = str.charCodeAt(i2);
        if (i2 >= str.length || (c2 & 64512) !== 56320) {
          throw new Error("invalid utf-8 string");
        }
        const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
        result.push(pair >> 18 | 240);
        result.push(pair >> 12 & 63 | 128);
        result.push(pair >> 6 & 63 | 128);
        result.push(pair & 63 | 128);
      } else {
        result.push(c >> 12 | 224);
        result.push(c >> 6 & 63 | 128);
        result.push(c & 63 | 128);
      }
    }
    return arrayify(result);
  }
  function _toUtf8String(codePoints) {
    return codePoints.map((codePoint) => {
      if (codePoint <= 65535) {
        return String.fromCharCode(codePoint);
      }
      codePoint -= 65536;
      return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
    }).join("");
  }
  function toUtf8String(bytes2, onError) {
    return _toUtf8String(getUtf8CodePoints(bytes2, onError));
  }
  function id(text) {
    return keccak256(toUtf8Bytes(text));
  }
  const EIP712$1 = {
    "42161:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "3044022020da162d81217220a0ae92baec05c5e99cbb391469186e27b2609740980c7dff0220285603f10f261ae8a02779cb97033906c5a7901c9e3acae041c2385d17182290"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3044022060df9e42841cef20df24776b08774abf84cdeac36925b5c5817b02a57138718702200b8d4d0c56f01cbbee2334c9b62d05324382acc3e6ee0b5426871ee1117d921e"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3045022100de035d8c1fd5f7f03b113053bf0076b562faadaf767b86ad4cdde63cc7983daa0220422ad10026c955f944b4869b0018957682bb31a79918b6d9f01034ccfaf83a5c"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3045022100ff3a4e5bfefc86a65c1d24732f435f593b7f034254ed8d5c49ad837a09e30762022027e9f17d658dd815d40e7010eafe5a7f3da7d1d0f532471247a4490d04fcc473"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100f30c4f92e576a0aab8b3a86369fd68892bafd4920f47087c772b396ef125c4f40220023a0f6d598e64c64c731fb86a1a331d48558462422f85088d420872b386e367"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304502210086c4f94eb3334026efaf73cc99cdf0b63818eb259e1ccb52b143e9cf47465c79022036532d7b42c4fdf502b53f074d98aec07fa752ca324946917c3ba8f92ff7293e"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3044022050a705227d3b7b1ae5fb8bb170171b47ba7f54243df6b417f669bec5c6ae072902206d293823929e946f2207efea226dfa0e0e6f153729d5351e664da007bc75a6a1"
        }
      ]
    },
    "42161:0x7f069df72b7a39bce9806e3afaf579e54d8cf2b9:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "304502210086b3dfc9a254c1bedf6f227a6ba373df5830ed15c8cd076ab81ccdfa1d9704ea02201a322596fd79104092cfdf1bb50e625de21a5ae6621d324893533b5fd09bdf73"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "304402207836e75bba70bff3ac5c36cea8bba78c5ce37aeedaddee4d96f23ebdab274e2a022036076d9f85a3c5fab437e72dd64d12f12507ff34ee73828d5639a848dbac1f85"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3044022067f37bfce6e054bdeb307b7949eae73359f65fbe85eb79b8d88e6ac65169a06502207e9a91bac7ab6c0af97ba245a322dd64c8e6297cdfd85445b89f592b1e158d21"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "30440220435a279ff85928b3b0b16bc0a92cc7dbf4ab76d6d173d67f28588f131930ad7102207b433afc9626e1fbb4305a12a45d1895506b84ff02d80a6c132d8f4f9820bb87"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30440220411a6efe5337858634ba91743cb534e6748336d276a50cb0e0d15c31956cc82f02204e7306db34a14c64284d87fafc89a7b9ea58d0eca755034e1f6dd137671137fb"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402200f76c7710af7ef186f5673ab73685de1ae8af493a45d96bc83995cecf9824e030220576058fc7dd68808458730612078b92e65bb589aa1770a96ddac6ffc55cf6e05"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3045022100cd448518044c4bfd4a0773c00d700b62a35fe208d27771caaa4239743736f09102204064886c6f5272ea4545977fa1c9d075e3abba0655de494cc81bf969ade063bf"
        }
      ]
    },
    "42161:0x7f069df72b7a39bce9806e3afaf579e54d8cf2b9:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3044022017457b1725fc3af0932818d7f2e727510326094bebf470c313c726104201f4160220233662309328ebf5acf57c1a23384beb8d29b6c026c3084113b3d42e16ad3094"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100f26083b8baa79070fe0424f6b6f0cbe1a6c49a6f7aa00c322f1de5bc6634144202205f49700d5f3360654764353c9ef75a6bcb9940c2cc7a8d0fa3bca82c40ce96c3"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3045022100e4527604bde8bcc397947c9d1b3936b19aee70ea2eb702ae55dfc071efeccef3022033eeb350bf4f03741b3d0d420816a338f449ec7df33608f057038931c1f84fe9"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3045022100902220e354b11ccd4a16b4a4e91e3c2d4e8fd8448df6b41b8466c90c81bc2f2d02205a8dea6307bfda2b0b108c29c35e6a99ad2042a83fa70b8931f244a83c57cb51"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100eabd1e9fed349c12c341846d084b3a67898490bbd2adf0199452a2835faea5f60220017baf11b3d7c12982e2958befb485e15396ca7f6f7d1ee6ab758801ee5a4d16"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402204f4953b728d0776fdd0de8424bf611bfa89daaec9f7352d087eb86eb951130a3022030f94ca49d256a91dd3ccabae63d5acaf053ece9e9b103ac9b3529f49b58cd29"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304402203bdfeec857a64ca1eafba51d77d090936bed9dafc09ba461ced6c058b02758d402202546dd5ab8a003490c5fdc4a789ffeedb9656622ed2ac867d2c712c68ccab104"
        }
      ]
    },
    "42161:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "304502210085c3d02e3f1d2d9dc6bb9975e46e8b90e514d578d9e6974b10b3cc1bf4a2fe7f02205d2257c30412b9067a707f8cfa8da92b0336faa39a2bd7099d2b55e0a085b8cc"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3045022100ff187b0adc9b9e2b9aea716d4047d2ac92c44cd0d0f2b6ac09ec4b52d89e9dcb02200b18d913b72125c7a2d6083e2097f786979c04056b881e44957242982a81931f"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3044022038ca4d34df27f672a40cea96f4397c70148e07a29662601ad765e01c71a5aaf502203c88823e913193f5eff4b8f5eee72463b660b6d146f589151af2164de4d6bb28"
        },
        {
          label: "Maker asset address",
          path: "makerAsset",
          signature: "3044022058de4c432c785035fe20e160f7a98a9ebfb1152df0c61d679b0bf8cf838a3412022006447e72822301ca0fdd56cfeedd0ca04cdf018bb600df3f9b28d633e90b65a4"
        },
        {
          label: "Taker asset address",
          path: "takerAsset",
          signature: "3045022100dd48da4bd40c2ae4e389462e9792c67bf699749fcabf954e0121c7759a499ba4022011b3c12c7d356a8ec62a57643eea50fed6d831b9fe95f94a7b31c4d1ba8fd887"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "3044022074fb2c7f1569c685e740015a91deb0cfaf771d71ba0fffcd14c24d59023878fd02202488ff10efbf225f1750ba334dd885f7966b3be7d57b87bce966aa3aec7fc3b4"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "3045022100ec75b1e6c770ab39c3dec4c827af340b13750d55436002504e8d27872284749d022048dde24cfa5b564e04c3880febbe40650687ea0e85fc634d27f18b95c14f8e59"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402205ee3c0ebf4735b3e7209237a2c4a745ecaa8e0310a7e0b33651aaff4baadd10102205aab92e8cc4444f900e368502e8424d5d05d1216a71e8b4dfa1a30d7ecf29e01"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402202da05529a3b7efb5120658b02f7de224887517b67c26f6cae85c3b4a52d9dcdd022071ecb8acf9bb2ec27d3ef5564394a48192692c1214e3c98f87e651c7c6353994"
        }
      ]
    },
    "42161:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "304402205aa1d43c376b38e68d4cf0d9fa51da49572de9a7d5c8e2fa6f0bb1430b522abf02201e8c73865ecd95e36d106a2fd58e3eaa7a73d6181879aab9254d66e45dfbf16c"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "304402205cc7b36d3b1cf49f956486ba56c571474b1c2dc74776f3d73d1720f402578c9a0220781edc10e5ee70a56a65881b9a4510f2dc0227899664d6ff3c5ca0465ca4b6ef"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100d3d524282bcacd494cd6b72b148033f17fe05789032f5da58944863d24259ecc0220228df613f5d2d2f3662c3c35ad3316ba5a231d95b9fe95cfc39d433b9e0201d7"
        },
        {
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100c8e4bc97eabdd4b267c6733652b735c011cb353bcb14b61ca8b2c732a701db9302204f35ce83dc85008afd0a93608b531f0ea5d680472c077d8dc2a32cc5ccf581c4"
        },
        {
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "3045022100aeadd32775d3d63a1dde73c23fab6d7fef0375d5210728fd8f2ed56adbee5b220220462f3c126c78dd0fc9499005b5ce3b81c995f11c55e9cdaf55d19fb1686f853e"
        },
        {
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "3045022100f6ee6ab28521c9f282fcc897f165e780ec9b0fe9268f2a18beeb3c67922ca679022055a2d60bbc05145e3b55483b502c576066469c6d6fbb9ee3336a16b7b5df4900"
        },
        {
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "304402203c84ee7655fd53fbe7eefb9e7522eeceb29bb7f03559d5e0a92b1ee55e711dcb02200c99dd941f9e58b6b0f28e592c089dbcb245f73ebeddbab9e2e88defacd186df"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "30440220109b530322d864a1e29d431a00f0dcde1cd165a2ad11b021eef605074d4c9758022052f04b7e2a2cd70cae54a881c7f783fcc2058d5b2791b24bc557e4e231cc2dff"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "3045022100f85a6ad793151886d7b4fe8902f55b81e4db1ee73589e1ed180a3f9b2285288b022023d061e2f9694a086229fff173f351c630e907806e8e7f80e9fc154a510962ee"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100d97b6d8cadff2e066b43c0bf3cc363741dd3227c9989ead29a51466f2f1d9cf302205b76c51c2e2d2e75855acf5416be5e3a066b2e671884ae81343cedf9eb42b7c7"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "30440220249407bacec2053557a7360ec596daf931fd002c31f77acd94b151a035728bb7022050769d692217e817efb3f6845dfa293cfbeaa39f93b97dac2d063a4be7c44cf6"
        }
      ]
    },
    "42161:0x912ce59144191c1204e64559fe8253a0e49e6548:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Arbitrum transfers",
        signature: "304402200f7f97c35bb60e6f4052b2a129740c55e716fef26eb0a83a834bbe03d7d82c9e022047b2d37e4149990d28cf1b1b1f9caf803259cae2a343ff72000eddfa319de15f"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3045022100db5520b82af16dd2ac45775fe3db20db5c9829b47b847616b39fa1744685d13202202d1a2c60d5c500eb1119ea52951983c686327f81a0f08d06e58e18ee84486883"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220556ec93aa29917934f4a3626de9b9a2e9ec589446201981a05a860696d33e97d02207792c8caa52e5bc7236d81d11e71bdf9d2845a3b2d7b3a3e99e7371736152374"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "304402206874b15e518f42bcfdde97f409cf86624598ce619890f2c927506c36e1c70bc2022072a649d004485b701e95bdf16b0d7880852df6f3821a3fade0ecb99d947b2157"
        },
        {
          label: "Aproval expire",
          path: "deadline",
          signature: "30440220154b8581a690ee98338540152de43f833571c53113698d4c210745abc5883ac2022022d38615c362d630672aa9cdaa57d799824862e79ac356511055c0f989d80deb"
        }
      ]
    },
    "42161:0xff970a61a04b1ca14834a43f5de4533ebddb5cc8:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit USDC",
        signature: "3044022028314adc36ce0808ecb88517feae3291408503877c3bd9abcdb8b4b24de83f5102207a92d8ea367676eccba14c0aff75efd66b141debac865dd7749013cc306645de"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3045022100d2b596afa0df5133f55d692928734bd15d46fdab388a6f4f69df43420bc99a64022066c087594da4c6d57c24e2bb7c333e78290a1f7f8f9f8262aa4da0812bea1f60"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100834772d8adc519f3a5bd4a6ef33e45c8ef3dfd2c9290afe8e33cc57aa56c4dd802200d7306bf364284118da4710e9a9fae3a0e7e3579206cde4543158e85c3ff4b5b"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100ba188c9fa149de6daeb42904ccd2abc828da911585f983deb669b9bef2fa61a702204e2573968e6d1f61a4e608da485243ef946ce1ab9adab19c0a37514d4971cc5c"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100a72fb1d0a80c68a07076d873613f1f4152c9565a14c54a653a240b6c2f0ea38f02203534a46e31fba5f5c9db78b3f4eeb728b6c7b9580f270bfb1619dc28246c53e1"
        }
      ]
    },
    "42161:0x789fc99093b09ad01c34dc7251d0c89ce743e5a4:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e": {
      contractName: {
        label: "Arbitrum Foundation: Treasury Governor",
        signature: "304402200fa08b5ce686eaf6bb708211bd4bbfe2d4e278f6966ad2e481be73a472bb4b46022067481a8a0d0357e42592498b0e099f8b1313003c423595972bfbf19add008e58"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "3045022100a464daba1b2a7a35336e03fe0c68977597df0917dd14d40b5b794dc12dd1696a0220594ce98bf0fffd98a6717c26465b1c67f14955cd0013f0b9817d85d771ec0acc"
        },
        {
          label: "Support",
          path: "support",
          signature: "3044022051f41d12c90d0e82d9724f7fe43d5b9d035ba46c160fed7a9d6026b8317f80f7022057f325aaae71c60bdaa9bc371a5af9a1d4a5354a7f7dd6865c36faaa4ecf929d"
        }
      ]
    },
    "42161:0x912ce59144191c1204e64559fe8253a0e49e6548:2c3e6b3e91e39ef9bb3c1b1cd2b4d8da76bf433179c8042962671278": {
      contractName: {
        label: "ARB token",
        signature: "3045022100d083aa12bc96ed7568942bad291c90fa0710b984b6d8693021be961d99df15b702200d29db9c738e3fbd7dc3d21612833e32b5e2f197f8273662ce16e20058276a47"
      },
      fields: [
        {
          label: "Delegatee",
          path: "delegatee",
          signature: "304402205274148210b7cc92e2714d33d5c7c280ace94b9d09b41539af5056ddcb588b9b02204b104de75d5fb03f4ec1b455b9785a3c6f41a897142c40f88bd0e27a51ac940d"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "3045022100fdab6f7a16e999d0b0bd2fd4be92682a0c65cd5ae928ed3cd071b11ebe5fbc7702207cf139627f6e2aeee8b0b22fde9c1025cb847b2ba3b4d27a4726e596c284d62e"
        },
        {
          label: "Expiry",
          path: "expiry",
          signature: "30450221009d00f19bd6bc9f14502c0ab2ff54f372f00c6a153083898505f1b9fea585b70002205c1b4afbc7efc4fd027528917d107a95b5f24caba816806fd393d4e419dbdcde"
        }
      ]
    },
    "42161:0xf07ded9dc292157749b6fd268e37df6ea38395b9:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e": {
      contractName: {
        label: "Arbitrum Foundation: Core Governor",
        signature: "3045022100e328451e523340c7f0c6229d69a9196703d33a9aa4920cc775ef4c254eba08b402204d3c4a0be0a1aa383c6895db61ff07623fb000773713a62e56bf107fa8a852d4"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "304502210087d449414d2e9d6466e5b9fc5a2a4c0f93e13b6674fb6f3b5673ad3fcc8780f802204b9e8b83c62042f4f4326d975b0f7e9ac8490d19a2d04f2e26568c3433444783"
        },
        {
          label: "Support",
          path: "support",
          signature: "3044022023b69aa0f439df05ae5be7d03df5fd69ce8a01fce764bc1c8455d2c92106bc85022027866dbb7c5e09eb70f90329dcb59c90a87da90f2b77d17c1f74a9c2e0f663db"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "30440220699737c39cd9763b66d094ef1d30d3985c4f11bc77007df7fdfe3fd5f3d80ec8022003eca58128646ba5cc121bb97c12ab5c9bf36bb9c5f9146377edd55845d4aff2"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100efa855d1d8d09a5234f3e8b307c84ef59871baf73d3233faaecc3a4e1c3747c502203f452a44cc4e298f43a23599291fd21b7048c1003b9e936433c1c3162af7ef9b"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402203d79ec67dc90bc4313a635f4b36295d4c15f3bfea21c92597e968e67573cc5fe02201530a640ddbea23cfc968d9e869ed510b15552343c34ebd01bfa07a1b1c29100"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30450221008eecd0e1f432daf722fd00c54038a4cd4d96624cc117ddfb12c7ed10a59b260d02203d34c811a5918c2654e301a071b624088aa9a0813f19dbfa1c803f3dcec64557"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "304402205f583663ca8fb88b0cc9e507ec6fc86f2fb4815a79bf1b0c551ea5b812019152022054bbea380363ef360d49b07d441a54ee5cd82f207efd855edef221a62109e4ea"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100e322fbcf244d817c6af9e807d36f5a0eb2db21309c07963e826ab5d20c7dc278022068ecb28b65f9844d40ef09e7b141bb220d30d25a42f6ba4a648110901a79c191"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b9f0229134290af4cfeb549204eb02bf34f084b1d0a7c8f161e6beace10dcf1b02203ef40e4c9e88b83a85f0af47b54fa142741bb52ef26302c8aa46b0b274d02fd2"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022000fa125d0c29fbf34da4a6f690857aee73185f5eac7bd8aa5a30f89c91a0e0d2022000bd77b100224b5a89c1aec387dc5a252588a1086958afa1764224da0209bd1a"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100baaccc98644dde5f8cc244e052d8c826e3c1431f444f1f6db3f79413f0f5612302201b6e4b36e8eded626dc04f5d5b4260c83cf43a203e040259cb38f145e13632dc"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022011b7def88426cb6b1b9f6aed60d260774c3f9c2772edc20fb9d678eafecf1d8a02200e8dbacc49e39edf3f04cfd4467f3abc25e6de1e26619a931ee9cd4e28d26b1e"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "304402203623c139b4a7b2b887fbcd197fd35efed9577f7a097e4b4796c35db809e257a802207494069d25e1891a6e846cdaf7d8deb55d9c4e7d2d0cb9455ace4d840a5a86cb"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402202b9e93d841f3f81b63f31cc974d7204bd9c7c00ff57e7021ce3296225b605f04022026293bf2777b6b1971b5fee2c6aeb5e07623f6acd715f39de88796774d931dab"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100b927a3639c291f1c5f5a4459ee6e9eeb172e4fff2639cf2417a0ee22668ee785022016f22532a98ce38d2fec2956118eb67b80c748e012e2e9cc119a84618fd356c3"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022070df47bd9af9e8f70ba486b5188cd24ff2a6a7b7963a628608936986713eb108022023440cee1a31e3d73489a849ec925a85da16d1c096b3029d4337eeaf46a26d4a"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022034c36e86566f7ad86131fdd1f1d2f1b203bbb8f0c80f90ef7b828b603b383a8f02207944fdfc150467a83b580314ee2935df5e22cc8c8e70924755f24e0f48fd6070"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304502210087b5fd4ca85d8d902459aabf0cfb97c676809c967b84c8a8301838f54d2f144602200d268e03f892d81b35ac1bd493310f4fb65a202c2ad2ebec3f427978756b3106"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b5e936abd5df8c51ae2ee04b8f06e58162c5702083fddce3494b19c9bc9c2e01022032e9c8fdfd04c78d70d0f1e03e1fe716afc7bb2d2f643cb4586316e87a7c2150"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30450221008f6d92026f956e9a4635ea2877fcff52b58349050e14e446175d668464090fed022051ace7037868f8984aa208c8d9b7d8a94cd22a93b83e9ca8911227d0f5e5747b"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220659cebc0ec70ec020a1c0ec8dd6a4ce650a836ceddda28d9c26d01404ce03bf402205ff6c87cace6b7b575a341347d81927a8fb0650d53cfa2020eb13b542ce68780"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022100d2a7086532e5076845eef95cd717a59527499db3e32081bc54f1d194cb03091c021f2a2c5b8062b9b48bce8993ba878bd516d6123a022537319a3671be2554f4f9"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022039f099a0c207376807f176374b8ddd15b4b0d54396915ecf071e120e4002c8e4022024478aa5c1074cda3755894674a55e21e773b83fc6b74e55822b2d05cab29cce"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402205cb992ba630452b43cc31c19df9a6dd6287a31fe3e8b67ca27880acfd89cce65022009b13c4746edad9a5bd39b82911a68b0be7f772c51df6617f7cfd2ffe0645bc1"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402205d4def0d4820dec59e1705730f3a18a5ca3ddb6b8580265420049c7a522ba0cd0220737132ba1352c7b8dd8463d871cabf53a5dedf5aee68c7b1172e833806aea572"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100eb5d8a309b9b9865377f4b430acc4ac5845c6b4339ce2bb9228fc76947904e3b02207530da05e41c522a6385d0cb586cb459305e98b45d32d0decc078081781986ae"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220641f8f08fd8041a66afbeaced49baebf1b9da777154391dc73c65bea935579c1022042d5bd8a956823bf2640618c1ec9781e198ff2e139674c9cff1ea5c795219cd0"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100b3750d69ba1ceb422b418946d10e3cb101b19c28040300628622cfaf2e3984c5022003f355a155850073b1511f6109fe1d2d0d178f81f229659b5b4277a1a322c06e"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b7d9aaad264938c68c358c81da5a0bfece07b718b547b82a421ec2958dfe8cce02201a58b6f6cec2a232cb9f974b0186ffb7d2ebedd2899c81c8774cb4be9358a289"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022040492fcba100a05d3d62a15a165912603b866151d5437fa5985a3893eddcd97f02202f1cca4cb81db6e199b5f39e73153db2114781201c7d1c39809f4a1da323543d"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100ec73657edad99aff8303f81c094141ebaa9bd95fcad237ce9992539a0449c4f30220641c172f4c4fa386cbb73b94c501e7f7f1eb192fdfe3846c08040d09c669c868"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304502210089dd4d93ee46dbfce828aff080df592be27d90da889f24471accdbbba93d222a02207529a91c4adef2576bae26536fb152ffa8d611665b3302299e646709b87d7e57"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "30450221009c8a318956245ff5b253baa80fd81b5bf9f5628453de4f54c953f8e2112e4f6f02207b740e1eee2e61786136f3c3aeb53a05d1f908d9ad2d21813b1fed8828c3e6aa"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100cbc2390f81a6af67d5225c34c51b2289d0aba65ccfff6cb03acf3b54f2334cc5022010fdebe0e5a601ba1ec521391805bf13dbaced0c707475b05ccaadaa82acce61"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100ebb9f99820a07f27860036adb3ba27eb37bcc0024e79e38c0f39066f1973fb0c022054873d3322dd59dc5ef11e252ee2e6f9d9bcbf9aad645732cd601a3a74145181"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022023711cac25abd661c6078cb2efd72795ccfc94da57c136c11569369c381be82c02206a616167025ddbab91ab5796ff5be6745b1929772597bab447e57baca50d411d"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100868bc53f10623bd59e3b04f68bc24e170e33cd4b76bb702f665d0a5fadd02bc102201bcf6f84e27bd37d4494523a2a5653a8be91ca3db9bcfd733e7d7fc16d57a619"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3045022100963447dd2d0e26370bfc88c42fa2b3cb1b2220c985d281aaed627a14732cf4b802207fd61acb22cace24228c1bb89143f2ae6d9b0f0bd1cf28e64b6bcd37b45bd4c3"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "304402206e991c4580062c63ac181c586f0ad351ba39736eaf14a79fe342ccb71abbc8d202202bd402efa3f806fe726fb2c503d7851e908751005ee640f9f02a16bbe8dce5d2"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3044022046a474f26e60b84e4faa75234eaeb5b0540d0389dce081a908bb3c25604b1bb00220579a712778b93574a43300f2e98ea75dbb9a300dd1379006d72f7066e6df5e5d"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100a13f58bb5a24056fe745a8e8d395ae68f0cb4df88faefc2e5e06f94aba87dafe022039f1ca74ab9d53ab274dd45a53aaaf54f84bdd3502ee862a9e9641b256476a5d"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "3044022039c480029a814fd8be055a98e73b48fa026163b142bfe3e57ebe30c9d08f6c0d02200c05fee7089faa7c177dde268acbf82301267ef1fce78134f7dc1cf7f1a2484b"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3044022056ddb8be9857a616ac0fd8d07ef87ba9585adfa5f8a70e39de39e9421e3158d4022063f5d63bab0252445849a2ff57c17060f14028e0b6e4752ce0ee3c38cc3606d1"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100e52d8026ec5618bf67ad9286db3003b7c86c2c133ee353b9abe45382a87509dd02203a6be936b97685161a61684d3a21cb5e722aca7df0fdb0832a6eb8579631f77b"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100db278e0559e796fff15fc53f1da019fb41d027bc69bbe7019b5dfae07299d941022047468894f23d515170ae4faad586573fa56d646b6e2ec645098ffc6420bcce77"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100a2e778396529cb86a62f170193ee6f095672405ffe42ec861ca37f3693b3914902205ca96fec39821b896040678a5b71c012cc68f22afa7127e4fa1a8f9f65967b23"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100b5882d4ad02d12eae534f9d1ff1b78a05a92b7f0373c7ac197f2b1a54f288b85022001173f03288d4bd5389474686c3e8c2ecb9477d1f6bb538b336f3baefacbab77"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "304402205ffcf7767735a1b90c4d83622c5682166d81ed6b985d833da7cde22b6ed61ca902200a86fc5ec8e86385756cc01209e6debea94fd5f0a71bec9d374aa9b2f8aef548"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100c653dac1de42e9a06e91982e7395670fc31213804fdad1aab5f80b48a3878bc502204a13ccfb0442383bc6e5a8848a14a8fc403f18d673581f0987562483d756adda"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100d6b3200366bc308fa9f51f9d11e987a7893fff7e74e1b74be9560398e3de143c02201530b59f0fe68b61d730e139e536f8006289ce785fa5336bcf36f80cced7c1f4"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220467adf22e4e7c7429f91bebc3f472e55239faf3e2416351c832c122781faaa9402201015d31677212841b284d59f4f5e79666bbdc72965d01021a2560097752355c0"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022052326001b48bfcd1c21b2f024bba59f98218e3589a8f8503eba321204b0074ff02202e5881562e3bdc84b0f646a8c142aa5b369b1c87d5b35616adcdaad234c238cb"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022037ab41e91701a005e4370b9e4d08cd48ad6b7ad2370c05fe2a1e91442b98ca00022053b91091753675a3521d6dd3bb862ea75d41f0737bf256ddae9abc1f82b9d381"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022050fd436716794cbe59d75015a7b1ae8f831807df2c6d91723bf433e8262ee50002204edfbd14add2c0794529359430e5b1cae049212f473742c06a78f968ed01323f"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402205f817f897ffea3fcba2828da564bef1ca4c79c0ae11d3dcf21defa7451696f23022006deb403fb005f92c01524725c21df16fd20a9e0a0200d7bd98c0f61255d8b94"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100bc9240ad550da04e1587783e34b370ce79609a4b8f057aee85cccb3a33b5e3e1022013097401f3ddfad2314a56b6b5db611c773608b85892a2b143eb3f7f0de4868f"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402200759bb654909486bc6b6f4e61351f8d8f2fdde3829180aab49cc980d5a8c8b61022028a38a444daa256a45154b41d7b4a324e8ce4b24c40fc0f67c714ee190a8fbb2"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "30450221008073007555659c2d8c09421bb56610f8f8e8493441c0be8371f734451c61472e022046176ae6e0493b90b61afb4fe9731e59abccaf9bfe5dcadbbe155d854c427f6a"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022025d4c29f2bf3190ac638a8c44252881f9fd7c119d9792a186a993beda543979102202e553a2ff762e0b4421b5b94f6a09b39bd80b51ccca621bde18c1d020295e1e7"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402206bc4e8a63d673119b11c62367dc9f91d7cac4750b11a18a49910fc8c8dabe9da02202e5b2724e6f09ae4d1c6bb768217ee0b4b433e4d0f8c10c899cd59f2f0d6ab5e"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e4b0447e17f8405fa5dcce533203a1b261d85e4303feba4cc6172f431b4fca1f02203901d0cf8198bffb13f60fb63a1b7ec29b436ad0e074aa9336e2a53a725a1c85"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220523a3a3966d1f133d943da71e28b85beb2abe91af1ad16eb279beae62c16f20402207632131e5be4fc33e9807c39c2634c497883f32fe29ef66af85678ee218846a5"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100a006282860410afbee02a5635a7ef399e6f68359c6d6519b4d16f907e9abd8a802204b50d873637823d10544ab286a96a763e747c206b538e46c8b03f752a38f1474"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ed0d3d08389c58dca517c3e7b354562deac1988cc4e76c09e5bd092571c99d91022034a9b44485220f2c7c35d8e35e050ac1bd16c12277825a97449ce0405d5b240a"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022031e65ca731446c9f0696f2e2650fd874d2f03875f8333bfbc96a50db1fd5e2f50220784cbadf9b5736d014ae3ec6d629b19d2b2a9393b392d873c5850af32cba003f"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022012d6ed3fd29623ece01c31db7f2d4bbbd4d80e5eb031f39f751bafd6831d45500220549141a3ca4cc291cba898c246674fea1b89a4f1652b6f4f4bf3aa8f1a4f29da"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100939a434c73b4eafa718cacb6189034a38ed5e244b223d92561fb64a5ccc0442b0220251923a7698a3addd3891535d21866fda8d2a3d22b27b83a305b769db864c312"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100cfc79bb01f8b71e4a5b20be80b1d1cf6c914d0649172ec03d68b1a5d1bc9677402201b557f2880caa79f89e871f2121fab24553c21cb8d75b39a4c745943573d242c"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100c1d34447ee07cbb18e09cab3912af57a37ce1f11f00787bf46d7484b806c7aef022033754a8fe682a62e78a60c0a469d29a9a5bcaaaef08b8def7af28a55a8628d2a"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100868a44e4c25b04b725a176b8f7b4eef46901da86f06b415cffaab28a3ab0b20602205a81621e8257c061154daea2240faf2d17841b9dc60bee6b4f258d5bf8b69d42"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402201a965cff40403691f6a160869a7771ca1cf0d1070ab7f3b7205487bc1629ddd70220522c0135a82d8f0a0ee789d5c779e44e81558525e8df54e1777acff5d328e451"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100d59aec3a10916d15dae521d51e843205adf123ea2bd8ff6b889f755f6a5e68d202200240ad074371b9a8fc663fa457ce76900f2000b4d20e8e40865342a50a8542bc"
        }
      ]
    },
    "43114:0x488f73cddda1de3664775ffd91623637383d6404:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit YetiSwap transfers",
        signature: "3044022061c93c53b0c2335ca5f757d908f74a4905721eb250673a29c69a698860552f1402203f2650df17b5efebd1a11f4de73f8a87031f60736b6dcd64b148785f1bc07452"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "304402201eae20831519d5af947c9a5396ea2836827fc0a5fa00a2a0839c975e853c1bbd0220719b5eea76f03cb0391341dbf77a3d093b8a625a109d5770ead2b72a8d72e49f"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402203bf42146dd0e211e081696f99e8f4a6b9df06b29f5ca420ac2d16a23067b538f022016987f7351bfa2c43d0aecef6e9ad11cb48ac6719131238c0fef62e26852f7f6"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3044022008f42be03d19c27e69cc988bb80b7785cf4f15bafe5bb7a53073fc970ac227df02201ba67d6b90fcd7e27b2f326f80bff070a32541e32e4856dd4214c54c741318b2"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e09f56a657e9c15df6903f296ff156d1fdc33f2c779a0ab2e33f584c391f278c02202a677ae818a70d9e28615892d248ae3803ad2a6c44924d90bb1b9eb026c9db9b"
        }
      ]
    },
    "43114:0x60781c2586d68229fde47564546784ab3faca982:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Pangolin transfers",
        signature: "30440220770892c4d4e2e277b8121044cb7b5756d5406aabbbc7a50056da06aa6df68f470220689a5eaa6da11691510377fbb6b7e03350b219ca0365fdec23af1b10e301f918"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "304402204e1a437dd77b3ffa34ee991ca19e17661de82c458923a42d75875df82e360ccb0220719ad40a493290ab6c009a5e88e1da06f4aa1d0ce625a8d4c573f7730673e56a"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ceb969e775648a8ce730b42ca117980836855ddcc8d251d0fddb9763e520ba9302205020f115396bb7acd2d6358dff6c3637841fabd08aa5bf191bb83ff727aff5c3"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100db330d00212e40c1f7fc1ce35805a00774c4eb199a9a3b1dec15bf642c9908ed022016bff276700446af1931dabb2790578f3da7ebf944f53abaca777ff4431a7d25"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100a7c52ccf78516b9ff19706684e596606c7cb08bade810be15a99c9dbffbc39a4022026f15337ad91d0ab7352a3a97eee65e3f4796fc8fba62ff25a9885496ff0c4df"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022003ee948f9c65d57cdd893fb060db8dba8e4d13a8625b3f3e57095d2f8d42faa602207e7e8772cdfc984d9bedd1ddbd47147414e66de635a8e3bb8ac820a8a9246e52"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "304402207a0f2573ccec193fbda1e2bdb2ec9e2b72c619daef9e18f095f12705d2ffe04002207161fe261ae2c7f447941ac4d6c648a75a15107d4d2dc85663a347e64f79d012"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402205a8682c70edda76d020ae2414152fd409875aac0e79a7ae9193bcff7e02c0c23022067e9bd85f332ee6b6bbc222eab60b4ca4ad9b83fc4aa7dcc0c33640fe29b73e8"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022017022e5bf63fb42f68c6c46ebc2f3335b928070017b6d5ffd58cf7bfa713a22502202850975f985f4668029660914d07452c01b3017e29f419f99f691a7091fa7468"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "304402202608b0a1237b79dd283250fb90a4217eea1dab6f495c225cb71d798511fc9afe02202d6787dc7467a4adf7b3d1ef93dbb71da78d03ba50d1aaa815435517e988e791"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "30440220349868288837e7a698727e0f563945ed4cb2dd1dd4cd5d481f17014413337e1a02204c56f13d6c0e0d7e656ada6ea92ec7acb1cd0b01194eb5622c63afef19b53952"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402204d1b1637dfbac199b25c1185a3b7f0320c339b0e870db4229090e7078f96a04e02207a255306bd55d54b6ed1f4e392e12cb943077748f76d987c7bb9e52f3e17fc77"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220089c48867e0bacb54a312589e081a1e6a318cecf4965aff1ca891a5bac887a60022067bc539179ea7ce9f92763500430fa9695f8fbdafcfd49a541780bfd75d676a3"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220508494f844f41d1cbd318e7dcede62ed5784fbf003a770ccb504810a7a8883a10220745ace703b8b8821d131d203b96b10be99b3c71ce91f385f63435168a6d5648b"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022054ba2a6445a842ec43ba21800fc049f5137dcf2ee36767e57a2984b535750cad0220069c1d56d50d8799e64d7b4bac700fc086623910991d9d7779e5e7ec020c5c48"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100c8d4a428005b8b2e45e9775825a0361a834f667f4c19240c9a3f2de2bc49fc2002203855b1367af0f3b67c9475007a29b620c77716b72ddf7212316c7fdc4b18549a"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220608f164bb66487e40b58a0c04d9d44d8d183bf7f972f17b5447a6fc904521c35022058e107a79d22481cd94cc0478af4073acedad872b3392543af29ce89173d4944"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "30440220568ff6fb360044e769d02905ae3ee24278d160a5ca91b6060eeb188c6af2273502201cc668921cb26cef253aca531ecc5d46c3af788bbac3a97e751bf811963f2465"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e1ad96f1bfee5a1818087b61a8a1a6ff99a0a2065407f405dc935d0b7bdeae370220785d8713228cab5c9bc24bf0f2c3289fc9c12cdda65c179ce2a46c7f8f54ae95"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100dfd334762cf1022191fc42f860de2087b06560a0cfa9d0d598b4e5a38d595e8902202b6bf6493324aee1523186b0b6de3007e0d0fc1becdeb8c5a30f84d538c8ef9a"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402205e6eb8bb7f353c47228734fe6a5b6903cc9a1acb617ce5133c679520a88f996b0220651328d2ffc2f36284dd1bf69557b960c6d5135eccd6fda600f87dd563b891fb"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304302205662abd6f6ff0f413a45994d310c3d657bac78a1fb70f73e82da358ca6c5ba45021f7f607412527bb58d4a61fc38affadcff12dda584bfe5a8431a86a7fc627b08"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220091b504f45eaca754a9ae775af50a4b127a2a67d9e27060bc80eb567da81836602203cc4b53c007487895e2df977a705e080e1c8a086aa9f21ac2770facf37d62a0b"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022004f35a959016e4d65f03c47489ee6c1552306d53f97355e1179171aa3676f900022018df4a31e1e568efc8ee42b1e78824b014044b9a4e91f69b78a0433f30cde574"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022073cfec5d22ba9a1fe4d4495561005e49e1d3afc2edb9721a8e915365f9e82d9f02202397afb9a07a8750b9f884d2a099543cbdceedb4295677ee70658c5bac63c958"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "30440220114565b8914636898107985ed93a4c642d97fa8b1fdf852e7da42400d3b39c6f02201208dc71fddff8c1d2b3ac6dfc05d9ff228567dd1ccef53b45842026f20371c8"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022014b946f532fc2b94334e2bfae4033b880ce7337534a1317e7e37a35a337efd4f02206c586e8866dc274cbf05c87cb99f7ca4cfa024f22af333de7bbcbf6555171734"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402201372c5ad1476c5ea685e6c446e0f59fc4840b26477f1c33ffd3ce61ffe81707002201488c5197d6f6496fa2cee35c00b684d1d0b1b2560c4d997a52dd2c1973325c4"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100867601927ebe4188c3bf88b0832be2d08336c7619d32ccd838ff4a2dc856b052022033092c29c3ba304313f0bee2c0a056eb26187aa2bf3c10c8023642e59a4cbf0a"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30450221008948e1f74ba96ea2f588f9408f6bf9786b8ce40432846196efb0280aaae47f8202206fc6f8b38bc1745babea8b708cba0ce91a4f7484f4a0b0e52c31709284c7a06a"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3044022007e15ad9f225b84f7e0e45ebe2d39389fc20a334164506260e0276e18b6e756902205da894ed8cf30d8b018e03f69b67463f46cbd7575c4bef0f8529e51db0f86bd9"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402201f900fb0163542f7311ebfe33b4269caab8e0315a66d3e48116a5f94a96e2b10022050c31c3e77efa383eeb843462e6d3f95ab62d0ad594bf19f572205eed60f254e"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100c140c7c7fbf1806e3201fa9dc1a9d6294a85e1e30c83a67c5f6470e4dd41aabc022053a08d25bd768da259f528fa229b3e549fa4addd12af70501300ae391ba34b20"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100c6fbfcc974c8abd48c3c4b492959e901818c1a06c29afe72583b62ee98d1b1b902202a73f396021e5967d541405239fcbdccfbccd8886be2efe6ec8b73204e15d267"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "30440220307e34ec7564a949149fb69d188a5900d56400fd0aba162e47383b8ad0e1a2bd022064bb89bd5ba641981d901d6764a7d28b6163a0da66972ce742bf024afee7c5da"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100f0d725cc6efd2119dd7dd7a5e5eea02273fb29c4cb8d9ce11df473c30a232d3e02206c81eb49b1512cc96a76f56b4da59f7ad85edcb527b4bd0e86fb8b5ced99c37d"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022060b25a3b2ce80ec450c3da93b4f355d0631373c1059013347419338a74e764e6022054e30b696f317bb323d1ab2565e998a9476cbdcd8b67db8a57ca9f45de294368"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100c6df0535500f31424657e310c37a60157319609aeee74e073b2609fd6b1c134202204f7039c1bb76f0de7e1c448e01135010d436a6e2573a780eea3c896f88ea0b52"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022057e68f6b4693885fcce2e68333fe9d1f9d9ddcf8b1c342ce27c04d396a8e798102201b5e9656718840318e7fea4fed2774f549d74c0897ac249cc8c74d7d78f6df6a"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402207fcfb17e921d219c95fd1e3f6d39f7ca8228cc0e54ec0e37ddc989324d26f2da02203850147a828a5499136ccb3502f1114f19c8811018f5db4c628306963591bc37"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402204b1c78db814ee83d9d87e88f7ef89f0f1074690fa6327f4d445634b24448beb4022030ae3f55cf0530aa104eb394e444b95c87777e798ec1e1550c668cd0e0e41749"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100ae9bff1ecad5f816e8c26e1a32bce5388e863f266bbe4ac6669ee83f4ad86b300220682bca33140307f043b816bc1819a72189645d5f4450d2fa03d9e88cb174389e"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "30440220524175675a92912d4d9e2dd556edbc75e92fe77790a5fd49e28bd7433e5d8855022025fa8ec3d0f4fdece10615b27d2cb196b8a2bd2666db8ed0b693fcbcf9226cdb"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220237184fbd16a92abb8b733794db859ac5544164221f476352d86e952e1433f00022045d9a3f360452425093e746cba27b6c5952749d3fa83e8595cc5d92cb9b0cd12"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100ad4b0852e457406162aa12c25f4742b344731a8fbb8465cc1831433f1d198978022062102ed269c936d46b415ca60b5a876d2c19361236ba18fa54ccd698f340ccb5"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100d8b5c3c8fe2f7acdcdf905da6c7001e0cd6487ec062135c15b85cd933c556ed402200a399ed01b57b97d2b19b4daccb52f272c7bde9014b7d41d79b8a085f3a79d73"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ec153713441eaf40cd0204e9cbbc33cd3d7c59fb3b1477c3b53220f40119dd63022069991f07b246ea82b63414e08fe59ca35099f8785b878b1edddaebb6324554c4"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100ef0d614c37b53b773e409c12e09b97f23dbef86dfdbc295c0e83881fe16026b1022079a2ee65b87e0d1bed440865305f43f104a11c987c796c44021b0e92b5b29aec"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022045ccf9d82286c00fdc49ebe07e6eec106d1216d9906520f6dc956c096bee810d0220062402bdc7806f44b904fd7becb78185b85b492ef7ededffe46c67816871a475"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100f8b53c697dc5293ee5155755da6fb43fd9a6950955443942fd626a616654b7d702205e362395afb2413ba2234ba1d30e20f27b21bc22d0f038fd5e40426288819608"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3044022029e71de3686ea2383fc36cdc0afd56930da76749e207b748382c4a58da63f6cd02203adb858e49b0b3b7de5b2b1737e00da820a572de92f96f8f6e3619b1a5382de0"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022028a31a24e9634d9f73b8cd7b66293a8ff55d169231a4b99cf5e31104053c2b5502202b13da42fa9fda0300276deeb8201e8c7f32e8e9e91b3017da2a09a92961a26f"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3044022004ececb7a100d7bdd4496978fbc6b6b1ea2dc7500c2aaf7ebac524c4b6063c9f0220345c604f3cae26c08fd309dd92df5f82cb433e30bd8af93b50d10a9b9e3bb4dc"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402206245a83c1e904563c959f5313917e62d3c6981c908267d1ebec3fad50304dd7b02204d7e70b181c829848cfec91404ab34d78818e5b20e3f952da118114864ae1943"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304502210082e5f15ab93979000c09cb5099ec739f2aa6a450f05d0006e673608c1181cbaa02200ed16df15b10f0f9952fb650f26a51de6c66f3ae1e132cd63cb42f65cc85a2e0"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022025de3dc4a6c31c0ff18772802c4701dd23ea7e7cba9edd8ddbf96cca3a3938c60220472b2c75a6ee54201f9214d99fd9cf184bca8136129e00e4361017eb5c451f1a"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b9fd6e4e25d4c9fc61d82e0aff4b84323160151e9adb3016a1289e496b20aa8a02202366d365fe6fcd63e3d9d4d4523e16e6495dddc98f5ca5ce8cd2e87626ea282e"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100b9b906ca0d81e0bcc5cde2c976d5b8d169b2462525ac1f22d08cd4a611798443022069217754e79676186584c95807c62e5e3db169edd535ad74bfc17e483e535f99"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100cc9fd13001e29970a5059a27dbdcacba28e7a9aa8367f1beb1b259b06935d971022029f27b0b5a0e4479724b8982f4bd1c9257a086b405bccb00893cf03287d65310"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "30440220596d7453f5d8d1fd0f22db5cbb566b62a73312b9e8c0fc071636a0c65e7ade55022001ab01736562cf509adff844ba079a85a990776c379423f50251bf61e7022320"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100aec8458711993d020c5ced905548b810c9fc99495d73b8489b31ccde8cfe639402206b6d85c7a202b61bbbe9036bf5bed43a85fa732c287b1ea2dbf64b37e2dc2808"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022048fa80368d01103c90e027729b47294bc7dde4e8bccf29289300e2dd6586b5a102206af70d016afb13480ba6d3b14d89557e2a7f486e2d98d1e7d09fca047c853e26"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100d6356531f31daceb8e3b2793c2e6dd0e529768d13c8ecc9ff4d6f89cf574c26102203760bb9f2fc5fc4db772fbcf233923e262f00aeb25849bbc0fc4b999466f0b0a"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022044001f5a950e400513e1b6a9f20832e37417397bbcfc41af622be5e977be9a3f022014c711ebe6b30afb347cedcef5e1f738ce4a4d4840e6ea1ed2e425ec9e602869"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022012649ae0ec4dd5a2b8416bd2a785d3636822e2c6623d8cfe1a39a51ef395c4510220422344c804ea5474845d744f73b94528d43160489d5acdb87c6defe1cb1e8df0"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100be418fe8d24c526cbeb610530571ca02ae8c6eb0199af96858ac3db97d3ce0e5022036fc1acec0f0a679ca891d0fbfe88582750566c081006bba515b6fcfc77c48f2"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30450221008fed313823073739177e4c13f2fad99e6b47de5d1f1c3a36cb1da35658ff852302202f9293fe1b8cefaf55fc5ce08e3bc1592b37ed7de44a749e1ac0d698190f2dbb"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402202a9be1f7f7a079b6ba25b06de2e84664b663e034e724e299fa370c8e2da8c8a9022066dfc6d0aebf143e5bc3abb3199dff40c63b055b2e2f99d13f7c96b4fe41c460"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100fb142a0f902db3eb071e446a248bcae665279bed6868672d22f6e70ce90ab74102207c3fdaa13a90f754f0d2f6c79a9697e6064fabeed86a1316119921d26cbc623c"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402202a6cf3cb2c35ad87ba1c0c41221c692221eaf1d3544343de8bd3f4adee678877022065e521b8bffb3946340b661eff728bed9682f625b20aeb039f00cfc5ae55a52b"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304502210093df12c52c1be2e7845bde29678384988e95a18b77dcde5ca9c1f17be758153302204a23bc7fa7b20421406517cc8a5796deadd4eb09bda848211529be3fcdda0186"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402203d08277d359d1b89035442b8b2fdac96ffcef1d566be51a76f45ef9a5dbdb206022033fcbabcf6b64633c9dc7ea75eaea489cf0b20aae2bbbbed4feac5d930d58060"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "30440220573094a76824fbcf48f9590e4a83f1aa10898aae9e1e7143073a46a1cebc7db2022043976e109401e2a9aa383094cb3cb660550c4bebf796122001d8df044ab8dadc"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220757cccccc2037820c96d861ba58033cf5fc2a9b97fe19340006d7b3a165203a2022055f505404c8219bbf366bd2263cae3ef8327a015ec78f7ef5113ed15ee1e6434"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e27c845e942afcc9051dde9910494e75482c8684ec390e823920a860f50de6fc022066409c5d2eefc4bbdda04d367d76f90a8ea6425972c21ad371440f7704d3fb95"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402201b8930a6d2fd3e52b70112e18b18f05707b39d5a6775cd95933d93f205c869e50220597a310ea8d5afd889151db8093b62785488aedbd46fc748c46c41496800fb1d"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "30450221009e89ca8f4e26912823c5140907a6d7c65a090a91606f0d0ecc405e6c33ff00200220564fbfb329e5c2e3128ae5495546f9bc138a0bc2fb7c8d15ad886bd76026d110"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402203eca221b2e6791bd43195c38fd540e2881bbdb9e838f9f712d958c63dd128f760220532ecc18dfc800b34b06329ba8fc9056de5626c379e32e43860f9a98327de68f"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304502210084c37d4b27a48d2c3fc4cc3692c0997a495437662c15e82a62cb6837280e6ec802207e76e35c206bad884c042e3203eb77a94e26dacd64c85554adcb4cab130c7d46"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "304402206e7b877d386d880e26dbdd341f7ae4ce6c88ed2c5c92737edf3c85968d30116302203a196c18f84fb714ee4b89c2af8ef729ae017ecd21a43d1c183a41ef38017fef"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100ae27a2ce7c21ab6b878fa87199ff74b9c280e0f71f6be84f32becd012a672aa802204f35357cc1bf66e81369288298d1aa8003bed3814ea971fe93a18b16d1955981"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100f196398d9bfa19c49c4d805abeb4a165da4d1a6fc3299ba0f4af2b8434a8d84202203a3ecaf227a071afada4a8c039d2cd333724542a29f89713ab1d48e848fe4dc6"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d64375b327b5ce16a033b8eca8ed918d84e476f4275c56b7f78ead45caec77b002205920ba8053ce630632d85ec8040b5c4891bf0317931fb18c9487d7fb735e39a4"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402206ea47b5f9b6c281b8f7fb430c552197846f745c5f54809e64c69493411ead43e02202864274641b3d17e3b6521b1ae933dde4df3961f48b2487b3fd6bd68d8e6da1d"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "30450221008d86ac72cfc5923017f7d43bb5f35ee349719402fef749a582a4d935067c471402203f030688d1cc8409bbb8ae992394ca6eddb55799e159bec2d50d9eb0e32db85c"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100ca7b1f74d5a77d77bce9b385e177202a3356ca9e72cdef6b52128002a62eba62022074b56f79f006f3821865a659eef8c4da6d8773c5b815ade163915514b3786760"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022019697b8585ce1a047cd67b57a248e254f44c2d19fd5146c0f6f6b8cb0e7c63af02207140315222c9d8ee1fc10cb69ec22c47ec1d8c6e26c6c38064896dc13c8c0256"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "30440220297f11265bc8c5d7f88159f8e35d8ca67af5a7bc553ecc045949f76643588a360220280e3235460b4d7aa70e01543b5700bc35232cff797d4ea947cc62f1b75e5a99"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022063d1ad0bee9c6c242ce49b69aa92428397b347b3557a09758f122765109cb5230220342cc9110766eaca071721220290aa635ef71d61b742e92423e086af0fb04b59"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402202514bd523dbcd517606fb485a735f29d37b4a3317553e071f6ff9fe90ee49cda0220340768fb723be53e9f9f4c84167c46bf1b5c1809cdb0fef406aade6eba91da70"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022049e302c1b6b56751508711de1040ec01f1d7937de6d49fbd23be661686b19b290220245d58ae8f7fe389b9b1e138ce044114f4684df84770089f2879b27c6b8b7f6d"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402203aed848b5b759f22593f9b12aa74d7f81027aff827feb3849397b62f3c4cd84b0220468ce42a6e53043d5e112d4b51f3c9c4ba3d87b5004af872d279231da7d06f88"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30450221008dce444c5f2f3ef16204faab270419c2e5cb40b975b5741f77594c015e32a137022064009664a535bf0bd82bc72c0230f7bc21c6ad8eb3e323d5c3faf3c9225ca050"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100b402667eaabb0e32b38eb4a2eeeb9e9ece86d6db9d273f54f14f55e57a8c78ef02203442ee943e576b74774d793a0ddc2e81b4368efd2a89b98b901cfeecd5be9690"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "30440220772bd816346e36c57da7a18065076c60f08b132b8b2e2eea20b5fdf47a68349a02205f32577f52990d3422ea22996c260f7bfe9a57b54b37e3a1dd9ed5b435950cf0"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100a08889583cc1f8d6440cecccaf49a5370b0685e20d9f8e8fae60f66d3660159502200ca68d67a9e48c8f210a00af5dfb400adb4ac2779d2eb839ad6f04c077969ccd"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402201d58deac9bac044520c912ab926d05e399391b4adffb1a79a6eaddca7174c2a20220180b25d9491de0e732a27617f3377b30283ac0a242e2fbbabb177b3d5f417962"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402206978d529c025061fff4af0a6a8c6c5200d419c89cf77fcc1a8b567f4f49cb7a1022061b5a74e8923b8d74ebc14d8787c8f8f41984d0ffb8d3bb80a42ce4931c03992"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100fc9227cd0cf747b5ce1229cdc61a2fd2eee6c92537b9f712b3704ec51564a4fb02207f4652444666c529860464b0f022ec754ea69f7d7e157406121b7ca9a664a943"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402202882db2ce4ddcebc3b50a94fdaf013a400352910de439520a342193467425ed0022071e86b1e7c0c816fceccde51db6e915dee9bad8daab3d6b7fb6520566846ca94"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402205ceb238ae7d7e5924567075726e458a1721cb87fa860e8b93a33d20ffb5fe5c10220077f45136c66450212ae888654bfe5b88e05dcf294939601674bbed2533129a6"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220348a323febb87cb3e2e8dbee6c9126ef332e5bf9f0d246e7ff5f7f6240c44905022075b4d2e20ecb372334239b3904dceb30e8f911cc9b17223f917dbcc86b7d8cfa"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402202b5001577cf615dc5ddcea11d606f1cb5a7d7631028c2fcff85de3879758516202203c987c264c64e3bb275552eb76492dc02d9c2c127bedcd5934f4cb00c679dadb"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402200e8c079a47d32e5d6669ffad323b898621c37e8e89e3b8e5bd6d866e406974e8022007f12de8159c8a4fa9a918f858d86b25b99d533ff21b41b9734493d06128f5cf"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100ae2dde9ab89c2a6c7f974327064ba8f8e97020f75f9f97bef09ffe7ae85eb05902201609703da8263fcea0fea780ae90a8f2599b6ce676204c6a56c1d0821dafdba2"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100ee0dd499114b5dc68069aa557aa22d08ac4b796d6771d75593922752bbd4affe0220790cd6480a28199ca551bc5a2710f6ae9a6585015d5fe4678034276733f48056"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100bb95fc54481be412c9dbcc591208a41a26ba817eb4335bd3717ef7c6850752db02202758a350b0a20fa0131c30916c994eea456869be69e205b7c9c3360104cb28d8"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100a092009d45e163fffb0b444c6e3d6fb65e713e215556f58fca3c2aefa4fb90ab02207f806681a01844d5b8a71adb7c4916c6328e6d3031f9452df0448b5ee89563c0"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402205e9660746916629f22d2ee192f12e3fdbe0843b4d92f7ba0c590835ba42e6adb022044493521b43807c7a788edd0d9f4eb21ca1d67838aa3f5d245806fdbdb5e372b"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304502210090b6eef7e5f9afa42c2796fa9a0cd48b31362f528f1ab01258f393d346875fa302201f45edc697a5a0436a96ce98f1aef8c037f6b980ada4b6e910753192d62f18a0"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402202db28b94aa0c8cb8669f39c1a9a5cfb34c1701cf37d1c2d3b9560a54965e55ca02202a06eff39eb12ad39f9fb6283dfa9c57e169f241bf87a52be30364a445b6c298"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100ba45089f25514861544402a91bd0aa7977cf99cce2d7c1b6b6e7226a3c1921a802201bcd326f725b7fe23fa56642471fec0493286a25b9bdaf6a0d510e5c6c8dd518"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3044022054fcbe3bded824a9e4d62841bbd8aff9a870fc0a9ee02540655007e1ff399c430220349d155d294b5215e5c9674c48132321f5f2da963fa17f169be16968655fa1d3"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022079acd9fcec5d59d470ae58b7d8245483569c5ed36fab7f3f74cf69bba748434d0220794de13f70511156246b5cc41a2492ebc49274254d49d4f68abea2344cfdd445"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "30450221008f71912e7880042de7a9482215a9adc79aa10c70b57fd653ebe0a790bd4d9d91022052790cc472695212c4ba6a1640bcc60a48f38c7c2537cfdf3feec501abaca266"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100be55a55fd64c0e1fc95855798e76f3f74cae6508ec2437092e0b1c6a717114470220153cdb7d3b5e12e3afe39ca006815c7bd7915f664968e4991973eff1f7f7d621"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100c47c6aee9caeded33210b25e03722d98dd03f1919eb8ee70e1e2f08807ed1efe02204e0f7409a7782d00e7654cb2e497e486c5396688121e76b0e47dd6d6873de48c"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "30440220227f4ee39f6304a70ba60851194d045cc1ad2e1bb0a3203c6a5354fa33f2506c022031e6432df07fe528d7323fd24ecb946b61ab33ea9049a7c56e437b9f34026237"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100d13fd444236e790a4badeaa44b73757181d76f25bcb59221cc88d871ea61c0ad0220490936484916780e0537edd6a5105abacbcb87965fd99f5899d5df4dd88d666d"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100aec531e28917dd06db3ae6ac215d01fd159d6fe0559a4b857b3305395776c19f02204f7fa74fff259549209c91c176ce0ae1cdf314bae077dc0e36a7c2639aa849e0"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3044022074aa54f62a9d7f186d9a40aa0c27f2a0d8dfd071201d49a246b647e23e1b7db3022003c17ae6877d74cfef6f95f6cbc478030fe5a7815e115c8268361dabfcb57c00"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100cf95d21cda04d030f6a9565329c4c21131ab144c4c5362fb007ccd4a0ca68e040220572707e5372d45663617204bfff56dbd45e19030d9edca7f6e165e2df9732c58"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100f9e1ded6051392c91d9ebd96c7088984d60b52b9ca5ef649ea9fa7fcfeca69f302207f9c0e5fe03b60beea467b98045e183b38e08d6105079eda81c73412f7f7afb4"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402200e852f3a10a27da0959c7838ffa13918d8c040fffb004a4895176dae562becdd02207744ead3b3867520352d373089a5a2e9133e2b6cf80e73bc6a3018e3cb97b66a"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022026d5fe8e3ce00930ef5e6570edd4f41353be08dc88348cd952fd446d0d1df8be0220016c8bc785e8400d0577256242bfcdb84292395c10e7febe5a33ee31959e16e0"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402206682ca8cdd3919bde89591adf3b3557a0d2250ca14090302577621262119cc180220032e6be3a31385955cbc7fd92c272918ce3837856ca861111cdae4aaa891693e"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220551ff5382c4dd8a6ff94d019b7d8ca4c4699da5256a8f8d88ccc3172e12e288202201b3e157cbda19d1faacf0786e03db74e378e29de36bdbdcb9f93c1af9a1cd167"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "304402203edbd69ed1b9cbb4047628ff122ddfd50445ba044f7f31404dee64feb9aa4ef502206e9f932cff0e0e2177cf52c5d796814f80a75185e7e2538b4ff6bbc7c26663ad"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "304402200aa3c1e642a387c25b206d54e499c1e36145528b7e386e24943cb3e98532a51602201bcd77d048876da549cd9f66f7a8d6ab45a3e5da23a3b1c6f6247428b9bc9c3a"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100cc53c3507f2f5d0ed621fe7022ee61f1e5e4da2f0a7f5d01e8a8eb37829b5d3102201086205ff1ad67e1864ab8c8fe2e1b9b03c164a3b7310874a1dffb98ee221cdf"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022079894a18deb78660d152edf61b58f8163aeeaed75296d682a950ded169b0eb1a0220634b07b660c11003b26bead49501a0e6c3ee155337c8fc5e91c7607cf90b11d9"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100cb198982728a85c9fe6212f49568246b3305b2f75dc2a5745d63947d6413caf702200f27d60a13425e3455693a46f165dd6b3dc2c31f19b99a5a9e1fa80f67df72cd"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "30440220067fb9fd3ac8659a9696e7db4bf1232cb151b56bc8bd2290e108547277b0f4ce022053181ba8521cdf59ae0d9aeb3de4f67c6d4d3848c42cc3d2656ae32c5552c125"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e22603eeebcd353c5997deb30bd1a9849ea98a2e8f1a34502664e2cf304eeb5c022058425fded67ef3020e33235fcc2cfe4d9fb54bcdf821af4982cc84d9eee3e439"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402200698b60bf5ad885d2c034a2fc7590a41c53c76eb0ac43d2bcc0ecd2d9a88d9f50220117637d14dc577772f9a98fac31af37e0fb7f98ac3353f7ba2017b87f431ebdf"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3044022059de8867f4c71cbd68942d33a0815c687a34559b401c8f9ea536f7636da7594f022044a0265b452c56d59ac1766e491f3af5ccedba92d7050bd5b26361690c57b604"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220267966c2680bb8bc4e11e5f36cce971f3705df698a358bc1157424d360e9c5fe02207be8dc337f700c574910190327bb22454ed5ea505b344689745ab9915b2e3b99"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "30440220761e743bdf5da76a9ee06c2aa014b69b1e93b73a3297f2cec57e29ef34977e43022003b0b5d60c8ea75f590bcaa6618ba39d601f9d218e2e5639d2aed184ab6c4035"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100ea0bd22b41d69831c52642b308151bd8befc1ac8959441fa6171269faf65424f02206555b206493d83634d6e15870e3b8e705aac82fb6292f959cb7f587093c5af9e"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "30440220207b05a1cdce09168273678ff891b2fc40833a722922e9255e4dadb4685a7c3e0220327bf2930ea1c9f0679c50ad18693ed7a2ec78cc41b75f0fd747cdea37245a1c"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100a1a98b23d7be8e23f9a1b941781496ccdcde4fcf5a270cfda72e361b22fe5fa002203a64ae2ebe2d565965487951c748006609dc4ff9efe15cd1ee00879591195397"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022038f3afd661023a0ad536236314f045447c0562bf2b5c9c91e3276fb86603114802201d55a2b564f0309fbea9ee54751e0d3545ecb78c4c60c130e34b0ad3e22d6331"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402202c9b4beea5271aed5353b41fe5656887577bea31fd9f50585ae38afafdfd8ddf02207325fc56931c91863bb862708de2c1d03b4ef870874b8d5ae0bb96c257d6051e"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402205ff928098d8370cd6a22c178ca0e671e594d9e2bf2bd96da1ac03c5d4b9697c50220243871ca02532d058f0a754e8cc255bdb4cbfb383360fc23a14597dc8bbde47b"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402203f7f6de0497da145ccb25d36a0568f45b11d0ee93f50b558a0264505c455a7ef02204aa5b7def9960550bf0f92b2a51d5db925af2143eb1992da524a9a5daac27ea5"
        }
      ]
    },
    "56:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "30450221008ca7069d4bfe28e696182e615d80653533684c3a60a47cb9866fd00dafa0698102202758b4b80484f73584345367167cab655aad8be09051ca695f2a07c7900b6e1e"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "304402200ec2c38d3bf7fbb9bceca392237e6c681670f4d244cc2a07aef68b8ff8520bd202205a09e80f9fc667a0e20430a6eb426a63797ccb4fb6daf9e339b8dc91d7cd840d"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3044022006061d9f6c1536e34057d49034cff50e5b7aa888996f56a6b330deca100893ec0220092fbac88ecdfc7414ab4234efe8756068800e8ba991d31611c501b11cf99684"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "30450221008e65b57e831f4147c10f5b5fa1df156b244fd519b97f8ebd66c1d4aafea3986b02204370dfdf9c494f0bb36098d19b8158c4472c546f788148ac121de2621800d9fa"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30450221009b9f5be699a1cf348687b2b47d0783a3191b25ee739e1beb3a9af1bafacef6310220612eaa3ad1270074e1b6be57d645afe96ca58249b6cb17df3c8d768ca9489700"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022023b3d924443b10e486ed99e1c7a3bf20d877b3bb54d787d21e227c1be6db345402201eecb1b2945dcfdd717ead307db40dffb996d2fa0ea7f0b811855b35fa051a8d"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304502210087b92858f43caebadf20ed8741da081c0ffcf34676eb81ae4338ea2328fb26fd022035c215d867684139a6720b4fe15d2e77272a0873074823bf7cd48a07ec9550b6"
        }
      ]
    },
    "56:0x1e38eff998df9d3669e32f4ff400031385bf6362:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "30440220461a9ba62577bf43ea41d862cec0764de9389c0a601bfd69940565b19b2bbc3502202d7e2b88f2e6ae6cdabec4de8ef587bcbcadbb3ce0f6904f15accd9be866d3fa"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100faa5b3f2b1b0a7f74d4500ee44479ed1d91124afaf33ff35311ad0e6624276ce0220304b5380d2b3f47be9da6a3296f5c18b4dccc8b161997610aaee3b4357f5c5d3"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "304402205d0fa20f58adf7042b63d1670a0608fe224b18d6f8a9f19d8b3912aaf431e8ee0220555bb83fafe46361c703c81b501b8fc93c6279a9ab46c2f7d4ce9a09cd1d8a27"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3045022100f006075164431b4f55544c1ae9895a2b5fafb6dd1095b7afc6cea12d0ec3bba1022026e191106a8f3eaa94b5ee253f742d262acd500aeae40759345c748069fc0d90"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100d4dced7fb1790fa8aea1fd9963da5bc4be87af7468c360221cf1e253d0b38b5e0220175d2e3f2c4c25db5d3f2bb4a21d8bef7a801b604dc9be48e80ae70b6c7bd410"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022075930e46a9e8a103d310d2569f7a1adc3c5bfb7df1f56af4e95b0ff05952dec902204f29902627328099c161e379dab0e0dc0a5d72fd3d80c60bfec183b29d0f1d34"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304402203737e60321ad30f5a865ab29494545893c6339629cc2aca3f0d4042f9a0ad87c022062bbcb34c0210e5c1cdc6a08791b73fbfda35a516dd94967fae3dc5482e6e0cc"
        }
      ]
    },
    "56:0x1e38eff998df9d3669e32f4ff400031385bf6362:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100d6bc531ec620b3a2464dd2a78bf13fec64c39e9577cc7dacdc09869fdff447490220032a6299809fc13be25d6778c365dfe8a2441f78c6d9dc0a349f2f9ebc57c141"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100d10b34ea91dfc4ee22ffe5337bc8131a7f3eb21851317cd1a4f0f4499e0b7590022023b39908f6fd615b88ce59fb335fcc78c1aa1dfc784657128593aff716328c54"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3045022100eb70602ace9685478727ab2f12d03c9210cc9f5ee32580af0eeb467a7577de5c02200b4b67bc66181a17a2c1c603b2e0dd3fcf385b3fa2169605bad7ddd25c022ca1"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3044022100ce65ab26827ccc2e79ff04abdc3d05b0e4fd19be0d2619e12c3db8854de62bcb021f4e78b8b9399a3f30ff7e9cac37798c1c4dc598067717e7328793f6359c48e5"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100be2e9fe8302374e9bc32ed3e977d66fb1835dd8db252d1b3a3d66c9b3a4412da022079750784ab3280bbc0ef6dc6e67d9552349887541120c9dfb4e50e6908bde40f"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022061509cdba73f94eac1a1aa1d6e609956512aaf1d036aae20051409ea6b3ac57702202a4beefe376253d982d3492fc0d363010395c8d0a87c633b91c257c52b677d5d"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3045022100b126627250c5a18b36529103d398f5f5f86bd07f97979d481486ae0bb7bc87ea02207664b33b6f13a7614bd821a76cb19dc2c8f21e4ae00575917b3d7892a4da00f3"
        }
      ]
    },
    "56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3045022100cdd6ed9272614ffdedb2b2aa22418386928f1174a6214451d67b82c06b637d4102205ee814ca52cfbdab011e337727cfe91fa272b98246ecbfb1683bfc0de3086efc"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3044022056e3fdb59c9ece3d411d03963edfcb9a186ccb753b4e984366e7ca6baa99b38902206a7267e31543659ba3bf8b796edec2d1c6f174a810b89862e43541f94b191eca"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100a4cc77374944e947748dd36408f48f43a94e67436231fad62191554d1ea5ff0e022001baa4fc0587af310bebe1c0044d7b4280bb5537192736fa3805584c735a6710"
        },
        {
          label: "Maker asset address",
          path: "makerAsset",
          signature: "30440220770b731ffb6091493ce2fcdb4163ad872add409a9c66e88e29b0d7a82b0ee79c02201e0130c1841c484e816b9f9ff3694eea3601e1569c1ddb87319b08d86e9823d5"
        },
        {
          label: "Taker asset address",
          path: "takerAsset",
          signature: "304502210094b700c3383bf0d8740e09d23dac120addc1c21029746f672d8f8c8b3a2a2995022008b5d3af862f7fb0510321cd9ae4f7172ab3b347f6556b3da79e2a95950ff34b"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "304402202dafdefb2181e5bbdf5816fc710400bae0846bc08dfc389ef8008048228e2fd0022002b89786ea578488cf6c6b751dac0c13dd6c2c57c8d6bb0fcb47a28d2b07b1b6"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "304402204c27aac1c07e8bde8a998bf06acd5eaf40e874a9b128a4f19ee8c39ce45c9cbe0220380d9438d10ce81f7545f3de8530a19c1eda78e4683fc2145b9715eb260f1d66"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100e7f19c15b49e6f40eddd2c8a24d8c55e9224262aa0b856a413f842fc5c0fc7d00220341e5eaf45d8335bb6143768b1c961b6c7e97897bda5ef485457020661ac3ae3"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "3045022100e36cd43f82fc0f99ec2770a26b245f6af13623cee69670d68dd696ff76d4630e02202057a0dd1faee909037429ba7489ccf3891a38d29a4da04648441105c1e89048"
        }
      ]
    },
    "56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "3044022045bb3ce0d61f428537754555a0d69cfc5554de2dd58c1c5cc7ae81abe073b1df022039ba8d7e1230c3851fc08db58cda6222c420dce4b8cf96725891906fc5f7539b"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3044022020d30ebe13aa1235ea25dcc247a1c494a6aa2ac4f121aadc3beb874b9de4b75e022078efc82c2343d6165960fc252d10313550b6d9d1faeb6f2ff611c288fb53f364"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100ee126c98d8ad5b000090d6c16131709618d803878a72ceb1f58f2b11b2e52324022076403ce3d181511afc9b59b3f4a0ce4de9ee76dd60c78eb61660d623294d4070"
        },
        {
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100ed1f432fe0c33307e397f846970f7de0fc18098f3d5b4cc1a25844f75dbbfb9902204075ef8e6d6dae438dac2a7e3aace3e27bc7c67fe22728395f92888e68361f20"
        },
        {
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "3044022022be34e598b158445f7ff6a5565b04627b61789339aa956b03f5c8dcb81e0ca102201b970d57742618204906414d7d23dc42e9e566776e7bda9060bcde335817a8ce"
        },
        {
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "304402203ec8a77927b84388d5a0ba1bb0bfa38fcb862b8c43d988bbbbccbd547a4ae38e022002f2f736d3cfbf42829b750af704323f29b1eedcbde789c49052521ec47bafee"
        },
        {
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "304402205defad5bc1514f254cece6e8dfbfe3b68c3818bef6d4268b40c59858a6a2187502206767bb96c040e523dfd88724a0ce4b4f6bde73c02a286772f2a73c973dab0bab"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "3045022100a273a21625a130728e0448f53a047d50867a9ba5e4a285d7e06d98fb3bd655c2022061e93ce13cedef0ebe9bc9340b988d0fc7353e99e2ec28b77102a14b3a129479"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "3045022100b74529d5cab0055f80732bcf7864f03db98bb9f779fa56171f3faafdfee2719e0220757505e2ba5df6184002e921f678f9f5bb073197652a45d86c6edf003067ce2c"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100c14e1f90619be9cc92da927b1c908a18133b043e138d908bf81117e1fc73fe000220503047ae5e75ee53c0ed60601644ec09f430c613edc6ec72cdae4021d29438ce"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402201096ca9ff9b886a77fcbc7fdc8ddfc0f42a9c8e7fccb783581ca3abc75ba61dd0220191d21eed8b4eed56975b580832a8b1891a5b674fe1a0e5d7314b7b6486d7104"
        }
      ]
    },
    "56:0x111111111117dc0aa78b770fa6a738034120c302:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit 1INCH Token transfers",
        signature: "3045022100aa4cd645694179ca07ae32f7b9e940ef3268cab34bb2a67d4c4f31d0ccac76be02201a98adc704ff642bae02e8566470b83e98f95a70ece9a4589d1e7c865ffbe06a"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "30440220379cbc9fde04d67f3bb79f0559aa097ac10cc5f3581ad5ee7b2d32babc95298202207e0fd82eef66dec1f39ebff087ef36affa96e6d70c15a3ed57f820d08a11111c"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402204a8c834e5fcbc352bddfc02f932f2a068d3fdb134caa710ea472a37f1e8e3a1d022064452eb834e0ef14bdcb574c68c120d950a04af9062a4333d886ec6919dadbea"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100a088cba51cb5b8f2990bb945e9e927e0bfc11e76c8385adb7b2fc51e07a0281e022044f8a9d52181488e0e01fb88bb5634a2119845658869a66d2ad4860be1b1bb27"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304502210090d04cc0125bb3c6dab234122400aaf545065c6b9500df29da1e3544e2c7a3b7022036ced41cee57f6342c50ef32524fba068f470448054a50521d4bd51aa6c9bf14"
        }
      ]
    },
    "56:0x7e624fa0e1c4abfd309cc15719b7e2580887f570:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit PolkastarterToken transfers",
        signature: "3044022070d11eddf5a69c484c2db1d472abcaf3a4a3c5c9bb821b7b5adcf24ca658110a0220227670ef7ced8b0f603bc997967b67b12ba6a1d8022b29e4292d8b6aad14cf05"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "304402207f0fe68dc0d1b965726ed17a6f4eeb8a5643387dae6afd4d64a10ec1e5dafbda02200d4ea50dc2c96a73d8e2b868414ee83d8003c21fa5399279704756803e1ede10"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402202bba41fde065250b92e68333ca0abf62e596be683f777a70e68ede89bb72ea2c02202a8c58eeb203db1c42559234a8a6f271fa36c1a14762ae84d88721d741978bf8"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "304502210082b117a6d962e4ebd7149b49b078d2d66b86103c8ddb82279d9dc78258cc2bbd02203edf8667c304058056553ecb3f4436d578abdafbe0225e0742196d367dddcdcb"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100b57b1f68bcc9ed8cf405aadfc9542a7082ff870b1e4b9eccadd4ac3da8a16d6a022049d2fe4d0506764f6be7e6389b54dc936a517600cd3e7c640b781a2102142491"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022039764daffb73a12d21ffa77c263d071d00bc1dc310ce4cc9060c5330730709820220123a0e20ffc1cbcbc9537556ad29c04ec8e19dde7e7eea47afdee360fe09d242"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3044022014a44eab1d24466ab29b61bcd263dfa466e45d9f03cc11cb5b121c941271fd3d02203e5e85227f53465dde124fa0ebc0692bd2b1cf5b90bfac44fe9d536b7a4b4a96"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100922910c61d22377a87ef85dee6da9e29c100ac9876bc6c9cdb9881eb3d0e131802200cd42f4698d4d679da31474cd4ea4296e7094ec17e06adc3c133f1a8dc41669d"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402204cc4c139386164490893d3d2f2933effed82ed5daa0e0ee4d23ce9176705441202202ba382b1639ae0826ee0bff9cce3ef2c7943f32c45ff4584bd55b3a49b0f4c95"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "30440220686ad6284ef0d911254be7711cb1ac23633723aeab62a7165cb4b98999ccbb9c02207e9829c804557417dca25c7e23f005b13c851beaa6bb93b42e9f07aa1a210667"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "304402206be53d7a3bdafd6e4bdb86e3d1b3767900986bdd6a10d6075963c21b4ab0992e02201220cd9023788f36704f3b62fca65de422605ba68b833964c0792ec719ba837e"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022026ab43885c98f433ad1424f572718fbd548d56b2c02354d512a0b5e4466f4c750220677b8d7ee647b4b483a66274adf2afdae3bff55edbfcb5d005d20a5ae3026228"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30450221008e26defd212f1f8e9d537a13709a882614f1bc342efc8b7db9e61ff29df1466602201e4c948dc25397dec005f49ed4edac675707c248f3289ffea6f481bcdf474e8f"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022026b4e495aa2d354c03e15295606dececc983e5e285ccea63582e02af02f407dd022029f4377378a3548c9b2dbc37df374d5d4af8cdc6d8a97ded5ba10f212902f91c"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402205df3ca33c7c47b4f60ff51af10d9ddc3537015ddc22f374c2c192470ebe1e61f022070025d90624fd305bc893f0284f6673761b7318381b30899c0576fc89692b38b"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100c7a4dd786407dcae4d3cb167f1594dcc76e83760bdbb5b21dd08d550b18093a0022074819e0600908ef7ac7c81be5029486d7b0b4383884cab6df8966802766be2a1"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100feee7fef4693c181917b5aaebcd8d8933c9f7522ac5eebb13a8612c4eefae23b0220498b1180915442e73ac2770f63df86a781c645356b5218241a265770501ed4a1"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100a951f388b18ed053e69fea412e90e01c12bb5e1e4c20beaa29c2a94e871d667202204702861a2921c92a11f60a6e7ea6a82d1f67a254ef8ae89aa80376ea0a1c7d63"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100dd21a591bf52a2fcd8a87e63e1f920455b87e71b124cd2613371b2421cc64d4d02202ab80b9b2cb4c647123fd967e133b33eef3eb685d6d9a8028427501fa2db4a32"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e734637a14265d0a682d28205a964f2e632981ae39c49dfd022339bac8982daf02203662dfe1cc6e99a6b1679a68eaa00eb7157b0334ee2f68474c9d7832396de6e0"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3045022100960422217afa9fdd640240ce7e5be69848669bc6d63e92615f7dee6c0a4a42be02205abdfaf049823bb5c97bae109f73987713cbedcfd7019ee5a930106df816b900"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022051c30857bcbd3f70280d7c896a016da0ad49dff1722d25ca0cf3f0acd0703bd20220105ef2f7e1710d0f89e2e5117c28a305923127435c12b5ea1f30277ce7b230bd"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d366a3ee4f420bc5f959c929570dc2546955b9466c141514fac7d051712d80b102203c23b3de82773af68e15d78dbc87edec398a28bff8436716af0369fcb3860e44"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30450221008b10f9234382c1efc5d294d98975a25a16c9027604cd083ecd05af20851b04e202200de68027bc4951fbac1fa434a663c8ab89134fb9d8236e77fa5dc16c5178c9c7"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100e58442d4ad3a6b3d73c6e9a1f7cfe96d98179bcc4e3ad926ae9c544bb2cca940022027bf7d44027e967ccda7b0b0e077194eb9c2499f31e75efe1895cd10f28f0a99"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "304402202fb5009434c51b55f88b48fe62be378a22e8ab82d895ea66d877f4ab94010dfd02204564388184db20c182dea67978d9de519533473280b37a7f2b9f911dab1671d4"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100dce11b4a8cfc9847bdfaa3e0f38ef3632f57e5188177f4c17dd8a531bff652e50220050c59b5f67c0d4f59ba37b2e0f578915a44ef055693d92aca43c0c2570d79cd"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022001fedbc154eed1d9a1628dfa85eeddd9abb91b18d49a59e8c7fb3c4cc55f1ba4022042ba188fe844feb40d5bccce05c1296fc9acb19f92331f592413bec294926940"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402201bc1cfe7677b63fe456cb3a78ff032122d9353af812c68a07052dd8b63a62a73022079c4a25e1a1d3a3d3630490174a9adbed8351488c98b7e6e1b055a4600d38df6"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100cb619f27b93e791f667f780925b1647f49faff0bd3a8f3f126444e1860ecab95022000f156774aff76c8db348a0a5677b7a99a630f0c6ba55f9f2805bd363df1be50"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402203d2fd78eec8d725bfb69586e5d588174860d2e962b0659440d8c6f2a0cef6611022059dc7fe99f8fd6f89a15b5534c71e7571c485fe9f3d21d0a5d2b0437f92186c2"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100edef138680959b2ea2ba9c336988fe47c4e6078b19a94e64d53a80cc654bf3c002205a9a78c89421cd27eaba1b07c9beb47eac621396c19d79ba02c5d6be277a0401"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402203041ac9f31682911a83b11ee0cc13c225e4be455be045fbf8b0a5741c6863a3f022075863f0396604e2c74027e8fef019433d681fcff3ae546b1d59c33f1c585ed28"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100fcc91d0d928ddc5d34ba6ebfbaf512c01f93a8abc53f1ad0a76eca84aa78a701022010525ef9569401b1680592415c9b4507d484d59bb37095f204c3a7d5f647f329"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100cb4c66d1a45af4bd6d116b77fb66b926bff56afb8a550c3e28582f5e436761d102202aac75fdcf2e4713257e41e91e8df5fcb7e16937c74a61d0c2398ade9611fa80"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100c87c215918f308eed7462ccfe005907d17cb841267ead035340e8f9eb2d87db602205ace7a0b47150b3f423a679fbfb2a00b015b5014ac8c3ca3e885499a300cb5a6"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100c62059c35d7644eaa5fde91b0e7e110273229d01dcb8aec96afc13d01f404f220220674b885b86399f953f824185d70df46e92142518a8f4950ed2d7ed54af34f677"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100e5bf376e10e5f64a253d43489f38b8eb4fb2135c04078709e90c8ca49e20b9a7022078e48814760f2df95dc8d45d3c7a438674db223f6b727828c2784fc2bb2eaf29"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e62d51d254f6d76c0333cef9ed6af8dff443b4879ece411f18b408e24c65b40302207cf8df390dbfa6a0997047d97fd57eab184210e0819addff6a3e91fab8f7922a"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022001a89b05eb7f2c0eb520e8e9152af5a2bee435d4ca84912ecb16cfdc9e2b36f202207a19b3b63a6311cbc3ff21c587f4622adb0856174c26d444c063b825d981b16d"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022026254c5b6903c27b62b2f0678ba4d99e853842af501bce7d6cce9e01448d76bf0220517550421f2c67d7486fafbcba486513287cc3797d45cca7cf0c3d904c598f7c"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100e88f44eed7b2fb491aa4bcd8fc96907cf09a8f8aa194b099dc0fe7668d7c303702203099d5b55a43752a4e6777ed448b6a96d2e5da2ee7149620322c66c72248f154"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "30440220162d4f3fd7a5c8e19d1b70aff5448914ac7082230e1e1c6472462640bc97e4f6022022ba8773c06cbea23b13e6953c8a0f7a98ffdebceaa5542b9c3e330ee474003c"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402203ce7919144ad501982f67d07e5f14ac966643ebd85306bfd2ed01a0b195bee6b02207ec812a2d0bab9ed1b9a83f669a291ee0571249950a8f0be1164af9da79780a3"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "30440220610736904a597ab55bacc2821c8701670d08ef91661a148a425fcac47657926302202f83060b29d4623d0d13ad80d8057a19ef50986d243609bb3fdad0b93b7320a6"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100e72714fb3004f389173e1e396dfb953163ebd1f8427e390e6b6787cfd02ef54902207d4ea7e366753356e0c4d9ef1c124f20636c0b76a2040d51abe29aca5781611d"
      },
      fields: [
        {
          label: "Spender",
          path: "spender",
          signature: "3044022066ee1bb3c08d1c38278427508027778ab802d61f09023c8549977282d884a5bb022048bb50f5631e49354a7bf63f5801c1402eefed99d2b74e775854c64a77b2283f"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100976a51db9cb1b52023660a375533f1fc1cdcd6b7887dbe37d8232a863fd320c902201f0613a22c2cdb74fe98f8ae254d77c56ad9bbe7c15012c82975cb0d81857240"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402207a2fa57613c73382cc1214387c355d097baac6a4bf82c33054b4593ec50514c8022049bae1f0bda8f1594a37ad118eb48ac48ec53c562d37a7a5775b409584dbcfc3"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402207ffae59782b65f421908a2ee34ab165ff2734c678413458e875d235978362df102200863ed5ff10a08de0f175726ef2af9ba476c57077b89cedf2d9d13eb90a77c7a"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100a100d0b7b6494837e9162f26c08e8554969be1e212097ae974edfca5d63fffee022016fe8082a1ff56b71cd80fa54ac6d7bd21958ada0b664a6e0be7580b6b65d9ea"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100bd5ce8b79974823bdb9a7188b2d300ab5ac346578b0c73b10fdb0ee98d68a14302207f405deda89efed5b9aef4d2911a90481770e48db7a4ef02a209da55bb750f85"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3044022069e268580149f3806e0fbe3cd09b54fddf16805ca901de001a115ad2330eeab9022051e808755f106f96ced721d1e510cf6dedd341759a0e362b18e747ff54982c69"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402204a9c020d1fdee5156097f946327eb4977e5d2e9208b25dcb90e7b383fbdce26402204378adef26d05e8287c328ef2d09651b9b4c1b26cdebbcf776286847ee2f4913"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100d47b1423b880c60c932876e15749cd082acfe2fe32a661617ca8270feb7743e40220335191829d6a3b1a27dee3ef704c0cf92b6c0a14aecfb3a8e314c7b3e5f569f7"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022020a162731ec93ee7f98027a5feb5e03807818be464b00affa750a4558a99f98102202578eb63dadc6b18743a96ee393384ef40fdae8029941931a84b039c19c933c8"
      },
      fields: [
        {
          label: "Spender",
          path: "spender",
          signature: "3044022070bcfabeb93910982344547495147294072e624f0134a0eaa195e73f0a1b7268022030ac8cdac2076a43b304ba29cedf90674147000b3b37ed9b28ca1348d679e92d"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022033591b50b9b1f62d550f9d2ad404003a516e6b85ded26936b8ae51d037bdf600022039c27bc86b448a2e3cae64006c4cc1cda73ccb3c683fe0ceb61bc3ada16362b4"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100eafa8d03750d6ff10950d8e41bac1c1a23de0754d4d2fce1c98d3f6d548c15580220447ea101241ae8086d83f2c2e190d23b660b790d905db80ac782b4dc7752399a"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402206f8fd6a67e26cfabae4117fe67bab3184a8b493389c84e1249b7f9ca7a62a69c02204e00b017befe02baac4e1dcd3b64bdc1436401c5d58f8f54e0d44b9af65552eb"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022034fade1f5e208a71196e268fd3a1aee8cfa01c707ea163cd74d7afefecca6461022000d66770d077d17cc655a8263eb1317f30012f169c8068e865b19b6321706431"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100d45ba12fa943bc8c48a5085d4241c964a1f65823ed3b5f7a288c6885fc0b12e402207b5310e046215438da64cb370514f642d097030575a9497cb7cb82ef393d09c3"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100da37ad4b694bc7ee59f0dfe9f37ce8100b2fbd1d22fe866ab90fcb5a75c9071a02203927e28b4df2e583c70f6e15272ca813ffe4d3971afab27ef3f403730aa48c59"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022020be4365768b961d019a3bd11f3c72b52b093252d8b0c692ef03dcfd9f8d648102203a793e8cae971cf3fbd53518d0c2b77b15417657ca2c3b0bb24754c70c372574"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402203d728a67ff37efa4d431b1d682b3bb13535818f3e0338b47c863f5a8d80d138f02206d0b0d51a8ea7cd751f0599906f82dbf40da64603b376321dc4112a10b36a791"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402206a03800c227fead9cf18053d5cd9f282f1c86122c257075589094526f02adea00220193bd64c8d0c04045f8cb3367da07adc0121c9b35a30895b62333e1ff58d00a2"
      },
      fields: [
        {
          label: "Spender",
          path: "spender",
          signature: "30440220731aff0ad876d81442c75102cb83fff4139d74cd9cbed9f31850a7f1a0fc643602201fd344d75222883622706ea73e0d2c9067cd1f744f17ba716cf37e04bf5eed28"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022002876096e574d655f029dafcb9c356dcc2d8fb2dcd3bdf3fce15564e3d50ce8a02203b2a4c99c7113b784465c741bd1456fd598edcf5f0af772d6766606901b46a32"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402207c902bdcdb3709c8a1aa3c1e52b9ffe85c1c6468fb42e542c67d371a29ce1c560220289e633566912180b531e66e147de1eb59dd6d7d3d0d4e2eae22dd369f2dc507"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100ac31cae76a61aa434d6fcf7230abfea0ea868292640f607129d20cc310b61bf602202a70073a17ed6ebe2676816febd37f488435cba843ffbb184e14dcff207bc213"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100e58823841f5b5ae04b011af5d1546d3514254c39af4c5f140371d40d2db9534302206333652326ee585116844754351feb73189345cbf2bed596e92bcb5c73d37fc8"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100f4707993b6c3ad2702ca775cade1ff69bd4f6dac7ee3e6cfee9eef71f9088f900220189696a9ae7371fd16cda5147d6f282d416d2956651ac0361ca1fc0d60504d6e"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100c3b0891248431134809b5e5383aacf261eb56018fff48dcbbd043e5551888ee702207b1b8ce28cba1aefa9a6c95821346422b466b05ad4784b5461afb874dc0fbd9b"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402203640de985c876c17d297a73ba553aa55e517ea36838d9fd235c1b94f9a805c3302204e1e64b95f27416bb1dc4c823ecf9f1bc4e25791b6c7338035f58ab8fae59170"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402207e78eade3c5caa49976eb8d06dcf60c5268e9a0af3ec3a23c686b718c744ea1e022067e283c42fa55edce36d01cba872198011dc91c849044a119f34d951ab067163"
        }
      ]
    },
    "1:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100e1f7e1db3081ebad48f85b6443892986b2048bde4dcc8e7be4c926923ef6de0a02203d042c0caf4ba241f1a9715ab2e18bd6d581d8383a5ac41b9e29e2fa247ea21e"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "304502210084df0994694c4f28ce49b11ca4d04c961e50a723393e1e62e7fa62f3460649340220489ea716160dadd85eeca97e8dd42945c95e5d5b02e6b1abc0d6292049783e72"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3045022100963859d2192e1d9ee9541cd7fcd7e10c305ad0dc18d132f17a8904cd61510067022077ada6acd906aa77fd25ae8e09bb1d71c8d04655f4a3eb30d847b1174292ca36"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "304402206e991015ec3d74a70cb091b070f9c980209767246bfaee40e19343e6e558e60502205ea0e5eb238706500b23e9dd94da24ff6caec60fb9996fb2fbe4140151f47409"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "304502210099b30c9ca05ac710efec2d7d21bedf063446da29a7e5864c0bc8cbe30d2e6031022054d5257fe0f4d2624b4650361048b642dd269592acd19cc8801035b91b7774fe"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "30440220760e20dac71d010d9a93c3d34a6847469fbe21807b539d5bf9302325073f59fb02202c876f4105fb051e6f69430ebf2ea2e7ad77c63eed86e699eed863ae0a8407aa"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3045022100c23f20e9c3cea7e06b6642635884b11ba3653805327413f0e779dd2148faae3b02206c613e4f4470527b6ef0304b09396ec915045116607901d1c2337b5f04b87634"
        }
      ]
    },
    "1:0x119c71d3bbac22029622cbaec24854d3d32d2828:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100ea11ec08e4ee7178eb6121d603d00e6c6e62d0d94e6d4098abc22d709c47b5d7022041c0c9a56c14a783c02a8ff358b0162ac1f743c3f8fbfe8726d125d041a55a04"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3044022062d5d76cb58f4b20f6516df1154c983610b57fa7a2d65be91915012075ccf19902201b5b86649fceb99cab590143133b535ac0455505fd70e94ccc5d6712bf1cc963"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3044022016261940797159c32ca0d8f646e3994fbaece31f143d5978c04ca680419bead6022004f2a06f87a7a857ab78cc64f8bfa15a188ae8606a0989cb411c3ac86fa3a7d3"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3044022055fedebdae7b379c3ccaac3b27c8104a67fb4966befa270366ce79cfa0115620022074b785487894db3445f9584db078d6718c7a3f63d1d8e1324c37b4eac80c40f4"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30450221008e8094c8fdb71ed55f71526c77d58b4331f057f97253dc318b42dd985f2131a202203b910fb2f7fd7cf8abf43b7457544df3322a1c4fff60b4e1f1a96f88f889bae3"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100eae49be17c711d0833b8e4e05c5a0a1655d0522c2cdac8f174d32db86e6f778902205a1608d20bcbd0e18f3abbfe717ae248328468853d952ebe63d0787535fb6296"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3045022100a372339b731529e6315864744dae1826fc136eb899925e46826faeaf6ad5b10f022062ced218ac80dbb3bf8d25203de72c7d06ee20e39115bde37de3f3a50e9f1868"
        }
      ]
    },
    "1:0x119c71d3bbac22029622cbaec24854d3d32d2828:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100f2bc7298d431b6f742100623febe6824eea30e37b2d89093c9cfa933a053878102207332846b67bfdde820103d7d775c51a1c2b0fcaf48f2a9a19cad9364e12fde13"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "304402202c13c39d9be77721727b3920ecf3e856503d952caf07a74496984b6bac252567022057cbbabfff5bf7a00ca18d4ff9ecb0c5215d779a4750daa96fd3a257838d7907"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "304402203f4e208ce3eaf2cdc9c892c3579ecfcdea71936d7931695294d4242a31b05cf20220370f8d5f60500e7219e6e18d3d0ad89eace7bc19506b51a192f4b285db0647bc"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3044022078b8702255d94aa9013dafe99cc2ef96b7a6c30fa5cc3f7d2c47541e193b47cd0220492a89c9bf72e0236d57449008407b2a5ddd20ba3a0abbe2cf851d9bbd7c1aa4"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100f50a715d4590f892c74d417c2d2727d7bc5ab3f7406ba00fd1e15b539368fa66022026c8e8af1802cb5f0fb71d91c8341ff54bc00afc9141e883ce0a38a24136952d"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402204b5fc646ef012cf525b8e2a85113e532e16d805c7abb899175d40eb0bdb6bd2f0220586bca533943916d742c4a12cd8f82da5f93b6990acbb240e6d559edf6f23167"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3045022100d116efa90828b9a139cb8b54c3665db8e58cc2af118bab85042705b6f0cf997a022006429fe8762194100330515341dfdca029e5284ca44f57d50e8c1d8cecdf81e7"
        }
      ]
    },
    "1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:08c2ba593f6e0e80b8fd2bb1da6923135c173094f9cb6ecdea6ea144": {
      contractName: {
        label: "DeGate Withdrawal",
        signature: "30440220089127ef62e67a3d075a2c0d645c06ce98e6cd373bca7ac89217b2919d718b9902202b4fc6a5488200db6a51ef2193febf8023770e44d361a5c85907c1f6864e3ae4"
      },
      fields: [
        {
          label: "Owner",
          path: "owner",
          signature: "304502210085a5f94d365f90e93bced9bfdea6f3a762abfeec8d77b070905e46368f0db7970220042075c4a50ea30b63308a3d4ef5cd72703c7447d4d296e3fc90e3872aa54259"
        },
        {
          label: "AccountID",
          path: "accountID",
          signature: "30450221008d1561da0d5464ae0173b2a6ab1fb7c9fadec3429b9d068f464062cda6a721840220169a240b04d50866f8250860c82b01e664d4bb1262f7782a454d3341312d7831"
        },
        {
          label: "TokenID",
          path: "tokenID",
          signature: "304402203da24c741ee39f2c353d6e38386af0ad7b38a2568663f562e084247b618410b702205054378fd255b5077310009af3ce2507c29f5c3a8b651b64519982ed502b4090"
        },
        {
          label: "Amount",
          path: "amount",
          signature: "3045022100c2d5d4aeed590ec6bd2116f83eb334023d5bf01374700e49d73af5875059c0c10220286ce6cc46a4d5e9ce71462b9431bb69c55f060a65fbdb2728b526cbecec0046"
        },
        {
          label: "FeeTokenID",
          path: "feeTokenID",
          signature: "3045022100e50a065542008fa67af23b0091e5962e89deca43cc4cfa55fdea4ba86873846d02204d3ef27ca382008596cf584a8169a925a9cc4608ba16fc4673cdc539dd85a29a"
        },
        {
          label: "MaxFee",
          path: "maxFee",
          signature: "3045022100a79503f04eafa7afb97bce7df13dc697d7ad03532be221da27d596ba5c4f9be502205ae99bd27a8f1c92cf78fec9952845342ed93625d07ef878043af48eaaa4b093"
        },
        {
          label: "To",
          path: "to",
          signature: "3045022100c689e1d30113b842b9fc468cc4e26308a6df924818b9fd89431627c8a42c57af02200225d6cef4578c9e4c46c48afe459a7037aedbfda03195ad0252cba5b41b502c"
        },
        {
          label: "MinGas",
          path: "minGas",
          signature: "30440220464c332bf0455c61102f4884218190994094d7c9808411c00fa6fd6ef5763cc002202e3324eaa0bac01d96738a8a9ffcf531ab59aa03911f2031182d8b9de97a4f06"
        },
        {
          label: "ValidUntil",
          path: "validUntil",
          signature: "304402200ec81207eb0079bdd15905bbdd9b98660d705aa08df96e9ef990774d2f1103cf022035926ba6cf460783122664b1a25849638ffe34f42c38177276c3bc7b10ad9cae"
        },
        {
          label: "StorageID",
          path: "storageID",
          signature: "304402206d33f0bdb8b370afb15f212aed98da5ad1d2c41362f9ade1360f86ae9ed15cbb02201204be822aac5c18a09f0baee45c5bc3295c8c085a391355e5ebb8a3242c9cca"
        }
      ]
    },
    "1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:3ff1c601fe26dd56c4fc5d773d7e24b17caf0754a14f5eb033636388": {
      contractName: {
        label: "DeGate Transfer",
        signature: "3044022043833156814430e372cc93d7540835c0ba00e298359bd1296425f42b40c477ea02206416e6bc158f72bcb300fa468fedd42394ecdff897494869cf1f9679b6c2769a"
      },
      fields: [
        {
          label: "Owner",
          path: "owner",
          signature: "3044022018ba034d2e60f07b388cde680072eca4b0815ee5f479e165626c51b84321c6790220793475c2711d3aeefe5ec4d5ec89be59c840ffb2d51d013c8d86c2b5d7e96a8f"
        },
        {
          label: "AccountID",
          path: "accountID",
          signature: "3045022100aad3a5a7ba18bb2cb73d647bc0a573eadf97b62bc08b7656dbacb982aa341d7002203a4f6e50a3f386b10d0377debe312d5a1462108563e18807fa8d45c4edd7615a"
        },
        {
          label: "TokenID",
          path: "tokenID",
          signature: "3044022002c7d20b128cd4703230f199371f6ccd18f2e3311ff3b431cfdba8ed69b8a9a602203a5be9d165adb244c9c9e0100bfb559fea69b7a91a9c4805d3cab7bbf649e2ba"
        },
        {
          label: "Amount",
          path: "amount",
          signature: "3044022048ed7a7e1860df3c118a9e0bc25ca8085ca4c4981d00d8a4a25bb26ee905d23702206cfe29c63e4da5415b402f1576466f6c629b44c733e3d4a4a46b61cf1f0ecc12"
        },
        {
          label: "FeeTokenID",
          path: "feeTokenID",
          signature: "304502210085ec5b05794e239114ee6dd75453cde566ea74286cfe76122ff69c230f54f3690220668392a6f480c2eff108cdb7cf3aeb287bac88abe59914ccd6932717e14d2758"
        },
        {
          label: "MaxFee",
          path: "maxFee",
          signature: "304502210098019a9ac20d02984196a508ca27d29c2654feb0ad161b1500ec7051c0ccb95c02203920ddf0bf7e17f31dd59994043bb0a21a3f91c9674f164d63df5cbd42e926ce"
        },
        {
          label: "To",
          path: "to",
          signature: "3044022067324800e3b2353a4ccf8faeebc4abfef0cecf550da5afa292dd12820e05602202203fa883cd57d057a3463d149117490ae889173e867b54279c488abba636357029"
        },
        {
          label: "ValidUntil",
          path: "validUntil",
          signature: "3045022100ebd27a8311ce197bf3bbb72856362853081faa55048d186a15017c998b164edb02204bff1cf694d3195d4c82a2c8d6f6b1d4db842e9fc891eeaff2d4ec4d8d64836e"
        },
        {
          label: "StorageID",
          path: "storageID",
          signature: "3044022058b6542b5fd416c8c321eeeca445df10141187fe956363d7053a90debea15abe022039b14b0f608f4b1c8757e5de2bef2f80741df2a85beb559d4ba710af9284e953"
        }
      ]
    },
    "1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:4decdb2662378b6612b240fda08f6d00412f088ccdf3023095323de2": {
      contractName: {
        label: "DeGate AccountUpdate",
        signature: "3044022059026d8aa3f81272e4b4b72f0094cd0fd04ac862e3e8ebc3e73ca7b923a45f70022046a1f7323da99a3dac0d4cc603c9db38b64ac3fa7519a1248e111abf926664d1"
      },
      fields: [
        {
          label: "Owner",
          path: "owner",
          signature: "304402205f7fae43ba4d7a0e5bed7bd9cecab4f2b55bf6ba6b3e33962ace5fabef269c0b02207bc89e0acf86b7593b18ff9d865820956508bb1dc3d8551dbd9f6745029cfb3e"
        },
        {
          label: "AccountID",
          path: "accountID",
          signature: "3045022100e580811e1e6b2e40fd4cbf4eb1a3f4baa934e6d96e80674431b2a6fe93581dec022010447ecd9023c4a028142d2e34f217b96a65ba030052c20eda6b3f4428ff109d"
        },
        {
          label: "FeeTokenID",
          path: "feeTokenID",
          signature: "30440220387d9f50b9af4dc0c2ff7dc73d513e1d816a55aafe1ffdc88827176907c3a5f0022007d64ad6946f932190bb352b5aa3360b4be0d1b50faee29010f5fbf132cbcc31"
        },
        {
          label: "MaxFee",
          path: "maxFee",
          signature: "30440220395dfa14a44c006079ec38d901b71e839ad10e1f9642b37246e4544302299f1a0220216a9b71a26e1a8ecd87f7f16d7a04aba42a68c18da25e8b608cb4493731ad2a"
        },
        {
          label: "PublicKey",
          path: "publicKey",
          signature: "3045022100db2cd9ef2becd6bd902458e4c3661be2f98db0943ca0b1d074eb249cac7139ee02203d011e51879b69be2ddcbd215242dd9e70f0cfd92c59fbc5089aee56bb51c7dc"
        },
        {
          label: "ValidUntil",
          path: "validUntil",
          signature: "30450221009d4db9f47704967c5fef69f7255e9dfd19abd928adeb7a5a06abe2fb8b3adcde02200ed93b341bc629b132313b1e8c47db096145898b3a741d165b21b653ef14c3b3"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "30450221008e187640c09a34fdda18f022ece0f1632315392192876af7df895c6245ee506102205f149a22b0eb3d9bcdc3e65db8a0e1b6494266c721c1bd4248e7de7bb8a4dce6"
        }
      ]
    },
    "1:0x7f268357a8c2552623316e2562d90e642bb538e5:d8e4f2bd77f7562e99ea5df4adb127291a2bfbc225ae55450038f27f": {
      contractName: {
        label: "OpenSea Listing",
        signature: "304402205f01e62b2331ecb9f1cb3f49a764d66015937cb20cb4c3af625146905ca4832402205076eeb4a74619b4552278836b548c8e525813faa9008399e43bfed7db016408"
      },
      fields: [
        {
          label: "Contract address",
          path: "exchange",
          signature: "3044022069df3b1c82dda9849a3df4cd0dd263d2b6c35e4fb8946865a35f5555830971b802201880d72b3d956867b597a2f5097d7f8799bad6e636d3de4030515634bba47155"
        },
        {
          label: "Price",
          path: "basePrice",
          signature: "3045022100db49dbd8426193b6012781f43c3b445d1cf845d99d738091c1f068951728333402204326a2da5203f25deec049deba760bb31a86507c73fe6828c68e0db2eabfc966"
        },
        {
          label: "Offer expiration",
          path: "expirationTime",
          signature: "3045022100e71a4921740fcdf4e489c517fc82f9b7e83cfbd675dff318acb91fbf8eaf175402203fac43650771c6523dad8d995ef414d035a92d262a9cf95885ef2704337a2382"
        }
      ]
    },
    "1:0xe92b586627cca7a83dc919cc7127196d70f55a06:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3044022043fb323d3a064faa38bcabad3a3f797dff60f55b49c19e350a9d0b1f980818e202205c3dc14efcc49adf915f195ff29fa02dfd9d08fca532b76086e501f9e0d133ed"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "304402205b674138eb50ddbfdd05768f2c641109f6c8f341d27e10ea12d59e083746cb330220521d739a49ee57ff9a41cf00adc631d3dd33e9ce2b23ce50759fb33c0ffce0a5"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "304402203ba8d470649ae7cb5d02764fa48899ec0414075ed85cb9fd95e89ac5b3bb073e02200183233f30de996a8b87417a6febcbb56a544c38fd62b6f7702efa7e0d7b2ee3"
        },
        {
          label: "Maker asset address",
          path: "makerAsset",
          signature: "304402206f3c4055bd431c1ceddce5b147c3b5acec950b267205da655fb3d331b9c070830220570c9cfdcc02b10abbf9a335ab6a4067ab7cae2ae8a443f795225a7c3981cc0a"
        },
        {
          label: "Taker asset address",
          path: "takerAsset",
          signature: "3045022100fb93cbca6ee524729b138319a92316a37c56ae5f89b3d652af7f680c3f160df002203d1fc525b11cd30d2907f844d7774f49995b2be7e3ba2896dcd4a6e73c8a59d5"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "3044022002e75adf4733bf28d532647c54fb0000415737db37b7e5674f9bb20179d01eea02203834ebcfe81d98e745572349bb0da4ffdc8ec846d35e3812119e9a3491462724"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "3045022100966a77a69a7e0c060f154a8c7ed36087d8ba7da111d9bacc90b873421fe6a75c02207d92956d938a966cb98ddb6e8b3a56e4d8e7725182cf1bb02f03f67512460485"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402207ece45c0993fa46316022cffbdf64307cef2caede370f27fdfd78471c3550dd002200da74e8b3b5201e654e7e4674f7471a333a104288fdf8cf80fc3122126113d1b"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "3044022014183f10973ddc0ccb12472d2437e33f368f627b99022735044e5c4ebb4e345802203a3f5e8aa5c928981d2dabd0442342c605db1626dcd0d3ad5e3afcd98bb8c673"
        }
      ]
    },
    "1:0xe92b586627cca7a83dc919cc7127196d70f55a06:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "304402206dfa1d54ee0a7ab236252618a5fac9c752152304f31838eab4ba4c6d2d3f844b02206658b1e9b2503577619080909be0f4c1d2a899b3d0085ed8c3f2a4309762dd94"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3045022100ed9b0b91a8cace4d312f6d1bab076c057e954a9cd33c3dc5c350d030e41edd230220230e3050131157f6fc2fc578df7b1108f69d55d25ab837c661045877b148765b"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "304402205d4913092612fe78d75c181f3ed28ac7808e25ab0131e73bebd91c08aac65e7902203d63f1fd4d5cc11b1f8aa2af0ec6a8440a0ed59d440237bce96ed87874c2a26d"
        },
        {
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "304402205f9fb08bef206518e5bf48cb7fd968709a0ae317e903d9c87a41c934a0983af3022066264858ae4a1338d4daa1b4f9dc7376335ce9e57d4bed320b0d4c27a0012deb"
        },
        {
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "3045022100ac653732f2acece7c47588bfff9a1059dc69bd3fa7e387cfef8246eb0ae2a70902204ffd7f89cd7223f8e52b7c44b02ac4fa1d06017015304f1a3a7459b20d54a5e7"
        },
        {
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "30450221008e59dfbed2dd4d1e2738b829d7a57fa23be737b652c0b01299f3d9482174aea80220138c8e948becda6dc1e7564358e574e7ac8d7016f2a1795059977f401535b27f"
        },
        {
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "304402203408e2bf0210fa4454baf46374cf876299578df056ddaaf5a907306804ca41cb0220056f910e3c500e4a8f55d5c09dceed9753a2ca7b49a9ade1955a598f4e64d657"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "3045022100ce5db907819f4f36c77f1e3a849a3a6ac9483970128998d5add5941e1fcf6dc102200e1f26e08a3f48ef6fe1d40a4149cb8603c5e70e076755ddcf76894d31f2adc0"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "30440220015799beef248e4eb12f95368ef44cfbaf65e43da1a4110623006e46157ab22c022055f962e02e4cbdc05bab79cfbee523da8ff9d16529c4e98755b15d45bb34a16b"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "30450221008048cec54417376b3a659e3aeeb349a4352751a099443ea203b59e9d2cd954b702201b32704d89bd028a6794ef315bf2a204b7293f547d14282440f5aea041a27ee1"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "3045022100dad584a953b3c56c67913e76f1a6626cb72620e23bd16f41b2817a95ddb0bccb02206189e3b49d9f3475bd52baff2a40c7f026daf1d2dad9cfaa403eb08030836090"
        }
      ]
    },
    "1:0x6b175474e89094c44da98b954eedeac495271d0f:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Dai Stablecoin v2.0 transfers",
        signature: "30440220692d38bbcbab753738d0c75d87efba7b93a88d4e225e73c7e4d0b54e4e8b548302205000ffda67117043bce94c327837053e2b6bdb888b3d2bac3c1c3b79997c1f90"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3044022067e97af5110ed4a8a5e8731a04c07192042b5ef4fdc598cb10256363c4bd503302205fc2e4b4dbc178b3bcd8412deb66f4b99b4506197bb046ad618457a1aadd09ad"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304502210099c45a68aaa7656be36f74fa0831546de4e7b94909143853bf678313b580963902202b01f4e8fa9f6f5621027c1147fc435430f22eae8a91bbd6e27b053e61a69d8e"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "304402200bd61453c0b2ba4d132e33928521c8f9aeef41ac38dea457adc578e36b14995402200da4596ef58d8dbef3bed208ebd8436fdf74a392c261a7a0a779525311282060"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402202fd903bb26f5f89667c1382b26f64cddcfea77434f75bcbf5a381271b7da027202203baa46ae7d78f4d32af367f430deb738dcd5dfe05b04d56ba4404989d308633f"
        }
      ]
    },
    "1:0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Aave transfers",
        signature: "3045022100b90cde117f034f5ac3cc1563397a65a88b65814c4eb4757d232b70f1c7731d6f022069394d2683d3230e7549c4763bf10ddaeb2cd9d48661b818605bd318220b9f8f"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "30440220671740c2ec59c9bf30287a9ec559ee15f5f10dbabeb97e4bbb1756ead6efa4fd0220607931e7d5e48150946b5d674831381304a51c756eabed869fbe28d6075cad17"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100c85534d029bed7daaed9dc5db7677efa56ac772a01b715934c94eec529cff88d02206947c5e45f9b60d76a41c20a2feca0bb06c19fa99863fabdebf842b7a5c088d9"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100bcc7ae5fb36f596f7d2076be3cbae4b87a3c74e331c121bb8ca2a356fd54f89c02207cdfbc183b64be14699f27ea696edd007589dae91c5ddc8bcdadcbb41223ab65"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100b4b6235742a1b4d41c0177f228ddb7a6720ccb6cbd97da5b013c9c6a8e07ad2402203e274f76ce9d462ad7782380db3cb0cf3e7730a77633e0a534b50f84770d8928"
        }
      ]
    },
    "1:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit USDC transfers",
        signature: "30440220206a52ce36fb75683481981c6f1f2e1cc405da8b7172b4fe3b465b19139bd66602200d5d2a800a253881fe4d87ebaf57fffbc7fbb8591ebe251ac69d650469b51d16"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3044022048b3e79d00220b5fb5908cb13264f0a10ab1faa1f9c95702c4dcb91aefa2475a02204096676422035d37f30a9fea09553d5d1751413e5a2cb60d1b9919aa33e166b1"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100da7a47dbc3c943c29f2211e139c5dc43b6c54d79d4aec205694155a8a2bed5b902202f1a885a2a6de6b705f8cfe87d6994e470c779f8bb8e6e52166c4e41437e605f"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100fc3e850699e3abfcbca2f4258f248573b43c91b2dd8d59d423804518b2e5f79502200868300f4a75b3f77b35e7f45511fdd4e7717604d416841052b9a0a27b1087e1"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e809928ed622936a7a8d03141dd7b477ec92243918293e6ea48d32c0f90b70ea022054065681702e458131a18cb8e8eb588618bda83b1a24ff5bddacdfc060ce851d"
        }
      ]
    },
    "1:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b": {
      contractName: {
        label: "List Order",
        signature: "3045022100cfd82c26631445df34b327b31ad55ad7f26e0480ea7838ae83274ad83b8f9cd1022044b5a3db6b6052a5b818b1bc6cb28d523115033ca7ab3c4a269ec37e3cde890f"
      },
      fields: [
        {
          label: "Order maker address",
          path: "maker",
          signature: "30450221008ab1ef7012cf407a80348d6be16a98d375bf959de72f260cb92520dbb30fc2ce02200d9c0e02c8375d94077ebe16c849df5745654a1c499100286201407be47688f9"
        },
        {
          label: "Order make asset value",
          path: "makeAsset.value",
          signature: "3044022018c3ea3b1768f348094f151f8e28171d1325d5cc1621478b23474f4695acf2d3022040ad4bb4c8c138857e426128488ee5a3df8fa0a7cfaf58e9858765a0f72a8a02"
        },
        {
          label: "Order taker address",
          path: "taker",
          signature: "30440220482e1c1439ea879f243fdd47cf043bd271c7fb73ba095463e920ab34c38076c002207c095ec3307fa3a3ebcd125238caf3f7c50d196db444559d31c79916e514f370"
        },
        {
          label: "Order take asset value",
          path: "takeAsset.value",
          signature: "304402205d33c23ab575fa613d37d7fabaa719f5aa4dacf8de0f299e83dd189eeabfc31d0220535f67346b8ed7d175193929aebead42b92921465c1474f482fce88bfd00323a"
        },
        {
          label: "Order start time",
          path: "start",
          signature: "3045022100c178033effb772f141b46a9d5b5bcfc48468c6e5c499d8865043535947b1bb490220687dc9018a38c62e01c91e90fecf9e18febe995267d1bea27d3368f12f04bc9b"
        },
        {
          label: "Order end time",
          path: "end",
          signature: "3044022074ecdea3c58a28565af3336de33390aa7e592e5108f6d9151dd000a90a5eb60a0220163362373d11f177e41b914dc10c93b76adfa4c27f4662179329e66b32f8f139"
        }
      ]
    },
    "1:0x9757f2d2b135150bbeb65308d4a91804107cd8d6:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b": {
      contractName: {
        label: "List Order",
        signature: "3045022100892ab54a425fa1306df530b5ffeab2944133f1fbc68b99b92e61abf5c5051d1002205eff72d6f2c65f7835bcb2c6593b772d0a45e152988b4379cdb52327ce5da382"
      },
      fields: [
        {
          label: "Order maker address",
          path: "maker",
          signature: "304402205990b238b291ad1bb3cce7d2acce868761c6a73fa79e87c05530813aac8eba5f02207408c5e30e840195677fa60d411d2c2bc76fbe15a7ad2506a4636f001708bec5"
        },
        {
          label: "Order make asset value",
          path: "makeAsset.value",
          signature: "30440220646b1bd068a229a75f7f0558f03d2fbbe7dd441d318480dc8eb532c3452ed6a00220642fe4f065198bab191c682e55487cd6464a90c9527983dcd672d15a0a083d80"
        },
        {
          label: "Order taker address",
          path: "taker",
          signature: "3044022014dff71fc22c0b53e918ceed99de5aa86cc49fffc22f271a9586a9db1197e413022001125d415ad2eef46353bd8e812248fbf3fc2b60fb5fc7dad3853c9d2c85c6a1"
        },
        {
          label: "Order take asset value",
          path: "takeAsset.value",
          signature: "304402202416cd3b9b1b9b7fc4bd5434f0f8c54638d0f29e87f1f92de7006747f4e856aa02207afb4547d03de6247628f93c5ed49f9122e2780507bc601f5211c89c8905b93e"
        },
        {
          label: "Order start time",
          path: "start",
          signature: "304502210095c5b1927e171ce8f0b74bd311cb0f66bff5e3d23a7eb52e1d6b696378defb2502204114def9ce15f2b698ea00d43bee8e8692568a6394e24c8e0b53c90c29ab7ad0"
        },
        {
          label: "Order end time",
          path: "end",
          signature: "304402203f435338d8130399eaa6939c0cc8f4fc5efc92a34256ac450d6d55b0ac2e816f02204c116eb40b3c07810facd9117572147216fdb175b2ce31c6ef277501dff7f6d1"
        }
      ]
    },
    "1:0xb66a603f4cfe17e3d27b87a8bfcad319856518b8:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9": {
      contractName: {
        label: "Lazy Mint ERC-1155",
        signature: "304402206bd24ac8c5cfa2b75e16ea0c315295368a7f780c4ec062555079cfe48d583a8602204300f968037f9ea84919cdc8ad3a22103b04e00b9c4dffe5c34ebf13d1b769cc"
      },
      fields: [
        {
          label: "Token ID",
          path: "tokenId",
          signature: "304402206e18eac55b89b17b4706547807a864f6c1b37eee09fff4ccad54e9842eb1abaf02204ef2984f87d6c0ebab26352ce82f8040aae5bd259ae55d9921d609b3936d15dc"
        },
        {
          label: "Token URI",
          path: "tokenURI",
          signature: "3044022067c04bf2be50a7660b11742d10dbcc84655c22a0d359c20b2abb54a4d23f2846022030bded842ae4208854c0d11d655b234465e2c9ee9fe9b1eb5074778ddcfa9426"
        },
        {
          label: "Token Supply",
          path: "supply",
          signature: "3045022100fc4ab75ab184e564ea297da785d4a749b913e58706dff4e6c7ae49f72a7e9701022067bfead2e11a323beca3821a3ba310d705ebb128f45bee1f394dcc7e60af8043"
        },
        {
          label: "Creator account address",
          path: "creators.[].account",
          signature: "304402203e5e5fe4636b283df4e4d027e8ba5e43d912f53125b052e603548fff051b37d702207ceae4257ccc801de3943fb68b1a0e2af546e12d3bc74481b7695a12de7eebd2"
        },
        {
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "3044022065a51fd2cafd0013215fb703e27052320d35951e5f9d26a3c3d03a050b7088340220193e98ad9282a96e3e7b5e6813bb5989c31cded994fed35d5383e68738905c1e"
        },
        {
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "304502210092d8aa5743b9fa52cc1d5caf4f83e65cf232b02394dae8e3056d29606377caf902205119918948d39a165950efb998e19aecb3bde611065e92fd5f5c10bafaacda22"
        },
        {
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "3045022100b7cc93e7abfcc00efbfeeb49cef4d2ceb5521e1c97b2bdee882e011292964be902203d7ebd7c328961e1ca66aa16e8c61aeefa3bbbcad419bc65315658cdb425e5b9"
        }
      ]
    },
    "1:0xc9154424b823b10579895ccbe442d41b9abd96ed:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b": {
      contractName: {
        label: "Lazy Mint ERC-721",
        signature: "3044022001ca2f9abb569b76bfb8398ba150999d93fc6a02f5e637f4ac3a125b6c48b528022007ab8f1b776d1b2f5a0b44f90214b02f71c3535e468f03b681f133c3bc217946"
      },
      fields: [
        {
          label: "Token ID",
          path: "tokenId",
          signature: "3045022100e762ea781d76c81e5f3b28269e03f1cfe7e33b847dbe20a56289841579b0fb4f022033c6249fc155deb94850e6e30fd7fb854f07c63c2b8ffc8b3c7d412c01b8398d"
        },
        {
          label: "Token URI",
          path: "tokenURI",
          signature: "3045022100dc369275a5b2d6a3c934221e9f7483082cd5c52bb1b41a802d260c54757cf29002206dfcd13e32357144ed68b90c2308208bfa699d95d917a97d8bf438aed08269bc"
        },
        {
          label: "Creator account address",
          path: "creators.[].account",
          signature: "304502210089448beccdb19e680a7f8a6dd4f1e0dc8319b3458f0d5a491518bb97af0e1f5002200dc01550cc4d0d3398049938d2a498c142e2e82eb9086c7d6d6a8f1f90d1d25e"
        },
        {
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "3044022026ebacc1dce44b2815c6e53d9030836a4768ba0019c4b6f9d8eb83d8699ffac3022076b9bc2f89daa7e5e21b294163e64ed25d2bdfe5f2373f6aefba4f6da1d92d3f"
        },
        {
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "30440220626fdb56db8c34a282917aab1f7fddd36a060eb35f117ded7b675be946acfac002206770d35391e086e1ab31e9fd9cea07e90b09d38f0b882857e394283ecd6575a9"
        },
        {
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "3045022100e22f440fe2bb06d77a0afc50366689ede59570dc91796305ea62e5ca5da5286c022074bdc3dc840c7314abcf6bbaf35fe5e20318c54a911e7508942fecd38b70db9e"
        }
      ]
    },
    "1:0x72e9d9038ce484ee986fea183f8d8df93f9ada13:65b962ff5c94fe989fdc9169a5dbf3662e79747c3932616d9f0a39cc": {
      contractName: {
        label: "SmartCredit.io",
        signature: "304402200fbcc50090e799ff0ce08f08ff8085c162210bc9ac9d599aa9dfb7a3bdfd716e0220555ea5626806f7756660657459d15120dec6fc45865f64d653cf850fbbfa1068"
      },
      fields: [
        {
          label: "Collateral address",
          path: "collateralAddress",
          signature: "304402207545402a92f3eed973e15d3fb43107e2b241a403796189def24abbb4ab59932b02207d258e006f51f0fa9cdde54dfe7e9145619b7041dc4481e24e125c31754df0a6"
        },
        {
          label: "Initial Collateral Amount",
          path: "initialCollateralAmount",
          signature: "304402206b7167d76ed863ab7d3346b0394518d1b23600aa94224c49c601264180bf5cf602207a712ca9c28e328905b9d6a29f908dd7a8ccda408c8e7c1671926ab0de5a012f"
        },
        {
          label: "Loan Amount",
          path: "loanAmount",
          signature: "3045022100dd03f4bd05938c7a0f5c8a5d4ec36687179f1cc1df63149e5a144d5d54a7de65022063433c2a0103f1afbebd2bf2a9a817d608874532af4a6a23bde475ce2ced6795"
        },
        {
          label: "Loan ID",
          path: "loanId",
          signature: "3045022100ba34308137ad49140a12444f123886eedcf0b56e02c84236f262278cd2de0e9002204e0e0854e50fb5eb297d53274cb4e37c25cca8782bc5b74ed7bc0190dd9777bd"
        },
        {
          label: "Loan interest rate",
          path: "loanInterestRate",
          signature: "3045022100c3194f33a59b71f01f5495e90c876fabc2637cd506706c20813aec5a2f97437b02200cb59271ad955ec23c2c3bcdcad8bb073c887b4331628319d0576a6b23fdaaad"
        },
        {
          label: "Load Term",
          path: "loanTerm",
          signature: "3044022029fca7f97f2a6ba63f9b90aa69fed3627d172b653cc92f58cc60fae16095c4d80220717d03ed8b35c29db91c1c7160cc4dc51b3cd78c70bbcf33238b8c78ee6c2bc7"
        },
        {
          label: "Underlying Address",
          path: "underlyingAddress",
          signature: "3045022100ae88653e0cd0a991b3b85b383770b590c8df16768ae90edfdaac379bd1ccbefe02200129a19bbcfabd47a9c660d3521549e05dead453d62527294ca312ac67b14b0c"
        }
      ]
    },
    "1:0x0cec1a9154ff802e7934fc916ed7ca50bde6844e:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "POOL token",
        signature: "3045022100cfb4916219e3694b46154274e51034ec625ca0d6473d6f092e2bade002629c8902204be001bf270bf5c1876e953476289439fc2260ff784c412002a395ea4339858d"
      },
      fields: [
        {
          label: "Delegatee",
          path: "delegatee",
          signature: "304402207860961035527e594b1ff79e81bdb65fa46787448952110edaf251d56f9f286002201b4830a368cc521e1cb73ed22e5ddb4a926d5d2acaf6d509f35c7fde009d223d"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "304402207049e4d2ec11fea46e4f306a65d90a4ee638e8eafdf5bb7e54661275d4899bca0220757516a4ac3098cfdea23e706f84c0c49be17b8bae343bce14cdd9f6c6ff9787"
        },
        {
          label: "Expiry",
          path: "expiry",
          signature: "304402201d635d39c2f3be12d24a7af1e8d7153c95f9c2afbb756c9b9762cfb89cc606d6022006590a2f50273ce004aba41ee48bf35a0ae7ba80e08b0f9b4cce9cc281df60b5"
        }
      ]
    },
    "1:0x1f9840a85d5af5bf1d1762f925bdaddc4201f984:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "UNI token",
        signature: "30450221009599eb72fde2d45adc2e0beadf055d1f5e8f65090e153ddb6fb02a7343c96268022015e9dc0eb7e7d733edae86bfa10fad3ac3ec38c23b3a9ec67fc82f53c6eaf5ba"
      },
      fields: [
        {
          label: "Delegatee",
          path: "delegatee",
          signature: "304402200a22c41784587dfc574c2d12346f16fc5669e3e89d118d021eee3e688c6a3ba10220569497a6447c74db8eac7e7c62ece12b2e604cb5fb0cc7f1ae51a005a9d8c7d9"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "304402203a967682891c28f9a24c824326fd48624b24204ff7438a97968fedf2e67ae38b0220066a33eee179bee5b45cef00de03039db1e80ec0590b30057258464ccf5b4b23"
        },
        {
          label: "Expiry",
          path: "expiry",
          signature: "3045022100fb2f59ec83f2a962b990dac7a4823a619ee3a67b72e29bab86e317d36bdbe665022052c113fd0b7e45cee1a428c838be4d38d7110e3eac1f45064c74b721b8b67974"
        }
      ]
    },
    "1:0x323a76393544d5ecca80cd6ef2a560c6a395b7e3:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e": {
      contractName: {
        label: "ENS Governor",
        signature: "3045022100e965ef559df040f2880366aa603d75e610261946912a663a5b33e17708da817102202b4d6130c5ba34195663877cf1d9679b811acf9048b9ed8625ed5c2ea65db40d"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "30440220644deea26170aa4a8057c70f769d35ab36522ccb0f6f85564450d46c11061c370220687d778df87c7dff5e3ad58a9e36952a9904e6389c41f4f8e8044c679a224847"
        },
        {
          label: "Support",
          path: "support",
          signature: "3045022100c5109877ecea9a94096b612925e090d1aea128609d7ec466ec589daa3dc2f1e702206b7c8eec5e9351539fc164f576ee4ace65b776c051e0efdad21d51e42447dc87"
        }
      ]
    },
    "1:0x408ed6354d4973f66138c91495f2f2fcbd8724c3:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Uniswap Governor",
        signature: "3044022046d278627a7b68020ecda5e20d249bd9d141a404267acb8dec4726f30de5694e022073397f8438fad45b78813a7161eea60dbaaa1b421beea742efc8c07acb63fa63"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "304402205a033bfcd10718388897e99752081c0a4133b3c959b7b75a3568d585041e849a02205e2c1fb537fc0ff8e6b68a636215fbb4741d3df7c8202a83622063c77bc3e587"
        },
        {
          label: "Support",
          path: "support",
          signature: "304402205894cbf601c96ca164ae7e5d0aab17fbbcec4aaa1d032274800d5a46eba8184002204c195d6936a05b162d5bba655f726f08337e23e10bda06b2f0a3f052522bdfbf"
        }
      ]
    },
    "1:0xb3a87172f555ae2a2ab79be60b336d2f7d0187f0:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Hop Governor",
        signature: "3045022100f708c71ae38defcaa58de06c664d79f18651aa3df1ecefeb18012a81897c70a10220587d6e2590ab6dfc6e6a563a2460619cd49d73dbe8bef4ed20b6a50f47068c79"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "30440221008a361a02a91db3ec96eebea92c3228c620d21f8004813e35f3b99872da81816e021f27f972bb44cb1a1fa033be2398c80c6d1b4890f0b81d022ef4bf346d61af25"
        },
        {
          label: "Support",
          path: "support",
          signature: "3044022053b84095ce71d0e6ab15af8d979c46dc47ff6a169a88bdf3eab573892785122c02201c6c9d5570a581e42c1341f36edcbbaa173d701e6b93f424493125cc96e83d18"
        }
      ]
    },
    "1:0xc18360217d8f7ab5e7c516566761ea12ce7f9d72:2c3e6b3e91e39ef9bb3c1b1cd2b4d8da76bf433179c8042962671278": {
      contractName: {
        label: "ENS token",
        signature: "304402205b42ed5c642f2d98115b1ebdc98fcdd63ee259b14b896af1c1e78c8df480141c0220679cf0ef775ea5543f65f2249df9de807b02c17aa507d9e89dedde00b2852320"
      },
      fields: [
        {
          label: "Delegatee",
          path: "delegatee",
          signature: "304402202984c1b8b2c2be40fbb0b197b8666f309d16c10d4a737befcafa5887904462240220177c3d4ea462a56880e46e08ee5f8e8f0eafd87e97d287dee353aa21fb4db8ad"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "3044022009e1668b67786c2258d75f93297be950f3812ae757068c5407915fddea878c5c022066b9ef8571d300abee4d18d4cd0d59a5b2cd18bf78f3db80b6d4183e284e2ad2"
        },
        {
          label: "Expiry",
          path: "expiry",
          signature: "3044022070e6d8b8085472782a55f11ebcf9492ecf3a9eb423b37dc6b79ae17588e7da4402200e610027d5fd12d3b32df3ff7d951afed068bc26fb56e541b97a0622555a46ff"
        }
      ]
    },
    "1:0xc5102fe9359fd9a28f877a67e36b0f050d81a3cc:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "HOP token",
        signature: "3044022072ff099831505d99d7c73d930e720d0a3e28ae8932229289c1f1acc9b92190a9022049d78cce53e621f91cd7a11a1d6ec118b9f0fef6e16059e8f856fdfea8133f3d"
      },
      fields: [
        {
          label: "Delegatee",
          path: "delegatee",
          signature: "30450221008418fa1807d28769b22f0243f9e547905cfdfd66b19dca60eb2f3778149e8d3c022064c06eda3c8cd943486f52c064a91e0078a3be9777143a5b5925506554f20c9e"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "304402201de5084ebad45b344cacfa987c7b7fedcd438898c2cfeaed83921a9f66c78f7b02201bfe268f95c9d75484117d1439b2e968a5c9894a24c7fd751755a5b5c0da78e9"
        },
        {
          label: "Expiry",
          path: "expiry",
          signature: "304402205d3f2a2d51af5696c6b9905cb6f020fb450e24e2e4b4cb7a15fe1a622267fba202207cb11decd982dab1bd3322311a16264e54e00cc365cbd98b490750a324c0c30b"
        }
      ]
    },
    "1:0xdbd27635a534a3d3169ef0498beb56fb9c937489:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Gitcoin Governor",
        signature: "3044022010877c4c71832b3b1e52742ef0702837c162751458cfed684db4f9bf3dd9720f0220650921e5b88bdd0a9626ca7c86eed40c2b3f2e49e024f6cb643a7833367220fb"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "3045022100b608eb5bb848602950e6d1e0bcfc39bb07f465e110c2e6a1dfb0d0423c300bdf022079a4173b66a72e21c0e46e79a5a9a4dfb71af8dcfa181669c7a555733c0f9528"
        },
        {
          label: "Support",
          path: "support",
          signature: "3045022100dfc160c48ba326093acb0a5674d2083c60a3f6db68605e4ddb62b179fd4aada0022070e0d09aac5335705a18abd5e287e8d0ec8ad06e2a8dfd4b24ec2c615407aa69"
        }
      ]
    },
    "1:0xde30da39c46104798bb5aa3fe8b9e0e1f348163f:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "GTK token",
        signature: "304402205df7c1169cecd36740080c772349d6665bde2a640ba4c2abbe1db07d575ccc0f02204e0be7975f8053e091f79019301e4202b97e611c4a2404e24c462afa3df7257c"
      },
      fields: [
        {
          label: "Delegatee",
          path: "delegatee",
          signature: "3045022100c8221f284e448a3c344036f3252eab8fb7e383a25782d38e579cc50e2e996f480220594f34a6c5a86948536be2d0c92315fbe8f812704ce96c405dd223bba18e82f9"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "304402204b28da4752953b61b09ba02640eb88d11f906502088ac8460b1764b820edff1b02204e6c5e6a5dfe32658e17f1365ee7d2344aff54140577a5ef1a3f55631c3af576"
        },
        {
          label: "Expiry",
          path: "expiry",
          signature: "304402200c3083a36deb4ae67a6adba07622cb382846e5f61bbc9a24d2d5d2233546083e0220693029f53ea4d6f862e86c0b6b86df7bdcecf9eefcafe0c33671b300b5d64506"
        }
      ]
    },
    "1:0xed8bdb5895b8b7f9fdb3c087628fd8410e853d48:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Hop Governor",
        signature: "3045022100e09179a98da340acd99714b47febef674162a2114dccd1e39b11b49b4e1609c5022012a31e4db15edec68ccc64b17ee8f5e7e693fc32c721ffa5169a89243f5d5069"
      },
      fields: [
        {
          label: "Proposal id",
          path: "proposalId",
          signature: "3044022065b5f880626a3f9ebf117edfbc5f489d4fb80b9cd53674fefa7632d5c8a0911f022018dcac007b98e8b996b21ca3ab478855e040537beca824a146bec1ea51ed751b"
        },
        {
          label: "Support",
          path: "support",
          signature: "3045022100aed88d7b174625aa5b4a84a5054ed0ae28a2a768eded543130ca80e05fd2234d02204343eb88dd232c5317f73d889554728802f4953ce0c2e794107a8a9c604767ca"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3045022100e3c597d13d28a87a88b0239404c668373cf5063362f2a81d09eed4582941dfe802207669aabb504fd5b95b2734057f6b8bbf51f14a69a5f9bdf658a5952cefbf44d3"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100c98bae217208d9ba8e3649163d8ee9ed2f69518b4ab7204dba15eda4b3ff32aa02205f03f9a6fac8ae4eceb6b61703bfd7f27f58a83bf21b2f815aec2ad766ba7009"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100bb9bb0c71678a39ba8ed764a67bae0998b992850b7dd1dfefc2fbb7cf6036b170220041568fbd2f58b4cca4012a48ab3b4ddab54fbbc5280fe854ec92ca92dcd9ded"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022033e5713d9cb9bc375b56a9fb53b736c81ea3c4ac5cfb2d3ca7f8b8f0558fe2430220543ca4fef6d6f725f29e343f167fe9dd582aa856ecb5797259050eb990a1befb"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "304502210094deb9cc390f9a507ace0c3b32a33c1a3388960f673e8f4fe019b203c3c4918902206363885ee3b37fe441b50a47de18ae2a4feddf001454dbb93a3800565cc11fa9"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3044022052d2511ac923e69b1fb7ce984af1b3ac5dbb6a246d0d13eaf48bb742e46f70d0022075cd607e944328fe34cd20b83be1f29c7d17ff69d6bba3767d10784f68963c47"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022059c5ee5b2a73eb5fd8d3559da1d062b7b2487afa8ad7a60e37e61018a03d2bf10220009e228650ddf2355066e14fca9e28cbca3db4f9af69ddd2a446709cdced2660"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100b77d2c9b4fbe4b04408ebec9a479a75260ab290462de557dc9340528c2115c9702201533234e8bca9ce16baf69e67ed69293ba09d003bf515ffeec9ce934784baa83"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402202ef4a78bb3606a008c2183d22fe28b7dd81eddb09d645a6e153377ff5856244c022003fd992a719826e286adc3f6fc7fd1567305a0dbfc1524afb10330099dc986c5"
        },
        {
          label: "Send",
          path: "witness.inputToken",
          signature: "304402204a889814075abb0af60bfa953b82eaab7f8311381465f239f85b20cc16fd25f2022036252fa9bd004876955f22a24203ec8b07ec2099456690a1383aed4692fb2c73"
        },
        {
          label: "Send",
          path: "witness.inputAmount",
          signature: "304402205a7af025781c1f2134b8f936b0a4a33f0f4f818302d0693ab66e3b5f80fa8352022011c5f68f8d4f688a09b611b8a91c70fcafda1443b5bb833a3b1f3af5ff00ac3c"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100d321fe73987030ee4d72468cafe21845fb97b08dbc7a9b14e3421b050a5c4b810220755232e20dd1684e3a70964f838d7cf2ff458020eaef2736ed0febdecc4a4a10"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "304502210097a2271a3d7d20cd585511473d552b8a84c2b6128bbea3118ebfa1efd102f943022077cb0dce5ba07c69dc44795e2e339aee83a88616b80288172916d686664fd827"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022024f5c03f820b9c52aee938ffe7a5dbd882f45f0826307baeb81af8c6aa0ec07a0220464f90ced2bde27dc8c9cf1eea43ed23553213a784a7ad56cfdf9c92e1902846"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022030cac5a085e8b3685909687a9f1cab44717453429b73d4dbdce4a31fdf969883022056b1949c9a730caf1344841a96fe48ca65dc590da427f44dc9af2a29491dc819"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402204571e829b58a2c3d66fdaabb99bcc1b8ecab4941a1f3374a1b29a7c41d5165270220573c71719815aaf0eed481d128cb2a7b77a20de261771149c8b427690a2cd19a"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304302203b64f5975002aeb73db0a392fce0a706bf1a4f7aa062649c685a601e701c5c50021f3631a4a6213f01320ece3576b91b2f244bb127c79f1cb7c1a64eb25a9db377"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "3044022028fbb411aafaa7e1a9e9feef8fdadc5a2cded97931f95657e2ce3e2cc52e42cb022011139d7b8f986ef854c067a531c8f180161ec890a7798c9f6108d0f671bdec96"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "304402201eb248f72afa3820c97f4c7252d59e262942b6515af65b72fbe18db658a37b65022000feb48ebf0387a4db6740f81ba10c63e3dfe76aa956a45abefdcb2f9ff3eb98"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "30450221009969f0557702433262d12ae6d6b390f4534852e24fd47def97ed9e0977187f7d022006265aab295f3aa5fa10a4ed5f9dc806b20e583a9936f6d30cc60ea97ebb65d4"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022010782ddf795c6a3037dd269151a8dff9617291f33b433a41dca3eae5f9eaead1022062444f2d2270f69c0885b6790b26e5fb0035af35213daff30b8d9d34d13ac48d"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022026ad09b7426cb6990ac9814f57f135f9fa34515f4fbbfae23b27973f8acab2c202203f9720e91c8837e04b18431b7bdcd57acc1ccd7b7c62442f0feb791a1dda62eb"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022016b38151bd2469157548fb0b681d6e428a527c88f4b36fb862b7623a6b40dbb702201143008909039c6c393e49a99b6efe002b55485be80e663e15aa39513cd074a6"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100c6fdae9d879d2c20c3b7a66f44b2e60d6e781f0b0da2c21c5ca612b0a34ac3860220282196259c1d0bad4695f77a653ba03704785ad7a4d6007ea3055c5c4084a8d5"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022057f7d23d5af40bf3a603f5651282ea39103133118c71199781d3e5879d8ef09d0220488f1b89303b21e25f6e5f66a0de31bf34ed990ea9ad4003958f555d1f4834a1"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100ecc369027c550864d7e27b14045a83b1fb8bd5f617e91fc7cce67fdbcfe23d0102207807e1041516d9af307285b3693c0455e97694463c7ef465c021b5e123e2f9b2"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022029821cabe9b7b8ad34e577763e3b3b73e1d46d7745f176c0b197d45ca5120a3902203f6e4d8fb46b08b0f29aca1d7a843384f67f9543c0d6463bd506ed68830975cc"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100ed674ee1a345ea8576b953083dc8c75a2366271a12346dbaf1cd64c3131b02c602200403e9026d6939cd15b4c18de15603825540890050b66f88da924d9c57f672f9"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100ec94de446b5595e40cc7800452a5ef8fffcaf9986153d6296960ae6b9c50614e022015d8cd577c84cfbd27aaa35b532fd121b7ffbc3ef7a90af80804a16337d22c05"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402207787a94a07b570758d8ba07f5c41d5a9a1b3eeb0261cba9407dc0df7e6907a8f02206a5802c457a6f4f6a5c9e85ccfd435d79d7e1148112265c1f7767065dbc41f8c"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402204b56e389bcd0d843ac36454d6e698859123624b326f2b4bf95a1f49cbf937df1022064068401dda39780b3617fecbf84eb25ebf07da7c356d7a285963cc98ceadb62"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220760c804178f8c1a084d4af7a91e77efd62eddf8df8c7d0aa2dff467330bb2e50022038f6a01b11e2efb2a4fffc8b9cb6adc8c1514e3cb37e1316a8f26f8d67bc95af"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022070e61333c1124c089407305d8e421506543b630cbea8bf51bb470639e99f788502202ad716dbe7b6bb19c7f13853b0808d98c577b835428e4bd69c076982f7af3f01"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220794c4834a6ae2591cf29b65951d07112bfc4644f2a1d287dcf918f7a890b689b0220259892526b885585d613996d8e5caae98dc25e540f46857ce68009e02d419956"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402204cd2b4a346f9c1e214768075b97b6ed84acae86f45e2296f2fa35515eeb4496202203f9013404c89d3988f98340b7c53feab587a0c85f9aa783159e3c05a2c6e16fe"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402206461309dbca9e52a41982a7e552c82bc4c9af6bfaf86eb80075dc6b1ed29280202203bf174d6746f7a0d9c9cb4a1f3c265505168e77a11d6520fc48b564505913590"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100b0c589164391fec444b7fd850d2a3aaa49ba812dccac35640851a6961e4cfb41022032395cd70225daf677e38ebf61eb360e5ce93cd9389e73ca5c4e7476122a2c18"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100f95d3b874e7ec4c3bb3d9fcc95bd1f174c8d19936f6fa3ec4016d1fe62c11225022037f7ecafa98bc14385354bc8abc93f109e06f88b1ec84998dce6e6d6ef099505"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100f68b77f9abab174444dd6591cb0b9d27cea7f9ab6b505e18845021632cdfe428022077dd13be21f966ffa667b8d183d9b73b2862948ecaf07758e6296c3a91d19c8c"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "30440220758077438cfb447d21774e44b53d90ef4e9c2a9c85583aaae02f2b77f37659280220504e7008c6c729bad72bb8c5d9769a9d913c038cf36bee1309fc56116337b29f"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100a295338f63ca379908708d63cb7d42b09ba81deaa7d9c3547018aaaf25a3d06c0220309fc1107c3e64054c70b34bc18f93829378810884dc7b68497fa7a6fa4924df"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402205b25d1cb7ef6bbb8f6e02879e09117d0b94d527d365574f063dcad1fbd2d31ef0220095b3558bd1950abbdd6b6581a1920327382fe915b2e5a26c471412b670b4560"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d30947f51d252ff81d6df67273324c9beb899a210bcd4938b2afdef01bccd63c02205525e11b1edc17cde2657708c642976223cdebe96a519059e583c3d52e2fe185"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100e8ba89f6fc3ab418ea417ca412d1ca6fa2b0c7e8c025b657ffcacd4eee2a97850220584d307fa34074f281ce25b2ab90316ae555d63159eff4379f4ce4927560279a"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100a18748b2ea36741801fa9d1b8485c86587e44a0e6410e20eca60cde12813864402202dbf6e4f7b0caae43739f89c741412acf2ecf5619ae69bba423214f9ded5ae43"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "304402203a72fe6e5ac3854f4ff92d9e12e96ee64edc2aac39083a8a2f169badbd11996f02205f2d73771db877787b20368e267a258f29a1f90526c45c5326c88e64c924ba72"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100e8e4429d8ac6399463a70723bc8fe6ee781744051dc90cc7a219d7760c8c42c1022068dc3fc2e0931a72cd4aeacfcf05069c490958ffd8e01445d6dbe777912f8a81"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "30450221008f6e5cf2998edb97928157e4ee6f115735048b4443cb81d663c01d122b385d210220556955bea75a72150add3794231b9d2c09f755e7ca24f3b56b274f90b1986945"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022007fb9c8cc0284496623ac2addf6965f0d3590f6c665750ecc70da2e7d10e3781022021754691d2b82526303d862ac93c6bf430c7ed0de4120d6686651569e0d1949e"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100ab60ef76e789c924cd522ff99b48852c9185db44fddf3c4817acae9430ca245502202636c7c9835eaec17e39ef11fc132853a8b2800b48225a06e47b77bde065d6ec"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022063612f2a7eeb596c7cf2342ec096a375b57f199eca9129e25e858049a18d36d9022078780da67893f8cb573a9ae13b06fae73725007ebad1ff8401d5fdb35111d942"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ba696f054c313316a45f7f7dcc32ee194cd540ba7dda0371923330342f639198022045a95216bbe7f6849de1f9dd239148a1200c3ee1f85680ef9c3c5cbc2f0d0cdc"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304502210085d1838d8b2a010fe12da82eafd954d6a630218ef1bc56c9a62f410e1a7b58d0022054105e33e15cc6aa42b6241698e6f5d98453517002a7f478331ee69e42f7eac1"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022021716dd7a5bade40e886760a2ad868e2078bb09f09923b01a7320a0ab9630fe602201e6eb774c26ab374c09b4dfb03693d8dfd1fed7ffcb940e208df8271bed10c20"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402203af2c86db8d55c4ad7acb531260a73e526c451c7860cbc8874ebf7754cbc50df022072bedc43dbef6be5354ce6f907536a015431782e5c655200c57861125a6688c0"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100f62eed388a9debe6cc702e1ab70e1ac67b6a2625c037cec296d5ada7c6afb7d902205c0e40b074f4abbbe5a18d79eea412564bf80d934410bbc88932321e04a61720"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402207fa6c9184be3a43376dab2dbbea9a4d9bf122204d36952a674f12f2d706c055f02203782f7ac3835e2b27d79ffa86bd9d9fcc74527cd336356f690e3ec6e1f7a41cc"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100db97a1fa941cdc11f36e3c4f52a38a1d1356b05ad54d760f6ec9a6b0d7e1333302207c5a3082ab5efe025b53156bfe331284472f846d6bdf6bef266ffdd8c09fd2e2"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e2ba5f96a043ae4aac90cedf218743089bb91561050987cc58caba9698a439ab022073a4165b051af7b5c554dbb179a66a2bf51fca69b7f08dc59797d1a49c4ba0c6"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e77c1f64268d6b8a30bb1f5696611f3007f59b486c9b33e3286a50a65248286b0220299a17c19f9447ed361fafd01605600fe9653f63ca7f16288342d4ab85f22304"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "30440220086d1e2bcccc09cef4281b7768b18ef06e90c10f70137b8f8bc4aa3b87705abc022001cff702dd8732f6efd68c24b4f75d6f51a6070064aafb3ae3e497dcdedce5a6"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304502210082d054fe78c4a8c696b8a3304a3f77fefa498c0e28d8dc3ae07dc32917b1bc27022072dd8a83defe29060404e216cce22c0df554962b41d643ff5348134ce6e66811"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100ba4e0d3801ee7d6f0c31739f6d91f0f3203eb1e046477e74655ea7ff0f9b051f0220205683255968f7c18137492044006d6df6deca76656b20d05d611681140bb213"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100f4b6a6fd84f9f6f9c3add959a5855f58e294b39dfc6e0acbe218a5f35f67583902202f1564d9175e125fd0ec139ba00222a896c5035670e8be472e6617b5bd138c61"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3044022034649ae7b3482e7eeb42546093598f79fa1043e23d73f88df5c9d51626a8b75702207d811ba7a3f823e9f07f1e0acf15936cb7e34b69d77bb2e70fbc9e71f8afa436"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100a1318c352c41498114a8e280f112a75a4b0193e4abba43047eb821a42939a4cf02202eacc071910fc9b37f5559f9f5520cf828e8a39e68c467a9e0e5a7a98e528931"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022045d7133d3f02e471bb17dba73dcfc0e474f9d35f489f41743d5922cfbfa1d8190220261ebfa97d11ecd8a712a4d027ec8602cb3fec902219eb02d15a978d38c60bd3"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100a79b22e04c565e1772cab5838f0d43ec4fe780b0ece6e3b8179acd226ea23d0f02205dd2aa9bb775a54fb1369691f520f02364213a4b83f6a11b74a570feb6e52e8f"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402207b233cee21d578b71199b88abd481759f9432aaa4e8bff82b95571662810ede402201f80c06b23b4188e5d14a78a27f95a659ab52c58c3571d7b74321c2e579fa09b"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100ae449947ad952a7908053311f335b11dae3175974a8ef28400343b0e9df34d3b022063849be2d8d4cfb342d602b7078d8681bbda16e430bcd04ee531a85c39ea3186"
        }
      ]
    },
    "250:0x6626c47c00f1d87902fc13eecfac3ed06d5e8d8a:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Wootrade Network transfers",
        signature: "30450221008cc1354ce071cf6fca73c04ac748e19c8f38059890ca8edd24997fc8eee0d421022075a65c4313296d58b394db560977203f92c4d3257a446b883707857baa701ce0"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3044022009821ff0b77c78535056f438d07921ce0dbd7fec6803d5d03ee4b01734353f7702207f8217ca8b546664e16641b1ecd2938ce7c13b2479bedd177cbac01ea726ac35"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100e05871b3c8ea11e281cf51c4a92cfd3d011895d267fe45ad5bae990eb4f6eba902201a3ec731f73bb832b0f4f6a2064736b7665f962b79e78f8f418455653361ead6"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100c0074e8a8faeaa4ee5246c4e33205c4348b1ed41bb66b1c3e065672c26e3c0850220596bad33f89492ae4117691bb70ea3ad71feb75ad363f207a8cd258b0e013eda"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402200164c57cf66a929ff53553cecb1ec863027cc1a3527ea5dee45d6b5d8a6c05fb02203baaa316de65ca96652427ba82f74b3d91412e46f7febfd12a21cbc34e0bd04b"
        }
      ]
    },
    "250:0xfb98b335551a418cd0737375a2ea0ded62ea213b:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit miMATIC transfers",
        signature: "30440220474c475b4d9801f530cec16033b33931942e10e0e6545815887a57ca063a658d02200c5d6424af0cdf3ac6d955306012e3d993d92e0d46ab82a3a20826ab8124a701"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3045022100d39fb35bcfa51b98602bf4a9c22488fda16b71b5bf65ab813d40c8b0c88be6ee0220034fd5b163764ca381a1380893acb6f20dbda5bcaf39577089ca2ed13df6ea32"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022011499af7bcdcde93c2b01cf992ac4e9b4b27eab58c19880e9ecccdb7ad4783b802207a2577e336ce3bc7f88644a88e7cee2488607f923b36deb2ad3bc23dadc110c8"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "304502210086cce3cdf178ae4ba2182822914610eacee96665af8fc87b4588c5067672483402201b5b1080b0a13ccb2a1c0f10cac2992b86504a27e744896a4092bc1ff3a83b07"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220179cabc0034bb1343aa8bb04878517ad2d5468194a9994f40ddfbf57ee7afbdf022039fd330441e62543094b2756b8b87912b09fb8ac4fe751864f0508a498507a49"
        }
      ]
    },
    "10:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "304402206cedf6d4feb10bd266dcdedb134bfe41bc915a7523af8afea57577115bf6e00e022053d8d852c11d3cd7ac72f8628dbd81176d7d3f3b94022890db40f2bdc623c33e"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100f73875d13abd7e873e8efb7286e4a6f03d587b62378e4bc9b99f0ab7cf12c61502201f0f83bfe5d3ec2074bab7090869adeb28a4b8ca1708edeaca2ee86917fd1e7c"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "30440220589746ecc3b02348741b7b4ebe46c0b7b3464a2628a18b47b965f10030b80a7202200c8ff1f1946d47d0a2401c1e73c589f99e4b2cadb312abea268ab27da6127c09"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "304402201a3dc636e6f77dee381997bf763765a3db4be417d74ae6d3cd92e58b638b2629022075ce2812d5baec45f9b638279a62a290dfc2e9c70e0f07d56d45051f38728d45"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30440220464b8c5a50346b52bda483c96da5413aa030d1c4421fa12d800637ac8674f99a02206f9050b5b8890618062e44a80c1adb61b1b9eb4704c7598193d8902fe85d7bad"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "30440220279a07578078a32d44b8d72eed74cdbf1f36703f1dbecb12253650aa85409bb602200d5f18bed1334b0eb21bc9240a70f48b719d428ef3cface7b8af06830dda5de1"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304402201b262b0175a6f4f614087f27f3470a4864063109f98ff378252e6b3e24c10cc8022032864a549b280ee714e5cdda0c82ed3be1b543f80dfc3482d7ea6f935e4e97b7"
        }
      ]
    },
    "10:0x11431a89893025d2a48dca4eddc396f8c8117187:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "304402201f04375e9e11c524b30bb0ee376da39b8a3154554c23596381f475fde0d98ecc022003b62ea220df2d9f142f7ed1833027e62c3ae792daf763977ab552f9a897b7e6"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "304402201e7b6591a30d29b73962b253c14ef29237776c7c31c45e628fc0c0c337bd2d85022038742407431502920c210039681c983fd5136c66f7441e60d33e1323a401b672"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3045022100ce131085c5b7c48609feedf3f53fc58f80623050da851eb07f69cc1c518b21c002204e94f1b0ffc08044776ba684346d2ed0ca3381294eb309c51c4a89c2bfeb34a1"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3045022100dae19e5048d68af80b795c9c8d7dcaae40cb1129d9f1208e8a544c3409ba318202201b3f1202d90c014eeef5f5a72bdfad5dd048bd5a045cf59a2c8f3b782fefc38f"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100ad118c6998aae25ffeb497a3bbcbe587b17d8c3340b45b88e8f57439da96f89f02202d91da60ded4ab977eb3d8c4c8ad4daff6a8eb972c61dc5a549e77a1be692c9b"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022047fc8ebbd31ced62a7ccee4a82a9dce13cecd9a8d95e547fd8fe2deba8a51be202206b4a3d28348b799125bf7329aa7863e2e16404af18dcee02fb882abd51079ff8"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3045022100b100b3d1f922e40319ad9025bce6c60f4393e7651dc3ad3e631e7f53a818b57f022023a50bf850381f9c21bf28b2364b8c8c1e18e90a7cee46a493b46d493796b06a"
        }
      ]
    },
    "10:0x11431a89893025d2a48dca4eddc396f8c8117187:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "304402204313086063aacc52b9ae3b3ea026e0bb927634dde0d381a1b679789ce5341aa4022000bad10cd082f96999c05eabda4fc3fc3348c8b8a3ff3960078654f26c4fd28a"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3044022059b5e764e094ebc42cd2acb05a5e6cb86d034cb245e7f3f41c39cc01e33fb0fb02204e0b4899a3685ab3b0e8e47378d3ddeee18f0fe6ea614eb43bfd8288a884b0b0"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "30450221009ab45ae04b528bd0571356e6b7fae6d82cda10a66b8d358b907ccc335a140a400220503ee824016fe32e5fbfceb80c37c93da03139721931e5aee2fdcb0f423cd9b4"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3045022100ec81b8819b69107962d71efec8dd11d4c3f64d9cb7f35c151d6bec3abfa7ac60022063096fce59785822f99a8beb9c1c0c7974d859379720557c725391b3e5f6c74b"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100fb376ff6e22bb4bafc500c7183d2537f54e59e881e73888b273473c22470a0d10220081e92b88d5873229b0adc186c892e8103a83789c50d1c2c6f9c9b9122458307"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100cd7e4468fb1350ed6d6b8c7c91c61cd933aa7bf3df8dcf48226d49685e4d2efe022056f4bf6218b95b707ea26af1795b614f58c80c958e1c62e4d4bf83663b55a0ca"
        },
        {
          label: "To",
          path: "receiver",
          signature: "3044022026d8378c54aad02a863f9ed4ce8eaf92c62027e9353d47dd11b34ac06f0e27930220374c5f31be01e8a68a71ffb0f61537912f7f1c3f9e117c8b3a2935b6b3f92d2c"
        }
      ]
    },
    "10:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3045022100d4bcbf1df97f94d85402caee1799badf5fd6dfd9926981c389436d306dbda5c2022019ad7fe4ca5b2c8e63fd51bf70437b786e0b1cc2c0f3070e3cfdf70e75d6bbdf"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3044022009e356dfa8f01c37d5fbcb2ba06e72a2a0ffeb3251055f3c686a0244401aa7e702207e65bafdb36f491931261c08fd583f329c2ea903de28327bfb069e1fe7ab5471"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3044022025dfd47b46b43125781d1e4b63161eea0eeeaef93af87e95162b2601516cdbe5022060156847137356e6ff66ef5a5d72ce232ffac323be43e71cd2ccc410b55ec047"
        },
        {
          label: "Maker asset address",
          path: "makerAsset",
          signature: "3045022100e2ffc41ce9f722d7381689bd9ca2d0bd4598fdd543e7529d7f0bf2ae28abb3da02206a43996780b13ff0fbf346d7cd5520c759abf58461c42b7bea51d5b6032eb946"
        },
        {
          label: "Taker asset address",
          path: "takerAsset",
          signature: "304502210080af3a8d3c3e683a503975519535ee054af035a7ba136f2e981b01d7c6dc518b022012ca47f1301c7c439180c29e13bae36cacc03bb1c1b9ba8a505b9d035660aa79"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "304402203600b6973b833d904521bde12b73f52a1f1eb71b45a0174e1e579b33db55d55e02201daac27bb0e1d278dd34fac1be2205f38888c829fba922f7e3f48347e0a98b1a"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "3045022100e6937b6f434efccde4c4ddb2fa2c577fb9f4fba61bf2fdda3bb27b0b49e7274102205fb3e281767d845b230633092cd17e6b5ab928e341a588d79055602cf3aa29fb"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402201c1cb8f2cc362d6f10998948ee009df1912550cb4cf059d00447adf321a97f9e022051f2d887cd8a6a6ac26ab2afe8016eaa5a130661da74f7e482940278423b98fb"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402206b842fc4910a1bdc77ebc9b2523d7b1ead75f9d187c42a80ac87e980112020d702202b4c2b9cb8ce85712afe63a71cb542c5e5d3fdcbe33b9ae746fcfac13fca18aa"
        }
      ]
    },
    "10:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "3045022100c66935874c1f07e7ebf05ea2774b4ef970aa431001c655f0d6341e0c4d142af602207083981aa538efdedaf13bae8e04ecf0bf2bf1fb03843bebd8ddd44c4048aa81"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "30450221009a560c4f10e3b3d91d78d08b69cd2c8bcc48abb9d5a6da1bca1aa5a843d5e82302203cb5df5d1676286617dd169942b42530a422328a358e8b143f62c4c024547e16"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100ad531d0297f9561bb4077cda4896e1506104fdbefc05d1cfe360cd0e4810a98b022013ecd430ad3773ceca05ccd82794272768be0ceb3f1d30e12d331a73d1e9080a"
        },
        {
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100cb9280d868175b9645dd9417790419343e5cfbb481bad8e2d3c826d9b301b261022058010b98a71b91a75804672dd67361ee4f96dd7f5cb938f00e355a3aabcd8f9d"
        },
        {
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "304402200a7e0a5503d87ca2489dc26cfabbd0fea9b2e2aefec9c6bf4e18fe837c7a6ba00220273c59c30647aa17d4cddfd85c3d360e8659818d05382b3e288b696cf518ae29"
        },
        {
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "3045022100ce510ba8811ddada61a9695cb85ed202ff9af125f07f2f7995ebf1d1bb33798002204bbb2bee209860fd01a72df16c07e4903164cc2a3c535561437d63970b1ef8d4"
        },
        {
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "3045022100eb69ad54131f20195cfb2c304804405974123c2eed471c3fb6b3476ee33a904d02206c17f1c4ef4eed0df5c733331579004e3828287c5d22f19b43fd26d09600132d"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "304402207e358ef75ba3cbe3998df005e03ad4a8c2bdbdfaf9777d737242d1c63f5247f502201c2e916ef67cb4452d1b226faf1a4e38230a052865aeef6437e0a287441d0ad9"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "304502210081d61e89adc9bdf731e843903c80d4a42236c4fefa4782b912068d3ff12dfd7d02206c2c7569eb61cbdc7b842cd9a8c173cc7d90ad3be3537dab8373da4422adc2fa"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402205117307916d734323402185a37f2880822dc7cf386903688e57a4904a17891f502200e1061ce50bd198ef722159530c48217b93e2093afd48c1a0fa30aaeaf488ba0"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "30440220740a659e7855befa06833ccbd0aa48acfcacdef7c6a1035fbf30263a19576b5802200c46e51e89f469a121a31de0bd32e1ca9f3910413950415548e13d4c7c2a65d3"
        }
      ]
    },
    "10:0x4200000000000000000000000000000000000042:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Optimism transfers",
        signature: "304502210097b5f9c605c8649a848deefb70692f9df06dae6be89281311c03eaecc6749993022077d04b2d8bd22116067e5751a36b2b5bda5893dc05c701acadbb0a94bf98a3d3"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3044022068b87a8aafe0ac8591976c69c4e2dfb8ceb78723c8a01ca31893e91c4ee194c30220204c2cb5a401bb34b81a2794db238e522c67e5c9cc4b40a6c5a20a8ea05a7d59"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402204bd9534236d84bc4c066e9361ac77527236cd070fa55dff80156394a3cad0b6102203a1db664de0ff29ae87d1dbecef5162df0e85b84b5e7188f892d974849855063"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "304402201d24bc3916c564959d8db3e03012f5665110b4bd916bb1012e1f9f572597da8a0220260d5de23a970565b0c5afc485a1ae4d0d9a55d21926d8be300c1cd0f7794110"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402202ef609ebdcea759f3c8d6a0586ef1e71e25297baa8dd382c70ee17bf77339e5102207afe0311ec11e87440290734870b294265def0fab7e4b764d0c13fbbd32ddef4"
        }
      ]
    },
    "10:0xb0b195aefa3650a6908f15cdac7d92f8a5791b0b:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit BOB transfers",
        signature: "3045022100ff23c421cf1e8bcf786a1a7812951b1086ea8e76bc6509415279460f03cd1d260220759b1f0e1d701c8778fd1a856b1c956e389ee2e70b8e5e0a57b56bfec1d31702"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3045022100921dc162a5bb3196f691a111df75007b16081bd9646baca74dcc70d16e7cb45d02203b6a2cb04c443a0740992b621cd69a6ad8760ec6e41cf433d34bc3abf481d76a"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100fa0c6662d99d0cc3436d88a9b20e5241e77432a58c1e2dd57de70b4615ac10d2022069c75349a829594ba80774c553d5467f6c911c29e3590552c54cf8514e64581d"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100adfedcade1a854ff121aa5b7097c24dcac624f8ebfcdeae8727ca0b665b096620220053c185999214775db9f9b5a72b22b3c994530b98907ca9f94964ce797ffd696"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402202d943c7e03d2413e3114d185ad144f90ef754104b907c647de088544ec7a3347022016996136356a8483b3d0045a9c4ada3aff66c904ab113484794583b6d99d5dee"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "30440220089be7e339efb6b42b8e12dae2aa08f3d510d7a38b52e8d91c4f29053be1d28d0220766f9f63ee8e184a757c926b98e1121b04d34f276ea4d1cffd95d923290b24f3"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "30440220454fe102d49e4f419ce0fdce0d6dcdac0217d6312ef8596d6836c1e0b0d0d2b502207e03426f84eecf21938023e5c6cef0ced72e8a968cab0db1fce7dc6b2cd2056f"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3044022029e81765df506b964b5b858efc45bf8c475ef920396d6d8ead5ff6b0acdaed1a0220756d6ae8fb545869a7a4af6dedd9ef448535a8677c7c928e97e78c9c7f5404d4"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ce732c41e83e74cd48b2491e3a2bd1be2b0f090d8a41ff546d252f86b2bd89510220280153a526dac2f1f6e0abf8871e826a3d0a9a1490bf55559f9ad0d4cfc7a9c0"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "30450221009c37789c76b1524a3a507532caf4cbbc2130ee4512ac2ba4447afd52593394a002206dc0edca1946405a4b7e28239b5e3d11a42e71004003882c64c72394d116a4a5"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100f607f91959ba77569e1bbc520fd61ebd0cf2c6b0b4bfa449c45e86ac49f048e602200a1f105838d380ef60f765dcb0d3bcfd2eb9af8dee82994a942bf804eb5c144c"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402203ae7648a1fcc87edd672587dcd9c4222aef9b119eb5573945982eb4763c9c110022072d0a4d1e23db36c3b4852bc61b8500e0a9b4a58d56ed6b71d8491e154e1773d"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "304402201b7f2c276feb67d6fc687c04e1d546cd1d3f5c68932e11f094eeea12b7ed90e0022048eebb2d00568a29c93fe3401a43c1b33ff0a6652ace6b9a69c94231e0b1dcc1"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "30450221008c461fb3355c78482d37f2f8176743e10b11eb4955b9825ccd5fb013711db35802207c9ead1f31f276e25510567f44b590265a7be85a2431ba029bde6f85031cc2ff"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022064e76b541255e6dabbdec711e1bbd7393c75f4a8441550cb1416fb2f994633f8022073c96adf8a03c62d1425569b395b65f2d520861e617ace808a1bba54fbd34dc5"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30450221008059602cd190351f330a268264e0c6bf02c43d329fb3ed98a9e812c74b045a2d02205c69e72c2bca12c4aad97b157b1665f0f098f8ba3694b38debc3b491d0f9c116"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022053bc0c1caba1f2a589ced91e416486419aa499e625d8fb4256675a3216bec772022057698f1ed49eb612601479aaa33ab77b635ab38dcce54f8d354e46f08a36a566"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100f1748b0339fccd0dc2e7780d701816b551b92c01c9a582387c9c5f19310c4d48022070a3ab6e0d49b285ca87f58ccb4eeccc979389382ffd6390e0d0398771cd3cff"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100cd701a6cf3d4150d9ac6efd79e72f790772433dbde62cf4b537b5ae2c51e0d44022009372e93db760ff9d6fe88c9a912d1e1595fe0fa85aa53ef759e13ccf95ca87f"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022044d818ed8b91d7b30d213c4b3276bd95e748c773d3da675105600671870554c302207a68b143eb9e3a5a692e5c68196190c270aa1fd36a36626064394ef6e6df1d72"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402203e43ecd4ec2084760949aa56b7fafc59c251a4167d23282c143fb656e336ffca0220470c45ce3711bf8de3be65c5dd969cbf3cfb48ac9ccca4570c08dfe331839326"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ee88e0e7b6a5d06bf2a5cbd4e20e18a7ab32b6a6992855922666fd09b0f7f52a022058ce3cef7ed4d460011cdae06235e6ec5b0198f73488ec079618fecfe96f6820"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100d9116245b4b4bb7872223aeaea356c6b9d632c6ef21b43dbb4558572f7d3f18e02202149a5174d8097814dcbc1222ffee9154ad25e20fbe54ff44f5dd9ce2fae72c0"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100dd95bbf100f7ec9d490ea5a5cd486df677e675de52c818e719c74a7c1416eb370220313f717fcb8391eae721667a34ab836ffd1d4704ae86aad8af3edf8c4ea34df7"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402205b4e7dc13e181b49d251713005eae2894a2e47ca2585cef99f69ba08ab850e4d02200adf0b812c7cc6aee7b7ef4a0ce612b7088a01aecad8beeeab1b15b3ec2895e7"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "304402205210aa4fc81cfea7eca2b21c2d6945e1a6debed43eddc8347cabbbf49282d09e02200eae68ff8f13bef2bd6d6ef0b96b690dafdafa76409df4baf8c5f277230ecf42"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100d9ebaacf12930a25b5d71a83f4961e6be38a92fdc195c80d1f387a65620a9e48022034528f3903c1750d88f3072a7f370251edc0afae2e3dec64104ab48b8c4c9e05"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402207bc1311206829d507968b3e84dd0dee4ab691d421af49140529529dcb100398c02204dbc969c87e22b6c49d0a4e380a39d4bc0fb38cbfc6d7c1dc7d3e99b205d5770"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402205fa34253eacaa7d0dedc81c750bb6ad845b3963ce55c69284a83e615e9b11451022048df383dbf5d2eeec025da0cdb2bec2f85a3aa71eb6c0304fb04febdc38aa97e"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304502210097a560ab7165c6f75baa71d48ef2d8aef011d62bcf40804c32c67ef0a0a9dcc10220510694b7e1403c1d401a5c25f02665935f3d65d67e01def0777a3d7b1523ad87"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100cb246a5f272fabec7b7d66d24b5a0daa0965a3eeab2fbb34876d50a88723400e0220561a0b4b024e52b8f385eb06fe5e1b3d473532724e57ce9866d22816c519d422"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220057cc51cbcb260461c1142343632ae7b3e0e1203f6e6b2ff65d2db026a05fabb022073aa96aebbc3809efc58222cb3f9699e06d04a593ba971764d8680b4dc02323f"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100dcc452ff04ae777b59477673da3213e68d439f98b514a15826825f1860a5599f02200c6e20a143891f3be65c5c57968c27424be4d612c449ceffb6f0d2271fc64f6c"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "304402206681e14fc01ee3967694130f0c21e809bf96d0e48e6ca250640de0b9a58c69a20220241da7144605af656d24aedcdea5a120d3f290ee3a2762023403423f396dfec6"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402200c5b47cb8ce9433c050697b8d897d367e0fe20e9a1cb8e0f0d7630a9740c52fd022029104817d218b4a76c4e9800b615a15b4a703707ebd187a047f8ad35b2450457"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402202184fb17a734bbb560979b46759083ae6c7c00ed62aa6ef70976d4a7792942a302200c1b0aac85894fdedf5174d71e0b64be0ad288cdb4d9f9c5d8b1e1cc8980c718"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402205d4f3c21a2ee2533a1738bfa13f5dbfdfea54cb74bec14963f3b98b1a081b39402207e4e6670289f83a4c9c7a34ab7e3ac8c3cfdb3e5a2064194a5591d1f0b378e8f"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402202843f21aae62bba18af01ec031ef1d4a7ec4187d3c111933913bbdbdac36a9a402202ca64ad80ec886752955ab7d8b05f5ae1b8927577da52eeee9ded32133901fa3"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100cd8897444bd4e942309a88278bd980bf04c28ef47d3d5084b09a1239db0d1747022046f871ef50a4b70c350dc07362838df1c82c6900b474b045d2b773e7111c7e99"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220316c2659d1f5da38cd36785a35569e5df3a8a4e37a9c06b36f93e52136e42c6902207f17d8f47c4bad7961ee6e60dbd1320af95151f263e1a1a20ac6f74df994e328"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "30450221009bbfbee758402c58c94964a1c05b0025619dbcbba2cbc3f1804194074086932802205cba2cecbad6e4a1e742d8f97a15a9aa267e331d9bca94a3a3a3fee833df5d46"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3043022070dd8a0435348956f95f5cd0a781acf4d69559963e9bd44c45854d94222ce30c021f74ae458bcc17b1a48a7466f3e042a122d0f6b1afd0b0668c736f6ebedc4450"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "30440220641ef248bfaf1195445c4d9a0cddd59ece024080e8a85a4a0193517a5ea06007022013b554c0b9b509040c82815906d4db4a484ea91146eb552ff1a9d20d3b31b955"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022070de1aed086e82cd1074c672da6f345cde3f38b0bc3bb589b79283add3a39f6d02207e19e2e44d856616d47c32f378bc6b53e2115ec183747cd1832a829faefa44fd"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100b9a26cf1367296f188198aa97f39940826205e4a2dee9022325a46476733851a022055e1d8daf451a4d3d165494bd0b9753deaa1545445dfc0c42157586848dbc7cb"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "30440220722143608b4d0dacc5ae754eb195202ad6f0a6206cb93eb0b474148c05bfa76902204df25ed00be2c86433cd13313635e8859e7225227fd8d1daa6afce6b57cb01a1"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3044022018ab2bd85743520bac0f1a12ae2e507dc5213a5dae15ab9d4cb96abd75a10c7d02206b111247d5ca66460b80458037dfb1cf94dc419aeb0c893afc111b3e7dcc9f73"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100c63cf7120324a01891c7b325c7d81c896a811a59c23bfdd1a88ff6e5f914006402200fd5150da538848662d981104141323c61ae6bb69c776bb8b22e9f73307535ce"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100f6d209689d5d1c2d89a25a856ea655c9c7da60a4281df90f3a64a637e58c62560220061a14420473ee9a501d2410b171df7a3dd8bb40e8fa521ab869dc02d6fe4548"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100c57228a0612a39650312cc19f68f0f8cf7b0212e4ee9b26b4968afa7e66737e90220627b20500da23f69a0d30f42fe2c833ccd7f666262b843bb7b3debb3105a49e1"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3044022063ca9c030a0fabcd188c8060697724c6d37a2daf696e6b1e874429f524f78a3b022046af7cfa2d3d631538fdb107b722466c49fe81e4e9c99d1e58e9bdaeaa44e4bb"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220394e133ce4dbedd8dc671de0efdebf6879db547b75edbdc9f99a3e2a48da803902207721d57f8afac58a41dc46d5a0508cd8de5aaa6abb8911e00895b6838d620420"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "304402204c003890b5df1bb86519ec0a035921b850d50c1b28be2fe6888eec813dd95b8c02205a9915ffd8706ee9ad1dad003b025e5500ebb513b96d3b263805d5c00ee10778"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220206fe6edb38f47699a313c39d450d3e1734dee42f1e80d3bde46b4a328e2842802207dc1b99a14403d2820e4b49a50d74d12d5002c24938c87d9e818579398c3d7d1"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022036cfaea3784982325867c1911653346d8a410c220ff81e839ecab24d8f6b949402204a3e52d96cd31a7a44c673670bc48a8fa788fb049c31d8a2013b495347c4303e"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402200eae2991ae611a1943fe8abfe04cb2e3e04330628fefc2824cabc48348a72c0c0220174bc06c3d0e197027eb8a760ad9aca3f0df8f77ab910a09ef8390c49b98c2be"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402205fa727d29151c9830043b6512c61159c1ea8ea8fd44b87c0596b5bdafde82243022017d97ef8e14639e37fe3b613b70504aa43a05c41c8cd5b03229e55036610ecb9"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "30440220014302e1492ce418819bb60ba7da423176c6c462fdbc3556280dfb39d56ff75c022017eff4dc5f05ca2a050bdfc76cacea4339576c9df2ecd188034c9813a3b74984"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100f399baf0da8a4059b20d8edade9dca402efd43b3a2c9593b8a247e14d8b29a550220695480181db8b4f087c18005c1c9a4843ff1070d208d4779cc62ca72f4e860a1"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022009a8f1da3ded0fdd317f39850c5f2e1418b01dc9c341b6fe01cdb79ef5e82aca0220108517c15e79334d2099b8cab033e339f8388c9f721e4301a966a6b1d9543f75"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "304402200701ea4a00b26d7b1baba23f0c572e5d2812faefb095163c2020cdcd07b299e102205292602812713e325b8878b10929cddb6cd2280700d4330bb9c19a2e4c8d57cd"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100ba06a297e0758ca99a5278e6fc854cd6684183501421de6db85c9b9d7d43fd5202203caadad0392f98b8cd4749ad2e7b47d0a8a25581374109cf33ae4a78c74facfe"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100ed72ddc67dd730a9c06f128b1ea5073a6d78a6c4f4f76ef6e140c5298cbc11d4022037bbd5706a289e0f540c48ebb48bb1dc6037eed5696a65297fff2c0f38813872"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402206357c271bb041a30604462b90dc60ada77d030eeae1fc29a80c4ab02c2644b3b0220514f5ee06a02abfb743eb98f583b679255570908b8193759bde14d39930f944c"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220164ba29159ea4ed916dc85ec92319a7974e0c3a79cef48c7abe2c1d42a4708b102205ed2516c60f680371aba2a2525d1edf9155cfa31de59988c3fe34780963cf2f1"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402201c8f5b0c36fb939b541b89ce363184880e729a9458421f09474acbe3ddca80af0220418c39c98965751cb693b0f0f85397b824bfaf13552f6f3404d994551a73a1df"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b9c663e4d3a395b429e0a08d4f72f6667ac0a347a30aec6e190ce92665dddde902203ea26aeb292dcf2f4bc8004d02c125182d5fd2692085e40addbc43c90184f4aa"
        },
        {
          label: "Approve amount",
          path: "permitted.token",
          signature: "304402204e0c6642b71c97d91bdc843a13663329afcbf9df61c1710c51f0df1e631ca3bd022045a5d5e1f806e5cb69c04713cf70f9cbe8b8a468f1314684f09c9a8166d8bd69"
        },
        {
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3044022024226bf9f1ac2d346b3463b2096686f9fdf09c97c3de2d4665d8b470d46aaafd02207d8832c58b6acaca0ad1a32a250df01a1847402432363803afee80fbd5130d55"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3044022001abdbd0f9d840767a41b6fae15e13e17064320c90f652f68064422370364cf90220700c02b7a534288c49cfc36815543fd75dcd10c23f6493f0a00bf4da9d7cae56"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3044022056d1d0491ee91c4ec0d43ec210e3cbce8431ba743218a0fadf89a538144daca502203787744cfdf00c4e556d7e1f5cad46562b68669e01851721f1c21b8a07c553bf"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402203ee1f20cafedfcb944ea8c2e0bc7556a718c03929b7d94cf4ecca22d765994b1022079f358095f150c5e4d59ddb036c34e3ab4557561bbe64ab40c6b91567aac9b00"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304502210097f76005925a78c18ecc5df1bfd730963a1988e67009e319a4348afe768986df02206e1b4e5c75b65bbd06ce70fb50d4a54b3bf6af3db8ecf2f29fc8f0b5b538ceb7"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100c975df466b0ca53d729c8631d162b42a65119e0a26a116b2f72fb4e800b282a602202a964d338ad50adc7b66d9a263cc19c8fe662381c029783b622bf081629a9f23"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220565a884d5cba616f4fdf38e1d69f3a9aa226527e1348f230498b971339445011022010f97ace3640a56ada9ace2f48320acd26cfcd40530e9dd850090e225bcb2596"
        }
      ]
    },
    "137:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "30440220295e0aeb17ca0929b2a94c324d67d0b5528aba268177f3ac297b563141e0002702203ac360d9fd0c9c0c12279d1e73bea5d549a1e8141f454d88fbe1e8ef970e6802"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100b820e4dfb1a0cde6dc97d9a34eebb1a4eef0b226262e6788118ab3c7fb79fe3502202d426a388b4c3a8096b3f84412a702ea537770e61ee0727ec1b710c1da520c44"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "304402201500b44b1eb5b016ebe5bd7d5cc74b011544b357411a608c3a9f14f259ccfd1c0220617cdeaf7b72edc69aa4ce33828b2ae1bf9d80f62af064ed206d348de5ce67dc"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3045022100b1df6581805f596ed6ead231bad279f2f512ed1fffdc2ff082c381b63b5eeb7a02201363fe8f5b9904f338bc1e7d2dc9adece3d33c224c68f2fd669dd943ccd32080"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "304402203329dae6e283d1b00829fd0fdbd4f753ebdf2bd911183af250bacc80341dd3d302205de19c3a200b3e49597a9f02664a262827a64e28d8f24b37808c7c78f727588b"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022019d6a6cd953447adf2cb0202ecfb0282d3d4bee6aec4c1a2a14e1e8a1e7f732b02201dd3a8b47cda33159a331335c5ac1136e36b5d8e4b29edd99f65cdaf5f5e0c4a"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304402205c5b1740d2e74513a9332e3160ebfe5996186c68141055a95d733d51eb51dff402201a1e085dcd9487bdabe9e04426cd8b043c5bf158843fed944affdeef0768ad43"
        }
      ]
    },
    "137:0x94bc2a1c732bcad7343b25af48385fe76e08734f:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "304402201b1d17eea87fdbb8e54353a452304fd67862441df16d610f532ab06ebaa5ecf802205a18cdb6cb6b6825670f04aa7aa2ebeb26436922898f4d25f8ad4a947417cc00"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100e1a47b49e860b2be7f7325e5b5c00607e883ee4d167cbd85e5a85ab8e41b1a2602203f2a7442cbb889624d51e4e33bc1b2a4f11aabf495d0dd40fc903148432d9bcc"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3045022100970dc43ad05e879b50f1ccacbf35eb545e208a63be32ffbb670e01f7f051416d022075a7cbed6ac5234f51ee73949ad9d3d01803fdd9cbafe7f3d9954255f8d81b16"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "304402202a7459ec0706b2db1bce92953e8bfac39eac0670987c712f964ebdcf2aa6cc1b0220387eef7cfbe5457a46b34f222e760c3cb8d65b00b42fadfd28eb923db53c0b11"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100f192c16fe51b725eb7dab77c47bb36868eea3a7dff92439e1b05e31c059e5c1902203f14e30626547300c39ed83a2a854f5bb334be36af7aa8402c153716e4989d5c"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402200ad790ac99c964ee63527c153c188a87bb3bfc5306d0baf838f8e4cde2cf6b0a02204260214abaadbde3382e0237d0e870880e2b4ccf24639f45af80e0a5dc4551aa"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304402203a2f8cc5b18e596424e3303dac52abbf1becc37f652aad68b1a587d422f4a49d022063bcd24256241623c9ca134c31a2faddb793d85b8f47be34bff3b46dd5576157"
        }
      ]
    },
    "137:0x94bc2a1c732bcad7343b25af48385fe76e08734f:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100b2fef9ccda3203d4d711b37b8c21dc777d31a09653ac849a1e16ba669a785895022019501ee864d298c314a0e596b1a3e938d7a8ddf1befdaae0c221e8354729ba5c"
      },
      fields: [
        {
          label: "From",
          path: "maker",
          signature: "3045022100cf26f3f40e07db7986b82bc30685023775e69a06d6130f266a231269a418a06902200ca684076d0b8c364e3eccc772e96e28ee09783f3d6962f5a655e26e1d93e4c4"
        },
        {
          label: "Send",
          path: "makerAsset",
          signature: "3044022069fd43233b2e1af4323099021e0d97806ecd67c23b9d4efa0ebef0c387f373ea02202e0492fd4bcb5b6366777d2c2d5207fbddfaa816565564188dc3c355ab329bd7"
        },
        {
          label: "Send",
          path: "makingAmount",
          signature: "3044022029e8a29f75eebb7e934ca0687f4d559503260708cad2bfe72e67c99a193503fc0220679e35dedf372a63abb3da541d69f06f660842f455420ba6944fb414148cf20f"
        },
        {
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100cc30245de3390e8eb898ed8d5f64fd1c177c9b8ec909dbeb7f37646ebf2564520220776e3e5cf4b8cfd32f669ddc0022bff772bd0de18b5693ae4769431d570d9b1c"
        },
        {
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402205509f05a408197037cd5d224f28886d7f64b0d6598507a737e37a7aae4a135db0220439d033aae7a8896a47313bbad00cfdf52ab2e69fb5734069b8809e146457f9c"
        },
        {
          label: "To",
          path: "receiver",
          signature: "304402202f22d2ebc0588d08c34348ac50a8e7be90dd3eee6b6692c9e4abb5040d119dc9022059039e0abf6973ad32c72a6f333c3f370d7d0b24492444000dbc222e0ad859ea"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:9e97b4d1d211350352bdbb5ef45c4cb52f988d93a2d4a8ec6e675d14": {
      contractName: {
        label: "Dispatch.xyz Follow Profile",
        signature: "3044022008ad0a8cfe8c2630848f05e54ab93cfd1f5c301eb52cc74537d67a56751932bc02206dd3e78f5055b6c65a73905f840963b2f696afd04d6d472f4185dce9f6262821"
      },
      fields: [
        {
          label: "Profile Ids",
          path: "profileIds",
          signature: "3044022079ab31498b3ef74e744d5414f4c51334e00b20a5ad7c0a0ea6f463462d0a3699022079b29776df1f5243794cc128f19478ba586cd3b9378b5809740e9980763f8d8c"
        },
        {
          label: "Data",
          path: "datas",
          signature: "3045022100c04fb22aecc349de63571095782ea34cde05e576095c980d5c86f054c1a248cc02207f5a41199516bed46221aebed4f0f377508d39d661ef7f6ea7b16877709aa4ce"
        },
        {
          label: "Nonce",
          path: "nonce",
          signature: "304502210090109424df964562737fd1b5ce2f06b427856ae933c37f279af199f64fc530760220290cf4491328fc947f4d73f0032e151aa09caf8e085d0f0306fa355c0624dcac"
        },
        {
          label: "Expiration Date",
          path: "deadline",
          signature: "3044022060825e02b00e4487917d073f701639b1ca812f21f1cf588fa8eb545a59b1fec8022073ca7918a322dfeb966dfe5239cc1a213c14e67a32f5f51e14e53c05f4149783"
        }
      ]
    },
    "137:0x33c6eec1723b12c46732f7ab41398de45641fa42:2a4e40fa701836b6f11303b841424a6f3a47a5313c810b6651517fd1": {
      contractName: {
        label: "Mint",
        signature: "30440220513be6e618840924202f319870537e0c1f1eb2e684c0a2c61152fc4c20b41c550220026e22f2cd2e12a6b48f97bbe362600556ce3fe5e8b292c05c89c591ea446e2b"
      },
      fields: [
        {
          label: "Receiver",
          path: "receiver",
          signature: "304502210089eeb41d1ba1235fe8319c6a248e1ac66d2598979d265e2d4cf16abc34ba47f302205a59e802e42b3268441980b4708600ab6e05e4c55de7407610987532cf73462e"
        },
        {
          label: "Quest Type",
          path: "categoryId",
          signature: "3045022100bc6cc7ae4c2b3b4d43acea4c513e09d11736275fade4c0bd834d94f6ebd3893302203045ae14bfbaa4ef3bc0d9cf76f29cd4c90859464290632ee72b20f4b5c37f8b"
        },
        {
          label: "Collection",
          path: "collectionId",
          signature: "304402207537d928b803882aac63dadb7fd512f4b959c0e1a737ce7594c9b9e0a0c661170220587298e0e8e2eae94da28564b1bdd7f62273d7e3707665a7966f1b04a15f061b"
        }
      ]
    },
    "137:0xd4f2f33680fccb36748fa9831851643781608844:0b5bbfa7b0d5b8429992c11126083752c3db3fac6030859c390e1ed8": {
      contractName: {
        label: "unlink",
        signature: "30450221008beed58a311bd0968844684d3e090349ad8f4c4a203b7d907f17ec9d1dfced03022040304ccd72921e0b13f0b8844cc513a35f8bcdb6d088385a57c29d848b3e1fef"
      },
      fields: [
        {
          label: "handleId",
          path: "handleId",
          signature: "3045022100da2826956b2b8863be618eec516387f3ab418181ffdc37a5a196f9effa632a31022040f75d126f4a757e0ce18917b74a9470e23848eb54060981d49efceb281ee3fe"
        },
        {
          label: "profileId",
          path: "profileId",
          signature: "3044022064739575b6ac7bcaf48de8a5d9c260b8ef97dfcbad8309dd1d95196e18c505a302200a334a67c975aff07d285f0ebdbaa5101049e0e331ef0f26a1755709bfdd304b"
        },
        {
          label: "nonce",
          path: "uint256",
          signature: "30440220471ef79574484f61b5e525aeb61f25d06eb997073a34bdcd68e3130c429e81cb02203fb9eed967e176c7029a3aed0ef503c83e61167b91c4507c8ac6304457754398"
        }
      ]
    },
    "137:0xd4f2f33680fccb36748fa9831851643781608844:4103a5bc367237260ab8658d746773f02cb95cb8daaf8d5b54182316": {
      contractName: {
        label: "unlink_with_sig",
        signature: "3045022100f1a743e8adbdf6ef1cf1d16eb1017b16b52266b367c53fe2d22483b846f26fbd02203d87aeca769b75b0096cd5bf4bcdb1dc71132516ca79dd86bba57594ef41c686"
      },
      fields: [
        {
          label: "handle_id",
          path: "handle_id",
          signature: "3045022100ceb4eb671f78a9cf0e46b3b447224fe23fd92b1f950ba762e53779cc9225cd7702204313ddd62a34e8a6128f3431ad9742ae27771e1b5f9a7f012b792bb7cdf67bea"
        },
        {
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100b7c748f3aa456cdc798b86f5ac3b59af56532278fd3ce0b8f8f7da1d7cd2bf5c0220672445bba4c5d42dc077d79712c344458656dce0a92d28bda1d81272c2410193"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100b7c86333951cd2371f0d94e39fcb9e349355580fe8fce42221a99bef49c0938e0220197a33b34f029674ff19575918919a28a0848d4328057eeeb633c150b4825113"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:070dde6ec3e5d5e7d8f92290760b7f3ab566049489976120347b7d4e": {
      contractName: {
        label: "collect",
        signature: "30440220274cb9f97529180cf59bc0ecba64e9f19f2a18df3df7653138fa5c4c68d5224502206b635afa415cbde57cebdebc2a0b5518be6d426634f09ed89664ac448ee31c37"
      },
      fields: [
        {
          label: "Publication Collected ProfileId",
          path: "publicationCollectedProfileId",
          signature: "3045022100f341665ec8c569bf59fa6c6e5dd568a7b5d0e8ed9d7b01268aa1cb9d18cfa9ac02204168045cf639e516096d89d91f9cf53d8b447a27007428a4bf4b0737b1af843c"
        },
        {
          label: "Publication CollectedId",
          path: "publicationCollectedId",
          signature: "3045022100c173358226f9841b57a93d2f7d622dd3f05f819a3e7f99249ae49917724c75d002205d4ccef5f16105c6d11fd2ffdd35b9e8154e404be39fa058e73dd0381b746c8e"
        },
        {
          label: "collector ProfileId",
          path: "collectorProfileId",
          signature: "304402206e73779691817f11b71f50c685075fd03e187a48e2c7f0754746cc61251e4dae0220233691543c3c35e99f83988753b3026beece6e26f13bf1fa197fb53638945242"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:21b483c455b899eb2e03e330261c2968719ee51273fe888f749b4952": {
      contractName: {
        label: "post_with_sign",
        signature: "3044022015ed7869eb391191dbded78689682b0cad3c7edd16e7512c868c5caacdfdc8dc0220685602e1c8982b96aae0578cfaca26f006a834c54fd7ca5b76c95a4087881648"
      },
      fields: [
        {
          label: "profile_id",
          path: "profile_id",
          signature: "3044022053c07fd41770b4c39a5122296fb110fcb466e42b7339b1f3b16842a6bb78d53e02207e5dfc7aa10aba6110888afc880543065aa5f07e822001d82a896d53c5f51335"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100b6727e222313381f043a0d83dc273cf2cc86207bfb6f00912da59a46ae3d6caf022022b20251dede2884f32070b53fcbb66617be8a0698f080adefb0331ed66f75bd"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:25313c662aeae5b5367783c654b0b41d2fd819940290fd26da4520c7": {
      contractName: {
        label: "link_with_sig",
        signature: "304402207ae80206eacb28604a57c9257543b43028d03535bafc53b965cbe15e6736ad340220474f63f7657f3607be38c4f9c88a95a2331ca168782803a35ae95a44825c281d"
      },
      fields: [
        {
          label: "handle_id",
          path: "handle_id",
          signature: "304402203066a8e761ae5459bd8d07a2d85e012cc6db178e00c47a75a43d081ecd43c45c0220387ebdb7c0f44df75cb5b2b9da79f2cd356c73f6b2e92b9eb037d87c12d16c05"
        },
        {
          label: "profile_id",
          path: "profile_id",
          signature: "30450221009c4b4d4399f2d315aa5651f4fd2dfa7313c949f493774dabf1be9fcf89b99cc702204dfe454f6ff07ce87f0825066b7b31ac2987576c107c7583e07fbc045153811c"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "304402203c0fc15b249263368185e82d4385909a63f8094217c147627965b558069d730802200d2d416f4a73be0429e1184328529a1fa60863259b708e70c0640fc6fee1afbd"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:2c4da863a51b4bcbcc6c55ccf1f22685c5bfc5d9fdc2b091a4979c57": {
      contractName: {
        label: "mirror_with_sig",
        signature: "3045022100eb0a2dff271a17bb6d79da946637bc29a660d601191d70e1d32bf1d4a2cd34e302207833823dfbef232f9af68c6fb63ed4e7f3d359a2258baee90b9d5fb43879b819"
      },
      fields: [
        {
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100e1b2f2be8ed230b81f373bdec95e5ad9301f62ef08f98eb67e43defde27f52ea0220442c2bfbfb88286e11b43fa43e72e2f3734e282c8742ca7d49cfde026fd70508"
        },
        {
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "3044022072f532eaba3a90bd4eeedbee606bc7bf9d30f9c320a3d8c222156810fcac113d02202837a1063dacb5af39ff3371cec6f38dfa8be419fb96424fe393e98962355732"
        },
        {
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "3044022076def7f6c5c9b4d18d388894cb177717baab28ef0694f7aca6b8d01ab6e005a402207c30ceb8b83363069d6020cb203716a08596d2c21373ff334ba3d99225613295"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "30450221008d476b24f0f3f7559979397b6145f42fcd68d4ac285b1ad20ffdb0f85b5b65ae02204f68b4b385c5121585f7c0cd9d83c0a8e7a97a4c867e2ea14f327f732d2e7745"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:34bcec6283bd50c6742687fbe45ca3b54007977acd70504fd3a664b7": {
      contractName: {
        label: "set_block_status_with_sig",
        signature: "3045022100b15db144c953121c0291aee97a12cc9fd3fb78de8f2827dfd1fc72f130f7117c02203d756ddd8bf1a21b99e20e0c8508f95c425eb10ccd224381715cbc7fb22c01cd"
      },
      fields: [
        {
          label: "byProfileId",
          path: "byProfileId",
          signature: "3045022100a6f5390228f0d665487302ffb088c50e91220f018a5e3834fe921440594663aa02202e37d859ac67fdca45182a59ac1c888c799135fb7bbf96dc0f0dafe8d69a81fe"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "30440220701fa22235fbaf8e58711d8162de37e37b9ae416e607e4f191744c4d0064ec1d0220502da2bee6317d330323a0c979e9bf0cf74fb070ea67a4f17981c40664c21a39"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:3e5cf36b8ef5bdfbdb5645a7ac102ff44c1ece4e4027578f82a35e5c": {
      contractName: {
        label: "mirror",
        signature: "3045022100d75b35ba1454fe2acc30b447afad603caa5e112262015fbd840d32314926560e02207b0e765cd1fec69eecba2aee14d6e613beac19183c807e3b3eb21bd96b818b58"
      },
      fields: [
        {
          label: "profileId",
          path: "profileId",
          signature: "3044022026aac4b7c09b4b20c3144e2e9fc59a8384f4f6539cbdc567e2dff46dd0b1f40f02204c9c1de93a68b0b44da0f44d91d60d804de70934e3847b548379faf2eaee6685"
        },
        {
          label: "metadataURI",
          path: "metadataURI",
          signature: "3045022100e19e723f2d64afa383c89674c04ebb7208d6584106ecc2ddb4d76aec5e16c2df02202e5a8fa79792908de5804d15bf8b8baad74e43262f6fba18dd77286b5d9cf6d0"
        },
        {
          label: "pointedProfileId",
          path: "pointedProfileId",
          signature: "304402200e5b144cbf64182aa82802662e9589ccee6f8b6514f8ff40b2918d47438b586602207cf688e2b60bdcaff0fb4bac630949fb1ed8534688c294218c880f4a31ee0b7f"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3045022100d7579329ab85e0924f5cf656b1810b2106c9773baa9e5032c78af8b2a273fa53022018f030b62fe33bae8f0218453ebc09ded25e2a459f833cc395c61f559730ab30"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:47c475ce8bb65720c4f1e1719d21bd6c0f89d0e424318caef9473886": {
      contractName: {
        label: "link",
        signature: "3045022100beff5d608bab21dae867915578745515773ff2ac555848d7b5e5b21a3c7b67aa02200eb85429369afc29d8eb3b26f2290662af490bcae00216f50a98317a1e2512b4"
      },
      fields: [
        {
          label: "handle_id",
          path: "handle_id",
          signature: "3045022100be71019383ed910e9069478219c1c0e594b8abf1488502b1f01d697ae8a75f1402207809eedde5955c65362cf68dc7dc8d6dee11016a75d15278eb2d943c8414efb3"
        },
        {
          label: "profile_id",
          path: "profile_id",
          signature: "30450221008301a955b2e48d0b7b795cf86afe07fa52d01b7eeae95bec4c0a86776c40d00e02206578edb54793f5d68ad5c77282c7abb5951b6cdf0597db3f02adc96682e61fdc"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:487bd6f6e6253dea7aec4388c9c9a59a6cee6cbc9865eb72511cbedf": {
      contractName: {
        label: "comment_with_sign",
        signature: "3045022100966e8fbcd85a94d0347d75e2f63f8f6523941f954795d77908110f9995446c5a02201b133f6025d7b9c8a7aa6e9f6cbb9c29384a3fe5c7cc2d7e245aaf8a811f07a7"
      },
      fields: [
        {
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100feb57572c991ec538ead71637af3e9c20fc0f8ff55ae96db111970626362031c02202f69b09a4c298ef8360283429b4ceeeaea31b4e59a7be465b72b125803fb5f28"
        },
        {
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "304502210092c92442c3bf2111477ef3f5f004fb9bfe5b65aead802cd0130edb3b2b8fbd65022042280fddd1138e474543dcfc4cd49adf3e382946dfe9dae46bf23125aa274763"
        },
        {
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "304402203f100d6fe2a7ab17727ba751589902c47a5492d5e60b0eea4c762fca9de7a828022031f803a7acdc380d6b3e844e0df3119922555567d16116430b1c743500c68ec4"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "30450221009c02cc897c262a2749a5a2c61fc8751c55139c4a17758ec70b0728849d73c1250220029b6d4901fdcc1a1840a735943651c224b8df47caab536b6938616168116ee5"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:62759482010064bf87244ddf3f52f851af87304da45274e8ffbdb099": {
      contractName: {
        label: "burn",
        signature: "304402206cb91707bf94bc392806cdb14d85877353fd647485fce098f041e5ade6134ce10220683811ec5809e15d419909322f03ed1b6ec5b68c38717ad06c6b0385ee3c3b96"
      },
      fields: [
        {
          label: "tokenId",
          path: "tokenId",
          signature: "304402205d18ec3a8003bc0fbb26de752b163e0bbbd77f8fb0b9017bea4619cb87de39190220743a256a6c6ded87db1b01894de3f2608e3553a96a327313047485ef965b18d9"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:62aa4609df2dcd990bacc19b61fa8cf0744b18d1dc85ceeea0ac5649": {
      contractName: {
        label: "act",
        signature: "3045022100d9ff204caa00262cbdad544c05c86426ae116fc7386e88380bdf49c259ae89ea02201bb18df1cc680a5ed73c084eab591438ec2477e4a7bd9894681bf797e09acba2"
      },
      fields: [
        {
          label: "pubprofileId",
          path: "pubprofileId",
          signature: "30450221009b4332e63f5199d668ec9303f97670628d6b122af5043ebf45d717b1184b6e5f022020ea22e28394812a4cbb1cf48a1d614fb8020fa777066145f5ddf98d057668a4"
        },
        {
          label: "publicationId",
          path: "publicationId",
          signature: "304402203669ca8c2cdabd36876e5ed39b3d5295148191035974d0f228176b0aeabac7d30220384ab6461fac2d5fb1e44012c7cd74f038e01d08f71c1fdd460e0c3bd9ad36ab"
        },
        {
          label: "actorprofileId",
          path: "actorprofileId",
          signature: "304402206bf788d79bf178cda6601da33912bebab43ad0329a4d765500ac6668a89679ce02203fcc328d872791cde23e53b485d4631ad4efa36bedf262abb3a3bad89e4b7199"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:64e0600665b7d148b3f8c7cac3c67c06a40c23a92b92b64d43ed854b": {
      contractName: {
        label: "Quote",
        signature: "30440220562b1faf7c3a9ab9b9093ad3f5cf25086049cbb3b5e382e728da1543f3fb3f5c022073e9e798bd8281bef4ab6f4e007519d63ab763c915f499e5be79eaff7c873e41"
      },
      fields: [
        {
          label: "profileId",
          path: "profileId",
          signature: "3044022057b03e53c61af58368ef1dc6d1d8d4db64482a06e5e64583912ab83dab7d7fe9022028bd197ff13afa320eef95074cb704d82d06b2415cb847258706d156e26ed63e"
        },
        {
          label: "contentURI",
          path: "contentURI",
          signature: "30450221008637c2745ef73d773bff78cda34c82edd7c1cb08487e3923fa2f7e116a95687a022059fb08b50ac82f6e550c07a7192bc537c444ec2ab95d45d35c033a5c1640f5dc"
        },
        {
          label: "pointedProfileId",
          path: "pointedProfileId",
          signature: "304402204203d284d8cd55980f1b1c7fb5a38f27a8382c521ae3091d1e3bdb5d3be4b097022023f637143703c499b166ef74303263ce777b46730e7dece60fbb4700b530617a"
        },
        {
          label: "pointedPubId",
          path: "pointedPubId",
          signature: "3045022100a125fc5a7f1a4537eb3f87e13328af81ea70003ffc3328058cd2526eb70561a40220476f098654315e370e33bab8bebd2b69abdae6a1c7aff30a13a0858c4909b462"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3045022100ca3fb45ffe7eae84ac9e8205e35ec97bf88dbbca94956d69aa68e81d953fbcf002207ad391a23e30a161a7e35799863157b85bdb55d14be61889a04e932f5c9b118a"
        },
        {
          label: "deadline",
          path: "deadline",
          signature: "304502210080a56b342258c626275ef0c372739414e8b59d4e7ae0ca8e7dd4df791469cf4d0220710a46b65970278bad1958cc65f7f1304986c2146e89053b906f25c6b666efc6"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:75a2ca238fb86566fe4ba12d8fef0a9852f577baee3fc9bfbaf678ea": {
      contractName: {
        label: "set_block_status",
        signature: "304402201a047f27b7afb027556821085b651f952d731bda71209c7857cc60d836836d0d02204c47493d1df372a9dfb0c6af5c4502181834a61cc46b0a85010eb740221b3727"
      },
      fields: [
        {
          label: "byProfileId",
          path: "byProfileId",
          signature: "3045022100a7d9e701ec6f27a56e9a32e988f08ca2bdd1e0e0649b6370eafa5b73727d6e690220490bd16ea293448fc7c2e9c8e7d4c3732a61793fed6e57bfb10fd69136483c44"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100ddab91289c73a6fcff65cce812acd56edf5bbb8b9b3d4490a474e36ceee04f600220279ce728d12cad2cef6d51524d0ee2bf6fd77533ea5c22f52c4eb906b433f1ab"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:7e13093933733b6e355959c0f05dcdf096291225677986f58b855f92": {
      contractName: {
        label: "Follow",
        signature: "304402203d05d3af2857144d7d6719a434209fb86b4e31a23a972a30b48a63012b859aad02203a1c9fd6e77bf01ee54e523545c0b534d956529d8b500adda5ac84cb53adba07"
      },
      fields: [
        {
          label: "follower ProfileId",
          path: "followerProfileId",
          signature: "304502210086ce10d201f2bcd07ce0696d09fb0edb6c310976c590728779b215c3b06e350902202b9abe2522e9587c6c80f18bc05d3b55aa24b78a6b512ca52eef73b320807c50"
        },
        {
          label: "ids Of Profiles To Follow",
          path: "idsOfProfilesToFollow.[]",
          signature: "304402203ba6e0b34e003918518babd31d60b67b9bd4b056fb061fbbe9787b7b35572d1b0220790db643b94787886311042444c4ee3a6dd0bf45739127f601633a81305aab68"
        },
        {
          label: "follow TokenIds",
          path: "followTokenIds.[]",
          signature: "3045022100d4d6baf19d62a115ff05056915f5854862bc9b4953faa70dbb89dd8af2d3b58a0220560d12216c5bd899338b7423966274476914b2a46735fc5a461423a11d522436"
        },
        {
          label: "datas",
          path: "datas",
          signature: "3045022100a3a40f4c17b37186d4fb96502fea483c0837d89dba2d86e950959142b19403d1022018bcb3029746d4fc0467d7f5c0d261ebe5d0bae6f502a74013dd096acfdad373"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "304402200666208fca07d5cb575ba6343820aa555a57ce43facce4830f92908813d974e5022023167cbcec528a72e296336613e5354678fe3f2cd00f7e2a8bf574a6d8a486a0"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:80c176be42decedd0ce1d10963034b678ce2c9a781ef457be4eeaaea": {
      contractName: {
        label: "Unfollow",
        signature: "30440220138ca52d637f7c86067c5fffa161f3903f24d778cca96a30c4548be8776c5c81022033aeae1247a4b5e38d1cae7797fd38b0abddd02e8dbca3b67f4cd1976c996563"
      },
      fields: [
        {
          label: "Unfollower ProfileId",
          path: "unfollowerProfileId",
          signature: "304402201694f3f51d449d10d120fb31e2711c486ba1e664821d8f074ccd3a1f4c28fc6102207a8e7a137973e64929ee4356dae0040ed71691cd7ab6d05e2da8b7a19e6302d6"
        },
        {
          label: "ids Of Profiles To Unfollow",
          path: "idsOfProfilesToUnfollow.[]",
          signature: "304402206cc14f7124cc54c692569b1e0e6ceeb54d565cd900b91efeb97790bfc8d3727602203e69a94df5c1ac37fe304aec1b0ce7f319ff09466c57a19b64d878c9ad6d84d2"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "304402205eb026dbe9c4e370c950cbfb1f5eca8008a85b0530626d18d032a5e039f95344022000c5c9fcc8552dea7353b7665a09591767e277bfba7c3481b16e2ae5b17edb76"
        },
        {
          label: "deadline",
          path: "deadline",
          signature: "30450221008fd2f449dd33406c1808e3fb316b6c821ecd28f53a424d9aec648424bd7914e20220247a46d5452c33e0a5b75925ee8ea77596020f21ad033201411f4204e597770e"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:8af86ea269c2fa5628d4e7c2ddf1e62bf6f5bd5a07f17856db0aa8ee": {
      contractName: {
        label: "quote_with_sign",
        signature: "3044022066ce14f394f03dc964c40540c4497e8beb0ccb9e23fd425671c61539aca6ed52022029933a6b4ebe3ddaa601c41a48e3836353f98564c4aa6007188f74aca2e1b98b"
      },
      fields: [
        {
          label: "profile_id",
          path: "profile_id",
          signature: "3044022033d729504a577e04d98d13b6d84c86d25d88a236557cd2effbe65be55aba7e9802204c62ab51a7bbb6603323c72f3e24b94544d936107deb2c343928d4e60ddefe58"
        },
        {
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "304402201326f878e1d9148d07b9801afd2d8b61ec6af1867aa6bdbb0eb359593548e9ed0220320c96fb026447f1af62fbeaff9e4ecf117bf8e58dde2c14e2714bfe8c1b9a32"
        },
        {
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "304502210089373f933d7951c60b47da9e709ec0fc28c50366dad2cd5b3e588b6a00ab207d02203f4ec2b735cdee2b6c06bcedbd4ac221356bd21d9e41b0992328b7c1d1258273"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100a076dec0c7feb81cc9669b3130d6ab6a98948ccd9566b9aaf1a6a63f86848631022072cf9a4d6b96a163b4262dc58e46405b5234d730c14646f19a272d8454616b19"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:9909de3ee56263be0d231b3590af5ea9616f13ff9ad1ff2889b375b1": {
      contractName: {
        label: "Comment",
        signature: "3045022100ed2c4aa6c95f02f9235c25a4ffa22bd7b17b94491ed6ae515d051060a16148d0022056d2002a24999109d2828685bb5808cfa8f24325c232611ed7813139b9c2e404"
      },
      fields: [
        {
          label: "Profile Id",
          path: "profileId",
          signature: "3044022012bb9c82d1778ba93755cad0ef5ae60d16cd031e4518a977ac52bbfbfcda5c2a02204ae859e24c8f72ea90b175462bad13377537cdd06ecb2c918c26487bceb8776f"
        },
        {
          label: "content URI",
          path: "contentURI",
          signature: "3045022100a6cced0672cd5e3f71c8acbbbb7fbbde9af46d38855b3c084007e466ebcc1da30220585c60120da86a91a475a7c77043d254368a3336538a518ede750313cc573b9d"
        },
        {
          label: "Pointed Profile Id",
          path: "pointedProfileId",
          signature: "30450221008bf5103548be1e4dfb70302d55600f1630f2a71440a32c1679309f729a90f2230220463b62310d865628eeaf8339ca0249306b0a58c05057a1bbbed32c6f96533e83"
        },
        {
          label: "Pointed Pub Id",
          path: "pointedPubId",
          signature: "304402203080c0a486bf69aa5e6c0b5242187f05b0c331510c50cca02e4721663923916102204e5c8ac70425ff2a3addb437cd0302b09fd769cf31b38b9914c6be2a00e0f3eb"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3044022021ec722852ebc53bdff303a327ac9fb8ca85d3c1b7331f3a74e36224a03f26a302200754e591c0e4c2420f4045d9f72b86829cb374572dfea7ebf9c2b02d1cb18720"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:a99363f790ad883fe3bb241d3de4b3afcdcb29d04018e7f3b858e123": {
      contractName: {
        label: "unfollow_with_sign",
        signature: "304402200e0488184cf4faf9d7942148e518530f3777676ac0c32ec9500e1def858c42fd0220716264c7be429bea5acf111c58c4fe7836933f13a1a87a8581fac110ff7ec52e"
      },
      fields: [
        {
          label: "unfollowerProfileId",
          path: "unfollowerProfileId",
          signature: "3045022100a01ea12793326480182402c1742d526592eb7c3605704488568c8a5bc6b879ac02206f8d48159f83c9acee651473315be799cf0a8d945685fd4cf80ef7815e94d101"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "304402204a2f85d72695d14300907aad0cdf2fef138ecece23e2284b32af8dfb456e5d47022003a31e07c9104a9302f52b7e5896f8e4988a96f8fdb4b6ae8463125c2a711a4f"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:bb16dbc5aec39ac7140b2be7560b53dc69091ac405d0dc9c9944cf43": {
      contractName: {
        label: "create_profile",
        signature: "3045022100c8bc13779d4affa2535364c67fd0fdfdcfdcb91bfda2ee29645df5b10c0ce021022043679732fba8f9a4f2195bde7f9cc3008de2c3f5e5969e7a198b3765a013d92f"
      },
      fields: [
        {
          label: "to",
          path: "to",
          signature: "3045022100e29d5ee58e92a1f8640b0a87b9e148f9d1f453c5825bd98a6a3efb21569f8ba002203a3efee9b6a581135cbf2e02fab5297bfe84124c7b53c9a6c490e67902d99ab2"
        },
        {
          label: "followModule",
          path: "followModule",
          signature: "3045022100ccefa65f301b19a11738d62082ab7717df57ce9ae834c85654324c2e96d0688402200c035b906f30b68be520a180de42313ad174e25ecda1a5f6953975ce824a39ad"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:c4318961bcd5f60585b391b40af279843ef5987b4de1c021a1099852": {
      contractName: {
        label: "set_profile_metadata_with_sign",
        signature: "304402205cbd8d6179fe4f3b58e89fdcb235973be3d43bf38c48b227212e50fab2ebad8002205bf98bdd1aae44d31d4e7d11cad5c5355796efca410a4079eb9a5fd79eac4b7c"
      },
      fields: [
        {
          label: "profileId",
          path: "profileId",
          signature: "304402206d3dc1a9ce664aabc49b5a9da69c973de34aa2a910965387948134155d5cb7fe0220057ce81243f25e6286f790cca12db07a27ebc83fcbb0878b6f9ddd44cd6d7122"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3044022069389e62eeeb0ded581ce91e752fb61b3db7c05d28ce95ea944b0b671987242c02202ec474a18cd966d8d9e20c9634fbe3e372478c5a5381efd369e14e1fbccadf7e"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:c9c7f3c34b7e22b2e08c9df904034aa7a66d2805bbb76ed439b35990": {
      contractName: {
        label: "follow_with_sign",
        signature: "304402202ee99ddeae71395ed85a710f1bde875a69d110d48d9942be8bfe5e1884199feb02206a230978387b6026ee9c97d0ce4b1c6f5ce40c7d44d57eafdf9a75718d432c84"
      },
      fields: [
        {
          label: "followerProfileId",
          path: "followerProfileId",
          signature: "3044022066e3535230da7c373f2913e833146befe76247d65db282385065e9023aa2ac8302202516f12f249c3739027b5d9ba43c5059da13773346197d7953c92340014e324a"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "304402201c9d931d8a0333ccde8d4545f4561e2716576197d825f03c71979d9da51f3db70220546538fe354c9309dbdc1e86cc87a5f2b57f15d04a2909a99b1d1000151df3c6"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:d071f8811ba8d8972da7e2982b8796f9ef8623acd4d9efb47ea517b3": {
      contractName: {
        label: "collect_with_sign",
        signature: "3045022100ffc5e96ea59fcd16c7baa3dfe1cc1d6692d6c96e26cb2459df3dd91b6e861247022075fcff9df082a3a6976411144a96bf1020ef21355a83e7958399d52cf0ed6974"
      },
      fields: [
        {
          label: "publicationCollectedProfileId",
          path: "publicationCollectedProfileId",
          signature: "304502210099436784574bf76acbc0fc0545e906e8aa926602e885065783c2707812070e5c0220072ea4073ce3a6ae2a5a233482cf4d44825bc2cd194b1b4953ad9e508ba669e0"
        },
        {
          label: "publicationCollectedId",
          path: "publicationCollectedId",
          signature: "3045022100bb04f580b5db9b6a4e52b6204dfa292339d89f22dba32519ca67b9defe20d96502201e7754b257580e553cd1ab13df0efb76356430d4867d820d76ad24addfb577bd"
        },
        {
          label: "collectorProfileId",
          path: "collectorProfileId",
          signature: "304402205146b54e4c4e1f177f7eb14f2c3aea4d85099047a570685a106cc107ce9ad8d30220748afed65ae98795ff8d1c4421d003afb45920a52f3959dd86b70aea25f89f27"
        },
        {
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3044022074f936c0bb1dd1ebc38eb6dc4bfd965a12eb3a76aff1d010d7f0852d1e3b04bc0220095f7dcc6a816fa38f4292618ab991a0eea1b69c9825f7d926621a79b8126fb8"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:e16be30e76d1fe7d10df971f8669e616e11b70590ef4002bb58f7d86": {
      contractName: {
        label: "ChangeDelegatedExecutorsConfig",
        signature: "3045022100ccb92e84fee211f1e1fd47abee3a39fad87e97988d15c468dd074b32629cec9302205f52145220b3285e3f9528be1797511f56ced0d2a22704ccc2dd4bfa7fb9b767"
      },
      fields: [
        {
          label: "Delegator ProfileId",
          path: "delegatorProfileId",
          signature: "304502210098f9f759088ad8ce5383a15004c738d8c3a39bf5418b0b65cd0e93ff4e5c86ed0220746604eb87ccfaf0877b531cbc296b50037718b57aa13f0201c14cc883f2dee1"
        },
        {
          label: "Delegated Executors",
          path: "delegatedExecutors.[]",
          signature: "3044022020865f47450696ae64a2c628e35ed54ce4d8f13de1aed2065c87d5c9658f5a5e022008e511f727828e94a5709365389f20cc9d4378233767d639445cc17a46a87581"
        },
        {
          label: "Approvals",
          path: "approvals.[]",
          signature: "3045022100ddf33e1b7793dca98a966cdbb83d0ca6d191708125a6c50bc52cd388f51c57ed02206ad81605cc962b0626b37bbe3ddc2023f22d8097ed828d395c31106063acfd15"
        },
        {
          label: "configNumber",
          path: "configNumber",
          signature: "304402200b6e2d9ca322469d0d866a1d22a2b6fa23ae0d2dec7f8d5a51022163f2d0987902201d1e02f30cc9798115d5e2704165bee82afe69f2bb9af3ed626268803ee6517a"
        },
        {
          label: "switchToGivenConfig",
          path: "switchToGivenConfig",
          signature: "3045022100b2157446fb6c5205c8fc6b97ea444083531b40fc95059d298829bb96e4d7ba8502207aa09aa16328195ad1e11cf5ed775c4bce5ded678157ae0ae47ee976e00daa30"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3045022100c7836dd3d52c1940889ebd8e377616fa52834f0822b7ea3c75bb6e01c2b4657a02207c4bba14de8df6a291ba01a76ac58ff13ef077ffe04481703ad189740bb9db63"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f0cf3d3b7ed7ba54e5dfe70cd7822ec56431596fa9d1c3e2cd2b4e6d": {
      contractName: {
        label: "mint",
        signature: "304402206639bbb45b91a9c309742451e2bf73a29bc75fd32c428ee60d58fb001353da8002200b4aef1c912feaf73e3a45323a7df3b8b2df44afdbd0237a64b3723c7053f72d"
      },
      fields: [
        {
          label: "to",
          path: "to",
          signature: "3045022100af1ae8906e120f6783c5fb2518696ca60332ae1128de9b2478ab45c789bb05650220417ec699e96bab47c26d8d37b2feabac7810946d5de7987dcf5af3c95e04ec73"
        },
        {
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100d339951d42fd3c3b90c389dc703af3093bd3fd16dee7f9f4239192f2b44f5cfe022054426b5ca70bc65e1703026c12b5dbf8d2e79928c9aa478f693388eaae1edb26"
        },
        {
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "304402204eeccfddfa2f9bf4dd9b9e1db1a9c91cc2f7bf22115c6b74676f2bfc53d820c802200bf3068effc45575b8b08fb809329a9c14769b23acb0b55012dd83df19533ec5"
        },
        {
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "3044022010452fa9f43371405fd88f66eeb50ddd95dbef93180ad5b147f9b368866d4034022012e23a825920c903a5fcb18db53c664a943e442cf79258536bcb576d4c839416"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f2d2c19e66c050722ce388552dc6bed2ed5487f7cf4128054d3d4b7f": {
      contractName: {
        label: "SetProfileMetadataURI",
        signature: "3044022037f24dc90ef82099d00622929b8ed180ff73cc92998160d234060f5e74f76cf6022068bff3003c656eec1aa2c5f7719e9d42993f64e46b72663257ecba783673182b"
      },
      fields: [
        {
          label: "profileId",
          path: "profileId",
          signature: "30450221008ed21c3944a3ef93c8cf1db94deec88844a51d6404933fbad3b72f0dc8f4e5e902200f5fe8234ae704a754ca5f90cd54329bb808b5f4e85cf37e0c7bae2c1965763d"
        },
        {
          label: "metadataURI",
          path: "metadataURI",
          signature: "304402205ac0d9389e90ccdba173fd9b5bc206ff7afe5f94aa97e6be83542e74c1883030022072ca6572f6b91d65f00976c46aa9ab24cfb87773da72c6bd5df007c34adac3d6"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3045022100cb681a895a6b4fc2e0fb4648ee3fb398134b4cc8dfa8387e04616bf87261ee270220067b327a33ab2c24efd989d15694e6066597c6070179fb33199dd9d203b28a30"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f48d14ae14ca8663b397fafc56d53833a2eea3e8a6450961e58f274a": {
      contractName: {
        label: "Post",
        signature: "304402204c6f0130681c8166f9f89c73ec30aa48d5cbea6d3f65e222d1c27feaf3f303a202200f138d210c299d234c527eff77064b37883f57ef8263942c871101b49ffe136c"
      },
      fields: [
        {
          label: "Profile Id",
          path: "profileId",
          signature: "3045022100ef075942ff80ffd16ab5aee79178e68d453573937830cb309649d5bcbe07ee61022055d84b6b081ce5aa88d5f89db163b87e617d181ae6f8b859d70f06026bb19954"
        },
        {
          label: "Post URI",
          path: "contentURI",
          signature: "3045022100aa09a0f04edac5f9241f187dfde4b0370091b3ba0bbbba37daec73246ee1b7ed0220265d8c8242e9cfb645ce0a18217ddab8b1c312aa513c9af1662c8b91b72920e3"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3045022100ac7a9acf7f5008efc137f632f5603e36541f1347a8cf2aeeafee7ce98f4f32e302202cbd3fbf86bdd772bb646febd6b5fa426dead4a840ff24e77d5fed9a7ea26d4b"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:fa764abeb889b33c2dd4e1396f1316d8cf49e87d0b5b341ced7b7f04": {
      contractName: {
        label: "Set Follow Module",
        signature: "30450221008d7d0ecaa7ae3d5c4d6ab9119e14ed55962722252addf490298fe3be29c8fc95022056f88897d6a0da3b495275071b8ca3a32f6d9b47b4f420d9bd2a1c2229b807a0"
      },
      fields: [
        {
          label: "profileId",
          path: "profileId",
          signature: "304402200a819ea2e5f20eeee5787138f2a7b32f3f237b48a014d049be742b52967c2d5902204cc6a95c24c2436b4e22a34ae5d3ad68d995ca9998f3a073056af98e8fb6dd0b"
        },
        {
          label: "followModule",
          path: "followModule",
          signature: "3044022050576104c1505e117d9acb5e71cdb28c26b34b1cf2bd91cf617a47a838a4d4a60220034626740cf27f0a9c2d4f3e6ce53e0d612cc2c8e48cd5999616e2817cb57022"
        },
        {
          label: "nonce",
          path: "nonce",
          signature: "3045022100946b8bcb1606ecaa3786b80c7dcf08f8c0343ec2a756c48408d617f4b341fd9402200375a2e3c3be53320ffddf1caaed5fd4c12b61cb25e35afc94cdc29c253dc316"
        }
      ]
    },
    "137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3045022100a887a8b2f40695509ac6e040feb1a4a088fee459fd7e76cb137ea7c06b0a0b930220617b514271c05679e7ce04860ffca703ad2a21f4a45cce34b40e38624cf7ec13"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "30450221009fcaf300fef36d00f64c3d5e92991e67fd93862f8eddba0b8472568b5c66e38d02203a26f3aad1c0cf6638dea961f8f5e4ba5f72272bc7f1e33afac897a3b5b51604"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100984f166ee1744b4b69e24ed1e49fbaf43a24e82dd5b7d2103cf8ca854ff49e0a0220326ab17879b902521fa032a89c5c984e52bf3e31c8336cd67a1ce198d7c36e2d"
        },
        {
          label: "Maker asset address",
          path: "makerAsset",
          signature: "3045022100f4ec14863e0512804fc69d82fe17bf576340ae8005d0c48520cefb3254b102f702205fea57ba3919071157ff3ee0c93472e936f1dc079bcb0c447bb87ad86e505ea2"
        },
        {
          label: "Taker asset address",
          path: "takerAsset",
          signature: "3045022100957771ad2eced04af9750c1df10cc5b5b913fd3f9fe83408baa766573ed34221022055a1ba30b3a8895a011719ac54adaf7bfd24fe2c5041a90348097f719bed0dc7"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "3045022100f25edb42b652d5c645de567c201a1e6a64b0d6b23274cde08046d955cd2573860220129bbded4e33150cc38b93033b2d70d5fa141066f1ed7c603b5515ab8cdb2fca"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "3045022100c8790938f88557986c769102d31603849dc8c560cc03a45db99ddc90d69306690220295950348fffc22fbb898d75e768edb1edcb1c8772cc3518ff9687e957a87e50"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100b5e1dc4e5f69fd80611a4f5c7d306ac6aca4a2a2103515d761557e532884ca8702204b86dd5c323345242f1c1b263ba035932a10a5b0eeaddbc79fa10db27aa9d7d4"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "3045022100bd1de29559311612a7d0bca3c61b10d9ddf0753be7c372ebb95e0b69b674c01102207d685aa2b0a2309ad094a5fc8e09210681781f9a4294e4c7973d0ecf1adabcbd"
        }
      ]
    },
    "137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "3045022100b9798555ab901ed3cefcdec4aabd9418f3561fba299833ceadbf9d3043a996a7022037388e3956ce02764088733d92384fb4e669754b037e8a913995d761ac0d5cdf"
      },
      fields: [
        {
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3045022100b57c5877ce124196316dde0e2fb0f18258521cc2c7c27405bde78008bca27d8d02202053d4696b28b40fd1a16e7a179020c7d633e4548da0bd92f9442c24da12d510"
        },
        {
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100b35db3057953f7b747d4423f688d8a3fb3101729f37af65c4ac4fc9a7ee8fb8d022033f4d70422b437593f00af75828ff067f914f825bd3075f8462080bf4e0f9ae0"
        },
        {
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100e2e0f280d333692a776343669d6f17dac3ded8935d5875964d5ac6b05bb093f80220589afeaf7a7baf3b5964b439111d07deafe25be8a32b43640a2cc073a7257aa6"
        },
        {
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "304302201e35015cc3bbd6ca28bd57eb970cf1eb05826a4988c1238e951574f8804f28c2021f0cae62ed8199b725a39e714e60c92fe522ac7992c3dc1a27866f749547de89"
        },
        {
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "304502210094d2c3de8a61bf940dc5c8132070ee0566ab6d0059f1eff5aec3ba1ec04740a202200fb41470f2693427466a9ce580d5c9ff12243f848351c7aa2ac070c1618896e2"
        },
        {
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "3045022100f9b55eafa8d519298960b040f36a7479ace9d43b677d243d22c3194147dfa033022025f7a2962e342ee1572f814cd8b8cba1382deb20054475ba9df9dd321bc9fcc7"
        },
        {
          label: "Maker address",
          path: "maker",
          signature: "304402201aa4061287e14289ff1c4fdffe8ddd811775aae4bb6577970ebb87735102a5ba02207d9c89254e9698a7aff849a87c2a163ce9793212a5fe3745e446393c6a71ec46"
        },
        {
          label: "Taker address",
          path: "taker",
          signature: "304402207ca92ed4b465b4fe1d4b2dd65561165a70b54c8dd132dcf15031c799c8ab22fe022041d7bd664003c62e949cdb0ed09a744ac6adce7d6e676e4de22437a830edcf74"
        },
        {
          label: "Maker amount",
          path: "makerAmount",
          signature: "3044022038901c22513acf13bac39f553c763d26ee32c3e6e215ca3cb69da0274ca901c702204fce716fc91f3cb7ac7da446bd3432020d002c5a62c48d199d7b4379fe93c9f1"
        },
        {
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402203361ee1439f545c9664035be586925b2fb4878de9dbcdc7a519b5eb95a44ca6e02205f905942febcf5342577b5af149ea4deea5e6d0e1ae17356bb1d0628d8ccf8ff"
        }
      ]
    },
    "137:0x27f8d03b3a2196956ed754badc28d73be8830a6e:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Aave Matic Market DAI transfers",
        signature: "304402200ac5ab94c126dde729e0159a1eed721dc3caa04f908312aa74c66af16004fc7602201aea814d65a8fa0554432cde24c032faac6a773fc00cd4c9db5a0e7f22d7c99c"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "3045022100aee488b860fd511c87449f2a833590a501850564f4613eb5cf03466303653f4002204c4ed53c89bb8fcc4a065a3bebc2c70c3fbca495edfa74c7f76b4e7297229713"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30450221009514d69c48b51d1524fcdd437abf7db5144750ea606f48e9577a2d578bf4fb1f022020f9ef88c2ef73eb31bc05e4082030473ffb7b466770fc853736bfc82fb44aae"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3045022100ff632293010430e41ab30acdb0be9cbf9aee0c4d59003d9bb0fedfc0b06ea47902203a60c5f8db639d26dc283b6923ece5d24e040e905da0ac89c748b445ceacfdd5"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402202ea95fb0d6207919da555251ee616125da07e64d71c2052d719be012f0b18d90022047344eb1821ee042ada2007ebfe04c8cec9e695305a3153b8be8748ba34a0126"
        }
      ]
    },
    "137:0x28424507fefb6f7f8e9d3860f56504e4e5f5f390:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Aave Matic Market WETH transfers",
        signature: "3045022100d82c58e57d3d4040972e93cd45dfde23f59291603f0f6e77911f4d25210e532102200f1500ebf2516f1051190a05641219627ff2ac78aaeea2f67d723990089a0890"
      },
      fields: [
        {
          label: "From",
          path: "owner",
          signature: "304402200fd95d9d23b7f6e91d3bdeba89da05b66391f8883b9f7f66b30cf645b6baf5c802202ca600bd52e3ed1cd580713ee3d6f0b96d47e09d195979ac4b023ad8d06bf16a"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220720a40e847932e9d428749631d4086ab7b3986473c98ec54e09bd116717d3ee502200c4f39dee8066fa918f4e364d3e3c7331fb2ef495bc01cd24138b8df6b49bd44"
        },
        {
          label: "Amount allowance",
          path: "value",
          signature: "3044022070173b1f7dcbee008689dc5cfc54e227fb2ace5a728c3a769f9a27dd7ffebf94022045e91c91f9479da1fd55dcf68aef25df49c13281c73d8e7cd8b9f1a0c37528f3"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100926af4150d1cf51f5f890be5c14f0ecc5d0a15032c0db4185fe864352c5b83040220021281e74f3a9a0701686a5ab97ef3fd547d25a41d83e00936b630dacf461c57"
        }
      ]
    },
    "137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b": {
      contractName: {
        label: "Lazy Mint ERC-721",
        signature: "3045022100977ad189fb3f8c809caef784ca6c66fcda1c98274d92219b07416e43f43187af022051b069af307aef8d7b3b3aaf815eaf0e7e91c55f994616f3ea88293dd69f217c"
      },
      fields: [
        {
          label: "Token ID",
          path: "tokenId",
          signature: "30440220403fc14ad30f3f3ea597f75d88371c83ef2e10130a5143faeda87dc507fb9aa2022056202bc01b283e0f625b82c73db84ca3f17eef6d9eea89709aa0a88eae17096c"
        },
        {
          label: "Token URI",
          path: "tokenURI",
          signature: "3045022100ce280997a6b39acd5dc3522401c205eb4719b4b43e7e673958f1c7b7b97a8f59022042eb6a70f1f45c771a697eb85b71ba58acc8074ac436d27840ec1325423d7e0c"
        },
        {
          label: "Creator account address",
          path: "creators.[].account",
          signature: "3045022100f072042cace3b6ce605bbf0db7c3941928cb1ac5b6011bf47e04d76f57bbf392022054eb24e12319d88144a5e4d15a22271f2f1285d51f1b7f48bfc46ff1724c1741"
        },
        {
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "3045022100b5517383a1f9f7281859e1e3ebcc588770ac08fe7961d83ebff3ff922674fa3302204c490c86d4d987875aa55c089a6c8bab4414a742bc7df19f67261a319d4d8c17"
        },
        {
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "304402203660c0f0da24c89206e992e46c399d75d4e0981dd86bc145f4ed0d0ef469b47402200948f415f220225eaa67fb03749b2d5ea1ca8dfa76eda34d15c8f95746e30bd4"
        },
        {
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "30440220747d86766a08b5bf78182dadf5ace3813cb8190266e5d1a72f2d94a387fd6ba5022006c69b8171a47fa15ef906fac4546856dd9467a8e1036d89e323614e64d29715"
        }
      ]
    },
    "137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8": {
      contractName: {
        label: "Meta Transaction",
        signature: "304402203e256b1407f82dbe395bee10e34bf5b995c3fa91737172b58fb41bcf8e006eea0220046543fdb21b8f65e050b57081915c083fab2abc1cdd663ce53b1c792dbfdfb2"
      },
      fields: [
        {
          label: "User Address",
          path: "from",
          signature: "304402204576c4999dd6a70df131dfd032667a42695d333a07b3599ec6d72843c54b48b502202cf424d057bffceadbbcd9023b2241bab6d2faf8b7324fbdf87f5daa9789fe38"
        },
        {
          label: "Meta Transaction Nonce",
          path: "nonce",
          signature: "3045022100e094b23ebe8102c3c1aa5f802c33ed56f48bc94f6446b289ce358ea60ac375c0022013255aba7dc03fcfe30c7eacdf7a14ad0c51f389ddd51f7c4ba6e8d9bbf3dbb7"
        }
      ]
    },
    "137:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b": {
      contractName: {
        label: "List Order",
        signature: "30450221008b4ee6f1b492d19243afc4715d1f0cd9bf79a1aeb61fbf58f0e1323bce9dbc99022001a8a548f081eba23f33f03e20f478c33bd264efb3d8bfa16ce96e0b69ad5428"
      },
      fields: [
        {
          label: "Order maker address",
          path: "maker",
          signature: "3045022100f9851e9dfd9706740307e7829705b3e049390755e36b26a059f28d6bb47ac949022029a4efc35a2264fbe8f88eee1f83c430fb5e96bbf55e6deb31a60826cb0203b3"
        },
        {
          label: "Order make asset value",
          path: "makeAsset.value",
          signature: "304402203bf13f37325f60973b02d5433857676ce135f94011047bbfdd2b97c30db1a069022029f409c7689891c222cdec4e63d143938ff73a4f6cffb0c5d56228d572d25fc2"
        },
        {
          label: "Order taker address",
          path: "taker",
          signature: "3045022100bcdc72ba9f16a3ac3b73ad04f445a60958a7ea644511d9b917c5ae52be52c76b02206a68b66cc24c79e45687c07a201f7e910444a66a657c615c5854ac7065b0c6fc"
        },
        {
          label: "Order take asset value",
          path: "takeAsset.value",
          signature: "3045022100c23622dc64172dfedc8fae04d5fa24e25f598bea659e703839dccf19736ba13a02207554a945d0e9c2816860ec7a6c4aab9088fb58f5316c1007d82f0add61693954"
        },
        {
          label: "Order start time",
          path: "start",
          signature: "304402200cfe7613b90190a2c4dafaa661e5778a7756444e593a8e16105da315231df264022025e1daecd1752763decb7c51389a5eb97037536ecea3781e70ab428d75e1278b"
        },
        {
          label: "Order end time",
          path: "end",
          signature: "3045022100d0047bfc769190c5a173c8bdf79a2fdef008f0674ac04f3a7fe100553f41dafc022030e7ef0a1dd8f6f4131da237f6c33a331add85dd747f7f9749806759767d0880"
        }
      ]
    },
    "137:0x7f19564c35c681099c0c857a7141836cf7edaa53:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8": {
      contractName: {
        label: "Meta Transaction",
        signature: "3045022100a2f95042a915f8ae76b54b1f012271a44356484ea6d4963b81e6806ed6fe80500220564155498a275d3fe5eec595fad3858cb2d7fa85178b98208d09a886a1485257"
      },
      fields: [
        {
          label: "User Address",
          path: "from",
          signature: "3044022051a39f6c809110faf6aa95fde98315c0c2b2cac34c31d927c058a2c0ebc158cd02206ccfac20b0327ac6e2ca08d5d53aef189b2bbe8bc010ae9002b25edcf43c2f06"
        },
        {
          label: "Meta Transaction Nonce",
          path: "nonce",
          signature: "3045022100c1e15f064b9cf3d8cb2c6b297318c543066a12868419121c7062ccb7fb2f619b02202c3079f47124d6a25178d4b8431acd0bb08f44e9a0ec302e71bb4cc9b49a05a9"
        }
      ]
    },
    "137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9": {
      contractName: {
        label: "Lazy Mint ERC-1155",
        signature: "3045022100b85f48fd591345542f9e2271b4f33e71287a703eda9f9f7b54458dea60fb59fa0220661f4281eff16352e5e8db92a254b6b74ac0f20e3d41c9042a3c7c9f7397bd08"
      },
      fields: [
        {
          label: "Token ID",
          path: "tokenId",
          signature: "304402203dfd604170efb9379c36e17439f15f441b437aecf2d9abd0dc8b0c757c15d1fa022007fde07992c2b3797e7aacb7309cb60d494856d7a9d5866981a8948abf4d6a9c"
        },
        {
          label: "Token URI",
          path: "tokenURI",
          signature: "3045022100a334814c15bfe1474472e56201aa83aa7016648b2a92aa2ae7c4d86b8a412eaf0220416654d59af289a253a96cbe4f5c9b75c2129d603d94cb3c7966cbea682f542a"
        },
        {
          label: "Token Supply",
          path: "supply",
          signature: "3045022100a180585fc34f26b83b50c1d7609a0623b85b76267e393bf2871f41790487bf5902206c296108c56f2a1557a66a04f05bbcd7f0e0e0cd7a7a9764783673c0cda21d1f"
        },
        {
          label: "Creator account address",
          path: "creators.[].account",
          signature: "304402200a32f52a36f61e3b62af734ceea6e02ebf44e9bbafccb92b2570b7ae9666638e02205e8a0ee1634919bab75369b611257e17c12cf379a4b83e3da2089de13863baa0"
        },
        {
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "304502210092c988b7806250d99ca2760167a0c72f4c7e20f8f9174c519421bba8adc03c0a022032f33a3843e31b8ad17991e8eb3e3b922c5c2b9570d930fa9456b6f59b8974d3"
        },
        {
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "304502210081e5ed5701d2bb497c4b1cadd0ca61220b1078357f7e3ace908c01fcfcd3abad02203b03cb75eeabcd49777362466e3af9a461ad39059238748ed7d902f988db3318"
        },
        {
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "3045022100cc555652ef532386da9ad2405536aaa7adbe4cdac73ae9b2a8d4b0659eb4013a0220030799c1a813bef66c6395c7305a1f98e3bfc0bd045917d63bf7bd24e09fbebf"
        }
      ]
    },
    "137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8": {
      contractName: {
        label: "Meta Transaction",
        signature: "304402202e2b7810798bb8d8094ff46e47ae09c820b374420984f5c9845139f7995b5266022050244aa907e45d7ff4ffc0b383262c4425d32aee4190bfc09fff359163268b73"
      },
      fields: [
        {
          label: "User Address",
          path: "from",
          signature: "3045022100da2c6c45ce4014375aec27ce7dfc470a066a53a3ba812da7f4fac641fc48334502202ce049c05a76e19fc4195a323464383f3eca62f33a435ad5807716af1a83af4e"
        },
        {
          label: "Meta Transaction Nonce",
          path: "nonce",
          signature: "304402207b53dc30da4e7360a2deb22ab0ee2ddca9dda1c807095a57751dc395d7d503c602200f464f277a17558cab3b891fe8d4fb232b5783f26f6813da77ceeba527bbe1c5"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3045022100d259cbf0306cda1fbd842725394b29020aaa05159884cdff8c256ad87e6d55ea02205e5c7bbbbc030c2e1362e41185312aa8140802495fed2325031da2af79dde7a4"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100b0c62b0c9e085b87332b8a32a7106ca20027f41501abf28f2ef6eddcfee70cb2022048fc3ff7d0e8840f4f6581f0026d2099034011b572a9b87804e2e5b4559a708e"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402206f542985fa2aa16417942f0daceb72b951c2c485088cb8dfa79cba7358f1cc0a02202d31f11b13df2f15c143c727dafc2aee2c34d6df8eba28e8c44d9a5d16493c49"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402207d9c68450fd568c07e5b5ecffe29747c64d247cc1ccc8cce83d4112d029317d202206c631ddb8ea90ad75aa1339f2e966b72193758615f303af6c8f94c733f6e877c"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "304402206a2fffb754431f7c4bccf3e9e4d0685d90717e995e4c719dcf56fa55d0601dad022021f53e18abaa4ac5ecbccbe2e87d16acae1883e78ff6de3427ba0c2a306bae81"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3044022056450131868b314ca4a0644588bbef0223365b771c7d530c5d522216c3f6acaa0220648f89fca96da29e3049ab69fc3d5a97e42a749c60b1cb78daa3acfacbe577f3"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402203502b372181142404d4f77015f2fdffda0a4696039b5b7a8120e7692878a9fa902201d5731834b8dcdb805a1201caeadcf284117cc5613db44c401475641263dcbfb"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022002082a79a98c769ab699fcbf16a2dbe466ad07de8da7e85142f22fa2e9d4f6cd02205f3456700eb673aa0d3576ff086886dbe6d46a2bc47a383e5f25eab8495f64b5"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402202b2fbb0d1a344c360125ec9403fc6ce42148824d86fd939138c1ce28d6a1fbc1022015542187af47278a9bcef98772eed3f5dc305cf53828e27e82358cd55da30e9d"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "30440220088a0461f791327b18760ce42ea1ce6074f35412aa5fcdd940125bf36b283cff022051c26c42f6e2339a502b7a0234f5d1ffaa065e11c282d5c2355b22796266e987"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30440220273fd834432c1375ad939115e8964c7324d1011136ff8ef68372b21b9d8e85cf022037a9e00b0ce34c74ea89c647ae68cbb80c9fb6ebf93326c1b6bfc167758503c4"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220431f8d9a182a7d233d23b6c7279c86032a0f67ca12a3e60e8dd1fee0dcfc896202205af02a1dcd72dc193e87e73bf35dcc5aea1adf4c05da0404dd287951188bf193"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100c5f09dbe6709756a1fda5e5f2829cd4c88c2a8a12112ecb2db1a6fd69b48941102202d1a58cf6b072a8b75527f2e7f1bf3b6500d2cd22c44eb09516eebbd4b5bbbfb"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e8ad0d17420a31ede8ea9a1bcf1b4a74602016fce59f1d2f448268356bca1102022035f7a6e24c73611965e3a9424403c3c56f65bce994761d130f0205ddaf859ab0"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100fa254d017be4d4c433d49975bd9f9b2e3af9728b2d53810bf281ba5c1505fd7b022078afe919327a763738314b447afa91cf42c2c186961ae12d56a8fdab14b57ca9"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3045022100f3a91aadffab51d26e5dded9b00d0a447eb3efefc3aaeff52805b3f42636de5502202766d3e6a86eaf5a28968bdcc71ae55f35bc4a88d816223094397976a6f23cdd"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402207518cd346517944c31b81019f3af5dab9945c074a0b1ecff4af822a5d9e7f98b0220053975c4e589dd3594f4e584306b7f3f6f79a356af1eb6c740d1cd3b880125a5"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402206a31980f0bbe30ed5768e8c2761560879cd1a9a840d22edd869e727bf2239ef802204d278590f5ff29cb9282e14d4ee198c3b7ed9f72ba5daf5747a5fc7e01b9d721"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022026b69ac92550360282aed1e73826cec75e42c5137c893bbb1ce3f9e2bd88bbe402203af214d3c3dc91dcee4fd1d919805193462ddcd411459d413beb4aecd10858b0"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402204a9980955247fa0f2ce62be0862f70881a74ade55439e511d612c4acaba1d5830220048602d5b17ddf377366110267c7f994ce4bd9280f871ce6037d22ef9a8a390c"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "304402201dd26b80be7890a44ce323c4c98c2978d96f4d25fc6465be7c4a079af701694102203b5097e5d1f1f58600ca14c052f7c686ade4579650ba15008faf094bba528e9d"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402206eb54ec964fa667fb6a130710c6770e84fda83078c2a877ede8d817d00329ea8022030970ebe404e2f4739359e44a1581ab89b391122a91e58b225b007235454c173"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022009cf5c5c08e8e8022a7ff466218156653ae123dba81277b5e6c1bc7f0615dc5e022053a53758115bbec371aeaf5b1ed209d9c013299cc81227a76c926c5a84c46c7c"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e3970afb8a471b9fc6834332077fae22791cc45451da4180f48ec29f97eb259102201c57886609f9763e18a3de24e3a310dd0616f2333c47bc8ccc5dd35923e677ff"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100c68f181ca5d964a86c20914162f894b55651013505341de7724608533a9e08e902200a4f7e1b5eb98dee87830a821922427d30aaa1ec7c7368f1f894a43912a60365"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3044022074d08efc6e2defb1cdd7dbbf0ce076cad0fdadff5f64cf9ee03b2a601cc1564d022057d1c94befc8cae1c631e601b7079a473e0a0d5e65b7967018caead0bda47d14"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30440220214343c3d61640d1060c8c77e87a4f1c2049a42608ac27e1677aafc959f2683c02207d097d9336cd21cf842e1105dbfe19f10e15089cb2b43e456a7812e742435be1"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402207ca78ff2071f4ac7747b8c38add54a53fe94f36dc7f47c7012a32386e4e56024022024408cd0187979768428be8aca20016a30af8fa1f64c8d90b1aa1bb4ce455c76"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220303ea2dfd29482368d0416da1a5941ed0bd57c4728d0ff6bfb7f3586e757243e0220669e8db841cbe6e49634362711a05cf6ebd855aab48f66e12bb8b11d387d5a18"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402201088939cde93435e30a6ba67e4ada48886748003acf304b535a6980cd7e273c902202f1f4d56f577e0f0eaa13a2208c4a85bbab9de77c08f7f3bceefa35a27ebf752"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402206f6100efbf09c7cace10a0cb2d283741e090c0c5bf2410b36c7d5dfc7b394d3702204bf09d2c6e6d728fa8451f553f9d4678d004dc00bdc05510f33c6c9a0412f144"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022043c32d3e1b5b644799aa8c8a5813cecb40956c282c227c87b6d692a1cef5e7f00220077a6e81cece0f12a9309918028060eb03842d3742ce65e8b364819bd1051650"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402203b079692e3c22218c0db1e14bfb3158901d89d466716f42aecd1737cd7857221022016ad9291aaf0a3388e4f21f6068d6610d560905175826e5b6fddd34b5b06e40c"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022079391bb740cf2e4a878e31cbf4c41940c5b312985245079aa3ea2ada4cb2862c022032c106c5981577447738eefa31216c734fb0c908a817b545aa7be529b1c29734"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "30440220106d3b46029248c9f503a22050f4535f38c4287a426305c73b8651b1bca6baaa022015ec4e929e24353c13015118255deba0e1f38b012f16f6b7de4c375cc5da8da9"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022015e91522c1c70a6d7f7b6fba1585ed3822af2f245f54805669d5897f8e8804c302204ac0b96383ec1fa0157be86de551cb9972600d6f58774af45194b708d61cc4b0"
      },
      fields: [
        {
          label: "Amount allowance",
          path: "details.token",
          signature: "304402206a011e76441d5f7894469c9dc6c06ab8c4ceac6589a822aee7f9aebf32bab0880220566573f29f38b1ec187d94d502f588643c0a90f4d8ea1cb0dd187d7be2954106"
        },
        {
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100fb61f9c489e4d2128d4d0d438e29af17816400ac86087469ea7b30dc6202afc202206c2db87231d177800d7dfd3acb22e4a085953ff8d1ff42b6413c1aeaa1151c1e"
        },
        {
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100c19dd8af5d23240c2437f7eb3a082fc1c8ae9195c178bdafa119d370ff33499802201d67589fae70268a7080f09c162bb1777bba7281523d34c37dfcb496e3cda151"
        },
        {
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100905b18f59d5eef6ca650a587e6bd6e97832107013424fd2be585e364cdf12106022078d776b0480fe4fdc4e3b64e7b9a38a951c4ea3d7afb105ec76a66f08d1590e0"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "30450221009d336e41e39830bc5fb01567468404ca6371f13c75e8102647a77fcd7e1327a10220696e5f853b1fa5a19d6caf30859cd4e17981f2e0b34755e1e1e588c440998f38"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304402205cbae5501a5041672f937fccf36d87d19ba998b90a61ae26d3c4b4282551414e022037bcc80671ada5e3076281ebc6de328331846968571146f002708245da890a81"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402206c49952615651455531d71250c7e51dc8a04d4799a343ac3bdd732399cba586e02203b8777e4fba7d0e153f3a2d0e80da3f8c6d861c2d3c724550937297e78efd72b"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402202bc9b18aacc8d3b7acdd87659aa556e872ddbfbf18ec1646a5f479fe4f9e22db02203ab72937ceb9235bfda2442102295b7f6fb8852e91782cc746ddc556be81e2bd"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100a41526ffd13f1555151ab6b470df7fccd306944eb22296bfdaf42a2f8866c34702202fb75b9ae194092f7771f19f89d01cd6d5368c8cfe9215a28469d8ddc3a350c2"
        },
        {
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100ee6ac2814e535771cb8ae42632470946b3aeb5dad23c81df803d6a3ccb53b5af0220431f9b18c425ad88ba8d5df656c90faabbdc57b15f47922b8e0732727643194d"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402204a899d971e708e9f4be3e7044b3ccc0407babbdf35dbadd6d912a6bd691656df02201e4a7d528901ff5dc58a812f8e6c8b1ad08aa16e42336a2e682111be13d5b47d"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100c77b95a129d17f1c163a54db3260cc6aee8d9a686b9c9686d615a7e23390d7cd02203bc102e5e05182501adfde070fd6caf75cb26292c242846131512314f2a49219"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220428d1a58e563f844783b7ccd1ad5e5fde891c7df3c68a9462c16c2473cccf6f502203102a61a14c3cff284054fe2c0be781b5a1fd94fb41a27fb0f4d22c940a4f166"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e5e48a7d1971032330a12639260ddfeac1a691e5bb595f0d69ad82929cfa757f02206ad372e4fb67f0261ddf69732e7552dfbf987acb64862bc7e68ff594eee85497"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "30450221008e02c726bf26cf868c71259a42b689a44f9831959d0ddcc5ac383c84bb0bbff10220703c3f4703639b9419171a58e089c7e51ee700aac154b160991b2085a90f2170"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "30450221008129174f55689c87a4ab3bc85460c2ad3ba932bcd17c320c838f49ecbc356bcf02200fbfa2cd5d7cf2adc1d4fe510915ca868c0a561b4eb998f353e055638c424add"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402202a0bf116d4154b33114b0be1c7aa85d252905fecb5be1c489e7668bf82dfea58022036cf082026a3996873d42437aaa9c1fbf19f700aec2ebc4a6ac5a00970661b4c"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402200c2673c6b42993111017fc5833201c80379c9bc28f881a3a38ca28be39853f31022077121421678b7ecaedfcb48fdae63cc1ecb466197fd7ed4175a42c922ddfa8d7"
        },
        {
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402205f32f17f74c43a1e9c8aa74ac1cb89de40635b4d889741640312811d55cfb7740220367e54d0f0a6bc2a700bf2225a6bbaf1f4f513a434fe051c4b4813214ea08c96"
        },
        {
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "304402207a64c86f6486e36798a3f4b8bff7150c4557e3053cb7be62a631b59d9f92bc8202200747e18e9d61ea9b5fc5a71634ad0dfd945b7250f99a2743c1cd467f4038955b"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402206e2786d2a7c562a6827a8592815e65d9d05361a1ec93960ec551567fed92a63b0220453ed621d94f50995f5dcf643b43c5578bc7113ef6de28a3a6b0a339b5fb7820"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100f325ca8bdb8cde9ab52819c8a42cbf4a56fc7c76c1ce360fce9a9cec9dabbc6f02201ebfec336a311bc0c048563dbb7f6ab4813c74dcd6e523adcf7daa36f960e3da"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100f9ea4f723651a6330c8d7b0f86b576eaf5361f3195399f2a4ac4c491f57af19302202d568abd40baba609d09770725cc8082aff931e4479c088c5fe4a8955a7bf0f7"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "304402200086597e47c7904b3c09b0c56b9ceb6fb4dca06a15be4403dd49453c72bcce1002207fdf13e03f995d979b3267ba54811b37f4581c8589b5b42077a7134f4ddf4385"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100aaf3d94f2a63c782c0c1363827ad6516e5c5ed77350bde5d1dbdde75a302fb1c02201fe0dbafcd6fe5d4207c5db5b9e9d5e6e9022fcd8ac2d4d0c5c94d95923b692d"
      },
      fields: [
        {
          label: "Approve to spender",
          path: "spender",
          signature: "304502210097c9fc26409515773823ebbace587b2c040f78db00869eae59edd5f56a88e72802207eec9db2e4a0833ffe59a7844315e17fbd61f0eb8765fc8d949f0ec6ae6b396b"
        },
        {
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d58d63c10f6511ccbdc33b8cb8488781058a1bdf3928e64bb36bccbfd44a4e96022021a4100d03e77be004257b8f1b4c33d9f9b69ae412c7775172839ee2230dd686"
        },
        {
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402204a0694f24bdeab3eed5ffca98067732394adb6481f5f2dd06f5a56d1b77e46d0022012bd7ade8fcc824119d4503f9b8a8957bb1b60780824463a200200a7fc9e53c6"
        },
        {
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100d4d1199abb383ca579c0716cb3367f0ce1d05a2adcee57a3e48c74a0de0ab98502203ea437971339956bc78b05ef230ece1e092aff7ba9a1c3a3d0724fdf022b6d39"
        },
        {
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "30440220258a912e86b9a3e73ec551693b63fc37e1bcce2a37a297744922d0446403b2fa022068429c027867e879e7696cb0303aa497dcc75d24673eb5a4fcbccb8a9652462b"
        },
        {
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100ae64e162a06dae806c8d9d3bab0b4db4414adcb9319d7c619c5a39dfbb705f44022038f88abc2a18f8dcf58708a0818df060b27c35484185100068e0b1c579ceebea"
        },
        {
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "30440220682d1d814608a2d680aad01bd2b7b7a02a413617339488f2607333cbc1978af0022028412797455cb32181b5e29e9b4f7680b4334f8a7c02aa0f18de0b48d139ceac"
        },
        {
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022031fb26b688bdf77b431d294f406f7a2895354ce5ee8276d85a1f12e05234d0bd022021f6f9c04c05da8aca0fd552278384a2f87b16166028dad951e6c281c5cfca0c"
        },
        {
          label: "Approval expire",
          path: "deadline",
          signature: "3044022003dfa8b8d04150e6a11de1e7f4453cf9abcb7efac92b0e900ebaba9ee5db31a202206a3608beb43d3a86b0cf66fb711acc3d27d61cbdbe47b7085e91b8f5fb9cb75d"
        }
      ]
    }
  };
  const EIP712 = {
    "42161:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "3044022020da162d81217220a0ae92baec05c5e99cbb391469186e27b2609740980c7dff0220285603f10f261ae8a02779cb97033906c5a7901c9e3acae041c2385d17182290"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3044022060df9e42841cef20df24776b08774abf84cdeac36925b5c5817b02a57138718702200b8d4d0c56f01cbbee2334c9b62d05324382acc3e6ee0b5426871ee1117d921e"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "3045022100c72efd4fb5d926b6ccd016f43b77da6a4de3c7632b45f3f24ecc63bbe4a16af60220068812c772486ca2637242dbadad9f8f205a86aed091812bcff79d93bc4f35dd"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "30440220717854aba5ba0b46dc63c80f47958976f3a947eefd6cde16cb929caf3ad09e7302205e6bf8d1cc989de5c016caddbc068bb48664e258af1f9ca5a87d756efe6fb967"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30440220531b40393dad97352a420de7d6018fceb014d5065c415e92981cce45e0ad553102205d6ea2ca4c7f6b6d77cc06882507aaf76fac6b5bcfb5d53325a54be1273bbbd6"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100df54d3f147f984f8065804e4d549bcd65660e627d1a7022f4893ee0c4a9c51e202206b468260ccf25d84294a6f20691a982701f7e290d71b46ee5464e13e4adaf41d"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3044022050a705227d3b7b1ae5fb8bb170171b47ba7f54243df6b417f669bec5c6ae072902206d293823929e946f2207efea226dfa0e0e6f153729d5351e664da007bc75a6a1"
        }
      ]
    },
    "42161:0x7f069df72b7a39bce9806e3afaf579e54d8cf2b9:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "304502210086b3dfc9a254c1bedf6f227a6ba373df5830ed15c8cd076ab81ccdfa1d9704ea02201a322596fd79104092cfdf1bb50e625de21a5ae6621d324893533b5fd09bdf73"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "304402207836e75bba70bff3ac5c36cea8bba78c5ce37aeedaddee4d96f23ebdab274e2a022036076d9f85a3c5fab437e72dd64d12f12507ff34ee73828d5639a848dbac1f85"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "30440220571888fe4f3506e4b1bc43275c554155d341920de4a278a0800f549b2aa6a255022068966b9c660a49b2c716fed81456c86f44fe35c3d3754935276cb068f16df5c2"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "304402205f609a2961506951faad4dc13aec38d58d5080db8a27ee1c1952c3f1214ba98b02202dc979a8570e5de74eaaea90a5ee6fdf5b53cd6595fdec01d5abf0f0a07c18df"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100901ba5eb97a5605c0df7679c786fdce430c77609f99d659d77ed7531e219052d022032c7a24f21c267cb59bc06a5185249c446a728cfd9986ea8e3b3c1be565a7dd8"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402201c104d5b690224cfa88a5850e36da4fb4a6505f573eeae7243d42d5e8034e35c022064905c462daa8ef7288401420f293404196eade3878eb79f974276ac65fdaf7a"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3045022100cd448518044c4bfd4a0773c00d700b62a35fe208d27771caaa4239743736f09102204064886c6f5272ea4545977fa1c9d075e3abba0655de494cc81bf969ade063bf"
        }
      ]
    },
    "42161:0x7f069df72b7a39bce9806e3afaf579e54d8cf2b9:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3044022017457b1725fc3af0932818d7f2e727510326094bebf470c313c726104201f4160220233662309328ebf5acf57c1a23384beb8d29b6c026c3084113b3d42e16ad3094"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100f26083b8baa79070fe0424f6b6f0cbe1a6c49a6f7aa00c322f1de5bc6634144202205f49700d5f3360654764353c9ef75a6bcb9940c2cc7a8d0fa3bca82c40ce96c3"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "30450221009645af0129c1eef48fe493097a53d65edfd0c5ae98d629c0df620cf614be733b0220678b62c889c3fd0f603c649ff14dcb73aaf35e9fb1a83f6973dce08124d83f6a"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3045022100f125cd7411d56490993a59761dde9ca23059e0c58b9377002eadfd6c9d43d06302200c897ba6b5b1117fef1b1ffac8a6bdfa7757708d807c57e7e33399da7e26d6e7"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "304402200184ccb2ea4401e0270aacd1e86c8b4f9202b810d75394b8edbcf9e2c132ec4502200095fca182cc6b43493ab19dea133a18196dbdcdf88b7d0bec1a4c44b724dc41"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100f5201cd05e1cb877d50b357038c53a2d214ec4c696fd0bcfebb004870ecef389022061fc6a4d236df3ccb6c1296f8583296e54db8e73310178a265b1c65b3b932b41"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304402203bdfeec857a64ca1eafba51d77d090936bed9dafc09ba461ced6c058b02758d402202546dd5ab8a003490c5fdc4a789ffeedb9656622ed2ac867d2c712c68ccab104"
        }
      ]
    },
    "42161:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "304502210085c3d02e3f1d2d9dc6bb9975e46e8b90e514d578d9e6974b10b3cc1bf4a2fe7f02205d2257c30412b9067a707f8cfa8da92b0336faa39a2bd7099d2b55e0a085b8cc"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3045022100ff187b0adc9b9e2b9aea716d4047d2ac92c44cd0d0f2b6ac09ec4b52d89e9dcb02200b18d913b72125c7a2d6083e2097f786979c04056b881e44957242982a81931f"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3044022038ca4d34df27f672a40cea96f4397c70148e07a29662601ad765e01c71a5aaf502203c88823e913193f5eff4b8f5eee72463b660b6d146f589151af2164de4d6bb28"
        },
        {
          format: "raw",
          label: "Maker asset address",
          path: "makerAsset",
          signature: "3044022058de4c432c785035fe20e160f7a98a9ebfb1152df0c61d679b0bf8cf838a3412022006447e72822301ca0fdd56cfeedd0ca04cdf018bb600df3f9b28d633e90b65a4"
        },
        {
          format: "raw",
          label: "Taker asset address",
          path: "takerAsset",
          signature: "3045022100dd48da4bd40c2ae4e389462e9792c67bf699749fcabf954e0121c7759a499ba4022011b3c12c7d356a8ec62a57643eea50fed6d831b9fe95f94a7b31c4d1ba8fd887"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "3044022074fb2c7f1569c685e740015a91deb0cfaf771d71ba0fffcd14c24d59023878fd02202488ff10efbf225f1750ba334dd885f7966b3be7d57b87bce966aa3aec7fc3b4"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "3045022100ec75b1e6c770ab39c3dec4c827af340b13750d55436002504e8d27872284749d022048dde24cfa5b564e04c3880febbe40650687ea0e85fc634d27f18b95c14f8e59"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402205ee3c0ebf4735b3e7209237a2c4a745ecaa8e0310a7e0b33651aaff4baadd10102205aab92e8cc4444f900e368502e8424d5d05d1216a71e8b4dfa1a30d7ecf29e01"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402202da05529a3b7efb5120658b02f7de224887517b67c26f6cae85c3b4a52d9dcdd022071ecb8acf9bb2ec27d3ef5564394a48192692c1214e3c98f87e651c7c6353994"
        }
      ]
    },
    "42161:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "304402205aa1d43c376b38e68d4cf0d9fa51da49572de9a7d5c8e2fa6f0bb1430b522abf02201e8c73865ecd95e36d106a2fd58e3eaa7a73d6181879aab9254d66e45dfbf16c"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "304402205cc7b36d3b1cf49f956486ba56c571474b1c2dc74776f3d73d1720f402578c9a0220781edc10e5ee70a56a65881b9a4510f2dc0227899664d6ff3c5ca0465ca4b6ef"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100d3d524282bcacd494cd6b72b148033f17fe05789032f5da58944863d24259ecc0220228df613f5d2d2f3662c3c35ad3316ba5a231d95b9fe95cfc39d433b9e0201d7"
        },
        {
          format: "raw",
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100c8e4bc97eabdd4b267c6733652b735c011cb353bcb14b61ca8b2c732a701db9302204f35ce83dc85008afd0a93608b531f0ea5d680472c077d8dc2a32cc5ccf581c4"
        },
        {
          format: "raw",
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "3045022100aeadd32775d3d63a1dde73c23fab6d7fef0375d5210728fd8f2ed56adbee5b220220462f3c126c78dd0fc9499005b5ce3b81c995f11c55e9cdaf55d19fb1686f853e"
        },
        {
          format: "raw",
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "3045022100f6ee6ab28521c9f282fcc897f165e780ec9b0fe9268f2a18beeb3c67922ca679022055a2d60bbc05145e3b55483b502c576066469c6d6fbb9ee3336a16b7b5df4900"
        },
        {
          format: "raw",
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "304402203c84ee7655fd53fbe7eefb9e7522eeceb29bb7f03559d5e0a92b1ee55e711dcb02200c99dd941f9e58b6b0f28e592c089dbcb245f73ebeddbab9e2e88defacd186df"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "30440220109b530322d864a1e29d431a00f0dcde1cd165a2ad11b021eef605074d4c9758022052f04b7e2a2cd70cae54a881c7f783fcc2058d5b2791b24bc557e4e231cc2dff"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "3045022100f85a6ad793151886d7b4fe8902f55b81e4db1ee73589e1ed180a3f9b2285288b022023d061e2f9694a086229fff173f351c630e907806e8e7f80e9fc154a510962ee"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100d97b6d8cadff2e066b43c0bf3cc363741dd3227c9989ead29a51466f2f1d9cf302205b76c51c2e2d2e75855acf5416be5e3a066b2e671884ae81343cedf9eb42b7c7"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "30440220249407bacec2053557a7360ec596daf931fd002c31f77acd94b151a035728bb7022050769d692217e817efb3f6845dfa293cfbeaa39f93b97dac2d063a4be7c44cf6"
        }
      ]
    },
    "42161:0x912ce59144191c1204e64559fe8253a0e49e6548:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Arbitrum transfers",
        signature: "304402200f7f97c35bb60e6f4052b2a129740c55e716fef26eb0a83a834bbe03d7d82c9e022047b2d37e4149990d28cf1b1b1f9caf803259cae2a343ff72000eddfa319de15f"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3045022100db5520b82af16dd2ac45775fe3db20db5c9829b47b847616b39fa1744685d13202202d1a2c60d5c500eb1119ea52951983c686327f81a0f08d06e58e18ee84486883"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220556ec93aa29917934f4a3626de9b9a2e9ec589446201981a05a860696d33e97d02207792c8caa52e5bc7236d81d11e71bdf9d2845a3b2d7b3a3e99e7371736152374"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100b93ece9ecc26af9239403bf579b2e522e68b44b384258e1d8f50b7a8a229f93402205a619e93f65ede98eb3b9319e0ce7fe417a789bee3263c244ebcd7e9f83d10f5"
        },
        {
          format: "datetime",
          label: "Aproval expire",
          path: "deadline",
          signature: "3045022100e975f5f3542c32803c99b5ee32a5778e3a519efeaaf39c73aa5ec05c6d17725902203db48f7cc8b78d76fb83bed5cc158427193632557621914d8b1f8d4d48098e68"
        }
      ]
    },
    "42161:0xff970a61a04b1ca14834a43f5de4533ebddb5cc8:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit USDC",
        signature: "3044022028314adc36ce0808ecb88517feae3291408503877c3bd9abcdb8b4b24de83f5102207a92d8ea367676eccba14c0aff75efd66b141debac865dd7749013cc306645de"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3045022100d2b596afa0df5133f55d692928734bd15d46fdab388a6f4f69df43420bc99a64022066c087594da4c6d57c24e2bb7c333e78290a1f7f8f9f8262aa4da0812bea1f60"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100834772d8adc519f3a5bd4a6ef33e45c8ef3dfd2c9290afe8e33cc57aa56c4dd802200d7306bf364284118da4710e9a9fae3a0e7e3579206cde4543158e85c3ff4b5b"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "304402205fca3403098b44021edd93cb6d5ed5d89bd19a4f49f72a97de154097c66df3cf022070d298dd840764be6e50ecf7e1d264ce9c8c791af5ecc18512a0d26ad5b38e80"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e24a48144599316d7b8f05801c5f28951c67eac9a0ce594ef6b835796a775e260220624f84246321314053e0756f638d2ae46ca54bc1f6e07c24685d7c301a8d496d"
        }
      ]
    },
    "42161:0x789fc99093b09ad01c34dc7251d0c89ce743e5a4:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e": {
      contractName: {
        label: "Arbitrum Foundation: Treasury Governor",
        signature: "304402200fa08b5ce686eaf6bb708211bd4bbfe2d4e278f6966ad2e481be73a472bb4b46022067481a8a0d0357e42592498b0e099f8b1313003c423595972bfbf19add008e58"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "3045022100a464daba1b2a7a35336e03fe0c68977597df0917dd14d40b5b794dc12dd1696a0220594ce98bf0fffd98a6717c26465b1c67f14955cd0013f0b9817d85d771ec0acc"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "3044022051f41d12c90d0e82d9724f7fe43d5b9d035ba46c160fed7a9d6026b8317f80f7022057f325aaae71c60bdaa9bc371a5af9a1d4a5354a7f7dd6865c36faaa4ecf929d"
        }
      ]
    },
    "42161:0x912ce59144191c1204e64559fe8253a0e49e6548:2c3e6b3e91e39ef9bb3c1b1cd2b4d8da76bf433179c8042962671278": {
      contractName: {
        label: "ARB token",
        signature: "3045022100d083aa12bc96ed7568942bad291c90fa0710b984b6d8693021be961d99df15b702200d29db9c738e3fbd7dc3d21612833e32b5e2f197f8273662ce16e20058276a47"
      },
      fields: [
        {
          format: "raw",
          label: "Delegatee",
          path: "delegatee",
          signature: "304402205274148210b7cc92e2714d33d5c7c280ace94b9d09b41539af5056ddcb588b9b02204b104de75d5fb03f4ec1b455b9785a3c6f41a897142c40f88bd0e27a51ac940d"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "3045022100fdab6f7a16e999d0b0bd2fd4be92682a0c65cd5ae928ed3cd071b11ebe5fbc7702207cf139627f6e2aeee8b0b22fde9c1025cb847b2ba3b4d27a4726e596c284d62e"
        },
        {
          format: "raw",
          label: "Expiry",
          path: "expiry",
          signature: "30450221009d00f19bd6bc9f14502c0ab2ff54f372f00c6a153083898505f1b9fea585b70002205c1b4afbc7efc4fd027528917d107a95b5f24caba816806fd393d4e419dbdcde"
        }
      ]
    },
    "42161:0xf07ded9dc292157749b6fd268e37df6ea38395b9:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e": {
      contractName: {
        label: "Arbitrum Foundation: Core Governor",
        signature: "3045022100e328451e523340c7f0c6229d69a9196703d33a9aa4920cc775ef4c254eba08b402204d3c4a0be0a1aa383c6895db61ff07623fb000773713a62e56bf107fa8a852d4"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "304502210087d449414d2e9d6466e5b9fc5a2a4c0f93e13b6674fb6f3b5673ad3fcc8780f802204b9e8b83c62042f4f4326d975b0f7e9ac8490d19a2d04f2e26568c3433444783"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "3044022023b69aa0f439df05ae5be7d03df5fd69ce8a01fce764bc1c8455d2c92106bc85022027866dbb7c5e09eb70f90329dcb59c90a87da90f2b77d17c1f74a9c2e0f663db"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "30440220699737c39cd9763b66d094ef1d30d3985c4f11bc77007df7fdfe3fd5f3d80ec8022003eca58128646ba5cc121bb97c12ab5c9bf36bb9c5f9146377edd55845d4aff2"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "304402203b28bb137a21a6f08903489c6b158fd54280367d6bb72f87bf3e2f287a92440f02207ecc609b12b363cd0e8cbef7079776dfb363cef2fc11da39750598ee4cda4877"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "30440220574f7322c9cd212d295c15d92a48aeb6b490978cb87d61fe8afb71b97053ceb7022016489970af3ff80903a45a966ea07dd9ca1435f6b6da9124e03f3087485d1c5b"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30450221008eecd0e1f432daf722fd00c54038a4cd4d96624cc117ddfb12c7ed10a59b260d02203d34c811a5918c2654e301a071b624088aa9a0813f19dbfa1c803f3dcec64557"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3044022028b138c9282bf40e9e0bed34748c90d44b35708658a5fe4f896ba1420fdb62af022026e992a5bc05b455771c7c3706960b271de08ac063561936f2b2a2e90cccbf27"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100e322fbcf244d817c6af9e807d36f5a0eb2db21309c07963e826ab5d20c7dc278022068ecb28b65f9844d40ef09e7b141bb220d30d25a42f6ba4a648110901a79c191"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b9f0229134290af4cfeb549204eb02bf34f084b1d0a7c8f161e6beace10dcf1b02203ef40e4c9e88b83a85f0af47b54fa142741bb52ef26302c8aa46b0b274d02fd2"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220499a5568fc3fcfbddd904caef7ed16253e147d5382c0181246f9412f965c802c02200d9ed682e53b5d2f85afc84b74a842618f72840837f352afde4c1a73266f96a8"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100f0b0c01c84bc6139867685ef53afc3c2f16824a3549130b97e2d274c83a5aad80220780ed890bd5542e2d22478e6e51bfff578627dc39e82aa2539d904f67fbcb444"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100e54a786bfce193e6dc5235ab0822b3c59e6bb43ee0cb380d9fcea28e7e304d26022027ac09ac82735d20cf536a1913e385a30c57b1aea7aa681474423ee84af4d00e"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30440220151f7cf9eec316456b5c37ead9c2bb01ef02a55cf801a79d69cd185c8214531902203e30972666c6bbd4786daf27a73a05191cf8d08e2c4e0ae7b30b93ffccb2988c"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402202b9e93d841f3f81b63f31cc974d7204bd9c7c00ff57e7021ce3296225b605f04022026293bf2777b6b1971b5fee2c6aeb5e07623f6acd715f39de88796774d931dab"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100b927a3639c291f1c5f5a4459ee6e9eeb172e4fff2639cf2417a0ee22668ee785022016f22532a98ce38d2fec2956118eb67b80c748e012e2e9cc119a84618fd356c3"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022070df47bd9af9e8f70ba486b5188cd24ff2a6a7b7963a628608936986713eb108022023440cee1a31e3d73489a849ec925a85da16d1c096b3029d4337eeaf46a26d4a"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100aa75f292c3029cc67e36c91233b1f3a968b487fdebff9b179f0cf80dda60e274022065e8cbbaa2a25c73477c76edfba684fb3ece14a390ed05fc6d07e258ef777def"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304502210087b5fd4ca85d8d902459aabf0cfb97c676809c967b84c8a8301838f54d2f144602200d268e03f892d81b35ac1bd493310f4fb65a202c2ad2ebec3f427978756b3106"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b5e936abd5df8c51ae2ee04b8f06e58162c5702083fddce3494b19c9bc9c2e01022032e9c8fdfd04c78d70d0f1e03e1fe716afc7bb2d2f643cb4586316e87a7c2150"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220125f3c8832b05bc42e224f0607516500d37871d13a417b5726995fcc2d046370022072bb072b344a1b426a8d2d80572e95bba4e3113f73e32d5da63243847068dced"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30450221008b6d55b1299546ce1c95f1c2aa9ac5587a565f8972d16af11d0818a42ab01f2e02200120350300078049199f8429ac0dcd326f17aa76890c4e5b033ec976cfab1819"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402205298d4af21719f53590aece55ed00ddead2c2d779e07543100d7444e3633088402205e956e92d57fb05cf467c331c59cbb067ed1f5bbf75eeaa9b1875a0970c14354"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022070db1a59aa095548e0c834d7e9181d3df598f01432ce1fac9dd92f6d09d8954c022003f24e083a744c767f7b693b2f05988d57b8746750013eb4bba5071a1bf75f1e"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402205cb992ba630452b43cc31c19df9a6dd6287a31fe3e8b67ca27880acfd89cce65022009b13c4746edad9a5bd39b82911a68b0be7f772c51df6617f7cfd2ffe0645bc1"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402205d4def0d4820dec59e1705730f3a18a5ca3ddb6b8580265420049c7a522ba0cd0220737132ba1352c7b8dd8463d871cabf53a5dedf5aee68c7b1172e833806aea572"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100eb5d8a309b9b9865377f4b430acc4ac5845c6b4339ce2bb9228fc76947904e3b02207530da05e41c522a6385d0cb586cb459305e98b45d32d0decc078081781986ae"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "30450221009f9fcc4fd4ede454b777009af42cbf3ef775c25093569172de07e54cf5adab82022032c15d56b5d2168a5412645f45af3b1cfb37afe499798561e4269ff4be8db15e"
        }
      ]
    },
    "42161:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100b3750d69ba1ceb422b418946d10e3cb101b19c28040300628622cfaf2e3984c5022003f355a155850073b1511f6109fe1d2d0d178f81f229659b5b4277a1a322c06e"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b7d9aaad264938c68c358c81da5a0bfece07b718b547b82a421ec2958dfe8cce02201a58b6f6cec2a232cb9f974b0186ffb7d2ebedd2899c81c8774cb4be9358a289"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402202b0d437ee057d72d44355f2dc3a7deacda38e0a2ced71991518fbea9b90960f70220391ddb375c73d69fe9ab7813ed053321692d7a299d8915775a60ea0119f0dcd1"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402206bdc4e0b58904700da7ac3efc8ac7184fc9440cf8a0ef2d2b32575b15e76ac1c022022d242877ae28521223cb3c1af1ee1bfdec437767c0ad0dad507299d22a35d4f"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402200bedd78431804f42108d7b7d234d738674eeeeeb31f937cc38db1385d9da037802207067059d63c01a8f8fa45eca2fa533cecf8fd3553c7893f72348859a5b91decf"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100c95b822cbb4c7a80faadd150e5f8e88ae01f25330e70a0f28671ea495ae8f7ca02207221c33dd32e571c0c192a5a7789ddea2bb776f7c6080ddfb54d3dbc022034a5"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100cbc2390f81a6af67d5225c34c51b2289d0aba65ccfff6cb03acf3b54f2334cc5022010fdebe0e5a601ba1ec521391805bf13dbaced0c707475b05ccaadaa82acce61"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100ebb9f99820a07f27860036adb3ba27eb37bcc0024e79e38c0f39066f1973fb0c022054873d3322dd59dc5ef11e252ee2e6f9d9bcbf9aad645732cd601a3a74145181"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022023711cac25abd661c6078cb2efd72795ccfc94da57c136c11569369c381be82c02206a616167025ddbab91ab5796ff5be6745b1929772597bab447e57baca50d411d"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304502210083434620c922f238354ebccb1c9805bfd819e3d4d53a392dc669ca5d4dc2e22002204df1126d105ca0c904cd6b3a0fb824f7c8a04583a1320cc240b312258b387a08"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3045022100963447dd2d0e26370bfc88c42fa2b3cb1b2220c985d281aaed627a14732cf4b802207fd61acb22cace24228c1bb89143f2ae6d9b0f0bd1cf28e64b6bcd37b45bd4c3"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100a53643cdf02e0ea5b8e3af8e95c4886aadc58b301a6998a534ffc4c6f46a6e3502201a9cbe45b27e22b5ed7e407a18e1e7ae1eb8fb71bd8b41376120af9959f10af7"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402200eb64f6891a2eb7ae9ada0e270a390542e799ab13f943017c13f3ce20c05e289022006cf2e8be17e5a26692ae4523e275b9b9aac7cd2b188cf8805af1ea74b67d477"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100a13f58bb5a24056fe745a8e8d395ae68f0cb4df88faefc2e5e06f94aba87dafe022039f1ca74ab9d53ab274dd45a53aaaf54f84bdd3502ee862a9e9641b256476a5d"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "304402203be58e94aff13fc37521246358d270ff53594d304787de4cec5806523c8dac26022033b0db55a67a345f6db243a9c47cb10c257ccc987878f0f9c211dc904f29c4bc"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3044022056ddb8be9857a616ac0fd8d07ef87ba9585adfa5f8a70e39de39e9421e3158d4022063f5d63bab0252445849a2ff57c17060f14028e0b6e4752ce0ee3c38cc3606d1"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100e52d8026ec5618bf67ad9286db3003b7c86c2c133ee353b9abe45382a87509dd02203a6be936b97685161a61684d3a21cb5e722aca7df0fdb0832a6eb8579631f77b"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100a7240ad705d52a8b36aebba31b7a44f825de1f2745314fdd780862aa79fa0bad0220696c3dd360f0c87b7cbffe881e42aeb61df839a24f174d2a063464c27df8c2e1"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022017106c59ebe8949c98ad66509aa8410fcb3431c1bed7318ab38ce23370e9276702205d886c5dacb52a6f06ac0053c057af671a0a115f79fd8c0d39696a994968322c"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022037f20f92910e9f73f6b14c8cd48d3d0d163fe9b3deb87357ec331cb2355e43e6022050cd5fb2cfd7dc71457a10ad2af04dcac63f519d0ebe3d42b3fa0dd4447d4328"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30440220336b7e6ff73fbc946df332da5d3e3869bce84aaec26842e81b7660af428f11b902202ecee1b791fe077938dbff76472bbfdc772dd5c1dad754ba4427a1758074d565"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100c653dac1de42e9a06e91982e7395670fc31213804fdad1aab5f80b48a3878bc502204a13ccfb0442383bc6e5a8848a14a8fc403f18d673581f0987562483d756adda"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100d6b3200366bc308fa9f51f9d11e987a7893fff7e74e1b74be9560398e3de143c02201530b59f0fe68b61d730e139e536f8006289ce785fa5336bcf36f80cced7c1f4"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220467adf22e4e7c7429f91bebc3f472e55239faf3e2416351c832c122781faaa9402201015d31677212841b284d59f4f5e79666bbdc72965d01021a2560097752355c0"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402203d27cb836e2e16e6024713e81c08ec1749c572ccfdfa21f99b02b8463f859fd802203892cf579d167486d9b301969fa4c536c7114423bdb187384c1bc250ce3b7b22"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022037ab41e91701a005e4370b9e4d08cd48ad6b7ad2370c05fe2a1e91442b98ca00022053b91091753675a3521d6dd3bb862ea75d41f0737bf256ddae9abc1f82b9d381"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022050fd436716794cbe59d75015a7b1ae8f831807df2c6d91723bf433e8262ee50002204edfbd14add2c0794529359430e5b1cae049212f473742c06a78f968ed01323f"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022011a4f43a11fc810627c39495ae0a2a791f3d047a6bc5abfcc5a6ce899c57c61202202e83c6d913a02856d4469be71df1010d296b12e3c7850b424fbb5ac133af3538"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100bbf71a0c481ccb366e823afc0af92f27c9e34b490b69c3a8b2081758ccfbac26022062bcd16bc0be5d18ed125822850766b8b3471fa6a590df3fabaaab75d5d85c0b"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022031e68245c40678d1dfe779872ab40e7fee3847c97a4f9b8d7a3d3209f0beaaa9022064a085cb28aaefe6f7aff7ca7a3ba5fb6795ccb319c82068ef554aa840c7b0bc"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022016106c023503e6971830501b7917170aba46d752c5dcab2c03e8001558d70ba602203b84f821c301d8c76808ecd28125880d2b67fd18f8c9789f59a254b71f1103b6"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022025d4c29f2bf3190ac638a8c44252881f9fd7c119d9792a186a993beda543979102202e553a2ff762e0b4421b5b94f6a09b39bd80b51ccca621bde18c1d020295e1e7"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402206bc4e8a63d673119b11c62367dc9f91d7cac4750b11a18a49910fc8c8dabe9da02202e5b2724e6f09ae4d1c6bb768217ee0b4b433e4d0f8c10c899cd59f2f0d6ab5e"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e4b0447e17f8405fa5dcce533203a1b261d85e4303feba4cc6172f431b4fca1f02203901d0cf8198bffb13f60fb63a1b7ec29b436ad0e074aa9336e2a53a725a1c85"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100c16340dca02b248381232632fcd37b3f8a340d6beec7bd221c7ed3e6f404960d02205750f4090748bcf7f1e3d62a76a65d0f5692cb76857c65aec98bd88ea8db29f5"
        }
      ]
    },
    "421614:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100a006282860410afbee02a5635a7ef399e6f68359c6d6519b4d16f907e9abd8a802204b50d873637823d10544ab286a96a763e747c206b538e46c8b03f752a38f1474"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ed0d3d08389c58dca517c3e7b354562deac1988cc4e76c09e5bd092571c99d91022034a9b44485220f2c7c35d8e35e050ac1bd16c12277825a97449ce0405d5b240a"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100bda885efe70df34180641b40119b4c1ecb6ab2f6eb0f0901c0cf51340b5a848f02201b81df5ed60d4646a7ffcc6b9c7d73a7dfa85b7de94bc4d0d6b28a9b343489d3"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022041c2f6e90562da84da84f478686678bb363ebcde969642b0159242b6bbf9083802201f386947f02f5e0eb2c9b752f3684c7ce58a3789c20e1e1605a6c7a8cfdd75e4"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100dda0afd4b606832d1dd6c0b689a01c12e137bc79b2302a9acad05934f517d6b402202e0eb8bc26a499dae5ddbe6c7f0f170b6b69e1ae32a509fc03c5a027e58d74ec"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3044022070d4a142665ab0e7305d09d83e8146593079cf9422e2fabb33a3172545d920c702207511c07b12af5e886b5cce631bf42f1315d6e5a01905075c8fb4654d947a837f"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100c1d34447ee07cbb18e09cab3912af57a37ce1f11f00787bf46d7484b806c7aef022033754a8fe682a62e78a60c0a469d29a9a5bcaaaef08b8def7af28a55a8628d2a"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100868a44e4c25b04b725a176b8f7b4eef46901da86f06b415cffaab28a3ab0b20602205a81621e8257c061154daea2240faf2d17841b9dc60bee6b4f258d5bf8b69d42"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402201a965cff40403691f6a160869a7771ca1cf0d1070ab7f3b7205487bc1629ddd70220522c0135a82d8f0a0ee789d5c779e44e81558525e8df54e1777acff5d328e451"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "30440220582ce1fb28d598b1192c1e11828ec9c26628db5de0a98ddc18d91d56749e7d32022027f8d90ca2461274278ac866a85d67ddcc662c5bf61de2d8e076b752c66fd9f5"
        }
      ]
    },
    "43114:0x488f73cddda1de3664775ffd91623637383d6404:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit YetiSwap transfers",
        signature: "3044022061c93c53b0c2335ca5f757d908f74a4905721eb250673a29c69a698860552f1402203f2650df17b5efebd1a11f4de73f8a87031f60736b6dcd64b148785f1bc07452"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "304402201eae20831519d5af947c9a5396ea2836827fc0a5fa00a2a0839c975e853c1bbd0220719b5eea76f03cb0391341dbf77a3d093b8a625a109d5770ead2b72a8d72e49f"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402203bf42146dd0e211e081696f99e8f4a6b9df06b29f5ca420ac2d16a23067b538f022016987f7351bfa2c43d0aecef6e9ad11cb48ac6719131238c0fef62e26852f7f6"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100c7ccfa8f7fa06c02f18d0a5c063dd172e680615f9104c2e3206183f21b023a4d0220040cd55acbb6d3f2ae1702d424ce8fb4705350607754d703dfa5c4704ba4d205"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304502210096139847197e938bda1c4bd88d6510eafd7ab42cb044a4673896ac75d5761d32022035eb28f156f09a7c34882a1e25460b0da17862be9cfd2ce108f8621b89ba118b"
        }
      ]
    },
    "43114:0x60781c2586d68229fde47564546784ab3faca982:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Pangolin transfers",
        signature: "30440220770892c4d4e2e277b8121044cb7b5756d5406aabbbc7a50056da06aa6df68f470220689a5eaa6da11691510377fbb6b7e03350b219ca0365fdec23af1b10e301f918"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "304402204e1a437dd77b3ffa34ee991ca19e17661de82c458923a42d75875df82e360ccb0220719ad40a493290ab6c009a5e88e1da06f4aa1d0ce625a8d4c573f7730673e56a"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ceb969e775648a8ce730b42ca117980836855ddcc8d251d0fddb9763e520ba9302205020f115396bb7acd2d6358dff6c3637841fabd08aa5bf191bb83ff727aff5c3"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "304402204b53d3376b699e1244683eae305344b7c76b282478a75d0916724f7fdab4bc0e0220072220dab9922d81cc6a8fa70efc40a4a7b386e7abc689da518f6cd672b66445"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402201dae53c93870f56d7eb5d8305b3c2b89fe6136329b231dfda2decc43a4bdeaca0220540303a29a72454ff8b1b722066a8c3fc99cb31ac30d44a8d3bdc36e8566edca"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022003ee948f9c65d57cdd893fb060db8dba8e4d13a8625b3f3e57095d2f8d42faa602207e7e8772cdfc984d9bedd1ddbd47147414e66de635a8e3bb8ac820a8a9246e52"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "304402202b820062c9fba51c9a9630b10822b9090ded1f20132469cfd8b86ef6b5ff9b180220188b061a1f10f42a2a109349e03f6c3072a45c7317d5cc8ba4804161bd3f5120"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100b90156b74860fd63dc360370809fa291ef7e9c677f4aa976bec3883c1ee6d28d022060135ef6601583db8f4b8fd13ed8d1da98215a065522d5353051d88481c12956"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022017022e5bf63fb42f68c6c46ebc2f3335b928070017b6d5ffd58cf7bfa713a22502202850975f985f4668029660914d07452c01b3017e29f419f99f691a7091fa7468"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100f6ba2fc3decaa942f8f43ada10f1118073086e1c779e97ee36f98258038bf92902200f49748a1efdd15468efa51118ba3720bc637325bcd56bc10f00ebd9da88dd40"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "30440220349868288837e7a698727e0f563945ed4cb2dd1dd4cd5d481f17014413337e1a02204c56f13d6c0e0d7e656ada6ea92ec7acb1cd0b01194eb5622c63afef19b53952"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402204d1b1637dfbac199b25c1185a3b7f0320c339b0e870db4229090e7078f96a04e02207a255306bd55d54b6ed1f4e392e12cb943077748f76d987c7bb9e52f3e17fc77"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402203d62c40f7dc97bcf1094b63ea42dfdf6d93fa810fe4135b68c98d4bbf008355702207763186f22961cdf6f6edaf54870e1712bcef9004d8a70523516c47df2708379"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100feb5120846a35764c0bcd0af55b69518b85714e840de5f03682c6a19142ce8ea02204a87c60b01b2952b149a8505fc3e553db35cdb3d92695dd87259972afdaf650d"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100fdcf2d06ac3900c78d1c84b54a2eb40da3b9d8db95d107420fe21e13406607d002207f38c6496e5b8def6fe8c24823c3ed0b039883c239b7ef3d043b58c2293b1453"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100d852355928712d8815b47acdec2a1fda631c3a828e7342603930de3827cdc92a022048598eb4e6d90897824683ee56bb123dc754972501ce07fd5149c29623f94ff8"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220608f164bb66487e40b58a0c04d9d44d8d183bf7f972f17b5447a6fc904521c35022058e107a79d22481cd94cc0478af4073acedad872b3392543af29ce89173d4944"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "30440220568ff6fb360044e769d02905ae3ee24278d160a5ca91b6060eeb188c6af2273502201cc668921cb26cef253aca531ecc5d46c3af788bbac3a97e751bf811963f2465"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e1ad96f1bfee5a1818087b61a8a1a6ff99a0a2065407f405dc935d0b7bdeae370220785d8713228cab5c9bc24bf0f2c3289fc9c12cdda65c179ce2a46c7f8f54ae95"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100957fc7ea168a383e55b7a745f75419a98644158ad71cdaae10f43736a784f73302206352c5734b77888768ce264c76dc634f4c64be9594b73c440887d1dfdec98979"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402205e6eb8bb7f353c47228734fe6a5b6903cc9a1acb617ce5133c679520a88f996b0220651328d2ffc2f36284dd1bf69557b960c6d5135eccd6fda600f87dd563b891fb"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304302205662abd6f6ff0f413a45994d310c3d657bac78a1fb70f73e82da358ca6c5ba45021f7f607412527bb58d4a61fc38affadcff12dda584bfe5a8431a86a7fc627b08"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100b8845159c26ab28de85d9fe3fe391600c377f412d477b88cc040ae36ed5e78e702205b3aed13fb48a7650e64b5d64160aa17d350ad502367d83260418399a45a00d7"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022077aa118280341537b155dc7e268b0210afeac4c3b9600b9102d86d5c159da2c502205c39a3993d139369799351ab11ace33d15437f690fe99f6fd4bb82374b06bc23"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "30450221009941627074ff9edf200f0831e7a1138c76e400ce5d81c52677a405362e5b9056022007f9a8392f0290e765e12e8cd665f20c1e262c6e24a37a8b298b5944e94399e5"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100b8b16e09f965ca6f58a5d4ac427a7c9d8a5aa2ccbb727d3895ffa651bdf478f602202a8ecccea26c7068ce240649b89ca9c87f5404ad3bd9d45162532b218580e7a1"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022014b946f532fc2b94334e2bfae4033b880ce7337534a1317e7e37a35a337efd4f02206c586e8866dc274cbf05c87cb99f7ca4cfa024f22af333de7bbcbf6555171734"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402201372c5ad1476c5ea685e6c446e0f59fc4840b26477f1c33ffd3ce61ffe81707002201488c5197d6f6496fa2cee35c00b684d1d0b1b2560c4d997a52dd2c1973325c4"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100867601927ebe4188c3bf88b0832be2d08336c7619d32ccd838ff4a2dc856b052022033092c29c3ba304313f0bee2c0a056eb26187aa2bf3c10c8023642e59a4cbf0a"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100ed2f0756080edd6b85b0f997eecc6bc2b0d88aac533023b69b9a00e1b317011602205b5459d0bbe244562169419af54c91ab14c88dfa320ae58c6709a8394e3e2751"
        }
      ]
    },
    "43114:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3044022007e15ad9f225b84f7e0e45ebe2d39389fc20a334164506260e0276e18b6e756902205da894ed8cf30d8b018e03f69b67463f46cbd7575c4bef0f8529e51db0f86bd9"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402201f900fb0163542f7311ebfe33b4269caab8e0315a66d3e48116a5f94a96e2b10022050c31c3e77efa383eeb843462e6d3f95ab62d0ad594bf19f572205eed60f254e"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100b8486763a7a95769ab096313bc39933c24717f18b39ffacd28e253c4c049104e02201211b21a5fd4d46f58dd3755f8924331089be53220a41e267f9431d8fd7e644c"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402204f35fe499aac945224dfe015ccf35eda3cac70196bc7979b200ca54a931483b4022057bd20fe5883f841f54510a622a00d8143d09dcb9e215fd264ba053b978b346e"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402206b25ac471491dff8af71c0b5d8da387bb94a5a85dd2395b369453b1198131d7c022025030238778b83451dea398875ff90b08b4d378cacfc1be7910af7bfeb3eccfc"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100ef2114b94bb44835f588e4eb84dd82d658c4b599f481b94707215408f356cf8502200bb3a79e2c7b0131ec5b48914401834aa0b93424c17e9c90dac6455af58c6599"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022060b25a3b2ce80ec450c3da93b4f355d0631373c1059013347419338a74e764e6022054e30b696f317bb323d1ab2565e998a9476cbdcd8b67db8a57ca9f45de294368"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100c6df0535500f31424657e310c37a60157319609aeee74e073b2609fd6b1c134202204f7039c1bb76f0de7e1c448e01135010d436a6e2573a780eea3c896f88ea0b52"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022057e68f6b4693885fcce2e68333fe9d1f9d9ddcf8b1c342ce27c04d396a8e798102201b5e9656718840318e7fea4fed2774f549d74c0897ac249cc8c74d7d78f6df6a"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100c0dd968f27305b74f7bc7bb0bde9ec7f32812a87d513d728b68e635ed07c693a02205189d56f91761765cc4d514efcdcd8d7ce5a37bd374e596c945bf1c598d5db2f"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402204b1c78db814ee83d9d87e88f7ef89f0f1074690fa6327f4d445634b24448beb4022030ae3f55cf0530aa104eb394e444b95c87777e798ec1e1550c668cd0e0e41749"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100b51ee5a33e2e0d77d027e8e20b6d681c79c7942eaa9a6299bc67a03156b1ad4402206597d3a6bf9043b71e0225998638bd7d00c9259da941ef3bb55d4f813d75cd75"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402200c6baa9d3c3fa94044ce4350f41440ac54f2895d689470e9ae1336884b39320902201a8c2763a5d9ae2fd8ce410b0541ff707e05e179620573805d188f38bd74fa67"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220237184fbd16a92abb8b733794db859ac5544164221f476352d86e952e1433f00022045d9a3f360452425093e746cba27b6c5952749d3fa83e8595cc5d92cb9b0cd12"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100972811f2bb581f2e08482dd766627d1b318050fd3019dbc4807b7e0c02b2875002206a2760fc74f9f6195a287702debe4f88452d2be08d5098a5d25eb92be01750ca"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100d8b5c3c8fe2f7acdcdf905da6c7001e0cd6487ec062135c15b85cd933c556ed402200a399ed01b57b97d2b19b4daccb52f272c7bde9014b7d41d79b8a085f3a79d73"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ec153713441eaf40cd0204e9cbbc33cd3d7c59fb3b1477c3b53220f40119dd63022069991f07b246ea82b63414e08fe59ca35099f8785b878b1edddaebb6324554c4"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100faed02db54b862fe8e7370b228452f7f3305a1cf680915f4641f5dffd0c936f6022037931d474b10a28e0b903bc7a78973c39dace44e85ead65d9417e38c91747385"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402204a384401296a49a2b2c297353ced3bebc66bc71f0810e4145d12a153f54c947202200e137e37904c9c2b7d9c691fa7fdda1d1882f184c85772fc5667fbd7a98346c6"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022012b12f665b396623211dbf67cb78e202147da7650ec856b128d6846f41f9709c022040de446130b2ca804e07775d46cef613b6c1cb902c003c624653add94cf151e5"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3044022036df0a56d9b4661d5c9b5f5e5167c63f212029889d963a05977cca0d2a62cda80220154f8b750cd48e3277846d7775ef03d825a46e9b51cb7ddd0543dda717fd8e35"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022028a31a24e9634d9f73b8cd7b66293a8ff55d169231a4b99cf5e31104053c2b5502202b13da42fa9fda0300276deeb8201e8c7f32e8e9e91b3017da2a09a92961a26f"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3044022004ececb7a100d7bdd4496978fbc6b6b1ea2dc7500c2aaf7ebac524c4b6063c9f0220345c604f3cae26c08fd309dd92df5f82cb433e30bd8af93b50d10a9b9e3bb4dc"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402206245a83c1e904563c959f5313917e62d3c6981c908267d1ebec3fad50304dd7b02204d7e70b181c829848cfec91404ab34d78818e5b20e3f952da118114864ae1943"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022008c3624caac3a314fa907d2158a43f6214ce4bb9b7b55f1e33bca712923b6d150220455cb39c594ac5b88fcdde86c12e34db4c3e4f1fb04b654b7083416782d94697"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022025de3dc4a6c31c0ff18772802c4701dd23ea7e7cba9edd8ddbf96cca3a3938c60220472b2c75a6ee54201f9214d99fd9cf184bca8136129e00e4361017eb5c451f1a"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b9fd6e4e25d4c9fc61d82e0aff4b84323160151e9adb3016a1289e496b20aa8a02202366d365fe6fcd63e3d9d4d4523e16e6495dddc98f5ca5ce8cd2e87626ea282e"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d2fc1aea5326038a4f9ff655e45c113415b1623802894e2161dfb1b3c6b95fa002203149ec3cb392fb8f211f24886099d0dfad20c2f7a16b132df47d701509f4248b"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220374554b6d767d5c64556091b7cd0bd46b2102c4fcf0e06b7f40cc35ffb22f31302201ef02778110e2feff3e91f7735974fe853e5647c62c5931aca90734ae0f0e88f"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304502210088dcc9377339158f7d85b323e11192080669616d4ec6a91bd2d540cdd37265a70220091f6e5ba2a02f111dfaa5ddc90016bfa10fd19e35e9ccc42a9c43b42abc16f5"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100850b00604daf1e1ca872b2c64a04f0f2f09596e724d42ff637d91ae783ed08fa02202db8c9294adb852171ea28f1465e3d3f02d30ba685c1184c4ebe6508e0348e08"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022048fa80368d01103c90e027729b47294bc7dde4e8bccf29289300e2dd6586b5a102206af70d016afb13480ba6d3b14d89557e2a7f486e2d98d1e7d09fca047c853e26"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100d6356531f31daceb8e3b2793c2e6dd0e529768d13c8ecc9ff4d6f89cf574c26102203760bb9f2fc5fc4db772fbcf233923e262f00aeb25849bbc0fc4b999466f0b0a"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022044001f5a950e400513e1b6a9f20832e37417397bbcfc41af622be5e977be9a3f022014c711ebe6b30afb347cedcef5e1f738ce4a4d4840e6ea1ed2e425ec9e602869"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022007d462a64487301f91fd5ebfbe5bf3d24029f29879fdb42718db10dae8dfee700220305d315a145198911a5a2a429736764ca4dd736b56af78830afcbc70c06ef171"
        }
      ]
    },
    "8453:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100be418fe8d24c526cbeb610530571ca02ae8c6eb0199af96858ac3db97d3ce0e5022036fc1acec0f0a679ca891d0fbfe88582750566c081006bba515b6fcfc77c48f2"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30450221008fed313823073739177e4c13f2fad99e6b47de5d1f1c3a36cb1da35658ff852302202f9293fe1b8cefaf55fc5ce08e3bc1592b37ed7de44a749e1ac0d698190f2dbb"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d540310dec64783745a7693f0d32b2fdb8e202c62bb8acf4ace75dceb52cfb880220297e7fecb90d317c7ed889ab493724cce2e4c4a8e8421b0a0feb9cbce1552717"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304502210080a86d196d7ea9c8c574dcc6daa011fbb9c567894de698ca90bbbe28b82de52a022041d38d51313bc3ad1836b980ce0d214c0aa66d23255a01322d749b4de4ba61ce"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402204399b477c60f7948d3982bf2b7c42df9e23605108122f44c25b48ee5f6b3ca2e0220648f9d2981d5b0d972089924979dd6a910854b3c0034a3a66adeef389e40383c"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402205513dc9c790760a5bcc74c713551bfcade50022c5184cb349a82bb2ffe738d02022005e7f7534178dee24e1de10c1c5e3f25c834b6f191f64fae88c9c1c83afb875b"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402203d08277d359d1b89035442b8b2fdac96ffcef1d566be51a76f45ef9a5dbdb206022033fcbabcf6b64633c9dc7ea75eaea489cf0b20aae2bbbbed4feac5d930d58060"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "30440220573094a76824fbcf48f9590e4a83f1aa10898aae9e1e7143073a46a1cebc7db2022043976e109401e2a9aa383094cb3cb660550c4bebf796122001d8df044ab8dadc"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220757cccccc2037820c96d861ba58033cf5fc2a9b97fe19340006d7b3a165203a2022055f505404c8219bbf366bd2263cae3ef8327a015ec78f7ef5113ed15ee1e6434"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e4ae2632a3823a10f2566feadd22f14e5e4796bd26e28c94cd4b9507ed4365c60220253cf59daa93ef54494c825e806a81e65b378fd1d6e2a68c8caed6bfd98daad5"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402201b8930a6d2fd3e52b70112e18b18f05707b39d5a6775cd95933d93f205c869e50220597a310ea8d5afd889151db8093b62785488aedbd46fc748c46c41496800fb1d"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "304402203e35e0f1829818a96e3dbd401b584e2cc5bdffd969c656dcb267c4f7c9b8f12502204dc13a4e2d2cabd25a9402ec16d4926bf97099689f06656d72767c7c70d888d0"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402207e2cb39eb8e627f8c9c49c5e381b54ced6e48c334ded09289d4ccbb074e49bb502204eacb755085a06e98cf0a0ad19ffa60d08d28e67fa40e757b7f9dee9b38388fb"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304502210084c37d4b27a48d2c3fc4cc3692c0997a495437662c15e82a62cb6837280e6ec802207e76e35c206bad884c042e3203eb77a94e26dacd64c85554adcb4cab130c7d46"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100a2c66711ed6d50c95738914d407acb2aa84018681a683fbc8bee0eeb9d19c3b4022078295cd42089a77f02249f9338a13057b903db52090751a5dd3eab37c16f05a5"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100ae27a2ce7c21ab6b878fa87199ff74b9c280e0f71f6be84f32becd012a672aa802204f35357cc1bf66e81369288298d1aa8003bed3814ea971fe93a18b16d1955981"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100f196398d9bfa19c49c4d805abeb4a165da4d1a6fc3299ba0f4af2b8434a8d84202203a3ecaf227a071afada4a8c039d2cd333724542a29f89713ab1d48e848fe4dc6"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220394bc4e7cefd2dd37757980985b361626a4fcb2a1e03971996b19d6eed614ada022011ef0e43538e186ab4d722cccaf17e50f32f2c45a28e528b11f28560f9bace6c"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100df993534e5c45156ffa0b3d3b0f214c3b264db44999c344fdc8f34e67fd95071022012d3adc36ed86aa3b5f744e9480fb35d33eb659b3ff59d978d1aa32981102042"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022078e6e92d8413c4ed406e6b538028d7a6f85d27f465937d64f38347b62d6df5b5022008d79e9bfd916b7e887e83b3864ffc5c8ce3a3bc13ce42ed371e0afbb3392d91"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30440220060a155452e73ac0241d5931bac0883c1ba77a84840574c1a555d5a6cdfdcead02201d6e1f24586cc19db79218ce75b107d0c3f2f5936d41fd7c7601cc13c7557366"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022019697b8585ce1a047cd67b57a248e254f44c2d19fd5146c0f6f6b8cb0e7c63af02207140315222c9d8ee1fc10cb69ec22c47ec1d8c6e26c6c38064896dc13c8c0256"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "30440220297f11265bc8c5d7f88159f8e35d8ca67af5a7bc553ecc045949f76643588a360220280e3235460b4d7aa70e01543b5700bc35232cff797d4ea947cc62f1b75e5a99"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022063d1ad0bee9c6c242ce49b69aa92428397b347b3557a09758f122765109cb5230220342cc9110766eaca071721220290aa635ef71d61b742e92423e086af0fb04b59"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100d264a4e03b4278e1eb9977d811493982e10812da43eb048a95ccda01aa6c9bd102200431883689e428558ceaacdf4abfae77578087957a89c955373c04c2a28f96bc"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022049e302c1b6b56751508711de1040ec01f1d7937de6d49fbd23be661686b19b290220245d58ae8f7fe389b9b1e138ce044114f4684df84770089f2879b27c6b8b7f6d"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402203aed848b5b759f22593f9b12aa74d7f81027aff827feb3849397b62f3c4cd84b0220468ce42a6e53043d5e112d4b51f3c9c4ba3d87b5004af872d279231da7d06f88"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220580f5858797da94ae48dc32d6f8fe6b1fdf2d32a7f84438f2ff5025cda315b9402205b4f8fb5b961c20eb5d57469e0798659767caf70f7f6e38dbe9f806005693621"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220399a992df76e19aea56bf24de660f5f3920d536c3641715074c84c22bc04511902206766d299dd2e92f03175caae8a7573f92646dde7a63abbffd3effbbc0f171773"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100ba43e270b1e163f5e608e0963e01902025c15d7916b1b0e15f2efde559e89ac1022040ea3a3b2cba9bebc15ba767d43a0ea440ef9b7ae4992fd3e68dffb1f25acc9f"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100c9439cde390fbcc46cb9cad5d7abc04f7ca52cf2706185a2ed900880e7ee1cc60220785c4777b57d12ee5fc28ebd7fe19ce618031d2e0aead01452a94d83a4c4201c"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402201d58deac9bac044520c912ab926d05e399391b4adffb1a79a6eaddca7174c2a20220180b25d9491de0e732a27617f3377b30283ac0a242e2fbbabb177b3d5f417962"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402206978d529c025061fff4af0a6a8c6c5200d419c89cf77fcc1a8b567f4f49cb7a1022061b5a74e8923b8d74ebc14d8787c8f8f41984d0ffb8d3bb80a42ce4931c03992"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100fc9227cd0cf747b5ce1229cdc61a2fd2eee6c92537b9f712b3704ec51564a4fb02207f4652444666c529860464b0f022ec754ea69f7d7e157406121b7ca9a664a943"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100fcfe1848c74306e4c8ff5db66930f714b5759b71f72cc1043327a282c56bb70b022064c091ad6179bb74c1ea4427ac0b6860c8e734eaa322542d4011d24f95e22e98"
        }
      ]
    },
    "84532:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402205ceb238ae7d7e5924567075726e458a1721cb87fa860e8b93a33d20ffb5fe5c10220077f45136c66450212ae888654bfe5b88e05dcf294939601674bbed2533129a6"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220348a323febb87cb3e2e8dbee6c9126ef332e5bf9f0d246e7ff5f7f6240c44905022075b4d2e20ecb372334239b3904dceb30e8f911cc9b17223f917dbcc86b7d8cfa"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d3f21c084be69d3527ffbdfce6a3d977a89763697304e01b47d59f4d7d5841ae022042ebb0f0568f447e2a80358b6fa660994dbd6d754d0c58ada978c5b718d928d4"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100e2c01258e261b0c9c74d85742082f91451bd17dc317355c9fb6c38b57e49747f022011636cd171697b4f740e920f8763fa71838b5ee1f1559120231f089078685574"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3044022067e895b4ee5712000744ec80ae15ef156d0de8bb30225a9bd4896aaf1d5e6e9f022000c2919ff68c37a70b2fafe5dee50f10003536cc4ab0fff5a4443ca6bfedcb3f"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402204f94d7be664f87af6673d3809fbb96e63211fe5d8024a0fda0e8cb9aba00792d02203ed221855d1a88b6da3e002ab592bb3b052f54cf428f365426ceda073b7d7f1a"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100bb95fc54481be412c9dbcc591208a41a26ba817eb4335bd3717ef7c6850752db02202758a350b0a20fa0131c30916c994eea456869be69e205b7c9c3360104cb28d8"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100a092009d45e163fffb0b444c6e3d6fb65e713e215556f58fca3c2aefa4fb90ab02207f806681a01844d5b8a71adb7c4916c6328e6d3031f9452df0448b5ee89563c0"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402205e9660746916629f22d2ee192f12e3fdbe0843b4d92f7ba0c590835ba42e6adb022044493521b43807c7a788edd0d9f4eb21ca1d67838aa3f5d245806fdbdb5e372b"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402203db9e6af77b0a77eea1d33213e5f8c81b4e48b48bf68ddf6e826ece8f0768ddb02204fb60a890c19abbad6b626317143a86222d0bb74164038dd1d6bb12544e8092d"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402202db28b94aa0c8cb8669f39c1a9a5cfb34c1701cf37d1c2d3b9560a54965e55ca02202a06eff39eb12ad39f9fb6283dfa9c57e169f241bf87a52be30364a445b6c298"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3044022057d3a43498085f51999d96878364d8c98ea1259ae9e6edfd6821260efdc7626b022001ec41c69a779b54bd8870d9c80a23ee595a1fcaaf543f6dd31cd29380bdb935"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100efb329c8b90d59c714cd41077d690ae119c5a3b5b0716e528b1bf3149655371c022070222653eb2377b2e26bba4ba406dca3df4d0c43877ee7d74149e2f25acc2c1f"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022079acd9fcec5d59d470ae58b7d8245483569c5ed36fab7f3f74cf69bba748434d0220794de13f70511156246b5cc41a2492ebc49274254d49d4f68abea2344cfdd445"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "304402206d21319b7250470b8be9b72548fddda88e4f1f891353dab51d676286d08c6dae0220348602ca01ddba360ca752290e425288d5b04c6cd3b7f6b6d83558dfce037124"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100be55a55fd64c0e1fc95855798e76f3f74cae6508ec2437092e0b1c6a717114470220153cdb7d3b5e12e3afe39ca006815c7bd7915f664968e4991973eff1f7f7d621"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100c47c6aee9caeded33210b25e03722d98dd03f1919eb8ee70e1e2f08807ed1efe02204e0f7409a7782d00e7654cb2e497e486c5396688121e76b0e47dd6d6873de48c"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "304402207590816c354826f7ebf5749125f7aca9192ed6c8670b7e60378af81902e0de7a0220268d35abdb69e7fdab961b8ea8663bfc86a1febed3df38ef6fb002fa8cd2ce65"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "30440220124279da6b7983508beceff29ed465c77b4cb4cdcddbf3974598a91652f75d95022024ac9d2608d40c5b402ff84bb9d0cc691d793ee2b827147369985cc731cace16"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "30440220209e7237f3d5a4f8f67e9cc867fda32bed54bd25dcdaccd82c0c536e8c547dfd02207cf83ff175de6b879f532bde94513a0b03d5401e3626831e5b189c2406b1fe4e"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3044022020032693679d4cf6cfff7dfe3d9d771713306506f525cb480bfbbb7294c2f87402201fa3cf8f0cae0c7910a9b5f7da64d1c9d1eb2e4a96f92725fb6a82167d0cab14"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100cf95d21cda04d030f6a9565329c4c21131ab144c4c5362fb007ccd4a0ca68e040220572707e5372d45663617204bfff56dbd45e19030d9edca7f6e165e2df9732c58"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100f9e1ded6051392c91d9ebd96c7088984d60b52b9ca5ef649ea9fa7fcfeca69f302207f9c0e5fe03b60beea467b98045e183b38e08d6105079eda81c73412f7f7afb4"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402200e852f3a10a27da0959c7838ffa13918d8c040fffb004a4895176dae562becdd02207744ead3b3867520352d373089a5a2e9133e2b6cf80e73bc6a3018e3cb97b66a"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100ba75b21282dd297449500011966a4cba3dd9f7b926a0698fee629020e31bd3490220194957aa0772ca3ca64098660464eab3453a3e1fa5da928fd5c38eb0f9fe4d3a"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402206682ca8cdd3919bde89591adf3b3557a0d2250ca14090302577621262119cc180220032e6be3a31385955cbc7fd92c272918ce3837856ca861111cdae4aaa891693e"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220551ff5382c4dd8a6ff94d019b7d8ca4c4699da5256a8f8d88ccc3172e12e288202201b3e157cbda19d1faacf0786e03db74e378e29de36bdbdcb9f93c1af9a1cd167"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100923f90d7ff51a58b6078831dd51b6e1b9f558819bc4b758af0d980caa9889ee50220697637d27c55a588c60c2bd99091020836644f02731921e3dbaab04c6961f598"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100a84092287cf5a984a0e0acdd56bad30b2c2b1e0b4e2ff5ae186948753c6a0529022053ead81120cc017e09028d118854ef00ff3b7d8dfe3e478d0683847e1c2944c0"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304502210097cafe24a7eaf4c8c1a728016c463d7cd20e8e1144b065802eb6251d9520401002202951dfcb61f707b01713dff6cc28145acbc0b5c23c88c014c0f6dc63812fc9f8"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022037d7aa6dbb8a53451ecb4c6041dfa62bc627adc7ba42edc69ea33179a8254ea30220776f044efc7af128bbb0090439619a14af9e9ea968cb761a66dc98845a346f19"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100cb198982728a85c9fe6212f49568246b3305b2f75dc2a5745d63947d6413caf702200f27d60a13425e3455693a46f165dd6b3dc2c31f19b99a5a9e1fa80f67df72cd"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "30440220067fb9fd3ac8659a9696e7db4bf1232cb151b56bc8bd2290e108547277b0f4ce022053181ba8521cdf59ae0d9aeb3de4f67c6d4d3848c42cc3d2656ae32c5552c125"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e22603eeebcd353c5997deb30bd1a9849ea98a2e8f1a34502664e2cf304eeb5c022058425fded67ef3020e33235fcc2cfe4d9fb54bcdf821af4982cc84d9eee3e439"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402202225ececce8f631113f04854e0190d549c0f00a8745b4e4c88a91c46bdd12a7102205ecde00332f3b3988f4a00709d4197466b8f3c9b1f621854668138b7d2d280c7"
        }
      ]
    },
    "81457:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3044022059de8867f4c71cbd68942d33a0815c687a34559b401c8f9ea536f7636da7594f022044a0265b452c56d59ac1766e491f3af5ccedba92d7050bd5b26361690c57b604"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220267966c2680bb8bc4e11e5f36cce971f3705df698a358bc1157424d360e9c5fe02207be8dc337f700c574910190327bb22454ed5ea505b344689745ab9915b2e3b99"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100af237dbe194dd606eb4c4ea0ba3081c08987dfd20d020f31d5d82f9b3fb8726d022036a351110c01e3f70436d5b24e9dc037cc1c15a90fecc7cba7450c5e3c2d1500"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3044022058568c47e51e32af71f615409221cf4ea59f777173c0c07de6c0f3a78f376ef50220481841dac91e7570f86de6f50b92bfe4202d0fd1471881c4e440095723769121"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402200f0956ea594297744f4172c187a937c97f8616a07b2f90a450968aac091c805e0220290cd844be0bda0f5b89c6bf4c36ab045570c6fb3dfd7e3d53c863ff585c9dee"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100d28d3090040571c6ebb43f3c2004947ebc93ff5b2570e11cec9aa929cab1bd59022038bf48bada25145de3a20d31559e356096954b49b3d95c61539f4191b0f3895f"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022038f3afd661023a0ad536236314f045447c0562bf2b5c9c91e3276fb86603114802201d55a2b564f0309fbea9ee54751e0d3545ecb78c4c60c130e34b0ad3e22d6331"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402202c9b4beea5271aed5353b41fe5656887577bea31fd9f50585ae38afafdfd8ddf02207325fc56931c91863bb862708de2c1d03b4ef870874b8d5ae0bb96c257d6051e"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402205ff928098d8370cd6a22c178ca0e671e594d9e2bf2bd96da1ac03c5d4b9697c50220243871ca02532d058f0a754e8cc255bdb4cbfb383360fc23a14597dc8bbde47b"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100a5ac59efdf76cd8aee6d58e43053f39ee93c07b546067428ce4cc7eac6b7fea002200c8afd7bfca738f32adfa5f4b599bc079cf326e372202d6b5117784ca45b7f49"
        }
      ]
    },
    "56:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "30450221008ca7069d4bfe28e696182e615d80653533684c3a60a47cb9866fd00dafa0698102202758b4b80484f73584345367167cab655aad8be09051ca695f2a07c7900b6e1e"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "304402200ec2c38d3bf7fbb9bceca392237e6c681670f4d244cc2a07aef68b8ff8520bd202205a09e80f9fc667a0e20430a6eb426a63797ccb4fb6daf9e339b8dc91d7cd840d"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "3045022100ed35d6e643ef1337e5b0358fe25f1a176aec125880d2f11a3779f0ce2be421f2022075e6cae27a4d1ab55aeb3e2f95e1e1964615775ea63c4cce72ca6a2996efe3f4"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3045022100c9a3bacd0653f35ccfd8483dda1be1f240ef3829af195fd978c2cb78fe8d224f0220303db61d77bc3e632e2c8a8529177091c58bb7376658a3ee8f73df7e0bab2134"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100d4d84a41e55f141acdfbc5ba7169bc96eb48b4323ad3f302259d4bc102caf3270220024e701e69719a3fb143411db1a59e64441318042235251552ae394d086f9d47"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100af6dc540129745fc4a5f5d37d7a2ee8185aa8bab4e9500b91a6ead4f8b7e11e1022055ced07e0790c1595d3929b10cf0850d0b3721c4f6c016f1d4c6d84dc6d479cf"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304502210087b92858f43caebadf20ed8741da081c0ffcf34676eb81ae4338ea2328fb26fd022035c215d867684139a6720b4fe15d2e77272a0873074823bf7cd48a07ec9550b6"
        }
      ]
    },
    "56:0x1e38eff998df9d3669e32f4ff400031385bf6362:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "30440220461a9ba62577bf43ea41d862cec0764de9389c0a601bfd69940565b19b2bbc3502202d7e2b88f2e6ae6cdabec4de8ef587bcbcadbb3ce0f6904f15accd9be866d3fa"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100faa5b3f2b1b0a7f74d4500ee44479ed1d91124afaf33ff35311ad0e6624276ce0220304b5380d2b3f47be9da6a3296f5c18b4dccc8b161997610aaee3b4357f5c5d3"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "304502210090eaf9ebbe2b2cde688ad73ba2d63257fcc44b3771fe61258157b0f3ab6a6f00022062e74ac8a640cba37062e88bf00b5f612039bc74aa5e3fc3f69ea2f5e412686e"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "30440220012c3602f5dade51c41c326c551858f4dab6ecfc2428920e20322e60c6706de10220320494116238f04ab59ee7117222c50905acaa0683d842829062e8b1fd3e6b69"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100c50e5a8d24dd9e2ea4186d810818b5c23cb3c26230481da4429cc18e335938a502200f889440fa8f18e3121027d270de1d5fe60c5c607607dc05bf5552972d684ca8"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100c84761e0f0df83ca931cea77a4336fc93e6265918da34f78bf948381aeb901da022021b63fe2bc8cadcd36928b2f8f15ce0fb4fc13e101cae749102b603203241dee"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304402203737e60321ad30f5a865ab29494545893c6339629cc2aca3f0d4042f9a0ad87c022062bbcb34c0210e5c1cdc6a08791b73fbfda35a516dd94967fae3dc5482e6e0cc"
        }
      ]
    },
    "56:0x1e38eff998df9d3669e32f4ff400031385bf6362:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100d6bc531ec620b3a2464dd2a78bf13fec64c39e9577cc7dacdc09869fdff447490220032a6299809fc13be25d6778c365dfe8a2441f78c6d9dc0a349f2f9ebc57c141"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100d10b34ea91dfc4ee22ffe5337bc8131a7f3eb21851317cd1a4f0f4499e0b7590022023b39908f6fd615b88ce59fb335fcc78c1aa1dfc784657128593aff716328c54"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "3045022100a319971b510f9dfd4d39a67df0b184e7842096829eea2bde03f4d137831903bc02202a1f8343a2ce5498cad84d2fab95e6f75b72670376f74050583460edcd5e9f53"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "30440220261e47b2e8933c6331e77fd0f3c1554d8011c749ee955c0bf1f8dd09fab53a910220190ee7f88fb52067d77b6201dcd0af870803dc540e45f98189a5c46307e5d7ae"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30440220407b148dbcb9d491e1403abd308b35189debec6017959558ff1997f39d9b466e02203b7d2ff8a48fe63e411d4b01b4039d2d524f4406c77634a0d0d107f2434c46cc"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304502210092cf643a2dc0ef137b257f2927bda814c4ea41e674c6e92a9348c94ea5cdd38402200e87cf68a0c454c5dca5cafb49cbfe3057afec77676a646a8e8d545d5b5aac94"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3045022100b126627250c5a18b36529103d398f5f5f86bd07f97979d481486ae0bb7bc87ea02207664b33b6f13a7614bd821a76cb19dc2c8f21e4ae00575917b3d7892a4da00f3"
        }
      ]
    },
    "56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3045022100cdd6ed9272614ffdedb2b2aa22418386928f1174a6214451d67b82c06b637d4102205ee814ca52cfbdab011e337727cfe91fa272b98246ecbfb1683bfc0de3086efc"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3044022056e3fdb59c9ece3d411d03963edfcb9a186ccb753b4e984366e7ca6baa99b38902206a7267e31543659ba3bf8b796edec2d1c6f174a810b89862e43541f94b191eca"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100a4cc77374944e947748dd36408f48f43a94e67436231fad62191554d1ea5ff0e022001baa4fc0587af310bebe1c0044d7b4280bb5537192736fa3805584c735a6710"
        },
        {
          format: "raw",
          label: "Maker asset address",
          path: "makerAsset",
          signature: "30440220770b731ffb6091493ce2fcdb4163ad872add409a9c66e88e29b0d7a82b0ee79c02201e0130c1841c484e816b9f9ff3694eea3601e1569c1ddb87319b08d86e9823d5"
        },
        {
          format: "raw",
          label: "Taker asset address",
          path: "takerAsset",
          signature: "304502210094b700c3383bf0d8740e09d23dac120addc1c21029746f672d8f8c8b3a2a2995022008b5d3af862f7fb0510321cd9ae4f7172ab3b347f6556b3da79e2a95950ff34b"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "304402202dafdefb2181e5bbdf5816fc710400bae0846bc08dfc389ef8008048228e2fd0022002b89786ea578488cf6c6b751dac0c13dd6c2c57c8d6bb0fcb47a28d2b07b1b6"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "304402204c27aac1c07e8bde8a998bf06acd5eaf40e874a9b128a4f19ee8c39ce45c9cbe0220380d9438d10ce81f7545f3de8530a19c1eda78e4683fc2145b9715eb260f1d66"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100e7f19c15b49e6f40eddd2c8a24d8c55e9224262aa0b856a413f842fc5c0fc7d00220341e5eaf45d8335bb6143768b1c961b6c7e97897bda5ef485457020661ac3ae3"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "3045022100e36cd43f82fc0f99ec2770a26b245f6af13623cee69670d68dd696ff76d4630e02202057a0dd1faee909037429ba7489ccf3891a38d29a4da04648441105c1e89048"
        }
      ]
    },
    "56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "3044022045bb3ce0d61f428537754555a0d69cfc5554de2dd58c1c5cc7ae81abe073b1df022039ba8d7e1230c3851fc08db58cda6222c420dce4b8cf96725891906fc5f7539b"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3044022020d30ebe13aa1235ea25dcc247a1c494a6aa2ac4f121aadc3beb874b9de4b75e022078efc82c2343d6165960fc252d10313550b6d9d1faeb6f2ff611c288fb53f364"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100ee126c98d8ad5b000090d6c16131709618d803878a72ceb1f58f2b11b2e52324022076403ce3d181511afc9b59b3f4a0ce4de9ee76dd60c78eb61660d623294d4070"
        },
        {
          format: "raw",
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100ed1f432fe0c33307e397f846970f7de0fc18098f3d5b4cc1a25844f75dbbfb9902204075ef8e6d6dae438dac2a7e3aace3e27bc7c67fe22728395f92888e68361f20"
        },
        {
          format: "raw",
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "3044022022be34e598b158445f7ff6a5565b04627b61789339aa956b03f5c8dcb81e0ca102201b970d57742618204906414d7d23dc42e9e566776e7bda9060bcde335817a8ce"
        },
        {
          format: "raw",
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "304402203ec8a77927b84388d5a0ba1bb0bfa38fcb862b8c43d988bbbbccbd547a4ae38e022002f2f736d3cfbf42829b750af704323f29b1eedcbde789c49052521ec47bafee"
        },
        {
          format: "raw",
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "304402205defad5bc1514f254cece6e8dfbfe3b68c3818bef6d4268b40c59858a6a2187502206767bb96c040e523dfd88724a0ce4b4f6bde73c02a286772f2a73c973dab0bab"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "3045022100a273a21625a130728e0448f53a047d50867a9ba5e4a285d7e06d98fb3bd655c2022061e93ce13cedef0ebe9bc9340b988d0fc7353e99e2ec28b77102a14b3a129479"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "3045022100b74529d5cab0055f80732bcf7864f03db98bb9f779fa56171f3faafdfee2719e0220757505e2ba5df6184002e921f678f9f5bb073197652a45d86c6edf003067ce2c"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100c14e1f90619be9cc92da927b1c908a18133b043e138d908bf81117e1fc73fe000220503047ae5e75ee53c0ed60601644ec09f430c613edc6ec72cdae4021d29438ce"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402201096ca9ff9b886a77fcbc7fdc8ddfc0f42a9c8e7fccb783581ca3abc75ba61dd0220191d21eed8b4eed56975b580832a8b1891a5b674fe1a0e5d7314b7b6486d7104"
        }
      ]
    },
    "56:0x111111111117dc0aa78b770fa6a738034120c302:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit 1INCH Token transfers",
        signature: "3045022100aa4cd645694179ca07ae32f7b9e940ef3268cab34bb2a67d4c4f31d0ccac76be02201a98adc704ff642bae02e8566470b83e98f95a70ece9a4589d1e7c865ffbe06a"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "30440220379cbc9fde04d67f3bb79f0559aa097ac10cc5f3581ad5ee7b2d32babc95298202207e0fd82eef66dec1f39ebff087ef36affa96e6d70c15a3ed57f820d08a11111c"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402204a8c834e5fcbc352bddfc02f932f2a068d3fdb134caa710ea472a37f1e8e3a1d022064452eb834e0ef14bdcb574c68c120d950a04af9062a4333d886ec6919dadbea"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100fc0a3ef2dd46f2c4dd31fce3f40facc37740a38f2c1f65bfa408afe3e07a78d502202b9ef22926fc5f3999eadfd1beac7bf36a00b3d18e13939c3a97a8be8e282823"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402204279a86f4d8a7268e5ef69cbf3f15294837288c32b64e03170b13d85812cde85022020e79e9afdeac2bd931bedd8c1eddc45a6e38659e04eb53b91c3c68b141d2de6"
        }
      ]
    },
    "56:0x7e624fa0e1c4abfd309cc15719b7e2580887f570:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit PolkastarterToken transfers",
        signature: "3044022070d11eddf5a69c484c2db1d472abcaf3a4a3c5c9bb821b7b5adcf24ca658110a0220227670ef7ced8b0f603bc997967b67b12ba6a1d8022b29e4292d8b6aad14cf05"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "304402207f0fe68dc0d1b965726ed17a6f4eeb8a5643387dae6afd4d64a10ec1e5dafbda02200d4ea50dc2c96a73d8e2b868414ee83d8003c21fa5399279704756803e1ede10"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402202bba41fde065250b92e68333ca0abf62e596be683f777a70e68ede89bb72ea2c02202a8c58eeb203db1c42559234a8a6f271fa36c1a14762ae84d88721d741978bf8"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "30440220377b86bf7e220a1885ba2599ac279d3c446cbc83f41576c4740ed1222adb59a10220121cdec7b08c496dc2843a91834fd50e21efef40c81f0a718edfb602cd411ad3"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100d8cca3767efec9db06d52a0aca60f4847c451d5d78e3711679422c6d9e089d52022048fe050ffa74d1be563edab0989a9d56722276e177e7be6b7cb44d95bd0eea51"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022039764daffb73a12d21ffa77c263d071d00bc1dc310ce4cc9060c5330730709820220123a0e20ffc1cbcbc9537556ad29c04ec8e19dde7e7eea47afdee360fe09d242"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "304402205581571cf4a3136222263b4f00b4d4c055a100b63bd1f7f04d09a0133ec9b38002203a7c8947be3075a7990173d5ca0ecd5daea6f8ecad5cdb23d1fdaec8c3648e6d"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "30450221008304191a0fda5fd9496075030b7ec7d0140b3fc5f6428dbfa08bc0b0b99a8b0102206e2b72f9fb1ad69797b27b49353aad994a3cf4078877731cb7edbe7bba805fd0"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402204cc4c139386164490893d3d2f2933effed82ed5daa0e0ee4d23ce9176705441202202ba382b1639ae0826ee0bff9cce3ef2c7943f32c45ff4584bd55b3a49b0f4c95"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100d0a789a3e81551d55a580658635422970c89e1dc1d50c2e3e3eede6c8f592bfa02201b0d335aba72fdaf137a8ca9eb49eb7782f7bc0992ea269fc19dc890d66435b0"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "304402206be53d7a3bdafd6e4bdb86e3d1b3767900986bdd6a10d6075963c21b4ab0992e02201220cd9023788f36704f3b62fca65de422605ba68b833964c0792ec719ba837e"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022026ab43885c98f433ad1424f572718fbd548d56b2c02354d512a0b5e4466f4c750220677b8d7ee647b4b483a66274adf2afdae3bff55edbfcb5d005d20a5ae3026228"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100bf7fb026be19e1f6392dad6dedd5f324aeb03e14d9caaddc86a977c231b3f90b022008310450a6b7229c1ecf0a688bcd43b588a471a69e4056798c444b9d98935b38"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402207bb62be1ddff68705f7fbe6c622ba79fdc608b10f02a157ae4c7c2623c696d1d02201b6ee7553588ddec6c02690ecf2f246de293db422510d662521f9b24ea806e16"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022018cd297b191edc23f55cf6a993288ffdb3b67502bcfd06ece8fb71e88cf5dbe702201e53c252a6584834c51c96cd7c571048ce54a4699e0d8cfc9b81fb43a533a532"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30450221008a60ed50f831e181cefb6130f916f614bebcd37418de1836c20f9ef7dc21038c0220623287297f9149ffa69dd2462ecebc0197ad90b8e0895a9430f1573334c2bc17"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100feee7fef4693c181917b5aaebcd8d8933c9f7522ac5eebb13a8612c4eefae23b0220498b1180915442e73ac2770f63df86a781c645356b5218241a265770501ed4a1"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100a951f388b18ed053e69fea412e90e01c12bb5e1e4c20beaa29c2a94e871d667202204702861a2921c92a11f60a6e7ea6a82d1f67a254ef8ae89aa80376ea0a1c7d63"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100dd21a591bf52a2fcd8a87e63e1f920455b87e71b124cd2613371b2421cc64d4d02202ab80b9b2cb4c647123fd967e133b33eef3eb685d6d9a8028427501fa2db4a32"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "30440220132d2faae56a13f79026572cb9e11e8dabcd3168a09912b63c50c0e1cbfdb13602203f570c5a92ab0a7dd4ed570b2abaf0fc03fde1156a44f1a94b8b8ff4a759dba6"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3045022100960422217afa9fdd640240ce7e5be69848669bc6d63e92615f7dee6c0a4a42be02205abdfaf049823bb5c97bae109f73987713cbedcfd7019ee5a930106df816b900"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022051c30857bcbd3f70280d7c896a016da0ad49dff1722d25ca0cf3f0acd0703bd20220105ef2f7e1710d0f89e2e5117c28a305923127435c12b5ea1f30277ce7b230bd"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402207d066e3aed9d224ed6bf1e6c117ce57f8304dd482bd195cb0c9b0f523bbee2e20220302301f56651a11a23e9fe700b15accef9d6bb62705e996b27f1c834d8bfff25"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402207b334b72b4bfb2fa0f2e8f25cb8e135ad053ff9ef6b4ae346c9a04d8d87b0f70022035894d7ce9f94163b555891f830c97c33df6d460a105809d7d6258cac611a753"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402204713b5837980a38dcae6653c7428873511595be0ec8783fb7c73f45e55d358b7022000b2d46830038f826435903e6599a8240f8387a7c2d2c48a7e953f8ad95d9035"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100cb26252dfeff8e4ebbdb94bb011231ef72866cdfeb42190bc5f0886e4103b1f702202bc251b7a6aa3ff433d0704e65f42d7abd75ef23df6d2369126e0f2476b2b670"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100dce11b4a8cfc9847bdfaa3e0f38ef3632f57e5188177f4c17dd8a531bff652e50220050c59b5f67c0d4f59ba37b2e0f578915a44ef055693d92aca43c0c2570d79cd"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022001fedbc154eed1d9a1628dfa85eeddd9abb91b18d49a59e8c7fb3c4cc55f1ba4022042ba188fe844feb40d5bccce05c1296fc9acb19f92331f592413bec294926940"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402201bc1cfe7677b63fe456cb3a78ff032122d9353af812c68a07052dd8b63a62a73022079c4a25e1a1d3a3d3630490174a9adbed8351488c98b7e6e1b055a4600d38df6"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100d3e01837488659951622a0b8edeeb4d7571dd05e47e8c771f95fd07381dfd1d4022054a0469a833d71c17a02b68f08b77b84f2c957b0556a56c4af5810ce61388851"
        }
      ]
    },
    "56:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402203d2fd78eec8d725bfb69586e5d588174860d2e962b0659440d8c6f2a0cef6611022059dc7fe99f8fd6f89a15b5534c71e7571c485fe9f3d21d0a5d2b0437f92186c2"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100edef138680959b2ea2ba9c336988fe47c4e6078b19a94e64d53a80cc654bf3c002205a9a78c89421cd27eaba1b07c9beb47eac621396c19d79ba02c5d6be277a0401"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100a545dc35ecd2edd288aa9446f760bbde00722a546a5e6b966532d01711dd97e202204daddd8b0c7502ff95fad0d99655ace2d946d47f322fe2baabf789c718de1f68"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100c809271f4717f853c03f6fc3ce796d046fc330bfedccc3e90200741b00fcc3dd022002ec64e734acde7d811b528c750ac8ad7d44e4161e6eb5524318c643941378ed"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100dc22632e95c660cff99bc1d6b21ab87ac471a323c2036b7ac7c01326b426add102207770c2e0b4985609d554af42b89f0579547cb6225d2e5ef0ed2eedb6cabadcc3"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402201bdfb08bdfcfb3587de64c57981f6970d7eb2aba5ac2680282a154dfe8a2b7ee0220145fe0ddc50ef7754a82c469899ac70e07ef9b3fe5b076b29fed2a0c6b07ebf8"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100c62059c35d7644eaa5fde91b0e7e110273229d01dcb8aec96afc13d01f404f220220674b885b86399f953f824185d70df46e92142518a8f4950ed2d7ed54af34f677"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100e5bf376e10e5f64a253d43489f38b8eb4fb2135c04078709e90c8ca49e20b9a7022078e48814760f2df95dc8d45d3c7a438674db223f6b727828c2784fc2bb2eaf29"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e62d51d254f6d76c0333cef9ed6af8dff443b4879ece411f18b408e24c65b40302207cf8df390dbfa6a0997047d97fd57eab184210e0819addff6a3e91fab8f7922a"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402201978d2f31b9d02c7f067168c42ba32cfa1cf8cce4eb588b5d1053b99be9548920220536e7ece1883045319cdd13eb7e7ca27306972c1657186ae8d85f3d3d2100a20"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022026254c5b6903c27b62b2f0678ba4d99e853842af501bce7d6cce9e01448d76bf0220517550421f2c67d7486fafbcba486513287cc3797d45cca7cf0c3d904c598f7c"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "30440220486dac6101905d78433c0ae31566e65cda9e603f0cbe06f8d6cb86f0ac402d3f0220769a9107e0c963f0d22222ba7ff46c39137f533f66e79723c7cba1fcfd0c2983"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100b51b1b32763a66fe56cccc1f01ec9a197b67aa29ca2a6cfc41689cf041c049370220224e9117db58c6aabe79f9b1d0b5239da6ee82a2c273d22526cdb15d26f3be56"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402203ce7919144ad501982f67d07e5f14ac966643ebd85306bfd2ed01a0b195bee6b02207ec812a2d0bab9ed1b9a83f669a291ee0571249950a8f0be1164af9da79780a3"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100923483245a9d17b8143664ad01773c26b7b72cc9b04c5e7f452c8a84995b4e6302203d49025be372f1d0b456e3ffdee962f398feec6f9e241cb1378fc0a4ed88eeb6"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100e72714fb3004f389173e1e396dfb953163ebd1f8427e390e6b6787cfd02ef54902207d4ea7e366753356e0c4d9ef1c124f20636c0b76a2040d51abe29aca5781611d"
      },
      fields: [
        {
          format: "raw",
          label: "Spender",
          path: "spender",
          signature: "3044022066ee1bb3c08d1c38278427508027778ab802d61f09023c8549977282d884a5bb022048bb50f5631e49354a7bf63f5801c1402eefed99d2b74e775854c64a77b2283f"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022052dcf2e649e98b1725820985c6bd6719104de0819eb65d3920d250932ef760160220699566255cfe8070e9462c15b78f6913f51ba3d8dcd653c848df9af8f21e0c9b"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100a0789ec1c91a3566adc242405d7ddfb2ae006c33d31a76021236e37d0fd52fb6022010e844f0badd27df3772c8318c66d76ee58474064d348c72b75c159739a3eba4"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100ab855bf0749b4448a1e203f8ca8318c29e6095ee95be36f5de695e0e24c04c3302203863023f13aaae6bfae39bd1993bc058be037a4e1b9ecaef91754365360512d8"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "304502210094cb4047f854cc88fc265ba3d928340a51e09551555869ed813879b731752849022056966f3ed375253d7994005290014be01033e032e3e6d37ed3b34bd2be7cbca5"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100bd5ce8b79974823bdb9a7188b2d300ab5ac346578b0c73b10fdb0ee98d68a14302207f405deda89efed5b9aef4d2911a90481770e48db7a4ef02a209da55bb750f85"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3044022069e268580149f3806e0fbe3cd09b54fddf16805ca901de001a115ad2330eeab9022051e808755f106f96ced721d1e510cf6dedd341759a0e362b18e747ff54982c69"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402204a9c020d1fdee5156097f946327eb4977e5d2e9208b25dcb90e7b383fbdce26402204378adef26d05e8287c328ef2d09651b9b4c1b26cdebbcf776286847ee2f4913"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402202f047262a9e84adb2bb2f6fb828cc167dd592deace7d8c9385ddb64597802b9a0220590e85daa61a809716195347e1a29298a1bc6de391929af407024d45aae2e33c"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022020a162731ec93ee7f98027a5feb5e03807818be464b00affa750a4558a99f98102202578eb63dadc6b18743a96ee393384ef40fdae8029941931a84b039c19c933c8"
      },
      fields: [
        {
          format: "raw",
          label: "Spender",
          path: "spender",
          signature: "3044022070bcfabeb93910982344547495147294072e624f0134a0eaa195e73f0a1b7268022030ac8cdac2076a43b304ba29cedf90674147000b3b37ed9b28ca1348d679e92d"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402204fe219dbaa70e9555537f1c6f9f24419290753c997f9d7cc499bbfc06e90b072022050bc100f4244a05d7ea3e8a6f17e47532593bc562bd3130223b71ad57b8b7359"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220606aee893e8cf3e24354bcb78c6f310a8f5fc39fe6f2d725cccc9a915859caa302200f78ca9fbd05ac11c6aa1fecdcb255c9ece8155aa54157fbe014170b5accf2a2"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022042283598f742fa814e03f3ca05ec7c7eb7142de7617c51bae5b6fdbf61b4fcb3022057f93761c10ee4c30fe121617f5c788058a654419bb9bfe3f48e22cb95d1ba3c"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022019e7e56c524b99c53f1607b101b86c4f935b3e9fa133c523e431c308846e7456022069900dc4f34e164c100f9c052f082139cf6d918b72f503d93b99381d676e0ffe"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100d45ba12fa943bc8c48a5085d4241c964a1f65823ed3b5f7a288c6885fc0b12e402207b5310e046215438da64cb370514f642d097030575a9497cb7cb82ef393d09c3"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100da37ad4b694bc7ee59f0dfe9f37ce8100b2fbd1d22fe866ab90fcb5a75c9071a02203927e28b4df2e583c70f6e15272ca813ffe4d3971afab27ef3f403730aa48c59"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022020be4365768b961d019a3bd11f3c72b52b093252d8b0c692ef03dcfd9f8d648102203a793e8cae971cf3fbd53518d0c2b77b15417657ca2c3b0bb24754c70c372574"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "30440220502f2785c8304a83367412fdc3344b29aa1f19aec18ae946c6d5da3b4752b6b902202a672effe830db5af3817536582af5e4937806e58bacf1730c26476a5c08e332"
        }
      ]
    },
    "42220:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402206a03800c227fead9cf18053d5cd9f282f1c86122c257075589094526f02adea00220193bd64c8d0c04045f8cb3367da07adc0121c9b35a30895b62333e1ff58d00a2"
      },
      fields: [
        {
          format: "raw",
          label: "Spender",
          path: "spender",
          signature: "30440220731aff0ad876d81442c75102cb83fff4139d74cd9cbed9f31850a7f1a0fc643602201fd344d75222883622706ea73e0d2c9067cd1f744f17ba716cf37e04bf5eed28"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220272032cf8eec500a5f25890861d4c513fb19a5384622628c4cd5e26442bb0df702206dbe3ecc9f908eafb027658f9e11d8b87e7b67ed50b30f4c314f076385e8f1c9"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30440220689a2b7d34b81d7ec33df240731ac7a98ceca867180d10d6358b33c8ea8eccc8022039ca9f9bdaf22b15eb562b78ac723327c7639d6bd7dfab22c6b9acd906776f67"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304502210086eea834b3ae54fa55939fabcacbabe0d0a623bc4d8b9c31a76cd964c8ff8a6b02207e4c5e453385952e9441ed6a9eb562d10f7b255f7ac5485ff05a39e6997a1b50"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3044022001ed942f8764c396a2a72be95e1ede5e2a4d9ca30ff6a46b9ebcf2cce6760f3c022036b39587979d6bb05ebfcc8f6c61c4af383a0b6b9067b6e43622f60e33308260"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100f4707993b6c3ad2702ca775cade1ff69bd4f6dac7ee3e6cfee9eef71f9088f900220189696a9ae7371fd16cda5147d6f282d416d2956651ac0361ca1fc0d60504d6e"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100c3b0891248431134809b5e5383aacf261eb56018fff48dcbbd043e5551888ee702207b1b8ce28cba1aefa9a6c95821346422b466b05ad4784b5461afb874dc0fbd9b"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402203640de985c876c17d297a73ba553aa55e517ea36838d9fd235c1b94f9a805c3302204e1e64b95f27416bb1dc4c823ecf9f1bc4e25791b6c7338035f58ab8fae59170"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100df2481af3d60f76831590012186282dec18c40ef18c25c47c60767d9c1b560a602206d48e4ebfba892c333a289cf2ab49db38fc30304240578e79a54981d8dbb0ee5"
        }
      ]
    },
    "1:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100e1f7e1db3081ebad48f85b6443892986b2048bde4dcc8e7be4c926923ef6de0a02203d042c0caf4ba241f1a9715ab2e18bd6d581d8383a5ac41b9e29e2fa247ea21e"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "304502210084df0994694c4f28ce49b11ca4d04c961e50a723393e1e62e7fa62f3460649340220489ea716160dadd85eeca97e8dd42945c95e5d5b02e6b1abc0d6292049783e72"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "304402207f1bad60a614c6a36c31aabfa5d86ef58ec1e5e055e78577972fff4254a59e3f02202261833b5799c72693ff6084e5f9a39f491eba89cd755a6c348ddba26e2e4f51"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3045022100a59f82153d54ee2635c15adcc070f2d32be5ca8e1724442fcf9385aa1350a14402203030da0cc46b5ce7f71de8b52b8965fa90c795b39dda58d7291ac653b92389ee"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30450221008683bd04cbf3b1f992a57fb1fdb3be96fb932ddf3a86db8b873dd4716d6d02b7022055c2f80fd063f33c958676eb4c8c7e915d6e0538dcd05d6cd94cafe05c229adb"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100d3bca016cc8776987b71a08359baf39378703f92e443e657a058fddcdcea100d02207621b441d4c79236a666f4ebd163e9f4f34a6ce33f5ae14ae468a311e81584a2"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3045022100c23f20e9c3cea7e06b6642635884b11ba3653805327413f0e779dd2148faae3b02206c613e4f4470527b6ef0304b09396ec915045116607901d1c2337b5f04b87634"
        }
      ]
    },
    "1:0x119c71d3bbac22029622cbaec24854d3d32d2828:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100ea11ec08e4ee7178eb6121d603d00e6c6e62d0d94e6d4098abc22d709c47b5d7022041c0c9a56c14a783c02a8ff358b0162ac1f743c3f8fbfe8726d125d041a55a04"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3044022062d5d76cb58f4b20f6516df1154c983610b57fa7a2d65be91915012075ccf19902201b5b86649fceb99cab590143133b535ac0455505fd70e94ccc5d6712bf1cc963"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "30450221009ae13c9db1fab6622b474e80366dea12be8f03bcca320f0b9ab29bc8d4afe0c902205edfa3683c639e6989dd4b00a3c37fa91495ce95155b65edce43a15ef9d6fe79"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3045022100b281ebbc426a329301a9b2962bc5ad0a09b4d7fa585763a1ed876b689246e23802203ca2a7452d2b410b4fb67caaaa1d4ab70a7073b34c2334352acaadc5e3da3d09"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3044022009e7512395741e5e54f9c6d9086585deecf1b993f1309b67cb40c4fbf172412702205324dbe94ef03a58972eff71df312723ad8364fe42a226b24931561d6c95dbcb"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "30440220721c35ae89f778131dfe9e1ea71e5d553f90009113e39ec379b16e910521df1402207fd8dc0be2cc10e8f2e95cf080df6cbbe57388b0921931d0edcc25a01ba08db6"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3045022100a372339b731529e6315864744dae1826fc136eb899925e46826faeaf6ad5b10f022062ced218ac80dbb3bf8d25203de72c7d06ee20e39115bde37de3f3a50e9f1868"
        }
      ]
    },
    "1:0x119c71d3bbac22029622cbaec24854d3d32d2828:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100f2bc7298d431b6f742100623febe6824eea30e37b2d89093c9cfa933a053878102207332846b67bfdde820103d7d775c51a1c2b0fcaf48f2a9a19cad9364e12fde13"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "304402202c13c39d9be77721727b3920ecf3e856503d952caf07a74496984b6bac252567022057cbbabfff5bf7a00ca18d4ff9ecb0c5215d779a4750daa96fd3a257838d7907"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "3044022062acb004a7d9308bdd0cfb127fecd2f39410c87470753a872bfb3b3e4514486702200952fa8a3152414ec408413352fa03600d089c8a88f541930abb9d97a6e534ae"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "304502210097eb2d5a8cd54748c6f228ace568ff742bc4d87bf01b601580c342fe5ec1763902206ff4c683bf4cf5f6a92b9663e341a1bc5d06ff91b4ba963f4df534aaf249be04"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100ff758c9dae36b78fefa634bc720c78f0ab38f5f38cdd2db5d40c6fa98640ca5a02201768ccd8e22e396f0c0022bab161158b8ef679782fb9eda7c2ee966c23856b3b"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022022b529a549bba76a32946faab986a40af90c92e355ce9600db325d3ca37bb03902200118dac2a9a9d7504870d210fdc4a3993c438467bc0d17e02348dcec18e13151"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3045022100d116efa90828b9a139cb8b54c3665db8e58cc2af118bab85042705b6f0cf997a022006429fe8762194100330515341dfdca029e5284ca44f57d50e8c1d8cecdf81e7"
        }
      ]
    },
    "1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:08c2ba593f6e0e80b8fd2bb1da6923135c173094f9cb6ecdea6ea144": {
      contractName: {
        label: "DeGate Withdrawal",
        signature: "30440220089127ef62e67a3d075a2c0d645c06ce98e6cd373bca7ac89217b2919d718b9902202b4fc6a5488200db6a51ef2193febf8023770e44d361a5c85907c1f6864e3ae4"
      },
      fields: [
        {
          format: "raw",
          label: "Owner",
          path: "owner",
          signature: "304502210085a5f94d365f90e93bced9bfdea6f3a762abfeec8d77b070905e46368f0db7970220042075c4a50ea30b63308a3d4ef5cd72703c7447d4d296e3fc90e3872aa54259"
        },
        {
          format: "raw",
          label: "AccountID",
          path: "accountID",
          signature: "30450221008d1561da0d5464ae0173b2a6ab1fb7c9fadec3429b9d068f464062cda6a721840220169a240b04d50866f8250860c82b01e664d4bb1262f7782a454d3341312d7831"
        },
        {
          format: "raw",
          label: "TokenID",
          path: "tokenID",
          signature: "304402203da24c741ee39f2c353d6e38386af0ad7b38a2568663f562e084247b618410b702205054378fd255b5077310009af3ce2507c29f5c3a8b651b64519982ed502b4090"
        },
        {
          format: "raw",
          label: "Amount",
          path: "amount",
          signature: "3045022100c2d5d4aeed590ec6bd2116f83eb334023d5bf01374700e49d73af5875059c0c10220286ce6cc46a4d5e9ce71462b9431bb69c55f060a65fbdb2728b526cbecec0046"
        },
        {
          format: "raw",
          label: "FeeTokenID",
          path: "feeTokenID",
          signature: "3045022100e50a065542008fa67af23b0091e5962e89deca43cc4cfa55fdea4ba86873846d02204d3ef27ca382008596cf584a8169a925a9cc4608ba16fc4673cdc539dd85a29a"
        },
        {
          format: "raw",
          label: "MaxFee",
          path: "maxFee",
          signature: "3045022100a79503f04eafa7afb97bce7df13dc697d7ad03532be221da27d596ba5c4f9be502205ae99bd27a8f1c92cf78fec9952845342ed93625d07ef878043af48eaaa4b093"
        },
        {
          format: "raw",
          label: "To",
          path: "to",
          signature: "3045022100c689e1d30113b842b9fc468cc4e26308a6df924818b9fd89431627c8a42c57af02200225d6cef4578c9e4c46c48afe459a7037aedbfda03195ad0252cba5b41b502c"
        },
        {
          format: "raw",
          label: "MinGas",
          path: "minGas",
          signature: "30440220464c332bf0455c61102f4884218190994094d7c9808411c00fa6fd6ef5763cc002202e3324eaa0bac01d96738a8a9ffcf531ab59aa03911f2031182d8b9de97a4f06"
        },
        {
          format: "raw",
          label: "ValidUntil",
          path: "validUntil",
          signature: "304402200ec81207eb0079bdd15905bbdd9b98660d705aa08df96e9ef990774d2f1103cf022035926ba6cf460783122664b1a25849638ffe34f42c38177276c3bc7b10ad9cae"
        },
        {
          format: "raw",
          label: "StorageID",
          path: "storageID",
          signature: "304402206d33f0bdb8b370afb15f212aed98da5ad1d2c41362f9ade1360f86ae9ed15cbb02201204be822aac5c18a09f0baee45c5bc3295c8c085a391355e5ebb8a3242c9cca"
        }
      ]
    },
    "1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:3ff1c601fe26dd56c4fc5d773d7e24b17caf0754a14f5eb033636388": {
      contractName: {
        label: "DeGate Transfer",
        signature: "3044022043833156814430e372cc93d7540835c0ba00e298359bd1296425f42b40c477ea02206416e6bc158f72bcb300fa468fedd42394ecdff897494869cf1f9679b6c2769a"
      },
      fields: [
        {
          format: "raw",
          label: "Owner",
          path: "owner",
          signature: "3044022018ba034d2e60f07b388cde680072eca4b0815ee5f479e165626c51b84321c6790220793475c2711d3aeefe5ec4d5ec89be59c840ffb2d51d013c8d86c2b5d7e96a8f"
        },
        {
          format: "raw",
          label: "AccountID",
          path: "accountID",
          signature: "3045022100aad3a5a7ba18bb2cb73d647bc0a573eadf97b62bc08b7656dbacb982aa341d7002203a4f6e50a3f386b10d0377debe312d5a1462108563e18807fa8d45c4edd7615a"
        },
        {
          format: "raw",
          label: "TokenID",
          path: "tokenID",
          signature: "3044022002c7d20b128cd4703230f199371f6ccd18f2e3311ff3b431cfdba8ed69b8a9a602203a5be9d165adb244c9c9e0100bfb559fea69b7a91a9c4805d3cab7bbf649e2ba"
        },
        {
          format: "raw",
          label: "Amount",
          path: "amount",
          signature: "3044022048ed7a7e1860df3c118a9e0bc25ca8085ca4c4981d00d8a4a25bb26ee905d23702206cfe29c63e4da5415b402f1576466f6c629b44c733e3d4a4a46b61cf1f0ecc12"
        },
        {
          format: "raw",
          label: "FeeTokenID",
          path: "feeTokenID",
          signature: "304502210085ec5b05794e239114ee6dd75453cde566ea74286cfe76122ff69c230f54f3690220668392a6f480c2eff108cdb7cf3aeb287bac88abe59914ccd6932717e14d2758"
        },
        {
          format: "raw",
          label: "MaxFee",
          path: "maxFee",
          signature: "304502210098019a9ac20d02984196a508ca27d29c2654feb0ad161b1500ec7051c0ccb95c02203920ddf0bf7e17f31dd59994043bb0a21a3f91c9674f164d63df5cbd42e926ce"
        },
        {
          format: "raw",
          label: "To",
          path: "to",
          signature: "3044022067324800e3b2353a4ccf8faeebc4abfef0cecf550da5afa292dd12820e05602202203fa883cd57d057a3463d149117490ae889173e867b54279c488abba636357029"
        },
        {
          format: "raw",
          label: "ValidUntil",
          path: "validUntil",
          signature: "3045022100ebd27a8311ce197bf3bbb72856362853081faa55048d186a15017c998b164edb02204bff1cf694d3195d4c82a2c8d6f6b1d4db842e9fc891eeaff2d4ec4d8d64836e"
        },
        {
          format: "raw",
          label: "StorageID",
          path: "storageID",
          signature: "3044022058b6542b5fd416c8c321eeeca445df10141187fe956363d7053a90debea15abe022039b14b0f608f4b1c8757e5de2bef2f80741df2a85beb559d4ba710af9284e953"
        }
      ]
    },
    "1:0xe63602a9b3dfe983187525ac985fec4f57b24ed5:4decdb2662378b6612b240fda08f6d00412f088ccdf3023095323de2": {
      contractName: {
        label: "DeGate AccountUpdate",
        signature: "3044022059026d8aa3f81272e4b4b72f0094cd0fd04ac862e3e8ebc3e73ca7b923a45f70022046a1f7323da99a3dac0d4cc603c9db38b64ac3fa7519a1248e111abf926664d1"
      },
      fields: [
        {
          format: "raw",
          label: "Owner",
          path: "owner",
          signature: "304402205f7fae43ba4d7a0e5bed7bd9cecab4f2b55bf6ba6b3e33962ace5fabef269c0b02207bc89e0acf86b7593b18ff9d865820956508bb1dc3d8551dbd9f6745029cfb3e"
        },
        {
          format: "raw",
          label: "AccountID",
          path: "accountID",
          signature: "3045022100e580811e1e6b2e40fd4cbf4eb1a3f4baa934e6d96e80674431b2a6fe93581dec022010447ecd9023c4a028142d2e34f217b96a65ba030052c20eda6b3f4428ff109d"
        },
        {
          format: "raw",
          label: "FeeTokenID",
          path: "feeTokenID",
          signature: "30440220387d9f50b9af4dc0c2ff7dc73d513e1d816a55aafe1ffdc88827176907c3a5f0022007d64ad6946f932190bb352b5aa3360b4be0d1b50faee29010f5fbf132cbcc31"
        },
        {
          format: "raw",
          label: "MaxFee",
          path: "maxFee",
          signature: "30440220395dfa14a44c006079ec38d901b71e839ad10e1f9642b37246e4544302299f1a0220216a9b71a26e1a8ecd87f7f16d7a04aba42a68c18da25e8b608cb4493731ad2a"
        },
        {
          format: "raw",
          label: "PublicKey",
          path: "publicKey",
          signature: "3045022100db2cd9ef2becd6bd902458e4c3661be2f98db0943ca0b1d074eb249cac7139ee02203d011e51879b69be2ddcbd215242dd9e70f0cfd92c59fbc5089aee56bb51c7dc"
        },
        {
          format: "raw",
          label: "ValidUntil",
          path: "validUntil",
          signature: "30450221009d4db9f47704967c5fef69f7255e9dfd19abd928adeb7a5a06abe2fb8b3adcde02200ed93b341bc629b132313b1e8c47db096145898b3a741d165b21b653ef14c3b3"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "30450221008e187640c09a34fdda18f022ece0f1632315392192876af7df895c6245ee506102205f149a22b0eb3d9bcdc3e65db8a0e1b6494266c721c1bd4248e7de7bb8a4dce6"
        }
      ]
    },
    "1:0x7f268357a8c2552623316e2562d90e642bb538e5:d8e4f2bd77f7562e99ea5df4adb127291a2bfbc225ae55450038f27f": {
      contractName: {
        label: "OpenSea Listing",
        signature: "304402205f01e62b2331ecb9f1cb3f49a764d66015937cb20cb4c3af625146905ca4832402205076eeb4a74619b4552278836b548c8e525813faa9008399e43bfed7db016408"
      },
      fields: [
        {
          format: "raw",
          label: "Contract address",
          path: "exchange",
          signature: "3044022069df3b1c82dda9849a3df4cd0dd263d2b6c35e4fb8946865a35f5555830971b802201880d72b3d956867b597a2f5097d7f8799bad6e636d3de4030515634bba47155"
        },
        {
          format: "raw",
          label: "Price",
          path: "basePrice",
          signature: "3045022100db49dbd8426193b6012781f43c3b445d1cf845d99d738091c1f068951728333402204326a2da5203f25deec049deba760bb31a86507c73fe6828c68e0db2eabfc966"
        },
        {
          format: "raw",
          label: "Offer expiration",
          path: "expirationTime",
          signature: "3045022100e71a4921740fcdf4e489c517fc82f9b7e83cfbd675dff318acb91fbf8eaf175402203fac43650771c6523dad8d995ef414d035a92d262a9cf95885ef2704337a2382"
        }
      ]
    },
    "1:0xe92b586627cca7a83dc919cc7127196d70f55a06:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3044022043fb323d3a064faa38bcabad3a3f797dff60f55b49c19e350a9d0b1f980818e202205c3dc14efcc49adf915f195ff29fa02dfd9d08fca532b76086e501f9e0d133ed"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "304402205b674138eb50ddbfdd05768f2c641109f6c8f341d27e10ea12d59e083746cb330220521d739a49ee57ff9a41cf00adc631d3dd33e9ce2b23ce50759fb33c0ffce0a5"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "304402203ba8d470649ae7cb5d02764fa48899ec0414075ed85cb9fd95e89ac5b3bb073e02200183233f30de996a8b87417a6febcbb56a544c38fd62b6f7702efa7e0d7b2ee3"
        },
        {
          format: "raw",
          label: "Maker asset address",
          path: "makerAsset",
          signature: "304402206f3c4055bd431c1ceddce5b147c3b5acec950b267205da655fb3d331b9c070830220570c9cfdcc02b10abbf9a335ab6a4067ab7cae2ae8a443f795225a7c3981cc0a"
        },
        {
          format: "raw",
          label: "Taker asset address",
          path: "takerAsset",
          signature: "3045022100fb93cbca6ee524729b138319a92316a37c56ae5f89b3d652af7f680c3f160df002203d1fc525b11cd30d2907f844d7774f49995b2be7e3ba2896dcd4a6e73c8a59d5"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "3044022002e75adf4733bf28d532647c54fb0000415737db37b7e5674f9bb20179d01eea02203834ebcfe81d98e745572349bb0da4ffdc8ec846d35e3812119e9a3491462724"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "3045022100966a77a69a7e0c060f154a8c7ed36087d8ba7da111d9bacc90b873421fe6a75c02207d92956d938a966cb98ddb6e8b3a56e4d8e7725182cf1bb02f03f67512460485"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402207ece45c0993fa46316022cffbdf64307cef2caede370f27fdfd78471c3550dd002200da74e8b3b5201e654e7e4674f7471a333a104288fdf8cf80fc3122126113d1b"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "3044022014183f10973ddc0ccb12472d2437e33f368f627b99022735044e5c4ebb4e345802203a3f5e8aa5c928981d2dabd0442342c605db1626dcd0d3ad5e3afcd98bb8c673"
        }
      ]
    },
    "1:0xe92b586627cca7a83dc919cc7127196d70f55a06:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "304402206dfa1d54ee0a7ab236252618a5fac9c752152304f31838eab4ba4c6d2d3f844b02206658b1e9b2503577619080909be0f4c1d2a899b3d0085ed8c3f2a4309762dd94"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3045022100ed9b0b91a8cace4d312f6d1bab076c057e954a9cd33c3dc5c350d030e41edd230220230e3050131157f6fc2fc578df7b1108f69d55d25ab837c661045877b148765b"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "304402205d4913092612fe78d75c181f3ed28ac7808e25ab0131e73bebd91c08aac65e7902203d63f1fd4d5cc11b1f8aa2af0ec6a8440a0ed59d440237bce96ed87874c2a26d"
        },
        {
          format: "raw",
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "304402205f9fb08bef206518e5bf48cb7fd968709a0ae317e903d9c87a41c934a0983af3022066264858ae4a1338d4daa1b4f9dc7376335ce9e57d4bed320b0d4c27a0012deb"
        },
        {
          format: "raw",
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "3045022100ac653732f2acece7c47588bfff9a1059dc69bd3fa7e387cfef8246eb0ae2a70902204ffd7f89cd7223f8e52b7c44b02ac4fa1d06017015304f1a3a7459b20d54a5e7"
        },
        {
          format: "raw",
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "30450221008e59dfbed2dd4d1e2738b829d7a57fa23be737b652c0b01299f3d9482174aea80220138c8e948becda6dc1e7564358e574e7ac8d7016f2a1795059977f401535b27f"
        },
        {
          format: "raw",
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "304402203408e2bf0210fa4454baf46374cf876299578df056ddaaf5a907306804ca41cb0220056f910e3c500e4a8f55d5c09dceed9753a2ca7b49a9ade1955a598f4e64d657"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "3045022100ce5db907819f4f36c77f1e3a849a3a6ac9483970128998d5add5941e1fcf6dc102200e1f26e08a3f48ef6fe1d40a4149cb8603c5e70e076755ddcf76894d31f2adc0"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "30440220015799beef248e4eb12f95368ef44cfbaf65e43da1a4110623006e46157ab22c022055f962e02e4cbdc05bab79cfbee523da8ff9d16529c4e98755b15d45bb34a16b"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "30450221008048cec54417376b3a659e3aeeb349a4352751a099443ea203b59e9d2cd954b702201b32704d89bd028a6794ef315bf2a204b7293f547d14282440f5aea041a27ee1"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "3045022100dad584a953b3c56c67913e76f1a6626cb72620e23bd16f41b2817a95ddb0bccb02206189e3b49d9f3475bd52baff2a40c7f026daf1d2dad9cfaa403eb08030836090"
        }
      ]
    },
    "1:0x6b175474e89094c44da98b954eedeac495271d0f:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Dai Stablecoin v2.0 transfers",
        signature: "30440220692d38bbcbab753738d0c75d87efba7b93a88d4e225e73c7e4d0b54e4e8b548302205000ffda67117043bce94c327837053e2b6bdb888b3d2bac3c1c3b79997c1f90"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3044022067e97af5110ed4a8a5e8731a04c07192042b5ef4fdc598cb10256363c4bd503302205fc2e4b4dbc178b3bcd8412deb66f4b99b4506197bb046ad618457a1aadd09ad"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304502210099c45a68aaa7656be36f74fa0831546de4e7b94909143853bf678313b580963902202b01f4e8fa9f6f5621027c1147fc435430f22eae8a91bbd6e27b053e61a69d8e"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100a14d33c52e05746bb401190223a9056922671bc57298c50d58e4353dc72c598e022027dc8ae70e8e304f8436fabe626c2e39be4f2f03af71badcb273b32909a55daa"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100b6228fc8fec28b708fd63809e6ba0f950086a60729acaa7e3bfb33789e798e9502200e6f2a82c69edf0ee2f532081fe8692b88536d7cf6a7800579d87e6333b98e2a"
        }
      ]
    },
    "1:0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Aave transfers",
        signature: "3045022100b90cde117f034f5ac3cc1563397a65a88b65814c4eb4757d232b70f1c7731d6f022069394d2683d3230e7549c4763bf10ddaeb2cd9d48661b818605bd318220b9f8f"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "30440220671740c2ec59c9bf30287a9ec559ee15f5f10dbabeb97e4bbb1756ead6efa4fd0220607931e7d5e48150946b5d674831381304a51c756eabed869fbe28d6075cad17"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100c85534d029bed7daaed9dc5db7677efa56ac772a01b715934c94eec529cff88d02206947c5e45f9b60d76a41c20a2feca0bb06c19fa99863fabdebf842b7a5c088d9"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100d0e0d997bdf8103b8e7be6cc25e42477939692e3dc7dee410483303f3cecc01302207afdd633bfc842e19606a56968bd89cf556c7d01a8d50f07a1dce59c394c2b41"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402201d9e37c5e86e26acadba91ccae71bbc7cc582768323dd00542e579bdd9bbe6dd022069d5f52d008457fcad8ebceb4a31871f601626323d064326d258043e5170216c"
        }
      ]
    },
    "1:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit USDC transfers",
        signature: "30440220206a52ce36fb75683481981c6f1f2e1cc405da8b7172b4fe3b465b19139bd66602200d5d2a800a253881fe4d87ebaf57fffbc7fbb8591ebe251ac69d650469b51d16"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3044022048b3e79d00220b5fb5908cb13264f0a10ab1faa1f9c95702c4dcb91aefa2475a02204096676422035d37f30a9fea09553d5d1751413e5a2cb60d1b9919aa33e166b1"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100da7a47dbc3c943c29f2211e139c5dc43b6c54d79d4aec205694155a8a2bed5b902202f1a885a2a6de6b705f8cfe87d6994e470c779f8bb8e6e52166c4e41437e605f"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "304402204051e74e9df5f2f42d4f41e3753ceed3cd98a7061c64caf7d6042de668e6b26e02204a277db67a39a5db5aee910a4086482c76e13fe39793049c40514be6dcde27b0"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402204c15b30fec2f9f4724326abaa390a08ec626b4ada487d0ed3c6adb32a54da73f02205c6484d3e5ebb3d5a05d5286bc1443c69960771e44d392a16f6cf029325adc62"
        }
      ]
    },
    "1:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b": {
      contractName: {
        label: "List Order",
        signature: "3045022100cfd82c26631445df34b327b31ad55ad7f26e0480ea7838ae83274ad83b8f9cd1022044b5a3db6b6052a5b818b1bc6cb28d523115033ca7ab3c4a269ec37e3cde890f"
      },
      fields: [
        {
          format: "raw",
          label: "Order maker address",
          path: "maker",
          signature: "30450221008ab1ef7012cf407a80348d6be16a98d375bf959de72f260cb92520dbb30fc2ce02200d9c0e02c8375d94077ebe16c849df5745654a1c499100286201407be47688f9"
        },
        {
          format: "raw",
          label: "Order make asset value",
          path: "makeAsset.value",
          signature: "3044022018c3ea3b1768f348094f151f8e28171d1325d5cc1621478b23474f4695acf2d3022040ad4bb4c8c138857e426128488ee5a3df8fa0a7cfaf58e9858765a0f72a8a02"
        },
        {
          format: "raw",
          label: "Order taker address",
          path: "taker",
          signature: "30440220482e1c1439ea879f243fdd47cf043bd271c7fb73ba095463e920ab34c38076c002207c095ec3307fa3a3ebcd125238caf3f7c50d196db444559d31c79916e514f370"
        },
        {
          format: "raw",
          label: "Order take asset value",
          path: "takeAsset.value",
          signature: "304402205d33c23ab575fa613d37d7fabaa719f5aa4dacf8de0f299e83dd189eeabfc31d0220535f67346b8ed7d175193929aebead42b92921465c1474f482fce88bfd00323a"
        },
        {
          format: "raw",
          label: "Order start time",
          path: "start",
          signature: "3045022100c178033effb772f141b46a9d5b5bcfc48468c6e5c499d8865043535947b1bb490220687dc9018a38c62e01c91e90fecf9e18febe995267d1bea27d3368f12f04bc9b"
        },
        {
          format: "raw",
          label: "Order end time",
          path: "end",
          signature: "3044022074ecdea3c58a28565af3336de33390aa7e592e5108f6d9151dd000a90a5eb60a0220163362373d11f177e41b914dc10c93b76adfa4c27f4662179329e66b32f8f139"
        }
      ]
    },
    "1:0x9757f2d2b135150bbeb65308d4a91804107cd8d6:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b": {
      contractName: {
        label: "List Order",
        signature: "3045022100892ab54a425fa1306df530b5ffeab2944133f1fbc68b99b92e61abf5c5051d1002205eff72d6f2c65f7835bcb2c6593b772d0a45e152988b4379cdb52327ce5da382"
      },
      fields: [
        {
          format: "raw",
          label: "Order maker address",
          path: "maker",
          signature: "304402205990b238b291ad1bb3cce7d2acce868761c6a73fa79e87c05530813aac8eba5f02207408c5e30e840195677fa60d411d2c2bc76fbe15a7ad2506a4636f001708bec5"
        },
        {
          format: "raw",
          label: "Order make asset value",
          path: "makeAsset.value",
          signature: "30440220646b1bd068a229a75f7f0558f03d2fbbe7dd441d318480dc8eb532c3452ed6a00220642fe4f065198bab191c682e55487cd6464a90c9527983dcd672d15a0a083d80"
        },
        {
          format: "raw",
          label: "Order taker address",
          path: "taker",
          signature: "3044022014dff71fc22c0b53e918ceed99de5aa86cc49fffc22f271a9586a9db1197e413022001125d415ad2eef46353bd8e812248fbf3fc2b60fb5fc7dad3853c9d2c85c6a1"
        },
        {
          format: "raw",
          label: "Order take asset value",
          path: "takeAsset.value",
          signature: "304402202416cd3b9b1b9b7fc4bd5434f0f8c54638d0f29e87f1f92de7006747f4e856aa02207afb4547d03de6247628f93c5ed49f9122e2780507bc601f5211c89c8905b93e"
        },
        {
          format: "raw",
          label: "Order start time",
          path: "start",
          signature: "304502210095c5b1927e171ce8f0b74bd311cb0f66bff5e3d23a7eb52e1d6b696378defb2502204114def9ce15f2b698ea00d43bee8e8692568a6394e24c8e0b53c90c29ab7ad0"
        },
        {
          format: "raw",
          label: "Order end time",
          path: "end",
          signature: "304402203f435338d8130399eaa6939c0cc8f4fc5efc92a34256ac450d6d55b0ac2e816f02204c116eb40b3c07810facd9117572147216fdb175b2ce31c6ef277501dff7f6d1"
        }
      ]
    },
    "1:0xb66a603f4cfe17e3d27b87a8bfcad319856518b8:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9": {
      contractName: {
        label: "Lazy Mint ERC-1155",
        signature: "304402206bd24ac8c5cfa2b75e16ea0c315295368a7f780c4ec062555079cfe48d583a8602204300f968037f9ea84919cdc8ad3a22103b04e00b9c4dffe5c34ebf13d1b769cc"
      },
      fields: [
        {
          format: "raw",
          label: "Token ID",
          path: "tokenId",
          signature: "304402206e18eac55b89b17b4706547807a864f6c1b37eee09fff4ccad54e9842eb1abaf02204ef2984f87d6c0ebab26352ce82f8040aae5bd259ae55d9921d609b3936d15dc"
        },
        {
          format: "raw",
          label: "Token URI",
          path: "tokenURI",
          signature: "3044022067c04bf2be50a7660b11742d10dbcc84655c22a0d359c20b2abb54a4d23f2846022030bded842ae4208854c0d11d655b234465e2c9ee9fe9b1eb5074778ddcfa9426"
        },
        {
          format: "raw",
          label: "Token Supply",
          path: "supply",
          signature: "3045022100fc4ab75ab184e564ea297da785d4a749b913e58706dff4e6c7ae49f72a7e9701022067bfead2e11a323beca3821a3ba310d705ebb128f45bee1f394dcc7e60af8043"
        },
        {
          format: "raw",
          label: "Creator account address",
          path: "creators.[].account",
          signature: "304402203e5e5fe4636b283df4e4d027e8ba5e43d912f53125b052e603548fff051b37d702207ceae4257ccc801de3943fb68b1a0e2af546e12d3bc74481b7695a12de7eebd2"
        },
        {
          format: "raw",
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "3044022065a51fd2cafd0013215fb703e27052320d35951e5f9d26a3c3d03a050b7088340220193e98ad9282a96e3e7b5e6813bb5989c31cded994fed35d5383e68738905c1e"
        },
        {
          format: "raw",
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "304502210092d8aa5743b9fa52cc1d5caf4f83e65cf232b02394dae8e3056d29606377caf902205119918948d39a165950efb998e19aecb3bde611065e92fd5f5c10bafaacda22"
        },
        {
          format: "raw",
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "3045022100b7cc93e7abfcc00efbfeeb49cef4d2ceb5521e1c97b2bdee882e011292964be902203d7ebd7c328961e1ca66aa16e8c61aeefa3bbbcad419bc65315658cdb425e5b9"
        }
      ]
    },
    "1:0xc9154424b823b10579895ccbe442d41b9abd96ed:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b": {
      contractName: {
        label: "Lazy Mint ERC-721",
        signature: "3044022001ca2f9abb569b76bfb8398ba150999d93fc6a02f5e637f4ac3a125b6c48b528022007ab8f1b776d1b2f5a0b44f90214b02f71c3535e468f03b681f133c3bc217946"
      },
      fields: [
        {
          format: "raw",
          label: "Token ID",
          path: "tokenId",
          signature: "3045022100e762ea781d76c81e5f3b28269e03f1cfe7e33b847dbe20a56289841579b0fb4f022033c6249fc155deb94850e6e30fd7fb854f07c63c2b8ffc8b3c7d412c01b8398d"
        },
        {
          format: "raw",
          label: "Token URI",
          path: "tokenURI",
          signature: "3045022100dc369275a5b2d6a3c934221e9f7483082cd5c52bb1b41a802d260c54757cf29002206dfcd13e32357144ed68b90c2308208bfa699d95d917a97d8bf438aed08269bc"
        },
        {
          format: "raw",
          label: "Creator account address",
          path: "creators.[].account",
          signature: "304502210089448beccdb19e680a7f8a6dd4f1e0dc8319b3458f0d5a491518bb97af0e1f5002200dc01550cc4d0d3398049938d2a498c142e2e82eb9086c7d6d6a8f1f90d1d25e"
        },
        {
          format: "raw",
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "3044022026ebacc1dce44b2815c6e53d9030836a4768ba0019c4b6f9d8eb83d8699ffac3022076b9bc2f89daa7e5e21b294163e64ed25d2bdfe5f2373f6aefba4f6da1d92d3f"
        },
        {
          format: "raw",
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "30440220626fdb56db8c34a282917aab1f7fddd36a060eb35f117ded7b675be946acfac002206770d35391e086e1ab31e9fd9cea07e90b09d38f0b882857e394283ecd6575a9"
        },
        {
          format: "raw",
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "3045022100e22f440fe2bb06d77a0afc50366689ede59570dc91796305ea62e5ca5da5286c022074bdc3dc840c7314abcf6bbaf35fe5e20318c54a911e7508942fecd38b70db9e"
        }
      ]
    },
    "1:0x72e9d9038ce484ee986fea183f8d8df93f9ada13:65b962ff5c94fe989fdc9169a5dbf3662e79747c3932616d9f0a39cc": {
      contractName: {
        label: "SmartCredit.io",
        signature: "304402200fbcc50090e799ff0ce08f08ff8085c162210bc9ac9d599aa9dfb7a3bdfd716e0220555ea5626806f7756660657459d15120dec6fc45865f64d653cf850fbbfa1068"
      },
      fields: [
        {
          format: "raw",
          label: "Collateral address",
          path: "collateralAddress",
          signature: "304402207545402a92f3eed973e15d3fb43107e2b241a403796189def24abbb4ab59932b02207d258e006f51f0fa9cdde54dfe7e9145619b7041dc4481e24e125c31754df0a6"
        },
        {
          format: "raw",
          label: "Initial Collateral Amount",
          path: "initialCollateralAmount",
          signature: "304402206b7167d76ed863ab7d3346b0394518d1b23600aa94224c49c601264180bf5cf602207a712ca9c28e328905b9d6a29f908dd7a8ccda408c8e7c1671926ab0de5a012f"
        },
        {
          format: "raw",
          label: "Loan Amount",
          path: "loanAmount",
          signature: "3045022100dd03f4bd05938c7a0f5c8a5d4ec36687179f1cc1df63149e5a144d5d54a7de65022063433c2a0103f1afbebd2bf2a9a817d608874532af4a6a23bde475ce2ced6795"
        },
        {
          format: "raw",
          label: "Loan ID",
          path: "loanId",
          signature: "3045022100ba34308137ad49140a12444f123886eedcf0b56e02c84236f262278cd2de0e9002204e0e0854e50fb5eb297d53274cb4e37c25cca8782bc5b74ed7bc0190dd9777bd"
        },
        {
          format: "raw",
          label: "Loan interest rate",
          path: "loanInterestRate",
          signature: "3045022100c3194f33a59b71f01f5495e90c876fabc2637cd506706c20813aec5a2f97437b02200cb59271ad955ec23c2c3bcdcad8bb073c887b4331628319d0576a6b23fdaaad"
        },
        {
          format: "raw",
          label: "Load Term",
          path: "loanTerm",
          signature: "3044022029fca7f97f2a6ba63f9b90aa69fed3627d172b653cc92f58cc60fae16095c4d80220717d03ed8b35c29db91c1c7160cc4dc51b3cd78c70bbcf33238b8c78ee6c2bc7"
        },
        {
          format: "raw",
          label: "Underlying Address",
          path: "underlyingAddress",
          signature: "3045022100ae88653e0cd0a991b3b85b383770b590c8df16768ae90edfdaac379bd1ccbefe02200129a19bbcfabd47a9c660d3521549e05dead453d62527294ca312ac67b14b0c"
        }
      ]
    },
    "1:0x0cec1a9154ff802e7934fc916ed7ca50bde6844e:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "POOL token",
        signature: "3045022100cfb4916219e3694b46154274e51034ec625ca0d6473d6f092e2bade002629c8902204be001bf270bf5c1876e953476289439fc2260ff784c412002a395ea4339858d"
      },
      fields: [
        {
          format: "raw",
          label: "Delegatee",
          path: "delegatee",
          signature: "304402207860961035527e594b1ff79e81bdb65fa46787448952110edaf251d56f9f286002201b4830a368cc521e1cb73ed22e5ddb4a926d5d2acaf6d509f35c7fde009d223d"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "304402207049e4d2ec11fea46e4f306a65d90a4ee638e8eafdf5bb7e54661275d4899bca0220757516a4ac3098cfdea23e706f84c0c49be17b8bae343bce14cdd9f6c6ff9787"
        },
        {
          format: "raw",
          label: "Expiry",
          path: "expiry",
          signature: "304402201d635d39c2f3be12d24a7af1e8d7153c95f9c2afbb756c9b9762cfb89cc606d6022006590a2f50273ce004aba41ee48bf35a0ae7ba80e08b0f9b4cce9cc281df60b5"
        }
      ]
    },
    "1:0x1f9840a85d5af5bf1d1762f925bdaddc4201f984:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "UNI token",
        signature: "30450221009599eb72fde2d45adc2e0beadf055d1f5e8f65090e153ddb6fb02a7343c96268022015e9dc0eb7e7d733edae86bfa10fad3ac3ec38c23b3a9ec67fc82f53c6eaf5ba"
      },
      fields: [
        {
          format: "raw",
          label: "Delegatee",
          path: "delegatee",
          signature: "304402200a22c41784587dfc574c2d12346f16fc5669e3e89d118d021eee3e688c6a3ba10220569497a6447c74db8eac7e7c62ece12b2e604cb5fb0cc7f1ae51a005a9d8c7d9"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "304402203a967682891c28f9a24c824326fd48624b24204ff7438a97968fedf2e67ae38b0220066a33eee179bee5b45cef00de03039db1e80ec0590b30057258464ccf5b4b23"
        },
        {
          format: "raw",
          label: "Expiry",
          path: "expiry",
          signature: "3045022100fb2f59ec83f2a962b990dac7a4823a619ee3a67b72e29bab86e317d36bdbe665022052c113fd0b7e45cee1a428c838be4d38d7110e3eac1f45064c74b721b8b67974"
        }
      ]
    },
    "1:0x323a76393544d5ecca80cd6ef2a560c6a395b7e3:f06d2a85ec59f0c4e7ea7a0f824e6a59658947d01f0d728baa0ab10e": {
      contractName: {
        label: "ENS Governor",
        signature: "3045022100e965ef559df040f2880366aa603d75e610261946912a663a5b33e17708da817102202b4d6130c5ba34195663877cf1d9679b811acf9048b9ed8625ed5c2ea65db40d"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "30440220644deea26170aa4a8057c70f769d35ab36522ccb0f6f85564450d46c11061c370220687d778df87c7dff5e3ad58a9e36952a9904e6389c41f4f8e8044c679a224847"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "3045022100c5109877ecea9a94096b612925e090d1aea128609d7ec466ec589daa3dc2f1e702206b7c8eec5e9351539fc164f576ee4ace65b776c051e0efdad21d51e42447dc87"
        }
      ]
    },
    "1:0x408ed6354d4973f66138c91495f2f2fcbd8724c3:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Uniswap Governor",
        signature: "3044022046d278627a7b68020ecda5e20d249bd9d141a404267acb8dec4726f30de5694e022073397f8438fad45b78813a7161eea60dbaaa1b421beea742efc8c07acb63fa63"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "304402205a033bfcd10718388897e99752081c0a4133b3c959b7b75a3568d585041e849a02205e2c1fb537fc0ff8e6b68a636215fbb4741d3df7c8202a83622063c77bc3e587"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "304402205894cbf601c96ca164ae7e5d0aab17fbbcec4aaa1d032274800d5a46eba8184002204c195d6936a05b162d5bba655f726f08337e23e10bda06b2f0a3f052522bdfbf"
        }
      ]
    },
    "1:0xb3a87172f555ae2a2ab79be60b336d2f7d0187f0:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Hop Governor",
        signature: "3045022100f708c71ae38defcaa58de06c664d79f18651aa3df1ecefeb18012a81897c70a10220587d6e2590ab6dfc6e6a563a2460619cd49d73dbe8bef4ed20b6a50f47068c79"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "30440221008a361a02a91db3ec96eebea92c3228c620d21f8004813e35f3b99872da81816e021f27f972bb44cb1a1fa033be2398c80c6d1b4890f0b81d022ef4bf346d61af25"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "3044022053b84095ce71d0e6ab15af8d979c46dc47ff6a169a88bdf3eab573892785122c02201c6c9d5570a581e42c1341f36edcbbaa173d701e6b93f424493125cc96e83d18"
        }
      ]
    },
    "1:0xc18360217d8f7ab5e7c516566761ea12ce7f9d72:2c3e6b3e91e39ef9bb3c1b1cd2b4d8da76bf433179c8042962671278": {
      contractName: {
        label: "ENS token",
        signature: "304402205b42ed5c642f2d98115b1ebdc98fcdd63ee259b14b896af1c1e78c8df480141c0220679cf0ef775ea5543f65f2249df9de807b02c17aa507d9e89dedde00b2852320"
      },
      fields: [
        {
          format: "raw",
          label: "Delegatee",
          path: "delegatee",
          signature: "304402202984c1b8b2c2be40fbb0b197b8666f309d16c10d4a737befcafa5887904462240220177c3d4ea462a56880e46e08ee5f8e8f0eafd87e97d287dee353aa21fb4db8ad"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "3044022009e1668b67786c2258d75f93297be950f3812ae757068c5407915fddea878c5c022066b9ef8571d300abee4d18d4cd0d59a5b2cd18bf78f3db80b6d4183e284e2ad2"
        },
        {
          format: "raw",
          label: "Expiry",
          path: "expiry",
          signature: "3044022070e6d8b8085472782a55f11ebcf9492ecf3a9eb423b37dc6b79ae17588e7da4402200e610027d5fd12d3b32df3ff7d951afed068bc26fb56e541b97a0622555a46ff"
        }
      ]
    },
    "1:0xc5102fe9359fd9a28f877a67e36b0f050d81a3cc:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "HOP token",
        signature: "3044022072ff099831505d99d7c73d930e720d0a3e28ae8932229289c1f1acc9b92190a9022049d78cce53e621f91cd7a11a1d6ec118b9f0fef6e16059e8f856fdfea8133f3d"
      },
      fields: [
        {
          format: "raw",
          label: "Delegatee",
          path: "delegatee",
          signature: "30450221008418fa1807d28769b22f0243f9e547905cfdfd66b19dca60eb2f3778149e8d3c022064c06eda3c8cd943486f52c064a91e0078a3be9777143a5b5925506554f20c9e"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "304402201de5084ebad45b344cacfa987c7b7fedcd438898c2cfeaed83921a9f66c78f7b02201bfe268f95c9d75484117d1439b2e968a5c9894a24c7fd751755a5b5c0da78e9"
        },
        {
          format: "raw",
          label: "Expiry",
          path: "expiry",
          signature: "304402205d3f2a2d51af5696c6b9905cb6f020fb450e24e2e4b4cb7a15fe1a622267fba202207cb11decd982dab1bd3322311a16264e54e00cc365cbd98b490750a324c0c30b"
        }
      ]
    },
    "1:0xdbd27635a534a3d3169ef0498beb56fb9c937489:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Gitcoin Governor",
        signature: "3044022010877c4c71832b3b1e52742ef0702837c162751458cfed684db4f9bf3dd9720f0220650921e5b88bdd0a9626ca7c86eed40c2b3f2e49e024f6cb643a7833367220fb"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "3045022100b608eb5bb848602950e6d1e0bcfc39bb07f465e110c2e6a1dfb0d0423c300bdf022079a4173b66a72e21c0e46e79a5a9a4dfb71af8dcfa181669c7a555733c0f9528"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "3045022100dfc160c48ba326093acb0a5674d2083c60a3f6db68605e4ddb62b179fd4aada0022070e0d09aac5335705a18abd5e287e8d0ec8ad06e2a8dfd4b24ec2c615407aa69"
        }
      ]
    },
    "1:0xde30da39c46104798bb5aa3fe8b9e0e1f348163f:5955b80673f55c388ba6e692184f88e69d3c51863ccd5cd97237cfbd": {
      contractName: {
        label: "GTK token",
        signature: "304402205df7c1169cecd36740080c772349d6665bde2a640ba4c2abbe1db07d575ccc0f02204e0be7975f8053e091f79019301e4202b97e611c4a2404e24c462afa3df7257c"
      },
      fields: [
        {
          format: "raw",
          label: "Delegatee",
          path: "delegatee",
          signature: "3045022100c8221f284e448a3c344036f3252eab8fb7e383a25782d38e579cc50e2e996f480220594f34a6c5a86948536be2d0c92315fbe8f812704ce96c405dd223bba18e82f9"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "304402204b28da4752953b61b09ba02640eb88d11f906502088ac8460b1764b820edff1b02204e6c5e6a5dfe32658e17f1365ee7d2344aff54140577a5ef1a3f55631c3af576"
        },
        {
          format: "raw",
          label: "Expiry",
          path: "expiry",
          signature: "304402200c3083a36deb4ae67a6adba07622cb382846e5f61bbc9a24d2d5d2233546083e0220693029f53ea4d6f862e86c0b6b86df7bdcecf9eefcafe0c33671b300b5d64506"
        }
      ]
    },
    "1:0xed8bdb5895b8b7f9fdb3c087628fd8410e853d48:1e9b997840f00e6a808a13d73baf6c2e3319306ae96de8f71b5359b7": {
      contractName: {
        label: "Hop Governor",
        signature: "3045022100e09179a98da340acd99714b47febef674162a2114dccd1e39b11b49b4e1609c5022012a31e4db15edec68ccc64b17ee8f5e7e693fc32c721ffa5169a89243f5d5069"
      },
      fields: [
        {
          format: "raw",
          label: "Proposal id",
          path: "proposalId",
          signature: "3044022065b5f880626a3f9ebf117edfbc5f489d4fb80b9cd53674fefa7632d5c8a0911f022018dcac007b98e8b996b21ca3ab478855e040537beca824a146bec1ea51ed751b"
        },
        {
          format: "raw",
          label: "Support",
          path: "support",
          signature: "3045022100aed88d7b174625aa5b4a84a5054ed0ae28a2a768eded543130ca80e05fd2234d02204343eb88dd232c5317f73d889554728802f4953ce0c2e794107a8a9c604767ca"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3045022100e3c597d13d28a87a88b0239404c668373cf5063362f2a81d09eed4582941dfe802207669aabb504fd5b95b2734057f6b8bbf51f14a69a5f9bdf658a5952cefbf44d3"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3044022075103b38995e031d1ebbfe38ac6603bec32854b5146a664e49b4cc4f460c1da6022029f4b0fd1f3b7995ffff1627d4b57f27888a2dcc9b3a4e85c37c67571092c733"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402201a46e6b4ef89eaf9fcf4945d053bfc5616a826400fd758312fbbe976bafc07ec022025a9b408722baf983ee053f90179c75b0c55bb0668f437d55493e36069bbd5a3"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022033e5713d9cb9bc375b56a9fb53b736c81ea3c4ac5cfb2d3ca7f8b8f0558fe2430220543ca4fef6d6f725f29e343f167fe9dd582aa856ecb5797259050eb990a1befb"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3044022056b3381e4540629ad73bc434ec49d80523234b82f62340fbb77157fb0eb21a680220459fe9cf6ca309f9c7dfc6d4711fea1848dba661563c57f77b3c2dc480b3a63b"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3044022052d2511ac923e69b1fb7ce984af1b3ac5dbb6a246d0d13eaf48bb742e46f70d0022075cd607e944328fe34cd20b83be1f29c7d17ff69d6bba3767d10784f68963c47"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022059c5ee5b2a73eb5fd8d3559da1d062b7b2487afa8ad7a60e37e61018a03d2bf10220009e228650ddf2355066e14fca9e28cbca3db4f9af69ddd2a446709cdced2660"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "30440220421d172d59ddff6548b533c18d4e91f86d5393a198f8222665fa38ad406fe61e0220217abd89dd61d64c69e277ba40e3d887cd93a56383216b4d7d09f384a9731370"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402200a25c2a63dac7d3276335258dd789fb03f6d24616a573b214544a6c882509e4f0220324d55c052a954c227823adfac05b15acaa03f7e8c9f7513e5c6d106ecb7373f"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Send",
          path: "witness.inputToken",
          signature: "30440220092b302bddc40f340de94719e3614157f3eb857d28a5c512eb92a942f21e7f5502207555a1348617c5bdc05a26bb7d1bd214eaf688c33e56df6a8c928c9f05065068"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Send",
          path: "witness.inputAmount",
          signature: "3044022004d584ed92d09f60093cdd30ed1af730df8fcb239974eb7f56f03f3869090ffe02205fa25b2ab0fdaa0cd0bce684e7668c703d18caf7791c11f2870b75a054d76bf8"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100d321fe73987030ee4d72468cafe21845fb97b08dbc7a9b14e3421b050a5c4b810220755232e20dd1684e3a70964f838d7cf2ff458020eaef2736ed0febdecc4a4a10"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "304502210097a2271a3d7d20cd585511473d552b8a84c2b6128bbea3118ebfa1efd102f943022077cb0dce5ba07c69dc44795e2e339aee83a88616b80288172916d686664fd827"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022024f5c03f820b9c52aee938ffe7a5dbd882f45f0826307baeb81af8c6aa0ec07a0220464f90ced2bde27dc8c9cf1eea43ed23553213a784a7ad56cfdf9c92e1902846"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100c3b617095422e717beb605b1609898693f8e464c700549fcb4f4a1c58d4e621002205f658e57367adf7fa51cc12f122d49b0b982d50c1f526000cae39cdb39f9ebc9"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402204571e829b58a2c3d66fdaabb99bcc1b8ecab4941a1f3374a1b29a7c41d5165270220573c71719815aaf0eed481d128cb2a7b77a20de261771149c8b427690a2cd19a"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304302203b64f5975002aeb73db0a392fce0a706bf1a4f7aa062649c685a601e701c5c50021f3631a4a6213f01320ece3576b91b2f244bb127c79f1cb7c1a64eb25a9db377"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "3044022078be69309b8d5ea01982db35d2086bd6aff04515c51fe928ea29fd7e251c46de022059b937f71c84b06bb89d0f7fcd7283134ff56cdd0edd76585239b20b9cd58a82"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100c8ec16930a238fcee437e2e941c5723de4ed9eda5e8a209a622148fe7ae7ff7c0220639cfbbaa66ba10d28e9a50c257d25cb60e808d1f4e6eb4dfcb8ee62d96f3627"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100d3c21c3942b5dda1ff2d2a7ac05cfd432d12f1b155717ba0f7b4e0a04ef37c030220432cb15f7aee6d18bf058f30167464412ff9b9496bf9901424ea096106a5c20b"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "304402203a5258f4e4180c34a370f6fa58f3783986b637c5cc4606e0f0d1d9116d3050a5022070f724195bf7780b3f41670c93125d6a2e55b0d58d2128bad0db1925dad34f6c"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022026ad09b7426cb6990ac9814f57f135f9fa34515f4fbbfae23b27973f8acab2c202203f9720e91c8837e04b18431b7bdcd57acc1ccd7b7c62442f0feb791a1dda62eb"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022016b38151bd2469157548fb0b681d6e428a527c88f4b36fb862b7623a6b40dbb702201143008909039c6c393e49a99b6efe002b55485be80e663e15aa39513cd074a6"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100c6fdae9d879d2c20c3b7a66f44b2e60d6e781f0b0da2c21c5ca612b0a34ac3860220282196259c1d0bad4695f77a653ba03704785ad7a4d6007ea3055c5c4084a8d5"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022049575f4a12e8dc579430758de767a339d5b6a04de5665015cbf0ba01d79bb34a022010416cecc632d6c4e91613c5d341e93ffee3564a20d5b390910e01876ff41827"
        }
      ]
    },
    "1:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100ecc369027c550864d7e27b14045a83b1fb8bd5f617e91fc7cce67fdbcfe23d0102207807e1041516d9af307285b3693c0455e97694463c7ef465c021b5e123e2f9b2"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022029821cabe9b7b8ad34e577763e3b3b73e1d46d7745f176c0b197d45ca5120a3902203f6e4d8fb46b08b0f29aca1d7a843384f67f9543c0d6463bd506ed68830975cc"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "30440220567f6afaa8b18ee1310021b01d7a52bb73ee39b63279df7f6acb7c670ef03cf302202a6a04dbfd0bd1329b25fa9c0aad3bd23ea75b0609ed806c1a0f89af9c257a50"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3044022059972380988a37639191db993ec97fc3cc3fca337349656be22584c7bf4a457b022038c4b0cfc9ce6ac6811f95151ba19aa1fc6bd5d62633d521b9487bcbac10729d"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3045022100891252011593de624e816a4bde65d392c6a95e7136d25e1c3df87f55da4a6a9c022004c6662d8bb31800802e9e41b0f27e1b93ced79910f9200bffeea663f53e4e6b"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3044022018dac6574c89aa9a8b92bc4d8af9fe022eadad860baf6316497543e48e1bbced02203bb2cd4ed0d4f201be35d760bcbc598e42946c4eca3d3e9acc9f8ff7ee04313d"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220760c804178f8c1a084d4af7a91e77efd62eddf8df8c7d0aa2dff467330bb2e50022038f6a01b11e2efb2a4fffc8b9cb6adc8c1514e3cb37e1316a8f26f8d67bc95af"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022070e61333c1124c089407305d8e421506543b630cbea8bf51bb470639e99f788502202ad716dbe7b6bb19c7f13853b0808d98c577b835428e4bd69c076982f7af3f01"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220794c4834a6ae2591cf29b65951d07112bfc4644f2a1d287dcf918f7a890b689b0220259892526b885585d613996d8e5caae98dc25e540f46857ce68009e02d419956"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100cc930d8969fbe6470b35346155c0644392639277a5871362631ae64b92b8fa52022048ec82d4db747311e466bc159222ac9dd5da36f6506014dbd730a118309b0f55"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "304402206461309dbca9e52a41982a7e552c82bc4c9af6bfaf86eb80075dc6b1ed29280202203bf174d6746f7a0d9c9cb4a1f3c265505168e77a11d6520fc48b564505913590"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "304402206e9f01cf0e6fb5654079111f36e15151a6f5ed5a74523872f7c3f30049062f3d0220486fc213a2a0b5639f9bc73d9af2c8d72cd825f5065d07dbd674b39280811188"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "3044022072438d8ae8025fcb564b12922c23fa98f45a322befc9a4afc0bdc29a3f0b01bd02206c5d50c28cd89f889d60624af5a6e620b7e032b9ae8912c33d215f8d67a25d9b"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100f68b77f9abab174444dd6591cb0b9d27cea7f9ab6b505e18845021632cdfe428022077dd13be21f966ffa667b8d183d9b73b2862948ecaf07758e6296c3a91d19c8c"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "30440220337707d6704b19715b59259671fe9295f2f1de28f6fc30f88e241a9bdb0d5ede022065ccd490c400b259c24b28beab139a5b5353e1428a9f22a28665e3a2ee087067"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100a295338f63ca379908708d63cb7d42b09ba81deaa7d9c3547018aaaf25a3d06c0220309fc1107c3e64054c70b34bc18f93829378810884dc7b68497fa7a6fa4924df"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402205b25d1cb7ef6bbb8f6e02879e09117d0b94d527d365574f063dcad1fbd2d31ef0220095b3558bd1950abbdd6b6581a1920327382fe915b2e5a26c471412b670b4560"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100ab9c842aa2610538bc795232dad25e8a50e81d25650a906397add87b789e74e402203878fc6ecccd42a32ee6ca8cc012f809a46fa37f759bfb4fc76910468f672ee7"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100c7d481734cac976e96e751e52c797cf86d5a2fafa3ad1678247d912b7691f1bc022002f4706da4bd6dffd5fd944d29306b78f84db5df29b3bd9b8841ff53c8c23cad"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100b686e535824ea78c8da511c9f5578a692c8c564f800de448069cb00285bf53ff02204ac10ce2bcd4426d44f8e406d6afb253d4ac4b7d446920053b6d40a599b29732"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100eeddebb6f2d36b37e692baddfb08a1266c19a0b3d1818431790b82804e78e2e202205f649491e27d9519d9cbae1cdccaf1823bc7c0f72c2a8be7370ac1284678d81f"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100e8e4429d8ac6399463a70723bc8fe6ee781744051dc90cc7a219d7760c8c42c1022068dc3fc2e0931a72cd4aeacfcf05069c490958ffd8e01445d6dbe777912f8a81"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "30450221008f6e5cf2998edb97928157e4ee6f115735048b4443cb81d663c01d122b385d210220556955bea75a72150add3794231b9d2c09f755e7ca24f3b56b274f90b1986945"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022007fb9c8cc0284496623ac2addf6965f0d3590f6c665750ecc70da2e7d10e3781022021754691d2b82526303d862ac93c6bf430c7ed0de4120d6686651569e0d1949e"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022021dd2b1670aa3cfdabdc236deb284a4926735e44c944da5a0a91e28230d266ec0220792d3e213c04b24e9a8b6bd80a0b0282d195e5f610595887d38f1a5e06eed0f6"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3044022063612f2a7eeb596c7cf2342ec096a375b57f199eca9129e25e858049a18d36d9022078780da67893f8cb573a9ae13b06fae73725007ebad1ff8401d5fdb35111d942"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ba696f054c313316a45f7f7dcc32ee194cd540ba7dda0371923330342f639198022045a95216bbe7f6849de1f9dd239148a1200c3ee1f85680ef9c3c5cbc2f0d0cdc"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022071d58b918b46dcc87b2273564cb316c44445f4bcfdb40d960e621f9c8a7339d30220300b372353d940d195c9df948a21eabdc2dd8fda94a1bae4b68b1279aa67be9e"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100c2613428600e40453eaa16dc64b32cbc28e834fd1026a488b8111901e8a4ec4c02203efaf697edfb8c0c2a47b13de079cf3ac6144bafd828561d318d6c0936f28ded"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022007c87fe236c47368268c43a9c717cbae14be1c54ec437017bfec0e82a159056b0220618cbb3076a30cc37e94d7581b18794fd984dcc7ef80b115ff4caa937ce5fc2b"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3044022042b4a58ebd0437496554c7f55d8d3c4e3860d6f11584fe5d223dd8e7daf8996c02203eaa72b507522813bc2309f3aaff7554d93c101f61c64725828dd296f208cdae"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402207fa6c9184be3a43376dab2dbbea9a4d9bf122204d36952a674f12f2d706c055f02203782f7ac3835e2b27d79ffa86bd9d9fcc74527cd336356f690e3ec6e1f7a41cc"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100db97a1fa941cdc11f36e3c4f52a38a1d1356b05ad54d760f6ec9a6b0d7e1333302207c5a3082ab5efe025b53156bfe331284472f846d6bdf6bef266ffdd8c09fd2e2"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e2ba5f96a043ae4aac90cedf218743089bb91561050987cc58caba9698a439ab022073a4165b051af7b5c554dbb179a66a2bf51fca69b7f08dc59797d1a49c4ba0c6"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022007d216df344831690e2cc2b59a96e7caceb7d2f6e8a057915e155d40949b30900220286c5f55248fec292c0683181bb7711707a881cb59a4e87d81aadb79400536f7"
        }
      ]
    },
    "11155111:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "30440220086d1e2bcccc09cef4281b7768b18ef06e90c10f70137b8f8bc4aa3b87705abc022001cff702dd8732f6efd68c24b4f75d6f51a6070064aafb3ae3e497dcdedce5a6"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304502210082d054fe78c4a8c696b8a3304a3f77fefa498c0e28d8dc3ae07dc32917b1bc27022072dd8a83defe29060404e216cce22c0df554962b41d643ff5348134ce6e66811"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022030abb7cea24e748d101452a614108fe3748581f2edbf27999c4a30295824ab0a0220504f8caa915c09ee5cd762011307b98d097bb0bbc424109626e8a5c703a33790"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022008d53dd46c36b54011aa4e64e9f494643d7ce8b3d3bd26eebb9bf9f8fd8555d902202e065f02d647ab179156422b08f76e2557ff7ca04ec0adc8f45bacbab383649e"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402206d89382c1e48d7d01e24dbf57bbf5dadfc4d8ac61dae5d4453530f570a89b223022035cd63f5c5db22152ce8cfa69a48aa64cea37974c842e83789118cf06e522cbe"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3044022050598cd1748cf0b03fc05b50c8d9cee36bd4566c5176d0729e2fa97dc462b64302205f9edf0306bd9d9e63aa5f53a4dcc2095693a7d0525f04a89516f3507c7245ff"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022045d7133d3f02e471bb17dba73dcfc0e474f9d35f489f41743d5922cfbfa1d8190220261ebfa97d11ecd8a712a4d027ec8602cb3fec902219eb02d15a978d38c60bd3"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100a79b22e04c565e1772cab5838f0d43ec4fe780b0ece6e3b8179acd226ea23d0f02205dd2aa9bb775a54fb1369691f520f02364213a4b83f6a11b74a570feb6e52e8f"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402207b233cee21d578b71199b88abd481759f9432aaa4e8bff82b95571662810ede402201f80c06b23b4188e5d14a78a27f95a659ab52c58c3571d7b74321c2e579fa09b"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022060213c390bf1f9cc56486f91555127b4dd77fdcae79a6e2a99f53cbe26298a8b02203f9e5a825bb511ed924c8016b5e425cce4eff08a5462a9b658e0dee1d3196c01"
        }
      ]
    },
    "250:0x6626c47c00f1d87902fc13eecfac3ed06d5e8d8a:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Wootrade Network transfers",
        signature: "30450221008cc1354ce071cf6fca73c04ac748e19c8f38059890ca8edd24997fc8eee0d421022075a65c4313296d58b394db560977203f92c4d3257a446b883707857baa701ce0"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3044022009821ff0b77c78535056f438d07921ce0dbd7fec6803d5d03ee4b01734353f7702207f8217ca8b546664e16641b1ecd2938ce7c13b2479bedd177cbac01ea726ac35"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100e05871b3c8ea11e281cf51c4a92cfd3d011895d267fe45ad5bae990eb4f6eba902201a3ec731f73bb832b0f4f6a2064736b7665f962b79e78f8f418455653361ead6"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "304402201375ae2beae14ffa25183ec12e04a513639acf93753bab04439c6341228de186022037d3b4e6d1f3949dc59aa97b007a9d10fa15c35a97e75093b4d193d75d11ba17"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402207d328335130376daec05993f90d29ff1f096c973e886f1780e4c5a37f597c8bd022021d50fb46839f197a5743f8d1a7cf5e19a68c84a4489f8000c3aa69d970f5289"
        }
      ]
    },
    "250:0xfb98b335551a418cd0737375a2ea0ded62ea213b:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit miMATIC transfers",
        signature: "30440220474c475b4d9801f530cec16033b33931942e10e0e6545815887a57ca063a658d02200c5d6424af0cdf3ac6d955306012e3d993d92e0d46ab82a3a20826ab8124a701"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3045022100d39fb35bcfa51b98602bf4a9c22488fda16b71b5bf65ab813d40c8b0c88be6ee0220034fd5b163764ca381a1380893acb6f20dbda5bcaf39577089ca2ed13df6ea32"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022011499af7bcdcde93c2b01cf992ac4e9b4b27eab58c19880e9ecccdb7ad4783b802207a2577e336ce3bc7f88644a88e7cee2488607f923b36deb2ad3bc23dadc110c8"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100afa43483cc8ed2a05c90d4849fe4b91bb39e903c0e6be17b35a558b8547f44510220698165919ed9d7bbde4bd68c361b89b63f327aa7b7b80eea0c04e6b55d33a44f"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022077cfc487e7ee97d654e8d8e697c9b5c601010abbe5da6d038323585a7d3230b602204138716322f1b5dac6ae5be3171fe93968b64be46185241202e241f77aaf04f7"
        }
      ]
    },
    "10:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "304402206cedf6d4feb10bd266dcdedb134bfe41bc915a7523af8afea57577115bf6e00e022053d8d852c11d3cd7ac72f8628dbd81176d7d3f3b94022890db40f2bdc623c33e"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100f73875d13abd7e873e8efb7286e4a6f03d587b62378e4bc9b99f0ab7cf12c61502201f0f83bfe5d3ec2074bab7090869adeb28a4b8ca1708edeaca2ee86917fd1e7c"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "3045022100d7a83bfc855d3663d06e71424144b765d33958d85286feb6e9892a4ce42aa6d502204d971f633f88ebac3fad39eae7ec9c0c2bc2c975567bc36fac6fd44ed6533642"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "304402204a3c4482f8eeb6d6b98b3dd419f460e44f36fe56bb51f785935033c55d269b37022077615aab2a89b767decf2c8586cdef0e0b6d5cf0cdd33e82f6f9af80e8c86345"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "304402204941ba080321fc011c2f4c925169621bb460fbf19a3aa210d8e2bd2ba64442d502200ce5ed6381f6558075e2575628d4c7cc07eb874f88882149865693bc75747283"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304502210082bed37a903d6ad37e596f2ceb5f07aaf8385e0cf8d8b9725fb955282583fd20022045afbefec5627f323b28e9bf985b53a38d2f9d85a14e2c6aa788832da09d01f2"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304402201b262b0175a6f4f614087f27f3470a4864063109f98ff378252e6b3e24c10cc8022032864a549b280ee714e5cdda0c82ed3be1b543f80dfc3482d7ea6f935e4e97b7"
        }
      ]
    },
    "10:0x11431a89893025d2a48dca4eddc396f8c8117187:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "304402201f04375e9e11c524b30bb0ee376da39b8a3154554c23596381f475fde0d98ecc022003b62ea220df2d9f142f7ed1833027e62c3ae792daf763977ab552f9a897b7e6"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "304402201e7b6591a30d29b73962b253c14ef29237776c7c31c45e628fc0c0c337bd2d85022038742407431502920c210039681c983fd5136c66f7441e60d33e1323a401b672"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "3045022100eeaefdffbddb5feed8d5cb865db495f0e64f7e64ffc2b9b1ccc250b6980f560e02205554301581d882dc07d0d3b68fd32bc97c3fcef797df752beffaf4e57e00c52c"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3044022073a7ea82edd6d37a1334bc84c2c1fd4f48a4439d61dae6b4e03e97403b6e75cc02202e52dc3c1e7fc55edd4b26735b315d722da906c33bd3e80cd56a10818f26217b"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100b97bf5d69391af6c1a807abb1c82ff6fd1cb7f8f8a38ece7989e1fb5cb66efdf0220491ee3aafd22725cc9f5ef8e707b09b4b3e8694fbc7c8f565eb083e6e9258e56"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "304402200bf15c7b36aa7c139f6aa655e2cd70e65e74d55b6eccf86d4031ce1adaee10220220147bd4e0a9388376244c229b02c92088e09676ac1149807efacddbfe05e2fa29"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3045022100b100b3d1f922e40319ad9025bce6c60f4393e7651dc3ad3e631e7f53a818b57f022023a50bf850381f9c21bf28b2364b8c8c1e18e90a7cee46a493b46d493796b06a"
        }
      ]
    },
    "10:0x11431a89893025d2a48dca4eddc396f8c8117187:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "304402204313086063aacc52b9ae3b3ea026e0bb927634dde0d381a1b679789ce5341aa4022000bad10cd082f96999c05eabda4fc3fc3348c8b8a3ff3960078654f26c4fd28a"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3044022059b5e764e094ebc42cd2acb05a5e6cb86d034cb245e7f3f41c39cc01e33fb0fb02204e0b4899a3685ab3b0e8e47378d3ddeee18f0fe6ea614eb43bfd8288a884b0b0"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "304402200900105da60b5d82721921c1b17679eedb2d5a446dbd1edafb3c4d539ecb3dab02201362f40c349ae46158c6fd535dc05c7c2253b57429ef84a927a481cbd2e1c9a2"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "304402204e0170fa8d9d08f2cd04274c5bc49af2956e44de671fa19771c9467bbee136de022072bee28c1f03437b514a5c206c9c0ad6974e2bc20680ccf966185d0b9b89b1f8"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30450221008723f27fdaeaa2e369d6855b2fdd17a681ccaa7a84bf729ebfc5864d4274e7b502204e85473bfc996354e3e14bad17c5ca194c125dfbadd1bfc4bcf501fb26585634"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100be252761d5c2661c5e0695f8657bd120264583ed6563f17b0f5439540b2bb0ef02205e36630bd5a62becfca9fc37a5a6d83fede8ec2244cfc7b54446a7441b3e27fd"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "3044022026d8378c54aad02a863f9ed4ce8eaf92c62027e9353d47dd11b34ac06f0e27930220374c5f31be01e8a68a71ffb0f61537912f7f1c3f9e117c8b3a2935b6b3f92d2c"
        }
      ]
    },
    "10:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3045022100d4bcbf1df97f94d85402caee1799badf5fd6dfd9926981c389436d306dbda5c2022019ad7fe4ca5b2c8e63fd51bf70437b786e0b1cc2c0f3070e3cfdf70e75d6bbdf"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3044022009e356dfa8f01c37d5fbcb2ba06e72a2a0ffeb3251055f3c686a0244401aa7e702207e65bafdb36f491931261c08fd583f329c2ea903de28327bfb069e1fe7ab5471"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3044022025dfd47b46b43125781d1e4b63161eea0eeeaef93af87e95162b2601516cdbe5022060156847137356e6ff66ef5a5d72ce232ffac323be43e71cd2ccc410b55ec047"
        },
        {
          format: "raw",
          label: "Maker asset address",
          path: "makerAsset",
          signature: "3045022100e2ffc41ce9f722d7381689bd9ca2d0bd4598fdd543e7529d7f0bf2ae28abb3da02206a43996780b13ff0fbf346d7cd5520c759abf58461c42b7bea51d5b6032eb946"
        },
        {
          format: "raw",
          label: "Taker asset address",
          path: "takerAsset",
          signature: "304502210080af3a8d3c3e683a503975519535ee054af035a7ba136f2e981b01d7c6dc518b022012ca47f1301c7c439180c29e13bae36cacc03bb1c1b9ba8a505b9d035660aa79"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "304402203600b6973b833d904521bde12b73f52a1f1eb71b45a0174e1e579b33db55d55e02201daac27bb0e1d278dd34fac1be2205f38888c829fba922f7e3f48347e0a98b1a"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "3045022100e6937b6f434efccde4c4ddb2fa2c577fb9f4fba61bf2fdda3bb27b0b49e7274102205fb3e281767d845b230633092cd17e6b5ab928e341a588d79055602cf3aa29fb"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402201c1cb8f2cc362d6f10998948ee009df1912550cb4cf059d00447adf321a97f9e022051f2d887cd8a6a6ac26ab2afe8016eaa5a130661da74f7e482940278423b98fb"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402206b842fc4910a1bdc77ebc9b2523d7b1ead75f9d187c42a80ac87e980112020d702202b4c2b9cb8ce85712afe63a71cb542c5e5d3fdcbe33b9ae746fcfac13fca18aa"
        }
      ]
    },
    "10:0x0927fd43a7a87e3e8b81df2c44b03c4756849f6d:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "3045022100c66935874c1f07e7ebf05ea2774b4ef970aa431001c655f0d6341e0c4d142af602207083981aa538efdedaf13bae8e04ecf0bf2bf1fb03843bebd8ddd44c4048aa81"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "30450221009a560c4f10e3b3d91d78d08b69cd2c8bcc48abb9d5a6da1bca1aa5a843d5e82302203cb5df5d1676286617dd169942b42530a422328a358e8b143f62c4c024547e16"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100ad531d0297f9561bb4077cda4896e1506104fdbefc05d1cfe360cd0e4810a98b022013ecd430ad3773ceca05ccd82794272768be0ceb3f1d30e12d331a73d1e9080a"
        },
        {
          format: "raw",
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100cb9280d868175b9645dd9417790419343e5cfbb481bad8e2d3c826d9b301b261022058010b98a71b91a75804672dd67361ee4f96dd7f5cb938f00e355a3aabcd8f9d"
        },
        {
          format: "raw",
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "304402200a7e0a5503d87ca2489dc26cfabbd0fea9b2e2aefec9c6bf4e18fe837c7a6ba00220273c59c30647aa17d4cddfd85c3d360e8659818d05382b3e288b696cf518ae29"
        },
        {
          format: "raw",
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "3045022100ce510ba8811ddada61a9695cb85ed202ff9af125f07f2f7995ebf1d1bb33798002204bbb2bee209860fd01a72df16c07e4903164cc2a3c535561437d63970b1ef8d4"
        },
        {
          format: "raw",
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "3045022100eb69ad54131f20195cfb2c304804405974123c2eed471c3fb6b3476ee33a904d02206c17f1c4ef4eed0df5c733331579004e3828287c5d22f19b43fd26d09600132d"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "304402207e358ef75ba3cbe3998df005e03ad4a8c2bdbdfaf9777d737242d1c63f5247f502201c2e916ef67cb4452d1b226faf1a4e38230a052865aeef6437e0a287441d0ad9"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "304502210081d61e89adc9bdf731e843903c80d4a42236c4fefa4782b912068d3ff12dfd7d02206c2c7569eb61cbdc7b842cd9a8c173cc7d90ad3be3537dab8373da4422adc2fa"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "304402205117307916d734323402185a37f2880822dc7cf386903688e57a4904a17891f502200e1061ce50bd198ef722159530c48217b93e2093afd48c1a0fa30aaeaf488ba0"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "30440220740a659e7855befa06833ccbd0aa48acfcacdef7c6a1035fbf30263a19576b5802200c46e51e89f469a121a31de0bd32e1ca9f3910413950415548e13d4c7c2a65d3"
        }
      ]
    },
    "10:0x4200000000000000000000000000000000000042:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Optimism transfers",
        signature: "304502210097b5f9c605c8649a848deefb70692f9df06dae6be89281311c03eaecc6749993022077d04b2d8bd22116067e5751a36b2b5bda5893dc05c701acadbb0a94bf98a3d3"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3044022068b87a8aafe0ac8591976c69c4e2dfb8ceb78723c8a01ca31893e91c4ee194c30220204c2cb5a401bb34b81a2794db238e522c67e5c9cc4b40a6c5a20a8ea05a7d59"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402204bd9534236d84bc4c066e9361ac77527236cd070fa55dff80156394a3cad0b6102203a1db664de0ff29ae87d1dbecef5162df0e85b84b5e7188f892d974849855063"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "304402207d83d323106f83abeacadec8ea807ba78fdf69d8abf2090fe8cf007054122a78022030f7164813aa07384cd4a9db4d60448eac0a2cdd0b79253a04f15ec81feff8bf"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304502210099472ce1f606977f91b20cddf79832490b1eb144876a583cd38d59cd210e78f502206bf56a5b295d4b5b7bd7332554440142eec32aa8660df237033c89ebf3b92d29"
        }
      ]
    },
    "10:0xb0b195aefa3650a6908f15cdac7d92f8a5791b0b:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit BOB transfers",
        signature: "3045022100ff23c421cf1e8bcf786a1a7812951b1086ea8e76bc6509415279460f03cd1d260220759b1f0e1d701c8778fd1a856b1c956e389ee2e70b8e5e0a57b56bfec1d31702"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3045022100921dc162a5bb3196f691a111df75007b16081bd9646baca74dcc70d16e7cb45d02203b6a2cb04c443a0740992b621cd69a6ad8760ec6e41cf433d34bc3abf481d76a"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100fa0c6662d99d0cc3436d88a9b20e5241e77432a58c1e2dd57de70b4615ac10d2022069c75349a829594ba80774c553d5467f6c911c29e3590552c54cf8514e64581d"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100b02b901503f4711fb216c354ac9de7c7b62e4f1a9f06f207a981fa0dec7e40e5022013e2d17c8d4cb31a30799a55fb6a8c691da57a457727135db1b5f8f685593e90"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100fd19c73e1627ed8b2708e48646535f03ee5422bc2bbfd08481986ee4db242e690220577e995fa6fc4bff088356e1b2153d58345cc54f6f4ffac912db862a767bad59"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "30440220089be7e339efb6b42b8e12dae2aa08f3d510d7a38b52e8d91c4f29053be1d28d0220766f9f63ee8e184a757c926b98e1121b04d34f276ea4d1cffd95d923290b24f3"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100f62470b201a4ea7a930f13173c4472c2a2e9bfa38b46a03f6279b170196daf010220033025c21c1e863fe76c40415c5e6219ab9f6f546b2c8c9c940a5b133999767c"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402205a98548b5322b602c94a3e01bbc36b80dd359468a1a366e26621498b098b631102201ea771630e801681fca25818d1c82dacf698d4e27cb7e172ec0c8686261ff2f9"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ce732c41e83e74cd48b2491e3a2bd1be2b0f090d8a41ff546d252f86b2bd89510220280153a526dac2f1f6e0abf8871e826a3d0a9a1490bf55559f9ad0d4cfc7a9c0"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "30440220245bb4193057384913be0a1ea556e478b1932bdf09bb9d4b895f0e1a32203f8e02200cec94f0bb732d8bf01b2a6d2503580794a33370157ccb408f66078f313e2253"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3045022100f607f91959ba77569e1bbc520fd61ebd0cf2c6b0b4bfa449c45e86ac49f048e602200a1f105838d380ef60f765dcb0d3bcfd2eb9af8dee82994a942bf804eb5c144c"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402203ae7648a1fcc87edd672587dcd9c4222aef9b119eb5573945982eb4763c9c110022072d0a4d1e23db36c3b4852bc61b8500e0a9b4a58d56ed6b71d8491e154e1773d"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "3045022100d89ed36285b1474f6caac45467ccf5ded7e63218542cb36cbbc25970416479370220296bb6d4643dd43d842c0f52227fc3497c23f8402404a50537e8e6e76a0406a0"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "304402201e0da0f02cca490ca1c231089ef95664fa830ffa1225e1d66aa217034f988d7b02202fb83a698424fb3434ec61cfeb6db7ac565ea318145450544b6a3d509682f96b"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304502210090e29b4ae8364ce6fdf0a1162a381baf1db0d9654e4098e98aea191bf5dda392022014e87bb5261fb8ab9d1d1694ed928fbadfa81810fafffe5b684d255c4570ee1d"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3044022075f4050f8ccd04f0832ac81a5c73d12ddd78baad003e81f5931ce2f43303f14402203ac51a3456ce84ad7c934fe30a469b6874d47510e4b097b386aff5faa214b975"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022053bc0c1caba1f2a589ced91e416486419aa499e625d8fb4256675a3216bec772022057698f1ed49eb612601479aaa33ab77b635ab38dcce54f8d354e46f08a36a566"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100f1748b0339fccd0dc2e7780d701816b551b92c01c9a582387c9c5f19310c4d48022070a3ab6e0d49b285ca87f58ccb4eeccc979389382ffd6390e0d0398771cd3cff"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100cd701a6cf3d4150d9ac6efd79e72f790772433dbde62cf4b537b5ae2c51e0d44022009372e93db760ff9d6fe88c9a912d1e1595fe0fa85aa53ef759e13ccf95ca87f"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022018740d5b88a5a9245b59148cfb26c2728af523a4ffe23329646c6f07454721c90220426efe50d47b3f6f051ff70a132d93d3d549dd2b9823725bc2fd8e8affaf1dc7"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402203e43ecd4ec2084760949aa56b7fafc59c251a4167d23282c143fb656e336ffca0220470c45ce3711bf8de3be65c5dd969cbf3cfb48ac9ccca4570c08dfe331839326"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100ee88e0e7b6a5d06bf2a5cbd4e20e18a7ab32b6a6992855922666fd09b0f7f52a022058ce3cef7ed4d460011cdae06235e6ec5b0198f73488ec079618fecfe96f6820"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "3044022074b7ba8d84ae723b378d96840f67e34e42a7cc8235f92809cbd38acfd8e81e3102206a4035bc4ac05033a505511fc81fb16ec4b7afad149036e96e209e2c88c52ec2"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "30450221009320153329cc8967b12adc5fdfa61fde2c57807a552ee970878071da50cfaf0c022016d4cde8ee6a8c630def520bf7a9c06101d6029bb0aebf5709f839a824d7fb65"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "30440220025edd135cae9420525f4002438e9186f0d829924275245feabcebd650df9c50022061c4e20eb3a08b73c659e6a9f90fa9de0d5f878b2391dd4a4025bd8412cbef38"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100cac79398284dff0750489589096821ca509c7cab28d7c559fbec188a2c5260a40220138e9660edf332876e210fd0f078763398b9f3b974e2929343a52c41280bf1e5"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100d9ebaacf12930a25b5d71a83f4961e6be38a92fdc195c80d1f387a65620a9e48022034528f3903c1750d88f3072a7f370251edc0afae2e3dec64104ab48b8c4c9e05"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402207bc1311206829d507968b3e84dd0dee4ab691d421af49140529529dcb100398c02204dbc969c87e22b6c49d0a4e380a39d4bc0fb38cbfc6d7c1dc7d3e99b205d5770"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402205fa34253eacaa7d0dedc81c750bb6ad845b3963ce55c69284a83e615e9b11451022048df383dbf5d2eeec025da0cdb2bec2f85a3aa71eb6c0304fb04febdc38aa97e"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402202879f7e0045e9f386a952c7c11afae1b4468c8b2109827b73b70e4146175512d02201230b61a655e972e44c2cff0dacafc125c65c12fdb609baa25f308c8b5666d18"
        }
      ]
    },
    "10:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100cb246a5f272fabec7b7d66d24b5a0daa0965a3eeab2fbb34876d50a88723400e0220561a0b4b024e52b8f385eb06fe5e1b3d473532724e57ce9866d22816c519d422"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220057cc51cbcb260461c1142343632ae7b3e0e1203f6e6b2ff65d2db026a05fabb022073aa96aebbc3809efc58222cb3f9699e06d04a593ba971764d8680b4dc02323f"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "3044022075fa48e4ee1908f3986eabb7194c1de692d3e9735cd91cf1bcb942fa4a1f4ae6022018417afb2bf9a4c046712f2066a19261dd56ced9f6e5ae15c271fce34ec88733"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "304402204984d52189220650b0f90cf625dbbf721f10b86e3ad28075940bb17b94613be90220141f11d66a174f04322abd6c43732c8a57c0f16cb29cda848f62b33c6b139cdb"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3044022036447c0b1ac58fbe76a276241c6ab1d4f2734bdbdf7cbeb2e3730f3c069c96d502205ee198eff3b8d27c4354f037acc6810208c8d81a670ec781ad4732954ea2c247"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3045022100b91c95b1169023fd3cc684864a0d3d9ec5e4aaf7a5d668782550a101112936ae02200103f3c7328456f37999b24b17da7226941f55473a2bd39ebc642433b7b0ead8"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402205d4f3c21a2ee2533a1738bfa13f5dbfdfea54cb74bec14963f3b98b1a081b39402207e4e6670289f83a4c9c7a34ab7e3ac8c3cfdb3e5a2064194a5591d1f0b378e8f"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402202843f21aae62bba18af01ec031ef1d4a7ec4187d3c111933913bbdbdac36a9a402202ca64ad80ec886752955ab7d8b05f5ae1b8927577da52eeee9ded32133901fa3"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100cd8897444bd4e942309a88278bd980bf04c28ef47d3d5084b09a1239db0d1747022046f871ef50a4b70c350dc07362838df1c82c6900b474b045d2b773e7111c7e99"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100c2038564accb20c9518d4d9b870bab149ba12830e4f8cfa6d847ad02218c60d20220152b9808da32ee0096db0159935bd0ffc46fdc53ea6537cee8edb694059b516f"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "30450221009bbfbee758402c58c94964a1c05b0025619dbcbba2cbc3f1804194074086932802205cba2cecbad6e4a1e742d8f97a15a9aa267e331d9bca94a3a3a3fee833df5d46"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3045022100fed3b2d3a7ee749282fc0a5104e291f01e04e9322d2ba0e0b0d03ca57822005e02204df5d4d58fb7b6b2bb8beeeea085abf11cf1dd8864c9bdb01332d9e36f1b30cf"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "304402200c6d07634727994865a05e31e3010e4c00f17d8411dad17f6661895375bea71e022010dd22ec3a25677911b3cd6028e2e8e970b52c6c6bea366a7282ed136ef16f3c"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022070de1aed086e82cd1074c672da6f345cde3f38b0bc3bb589b79283add3a39f6d02207e19e2e44d856616d47c32f378bc6b53e2115ec183747cd1832a829faefa44fd"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100e8b938aa9e95b022f36d2915d4c4b8c1d5731352b2d8b6f950c7f5a7656137c10220063daffadea8558fa61a654c3f266a4893d43f3aee2c8ddfb82311a0ae4eaa98"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "30440220722143608b4d0dacc5ae754eb195202ad6f0a6206cb93eb0b474148c05bfa76902204df25ed00be2c86433cd13313635e8859e7225227fd8d1daa6afce6b57cb01a1"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3044022018ab2bd85743520bac0f1a12ae2e507dc5213a5dae15ab9d4cb96abd75a10c7d02206b111247d5ca66460b80458037dfb1cf94dc419aeb0c893afc111b3e7dcc9f73"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "30450221009f1e977ffe41b7dca2b2a90b638049b4e6ce9718a0742625bbd250f585700b690220046b21b0365d5f0f0c24379659645dc3ae0bb3172a6786e6f470277a3c400ef0"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "304402203dcf69efc767b5f912e48a09c797997426908b39948d79398d59f5cb03ee52d302207f0ec591d4ffb181ac91f5642f9399b30c705edad68d8cdc87e9f2cfa9ed3854"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402204e33179c2e3addf72fe73ba226a6a66579affd5c5729a7f7ab974330e7ca49ce02207cfe99ecb72b3da4500630c511da1c13b292ae6fa947a9f4abe57e491e4dc359"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "304402203919fd713c44c77eefbca735fb4183adbb5623ab06f179adc3c507171aa8d20902200822358aa225bdd0c0f53aa54e8b72d04faca88f24911cc2f45d68bb1e700de2"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220394e133ce4dbedd8dc671de0efdebf6879db547b75edbdc9f99a3e2a48da803902207721d57f8afac58a41dc46d5a0508cd8de5aaa6abb8911e00895b6838d620420"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "304402204c003890b5df1bb86519ec0a035921b850d50c1b28be2fe6888eec813dd95b8c02205a9915ffd8706ee9ad1dad003b025e5500ebb513b96d3b263805d5c00ee10778"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220206fe6edb38f47699a313c39d450d3e1734dee42f1e80d3bde46b4a328e2842802207dc1b99a14403d2820e4b49a50d74d12d5002c24938c87d9e818579398c3d7d1"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100d256adae757c57dc2171712a501fc5a747591189c5f566b53619e0ee734f6b9d0220357cc60df215a1a0656786dae9a4f8c0538848773eef6d49d5d343674b02d312"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "304402200eae2991ae611a1943fe8abfe04cb2e3e04330628fefc2824cabc48348a72c0c0220174bc06c3d0e197027eb8a760ad9aca3f0df8f77ab910a09ef8390c49b98c2be"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402205fa727d29151c9830043b6512c61159c1ea8ea8fd44b87c0596b5bdafde82243022017d97ef8e14639e37fe3b613b70504aa43a05c41c8cd5b03229e55036610ecb9"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "30450221009413e0559f0cf7aa12bd40386be3cf068c8a8e402b861eb48ab9f6a9c4042556022065012bcf4d724f70e07869976adac4871dad5d73434b939b0ee4d517d3a9eb35"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "3045022100d04b0df120f2fa8cca6a0c30a2a85fd0aafc505fb4280e2e5855ef6ae2d5c9a70220650cee78dfbcaf675bd0f48cb09853351f81329b56f7862a5e8d9739f6a59e67"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3044022070160446ea33705aeaffbf59f8d0d30e001a60c84827fc3bc0ece39c66ea80b0022053355499c0f8c0c560e028afd38034d4fc72e86967cc93a71a88bbe7a8a36cdb"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "30450221009574f7898eda64c90a4b41d0c1406be84e60a555a1703fb23a37074996cfeaf902200ae43416c2999421e912e23d392dbdd168bf9d5dfcb04324094cb1a0c7118976"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100ba06a297e0758ca99a5278e6fc854cd6684183501421de6db85c9b9d7d43fd5202203caadad0392f98b8cd4749ad2e7b47d0a8a25581374109cf33ae4a78c74facfe"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100ed72ddc67dd730a9c06f128b1ea5073a6d78a6c4f4f76ef6e140c5298cbc11d4022037bbd5706a289e0f540c48ebb48bb1dc6037eed5696a65297fff2c0f38813872"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "304402206357c271bb041a30604462b90dc60ada77d030eeae1fc29a80c4ab02c2644b3b0220514f5ee06a02abfb743eb98f583b679255570908b8193759bde14d39930f944c"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "304402203cd767b5c18ef0ce48a835308749aeb6b43727b08f6dc33c366ac4985393396f02207af2aab094bc0955447596ef6880447c448593b29a6596de51f7a95dbee8b2cf"
        }
      ]
    },
    "11155420:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "304402201c8f5b0c36fb939b541b89ce363184880e729a9458421f09474acbe3ddca80af0220418c39c98965751cb693b0f0f85397b824bfaf13552f6f3404d994551a73a1df"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100b9c663e4d3a395b429e0a08d4f72f6667ac0a347a30aec6e190ce92665dddde902203ea26aeb292dcf2f4bc8004d02c125182d5fd2692085e40addbc43c90184f4aa"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Approve amount",
          path: "permitted.token",
          signature: "304502210083135dd29dc57fdfb7d556f2292fdaa43196ded176f3c87ffe79634b9768eb430220646aee87d4f143ced44632d4d8b54e5f9f44433d50b7691f20bd656e07910b20"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Approve amount",
          path: "permitted.amount",
          signature: "30440220744407f34dbe7e4f8bd89c055fb352da5e823529678f4af8398f109425cfbb84022011c50a670596e7daa4eaa94bb5649cffd8b400ef991800a268df4dcae1b675a1"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "3044022021a552c1a12877b1278524ae08f176aecfb4d26c84d2ee543b683f956d989d3e02202bf706324685ffef89db50dddab34384280bd71bf09cd11f4f78e1bfc5a0053f"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402204556e8ed2abf2bd85b6d0073c05192a99d0d4015bf3ea13294001fc4db754dd202202c18a8259eea4e1374d567295d4ec58ce6b0fcef2004474bf22bf438312ed7df"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402203ee1f20cafedfcb944ea8c2e0bc7556a718c03929b7d94cf4ecca22d765994b1022079f358095f150c5e4d59ddb036c34e3ab4557561bbe64ab40c6b91567aac9b00"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304502210097f76005925a78c18ecc5df1bfd730963a1988e67009e319a4348afe768986df02206e1b4e5c75b65bbd06ce70fb50d4a54b3bf6af3db8ecf2f29fc8f0b5b538ceb7"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100c975df466b0ca53d729c8631d162b42a65119e0a26a116b2f72fb4e800b282a602202a964d338ad50adc7b66d9a263cc19c8fe662381c029783b622bf081629a9f23"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "30440220519c4f06f9d6dd3e085dc6d0a6de23064fa602f3dbcd27721eefa7903b17fc8f02202525070f0c4eec3eb3506cd98fe0709b90e13afdb21d1cc64b66e98057fe8234"
        }
      ]
    },
    "137:0x111111125421ca6dc452d289314280a0f8842a65:c4d135e3a126166bdee4e4859b77383074c8f046fb9b83e9cef7138c": {
      contractName: {
        label: "1inch Order",
        signature: "30440220295e0aeb17ca0929b2a94c324d67d0b5528aba268177f3ac297b563141e0002702203ac360d9fd0c9c0c12279d1e73bea5d549a1e8141f454d88fbe1e8ef970e6802"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100b820e4dfb1a0cde6dc97d9a34eebb1a4eef0b226262e6788118ab3c7fb79fe3502202d426a388b4c3a8096b3f84412a702ea537770e61ee0727ec1b710c1da520c44"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "30440220015921d09f25c9affdb99c858b4ed07cab1a8c81674094bbc35720303a676d7b02201fc7c60bacf6d32d89d3196801d5c8bed45156d6a012f222deee6aa4d9e37d8f"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3045022100caf1b5544825ee057566f9adc1c9ce4c4063936114c89b2a003ae42b2df0ed6f022059c98d1dfd79b83f325cf2e787d66b18c28413c66e8d805463e077ec534f7609"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "3045022100ff727847445431e571cd2a0d9db42a7eb62e37877b9bf20e6a96584255347e1902200a6e95b7f8e63b2fab0bef88c747de6a387d06351be5bdc34b2c1f9aea6fdd28"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100a59dc479a838a813909c140a15e6b65bc58c5633284bf973c436de5a592634e202201e038fc7995d939fccd546e4c85e793c0ad451216e36a4edfc7bce5be27808cb"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304402205c5b1740d2e74513a9332e3160ebfe5996186c68141055a95d733d51eb51dff402201a1e085dcd9487bdabe9e04426cd8b043c5bf158843fed944affdeef0768ad43"
        }
      ]
    },
    "137:0x94bc2a1c732bcad7343b25af48385fe76e08734f:66f8fa6a00676333f41119fd5b1835da61bda27928bd23e7756b5337": {
      contractName: {
        label: "1inch Order",
        signature: "304402201b1d17eea87fdbb8e54353a452304fd67862441df16d610f532ab06ebaa5ecf802205a18cdb6cb6b6825670f04aa7aa2ebeb26436922898f4d25f8ad4a947417cc00"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100e1a47b49e860b2be7f7325e5b5c00607e883ee4d167cbd85e5a85ab8e41b1a2602203f2a7442cbb889624d51e4e33bc1b2a4f11aabf495d0dd40fc903148432d9bcc"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "304402204eefc9722671796aab570e69e65cd0ad67bc251b14418ba10895e740b6fb4c45022020084e7a21b3c3e0357250c390085d80284cd71179d2b1dd7474cdc6a036b37a"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "3045022100d3413cab0ad7042603051fa589405300b3d4278351a84ef2e673a0c99ff61a0d02202701a4c7a207d569b04df933663e1f82f7b688ca51fe9802b9181613a8361991"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "304402204959de15d7a52cafe0126c83455e1c5cc957add7347be1e180cbf28619d29d34022066bad83af5f8f67332f3c1dd9d60fe376b9bd581e414a093db1a2597c4c35439"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3045022100daa96644ec41ef53489dd7c96a25d3efbaf6465f66eb9260e5a7e5fb26ea10cd022076103253bca5791a2eb47a57c1c471688f0ec285186cdcb764aac38d34190ec4"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304402203a2f8cc5b18e596424e3303dac52abbf1becc37f652aad68b1a587d422f4a49d022063bcd24256241623c9ca134c31a2faddb793d85b8f47be34bff3b46dd5576157"
        }
      ]
    },
    "137:0x94bc2a1c732bcad7343b25af48385fe76e08734f:c664372c5b821546cb3d7068a746865d6ef4fb48c2aeadc0ff9fd61a": {
      contractName: {
        label: "1inch Order",
        signature: "3045022100b2fef9ccda3203d4d711b37b8c21dc777d31a09653ac849a1e16ba669a785895022019501ee864d298c314a0e596b1a3e938d7a8ddf1befdaae0c221e8354729ba5c"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "maker",
          signature: "3045022100cf26f3f40e07db7986b82bc30685023775e69a06d6130f266a231269a418a06902200ca684076d0b8c364e3eccc772e96e28ee09783f3d6962f5a655e26e1d93e4c4"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Send",
          path: "makerAsset",
          signature: "30450221008bfa64f4309976abc3bf834d5cca387bf2e6d7b735e249b4c893b636e1b8233b0220653ac8945d7647a62059e50be7ae720e99d6f0df96c88327e4fde25b2a036229"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Send",
          path: "makingAmount",
          signature: "304402200ac929f206d584e7d83882e95da6eabae4c2498b5d5941e31341d572d82b11f002200f9812ff92d534e0df81bceb413c249177779ed0f8fa3f5b6259e304d87ce5be"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Receive minimum",
          path: "takerAsset",
          signature: "30450221009ce6551822a67ffb7d4d152b091d1a9bc67c47748a6e6d5a5d2c969a31d2492b022010b02868c85e42dbd46f053f01763b66f444feeac962fc4e49caa1c60541e7b8"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Receive minimum",
          path: "takingAmount",
          signature: "3044022028d210f6cec67f371c32b377ff8fdb2cbc71652a9d594e6cef91190a90cfa93602205edc2b7edfc4c1367a90fac0c3f3a869e9ae07e290aca6d38a430aaaf51d6fae"
        },
        {
          format: "raw",
          label: "To",
          path: "receiver",
          signature: "304402202f22d2ebc0588d08c34348ac50a8e7be90dd3eee6b6692c9e4abb5040d119dc9022059039e0abf6973ad32c72a6f333c3f370d7d0b24492444000dbc222e0ad859ea"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:9e97b4d1d211350352bdbb5ef45c4cb52f988d93a2d4a8ec6e675d14": {
      contractName: {
        label: "Dispatch.xyz Follow Profile",
        signature: "3044022008ad0a8cfe8c2630848f05e54ab93cfd1f5c301eb52cc74537d67a56751932bc02206dd3e78f5055b6c65a73905f840963b2f696afd04d6d472f4185dce9f6262821"
      },
      fields: [
        {
          format: "raw",
          label: "Profile Ids",
          path: "profileIds",
          signature: "3044022079ab31498b3ef74e744d5414f4c51334e00b20a5ad7c0a0ea6f463462d0a3699022079b29776df1f5243794cc128f19478ba586cd3b9378b5809740e9980763f8d8c"
        },
        {
          format: "raw",
          label: "Data",
          path: "datas",
          signature: "3045022100c04fb22aecc349de63571095782ea34cde05e576095c980d5c86f054c1a248cc02207f5a41199516bed46221aebed4f0f377508d39d661ef7f6ea7b16877709aa4ce"
        },
        {
          format: "raw",
          label: "Nonce",
          path: "nonce",
          signature: "304502210090109424df964562737fd1b5ce2f06b427856ae933c37f279af199f64fc530760220290cf4491328fc947f4d73f0032e151aa09caf8e085d0f0306fa355c0624dcac"
        },
        {
          format: "raw",
          label: "Expiration Date",
          path: "deadline",
          signature: "3044022060825e02b00e4487917d073f701639b1ca812f21f1cf588fa8eb545a59b1fec8022073ca7918a322dfeb966dfe5239cc1a213c14e67a32f5f51e14e53c05f4149783"
        }
      ]
    },
    "137:0x33c6eec1723b12c46732f7ab41398de45641fa42:2a4e40fa701836b6f11303b841424a6f3a47a5313c810b6651517fd1": {
      contractName: {
        label: "Mint",
        signature: "30440220513be6e618840924202f319870537e0c1f1eb2e684c0a2c61152fc4c20b41c550220026e22f2cd2e12a6b48f97bbe362600556ce3fe5e8b292c05c89c591ea446e2b"
      },
      fields: [
        {
          format: "raw",
          label: "Receiver",
          path: "receiver",
          signature: "304502210089eeb41d1ba1235fe8319c6a248e1ac66d2598979d265e2d4cf16abc34ba47f302205a59e802e42b3268441980b4708600ab6e05e4c55de7407610987532cf73462e"
        },
        {
          format: "raw",
          label: "Quest Type",
          path: "categoryId",
          signature: "3045022100bc6cc7ae4c2b3b4d43acea4c513e09d11736275fade4c0bd834d94f6ebd3893302203045ae14bfbaa4ef3bc0d9cf76f29cd4c90859464290632ee72b20f4b5c37f8b"
        },
        {
          format: "raw",
          label: "Collection",
          path: "collectionId",
          signature: "304402207537d928b803882aac63dadb7fd512f4b959c0e1a737ce7594c9b9e0a0c661170220587298e0e8e2eae94da28564b1bdd7f62273d7e3707665a7966f1b04a15f061b"
        }
      ]
    },
    "137:0xd4f2f33680fccb36748fa9831851643781608844:0b5bbfa7b0d5b8429992c11126083752c3db3fac6030859c390e1ed8": {
      contractName: {
        label: "unlink",
        signature: "30450221008beed58a311bd0968844684d3e090349ad8f4c4a203b7d907f17ec9d1dfced03022040304ccd72921e0b13f0b8844cc513a35f8bcdb6d088385a57c29d848b3e1fef"
      },
      fields: [
        {
          format: "raw",
          label: "handleId",
          path: "handleId",
          signature: "3045022100da2826956b2b8863be618eec516387f3ab418181ffdc37a5a196f9effa632a31022040f75d126f4a757e0ce18917b74a9470e23848eb54060981d49efceb281ee3fe"
        },
        {
          format: "raw",
          label: "profileId",
          path: "profileId",
          signature: "3044022064739575b6ac7bcaf48de8a5d9c260b8ef97dfcbad8309dd1d95196e18c505a302200a334a67c975aff07d285f0ebdbaa5101049e0e331ef0f26a1755709bfdd304b"
        },
        {
          format: "raw",
          label: "nonce",
          path: "uint256",
          signature: "30440220471ef79574484f61b5e525aeb61f25d06eb997073a34bdcd68e3130c429e81cb02203fb9eed967e176c7029a3aed0ef503c83e61167b91c4507c8ac6304457754398"
        }
      ]
    },
    "137:0xd4f2f33680fccb36748fa9831851643781608844:4103a5bc367237260ab8658d746773f02cb95cb8daaf8d5b54182316": {
      contractName: {
        label: "unlink_with_sig",
        signature: "3045022100f1a743e8adbdf6ef1cf1d16eb1017b16b52266b367c53fe2d22483b846f26fbd02203d87aeca769b75b0096cd5bf4bcdb1dc71132516ca79dd86bba57594ef41c686"
      },
      fields: [
        {
          format: "raw",
          label: "handle_id",
          path: "handle_id",
          signature: "3045022100ceb4eb671f78a9cf0e46b3b447224fe23fd92b1f950ba762e53779cc9225cd7702204313ddd62a34e8a6128f3431ad9742ae27771e1b5f9a7f012b792bb7cdf67bea"
        },
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100b7c748f3aa456cdc798b86f5ac3b59af56532278fd3ce0b8f8f7da1d7cd2bf5c0220672445bba4c5d42dc077d79712c344458656dce0a92d28bda1d81272c2410193"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100b7c86333951cd2371f0d94e39fcb9e349355580fe8fce42221a99bef49c0938e0220197a33b34f029674ff19575918919a28a0848d4328057eeeb633c150b4825113"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:070dde6ec3e5d5e7d8f92290760b7f3ab566049489976120347b7d4e": {
      contractName: {
        label: "collect",
        signature: "30440220274cb9f97529180cf59bc0ecba64e9f19f2a18df3df7653138fa5c4c68d5224502206b635afa415cbde57cebdebc2a0b5518be6d426634f09ed89664ac448ee31c37"
      },
      fields: [
        {
          format: "raw",
          label: "Publication Collected ProfileId",
          path: "publicationCollectedProfileId",
          signature: "3045022100f341665ec8c569bf59fa6c6e5dd568a7b5d0e8ed9d7b01268aa1cb9d18cfa9ac02204168045cf639e516096d89d91f9cf53d8b447a27007428a4bf4b0737b1af843c"
        },
        {
          format: "raw",
          label: "Publication CollectedId",
          path: "publicationCollectedId",
          signature: "3045022100c173358226f9841b57a93d2f7d622dd3f05f819a3e7f99249ae49917724c75d002205d4ccef5f16105c6d11fd2ffdd35b9e8154e404be39fa058e73dd0381b746c8e"
        },
        {
          format: "raw",
          label: "collector ProfileId",
          path: "collectorProfileId",
          signature: "304402206e73779691817f11b71f50c685075fd03e187a48e2c7f0754746cc61251e4dae0220233691543c3c35e99f83988753b3026beece6e26f13bf1fa197fb53638945242"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:21b483c455b899eb2e03e330261c2968719ee51273fe888f749b4952": {
      contractName: {
        label: "post_with_sign",
        signature: "3044022015ed7869eb391191dbded78689682b0cad3c7edd16e7512c868c5caacdfdc8dc0220685602e1c8982b96aae0578cfaca26f006a834c54fd7ca5b76c95a4087881648"
      },
      fields: [
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "3044022053c07fd41770b4c39a5122296fb110fcb466e42b7339b1f3b16842a6bb78d53e02207e5dfc7aa10aba6110888afc880543065aa5f07e822001d82a896d53c5f51335"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100b6727e222313381f043a0d83dc273cf2cc86207bfb6f00912da59a46ae3d6caf022022b20251dede2884f32070b53fcbb66617be8a0698f080adefb0331ed66f75bd"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:25313c662aeae5b5367783c654b0b41d2fd819940290fd26da4520c7": {
      contractName: {
        label: "link_with_sig",
        signature: "304402207ae80206eacb28604a57c9257543b43028d03535bafc53b965cbe15e6736ad340220474f63f7657f3607be38c4f9c88a95a2331ca168782803a35ae95a44825c281d"
      },
      fields: [
        {
          format: "raw",
          label: "handle_id",
          path: "handle_id",
          signature: "304402203066a8e761ae5459bd8d07a2d85e012cc6db178e00c47a75a43d081ecd43c45c0220387ebdb7c0f44df75cb5b2b9da79f2cd356c73f6b2e92b9eb037d87c12d16c05"
        },
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "30450221009c4b4d4399f2d315aa5651f4fd2dfa7313c949f493774dabf1be9fcf89b99cc702204dfe454f6ff07ce87f0825066b7b31ac2987576c107c7583e07fbc045153811c"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "304402203c0fc15b249263368185e82d4385909a63f8094217c147627965b558069d730802200d2d416f4a73be0429e1184328529a1fa60863259b708e70c0640fc6fee1afbd"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:2c4da863a51b4bcbcc6c55ccf1f22685c5bfc5d9fdc2b091a4979c57": {
      contractName: {
        label: "mirror_with_sig",
        signature: "3045022100eb0a2dff271a17bb6d79da946637bc29a660d601191d70e1d32bf1d4a2cd34e302207833823dfbef232f9af68c6fb63ed4e7f3d359a2258baee90b9d5fb43879b819"
      },
      fields: [
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100e1b2f2be8ed230b81f373bdec95e5ad9301f62ef08f98eb67e43defde27f52ea0220442c2bfbfb88286e11b43fa43e72e2f3734e282c8742ca7d49cfde026fd70508"
        },
        {
          format: "raw",
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "3044022072f532eaba3a90bd4eeedbee606bc7bf9d30f9c320a3d8c222156810fcac113d02202837a1063dacb5af39ff3371cec6f38dfa8be419fb96424fe393e98962355732"
        },
        {
          format: "raw",
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "3044022076def7f6c5c9b4d18d388894cb177717baab28ef0694f7aca6b8d01ab6e005a402207c30ceb8b83363069d6020cb203716a08596d2c21373ff334ba3d99225613295"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "30450221008d476b24f0f3f7559979397b6145f42fcd68d4ac285b1ad20ffdb0f85b5b65ae02204f68b4b385c5121585f7c0cd9d83c0a8e7a97a4c867e2ea14f327f732d2e7745"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:34bcec6283bd50c6742687fbe45ca3b54007977acd70504fd3a664b7": {
      contractName: {
        label: "set_block_status_with_sig",
        signature: "3045022100b15db144c953121c0291aee97a12cc9fd3fb78de8f2827dfd1fc72f130f7117c02203d756ddd8bf1a21b99e20e0c8508f95c425eb10ccd224381715cbc7fb22c01cd"
      },
      fields: [
        {
          format: "raw",
          label: "byProfileId",
          path: "byProfileId",
          signature: "3045022100a6f5390228f0d665487302ffb088c50e91220f018a5e3834fe921440594663aa02202e37d859ac67fdca45182a59ac1c888c799135fb7bbf96dc0f0dafe8d69a81fe"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "30440220701fa22235fbaf8e58711d8162de37e37b9ae416e607e4f191744c4d0064ec1d0220502da2bee6317d330323a0c979e9bf0cf74fb070ea67a4f17981c40664c21a39"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:3e5cf36b8ef5bdfbdb5645a7ac102ff44c1ece4e4027578f82a35e5c": {
      contractName: {
        label: "mirror",
        signature: "3045022100d75b35ba1454fe2acc30b447afad603caa5e112262015fbd840d32314926560e02207b0e765cd1fec69eecba2aee14d6e613beac19183c807e3b3eb21bd96b818b58"
      },
      fields: [
        {
          format: "raw",
          label: "profileId",
          path: "profileId",
          signature: "3044022026aac4b7c09b4b20c3144e2e9fc59a8384f4f6539cbdc567e2dff46dd0b1f40f02204c9c1de93a68b0b44da0f44d91d60d804de70934e3847b548379faf2eaee6685"
        },
        {
          format: "raw",
          label: "metadataURI",
          path: "metadataURI",
          signature: "3045022100e19e723f2d64afa383c89674c04ebb7208d6584106ecc2ddb4d76aec5e16c2df02202e5a8fa79792908de5804d15bf8b8baad74e43262f6fba18dd77286b5d9cf6d0"
        },
        {
          format: "raw",
          label: "pointedProfileId",
          path: "pointedProfileId",
          signature: "304402200e5b144cbf64182aa82802662e9589ccee6f8b6514f8ff40b2918d47438b586602207cf688e2b60bdcaff0fb4bac630949fb1ed8534688c294218c880f4a31ee0b7f"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3045022100d7579329ab85e0924f5cf656b1810b2106c9773baa9e5032c78af8b2a273fa53022018f030b62fe33bae8f0218453ebc09ded25e2a459f833cc395c61f559730ab30"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:47c475ce8bb65720c4f1e1719d21bd6c0f89d0e424318caef9473886": {
      contractName: {
        label: "link",
        signature: "3045022100beff5d608bab21dae867915578745515773ff2ac555848d7b5e5b21a3c7b67aa02200eb85429369afc29d8eb3b26f2290662af490bcae00216f50a98317a1e2512b4"
      },
      fields: [
        {
          format: "raw",
          label: "handle_id",
          path: "handle_id",
          signature: "3045022100be71019383ed910e9069478219c1c0e594b8abf1488502b1f01d697ae8a75f1402207809eedde5955c65362cf68dc7dc8d6dee11016a75d15278eb2d943c8414efb3"
        },
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "30450221008301a955b2e48d0b7b795cf86afe07fa52d01b7eeae95bec4c0a86776c40d00e02206578edb54793f5d68ad5c77282c7abb5951b6cdf0597db3f02adc96682e61fdc"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:487bd6f6e6253dea7aec4388c9c9a59a6cee6cbc9865eb72511cbedf": {
      contractName: {
        label: "comment_with_sign",
        signature: "3045022100966e8fbcd85a94d0347d75e2f63f8f6523941f954795d77908110f9995446c5a02201b133f6025d7b9c8a7aa6e9f6cbb9c29384a3fe5c7cc2d7e245aaf8a811f07a7"
      },
      fields: [
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100feb57572c991ec538ead71637af3e9c20fc0f8ff55ae96db111970626362031c02202f69b09a4c298ef8360283429b4ceeeaea31b4e59a7be465b72b125803fb5f28"
        },
        {
          format: "raw",
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "304502210092c92442c3bf2111477ef3f5f004fb9bfe5b65aead802cd0130edb3b2b8fbd65022042280fddd1138e474543dcfc4cd49adf3e382946dfe9dae46bf23125aa274763"
        },
        {
          format: "raw",
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "304402203f100d6fe2a7ab17727ba751589902c47a5492d5e60b0eea4c762fca9de7a828022031f803a7acdc380d6b3e844e0df3119922555567d16116430b1c743500c68ec4"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "30450221009c02cc897c262a2749a5a2c61fc8751c55139c4a17758ec70b0728849d73c1250220029b6d4901fdcc1a1840a735943651c224b8df47caab536b6938616168116ee5"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:62759482010064bf87244ddf3f52f851af87304da45274e8ffbdb099": {
      contractName: {
        label: "burn",
        signature: "304402206cb91707bf94bc392806cdb14d85877353fd647485fce098f041e5ade6134ce10220683811ec5809e15d419909322f03ed1b6ec5b68c38717ad06c6b0385ee3c3b96"
      },
      fields: [
        {
          format: "raw",
          label: "tokenId",
          path: "tokenId",
          signature: "304402205d18ec3a8003bc0fbb26de752b163e0bbbd77f8fb0b9017bea4619cb87de39190220743a256a6c6ded87db1b01894de3f2608e3553a96a327313047485ef965b18d9"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:62aa4609df2dcd990bacc19b61fa8cf0744b18d1dc85ceeea0ac5649": {
      contractName: {
        label: "act",
        signature: "3045022100d9ff204caa00262cbdad544c05c86426ae116fc7386e88380bdf49c259ae89ea02201bb18df1cc680a5ed73c084eab591438ec2477e4a7bd9894681bf797e09acba2"
      },
      fields: [
        {
          format: "raw",
          label: "pubprofileId",
          path: "pubprofileId",
          signature: "30450221009b4332e63f5199d668ec9303f97670628d6b122af5043ebf45d717b1184b6e5f022020ea22e28394812a4cbb1cf48a1d614fb8020fa777066145f5ddf98d057668a4"
        },
        {
          format: "raw",
          label: "publicationId",
          path: "publicationId",
          signature: "304402203669ca8c2cdabd36876e5ed39b3d5295148191035974d0f228176b0aeabac7d30220384ab6461fac2d5fb1e44012c7cd74f038e01d08f71c1fdd460e0c3bd9ad36ab"
        },
        {
          format: "raw",
          label: "actorprofileId",
          path: "actorprofileId",
          signature: "304402206bf788d79bf178cda6601da33912bebab43ad0329a4d765500ac6668a89679ce02203fcc328d872791cde23e53b485d4631ad4efa36bedf262abb3a3bad89e4b7199"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:64e0600665b7d148b3f8c7cac3c67c06a40c23a92b92b64d43ed854b": {
      contractName: {
        label: "Quote",
        signature: "30440220562b1faf7c3a9ab9b9093ad3f5cf25086049cbb3b5e382e728da1543f3fb3f5c022073e9e798bd8281bef4ab6f4e007519d63ab763c915f499e5be79eaff7c873e41"
      },
      fields: [
        {
          format: "raw",
          label: "profileId",
          path: "profileId",
          signature: "3044022057b03e53c61af58368ef1dc6d1d8d4db64482a06e5e64583912ab83dab7d7fe9022028bd197ff13afa320eef95074cb704d82d06b2415cb847258706d156e26ed63e"
        },
        {
          format: "raw",
          label: "contentURI",
          path: "contentURI",
          signature: "30450221008637c2745ef73d773bff78cda34c82edd7c1cb08487e3923fa2f7e116a95687a022059fb08b50ac82f6e550c07a7192bc537c444ec2ab95d45d35c033a5c1640f5dc"
        },
        {
          format: "raw",
          label: "pointedProfileId",
          path: "pointedProfileId",
          signature: "304402204203d284d8cd55980f1b1c7fb5a38f27a8382c521ae3091d1e3bdb5d3be4b097022023f637143703c499b166ef74303263ce777b46730e7dece60fbb4700b530617a"
        },
        {
          format: "raw",
          label: "pointedPubId",
          path: "pointedPubId",
          signature: "3045022100a125fc5a7f1a4537eb3f87e13328af81ea70003ffc3328058cd2526eb70561a40220476f098654315e370e33bab8bebd2b69abdae6a1c7aff30a13a0858c4909b462"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3045022100ca3fb45ffe7eae84ac9e8205e35ec97bf88dbbca94956d69aa68e81d953fbcf002207ad391a23e30a161a7e35799863157b85bdb55d14be61889a04e932f5c9b118a"
        },
        {
          format: "raw",
          label: "deadline",
          path: "deadline",
          signature: "304502210080a56b342258c626275ef0c372739414e8b59d4e7ae0ca8e7dd4df791469cf4d0220710a46b65970278bad1958cc65f7f1304986c2146e89053b906f25c6b666efc6"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:75a2ca238fb86566fe4ba12d8fef0a9852f577baee3fc9bfbaf678ea": {
      contractName: {
        label: "set_block_status",
        signature: "304402201a047f27b7afb027556821085b651f952d731bda71209c7857cc60d836836d0d02204c47493d1df372a9dfb0c6af5c4502181834a61cc46b0a85010eb740221b3727"
      },
      fields: [
        {
          format: "raw",
          label: "byProfileId",
          path: "byProfileId",
          signature: "3045022100a7d9e701ec6f27a56e9a32e988f08ca2bdd1e0e0649b6370eafa5b73727d6e690220490bd16ea293448fc7c2e9c8e7d4c3732a61793fed6e57bfb10fd69136483c44"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100ddab91289c73a6fcff65cce812acd56edf5bbb8b9b3d4490a474e36ceee04f600220279ce728d12cad2cef6d51524d0ee2bf6fd77533ea5c22f52c4eb906b433f1ab"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:7e13093933733b6e355959c0f05dcdf096291225677986f58b855f92": {
      contractName: {
        label: "Follow",
        signature: "304402203d05d3af2857144d7d6719a434209fb86b4e31a23a972a30b48a63012b859aad02203a1c9fd6e77bf01ee54e523545c0b534d956529d8b500adda5ac84cb53adba07"
      },
      fields: [
        {
          format: "raw",
          label: "follower ProfileId",
          path: "followerProfileId",
          signature: "304502210086ce10d201f2bcd07ce0696d09fb0edb6c310976c590728779b215c3b06e350902202b9abe2522e9587c6c80f18bc05d3b55aa24b78a6b512ca52eef73b320807c50"
        },
        {
          format: "raw",
          label: "ids Of Profiles To Follow",
          path: "idsOfProfilesToFollow.[]",
          signature: "304402203ba6e0b34e003918518babd31d60b67b9bd4b056fb061fbbe9787b7b35572d1b0220790db643b94787886311042444c4ee3a6dd0bf45739127f601633a81305aab68"
        },
        {
          format: "raw",
          label: "follow TokenIds",
          path: "followTokenIds.[]",
          signature: "3045022100d4d6baf19d62a115ff05056915f5854862bc9b4953faa70dbb89dd8af2d3b58a0220560d12216c5bd899338b7423966274476914b2a46735fc5a461423a11d522436"
        },
        {
          format: "raw",
          label: "datas",
          path: "datas",
          signature: "3045022100a3a40f4c17b37186d4fb96502fea483c0837d89dba2d86e950959142b19403d1022018bcb3029746d4fc0467d7f5c0d261ebe5d0bae6f502a74013dd096acfdad373"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "304402200666208fca07d5cb575ba6343820aa555a57ce43facce4830f92908813d974e5022023167cbcec528a72e296336613e5354678fe3f2cd00f7e2a8bf574a6d8a486a0"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:80c176be42decedd0ce1d10963034b678ce2c9a781ef457be4eeaaea": {
      contractName: {
        label: "Unfollow",
        signature: "30440220138ca52d637f7c86067c5fffa161f3903f24d778cca96a30c4548be8776c5c81022033aeae1247a4b5e38d1cae7797fd38b0abddd02e8dbca3b67f4cd1976c996563"
      },
      fields: [
        {
          format: "raw",
          label: "Unfollower ProfileId",
          path: "unfollowerProfileId",
          signature: "304402201694f3f51d449d10d120fb31e2711c486ba1e664821d8f074ccd3a1f4c28fc6102207a8e7a137973e64929ee4356dae0040ed71691cd7ab6d05e2da8b7a19e6302d6"
        },
        {
          format: "raw",
          label: "ids Of Profiles To Unfollow",
          path: "idsOfProfilesToUnfollow.[]",
          signature: "304402206cc14f7124cc54c692569b1e0e6ceeb54d565cd900b91efeb97790bfc8d3727602203e69a94df5c1ac37fe304aec1b0ce7f319ff09466c57a19b64d878c9ad6d84d2"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "304402205eb026dbe9c4e370c950cbfb1f5eca8008a85b0530626d18d032a5e039f95344022000c5c9fcc8552dea7353b7665a09591767e277bfba7c3481b16e2ae5b17edb76"
        },
        {
          format: "raw",
          label: "deadline",
          path: "deadline",
          signature: "30450221008fd2f449dd33406c1808e3fb316b6c821ecd28f53a424d9aec648424bd7914e20220247a46d5452c33e0a5b75925ee8ea77596020f21ad033201411f4204e597770e"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:8af86ea269c2fa5628d4e7c2ddf1e62bf6f5bd5a07f17856db0aa8ee": {
      contractName: {
        label: "quote_with_sign",
        signature: "3044022066ce14f394f03dc964c40540c4497e8beb0ccb9e23fd425671c61539aca6ed52022029933a6b4ebe3ddaa601c41a48e3836353f98564c4aa6007188f74aca2e1b98b"
      },
      fields: [
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "3044022033d729504a577e04d98d13b6d84c86d25d88a236557cd2effbe65be55aba7e9802204c62ab51a7bbb6603323c72f3e24b94544d936107deb2c343928d4e60ddefe58"
        },
        {
          format: "raw",
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "304402201326f878e1d9148d07b9801afd2d8b61ec6af1867aa6bdbb0eb359593548e9ed0220320c96fb026447f1af62fbeaff9e4ecf117bf8e58dde2c14e2714bfe8c1b9a32"
        },
        {
          format: "raw",
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "304502210089373f933d7951c60b47da9e709ec0fc28c50366dad2cd5b3e588b6a00ab207d02203f4ec2b735cdee2b6c06bcedbd4ac221356bd21d9e41b0992328b7c1d1258273"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3045022100a076dec0c7feb81cc9669b3130d6ab6a98948ccd9566b9aaf1a6a63f86848631022072cf9a4d6b96a163b4262dc58e46405b5234d730c14646f19a272d8454616b19"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:9909de3ee56263be0d231b3590af5ea9616f13ff9ad1ff2889b375b1": {
      contractName: {
        label: "Comment",
        signature: "3045022100ed2c4aa6c95f02f9235c25a4ffa22bd7b17b94491ed6ae515d051060a16148d0022056d2002a24999109d2828685bb5808cfa8f24325c232611ed7813139b9c2e404"
      },
      fields: [
        {
          format: "raw",
          label: "Profile Id",
          path: "profileId",
          signature: "3044022012bb9c82d1778ba93755cad0ef5ae60d16cd031e4518a977ac52bbfbfcda5c2a02204ae859e24c8f72ea90b175462bad13377537cdd06ecb2c918c26487bceb8776f"
        },
        {
          format: "raw",
          label: "content URI",
          path: "contentURI",
          signature: "3045022100a6cced0672cd5e3f71c8acbbbb7fbbde9af46d38855b3c084007e466ebcc1da30220585c60120da86a91a475a7c77043d254368a3336538a518ede750313cc573b9d"
        },
        {
          format: "raw",
          label: "Pointed Profile Id",
          path: "pointedProfileId",
          signature: "30450221008bf5103548be1e4dfb70302d55600f1630f2a71440a32c1679309f729a90f2230220463b62310d865628eeaf8339ca0249306b0a58c05057a1bbbed32c6f96533e83"
        },
        {
          format: "raw",
          label: "Pointed Pub Id",
          path: "pointedPubId",
          signature: "304402203080c0a486bf69aa5e6c0b5242187f05b0c331510c50cca02e4721663923916102204e5c8ac70425ff2a3addb437cd0302b09fd769cf31b38b9914c6be2a00e0f3eb"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3044022021ec722852ebc53bdff303a327ac9fb8ca85d3c1b7331f3a74e36224a03f26a302200754e591c0e4c2420f4045d9f72b86829cb374572dfea7ebf9c2b02d1cb18720"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:a99363f790ad883fe3bb241d3de4b3afcdcb29d04018e7f3b858e123": {
      contractName: {
        label: "unfollow_with_sign",
        signature: "304402200e0488184cf4faf9d7942148e518530f3777676ac0c32ec9500e1def858c42fd0220716264c7be429bea5acf111c58c4fe7836933f13a1a87a8581fac110ff7ec52e"
      },
      fields: [
        {
          format: "raw",
          label: "unfollowerProfileId",
          path: "unfollowerProfileId",
          signature: "3045022100a01ea12793326480182402c1742d526592eb7c3605704488568c8a5bc6b879ac02206f8d48159f83c9acee651473315be799cf0a8d945685fd4cf80ef7815e94d101"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "304402204a2f85d72695d14300907aad0cdf2fef138ecece23e2284b32af8dfb456e5d47022003a31e07c9104a9302f52b7e5896f8e4988a96f8fdb4b6ae8463125c2a711a4f"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:bb16dbc5aec39ac7140b2be7560b53dc69091ac405d0dc9c9944cf43": {
      contractName: {
        label: "create_profile",
        signature: "3045022100c8bc13779d4affa2535364c67fd0fdfdcfdcb91bfda2ee29645df5b10c0ce021022043679732fba8f9a4f2195bde7f9cc3008de2c3f5e5969e7a198b3765a013d92f"
      },
      fields: [
        {
          format: "raw",
          label: "to",
          path: "to",
          signature: "3045022100e29d5ee58e92a1f8640b0a87b9e148f9d1f453c5825bd98a6a3efb21569f8ba002203a3efee9b6a581135cbf2e02fab5297bfe84124c7b53c9a6c490e67902d99ab2"
        },
        {
          format: "raw",
          label: "followModule",
          path: "followModule",
          signature: "3045022100ccefa65f301b19a11738d62082ab7717df57ce9ae834c85654324c2e96d0688402200c035b906f30b68be520a180de42313ad174e25ecda1a5f6953975ce824a39ad"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:c4318961bcd5f60585b391b40af279843ef5987b4de1c021a1099852": {
      contractName: {
        label: "set_profile_metadata_with_sign",
        signature: "304402205cbd8d6179fe4f3b58e89fdcb235973be3d43bf38c48b227212e50fab2ebad8002205bf98bdd1aae44d31d4e7d11cad5c5355796efca410a4079eb9a5fd79eac4b7c"
      },
      fields: [
        {
          format: "raw",
          label: "profileId",
          path: "profileId",
          signature: "304402206d3dc1a9ce664aabc49b5a9da69c973de34aa2a910965387948134155d5cb7fe0220057ce81243f25e6286f790cca12db07a27ebc83fcbb0878b6f9ddd44cd6d7122"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3044022069389e62eeeb0ded581ce91e752fb61b3db7c05d28ce95ea944b0b671987242c02202ec474a18cd966d8d9e20c9634fbe3e372478c5a5381efd369e14e1fbccadf7e"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:c9c7f3c34b7e22b2e08c9df904034aa7a66d2805bbb76ed439b35990": {
      contractName: {
        label: "follow_with_sign",
        signature: "304402202ee99ddeae71395ed85a710f1bde875a69d110d48d9942be8bfe5e1884199feb02206a230978387b6026ee9c97d0ce4b1c6f5ce40c7d44d57eafdf9a75718d432c84"
      },
      fields: [
        {
          format: "raw",
          label: "followerProfileId",
          path: "followerProfileId",
          signature: "3044022066e3535230da7c373f2913e833146befe76247d65db282385065e9023aa2ac8302202516f12f249c3739027b5d9ba43c5059da13773346197d7953c92340014e324a"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "304402201c9d931d8a0333ccde8d4545f4561e2716576197d825f03c71979d9da51f3db70220546538fe354c9309dbdc1e86cc87a5f2b57f15d04a2909a99b1d1000151df3c6"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:d071f8811ba8d8972da7e2982b8796f9ef8623acd4d9efb47ea517b3": {
      contractName: {
        label: "collect_with_sign",
        signature: "3045022100ffc5e96ea59fcd16c7baa3dfe1cc1d6692d6c96e26cb2459df3dd91b6e861247022075fcff9df082a3a6976411144a96bf1020ef21355a83e7958399d52cf0ed6974"
      },
      fields: [
        {
          format: "raw",
          label: "publicationCollectedProfileId",
          path: "publicationCollectedProfileId",
          signature: "304502210099436784574bf76acbc0fc0545e906e8aa926602e885065783c2707812070e5c0220072ea4073ce3a6ae2a5a233482cf4d44825bc2cd194b1b4953ad9e508ba669e0"
        },
        {
          format: "raw",
          label: "publicationCollectedId",
          path: "publicationCollectedId",
          signature: "3045022100bb04f580b5db9b6a4e52b6204dfa292339d89f22dba32519ca67b9defe20d96502201e7754b257580e553cd1ab13df0efb76356430d4867d820d76ad24addfb577bd"
        },
        {
          format: "raw",
          label: "collectorProfileId",
          path: "collectorProfileId",
          signature: "304402205146b54e4c4e1f177f7eb14f2c3aea4d85099047a570685a106cc107ce9ad8d30220748afed65ae98795ff8d1c4421d003afb45920a52f3959dd86b70aea25f89f27"
        },
        {
          format: "raw",
          label: "signatureDeadline",
          path: "signatureDeadline",
          signature: "3044022074f936c0bb1dd1ebc38eb6dc4bfd965a12eb3a76aff1d010d7f0852d1e3b04bc0220095f7dcc6a816fa38f4292618ab991a0eea1b69c9825f7d926621a79b8126fb8"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:e16be30e76d1fe7d10df971f8669e616e11b70590ef4002bb58f7d86": {
      contractName: {
        label: "ChangeDelegatedExecutorsConfig",
        signature: "3045022100ccb92e84fee211f1e1fd47abee3a39fad87e97988d15c468dd074b32629cec9302205f52145220b3285e3f9528be1797511f56ced0d2a22704ccc2dd4bfa7fb9b767"
      },
      fields: [
        {
          format: "raw",
          label: "Delegator ProfileId",
          path: "delegatorProfileId",
          signature: "304502210098f9f759088ad8ce5383a15004c738d8c3a39bf5418b0b65cd0e93ff4e5c86ed0220746604eb87ccfaf0877b531cbc296b50037718b57aa13f0201c14cc883f2dee1"
        },
        {
          format: "raw",
          label: "Delegated Executors",
          path: "delegatedExecutors.[]",
          signature: "3044022020865f47450696ae64a2c628e35ed54ce4d8f13de1aed2065c87d5c9658f5a5e022008e511f727828e94a5709365389f20cc9d4378233767d639445cc17a46a87581"
        },
        {
          format: "raw",
          label: "Approvals",
          path: "approvals.[]",
          signature: "3045022100ddf33e1b7793dca98a966cdbb83d0ca6d191708125a6c50bc52cd388f51c57ed02206ad81605cc962b0626b37bbe3ddc2023f22d8097ed828d395c31106063acfd15"
        },
        {
          format: "raw",
          label: "configNumber",
          path: "configNumber",
          signature: "304402200b6e2d9ca322469d0d866a1d22a2b6fa23ae0d2dec7f8d5a51022163f2d0987902201d1e02f30cc9798115d5e2704165bee82afe69f2bb9af3ed626268803ee6517a"
        },
        {
          format: "raw",
          label: "switchToGivenConfig",
          path: "switchToGivenConfig",
          signature: "3045022100b2157446fb6c5205c8fc6b97ea444083531b40fc95059d298829bb96e4d7ba8502207aa09aa16328195ad1e11cf5ed775c4bce5ded678157ae0ae47ee976e00daa30"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3045022100c7836dd3d52c1940889ebd8e377616fa52834f0822b7ea3c75bb6e01c2b4657a02207c4bba14de8df6a291ba01a76ac58ff13ef077ffe04481703ad189740bb9db63"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f0cf3d3b7ed7ba54e5dfe70cd7822ec56431596fa9d1c3e2cd2b4e6d": {
      contractName: {
        label: "mint",
        signature: "304402206639bbb45b91a9c309742451e2bf73a29bc75fd32c428ee60d58fb001353da8002200b4aef1c912feaf73e3a45323a7df3b8b2df44afdbd0237a64b3723c7053f72d"
      },
      fields: [
        {
          format: "raw",
          label: "to",
          path: "to",
          signature: "3045022100af1ae8906e120f6783c5fb2518696ca60332ae1128de9b2478ab45c789bb05650220417ec699e96bab47c26d8d37b2feabac7810946d5de7987dcf5af3c95e04ec73"
        },
        {
          format: "raw",
          label: "profile_id",
          path: "profile_id",
          signature: "3045022100d339951d42fd3c3b90c389dc703af3093bd3fd16dee7f9f4239192f2b44f5cfe022054426b5ca70bc65e1703026c12b5dbf8d2e79928c9aa478f693388eaae1edb26"
        },
        {
          format: "raw",
          label: "profile_id_pointed",
          path: "profile_id_pointed",
          signature: "304402204eeccfddfa2f9bf4dd9b9e1db1a9c91cc2f7bf22115c6b74676f2bfc53d820c802200bf3068effc45575b8b08fb809329a9c14769b23acb0b55012dd83df19533ec5"
        },
        {
          format: "raw",
          label: "pubid_pointed",
          path: "pubid_pointed",
          signature: "3044022010452fa9f43371405fd88f66eeb50ddd95dbef93180ad5b147f9b368866d4034022012e23a825920c903a5fcb18db53c664a943e442cf79258536bcb576d4c839416"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f2d2c19e66c050722ce388552dc6bed2ed5487f7cf4128054d3d4b7f": {
      contractName: {
        label: "SetProfileMetadataURI",
        signature: "3044022037f24dc90ef82099d00622929b8ed180ff73cc92998160d234060f5e74f76cf6022068bff3003c656eec1aa2c5f7719e9d42993f64e46b72663257ecba783673182b"
      },
      fields: [
        {
          format: "raw",
          label: "profileId",
          path: "profileId",
          signature: "30450221008ed21c3944a3ef93c8cf1db94deec88844a51d6404933fbad3b72f0dc8f4e5e902200f5fe8234ae704a754ca5f90cd54329bb808b5f4e85cf37e0c7bae2c1965763d"
        },
        {
          format: "raw",
          label: "metadataURI",
          path: "metadataURI",
          signature: "304402205ac0d9389e90ccdba173fd9b5bc206ff7afe5f94aa97e6be83542e74c1883030022072ca6572f6b91d65f00976c46aa9ab24cfb87773da72c6bd5df007c34adac3d6"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3045022100cb681a895a6b4fc2e0fb4648ee3fb398134b4cc8dfa8387e04616bf87261ee270220067b327a33ab2c24efd989d15694e6066597c6070179fb33199dd9d203b28a30"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:f48d14ae14ca8663b397fafc56d53833a2eea3e8a6450961e58f274a": {
      contractName: {
        label: "Post",
        signature: "304402204c6f0130681c8166f9f89c73ec30aa48d5cbea6d3f65e222d1c27feaf3f303a202200f138d210c299d234c527eff77064b37883f57ef8263942c871101b49ffe136c"
      },
      fields: [
        {
          format: "raw",
          label: "Profile Id",
          path: "profileId",
          signature: "3045022100ef075942ff80ffd16ab5aee79178e68d453573937830cb309649d5bcbe07ee61022055d84b6b081ce5aa88d5f89db163b87e617d181ae6f8b859d70f06026bb19954"
        },
        {
          format: "raw",
          label: "Post URI",
          path: "contentURI",
          signature: "3045022100aa09a0f04edac5f9241f187dfde4b0370091b3ba0bbbba37daec73246ee1b7ed0220265d8c8242e9cfb645ce0a18217ddab8b1c312aa513c9af1662c8b91b72920e3"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3045022100ac7a9acf7f5008efc137f632f5603e36541f1347a8cf2aeeafee7ce98f4f32e302202cbd3fbf86bdd772bb646febd6b5fa426dead4a840ff24e77d5fed9a7ea26d4b"
        }
      ]
    },
    "137:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:fa764abeb889b33c2dd4e1396f1316d8cf49e87d0b5b341ced7b7f04": {
      contractName: {
        label: "Set Follow Module",
        signature: "30450221008d7d0ecaa7ae3d5c4d6ab9119e14ed55962722252addf490298fe3be29c8fc95022056f88897d6a0da3b495275071b8ca3a32f6d9b47b4f420d9bd2a1c2229b807a0"
      },
      fields: [
        {
          format: "raw",
          label: "profileId",
          path: "profileId",
          signature: "304402200a819ea2e5f20eeee5787138f2a7b32f3f237b48a014d049be742b52967c2d5902204cc6a95c24c2436b4e22a34ae5d3ad68d995ca9998f3a073056af98e8fb6dd0b"
        },
        {
          format: "raw",
          label: "followModule",
          path: "followModule",
          signature: "3044022050576104c1505e117d9acb5e71cdb28c26b34b1cf2bd91cf617a47a838a4d4a60220034626740cf27f0a9c2d4f3e6ce53e0d612cc2c8e48cd5999616e2817cb57022"
        },
        {
          format: "raw",
          label: "nonce",
          path: "nonce",
          signature: "3045022100946b8bcb1606ecaa3786b80c7dcf08f8c0343ec2a756c48408d617f4b341fd9402200375a2e3c3be53320ffddf1caaed5fd4c12b61cb25e35afc94cdc29c253dc316"
        }
      ]
    },
    "137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3": {
      contractName: {
        label: "AugustusRFQ ERC20 order",
        signature: "3045022100a887a8b2f40695509ac6e040feb1a4a088fee459fd7e76cb137ea7c06b0a0b930220617b514271c05679e7ce04860ffca703ad2a21f4a45cce34b40e38624cf7ec13"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "30450221009fcaf300fef36d00f64c3d5e92991e67fd93862f8eddba0b8472568b5c66e38d02203a26f3aad1c0cf6638dea961f8f5e4ba5f72272bc7f1e33afac897a3b5b51604"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100984f166ee1744b4b69e24ed1e49fbaf43a24e82dd5b7d2103cf8ca854ff49e0a0220326ab17879b902521fa032a89c5c984e52bf3e31c8336cd67a1ce198d7c36e2d"
        },
        {
          format: "raw",
          label: "Maker asset address",
          path: "makerAsset",
          signature: "3045022100f4ec14863e0512804fc69d82fe17bf576340ae8005d0c48520cefb3254b102f702205fea57ba3919071157ff3ee0c93472e936f1dc079bcb0c447bb87ad86e505ea2"
        },
        {
          format: "raw",
          label: "Taker asset address",
          path: "takerAsset",
          signature: "3045022100957771ad2eced04af9750c1df10cc5b5b913fd3f9fe83408baa766573ed34221022055a1ba30b3a8895a011719ac54adaf7bfd24fe2c5041a90348097f719bed0dc7"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "3045022100f25edb42b652d5c645de567c201a1e6a64b0d6b23274cde08046d955cd2573860220129bbded4e33150cc38b93033b2d70d5fa141066f1ed7c603b5515ab8cdb2fca"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "3045022100c8790938f88557986c769102d31603849dc8c560cc03a45db99ddc90d69306690220295950348fffc22fbb898d75e768edb1edcb1c8772cc3518ff9687e957a87e50"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "3045022100b5e1dc4e5f69fd80611a4f5c7d306ac6aca4a2a2103515d761557e532884ca8702204b86dd5c323345242f1c1b263ba035932a10a5b0eeaddbc79fa10db27aa9d7d4"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "3045022100bd1de29559311612a7d0bca3c61b10d9ddf0753be7c372ebb95e0b69b674c01102207d685aa2b0a2309ad094a5fc8e09210681781f9a4294e4c7973d0ecf1adabcbd"
        }
      ]
    },
    "137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623": {
      contractName: {
        label: "AugustusRFQ NFT order",
        signature: "3045022100b9798555ab901ed3cefcdec4aabd9418f3561fba299833ceadbf9d3043a996a7022037388e3956ce02764088733d92384fb4e669754b037e8a913995d761ac0d5cdf"
      },
      fields: [
        {
          format: "raw",
          label: "Nonce and metadata",
          path: "nonceAndMeta",
          signature: "3045022100b57c5877ce124196316dde0e2fb0f18258521cc2c7c27405bde78008bca27d8d02202053d4696b28b40fd1a16e7a179020c7d633e4548da0bd92f9442c24da12d510"
        },
        {
          format: "raw",
          label: "Expiration time",
          path: "expiry",
          signature: "3045022100b35db3057953f7b747d4423f688d8a3fb3101729f37af65c4ac4fc9a7ee8fb8d022033f4d70422b437593f00af75828ff067f914f825bd3075f8462080bf4e0f9ae0"
        },
        {
          format: "raw",
          label: "Maker asset encoded",
          path: "makerAsset",
          signature: "3045022100e2e0f280d333692a776343669d6f17dac3ded8935d5875964d5ac6b05bb093f80220589afeaf7a7baf3b5964b439111d07deafe25be8a32b43640a2cc073a7257aa6"
        },
        {
          format: "raw",
          label: "Maker asset NFT ID",
          path: "makerAssetId",
          signature: "304302201e35015cc3bbd6ca28bd57eb970cf1eb05826a4988c1238e951574f8804f28c2021f0cae62ed8199b725a39e714e60c92fe522ac7992c3dc1a27866f749547de89"
        },
        {
          format: "raw",
          label: "Taker asset encoded",
          path: "takerAsset",
          signature: "304502210094d2c3de8a61bf940dc5c8132070ee0566ab6d0059f1eff5aec3ba1ec04740a202200fb41470f2693427466a9ce580d5c9ff12243f848351c7aa2ac070c1618896e2"
        },
        {
          format: "raw",
          label: "Taker asset NFT ID",
          path: "takerAssetId",
          signature: "3045022100f9b55eafa8d519298960b040f36a7479ace9d43b677d243d22c3194147dfa033022025f7a2962e342ee1572f814cd8b8cba1382deb20054475ba9df9dd321bc9fcc7"
        },
        {
          format: "raw",
          label: "Maker address",
          path: "maker",
          signature: "304402201aa4061287e14289ff1c4fdffe8ddd811775aae4bb6577970ebb87735102a5ba02207d9c89254e9698a7aff849a87c2a163ce9793212a5fe3745e446393c6a71ec46"
        },
        {
          format: "raw",
          label: "Taker address",
          path: "taker",
          signature: "304402207ca92ed4b465b4fe1d4b2dd65561165a70b54c8dd132dcf15031c799c8ab22fe022041d7bd664003c62e949cdb0ed09a744ac6adce7d6e676e4de22437a830edcf74"
        },
        {
          format: "raw",
          label: "Maker amount",
          path: "makerAmount",
          signature: "3044022038901c22513acf13bac39f553c763d26ee32c3e6e215ca3cb69da0274ca901c702204fce716fc91f3cb7ac7da446bd3432020d002c5a62c48d199d7b4379fe93c9f1"
        },
        {
          format: "raw",
          label: "Taker amount",
          path: "takerAmount",
          signature: "304402203361ee1439f545c9664035be586925b2fb4878de9dbcdc7a519b5eb95a44ca6e02205f905942febcf5342577b5af149ea4deea5e6d0e1ae17356bb1d0628d8ccf8ff"
        }
      ]
    },
    "137:0x27f8d03b3a2196956ed754badc28d73be8830a6e:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Aave Matic Market DAI transfers",
        signature: "304402200ac5ab94c126dde729e0159a1eed721dc3caa04f908312aa74c66af16004fc7602201aea814d65a8fa0554432cde24c032faac6a773fc00cd4c9db5a0e7f22d7c99c"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "3045022100aee488b860fd511c87449f2a833590a501850564f4613eb5cf03466303653f4002204c4ed53c89bb8fcc4a065a3bebc2c70c3fbca495edfa74c7f76b4e7297229713"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30450221009514d69c48b51d1524fcdd437abf7db5144750ea606f48e9577a2d578bf4fb1f022020f9ef88c2ef73eb31bc05e4082030473ffb7b466770fc853736bfc82fb44aae"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "30440220732e37dab1ace5d04362dd98df8ecd47932b1b63dc5370da6a9e29e695d2a41902200313fe832be4e63fb12a3567dc2836fc2d02cf38dbafd7ca2d92a0a03be8e9c3"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100f941565f7d02add0ef8222014aa5005c8c0ac9de29865a4a66698db61c361f6c02205137eb64f68fa35067bac6902f2a670bd335cc7db07e0f2f41e2f50bdba2d9d7"
        }
      ]
    },
    "137:0x28424507fefb6f7f8e9d3860f56504e4e5f5f390:d4dd8410bdcf861c48d353f8e3a9b738282a0fd9ba7239f59baa9099": {
      contractName: {
        label: "Permit Aave Matic Market WETH transfers",
        signature: "3045022100d82c58e57d3d4040972e93cd45dfde23f59291603f0f6e77911f4d25210e532102200f1500ebf2516f1051190a05641219627ff2ac78aaeea2f67d723990089a0890"
      },
      fields: [
        {
          format: "raw",
          label: "From",
          path: "owner",
          signature: "304402200fd95d9d23b7f6e91d3bdeba89da05b66391f8883b9f7f66b30cf645b6baf5c802202ca600bd52e3ed1cd580713ee3d6f0b96d47e09d195979ac4b023ad8d06bf16a"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220720a40e847932e9d428749631d4086ab7b3986473c98ec54e09bd116717d3ee502200c4f39dee8066fa918f4e364d3e3c7331fb2ef495bc01cd24138b8df6b49bd44"
        },
        {
          coin_ref: 255,
          format: "amount",
          label: "Amount allowance",
          path: "value",
          signature: "3045022100dd280077c93088f7ba943099394deb2de7b6fa2753ac0fb91d7d0fa63a0ba9b702207be01299ab0b365b8b3950042840f56b0def6fdea0732b55195d897af08b31f2"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022042c6c68346231ab45807c1cef0395bc6b13eea68049fa33f4fe5f7511c4344e602201caca117a547ce09e1c80fa16ae66c52dc6c2cf0ca5aafe2f79f630c1e945f62"
        }
      ]
    },
    "137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b": {
      contractName: {
        label: "Lazy Mint ERC-721",
        signature: "3045022100977ad189fb3f8c809caef784ca6c66fcda1c98274d92219b07416e43f43187af022051b069af307aef8d7b3b3aaf815eaf0e7e91c55f994616f3ea88293dd69f217c"
      },
      fields: [
        {
          format: "raw",
          label: "Token ID",
          path: "tokenId",
          signature: "30440220403fc14ad30f3f3ea597f75d88371c83ef2e10130a5143faeda87dc507fb9aa2022056202bc01b283e0f625b82c73db84ca3f17eef6d9eea89709aa0a88eae17096c"
        },
        {
          format: "raw",
          label: "Token URI",
          path: "tokenURI",
          signature: "3045022100ce280997a6b39acd5dc3522401c205eb4719b4b43e7e673958f1c7b7b97a8f59022042eb6a70f1f45c771a697eb85b71ba58acc8074ac436d27840ec1325423d7e0c"
        },
        {
          format: "raw",
          label: "Creator account address",
          path: "creators.[].account",
          signature: "3045022100f072042cace3b6ce605bbf0db7c3941928cb1ac5b6011bf47e04d76f57bbf392022054eb24e12319d88144a5e4d15a22271f2f1285d51f1b7f48bfc46ff1724c1741"
        },
        {
          format: "raw",
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "3045022100b5517383a1f9f7281859e1e3ebcc588770ac08fe7961d83ebff3ff922674fa3302204c490c86d4d987875aa55c089a6c8bab4414a742bc7df19f67261a319d4d8c17"
        },
        {
          format: "raw",
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "304402203660c0f0da24c89206e992e46c399d75d4e0981dd86bc145f4ed0d0ef469b47402200948f415f220225eaa67fb03749b2d5ea1ca8dfa76eda34d15c8f95746e30bd4"
        },
        {
          format: "raw",
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "30440220747d86766a08b5bf78182dadf5ace3813cb8190266e5d1a72f2d94a387fd6ba5022006c69b8171a47fa15ef906fac4546856dd9467a8e1036d89e323614e64d29715"
        }
      ]
    },
    "137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8": {
      contractName: {
        label: "Meta Transaction",
        signature: "304402203e256b1407f82dbe395bee10e34bf5b995c3fa91737172b58fb41bcf8e006eea0220046543fdb21b8f65e050b57081915c083fab2abc1cdd663ce53b1c792dbfdfb2"
      },
      fields: [
        {
          format: "raw",
          label: "User Address",
          path: "from",
          signature: "304402204576c4999dd6a70df131dfd032667a42695d333a07b3599ec6d72843c54b48b502202cf424d057bffceadbbcd9023b2241bab6d2faf8b7324fbdf87f5daa9789fe38"
        },
        {
          format: "raw",
          label: "Meta Transaction Nonce",
          path: "nonce",
          signature: "3045022100e094b23ebe8102c3c1aa5f802c33ed56f48bc94f6446b289ce358ea60ac375c0022013255aba7dc03fcfe30c7eacdf7a14ad0c51f389ddd51f7c4ba6e8d9bbf3dbb7"
        }
      ]
    },
    "137:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b": {
      contractName: {
        label: "List Order",
        signature: "30450221008b4ee6f1b492d19243afc4715d1f0cd9bf79a1aeb61fbf58f0e1323bce9dbc99022001a8a548f081eba23f33f03e20f478c33bd264efb3d8bfa16ce96e0b69ad5428"
      },
      fields: [
        {
          format: "raw",
          label: "Order maker address",
          path: "maker",
          signature: "3045022100f9851e9dfd9706740307e7829705b3e049390755e36b26a059f28d6bb47ac949022029a4efc35a2264fbe8f88eee1f83c430fb5e96bbf55e6deb31a60826cb0203b3"
        },
        {
          format: "raw",
          label: "Order make asset value",
          path: "makeAsset.value",
          signature: "304402203bf13f37325f60973b02d5433857676ce135f94011047bbfdd2b97c30db1a069022029f409c7689891c222cdec4e63d143938ff73a4f6cffb0c5d56228d572d25fc2"
        },
        {
          format: "raw",
          label: "Order taker address",
          path: "taker",
          signature: "3045022100bcdc72ba9f16a3ac3b73ad04f445a60958a7ea644511d9b917c5ae52be52c76b02206a68b66cc24c79e45687c07a201f7e910444a66a657c615c5854ac7065b0c6fc"
        },
        {
          format: "raw",
          label: "Order take asset value",
          path: "takeAsset.value",
          signature: "3045022100c23622dc64172dfedc8fae04d5fa24e25f598bea659e703839dccf19736ba13a02207554a945d0e9c2816860ec7a6c4aab9088fb58f5316c1007d82f0add61693954"
        },
        {
          format: "raw",
          label: "Order start time",
          path: "start",
          signature: "304402200cfe7613b90190a2c4dafaa661e5778a7756444e593a8e16105da315231df264022025e1daecd1752763decb7c51389a5eb97037536ecea3781e70ab428d75e1278b"
        },
        {
          format: "raw",
          label: "Order end time",
          path: "end",
          signature: "3045022100d0047bfc769190c5a173c8bdf79a2fdef008f0674ac04f3a7fe100553f41dafc022030e7ef0a1dd8f6f4131da237f6c33a331add85dd747f7f9749806759767d0880"
        }
      ]
    },
    "137:0x7f19564c35c681099c0c857a7141836cf7edaa53:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8": {
      contractName: {
        label: "Meta Transaction",
        signature: "3045022100a2f95042a915f8ae76b54b1f012271a44356484ea6d4963b81e6806ed6fe80500220564155498a275d3fe5eec595fad3858cb2d7fa85178b98208d09a886a1485257"
      },
      fields: [
        {
          format: "raw",
          label: "User Address",
          path: "from",
          signature: "3044022051a39f6c809110faf6aa95fde98315c0c2b2cac34c31d927c058a2c0ebc158cd02206ccfac20b0327ac6e2ca08d5d53aef189b2bbe8bc010ae9002b25edcf43c2f06"
        },
        {
          format: "raw",
          label: "Meta Transaction Nonce",
          path: "nonce",
          signature: "3045022100c1e15f064b9cf3d8cb2c6b297318c543066a12868419121c7062ccb7fb2f619b02202c3079f47124d6a25178d4b8431acd0bb08f44e9a0ec302e71bb4cc9b49a05a9"
        }
      ]
    },
    "137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9": {
      contractName: {
        label: "Lazy Mint ERC-1155",
        signature: "3045022100b85f48fd591345542f9e2271b4f33e71287a703eda9f9f7b54458dea60fb59fa0220661f4281eff16352e5e8db92a254b6b74ac0f20e3d41c9042a3c7c9f7397bd08"
      },
      fields: [
        {
          format: "raw",
          label: "Token ID",
          path: "tokenId",
          signature: "304402203dfd604170efb9379c36e17439f15f441b437aecf2d9abd0dc8b0c757c15d1fa022007fde07992c2b3797e7aacb7309cb60d494856d7a9d5866981a8948abf4d6a9c"
        },
        {
          format: "raw",
          label: "Token URI",
          path: "tokenURI",
          signature: "3045022100a334814c15bfe1474472e56201aa83aa7016648b2a92aa2ae7c4d86b8a412eaf0220416654d59af289a253a96cbe4f5c9b75c2129d603d94cb3c7966cbea682f542a"
        },
        {
          format: "raw",
          label: "Token Supply",
          path: "supply",
          signature: "3045022100a180585fc34f26b83b50c1d7609a0623b85b76267e393bf2871f41790487bf5902206c296108c56f2a1557a66a04f05bbcd7f0e0e0cd7a7a9764783673c0cda21d1f"
        },
        {
          format: "raw",
          label: "Creator account address",
          path: "creators.[].account",
          signature: "304402200a32f52a36f61e3b62af734ceea6e02ebf44e9bbafccb92b2570b7ae9666638e02205e8a0ee1634919bab75369b611257e17c12cf379a4b83e3da2089de13863baa0"
        },
        {
          format: "raw",
          label: "Creator value (10000 = 100%)",
          path: "creators.[].value",
          signature: "304502210092c988b7806250d99ca2760167a0c72f4c7e20f8f9174c519421bba8adc03c0a022032f33a3843e31b8ad17991e8eb3e3b922c5c2b9570d930fa9456b6f59b8974d3"
        },
        {
          format: "raw",
          label: "Royalties account address",
          path: "royalties.[].account",
          signature: "304502210081e5ed5701d2bb497c4b1cadd0ca61220b1078357f7e3ace908c01fcfcd3abad02203b03cb75eeabcd49777362466e3af9a461ad39059238748ed7d902f988db3318"
        },
        {
          format: "raw",
          label: "Royalties value (10000 = 100%)",
          path: "royalties.[].value",
          signature: "3045022100cc555652ef532386da9ad2405536aaa7adbe4cdac73ae9b2a8d4b0659eb4013a0220030799c1a813bef66c6395c7305a1f98e3bfc0bd045917d63bf7bd24e09fbebf"
        }
      ]
    },
    "137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8": {
      contractName: {
        label: "Meta Transaction",
        signature: "304402202e2b7810798bb8d8094ff46e47ae09c820b374420984f5c9845139f7995b5266022050244aa907e45d7ff4ffc0b383262c4425d32aee4190bfc09fff359163268b73"
      },
      fields: [
        {
          format: "raw",
          label: "User Address",
          path: "from",
          signature: "3045022100da2c6c45ce4014375aec27ce7dfc470a066a53a3ba812da7f4fac641fc48334502202ce049c05a76e19fc4195a323464383f3eca62f33a435ad5807716af1a83af4e"
        },
        {
          format: "raw",
          label: "Meta Transaction Nonce",
          path: "nonce",
          signature: "304402207b53dc30da4e7360a2deb22ab0ee2ddca9dda1c807095a57751dc395d7d503c602200f464f277a17558cab3b891fe8d4fb232b5783f26f6813da77ceeba527bbe1c5"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3045022100d259cbf0306cda1fbd842725394b29020aaa05159884cdff8c256ad87e6d55ea02205e5c7bbbbc030c2e1362e41185312aa8140802495fed2325031da2af79dde7a4"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "3044022078ff4404d1d554e4d48af1b36b116389dfc385ed212c5ae51cf0218ea7f2aeb20220420d390f654485f830075770a5383f1f79d6557f5c9553e9006e289d4b1ac225"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100f3d322f11e7ed81304baaee25ca2991ad339be783a3f5ff60b0fad3edad3291002201a396f507b590d56d8af66999fafdfc6aaadc75e0e2c9d558b90d5320bdb21a8"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402207d9c68450fd568c07e5b5ecffe29747c64d247cc1ccc8cce83d4112d029317d202206c631ddb8ea90ad75aa1339f2e966b72193758615f303af6c8f94c733f6e877c"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100e847166e60f851e3c8d1f44139811898ccd0d3a03aed6c77f8c3993813f479d2022031fe6b6a574b56c5104003cf07900d11ffaf303dc016da4c1c3d184663da8f6a"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "3044022056450131868b314ca4a0644588bbef0223365b771c7d530c5d522216c3f6acaa0220648f89fca96da29e3049ab69fc3d5a97e42a749c60b1cb78daa3acfacbe577f3"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402203502b372181142404d4f77015f2fdffda0a4696039b5b7a8120e7692878a9fa902201d5731834b8dcdb805a1201caeadcf284117cc5613db44c401475641263dcbfb"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100d1f9af62ebf0ed23eb66251b321b1342516bfd883bb2464c75ae355566bb08a3022019fddbc0be194b2e5632a1d2e6fb1d097879c7281cf6a57930dbfd5aeda8dc23"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "304402206f791744834c59c69e50a9eed98aa403456e51ee2a13cc5848b1b09b3353230a022070d350d50175c0ee993b575834ad3520ec223180226becdf7b9a6abb31852d36"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100e874350c7e10e0f109e84b13aac6fdf991222b32653956e5cba9bb91a4ebac77022049a029fc01051d7548b64e4137542ce992d24a25716a05e6e35f588a3cebae52"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "3045022100c44a39bac7d2b431e75bbd6ecf2b9af58422fa29abe6cac5874cf8964b388a2702206a73faa7534aaca6a8c1b0420b37b60d2412c2393540fa75105d78ae144da322"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "30440220431f8d9a182a7d233d23b6c7279c86032a0f67ca12a3e60e8dd1fee0dcfc896202205af02a1dcd72dc193e87e73bf35dcc5aea1adf4c05da0404dd287951188bf193"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100c5f09dbe6709756a1fda5e5f2829cd4c88c2a8a12112ecb2db1a6fd69b48941102202d1a58cf6b072a8b75527f2e7f1bf3b6500d2cd22c44eb09516eebbd4b5bbbfb"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e8ad0d17420a31ede8ea9a1bcf1b4a74602016fce59f1d2f448268356bca1102022035f7a6e24c73611965e3a9424403c3c56f65bce994761d130f0205ddaf859ab0"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100abd36c357f546a3557b5d58dddfca7bc64ea65d936836d8f487b1388b0f81256022060b1b1f1ba88bb4dc27fd58c57fcbb6adc22d058be33d3b764c3d0145c0ae4bb"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "3045022100f3a91aadffab51d26e5dded9b00d0a447eb3efefc3aaeff52805b3f42636de5502202766d3e6a86eaf5a28968bdcc71ae55f35bc4a88d816223094397976a6f23cdd"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402207518cd346517944c31b81019f3af5dab9945c074a0b1ecff4af822a5d9e7f98b0220053975c4e589dd3594f4e584306b7f3f6f79a356af1eb6c740d1cd3b880125a5"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100f87e20d6e92c47dc6cb0aa28a8f52bcc76e3dcb5705d5a2fca52cb536a8ce70e022003397f062033cea8cbe9ba39ae56d3349cc467fcd5b3a3bcbddb132d70a2d031"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022075e2bf8a4f9d5aca6ead3e75d78c2d2110f1ebbf1cdfca155cac867b4894b21a0220630057ba7e75e7a5c899460b34dba993f4611449c4a4ad80dc697cb082f8dcf7"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "3045022100c6de0438134c17094ff894e513d8b6d13367a5d7d69a22f1a19d654c0d8e28960220694b1d2b68cc6627140763861bb48184b10da001a81232cd33acba756f9e9e37"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "3045022100af5b8bac790473b173593ecb3f1d2c0b8d0fbd31e5937659fd2cef48fa46fd6a022000a4db89ea467ea3f52b203ee91a6147a73d760f2fab43f1f7c05553cc1f7e68"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402206eb54ec964fa667fb6a130710c6770e84fda83078c2a877ede8d817d00329ea8022030970ebe404e2f4739359e44a1581ab89b391122a91e58b225b007235454c173"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3044022009cf5c5c08e8e8022a7ff466218156653ae123dba81277b5e6c1bc7f0615dc5e022053a53758115bbec371aeaf5b1ed209d9c013299cc81227a76c926c5a84c46c7c"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100e3970afb8a471b9fc6834332077fae22791cc45451da4180f48ec29f97eb259102201c57886609f9763e18a3de24e3a310dd0616f2333c47bc8ccc5dd35923e677ff"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "30440220019cfd3a9736c5377aff92d01df3379b1e76c48e9b7dd3e6b21e54b233b34d5f02201a998d97ba275284ef17e469e9c8b5cf7b6060a606c15f278f315c73ec08c71e"
        }
      ]
    },
    "137:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3044022074d08efc6e2defb1cdd7dbbf0ce076cad0fdadff5f64cf9ee03b2a601cc1564d022057d1c94befc8cae1c631e601b7079a473e0a0d5e65b7967018caead0bda47d14"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30440220214343c3d61640d1060c8c77e87a4f1c2049a42608ac27e1677aafc959f2683c02207d097d9336cd21cf842e1105dbfe19f10e15089cb2b43e456a7812e742435be1"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022052e6a068616058c0cdeecd44682e350cf41b0fa6db92be2eced993fdcddb0f3402206f89634895f8ccbe811e5fd51a8125bcd90f9386c800ec499f661aa28f6aa414"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "30450221009129b2a6422cbeb5a169a705ee92c21ae8e45cee59b09aae969236aa101b3d0702202ec7a373f46a16a32ce42966d61aeb1d09458ca562af42f372b124fb98ef9546"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402207494724e8c616b2e066544d3e742168e06e8d6e84c1cf1182e32f30a92aa079a0220440a6b555acafa9fe13ce13c63d33fb9e79156eaac9605f6ec22bf68d804e929"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "304402202339daa422491d2fb2efc17a223e6d191b431069250f4240b9b804f8dca2c6e00220682f54d39eda33b5237950a7e39b4e4ba4f501f071e700479e5768bbaa8281ef"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3044022043c32d3e1b5b644799aa8c8a5813cecb40956c282c227c87b6d692a1cef5e7f00220077a6e81cece0f12a9309918028060eb03842d3742ce65e8b364819bd1051650"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "304402203b079692e3c22218c0db1e14bfb3158901d89d466716f42aecd1737cd7857221022016ad9291aaf0a3388e4f21f6068d6610d560905175826e5b6fddd34b5b06e40c"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022079391bb740cf2e4a878e31cbf4c41940c5b312985245079aa3ea2ada4cb2862c022032c106c5981577447738eefa31216c734fb0c908a817b545aa7be529b1c29734"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100f593c88770547000c0e3aa6502528b5b756d75b4ae274da729cb5a1563d2c91b0220121d0ab4f6ae9d6583ddbf21be1735e45a56da217f3e278a766d73c593931e23"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:4d593149e876e739220f3b5ede1b38a0213d76c4705b1547c4323df3": {
      contractName: {
        label: "Permit2",
        signature: "3044022015e91522c1c70a6d7f7b6fba1585ed3822af2f245f54805669d5897f8e8804c302204ac0b96383ec1fa0157be86de551cb9972600d6f58774af45194b708d61cc4b0"
      },
      fields: [
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "details.token",
          signature: "304402203bf00c48a42f8216f513ebe4eaafc0bfe2fd64b0f9e9921e682c3aa4775475de02202e387775036517cc8b174cecd658786893857d2035fca136e3117e0f0422c38a"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "details.amount",
          signature: "3045022100c75e1909af9896d74065ca0a0a328a108d5cb2c3804b667a82b52d65621491220220220496cad037e2971aefd935b7abdf4b9d6f3f6eb0e997ea99a2d7118c8a11bb"
        },
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "3045022100c19dd8af5d23240c2437f7eb3a082fc1c8ae9195c178bdafa119d370ff33499802201d67589fae70268a7080f09c162bb1777bba7281523d34c37dfcb496e3cda151"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "details.expiration",
          signature: "3045022100fd3a08902749a23ac5694d1d1499f11e9d52c723f286c63f0c1c11c01a9bff02022038efb165f44ad8e4cfdd722e82f7bdff6379daf1f7db55925f4ee2adbbc326d1"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:7a74957d557fa7a11fd1ccc7c423cbe2b3161999e3e6c5c9a160105d": {
      contractName: {
        label: "UniswapX Limit Order",
        signature: "30450221009d336e41e39830bc5fb01567468404ca6371f13c75e8102647a77fcd7e1327a10220696e5f853b1fa5a19d6caf30859cd4e17981f2e0b34755e1e1e588c440998f38"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304402205cbae5501a5041672f937fccf36d87d19ba998b90a61ae26d3c4b4282551414e022037bcc80671ada5e3076281ebc6de328331846968571146f002708245da890a81"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "304402206dce9b3a993e5d887560c0ad2437595d98820a3685a8de482326267d1547a36702205486cc318b4655787841abe60147978f00e29b1a26f8f7d0b3df7a41ad49e0cb"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100eceeea5637fb8c76437a9480346a458eb0e89c62b04f97a5736d69c67289cab302204fb4474ca0222732b3f8bc4971319d064a199909646ab5285ca9631c9a2a281d"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402205d52a11d48c59545bc8bf0a42796167baefc81cc6274e7ae1edd0cc8e372339f02207c2ad7baf32fdd87480af127bc69233d756f8b3cae5d8f0b9521ad9db6737a70"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputAmount",
          signature: "30440220527c20e05736e60b0e10c706a467eb62ff408ef417e28cc60b6ebd3263c97c7c0220734e646d8a62ec28fa4a461dc6d79d6986f67c934c608c4b6e787edefe483447"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402204a899d971e708e9f4be3e7044b3ccc0407babbdf35dbadd6d912a6bd691656df02201e4a7d528901ff5dc58a812f8e6c8b1ad08aa16e42336a2e682111be13d5b47d"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].amount",
          signature: "3045022100c77b95a129d17f1c163a54db3260cc6aee8d9a686b9c9686d615a7e23390d7cd02203bc102e5e05182501adfde070fd6caf75cb26292c242846131512314f2a49219"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "30440220428d1a58e563f844783b7ccd1ad5e5fde891c7df3c68a9462c16c2473cccf6f502203102a61a14c3cff284054fe2c0be781b5a1fd94fb41a27fb0f4d22c940a4f166"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3044022063f35c92c7b24bd200305ac1ece2ea39ee4624d266821b6f8864e2a0762425c102204b33c73e96608696f491007b51d379a80eee12be2d4fe37f0525d939b9b36d76"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:a35a03a79619e46c3773d8880c952f7caeea45674557cfd2470e8fc5": {
      contractName: {
        label: "UniswapX Exclusive Dutch Order",
        signature: "30450221008e02c726bf26cf868c71259a42b689a44f9831959d0ddcc5ac383c84bb0bbff10220703c3f4703639b9419171a58e089c7e51ee700aac154b160991b2085a90f2170"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "30450221008129174f55689c87a4ab3bc85460c2ad3ba932bcd17c320c838f49ecbc356bcf02200fbfa2cd5d7cf2adc1d4fe510915ca868c0a561b4eb998f353e055638c424add"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3045022100dc616179eddf37f9e79ed4e05ac6cabaf83a7eb4ed288e0fe578995f3cb742a50220627ef76253950173d13a4e01277177d9c5db53c8752311815efa5541530f923a"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3044022038458eb3dc5db7c501cf4f7cbb32604e762d78335c453728f492ae166e9f0476022011e100d0785e9f813c146f29c1681d50f0ba66ccee3c4a942355245fb9cdc4eb"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "To swap",
          path: "witness.inputToken",
          signature: "304402204f0dd86ebece12e4956669e089238c3613d606ab2917f23e1655d32153ff3ff102202cabfb60a7225bb9855fd414431b8be2b62a459d9b8350ef5417a5e89d1744f9"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "To swap",
          path: "witness.inputStartAmount",
          signature: "30450221009735bf7c8eaa58fdc5293088a4d09be748ae7b56f3f87b7f9a471f2b8a52a7b802204afaaab811fcdfcca0f7bc377ca37b1d4b34172ef7de6d858dd2b3f8f2428166"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "304402206e2786d2a7c562a6827a8592815e65d9d05361a1ec93960ec551567fed92a63b0220453ed621d94f50995f5dcf643b43c5578bc7113ef6de28a3a6b0a339b5fb7820"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "3045022100f325ca8bdb8cde9ab52819c8a42cbf4a56fc7c76c1ce360fce9a9cec9dabbc6f02201ebfec336a311bc0c048563dbb7f6ab4813c74dcd6e523adcf7daa36f960e3da"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3045022100f9ea4f723651a6330c8d7b0f86b576eaf5361f3195399f2a4ac4c491f57af19302202d568abd40baba609d09770725cc8082aff931e4479c088c5fe4a8955a7bf0f7"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100e713e020ebd5de595572e1c5721f5ae36ef78b4d5550d0788ed8dd82043cdad702200dc1704439c79f7fce6aad713eb20247e645f02578b65e1309be2e051c833e61"
        }
      ]
    },
    "80001:0x000000000022d473030f116ddee9f6b43ac78ba3:c4dd3a4014e75ca7485d5d07a35a0864717b497bf38dd920468cabdf": {
      contractName: {
        label: "UniswapX Dutch Order",
        signature: "3045022100aaf3d94f2a63c782c0c1363827ad6516e5c5ed77350bde5d1dbdde75a302fb1c02201fe0dbafcd6fe5d4207c5db5b9e9d5e6e9022fcd8ac2d4d0c5c94d95923b692d"
      },
      fields: [
        {
          format: "raw",
          label: "Approve to spender",
          path: "spender",
          signature: "304502210097c9fc26409515773823ebbace587b2c040f78db00869eae59edd5f56a88e72802207eec9db2e4a0833ffe59a7844315e17fbd61f0eb8765fc8d949f0ec6ae6b396b"
        },
        {
          coin_ref: 0,
          format: "token",
          label: "Amount allowance",
          path: "permitted.token",
          signature: "3044022050e824afee2c1e3b5a79fbdc6ecca81c649d1eced263aeabc9ff38fa4a30ece2022069fd446f1056048e81d44a20d98958c2b5074595e4528b647fa83aa6428eca89"
        },
        {
          coin_ref: 0,
          format: "amount",
          label: "Amount allowance",
          path: "permitted.amount",
          signature: "3045022100c0fac768fa1a668435aef6337f8c0c71938b36e769adb3046dff95c71232ff6402202514823424f641eb5673d78888a47a7fc80212f9c602a449a62cb93b6fe22e4b"
        },
        {
          coin_ref: 1,
          format: "token",
          label: "Spend max",
          path: "witness.inputToken",
          signature: "304402205855411ccb0b298775bc51a4f43e375d3bda7e0c5f6c40a22eb8dfedcfc3f0fc02200f1771c08f606df2b07da9d60a7af243003d941a2820e81f54b2d9f53ee7b8c7"
        },
        {
          coin_ref: 1,
          format: "amount",
          label: "Spend max",
          path: "witness.inputStartAmount",
          signature: "3044022042f7e1ac955fe87fefab3183811df03cb9a0631458e396c3cb45c1b69f35b77b022049350af4b190b8a7bfc8e1fcf67b09fc5591d1506f53604aea71852a3a72e111"
        },
        {
          format: "raw",
          label: "Tokens to receive",
          path: "witness.outputs.[].token",
          signature: "3045022100ae64e162a06dae806c8d9d3bab0b4db4414adcb9319d7c619c5a39dfbb705f44022038f88abc2a18f8dcf58708a0818df060b27c35484185100068e0b1c579ceebea"
        },
        {
          format: "raw",
          label: "Minimum amounts to receive",
          path: "witness.outputs.[].endAmount",
          signature: "30440220682d1d814608a2d680aad01bd2b7b7a02a413617339488f2607333cbc1978af0022028412797455cb32181b5e29e9b4f7680b4334f8a7c02aa0f18de0b48d139ceac"
        },
        {
          format: "raw",
          label: "On Addresses",
          path: "witness.outputs.[].recipient",
          signature: "3044022031fb26b688bdf77b431d294f406f7a2895354ce5ee8276d85a1f12e05234d0bd022021f6f9c04c05da8aca0fd552278384a2f87b16166028dad951e6c281c5cfca0c"
        },
        {
          format: "datetime",
          label: "Approval expire",
          path: "deadline",
          signature: "3045022100c8e30fe710449e606a503369fd9f6ac495b8b7a9c2624bcc7abd3b0317075fac022058ba40814fd3cb590aad6fb8dc9e6d534ce65e97bc96d7ffc5e23230e7c005d7"
        }
      ]
    }
  };
  var __awaiter$c = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  (function(s2, e) {
    var t2 = {};
    for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
      t2[p] = s2[p];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
        if (e.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
          t2[p[i2]] = s2[p[i2]];
      }
    return t2;
  });
  const sortObjectAlphabetically = (obj) => {
    const keys = Object.keys(obj).sort();
    return keys.reduce((acc, curr) => {
      const value = (() => {
        if (Array.isArray(obj[curr])) {
          return obj[curr].map((field) => sortObjectAlphabetically(field));
        }
        return obj[curr];
      })();
      acc[curr] = value;
      return acc;
    }, {});
  };
  const getSchemaHashForMessage = (message) => {
    const { types: types2 } = message;
    const sortedTypes = sortObjectAlphabetically(types2);
    return SHA224$1(JSON.stringify(sortedTypes).replace(" ", "")).toString();
  };
  const getFiltersForMessage = (message, shouldUseV1Filters, calServiceURL) => __awaiter$c(void 0, void 0, void 0, function* () {
    var _a2, _b, _c, _d, _e, _f, _g, _h;
    const schemaHash = getSchemaHashForMessage(message);
    const verifyingContract = ((_b = (_a2 = message.domain) === null || _a2 === void 0 ? void 0 : _a2.verifyingContract) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || AddressZero;
    try {
      if (calServiceURL) {
        const { data } = yield axios.get(`${calServiceURL}/v1/dapps`, {
          params: {
            output: "eip712_signatures",
            eip712_signatures_version: shouldUseV1Filters ? "v1" : "v2",
            chain_id: (_c = message.domain) === null || _c === void 0 ? void 0 : _c.chainId,
            contracts: verifyingContract
          }
        });
        const filters = (_f = (_e = (_d = data === null || data === void 0 ? void 0 : data[0]) === null || _d === void 0 ? void 0 : _d.eip712_signatures) === null || _e === void 0 ? void 0 : _e[verifyingContract]) === null || _f === void 0 ? void 0 : _f[schemaHash];
        if (!filters) {
          throw new Error("Fallback to static file");
        }
        return filters;
      }
      throw new Error("Fallback to static file");
    } catch (e) {
      const messageId = `${(_h = (_g = message.domain) === null || _g === void 0 ? void 0 : _g.chainId) !== null && _h !== void 0 ? _h : 0}:${verifyingContract}:${schemaHash}`;
      if (shouldUseV1Filters) {
        return EIP712$1[messageId];
      }
      return EIP712[messageId];
    }
  });
  const getValue = (path, value) => {
    if (typeof value === "object") {
      if (Array.isArray(value)) {
        return value.map((v) => getValue(path, v)).flat();
      }
      if (!(path in value)) {
        throw new Error(`Could not find key ${path} in ${JSON.stringify(value)} `);
      }
      const result = value[path];
      return typeof result === "object" ? result : result.toString();
    }
    return value.toString();
  };
  const getValueFromPath = (path, eip721Message) => {
    const splittedPath = path.split(".");
    const { message } = eip721Message;
    let value = message;
    for (let i2 = 0; i2 <= splittedPath.length - 1; i2++) {
      const subPath = splittedPath[i2];
      const isLastElement = i2 >= splittedPath.length - 1;
      if (subPath === "[]" && !isLastElement)
        continue;
      value = getValue(subPath, value);
    }
    if (value === message) {
      throw new Error("getValueFromPath returned the whole original message");
    }
    return value;
  };
  const ethereum_signatures = "";
  const optimism_signatures = "";
  const cronos_signatures = "";
  const telos_evm_signatures = "AAAAagZCQU5BTkFmf9g+JModk102cX0wXVT6DKyZHAAAABIAAAAoMEUCIQC1YIQs9D3n3lLmBLNaGT3VegY8cOg56giB9fM4L+5ipQIgAwHFGoFv1RV8l3qMBIwuLqMFRPQXc6C0QcOUBVuI5HAAAABnBEFWQVh8WYyW0COY2J+8udQeqz3wwW8ifQAAABIAAAAoMEQCIGcXZLCPxvpWqc1Cp0g9m7ODawjhXhNzc+9DyDr1jFR2AiA6xq01JP1tVOHht4B9CNRdX2FpzwExGie/e27Ihec6AwAAAGcDQk5CLHjxtwzPY83uSfkjPp+qmdQ6oH4AAAASAAAAKDBFAiEAyf1QXn7qd9j3s6+bAWF3R+k2sk8l1sVeymWeFNt71WECIHto/yG0e1exvR4FmX0rHTc1W5IVR6I3qAlReOr7h8qTAAAAZwRMSU5LHMyhzmLGL3vpXUpnciqP2+1u7LQAAAASAAAAKDBEAiBRF4jgS+52eg/c0TSsqeCxBXMg924KoGTLiFOeH5UT3QIgMQEXY9f3WrGacI2ItiQoQpUWpyqF34ZlNwyl6UhlxswAAABnBERFQ09+HP4QlJpghqKMOKpKQ/3qs08ZigAAAAQAAAAoMEQCIBcofiS6faZOMHLIOz6b0wyJDf3GMYGVPhH/Xg+DfyeaAiBG6isqoczYgGKCFHCcTG2/k9eRwP9FB0xk7nu1tlX5GAAAAGcDRUxL7u7rV2QgQL5CGF9JxS9+mzj47u4AAAASAAAAKDBFAiEAg0spiaEuhsuQakJ6SVFWBsbDYAedQehwE/5gzxVXWPYCIEWz/7mhZ12Yc9aTs/0fq/n4CHCvmKvLU9ss860kiBtzAAAAZwNFVEj6k0PDiXMkSWoF/HWr7WusKfikDwAAABIAAAAoMEUCIQCKnkyb+XxOtOLXzOZ0/ZSvqmNNmoFt1I5fRLoqxU2/qwIgcqDF65vATGe91GQIgCosEIC8qRZ78ad14c2knUyEnWUAAABmA0ZUTcG+mk1dRb7qyuKWp71frb/BRgLEAAAAEgAAACgwRAIgevTBGn0tRMjDFAh+aZmehSulr4bamTUirzMhrNRvRvACIC2izh+YPZqEecMwTfVctCX6/Lklbt0ul605j2J+XC10AAAAaAVNQVRJQzMnMKT24D2cVYKUNfEDYOE8+kH/AAAAEgAAACgwRAIge16gj+W130LYkaCeHGC9r2aCgI66fVu2P27yb8vpa28CIDd19+E3guCDldk/TaBK6oDC6Rps1wtxydNZ59Ax67PTAAAAZwNSQk77MZ6l3e2M/ovPnHIO04C5iHS/YwAAAAYAAAAoMEUCIQDVvwPVmmUNBvySfeFyzTo3S6Suug5QKcHnExb6ZBrKzQIgAxJZWJf7jmwpB/5myNhicmQPwUcSjLivjtHbXbetDBEAAABpBVNUTE9TtLASFqW8jxyKM82ZChI5Aw5gyQUAAAASAAAAKDBFAiEAx5/BjbJDE0TvJn36cDXAX+jqTHiqv5TmecKvgVqsFmgCIEc2Wg0ZFxpfvAwLQVMeX8pf0/wrPkGwgLKzitGiIJqEAAAAaARVU0RDgY7Ap/4Y/5QmmQT87Wrj2ubW3AsAAAAGAAAAKDBFAiEAnTawskHThQR9wIdiC34r6wL+uywTUiMoSD2RKBlTs9cCIBDu8/tpm0ydY4P5EQO796D9D7YeHO9oTk8k9gkVpkSpAAAAaARXQlRD85CDDfgpzyLFPIhAVUuY6vxdy8IAAAAIAAAAKDBFAiEA/JoJ/9WSWAIadPMM2pUN5mxfwy0mBI13tVj1/xFVG98CIHN2jPhL5NCCJQfH50pdoC0tRjGa8mSKkhISYMBKtVmN";
  const bsc_signatures = "";
  const syscoin_signatures = "AAAAaAREQUlt767uM08P0XEvmozDdfQn2c3UDXMAAAASAAAAOTBFAiEA1m4N01/cjbnD0AXcY+JL4Vk82Sg9228yWjDM2GVgIdQCIBPqOpcCdelHlSvx/s1B+IBBizCG02x8wwZLTan6c4XgAAAAZwRNQUltJhH6HK4qPiDtR/sbKTQ3wU9BsA8AAAASAAAAOTBEAiB3j1p7IwciDF5mbdcM1o/akVrTCyARm+W0uLQgJeV7VAIgZcR9o2q5bH1pV0/8scoO2bzPwX4dL9mAJPNsXAYsuDwAAABoBFBTWVPhjCAKcJCMif+hjGKP4bg6wAZepAAAABIAAAA5MEUCIQCOKk382M0ZC+0vSMFUXJThatiEHccAo2kRVw/1FQxF1AIgcsYlHQLL1u/oNKZCi0b0pCbJADScsLLM5sUdbmbzVEIAAABoBVVTRFRtki1kGkJtz/rvEWgOU1jzTZfREuEAAAAGAAAAOTBEAiAPE5k+APZwyUo+8NDM/pcPlpZMCHMoMNLwX8/0ScnqzAIgHS650qMYIemUe80Q4e9xaKZN68mEkPhn7eMw1pmQ1CoAAABoBVVTRENtK/m4ZM3Jewi215rUZj5xuKtlxFwAAAAGAAAAOTBEAiAvp3bkYVAk1dX1i/+ucJIuvKlDIkWQ2YjAGTxNEtvv1wIge6purDnJmot5pDWto4gSAoHAc0xS+DbfA76TMj7AK9IAAABoBVdCVENtybqoz93o4yh4fim0sHir8trcIFUAAAAIAAAAOTBEAiA32xL6BEzu8v+rKrSffxkWWHplzdPEPz215wuaZs+fUwIgA4/Qi1uSkIZqUlnCGR3wXQWP23MdESPvPXKOO7pG7kUAAABpBVdFVEhtfFmMltAjmNifvLnUHqs98MFvIn0AAAASAAAAOTBFAiEA9iUzz8B5bBqxyyUW1cMjcZHEII9fqE6GNCTlKB6lpGACIDOTGSbkRmcteVankjVi+la63nz63Z2c5mmHQjO+LQflAAAAZwRXU1lT0+gi8+8BHKXxfYLJVtlS2NfDobsAAAASAAAAOTBEAiBIomydfucdysHvNDAT4RAzfIqER5w+pJKxx7vrVIJVggIgCGsdeMrRxKvH2Q/pJOVBmnHflpHnRCi2fPd93UDVZKk=";
  const polygon_signatures = "";
  const bittorrent_signatures = "AAAAaQZVU0REX3QX8jX9WXQxjk4qXjeRmiCffDem0QAAABIAAADHMEQCIDDNTFknKzOqTKF/72sWGREuq6ZYzRwv1vzgPg0zFck8AiA+d9v31W0w6h82RrfiDgz82KValj3HzQUGXn42A82Z2gAAAGgEVE9SUhlcoioXfm7ZBcRp9PZM9n6Bn0nCAAAAEgAAAMcwRQIhAOPcyrJrgeOBoCvaf2aIb4gREWBCG2t2JC06wKHg4sfWAiAE2Q0yelh+g9AwmAxHeLQO05HS1vUd2hiuWw1eeXL6gAAAAGUCSk04jYGXJN1tcXYKOPANwB0xDYeXcQAAAAgAAADHMEQCIF1NgQChyOdnixKlKZ9sYDYknnBtK5rg99Lm/FQT35NqAiBlzKTMuQetYH3YJk9mVmN55FgBGhA1aGCsbu6w7jMdvgAAAGgFS05DX2IY+nLg7kxYChKbDOW9BpTXFsdEPgAAABIAAADHMEQCIGTDomddTzrmof4IfKQQZfVfs2TVtckSfe8d/73B0mSiAiAIXyagqYd0HZisctCyZoXmoF4ENI81hD6/v0piVPly2QAAAGgFS05DX2XkZ/eemGl1fdgY37hTUGgSD2vLlwAAABIAAADHMEQCIGj4g2xe4dJRUrnFssJdINaDMCtEKsWXnVr2P6MMOhQgAiBylPiKGPXwrbB/dYRLmix3B+svcNTTjLMJ/krZGJwjPAAAAGkGVVNEVF902yhxn3+ThQfb/k8OrlVmiQPTShUAAAAGAAAAxzBEAiBiuG3Qe7xNuoHEkRNbIAe5MeI0U3BdsaBCmgQ8lhfp/gIgI1VeiDZpwNzvvOhr4mdoPajCcjbs/Wf7vUpQr0q/zm8AAABnA1RSWO31MCaupg+PdfyiX4gwt+LWIAZiAAAABgAAAMcwRQIhAP3a2Pm4ziwyl1Zgk1l2vjyoeLY3Jo7sgBrLUrDMvQQCAiA2G1JlW4YSX7cvgvJpv6P1at7iF5R4wonmm8HW4QhsQQAAAGcEVVNUWGyMAo01krg9ah0PU2NVV/2N0xVFAAAABgAAAMcwRAIgG7ryqrb35plP0u/QtLnqvPuK9RfStu4d3+JVhVgV53QCIDqNqdznA0GIMeMAqvvskWsqt/4mlgwQJYD/RrxCSy/BAAAAZwRXQlRUIxgfId6lk24kFj/6uk6jsxa1fzwAAAASAAAAxzBEAiAQydRy125KT+qULSDaT5UBXdMgzuvsrndrAlk6+UumuAIgPgrZLjQl3it8Kt8EJY5/I9Tls1UVeR0Z6qjlQ87gm84=";
  const fantom_signatures = "";
  const astar_signatures = "AAAAaARBUlNX3iV47exGabp/QcXV0jhjALzqRngAAAASAAACUDBFAiEAgTEhgbi2oTKxutOOdj6GoTmDkJwmJV1OcaSBVHK4ljICICJZpkIrtj42ijVg0jVpOxBamdGiiR560Bkxnst8O9ujAAAAaQVuQVNUUuUR7YhXXFd2e6+3K/0Qd1QT4/KwAAAAEgAAAlAwRQIhAI3kbIpmVKdKcvBw+fvWK9ukbdgdeZPvPgYY3sxDWPHHAiBZDCNfKze83OJLvLUfcR0eCU3l0ipJPPo3H09ZzoMtEgAAAGcDQkFJcz68xt+F+CZjSd79CYD4ztm0XzUAAAASAAACUDBFAiEAmWzBHNxp5B/B+JKmeaC2JM3KjObnn+L0bk4g7kKGLLcCIDY1pMhr7/V+lWRELVAUDGkuynBilLj0e6+loD/M+/M/AAAAZwRCVVNES/dpsF6DL83JBT//vHjKiJrLXh4AAAASAAACUDBEAiBTyzshRHjLteXxvAyoShBc5Ecj7Ue4IiWJErR81+QeEgIgW4i94YGc1IQeIm2KJwZBZkcDcPBmqcLu2DBPKPFaUjcAAABoBUNFUkVT5pWDti17fYpWjh7AjzS2SFifTPEAAAASAAACUDBEAiBTatu+uzkIlTBz0863/4rp+w5WFknmU2L7i2caFvO9tAIgVoFQPdxALBB6ijN7mU4RlQlRCoDXPdCtOOxzTuup050AAABmA0RBSW3jNpjp6beH4J0713ce9jVX4Ui7AAAAEgAAAlAwRAIgeP1c6VraaSUwd7c4p1AczOaAUlzZqMG9VnpDj2YC6SACIDD06qb3w3fBbdJv27Nby6bDecz+qfhiPcn1+wWmTvg9AAAAZwNERU+1FUHfBd4Hvjjc/EqAwFOJpUUCuwAAABIAAAJQMEUCIQDafggLJqO+Kfkm75xsmDbumZ5/C3ggxua+azsXWcXEtAIgdPZSYURZl0HUSAkuvGW9hTiCmAOaemptQp1GyM20ugkAAABnBElCVEP/////AAAAAAAAAAEAAAAAAAAABAAAAAgAAAJQMEQCIHlGTDe47Bjs7lzlTMbRbnXPo51j1n9safARgowCpTdIAiA5qSBkeZO4pw5jMnHuFSHy01lH1gdJCllggDtDL6LLiQAAAGcESlBZQ0MdXf8DEgr6S98zLGGm4XZu83vbAAAAEgAAAlAwRAIgXuJc5vhNG6N2frl2RYxaVyOxEWgjj67aC0WF21YBAh0CIC2/iLz+FDjfMUnIJYix5sPYdtSvPsChaCuWdqtThFL/AAAAZwNMQVnEM1sbdvptUod7MEbspo9ucIon3QAAABIAAAJQMEUCIQCDhVEXUXCctzqOYk+2uK2jSaulYSxNmyQ1GHfciBusWQIgXgdYDuoArINqInN27pHxam68SdqawDC3uMkAb776R3sAAABpBU1BVElD3ZDl6HoggdzwORkgho68L/uBoa8AAAASAAACUDBFAiEA+ck1uyzP8HqtHn4QyeAXaf/WXH0ktrX7bPWpt1Taw/MCIDooNis+S+BTi8ESkvOLqUa/xS2OuSpGcBtgHxQ3Vb9HAAAAaARvVVNEKfbknG4zl8OoT3FYhfnyM6RBFlwAAAASAAACUDBFAiEA7jever3b4B+oufHlXnFOfksgKKztPSkGANHxOdxs5SYCIHfKjY39ZdUXGczTzybDEbT+SB80fIvEKw6nXZFKSjwYAAAAZwNET1T//////////////////////////wAAAAoAAAJQMEUCIQCHQbteNOVFU0SxKaxsA3GsMySR9FRA7ultycVVCb9aAQIgOWd+pHG8K2qOL3sKvTd7rqAh7eDQxxdYxgcK7iBCpIAAAABnA1NETnU2TU93nQvQ+s2aIYxn+H3Zr/O0AAAAEgAAAlAwRQIhANhXrm5JSMFD5a61dQWvDS0CBe7rCti4Xoc2dGLZKPhmAiBuYwGb3Ipj1GueTS5QckHCn1EXtBILgpv2uTgeJWAUegAAAGcDU1JTlEhhBpZlnej3Lhgx05IhSuHKSDgAAAASAAACUDBFAiEApzv+tz/yruyzshzmZWQyFIMvLFDAQRyZao7jr2tYF7QCIGeevnXjOpXEN6eprA/zhb9tyyPFRrLXB4MwanvJnL7OAAAAaARTRUFO7oE4s70DkFz4Sv4QzNDcy4IO4I4AAAASAAACUDBFAiEA8qjVGO2pAVxGQd75oPSTxYJPS+/luJ1h0kfswzLaJnACICBwpfc+NIcYJhe+LrHyKcSVlxZ0TFL59vje4DPQcoI2AAAAaARVU0RUN5XDbn0SqMJSogxae0VffFe2AoMAAAAGAAACUDBFAiEAnQHUCXm9OgsJucQcrS7jFWH/h5oQPGm3wrSpM5VeYTcCIG24Mvr/nn/WCQqUq76ubwuEI2JGd9g8TLrHZWlMZV7YAAAAZwRVU0RDai0mLVZzXboZ3XBoKzn2vpqTHZgAAAAGAAACUDBEAiB0eVLf8YlnRES9MCPnqbobjcE9M0u2QYMhHkq3MnAF6wIgBbW+2HYftvp8k4gXB5oP34kmAmkEMShSgArY6W4uLDQAAABoBVdBU1RSrqrw4sga8mQQG5EpwA9EQMzw9yAAAAASAAACUDBEAiAiln9WApuoes9mngYNVPEWz3nMrbD+d/356M7kIBbyiwIgMf7z0KiwW7PQF14ULOBG8U/ngDqILt+2WUOzh1xonPQAAABnBFdCVEOtVD8Yz/hcd+FA4+Xjwzkva6nVygAAAAgAAAJQMEQCIHCZCJsiRu3ZLW03cjzZbIBBn4/kHg6NmzqJbJaYv+RTAiAxM+5YeAvvoJhhBT+6qodxyylN1f9Ffhz511SGvxJELwAAAGcEV0VUSIHsrA1r4FUKAP8GSk+d0kAFhf6cAAAAEgAAAlAwRAIgEtTE44X9bTpdJh0H6joL6RnLuLD803Bl7PEEz4W900ECIC/ViGcysW8r4NzwI7U+dggyYxyxoZeBvFQdIhID4FdEAAAAZwNaTEuZgILEiOVIgg+XDfUXO9IGHOkGNQAAABIAAAJQMEUCIQDWbZ273qtq/RNVixxWoLobxsO4QilIq0ynd3NzBh6kAQIgSM7FXxMbagdH/yHOyU68t03FZAYg+pHLG+NJgEXDns4=";
  const polygon_zk_evm_signatures = "AAAAZgNCQUwSDvWbgHdPAiEVY4NNjjtyyxZJ1gAAABIAAARNMEQCIBB4EHWXzxi0IEaKkiU7vFEpOXQy4kwo7grxi05jdFM1AiBs37YBxlu19iR51k/fpN30u2UgeRitvBufchx/oTn0MwAAAGgETElOS0sW5HUnEaer7DJ5nJdvPO/AER8rAAAAEgAABE0wRQIhAJyFhYbKOiKL902FRVdvBdelqGr52nFMJ7pLjsEe8facAiBj40fwSsKrd6Zzj2M0O7VfUCG4WTmeWTbRF92KHL9c8gAAAGYDREFJxQFbnZFh3KfhjjL28lxK2FBzH9QAAAASAAAETTBEAiAgYAvXuzxBW5h7nDtJ3hPq20jzMxH+0A093jUNRIjvXAIgDMmkKpFhyvZ4GqMuEuMXRVU2tcexb2aLbXFYn7hKFy4AAABoBEZSQVj/hUT+1Tedn/qNR6dM5rkeYyrETQAAABIAAARNMEUCIQCktWno8HwkSzraQQDYctbfnNgN9TsX1B0n10KImXznnwIgSB+968nJuwKCsBW3btN8JD5NYSX7dlv9g3Cg7nqJ8YkAAABpBmZyeEVUSM9+zuGF8Z4ulwowHuN/k1Nu1mF5AAAAEgAABE0wRAIgc1fxlBfnVIaosVMvNwIWFah0JF6qg5e3L6cnCtCnBw8CIE2iQy5MTsx1KtH86fv6Ib/ARSpTyxDcjl21KIqhXI3tAAAAZwNGWFNrhWoUzqHX3Pr4D6aTbAt1lyzKzgAAABIAAARNMEUCIQCseSwbWhBFxuvyicAucWtVsI6YxQON0zLL/Nj2ksuWNQIgeabGiTxs6DBTAx9DALL7Nf0wzNx1VZLuoLJfbIR9QKQAAABpBU1BVElDogNvBTgiGnejk38TeWmfRJRQGNAAAAASAAAETTBFAiEAz8Jk9BXmMsXDM6pU6cJiLahxs6eK6lCfPAcMf5Cr9jkCIB+zwWrWIzNYCR4PdonUr6Ic/YYg9BgNItUo6pcrzbpTAAAAawdzdE1BVElDg7h0weCdMWBZ2SnaQC3LGpjpIIIAAAASAAAETTBFAiEAjtQJtql2Mb5RpdCHtq8uSDIthM35+SG+tQqNOB/alQwCIGVyjASsFZXj0yuO9cnTdbnJeM0dAprBM2lvXP+1Md7AAAAAZwRVU0RUHkpZY6v9l12MkCHOSAtCGIhJ1B0AAAAGAAAETTBEAiAkReRQvtpKhTmSiRA6Zq9Q1WwuLDYsijR/0iUKPkjmwQIgKTct2VA0hZwxCQRfYahgeDWUndrIgt8d1E7xBP1Zwo4AAABnBFVTREOozoruIbwqSKXvZwr8ySdMe7vANQAAAAYAAARNMEQCIH8SEt5thaFGML5AICliF+kT/9rtL0TdCDdp0/sDdx4vAiAdz8Oyqtfg1z0RNVubxRHlipCgcKE83FqAUn+heCh4xwAAAGgEV0JUQ+oDT7AusYCMLMOtvBX0R7k8vgjhAAAACAAABE0wRQIhAJJ3ATVPz8uaLme6Rc4kBNCGOvJILg0TQkmsaZSSW/M/AiBrgi/QmGMs698KlE4s1l4Z2NxfiPluqhy+z8WKNBusWAAAAGcEV0VUSE+aDn/Sv2Bn22mUzxLkSV35OObpAAAAEgAABE0wRAIgOJQdkDAzH6gptH5gKPrESDotpg8iiriPAdyJ6HApXcgCIFCyHL6YCLQesMKkgrwrASIvjIyrh4gtm1pql/pIMKth";
  const moonbeam_signatures = "AAAAaQZ4Y2FVU0T/////UsVqkle7l/Sytvey1iTs2gAAAAwAAAUEMEQCIHzslOYINqYHf66Ag0XnJEUjFM0GOhtEVzRscNzWfBIoAiB5c821aN5GSpA5mzkAjxOeoMgvXyYqthduYbR8AeH5LQAAAGYDQUxNFYGSl3C+MnWoIGjBE1tt1ZxTNO0AAAASAAAFBDBEAiBf+K1716HlHP0e/i+hMrQkHwwSYVGE3EmerNkZwtQ/RwIgbIwCj2Y1RznIqUJ7mzF5tZEZh4dBYZNwuL5gzbySk4QAAABqBnhjTkNUUv////+Klza0Tr8YiXJyW+1nv2lOAAAAEgAABQQwRQIhAM1y4UlOiJe3T5bEGfwEQ7Wg+sYECet2mM7ZeNZ0mrEQAiAVj9wPjxEHhvJ7HvLAXJk6/cuIaSr6I/BOTm1YSHS55gAAAGgEQVZBWEeSwey5abA261EzDGO9J4maE9hOAAAAEgAABQQwRQIhANX2axHENksRsJwE2MXNMQzStFOkgmw0N/B6nPm5YIwDAiAs0/Y6NtqHlfqIn5cdssn0NBW0EYQQqu6PzEab3wpPJwAAAGsHYXhsVVNEQ8oBodCZNWUpEFHa/zkIklGKz606AAAABgAABQQwRQIhAI9Aqs4n+fJD1xNgzbiYko7aE1SKw6goVJMM1XIFOVIiAiBjLQLVDKJwzjN4gALUS+jPXOPPV3fHDWOUB0BF9SVfawAAAGkFR0xJTlTNO1HZhHjVP0UVowa+Vlxu6+8dWAAAABIAAAUEMEUCIQDiBrZc9NdO8rxPf6yH6DQN07Mc1oN7FTrN/qsJhBy3KQIgEZ087m8OMoffYKwDDryqyoO/7ANVTA26vdOVmTsJD0sAAABnBEJSTEH+sl8/3a0T+CxNbbwUgVFvYiNkKQAAABIAAAUEMEQCIFu1rV4eYx6C/MwWHkwyqUhuMbPtbMGMMbIrwX8/6xMZAiAa2Jlxw18hJrjDJYeQbc4vSy74c5SgMRh1/SKArPslBwAAAGcDREFJdlJ37r7KLjGRLJlG6uECEZmznGEAAAASAAAFBDBFAiEA3P89fARK4C3RpJLRzgFN4mRDobTvKCNvhkG8P9k7v+gCIAioxrRF3VWEhXDYTthU0dRPwRh5N1+tZ9gip8yUNQAxAAAAawhET1VCTE9PTidYtX48BSritmvi4XXI8ZgHI9evAAAAEgAABQQwRAIgeL8MaljcwYtvSfWfNONG3jYtXEWV9AByZL51pgzpmkICIGrvKFLdH7aKb8MmdSTeA9c/kX/qEOZFleF5topTqp6FAAAAZgNFRlSkI+futgVH2ce2UAVHe2OufOZ+YgAAABIAAAUEMEQCID+tMzSxsirtSQawQC5ROJ3Y6LitYm1tCfhYVob81WlQAiBauT+U4Ux1Ky3VguG6yd+dkQi1zFM2xGUX7LyBBNjE5wAAAGcDRVRI+pNDw4lzJElqBfx1q+1rrCn4pA8AAAASAAAFBDBFAiEA2yDeJZn7GlzqtNKinB5foeJRL7UknlciW6Ckh1aTgtYCIFiMPAjFcpNpsPXxdVIyceNxnJp3c/IUTBeODvCUMWEKAAAAaAVGTEFSRePkOIj6eAPNx76keKsyfPGg3BGnAAAAEgAABQQwRAIgHoWCRFQAOZKkyCz4M4ApBqFNDRsv83Nzq28nxie709sCIEtSUwDI7xIJs1YymKhAqgUf1lbFSgPMf/ug2ifxKxWyAAAAaARGUkFYMi6GhS5JKn7hfyinjGY9o4+zO/sAAAASAAAFBDBFAiEA8NCn8Y4E8EB+l5sHCNRFPnRwBFeLgP9BJLEk3i7IM0cCIAzQnoB+hTge6VhV/va80XJ7vsg/Ku/HV7fXpxki70ZqAAAAaQZmcnhFVEiCu9G29t4re7Y9PhVG5rFVNQi+mQAAABIAAAUEMEQCIGXvHcM/yGkt4XgtDp5oYhVf9IAqatqNMKl2fniTTVPBAiBCsT7XfaPeDeGTeVbKf/T8e9w079zGdDv5gu2mKCGsqAAAAGYDSFBPgj2CbTq2lWupNIk/Ml58Mj+q9soAAAASAAAFBDBEAiB+j7Xg8IJxT3+n6yUl291dspOVRhs+FCM8Mk9I7NNv/AIgcjbtVghwtTvJfP1qky21QIPez6hw82PKNAT4HPOVwD0AAABpBnhjSUJUQ/////9awfmlGpP1xSc4Xt9/6YpSAAAACAAABQQwRAIgS7yvnIeBvw6u2DcF8vJt1rkz8TT/DNn7Q2mZnzF2BGwCIEwLtQFddoDhI0ys11MEvhl+mkRmbpdw73HU23rLS+4bAAAAZgNNQUnfpGR4+eXqhtVzh4SVmNv7LpZLAgAAABIAAAUEMEQCIH0NCXpqtu2IUVSvddNq8xNkoITdcy6IJ8iBsU9NqBcAAiAeF4EX5BUhiftYDaJx8PzSol8SEDk83pXDdoDJCwWFFgAAAGkFTUFUSUM0BaG9RrhcXAKUg/vs8vPmEQJuRQAAABIAAAUEMEUCIQC2w1lfHUvzy//8Qv7WpE/0oJtaUVaOvKsLovpGUbLeTgIgHD8NMRYbp5qLffXW0mJNWLYMSHZY0lsRLvHTYYKiy6YAAABpBXhjUEhB/////2PSTsyOuKe10IA+kA97bO0AAAAMAAAFBDBFAiEA/U1APYEbTN4ydkHmGQYjc/e2xdnJusyOEJs1uEcoXDYCIB1/tOwt+wugfZWiwtSAO5fGApqMIhpvUF5z81zKw7uRAAAAaARSTVJLUk1SS0yTZr5wbTqQ3PcAdsoDeuMAAAASAAAFBDBFAiEAlnFK87euPT9MP+t/OTeLDnYs8sICzxF3HGWdjFGS6dQCIElvZ2U4z6HKS32DhDb+J986Hxn7N7jMnG1keErhmm5sAAAAawdzZnJ4RVRI7PkRFjSK8c/+M16YB/AFEzK+Eo0AAAASAAAFBDBFAiEApKuKw8E8bywlMkaW5gn60JUM3NvZztS9l8yFHM8oiOECIBUACY3j5SNPj4lD+ChWphldzhoni0xSsnyFOZgd560XAAAAaQZTVEVMTEEONYg4znLV5h4AGKL/rEvsX0yI0gAAABIAAAUEMEQCIAWd1no2wBPwt/1TvuD/9MOpWv7Yh5EZOOHEuZTBO2e3AiBkMYQq7Xu4TlOIb2847uZbElRIouEu3OtrA+10RLFgewAAAGgFeGNTVUL/////Q7RWC8DEUaM4bggr/1CskAAAAAoAAAUEMEQCIE5EwUwv2kQ3pPqEmg0JhS+7trMk4unOHpwUVsEeyZ1PAiAMmJwpf9U4RQDzEG+UAvYn3NLUss528W4LWzWnVV0cRQAAAGcDVEhPc1q+SOh4KUijfHdl7LdrmM3pew8AAAASAAAFBDBFAiEA/6/gDA17Cdd16G9ltoPHSN0oE9mxXx53hg029BxYb24CIGfCbd2/QY8IrnNae8wRMBLqsibVkmHD1s7aFTp9rNaGAAAAZwRVU0RDgY7Ap/4Y/5QmmQT87Wrj2ubW3AsAAAAGAAAFBDBEAiAwae5IW62nublcXXEdYb+nZ2v1n/GQ33WOfgUGjtK4dAIgCiGgXMwvEuav5SlPYRk9bk+g3RWqaafU6PcbOPPXm7EAAABoBFdFTExRGrU/eTaDdj5aiClzgwE2iiQR4wAAABIAAAUEMEUCIQCPbNUKkQSKssRe7t4e+cYmCHLELQGTovuwR46Q0MZYvwIgdLty8AHYBt5U3caArMrjcR1tgFHLoEDdxUouCU/gPXAAAABoBVdlbGxlg4nPW+jx5WIR0iZmiouPbK3mHuQAAAASAAAFBDBEAiB8C4xhOL9fmj5don3ohJdgFMQabRJXhA+gkcMLLyB+CAIgcu9q2gqi8YjTu77A6Wgz+UfKx1dPZhznWDxVrI3s6VAAAABoBFdFVEirPwJFuD/rEdFar/79etRlpZgX7QAAABIAAAUEMEUCIQC81r21CokLfBDD9mviTGvcRW1f9sfrBElsccfEvkvIoQIgYJuzriovmS5gEAxId/3zb/dZd/FlzDoW7Z07dvty938AAABpBVdHTE1SrMFdx0iAyZRHdUSDBLJj0ZHGB38AAAASAAAFBDBFAiEAiH4kp6TwTtixtmcGUKFfmBHh+B0KrFVjn6k8FI3DeF0CIFEP8dHZDB/Z2TUrjqLtHMUmRJpaaIax6Gjlia2O+oZCAAAAaAV4Y0RPVP////8fysvSGO3A66IPwjCMd4CAAAAACgAABQQwRAIgMkenBKxQqzMB6UTG2ovcg3udiOoVm4oC1+tZt12QmiICIDCfKo3ORdAiv8Yr5ZGN9lDxewSy+/CwC8hsNci3qw7U";
  const base_signatures = "";
  const arbitrum_signatures = "";
  const avalanche_c_chain_signatures = "";
  const linea_signatures = "";
  const blast_signatures = "";
  const scroll_signatures = "AAAAawdhYmNOVVJJMwxD0ivWWmD/6pOhl/BOh/qie3AAAAASAAgnUDBFAiEA7Bz79Zpd4/JhoShP9ZZlX5t7UsIIQ0WHoLJHCulr6X0CIGsmaD+6cFXZyvT1ZxIm9NOYIm+ZbbbxGWKtjCocj/i8AAAAZwRBTktS30dLcQm3O31Xkm1DWY1ZNBMRNrIAAAASAAgnUDBEAiBY9xNIeydjoV2t0yxlGknpQuNWmnKlbqkWc8tsp81j2AIgQRW+aGgUHICKDXLOo5WMzL7enCBBVkzLePwftbZlilcAAABrB2Fua3JFVEgS2M4DXF3jzjmx/dTB1adF6ro7jAAAABIACCdQMEUCIQCqxPUKVq3oEylJzQ1wH2LA8K7cjE5eBBrrzz8IZpk/CQIgLyRMyPZcNEvfc6XauOJt5mA6RZ1PipoZv5mE5k02X8QAAABrB2F4bFVTREPrRmNCxNRJvJ9TqGXVy5BYb0BSFQAAAAYACCdQMEUCIQCiWjht3cDn1bLjTx5Jd06zw+xtCJjwe6wHJkZAmMK7FAIgbTsft35CiE+WX6+P/sO0/zYvPMg87zdxZr0M8mrf9/oAAABnA0NISS/Fz2X9CmYIAfEZgyshWHVpaCZtAAAAEgAIJ1AwRQIhAOZhGH6x/rOmMAnW60/h+gU8Q/IyZL57O7oNrN02QQm3AiA02K/vUNnvdDR31W60+XqirPqDGaDrLOmhm86IaeVGjAAAAGkGREFDS0lFuQEJZDATJhYBc9ppTAaXovzoLzkAAAASAAgnUDBEAiA3CTLZ9ugVPdsnlI4I23Pt8e4O4nDG0J/csK+U7ld7mQIgSjfNYZVdlCFBxzb79+8Gg/F5PL/LJYngQSAQ1wMqdK8AAABmA0NBVN1qSZla04/nQJtdXLVTkmG9G8kBAAAAEgAIJ1AwRAIgW1/6eXccV4qK7lq4Jue0d1equv0z0nsxoJ4RTc4W46gCIE7d9Bp8j7pjuRhaVCGTGHY2jJ7H8hKNa8MEz3ytJGdBAAAAaQZmcnhFVEjsxo0EUeICkkBpZ/58BCgOUjisfQAAABIACCdQMEQCIHXezwfj2SPj+D/GfEd/nNMMWbarM1R8VVWkHu4eTEloAiBHwxoj66RJkzs9e5bvfK7Yb6LX5KlWRn9BD4llSHbFtgAAAGcESUJFWHird/fVkPsQGqGK/8I4y/6jHq1bAAAAEgAIJ1AwRAIgSnPZnAFkG3wX8nghhBn/mzJdpK4gO271LguBjcMFJDQCIDhURhhLKYDEXTl5/krRvp01vMKZlVbyhed50+WcWAFPAAAAZwNJVFArHTb1thrdr32n670Rs1/Yz7DeMQAAABIACCdQMEUCIQDKh1u1+0wD6NqQzPRjS7yCl1tB65eP0m78WF5G98PBjQIgLAn/brVbgHmKTY6b5/s4B21mz270BRNq1scT4MNmqZoAAABnBGlVU0QKO7CLOhWhm03oL4rPyGJgb7aaLQAAABIACCdQMEQCIGjeB5xWrB1ctvpldb7WTD+gl02Nc6toO+4KlEvzdrh+AiA2G+opXJPGBKRLopWzg4kY+hXbHhJ7+07j9v6MfKoEswAAAGYDaVppYNAewtXpisUci0z4TfzOmNUnx0cAAAASAAgnUDBEAiB1rP1XFRIpbG49zNfCJ7AZbKkWxIc0ByX/et1tbPEhlAIgNCPPLq2420cvpg70XCkCiwEuDfrUNE2WdhEnyhWDWC8AAABoBXJzRVRIZUIbqQkgC4FkDZi5edB0h8l4G2YAAAASAAgnUDBEAiBKksE0OE6Qhjjtl49AJarBA26GjurXC2Y0QAHFuCBFPgIgG8XLdiTHAo4RYGO0WlAB3dj//xa7Kqdv6wgh4R2LnHAAAABnBE1BSEFqZhMSk40ioqDif1hQc+RAaQOZCgAAABIACCdQMEQCIHdGvST4Txf62bByurvIAEedkLuJlcTF0IlL3HjzXE88AiAZjRPxTljQtQ9ZkGGpN18dgZSvmU6FVvfH3sZZV7tiNgAAAGYDTVZYABjZbFeRIalDBySdR/BT4taHtecAAAASAAgnUDBEAiAQ5ue2RWUJMah/etkkXV83KiGm7mSspRLbqQHG2vSexAIgMXtr77e8/iEknIZu3VhL3oPa+13UO6aiGexVTw/3sGcAAABnBE5VUkmqroN4gJu4gVwI08WesMfRUprXaQAAABIACCdQMEQCIFr0dsM9WHK1aSbbXHNp1h5suRTlrIbu9gkqss1Of6cYAiAQZR1jlsxQgEDP6IEb5TPV1k1s6tfvgHK2fQG9nVQGmgAAAGcET01LR2t9HJ1Rnfw6XY0bfBXU5bvo3eHPAAAAEgAIJ1AwRAIgbIHf7RbKEb5HjzUVKAKRwKvai4zJaXpdhbT6sHxdrJYCICVGu3IXqc0ZuOWqAUHF4q8Q87AcrH2F3aPbrrAoL2TEAAAAaQVQQU5EQWGpzFYbbB+cMbzetEev7PJfM7v5AAAAEgAIJ1AwRQIhAJAG96hGBz/nTOHP/Piy72KcO4kZXfKQKcMXJv6FdF1FAiBlKqebvWJkMzcFC2a0qlGYsAnBZCZfuGB3R8rvTr2QwgAAAGoHUEFQWVJVUw/EeeL5tzEL+x22Bs9WXeppEO7cAAAAEgAIJ1AwRAIga27Y4D0FbNAxt4Bj2N+XSqgcwZT0eUm8FIFoNsTdAS4CIAXp0DQSiyhZzdmvDfRZYy3vfwboJVjF9ulk0uV8QW9EAAAAZwRQVU5L3esjkF9ph9X3hqk8ALvtPZevHMwAAAASAAgnUDBEAiBmlPz/a0F24qX9TSd3rxZNahvAXpQJY9L2yo3KQ6XNQAIgIcCIKHmLdovqQpJL7/4cA87nz8pxICcY9ZZCurW/LMcAAABqBndyc0VUSKJbJVSLTJiwx9PSfcpdXKdD1ot/AAAAEgAIJ1AwRQIhAPmO+BMpPEMHSTyowbG2ypeRcFHqivMv9Pr0LfNUkLdnAiBxSTtC5MB+RHYmPLDqpm22elzuLcdNs6HwMuZ6hb5d5AAAAGoHU0NSSUJFU3UDUan3X5jywukdTts76xTnGVV+AAAAEgAIJ1AwRAIgI9CaGC3uepRk1w4NcEDAh0xIsz61hjVCkjKosMzmrukCIGDhCjrYcJJb39wBMwr4Er/cXeG8pgPvaTPTXxXLbFU6AAAAZwNTS1mVpS7B1g50zT6wAv5UosdLGFpMFgAAABIACCdQMEUCIQCuvIxR8Pya6Y50An6lGlPVJs1ZGX/lVrfjCDjy20G2SwIgQYfQ4nOEo089xl5DlvkbB0DuA73z2mPLQTKfWSjqlgYAAABpBVNUT05FgBN1EJeYIjIhk/yZfUANWmx0e/cAAAASAAgnUDBFAiEAoxrr3JLsai4m56TNul3bDTHxipZjnIMEYtan34bCn30CIBUP+U9paX3tMyQ9yRbTkZb3YJuFjGGmNI3Jmtg9MFdGAAAAZgNTSVMUZ7YqauXNyxCmqBc8/hh90sWhNgAAABIACCdQMEQCIAFFyi+LJapac7b4/V95+PM1KqyXM5hI76XrRhjP2uavAiBdOJYww673C/drC7PgTGagehy4NEPfjW2UFJQ5WQPKtwAAAGcEVVNEVPVb7Jyv2+hzDwlqpV2tbSLUQJnfAAAABgAIJ1AwRAIgKO2Vv4H66xhD8QLkTPn+6FgV9gIMGijLeiubepfXU7cCIArNxjU89FSF9OnucGffBlLW2VgCmcdW0fgp0ZnKqI89AAAAZwNUS04aL8tYWzJ/reyR9V1FgpRysV8XpAAAABIACCdQMEUCIQDA0iLOem3CC93DXogFgsAxJhM124qpc+FF6clRK5xSSQIgEUB3gkZLak5Id396hqNN2P4RaZ+2BaYV3ny0oeGlKM4AAABnBFVTREMG79v/KhSnyOFZRNH0pI+flfZjpAAAAAYACCdQMEQCIDjjopGABikMuhCp23eLA5pVu98aLR9gEjcnDJzwjJXIAiAFuHGWrrWmOrKuJYMwdw7J6oy8YYo3GJIFkbRLpydzsQAAAGcDVkVOaQ8dLaR9mnWak90rCs48FifyFroAAAASAAgnUDBFAiEAnymsGIMtNk7GWRagqaUJOke3s788qT6fEDFF0p4PRD8CIGLR3A53xyJC3qVK/RapsZSHrjF9+dT2VTPfTfjzzjDRAAAAaARXQlRDPBvKWmVuae3NDU42vrs/zaymDPEAAAAIAAgnUDBFAiEA1X4GZSYgYEr+KQm2cOxtBfx2tOPPtF0Nc0xKBG+lwKACIAwVdgPG4zcoh1nmeFFZzTn3bhhJzUdFsAU1KrbI0DuJAAAAaARXRVRIUwAAAAAAAAAAAAAAAAAAAAAAAAQAAAASAAgnUDBFAiEA8aYEcu8nvnsUojm2Q/zNmlDPikQiRrPCgNiH9K4WB28CIFfQKXzICPQF/aOsubn7zdoJmIptCUqughgAZNJBun11AAAAaQZ3c3RFVEj2EKnft8iWRJebSg8nBj6efXzaMgAAABIACCdQMEQCIBAM5wwNe91593nxdYmeptTwiul25K1g/kfPzoQ/hVWCAiBcLGHyWSef3taBpJ5aYPTey/cGVKO9HxY2gbM6mbEbjQAAAGYCWlAhR6iftGCHUoByFtUHBHHAmg3OMgAAABIACCdQMEUCIQCattnM43+2ubeIgsWxWbsFqtsrv467fEPt2E6km76OvAIgTDtdp9FOhc3HuYg5RgRJQqPT062jVQ32otAuPuq+6fwAAABoBXhVU0R6RNS2J5l7QavSvy6gW3Mf5TXwHD0AAAASAAgnUDBEAiALvZTPpSTUX5nJ1j/3UlNw7zatiZqD5fL0ZMsHVYhoTQIgOhAoSrkzF7/AyNLgrVHSH0Hkj/R5pDazVIFZMUpM87wAAABmA1pFThiLFYyvXqJSAS29YDCvwDAynElhAAAAEgAIJ1AwRAIgNZ9Qpc/ILDziwVGaMTbLTMpqBMb6Cw9Pb9L0gMy1LvcCIDnkb5713e3HGNqiOrqWIVMPTJK2loBLiYZkRFCz5yBX";
  const neon_evm_signatures = "AAAAaARVU0RD6msEJy+fYvmX9mbwfTqXQTT3/7kAAAAGDprA1jBFAiEAvI520aR/1BdUTs1LOLHzCXf3XIcR3IbWWkm++Ckf07oCIEyxewn8LU5eMIlGnVrR5E66B68c45snJPMVtreUehnSAAAAaARVU0RUXwFV0I70quK1AK77ZKNBnai7YRoAAAAGDprA1jBFAiEAv2xly1pOs281T3IYK+tNit+wuCmEpk7YEZpoI45mByQCIFJgwf0NJ9LpupW1NbVZF6qq9FKA44T2pxpj9fnuCAGuAAAAZwNCVENU7OydmVpsv/ODj2qPOAmeUYgF1wAAAAYOmsDWMEUCIQDQCq6SNpN2ZGoN24/LdTH3IIdt1AEvN+wzv/QKGOgpfgIgKKrIysE+wePcoc7LK8uR+N0ff+Zd3bNRWt+gOIJ7kXsAAABnBFdFVEjP/YTUaCIMEb5k3J32Tq/gKvYOigAAAAgOmsDWMEQCIFFPt8VFAepTqhleKBf3+OhYWrXCE+ajMv1v2sGeGM5DAiBQC35yROO/oOJpMt9TO61xru0osWctV1bvhAC7FfXh3AAAAGkFV05FT04gLDXlF/qAO1N1ZcQPCmll1yBGCQAAABIOmsDWMEUCIQCKjfomgkchszZ1exjDavteqKbuBsmkpmjC8r2cTnlzugIgdkJpHb3IvvLsY/tLqnGqMx9OssmSrP2LXq1bjDrCy7wAAABmA1NPTF84JI8zm/ToSiyvTkwFUoYtyfgqAAAACQ6awNYwRAIgS2h5GrIioMeBkSwNbnCsmsz+SqQFYfX5eHF/YwnP9EYCIC+Iv4Khdnl6I3OfplXTllyMgswS3xMWpkx7xeqFA5WO";
  const signatures = {
    1: ethereum_signatures,
    10: optimism_signatures,
    25: cronos_signatures,
    40: telos_evm_signatures,
    56: bsc_signatures,
    57: syscoin_signatures,
    137: polygon_signatures,
    199: bittorrent_signatures,
    250: fantom_signatures,
    592: astar_signatures,
    1101: polygon_zk_evm_signatures,
    1284: moonbeam_signatures,
    8453: base_signatures,
    42161: arbitrum_signatures,
    43114: avalanche_c_chain_signatures,
    59144: linea_signatures,
    81457: blast_signatures,
    534352: scroll_signatures,
    245022934: neon_evm_signatures
  };
  const defaultLoadConfig = {
    nftExplorerBaseURL: "https://nft.api.live.ledger.com/v1/ethereum",
    pluginBaseURL: "https://cdn.live.ledger.com",
    extraPlugins: null,
    cryptoassetsBaseURL: "https://cdn.live.ledger.com/cryptoassets",
    calServiceURL: "https://crypto-assets-service.api.ledger.com"
  };
  function getLoadConfig(userLoadConfig) {
    return Object.assign(Object.assign({}, defaultLoadConfig), userLoadConfig);
  }
  var __awaiter$b = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const asContractAddress = (addr) => {
    const a = addr.toLowerCase();
    return a.startsWith("0x") ? a : "0x" + a;
  };
  const findERC20SignaturesInfo = (userLoadConfig, chainId) => __awaiter$b(void 0, void 0, void 0, function* () {
    const { cryptoassetsBaseURL } = getLoadConfig(userLoadConfig);
    if (!cryptoassetsBaseURL)
      return null;
    const url2 = `${cryptoassetsBaseURL}/evm/${chainId}/erc20-signatures.json`;
    const blob = yield axios.get(url2).then(({ data }) => {
      if (!data || typeof data !== "string") {
        throw new Error(`ERC20 signatures for chainId ${chainId} file is malformed ${url2}`);
      }
      return data;
    }).catch((e) => {
      log("error", "could not fetch from " + url2 + ": " + String(e));
      return null;
    });
    return blob;
  });
  const byContractAddressAndChainId = (contract, chainId, erc20SignaturesBlob) => {
    var _a2, _b;
    if (erc20SignaturesBlob) {
      try {
        return parse$a(erc20SignaturesBlob).byContractAndChainId(asContractAddress(contract), chainId);
      } catch (e) {
        return (_a2 = get(chainId)) === null || _a2 === void 0 ? void 0 : _a2.byContractAndChainId(asContractAddress(contract), chainId);
      }
    }
    return (_b = get(chainId)) === null || _b === void 0 ? void 0 : _b.byContractAndChainId(asContractAddress(contract), chainId);
  };
  const parse$a = (erc20SignaturesBlob) => {
    const buf = Buffer.from(erc20SignaturesBlob, "base64");
    const map = {};
    const entries = [];
    let i2 = 0;
    while (i2 < buf.length) {
      const length = buf.readUInt32BE(i2);
      i2 += 4;
      const item = buf.slice(i2, i2 + length);
      let j = 0;
      const tickerLength = item.readUInt8(j);
      j += 1;
      const ticker = item.slice(j, j + tickerLength).toString("ascii");
      j += tickerLength;
      const contractAddress = asContractAddress(item.slice(j, j + 20).toString("hex"));
      j += 20;
      const decimals = item.readUInt32BE(j);
      j += 4;
      const chainId = item.readUInt32BE(j);
      j += 4;
      const signature2 = item.slice(j);
      const entry = {
        ticker,
        contractAddress,
        decimals,
        chainId,
        signature: signature2,
        data: item
      };
      entries.push(entry);
      map[String(chainId) + ":" + contractAddress] = entry;
      i2 += length;
    }
    return {
      list: () => entries,
      byContractAndChainId: (contractAddress, chainId) => map[String(chainId) + ":" + contractAddress]
    };
  };
  const get = /* @__PURE__ */ (() => {
    const cache = {};
    return (chainId) => {
      if (cache[chainId])
        return cache[chainId];
      const signatureBlob = signatures[chainId];
      if (!signatureBlob)
        return null;
      const api2 = parse$a(signatureBlob);
      cache[chainId] = api2;
      return api2;
    };
  })();
  var ERC20_CLEAR_SIGNED_SELECTORS;
  (function(ERC20_CLEAR_SIGNED_SELECTORS2) {
    ERC20_CLEAR_SIGNED_SELECTORS2["APPROVE"] = "0x095ea7b3";
    ERC20_CLEAR_SIGNED_SELECTORS2["TRANSFER"] = "0xa9059cbb";
  })(ERC20_CLEAR_SIGNED_SELECTORS || (ERC20_CLEAR_SIGNED_SELECTORS = {}));
  var ERC721_CLEAR_SIGNED_SELECTORS;
  (function(ERC721_CLEAR_SIGNED_SELECTORS2) {
    ERC721_CLEAR_SIGNED_SELECTORS2["APPROVE"] = "0x095ea7b3";
    ERC721_CLEAR_SIGNED_SELECTORS2["SET_APPROVAL_FOR_ALL"] = "0xa22cb465";
    ERC721_CLEAR_SIGNED_SELECTORS2["TRANSFER_FROM"] = "0x23b872dd";
    ERC721_CLEAR_SIGNED_SELECTORS2["SAFE_TRANSFER_FROM"] = "0x42842e0e";
    ERC721_CLEAR_SIGNED_SELECTORS2["SAFE_TRANSFER_FROM_WITH_DATA"] = "0xb88d4fde";
  })(ERC721_CLEAR_SIGNED_SELECTORS || (ERC721_CLEAR_SIGNED_SELECTORS = {}));
  var ERC1155_CLEAR_SIGNED_SELECTORS;
  (function(ERC1155_CLEAR_SIGNED_SELECTORS2) {
    ERC1155_CLEAR_SIGNED_SELECTORS2["SET_APPROVAL_FOR_ALL"] = "0xa22cb465";
    ERC1155_CLEAR_SIGNED_SELECTORS2["SAFE_TRANSFER_FROM"] = "0xf242432a";
    ERC1155_CLEAR_SIGNED_SELECTORS2["SAFE_BATCH_TRANSFER_FROM"] = "0x2eb2c2d6";
  })(ERC1155_CLEAR_SIGNED_SELECTORS || (ERC1155_CLEAR_SIGNED_SELECTORS = {}));
  const padHexString = (str) => {
    return str.length % 2 ? "0" + str : str;
  };
  function splitPath(path) {
    const splittedPath = [];
    const paths = path.split("/");
    paths.forEach((path2) => {
      let value = parseInt(path2, 10);
      if (isNaN(value)) {
        return;
      }
      if (path2.length > 1 && path2[path2.length - 1] === "'") {
        value += 2147483648;
      }
      splittedPath.push(value);
    });
    return splittedPath;
  }
  function hexBuffer(str) {
    if (!str)
      return Buffer.alloc(0);
    const strWithoutPrefix = str.startsWith("0x") ? str.slice(2) : str;
    return Buffer.from(padHexString(strWithoutPrefix), "hex");
  }
  function maybeHexBuffer(str) {
    if (!str)
      return null;
    return hexBuffer(str);
  }
  const intAsHexBytes = (int, bytes2) => int.toString(16).padStart(2 * bytes2, "0");
  const tokenSelectors = Object.values(ERC20_CLEAR_SIGNED_SELECTORS);
  const nftSelectors = [
    ...Object.values(ERC721_CLEAR_SIGNED_SELECTORS),
    ...Object.values(ERC1155_CLEAR_SIGNED_SELECTORS)
  ];
  const mergeResolutions = (resolutionsArray) => {
    const mergedResolutions = {
      nfts: [],
      erc20Tokens: [],
      externalPlugin: [],
      plugin: [],
      domains: []
    };
    for (const resolutions of resolutionsArray) {
      for (const key2 in resolutions) {
        mergedResolutions[key2].push(...resolutions[key2]);
      }
    }
    return mergedResolutions;
  };
  const getParity = (vFromDevice, chainId, transactionType) => {
    if (transactionType)
      return vFromDevice;
    const chainIdUint32 = getChainIdAsUint32(chainId);
    const chainIdWithEIP155 = chainIdUint32 * 2 + 35;
    const chainIdWithOverflowZero = chainIdWithEIP155 % 256;
    const chainIdWithOverflowOne = (chainIdWithEIP155 + 1) % 256;
    if (chainIdWithOverflowZero === vFromDevice) {
      return 0;
    } else if (chainIdWithOverflowOne === vFromDevice) {
      return 1;
    }
    throw new Error("Invalid v value");
  };
  const getChainIdAsUint32 = (chainId) => {
    const chainIdBuff = Buffer.from(padHexString(new BigNumber$1(chainId).toString(16)), "hex");
    const chainIdUint32 = chainIdBuff.subarray(0, 4);
    return parseInt(chainIdUint32.toString("hex"), 16);
  };
  const getV = (vFromDevice, chainId, transactionType) => {
    if (chainId.isZero())
      return vFromDevice.toString(16);
    const parity = getParity(vFromDevice, chainId, transactionType);
    return !transactionType ? (
      // Legacy transactions (type 0) should apply EIP-155
      // EIP-155: rlp[(nonce, gasprice, startgas, to, value, data, chainid, 0, 0)]
      padHexString(chainId.times(2).plus(35).plus(parity).toString(16))
    ) : (
      // Transactions after type 1 should only use partity (00/01) as their v value
      // EIP-2930: 0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, *signatureYParity*, signatureR, signatureS])
      // EIP-1559: 0x02 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list, *signature_y_parity*, signature_r, signature_s])
      // EIP-4844: 0x03 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data, access_list, max_fee_per_blob_gas, blob_versioned_hashes, *y_parity*, r, s])
      // EIP-7702: 0x05 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, value, data, access_list, authorization_list, *signature_y_parity*, signature_r, signature_s])
      padHexString(parity.toString(16))
    );
  };
  const safeChunkTransaction = (transactionRlp, derivationPath, transactionType) => {
    const maxChunkSize = 255;
    const payload = Buffer.concat([derivationPath, transactionRlp]);
    if (payload.length <= maxChunkSize)
      return [payload];
    if (transactionType) {
      const chunks2 = Math.ceil(payload.length / maxChunkSize);
      return new Array(chunks2).fill(null).map((_, i2) => payload.subarray(i2 * maxChunkSize, (i2 + 1) * maxChunkSize));
    }
    const decodedVrs = decode$2(transactionRlp).slice(-3);
    const encodedVrs = encode$4(decodedVrs);
    const encodedVrsBuff = hexBuffer(encodedVrs).subarray(1);
    let chunkSize = 0;
    const lastChunkSize = payload.length % maxChunkSize;
    if (lastChunkSize === 0 || lastChunkSize > encodedVrsBuff.length) {
      chunkSize = maxChunkSize;
    } else {
      for (let i2 = 1; i2 <= maxChunkSize; i2++) {
        const lastChunkSize2 = payload.length % (maxChunkSize - i2);
        if (lastChunkSize2 === 0 || lastChunkSize2 > encodedVrsBuff.length) {
          chunkSize = maxChunkSize - i2;
          break;
        }
      }
    }
    const chunks = Math.ceil(payload.length / chunkSize);
    return new Array(chunks).fill(null).map((_, i2) => payload.subarray(i2 * chunkSize, (i2 + 1) * chunkSize));
  };
  var __awaiter$a = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var EIP712_ARRAY_TYPE_VALUE;
  (function(EIP712_ARRAY_TYPE_VALUE2) {
    EIP712_ARRAY_TYPE_VALUE2[EIP712_ARRAY_TYPE_VALUE2["DYNAMIC"] = 0] = "DYNAMIC";
    EIP712_ARRAY_TYPE_VALUE2[EIP712_ARRAY_TYPE_VALUE2["FIXED"] = 1] = "FIXED";
  })(EIP712_ARRAY_TYPE_VALUE || (EIP712_ARRAY_TYPE_VALUE = {}));
  const EIP712_TYPE_PROPERTIES = {
    CUSTOM: {
      key: () => 0,
      size: () => null
    },
    INT: {
      key: () => 1,
      size: (size2) => Number(size2) / 8
    },
    UINT: {
      key: () => 2,
      size: (size2) => Number(size2) / 8
    },
    ADDRESS: {
      key: () => 3,
      size: () => null
    },
    BOOL: {
      key: () => 4,
      size: () => null
    },
    STRING: {
      key: () => 5,
      size: () => null
    },
    BYTES: {
      key: (size2) => typeof size2 !== "undefined" ? 6 : 7,
      size: (size2) => typeof size2 !== "undefined" ? Number(size2) : null
    }
  };
  const EIP712_TYPE_ENCODERS = {
    INT(value, size2 = 256) {
      const failSafeValue = value !== null && value !== void 0 ? value : "0";
      if (typeof failSafeValue === "string" && (failSafeValue === null || failSafeValue === void 0 ? void 0 : failSafeValue.startsWith("0x"))) {
        return hexBuffer(failSafeValue);
      }
      let valueAsBN = new BigNumber$1(failSafeValue);
      if (valueAsBN.lt(0)) {
        const sizeInBytes = size2 / 8;
        const maskAsBN = new BigNumber$1(`0x${Buffer.alloc(sizeInBytes, 255).toString("hex")}`);
        valueAsBN = maskAsBN.plus(valueAsBN).plus(1);
      }
      const paddedHexString = valueAsBN.toString(16).length % 2 ? "0" + valueAsBN.toString(16) : valueAsBN.toString(16);
      return Buffer.from(paddedHexString, "hex");
    },
    UINT(value) {
      return this.INT(value);
    },
    BOOL(value) {
      return this.INT(typeof value === "boolean" ? Number(value).toString() : value);
    },
    ADDRESS(value) {
      return hexBuffer(value !== null && value !== void 0 ? value : "").slice(0, 20);
    },
    STRING(value) {
      return Buffer.from(value !== null && value !== void 0 ? value : "", "utf-8");
    },
    BYTES(value, size2) {
      const failSafeValue = value !== null && value !== void 0 ? value : "";
      return hexBuffer(failSafeValue).slice(0, size2 !== null && size2 !== void 0 ? size2 : ((failSafeValue === null || failSafeValue === void 0 ? void 0 : failSafeValue.length) - 2) / 2);
    }
  };
  const destructTypeFromString = (typeName) => {
    const splitNameAndArraysRegex = new RegExp(/^([^[\]]*)(\[.*\])*/g);
    const splitArraysRegex = new RegExp(/\[(\d*)\]/g);
    const splitNameAndNumberRegex = new RegExp(/(?=u?int|bytes)([a-zA-Z-0-9]+?)(\d{1,3})$/g);
    const [, type2, maybeArrays] = splitNameAndArraysRegex.exec(typeName || "") || [];
    const [, name2 = type2, size2] = splitNameAndNumberRegex.exec(type2 || "") || [];
    const typeDescription = name2 ? { name: name2, size: size2 ? Number(size2) : void 0 } : null;
    const arrays = maybeArrays ? [...maybeArrays.matchAll(splitArraysRegex)] : [];
    const arrayLengths = arrays.map(([, arrayLength]) => arrayLength ? Number(arrayLength) : null);
    return [typeDescription, arrayLengths];
  };
  const constructTypeDescByteString = (isArray2, typeSize, typeValue) => {
    if (typeValue >= 16) {
      throw new Error("Eth utils - constructTypeDescByteString - Cannot accept a typeValue >= 16 because the typeValue can only be 4 bits in binary" + { isArray: isArray2, typeSize, typeValue });
    }
    const isArrayBit = isArray2 ? "1" : "0";
    const hasTypeSize = typeof typeSize === "number" ? "1" : "0";
    const unusedBits = "00";
    const typeValueBits = typeValue.toString(2).padStart(4, "0");
    return intAsHexBytes(parseInt(isArrayBit + hasTypeSize + unusedBits + typeValueBits, 2), 1);
  };
  const makeTypeEntryStructBuffer = ({ name: name2, type: type2 }) => {
    var _a2, _b, _c, _d;
    const [typeDescription, arrSizes] = destructTypeFromString(type2);
    const isTypeAnArray = Boolean(arrSizes.length);
    const typeProperties = EIP712_TYPE_PROPERTIES[((_a2 = typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.name) === null || _a2 === void 0 ? void 0 : _a2.toUpperCase()) || ""] || EIP712_TYPE_PROPERTIES.CUSTOM;
    const typeKey = typeProperties.key(typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.size);
    const typeSize = typeProperties.size(typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.size);
    const typeDescData = constructTypeDescByteString(isTypeAnArray, typeSize, typeKey);
    const bufferArray = [Buffer.from(typeDescData, "hex")];
    if (typeProperties === EIP712_TYPE_PROPERTIES.CUSTOM) {
      bufferArray.push(Buffer.from(intAsHexBytes((_c = (_b = typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.name) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0, 1), "hex"));
      bufferArray.push(Buffer.from((_d = typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.name) !== null && _d !== void 0 ? _d : "", "utf-8"));
    }
    if (typeof typeSize === "number") {
      bufferArray.push(Buffer.from(intAsHexBytes(typeSize, 1), "hex"));
    }
    if (isTypeAnArray) {
      bufferArray.push(Buffer.from(intAsHexBytes(arrSizes.length, 1), "hex"));
      arrSizes.forEach((size2) => {
        if (typeof size2 === "number") {
          bufferArray.push(Buffer.from(intAsHexBytes(EIP712_ARRAY_TYPE_VALUE.FIXED, 1), "hex"), Buffer.from(intAsHexBytes(size2, 1), "hex"));
        } else {
          bufferArray.push(Buffer.from(intAsHexBytes(EIP712_ARRAY_TYPE_VALUE.DYNAMIC, 1), "hex"));
        }
      });
    }
    bufferArray.push(Buffer.from(intAsHexBytes(name2.length, 1), "hex"), Buffer.from(name2, "utf-8"));
    return Buffer.concat(bufferArray);
  };
  const getCoinRefTokensMap = (filters, shouldUseV1Filters, message) => {
    const coinRefsTokensMap = {};
    if (shouldUseV1Filters || !filters)
      return coinRefsTokensMap;
    const tokenFilters = filters.fields.filter(({ format: format2 }) => format2 === "token").sort((a, b) => (a.coin_ref || 0) - (b.coin_ref || 0));
    const tokens = tokenFilters.reduce((acc, filter2) => {
      const token = getValueFromPath(filter2.path, message);
      if (Array.isArray(token)) {
        throw new Error("Array of tokens is not supported with a single coin ref");
      }
      return [...acc, { token, coinRef: filter2.coin_ref }];
    }, []);
    for (const { token, coinRef } of tokens) {
      coinRefsTokensMap[coinRef] = { token };
    }
    const shouldUseVerifyingContract = filters.fields.some((filter2) => filter2.format === "amount" && filter2.coin_ref === 255);
    if (shouldUseVerifyingContract && message.domain.verifyingContract) {
      coinRefsTokensMap[255] = { token: message.domain.verifyingContract };
    }
    return coinRefsTokensMap;
  };
  const getAppAndVersion = (transport) => __awaiter$a(void 0, void 0, void 0, function* () {
    const appAndVersionHex = yield transport.send(176, 1, 0, 0);
    let offset = 1;
    const nameLength = appAndVersionHex[offset];
    offset += 1;
    const name2 = appAndVersionHex.subarray(offset, offset + nameLength).toString("ascii");
    offset += nameLength;
    const versionLength = appAndVersionHex[offset];
    offset += 1;
    const version2 = appAndVersionHex.subarray(offset, offset + versionLength).toString("ascii");
    return {
      name: name2,
      version: version2
    };
  });
  const getFilterDisplayNameAndSigBuffers = (displayName, sig) => {
    const displayNameContentBuffer = Buffer.from(displayName);
    const displayNameLengthBuffer = Buffer.from(intAsHexBytes(displayNameContentBuffer.length, 1), "hex");
    const sigContentBuffer = Buffer.from(sig, "hex");
    const sigLengthBuffer = Buffer.from(intAsHexBytes(sigContentBuffer.length, 1), "hex");
    return {
      displayNameBuffer: Buffer.concat([displayNameLengthBuffer, displayNameContentBuffer]),
      sigBuffer: Buffer.concat([sigLengthBuffer, sigContentBuffer])
    };
  };
  const getPayloadForFilterV2 = (format2, coinRef, coinRefsTokensMap, displayNameBuffer, sigBuffer) => {
    switch (format2) {
      case "raw":
      case "datetime":
        return Buffer.concat([displayNameBuffer, sigBuffer]);
      case "token": {
        const { deviceTokenIndex } = coinRefsTokensMap[coinRef];
        return Buffer.concat([
          Buffer.from(intAsHexBytes(deviceTokenIndex || coinRef || 0, 1), "hex"),
          sigBuffer
        ]);
      }
      case "amount": {
        const { deviceTokenIndex } = coinRefsTokensMap[coinRef];
        return Buffer.concat([
          displayNameBuffer,
          Buffer.from(intAsHexBytes(deviceTokenIndex || coinRef || 0, 1), "hex"),
          sigBuffer
        ]);
      }
      default:
        throw new Error("Invalid format");
    }
  };
  var __awaiter$9 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const makeRecursiveFieldStructImplem = ({ transport, loadConfig, chainId, erc20SignaturesBlob, types: types2, filters, shouldUseV1Filters, shouldUseDiscardedFields, coinRefsTokensMap }) => {
    var _a2;
    const typesMap = {};
    for (const type2 in types2) {
      typesMap[type2] = (_a2 = types2[type2]) === null || _a2 === void 0 ? void 0 : _a2.reduce((acc, curr) => Object.assign(Object.assign({}, acc), { [curr.name]: curr.type }), {});
    }
    const recursiveFieldStructImplem = (destructedType_1, data_1, ...args_1) => __awaiter$9(void 0, [destructedType_1, data_1, ...args_1], void 0, function* (destructedType, data, path = "") {
      var _b, _c;
      const [typeDescription, arrSizes] = destructedType;
      const [currSize, ...restSizes] = arrSizes;
      const isCustomType = !EIP712_TYPE_PROPERTIES[((_b = typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.name) === null || _b === void 0 ? void 0 : _b.toUpperCase()) || ""];
      if (Array.isArray(data) && typeof currSize !== "undefined") {
        yield sendStructImplem(transport, {
          structType: "array",
          value: data.length
        });
        const entryPath = `${path}.[]`;
        if (!data.length) {
          const entryFilters = filters === null || filters === void 0 ? void 0 : filters.fields.filter((f2) => f2.path.startsWith(entryPath));
          if (entryFilters && shouldUseDiscardedFields) {
            for (const entryFilter of entryFilters) {
              yield sendFilteringInfo(transport, "discardField", loadConfig, {
                path: entryFilter.path
              });
              yield sendFilteringInfo(transport, "showField", loadConfig, {
                displayName: entryFilter.label,
                sig: entryFilter.signature,
                format: entryFilter.format,
                coinRef: entryFilter.coin_ref,
                chainId,
                erc20SignaturesBlob,
                shouldUseV1Filters,
                coinRefsTokensMap,
                isDiscarded: true
              });
            }
          }
        }
        for (const entry of data) {
          yield recursiveFieldStructImplem([typeDescription, restSizes], entry, entryPath);
        }
      } else if (isCustomType) {
        for (const fieldName of Object.keys(typesMap[(typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.name) || ""])) {
          const fieldValue = data[fieldName];
          const fieldType = (_c = typesMap[(typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.name) || ""]) === null || _c === void 0 ? void 0 : _c[fieldName];
          if (fieldType) {
            yield recursiveFieldStructImplem(destructTypeFromString(fieldType), fieldValue, `${path}.${fieldName}`);
          }
        }
      } else {
        const filter2 = filters === null || filters === void 0 ? void 0 : filters.fields.find((f2) => path === f2.path);
        if (filter2) {
          yield sendFilteringInfo(transport, "showField", loadConfig, {
            displayName: filter2.label,
            sig: filter2.signature,
            format: filter2.format,
            coinRef: filter2.coin_ref,
            chainId,
            erc20SignaturesBlob,
            shouldUseV1Filters,
            coinRefsTokensMap,
            isDiscarded: false
          });
        }
        yield sendStructImplem(transport, {
          structType: "field",
          value: {
            data,
            type: (typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.name) || "",
            sizeInBits: typeDescription === null || typeDescription === void 0 ? void 0 : typeDescription.size
          }
        });
      }
    });
    return recursiveFieldStructImplem;
  };
  const sendStructDef = (transport, structDef) => {
    let APDU_FIELDS;
    (function(APDU_FIELDS2) {
      APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
      APDU_FIELDS2[APDU_FIELDS2["INS"] = 26] = "INS";
      APDU_FIELDS2[APDU_FIELDS2["P1_complete"] = 0] = "P1_complete";
      APDU_FIELDS2[APDU_FIELDS2["P1_partial"] = 1] = "P1_partial";
      APDU_FIELDS2[APDU_FIELDS2["P2_name"] = 0] = "P2_name";
      APDU_FIELDS2[APDU_FIELDS2["P2_field"] = 255] = "P2_field";
    })(APDU_FIELDS || (APDU_FIELDS = {}));
    const { structType, value } = structDef;
    const data = structType === "name" && typeof value === "string" ? Buffer.from(value, "utf-8") : value;
    return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_complete, structType === "name" ? APDU_FIELDS.P2_name : APDU_FIELDS.P2_field, data);
  };
  const sendStructImplem = (transport, structImplem) => __awaiter$9(void 0, void 0, void 0, function* () {
    var _a2;
    let APDU_FIELDS;
    (function(APDU_FIELDS2) {
      APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
      APDU_FIELDS2[APDU_FIELDS2["INS"] = 28] = "INS";
      APDU_FIELDS2[APDU_FIELDS2["P1_complete"] = 0] = "P1_complete";
      APDU_FIELDS2[APDU_FIELDS2["P1_partial"] = 1] = "P1_partial";
      APDU_FIELDS2[APDU_FIELDS2["P2_root"] = 0] = "P2_root";
      APDU_FIELDS2[APDU_FIELDS2["P2_array"] = 15] = "P2_array";
      APDU_FIELDS2[APDU_FIELDS2["P2_field"] = 255] = "P2_field";
    })(APDU_FIELDS || (APDU_FIELDS = {}));
    const { structType, value } = structImplem;
    if (structType === "root") {
      return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_complete, APDU_FIELDS.P2_root, Buffer.from(value, "utf-8"));
    }
    if (structType === "array") {
      return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_complete, APDU_FIELDS.P2_array, Buffer.from(intAsHexBytes(value, 1), "hex"));
    }
    if (structType === "field") {
      const { data: rawData, type: type2, sizeInBits } = value;
      const encodedData = (_a2 = EIP712_TYPE_ENCODERS[type2.toUpperCase()]) === null || _a2 === void 0 ? void 0 : _a2.call(EIP712_TYPE_ENCODERS, rawData, sizeInBits);
      if (encodedData) {
        const dataLengthPer16Bits = Math.floor(encodedData.length / 256);
        const dataLengthModulo16Bits = encodedData.length % 256;
        const data = Buffer.concat([
          Buffer.from(intAsHexBytes(dataLengthPer16Bits, 1), "hex"),
          Buffer.from(intAsHexBytes(dataLengthModulo16Bits, 1), "hex"),
          encodedData
        ]);
        const bufferSlices = new Array(Math.ceil(data.length / 256)).fill(null).map((_, i2) => data.subarray(i2 * 255, (i2 + 1) * 255));
        for (const bufferSlice of bufferSlices) {
          yield transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, bufferSlice !== bufferSlices[bufferSlices.length - 1] ? APDU_FIELDS.P1_partial : APDU_FIELDS.P1_complete, APDU_FIELDS.P2_field, bufferSlice);
        }
      }
    }
    return Promise.resolve();
  });
  function sendFilteringInfo(transport, type2, loadConfig, data) {
    return __awaiter$9(this, void 0, void 0, function* () {
      let APDU_FIELDS;
      (function(APDU_FIELDS2) {
        APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
        APDU_FIELDS2[APDU_FIELDS2["INS"] = 30] = "INS";
        APDU_FIELDS2[APDU_FIELDS2["P1_standard"] = 0] = "P1_standard";
        APDU_FIELDS2[APDU_FIELDS2["P1_discarded"] = 1] = "P1_discarded";
        APDU_FIELDS2[APDU_FIELDS2["P2_activate"] = 0] = "P2_activate";
        APDU_FIELDS2[APDU_FIELDS2["P2_discarded"] = 1] = "P2_discarded";
        APDU_FIELDS2[APDU_FIELDS2["P2_show_field"] = 255] = "P2_show_field";
        APDU_FIELDS2[APDU_FIELDS2["P2_message_info"] = 15] = "P2_message_info";
        APDU_FIELDS2[APDU_FIELDS2["P2_datetime"] = 252] = "P2_datetime";
        APDU_FIELDS2[APDU_FIELDS2["P2_amount_join_token"] = 253] = "P2_amount_join_token";
        APDU_FIELDS2[APDU_FIELDS2["P2_amount_join_value"] = 254] = "P2_amount_join_value";
        APDU_FIELDS2[APDU_FIELDS2["P2_raw"] = 255] = "P2_raw";
      })(APDU_FIELDS || (APDU_FIELDS = {}));
      switch (type2) {
        case "activate":
          return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_discarded, APDU_FIELDS.P2_activate);
        case "contractName": {
          const { displayName, filtersCount, sig } = data;
          const { displayNameBuffer, sigBuffer } = getFilterDisplayNameAndSigBuffers(displayName, sig);
          const filtersCountBuffer = Buffer.from(intAsHexBytes(filtersCount, 1), "hex");
          const payload = Buffer.concat([displayNameBuffer, filtersCountBuffer, sigBuffer]);
          return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_standard, APDU_FIELDS.P2_message_info, payload);
        }
        case "showField": {
          const { displayName, sig, format: format2, coinRef, chainId, coinRefsTokensMap, shouldUseV1Filters, erc20SignaturesBlob, isDiscarded } = data;
          const { displayNameBuffer, sigBuffer } = getFilterDisplayNameAndSigBuffers(displayName, sig);
          if (shouldUseV1Filters) {
            const payload2 = Buffer.concat([displayNameBuffer, sigBuffer]);
            return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_standard, APDU_FIELDS.P2_show_field, payload2);
          }
          const isTokenAddress = format2 === "token";
          if (isTokenAddress && coinRef !== void 0) {
            const { token, deviceTokenIndex } = coinRefsTokensMap[coinRef];
            if (deviceTokenIndex === void 0) {
              const payload2 = yield byContractAddressAndChainId(token, chainId, erc20SignaturesBlob);
              if (payload2) {
                let PROVIDE_TOKEN_INFOS_APDU_FIELDS;
                (function(PROVIDE_TOKEN_INFOS_APDU_FIELDS2) {
                  PROVIDE_TOKEN_INFOS_APDU_FIELDS2[PROVIDE_TOKEN_INFOS_APDU_FIELDS2["CLA"] = 224] = "CLA";
                  PROVIDE_TOKEN_INFOS_APDU_FIELDS2[PROVIDE_TOKEN_INFOS_APDU_FIELDS2["INS"] = 10] = "INS";
                  PROVIDE_TOKEN_INFOS_APDU_FIELDS2[PROVIDE_TOKEN_INFOS_APDU_FIELDS2["P1"] = 0] = "P1";
                  PROVIDE_TOKEN_INFOS_APDU_FIELDS2[PROVIDE_TOKEN_INFOS_APDU_FIELDS2["P2"] = 0] = "P2";
                })(PROVIDE_TOKEN_INFOS_APDU_FIELDS || (PROVIDE_TOKEN_INFOS_APDU_FIELDS = {}));
                const response2 = yield transport.send(PROVIDE_TOKEN_INFOS_APDU_FIELDS.CLA, PROVIDE_TOKEN_INFOS_APDU_FIELDS.INS, PROVIDE_TOKEN_INFOS_APDU_FIELDS.P1, PROVIDE_TOKEN_INFOS_APDU_FIELDS.P2, payload2.data);
                coinRefsTokensMap[coinRef].deviceTokenIndex = response2[0];
              }
            }
          }
          const shouldUseVerifyingContract = format2 === "amount" && coinRef === 255;
          if (shouldUseVerifyingContract) {
            const { token } = coinRefsTokensMap[255];
            const payload2 = yield byContractAddressAndChainId(token, chainId, erc20SignaturesBlob);
            if (payload2) {
              yield transport.send(224, 10, 0, 0, payload2.data);
              coinRefsTokensMap[255].deviceTokenIndex = 255;
            }
          }
          if (!format2) {
            throw new Error("Missing format");
          }
          const P2FormatMap = {
            raw: APDU_FIELDS.P2_raw,
            datetime: APDU_FIELDS.P2_datetime,
            token: APDU_FIELDS.P2_amount_join_token,
            amount: APDU_FIELDS.P2_amount_join_value
          };
          const payload = getPayloadForFilterV2(format2, coinRef, coinRefsTokensMap, displayNameBuffer, sigBuffer);
          return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, isDiscarded ? APDU_FIELDS.P1_discarded : APDU_FIELDS.P1_standard, P2FormatMap[format2], payload);
        }
        case "discardField": {
          const { path } = data;
          const pathBuffer = Buffer.from(path);
          const pathLengthBuffer = Buffer.from(intAsHexBytes(pathBuffer.length, 1), "hex");
          const payload = Buffer.concat([pathLengthBuffer, pathBuffer]);
          return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1_standard, APDU_FIELDS.P2_discarded, payload);
        }
      }
    });
  }
  const signEIP712Message = (transport_1, path_1, typedMessage_1, ...args_1) => __awaiter$9(void 0, [transport_1, path_1, typedMessage_1, ...args_1], void 0, function* (transport, path, typedMessage, fullImplem = false, loadConfig) {
    let APDU_FIELDS;
    (function(APDU_FIELDS2) {
      APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
      APDU_FIELDS2[APDU_FIELDS2["INS"] = 12] = "INS";
      APDU_FIELDS2[APDU_FIELDS2["P1"] = 0] = "P1";
      APDU_FIELDS2[APDU_FIELDS2["P2_v0"] = 0] = "P2_v0";
      APDU_FIELDS2[APDU_FIELDS2["P2_full"] = 1] = "P2_full";
    })(APDU_FIELDS || (APDU_FIELDS = {}));
    const { primaryType, types: unsortedTypes, domain, message } = typedMessage;
    const { calServiceURL } = getLoadConfig(loadConfig);
    const types2 = sortObjectAlphabetically(unsortedTypes);
    const { version: version2 } = yield getAppAndVersion(transport);
    const shouldUseV1Filters = !semver$3.gte(version2, "1.11.1-0", { includePrerelease: true });
    const shouldUseDiscardedFields = semver$3.gte(version2, "1.12.0-0", { includePrerelease: true });
    const filters = yield getFiltersForMessage(typedMessage, shouldUseV1Filters, calServiceURL);
    const coinRefsTokensMap = getCoinRefTokensMap(filters, shouldUseV1Filters, typedMessage);
    const typeEntries = Object.entries(types2);
    for (const [typeName, entries] of typeEntries) {
      yield sendStructDef(transport, {
        structType: "name",
        value: typeName
      });
      for (const { name: name2, type: type2 } of entries) {
        const typeEntryBuffer = makeTypeEntryStructBuffer({ name: name2, type: type2 });
        yield sendStructDef(transport, {
          structType: "field",
          value: typeEntryBuffer
        });
      }
    }
    if (filters) {
      yield sendFilteringInfo(transport, "activate");
    }
    const erc20SignaturesBlob = !shouldUseV1Filters ? yield findERC20SignaturesInfo(loadConfig, domain.chainId || 0) : void 0;
    const recursiveFieldStructImplem = makeRecursiveFieldStructImplem({
      transport,
      loadConfig,
      chainId: domain.chainId || 0,
      erc20SignaturesBlob,
      types: types2,
      filters,
      shouldUseV1Filters,
      shouldUseDiscardedFields,
      coinRefsTokensMap
    });
    const domainName = "EIP712Domain";
    yield sendStructImplem(transport, {
      structType: "root",
      value: domainName
    });
    const domainTypeFields = types2[domainName];
    for (const { name: name2, type: type2 } of domainTypeFields) {
      const domainFieldValue = domain[name2];
      yield recursiveFieldStructImplem(destructTypeFromString(type2), domainFieldValue);
    }
    if (filters) {
      const { contractName, fields } = filters;
      const contractNameInfos = {
        displayName: contractName.label,
        filtersCount: fields.length,
        sig: contractName.signature
      };
      yield sendFilteringInfo(transport, "contractName", loadConfig, contractNameInfos);
    }
    yield sendStructImplem(transport, {
      structType: "root",
      value: primaryType
    });
    const primaryTypeFields = types2[primaryType];
    for (const { name: name2, type: type2 } of primaryTypeFields) {
      const primaryTypeValue = message[name2];
      yield recursiveFieldStructImplem(destructTypeFromString(type2), primaryTypeValue, name2);
    }
    const paths = splitPath(path);
    const signatureBuffer = Buffer.alloc(1 + paths.length * 4);
    signatureBuffer[0] = paths.length;
    paths.forEach((element, index) => {
      signatureBuffer.writeUInt32BE(element, 1 + 4 * index);
    });
    return transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1, fullImplem ? APDU_FIELDS.P2_v0 : APDU_FIELDS.P2_full, signatureBuffer).then((response2) => {
      const v = response2[0];
      const r2 = response2.subarray(1, 1 + 32).toString("hex");
      const s2 = response2.subarray(1 + 32, 1 + 32 + 32).toString("hex");
      return {
        v,
        r: r2,
        s: s2
      };
    });
  });
  const signEIP712HashedMessage = (transport, path, domainSeparatorHex, hashStructMessageHex) => {
    const domainSeparator = hexBuffer(domainSeparatorHex);
    const hashStruct = hexBuffer(hashStructMessageHex);
    const paths = splitPath(path);
    const buffer2 = Buffer.alloc(1 + paths.length * 4 + 32 + 32, 0);
    let offset = 0;
    buffer2[0] = paths.length;
    paths.forEach((element, index) => {
      buffer2.writeUInt32BE(element, 1 + 4 * index);
    });
    offset = 1 + 4 * paths.length;
    domainSeparator.copy(buffer2, offset);
    offset += 32;
    hashStruct.copy(buffer2, offset);
    return transport.send(224, 12, 0, 0, buffer2).then((response2) => {
      const v = response2[0];
      const r2 = response2.subarray(1, 1 + 32).toString("hex");
      const s2 = response2.subarray(1 + 32, 1 + 32 + 32).toString("hex");
      return {
        v,
        r: r2,
        s: s2
      };
    });
  };
  const version = "abi/5.7.0";
  const logger$4 = new Logger(version);
  const _constructorGuard = {};
  let ModifiersBytes = { calldata: true, memory: true, storage: true };
  let ModifiersNest = { calldata: true, memory: true };
  function checkModifier(type2, name2) {
    if (type2 === "bytes" || type2 === "string") {
      if (ModifiersBytes[name2]) {
        return true;
      }
    } else if (type2 === "address") {
      if (name2 === "payable") {
        return true;
      }
    } else if (type2.indexOf("[") >= 0 || type2 === "tuple") {
      if (ModifiersNest[name2]) {
        return true;
      }
    }
    if (ModifiersBytes[name2] || name2 === "payable") {
      logger$4.throwArgumentError("invalid modifier", "name", name2);
    }
    return false;
  }
  function parseParamType(param, allowIndexed) {
    let originalParam = param;
    function throwError(i2) {
      logger$4.throwArgumentError(`unexpected character at position ${i2}`, "param", param);
    }
    param = param.replace(/\s/g, " ");
    function newNode(parent2) {
      let node3 = { type: "", name: "", parent: parent2, state: { allowType: true } };
      if (allowIndexed) {
        node3.indexed = false;
      }
      return node3;
    }
    let parent = { type: "", name: "", state: { allowType: true } };
    let node2 = parent;
    for (let i2 = 0; i2 < param.length; i2++) {
      let c = param[i2];
      switch (c) {
        case "(":
          if (node2.state.allowType && node2.type === "") {
            node2.type = "tuple";
          } else if (!node2.state.allowParams) {
            throwError(i2);
          }
          node2.state.allowType = false;
          node2.type = verifyType(node2.type);
          node2.components = [newNode(node2)];
          node2 = node2.components[0];
          break;
        case ")":
          delete node2.state;
          if (node2.name === "indexed") {
            if (!allowIndexed) {
              throwError(i2);
            }
            node2.indexed = true;
            node2.name = "";
          }
          if (checkModifier(node2.type, node2.name)) {
            node2.name = "";
          }
          node2.type = verifyType(node2.type);
          let child = node2;
          node2 = node2.parent;
          if (!node2) {
            throwError(i2);
          }
          delete child.parent;
          node2.state.allowParams = false;
          node2.state.allowName = true;
          node2.state.allowArray = true;
          break;
        case ",":
          delete node2.state;
          if (node2.name === "indexed") {
            if (!allowIndexed) {
              throwError(i2);
            }
            node2.indexed = true;
            node2.name = "";
          }
          if (checkModifier(node2.type, node2.name)) {
            node2.name = "";
          }
          node2.type = verifyType(node2.type);
          let sibling = newNode(node2.parent);
          node2.parent.components.push(sibling);
          delete node2.parent;
          node2 = sibling;
          break;
        case " ":
          if (node2.state.allowType) {
            if (node2.type !== "") {
              node2.type = verifyType(node2.type);
              delete node2.state.allowType;
              node2.state.allowName = true;
              node2.state.allowParams = true;
            }
          }
          if (node2.state.allowName) {
            if (node2.name !== "") {
              if (node2.name === "indexed") {
                if (!allowIndexed) {
                  throwError(i2);
                }
                if (node2.indexed) {
                  throwError(i2);
                }
                node2.indexed = true;
                node2.name = "";
              } else if (checkModifier(node2.type, node2.name)) {
                node2.name = "";
              } else {
                node2.state.allowName = false;
              }
            }
          }
          break;
        case "[":
          if (!node2.state.allowArray) {
            throwError(i2);
          }
          node2.type += c;
          node2.state.allowArray = false;
          node2.state.allowName = false;
          node2.state.readArray = true;
          break;
        case "]":
          if (!node2.state.readArray) {
            throwError(i2);
          }
          node2.type += c;
          node2.state.readArray = false;
          node2.state.allowArray = true;
          node2.state.allowName = true;
          break;
        default:
          if (node2.state.allowType) {
            node2.type += c;
            node2.state.allowParams = true;
            node2.state.allowArray = true;
          } else if (node2.state.allowName) {
            node2.name += c;
            delete node2.state.allowArray;
          } else if (node2.state.readArray) {
            node2.type += c;
          } else {
            throwError(i2);
          }
      }
    }
    if (node2.parent) {
      logger$4.throwArgumentError("unexpected eof", "param", param);
    }
    delete parent.state;
    if (node2.name === "indexed") {
      if (!allowIndexed) {
        throwError(originalParam.length - 7);
      }
      if (node2.indexed) {
        throwError(originalParam.length - 7);
      }
      node2.indexed = true;
      node2.name = "";
    } else if (checkModifier(node2.type, node2.name)) {
      node2.name = "";
    }
    parent.type = verifyType(parent.type);
    return parent;
  }
  function populate(object, params) {
    for (let key2 in params) {
      defineReadOnly(object, key2, params[key2]);
    }
  }
  const FormatTypes = Object.freeze({
    // Bare formatting, as is needed for computing a sighash of an event or function
    sighash: "sighash",
    // Human-Readable with Minimal spacing and without names (compact human-readable)
    minimal: "minimal",
    // Human-Readable with nice spacing, including all names
    full: "full",
    // JSON-format a la Solidity
    json: "json"
  });
  const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
  class ParamType {
    constructor(constructorGuard, params) {
      if (constructorGuard !== _constructorGuard) {
        logger$4.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new ParamType()"
        });
      }
      populate(this, params);
      let match = this.type.match(paramTypeArray);
      if (match) {
        populate(this, {
          arrayLength: parseInt(match[2] || "-1"),
          arrayChildren: ParamType.fromObject({
            type: match[1],
            components: this.components
          }),
          baseType: "array"
        });
      } else {
        populate(this, {
          arrayLength: null,
          arrayChildren: null,
          baseType: this.components != null ? "tuple" : this.type
        });
      }
      this._isParamType = true;
      Object.freeze(this);
    }
    // Format the parameter fragment
    //   - sighash: "(uint256,address)"
    //   - minimal: "tuple(uint256,address) indexed"
    //   - full:    "tuple(uint256 foo, address bar) indexed baz"
    format(format2) {
      if (!format2) {
        format2 = FormatTypes.sighash;
      }
      if (!FormatTypes[format2]) {
        logger$4.throwArgumentError("invalid format type", "format", format2);
      }
      if (format2 === FormatTypes.json) {
        let result2 = {
          type: this.baseType === "tuple" ? "tuple" : this.type,
          name: this.name || void 0
        };
        if (typeof this.indexed === "boolean") {
          result2.indexed = this.indexed;
        }
        if (this.components) {
          result2.components = this.components.map((comp) => JSON.parse(comp.format(format2)));
        }
        return JSON.stringify(result2);
      }
      let result = "";
      if (this.baseType === "array") {
        result += this.arrayChildren.format(format2);
        result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
      } else {
        if (this.baseType === "tuple") {
          if (format2 !== FormatTypes.sighash) {
            result += this.type;
          }
          result += "(" + this.components.map((comp) => comp.format(format2)).join(format2 === FormatTypes.full ? ", " : ",") + ")";
        } else {
          result += this.type;
        }
      }
      if (format2 !== FormatTypes.sighash) {
        if (this.indexed === true) {
          result += " indexed";
        }
        if (format2 === FormatTypes.full && this.name) {
          result += " " + this.name;
        }
      }
      return result;
    }
    static from(value, allowIndexed) {
      if (typeof value === "string") {
        return ParamType.fromString(value, allowIndexed);
      }
      return ParamType.fromObject(value);
    }
    static fromObject(value) {
      if (ParamType.isParamType(value)) {
        return value;
      }
      return new ParamType(_constructorGuard, {
        name: value.name || null,
        type: verifyType(value.type),
        indexed: value.indexed == null ? null : !!value.indexed,
        components: value.components ? value.components.map(ParamType.fromObject) : null
      });
    }
    static fromString(value, allowIndexed) {
      function ParamTypify(node2) {
        return ParamType.fromObject({
          name: node2.name,
          type: node2.type,
          indexed: node2.indexed,
          components: node2.components
        });
      }
      return ParamTypify(parseParamType(value, !!allowIndexed));
    }
    static isParamType(value) {
      return !!(value != null && value._isParamType);
    }
  }
  function parseParams(value, allowIndex) {
    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
  }
  class Fragment {
    constructor(constructorGuard, params) {
      if (constructorGuard !== _constructorGuard) {
        logger$4.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new Fragment()"
        });
      }
      populate(this, params);
      this._isFragment = true;
      Object.freeze(this);
    }
    static from(value) {
      if (Fragment.isFragment(value)) {
        return value;
      }
      if (typeof value === "string") {
        return Fragment.fromString(value);
      }
      return Fragment.fromObject(value);
    }
    static fromObject(value) {
      if (Fragment.isFragment(value)) {
        return value;
      }
      switch (value.type) {
        case "function":
          return FunctionFragment.fromObject(value);
        case "event":
          return EventFragment.fromObject(value);
        case "constructor":
          return ConstructorFragment.fromObject(value);
        case "error":
          return ErrorFragment.fromObject(value);
        case "fallback":
        case "receive":
          return null;
      }
      return logger$4.throwArgumentError("invalid fragment object", "value", value);
    }
    static fromString(value) {
      value = value.replace(/\s/g, " ");
      value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
      value = value.trim();
      if (value.split(" ")[0] === "event") {
        return EventFragment.fromString(value.substring(5).trim());
      } else if (value.split(" ")[0] === "function") {
        return FunctionFragment.fromString(value.substring(8).trim());
      } else if (value.split("(")[0].trim() === "constructor") {
        return ConstructorFragment.fromString(value.trim());
      } else if (value.split(" ")[0] === "error") {
        return ErrorFragment.fromString(value.substring(5).trim());
      }
      return logger$4.throwArgumentError("unsupported fragment", "value", value);
    }
    static isFragment(value) {
      return !!(value && value._isFragment);
    }
  }
  class EventFragment extends Fragment {
    format(format2) {
      if (!format2) {
        format2 = FormatTypes.sighash;
      }
      if (!FormatTypes[format2]) {
        logger$4.throwArgumentError("invalid format type", "format", format2);
      }
      if (format2 === FormatTypes.json) {
        return JSON.stringify({
          type: "event",
          anonymous: this.anonymous,
          name: this.name,
          inputs: this.inputs.map((input) => JSON.parse(input.format(format2)))
        });
      }
      let result = "";
      if (format2 !== FormatTypes.sighash) {
        result += "event ";
      }
      result += this.name + "(" + this.inputs.map((input) => input.format(format2)).join(format2 === FormatTypes.full ? ", " : ",") + ") ";
      if (format2 !== FormatTypes.sighash) {
        if (this.anonymous) {
          result += "anonymous ";
        }
      }
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return EventFragment.fromString(value);
      }
      return EventFragment.fromObject(value);
    }
    static fromObject(value) {
      if (EventFragment.isEventFragment(value)) {
        return value;
      }
      if (value.type !== "event") {
        logger$4.throwArgumentError("invalid event object", "value", value);
      }
      const params = {
        name: verifyIdentifier(value.name),
        anonymous: value.anonymous,
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
        type: "event"
      };
      return new EventFragment(_constructorGuard, params);
    }
    static fromString(value) {
      let match = value.match(regexParen);
      if (!match) {
        logger$4.throwArgumentError("invalid event string", "value", value);
      }
      let anonymous = false;
      match[3].split(" ").forEach((modifier) => {
        switch (modifier.trim()) {
          case "anonymous":
            anonymous = true;
            break;
          case "":
            break;
          default:
            logger$4.warn("unknown modifier: " + modifier);
        }
      });
      return EventFragment.fromObject({
        name: match[1].trim(),
        anonymous,
        inputs: parseParams(match[2], true),
        type: "event"
      });
    }
    static isEventFragment(value) {
      return value && value._isFragment && value.type === "event";
    }
  }
  function parseGas(value, params) {
    params.gas = null;
    let comps = value.split("@");
    if (comps.length !== 1) {
      if (comps.length > 2) {
        logger$4.throwArgumentError("invalid human-readable ABI signature", "value", value);
      }
      if (!comps[1].match(/^[0-9]+$/)) {
        logger$4.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
      }
      params.gas = BigNumber.from(comps[1]);
      return comps[0];
    }
    return value;
  }
  function parseModifiers(value, params) {
    params.constant = false;
    params.payable = false;
    params.stateMutability = "nonpayable";
    value.split(" ").forEach((modifier) => {
      switch (modifier.trim()) {
        case "constant":
          params.constant = true;
          break;
        case "payable":
          params.payable = true;
          params.stateMutability = "payable";
          break;
        case "nonpayable":
          params.payable = false;
          params.stateMutability = "nonpayable";
          break;
        case "pure":
          params.constant = true;
          params.stateMutability = "pure";
          break;
        case "view":
          params.constant = true;
          params.stateMutability = "view";
          break;
        case "external":
        case "public":
        case "":
          break;
        default:
          console.log("unknown modifier: " + modifier);
      }
    });
  }
  function verifyState(value) {
    let result = {
      constant: false,
      payable: true,
      stateMutability: "payable"
    };
    if (value.stateMutability != null) {
      result.stateMutability = value.stateMutability;
      result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
      if (value.constant != null) {
        if (!!value.constant !== result.constant) {
          logger$4.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
        }
      }
      result.payable = result.stateMutability === "payable";
      if (value.payable != null) {
        if (!!value.payable !== result.payable) {
          logger$4.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
        }
      }
    } else if (value.payable != null) {
      result.payable = !!value.payable;
      if (value.constant == null && !result.payable && value.type !== "constructor") {
        logger$4.throwArgumentError("unable to determine stateMutability", "value", value);
      }
      result.constant = !!value.constant;
      if (result.constant) {
        result.stateMutability = "view";
      } else {
        result.stateMutability = result.payable ? "payable" : "nonpayable";
      }
      if (result.payable && result.constant) {
        logger$4.throwArgumentError("cannot have constant payable function", "value", value);
      }
    } else if (value.constant != null) {
      result.constant = !!value.constant;
      result.payable = !result.constant;
      result.stateMutability = result.constant ? "view" : "payable";
    } else if (value.type !== "constructor") {
      logger$4.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    return result;
  }
  class ConstructorFragment extends Fragment {
    format(format2) {
      if (!format2) {
        format2 = FormatTypes.sighash;
      }
      if (!FormatTypes[format2]) {
        logger$4.throwArgumentError("invalid format type", "format", format2);
      }
      if (format2 === FormatTypes.json) {
        return JSON.stringify({
          type: "constructor",
          stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
          payable: this.payable,
          gas: this.gas ? this.gas.toNumber() : void 0,
          inputs: this.inputs.map((input) => JSON.parse(input.format(format2)))
        });
      }
      if (format2 === FormatTypes.sighash) {
        logger$4.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "format(sighash)"
        });
      }
      let result = "constructor(" + this.inputs.map((input) => input.format(format2)).join(format2 === FormatTypes.full ? ", " : ",") + ") ";
      if (this.stateMutability && this.stateMutability !== "nonpayable") {
        result += this.stateMutability + " ";
      }
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return ConstructorFragment.fromString(value);
      }
      return ConstructorFragment.fromObject(value);
    }
    static fromObject(value) {
      if (ConstructorFragment.isConstructorFragment(value)) {
        return value;
      }
      if (value.type !== "constructor") {
        logger$4.throwArgumentError("invalid constructor object", "value", value);
      }
      let state2 = verifyState(value);
      if (state2.constant) {
        logger$4.throwArgumentError("constructor cannot be constant", "value", value);
      }
      const params = {
        name: null,
        type: value.type,
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
        payable: state2.payable,
        stateMutability: state2.stateMutability,
        gas: value.gas ? BigNumber.from(value.gas) : null
      };
      return new ConstructorFragment(_constructorGuard, params);
    }
    static fromString(value) {
      let params = { type: "constructor" };
      value = parseGas(value, params);
      let parens = value.match(regexParen);
      if (!parens || parens[1].trim() !== "constructor") {
        logger$4.throwArgumentError("invalid constructor string", "value", value);
      }
      params.inputs = parseParams(parens[2].trim(), false);
      parseModifiers(parens[3].trim(), params);
      return ConstructorFragment.fromObject(params);
    }
    static isConstructorFragment(value) {
      return value && value._isFragment && value.type === "constructor";
    }
  }
  class FunctionFragment extends ConstructorFragment {
    format(format2) {
      if (!format2) {
        format2 = FormatTypes.sighash;
      }
      if (!FormatTypes[format2]) {
        logger$4.throwArgumentError("invalid format type", "format", format2);
      }
      if (format2 === FormatTypes.json) {
        return JSON.stringify({
          type: "function",
          name: this.name,
          constant: this.constant,
          stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
          payable: this.payable,
          gas: this.gas ? this.gas.toNumber() : void 0,
          inputs: this.inputs.map((input) => JSON.parse(input.format(format2))),
          outputs: this.outputs.map((output2) => JSON.parse(output2.format(format2)))
        });
      }
      let result = "";
      if (format2 !== FormatTypes.sighash) {
        result += "function ";
      }
      result += this.name + "(" + this.inputs.map((input) => input.format(format2)).join(format2 === FormatTypes.full ? ", " : ",") + ") ";
      if (format2 !== FormatTypes.sighash) {
        if (this.stateMutability) {
          if (this.stateMutability !== "nonpayable") {
            result += this.stateMutability + " ";
          }
        } else if (this.constant) {
          result += "view ";
        }
        if (this.outputs && this.outputs.length) {
          result += "returns (" + this.outputs.map((output2) => output2.format(format2)).join(", ") + ") ";
        }
        if (this.gas != null) {
          result += "@" + this.gas.toString() + " ";
        }
      }
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return FunctionFragment.fromString(value);
      }
      return FunctionFragment.fromObject(value);
    }
    static fromObject(value) {
      if (FunctionFragment.isFunctionFragment(value)) {
        return value;
      }
      if (value.type !== "function") {
        logger$4.throwArgumentError("invalid function object", "value", value);
      }
      let state2 = verifyState(value);
      const params = {
        type: value.type,
        name: verifyIdentifier(value.name),
        constant: state2.constant,
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
        outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
        payable: state2.payable,
        stateMutability: state2.stateMutability,
        gas: value.gas ? BigNumber.from(value.gas) : null
      };
      return new FunctionFragment(_constructorGuard, params);
    }
    static fromString(value) {
      let params = { type: "function" };
      value = parseGas(value, params);
      let comps = value.split(" returns ");
      if (comps.length > 2) {
        logger$4.throwArgumentError("invalid function string", "value", value);
      }
      let parens = comps[0].match(regexParen);
      if (!parens) {
        logger$4.throwArgumentError("invalid function signature", "value", value);
      }
      params.name = parens[1].trim();
      if (params.name) {
        verifyIdentifier(params.name);
      }
      params.inputs = parseParams(parens[2], false);
      parseModifiers(parens[3].trim(), params);
      if (comps.length > 1) {
        let returns = comps[1].match(regexParen);
        if (returns[1].trim() != "" || returns[3].trim() != "") {
          logger$4.throwArgumentError("unexpected tokens", "value", value);
        }
        params.outputs = parseParams(returns[2], false);
      } else {
        params.outputs = [];
      }
      return FunctionFragment.fromObject(params);
    }
    static isFunctionFragment(value) {
      return value && value._isFragment && value.type === "function";
    }
  }
  function checkForbidden(fragment) {
    const sig = fragment.format();
    if (sig === "Error(string)" || sig === "Panic(uint256)") {
      logger$4.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
    }
    return fragment;
  }
  class ErrorFragment extends Fragment {
    format(format2) {
      if (!format2) {
        format2 = FormatTypes.sighash;
      }
      if (!FormatTypes[format2]) {
        logger$4.throwArgumentError("invalid format type", "format", format2);
      }
      if (format2 === FormatTypes.json) {
        return JSON.stringify({
          type: "error",
          name: this.name,
          inputs: this.inputs.map((input) => JSON.parse(input.format(format2)))
        });
      }
      let result = "";
      if (format2 !== FormatTypes.sighash) {
        result += "error ";
      }
      result += this.name + "(" + this.inputs.map((input) => input.format(format2)).join(format2 === FormatTypes.full ? ", " : ",") + ") ";
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return ErrorFragment.fromString(value);
      }
      return ErrorFragment.fromObject(value);
    }
    static fromObject(value) {
      if (ErrorFragment.isErrorFragment(value)) {
        return value;
      }
      if (value.type !== "error") {
        logger$4.throwArgumentError("invalid error object", "value", value);
      }
      const params = {
        type: value.type,
        name: verifyIdentifier(value.name),
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
      };
      return checkForbidden(new ErrorFragment(_constructorGuard, params));
    }
    static fromString(value) {
      let params = { type: "error" };
      let parens = value.match(regexParen);
      if (!parens) {
        logger$4.throwArgumentError("invalid error signature", "value", value);
      }
      params.name = parens[1].trim();
      if (params.name) {
        verifyIdentifier(params.name);
      }
      params.inputs = parseParams(parens[2], false);
      return checkForbidden(ErrorFragment.fromObject(params));
    }
    static isErrorFragment(value) {
      return value && value._isFragment && value.type === "error";
    }
  }
  function verifyType(type2) {
    if (type2.match(/^uint($|[^1-9])/)) {
      type2 = "uint256" + type2.substring(4);
    } else if (type2.match(/^int($|[^1-9])/)) {
      type2 = "int256" + type2.substring(3);
    }
    return type2;
  }
  const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
  function verifyIdentifier(value) {
    if (!value || !value.match(regexIdentifier)) {
      logger$4.throwArgumentError(`invalid identifier "${value}"`, "value", value);
    }
    return value;
  }
  const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  function splitNesting(value) {
    value = value.trim();
    let result = [];
    let accum = "";
    let depth = 0;
    for (let offset = 0; offset < value.length; offset++) {
      let c = value[offset];
      if (c === "," && depth === 0) {
        result.push(accum);
        accum = "";
      } else {
        accum += c;
        if (c === "(") {
          depth++;
        } else if (c === ")") {
          depth--;
          if (depth === -1) {
            logger$4.throwArgumentError("unbalanced parenthesis", "value", value);
          }
        }
      }
    }
    if (accum) {
      result.push(accum);
    }
    return result;
  }
  const logger$3 = new Logger(version);
  class Coder {
    constructor(name2, type2, localName, dynamic) {
      this.name = name2;
      this.type = type2;
      this.localName = localName;
      this.dynamic = dynamic;
    }
    _throwError(message, value) {
      logger$3.throwArgumentError(message, this.localName, value);
    }
  }
  class Writer {
    constructor(wordSize) {
      defineReadOnly(this, "wordSize", wordSize || 32);
      this._data = [];
      this._dataLength = 0;
      this._padding = new Uint8Array(wordSize);
    }
    get data() {
      return hexConcat(this._data);
    }
    get length() {
      return this._dataLength;
    }
    _writeData(data) {
      this._data.push(data);
      this._dataLength += data.length;
      return data.length;
    }
    appendWriter(writer) {
      return this._writeData(concat(writer._data));
    }
    // Arrayish items; padded on the right to wordSize
    writeBytes(value) {
      let bytes2 = arrayify(value);
      const paddingOffset = bytes2.length % this.wordSize;
      if (paddingOffset) {
        bytes2 = concat([bytes2, this._padding.slice(paddingOffset)]);
      }
      return this._writeData(bytes2);
    }
    _getValue(value) {
      let bytes2 = arrayify(BigNumber.from(value));
      if (bytes2.length > this.wordSize) {
        logger$3.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
          length: this.wordSize,
          offset: bytes2.length
        });
      }
      if (bytes2.length % this.wordSize) {
        bytes2 = concat([this._padding.slice(bytes2.length % this.wordSize), bytes2]);
      }
      return bytes2;
    }
    // BigNumberish items; padded on the left to wordSize
    writeValue(value) {
      return this._writeData(this._getValue(value));
    }
    writeUpdatableValue() {
      const offset = this._data.length;
      this._data.push(this._padding);
      this._dataLength += this.wordSize;
      return (value) => {
        this._data[offset] = this._getValue(value);
      };
    }
  }
  class Reader {
    constructor(data, wordSize, coerceFunc, allowLoose) {
      defineReadOnly(this, "_data", arrayify(data));
      defineReadOnly(this, "wordSize", wordSize || 32);
      defineReadOnly(this, "_coerceFunc", coerceFunc);
      defineReadOnly(this, "allowLoose", allowLoose);
      this._offset = 0;
    }
    get data() {
      return hexlify(this._data);
    }
    get consumed() {
      return this._offset;
    }
    // The default Coerce function
    static coerce(name2, value) {
      let match = name2.match("^u?int([0-9]+)$");
      if (match && parseInt(match[1]) <= 48) {
        value = value.toNumber();
      }
      return value;
    }
    coerce(name2, value) {
      if (this._coerceFunc) {
        return this._coerceFunc(name2, value);
      }
      return Reader.coerce(name2, value);
    }
    _peekBytes(offset, length, loose) {
      let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
      if (this._offset + alignedLength > this._data.length) {
        if (this.allowLoose && loose && this._offset + length <= this._data.length) {
          alignedLength = length;
        } else {
          logger$3.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
            length: this._data.length,
            offset: this._offset + alignedLength
          });
        }
      }
      return this._data.slice(this._offset, this._offset + alignedLength);
    }
    subReader(offset) {
      return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
    }
    readBytes(length, loose) {
      let bytes2 = this._peekBytes(0, length, !!loose);
      this._offset += bytes2.length;
      return bytes2.slice(0, length);
    }
    readValue() {
      return BigNumber.from(this.readBytes(this.wordSize));
    }
  }
  class AddressCoder extends Coder {
    constructor(localName) {
      super("address", "address", localName, false);
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000";
    }
    encode(writer, value) {
      try {
        value = getAddress(value);
      } catch (error2) {
        this._throwError(error2.message, value);
      }
      return writer.writeValue(value);
    }
    decode(reader) {
      return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
    }
  }
  class AnonymousCoder extends Coder {
    constructor(coder) {
      super(coder.name, coder.type, void 0, coder.dynamic);
      this.coder = coder;
    }
    defaultValue() {
      return this.coder.defaultValue();
    }
    encode(writer, value) {
      return this.coder.encode(writer, value);
    }
    decode(reader) {
      return this.coder.decode(reader);
    }
  }
  const logger$2 = new Logger(version);
  function pack(writer, coders, values) {
    let arrayValues = null;
    if (Array.isArray(values)) {
      arrayValues = values;
    } else if (values && typeof values === "object") {
      let unique = {};
      arrayValues = coders.map((coder) => {
        const name2 = coder.localName;
        if (!name2) {
          logger$2.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
            argument: "values",
            coder,
            value: values
          });
        }
        if (unique[name2]) {
          logger$2.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
            argument: "values",
            coder,
            value: values
          });
        }
        unique[name2] = true;
        return values[name2];
      });
    } else {
      logger$2.throwArgumentError("invalid tuple value", "tuple", values);
    }
    if (coders.length !== arrayValues.length) {
      logger$2.throwArgumentError("types/value length mismatch", "tuple", values);
    }
    let staticWriter = new Writer(writer.wordSize);
    let dynamicWriter = new Writer(writer.wordSize);
    let updateFuncs = [];
    coders.forEach((coder, index) => {
      let value = arrayValues[index];
      if (coder.dynamic) {
        let dynamicOffset = dynamicWriter.length;
        coder.encode(dynamicWriter, value);
        let updateFunc = staticWriter.writeUpdatableValue();
        updateFuncs.push((baseOffset) => {
          updateFunc(baseOffset + dynamicOffset);
        });
      } else {
        coder.encode(staticWriter, value);
      }
    });
    updateFuncs.forEach((func) => {
      func(staticWriter.length);
    });
    let length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
  }
  function unpack(reader, coders) {
    let values = [];
    let baseReader = reader.subReader(0);
    coders.forEach((coder) => {
      let value = null;
      if (coder.dynamic) {
        let offset = reader.readValue();
        let offsetReader = baseReader.subReader(offset.toNumber());
        try {
          value = coder.decode(offsetReader);
        } catch (error2) {
          if (error2.code === Logger.errors.BUFFER_OVERRUN) {
            throw error2;
          }
          value = error2;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      } else {
        try {
          value = coder.decode(reader);
        } catch (error2) {
          if (error2.code === Logger.errors.BUFFER_OVERRUN) {
            throw error2;
          }
          value = error2;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      }
      if (value != void 0) {
        values.push(value);
      }
    });
    const uniqueNames = coders.reduce((accum, coder) => {
      const name2 = coder.localName;
      if (name2) {
        if (!accum[name2]) {
          accum[name2] = 0;
        }
        accum[name2]++;
      }
      return accum;
    }, {});
    coders.forEach((coder, index) => {
      let name2 = coder.localName;
      if (!name2 || uniqueNames[name2] !== 1) {
        return;
      }
      if (name2 === "length") {
        name2 = "_length";
      }
      if (values[name2] != null) {
        return;
      }
      const value = values[index];
      if (value instanceof Error) {
        Object.defineProperty(values, name2, {
          enumerable: true,
          get: () => {
            throw value;
          }
        });
      } else {
        values[name2] = value;
      }
    });
    for (let i2 = 0; i2 < values.length; i2++) {
      const value = values[i2];
      if (value instanceof Error) {
        Object.defineProperty(values, i2, {
          enumerable: true,
          get: () => {
            throw value;
          }
        });
      }
    }
    return Object.freeze(values);
  }
  class ArrayCoder extends Coder {
    constructor(coder, length, localName) {
      const type2 = coder.type + "[" + (length >= 0 ? length : "") + "]";
      const dynamic = length === -1 || coder.dynamic;
      super("array", type2, localName, dynamic);
      this.coder = coder;
      this.length = length;
    }
    defaultValue() {
      const defaultChild = this.coder.defaultValue();
      const result = [];
      for (let i2 = 0; i2 < this.length; i2++) {
        result.push(defaultChild);
      }
      return result;
    }
    encode(writer, value) {
      if (!Array.isArray(value)) {
        this._throwError("expected array value", value);
      }
      let count = this.length;
      if (count === -1) {
        count = value.length;
        writer.writeValue(value.length);
      }
      logger$2.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
      let coders = [];
      for (let i2 = 0; i2 < value.length; i2++) {
        coders.push(this.coder);
      }
      return pack(writer, coders, value);
    }
    decode(reader) {
      let count = this.length;
      if (count === -1) {
        count = reader.readValue().toNumber();
        if (count * 32 > reader._data.length) {
          logger$2.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
            length: reader._data.length,
            count
          });
        }
      }
      let coders = [];
      for (let i2 = 0; i2 < count; i2++) {
        coders.push(new AnonymousCoder(this.coder));
      }
      return reader.coerce(this.name, unpack(reader, coders));
    }
  }
  class BooleanCoder extends Coder {
    constructor(localName) {
      super("bool", "bool", localName, false);
    }
    defaultValue() {
      return false;
    }
    encode(writer, value) {
      return writer.writeValue(value ? 1 : 0);
    }
    decode(reader) {
      return reader.coerce(this.type, !reader.readValue().isZero());
    }
  }
  class DynamicBytesCoder extends Coder {
    constructor(type2, localName) {
      super(type2, type2, localName, true);
    }
    defaultValue() {
      return "0x";
    }
    encode(writer, value) {
      value = arrayify(value);
      let length = writer.writeValue(value.length);
      length += writer.writeBytes(value);
      return length;
    }
    decode(reader) {
      return reader.readBytes(reader.readValue().toNumber(), true);
    }
  }
  class BytesCoder extends DynamicBytesCoder {
    constructor(localName) {
      super("bytes", localName);
    }
    decode(reader) {
      return reader.coerce(this.name, hexlify(super.decode(reader)));
    }
  }
  class FixedBytesCoder extends Coder {
    constructor(size2, localName) {
      let name2 = "bytes" + String(size2);
      super(name2, name2, localName, false);
      this.size = size2;
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
    }
    encode(writer, value) {
      let data = arrayify(value);
      if (data.length !== this.size) {
        this._throwError("incorrect data length", value);
      }
      return writer.writeBytes(data);
    }
    decode(reader) {
      return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
    }
  }
  class NullCoder extends Coder {
    constructor(localName) {
      super("null", "", localName, false);
    }
    defaultValue() {
      return null;
    }
    encode(writer, value) {
      if (value != null) {
        this._throwError("not null", value);
      }
      return writer.writeBytes([]);
    }
    decode(reader) {
      reader.readBytes(0);
      return reader.coerce(this.name, null);
    }
  }
  class NumberCoder extends Coder {
    constructor(size2, signed, localName) {
      const name2 = (signed ? "int" : "uint") + size2 * 8;
      super(name2, name2, localName, false);
      this.size = size2;
      this.signed = signed;
    }
    defaultValue() {
      return 0;
    }
    encode(writer, value) {
      let v = BigNumber.from(value);
      let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
      if (this.signed) {
        let bounds = maxUintValue.mask(this.size * 8 - 1);
        if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {
          this._throwError("value out-of-bounds", value);
        }
      } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
        this._throwError("value out-of-bounds", value);
      }
      v = v.toTwos(this.size * 8).mask(this.size * 8);
      if (this.signed) {
        v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
      }
      return writer.writeValue(v);
    }
    decode(reader) {
      let value = reader.readValue().mask(this.size * 8);
      if (this.signed) {
        value = value.fromTwos(this.size * 8);
      }
      return reader.coerce(this.name, value);
    }
  }
  class StringCoder extends DynamicBytesCoder {
    constructor(localName) {
      super("string", localName);
    }
    defaultValue() {
      return "";
    }
    encode(writer, value) {
      return super.encode(writer, toUtf8Bytes(value));
    }
    decode(reader) {
      return toUtf8String(super.decode(reader));
    }
  }
  class TupleCoder extends Coder {
    constructor(coders, localName) {
      let dynamic = false;
      const types2 = [];
      coders.forEach((coder) => {
        if (coder.dynamic) {
          dynamic = true;
        }
        types2.push(coder.type);
      });
      const type2 = "tuple(" + types2.join(",") + ")";
      super("tuple", type2, localName, dynamic);
      this.coders = coders;
    }
    defaultValue() {
      const values = [];
      this.coders.forEach((coder) => {
        values.push(coder.defaultValue());
      });
      const uniqueNames = this.coders.reduce((accum, coder) => {
        const name2 = coder.localName;
        if (name2) {
          if (!accum[name2]) {
            accum[name2] = 0;
          }
          accum[name2]++;
        }
        return accum;
      }, {});
      this.coders.forEach((coder, index) => {
        let name2 = coder.localName;
        if (!name2 || uniqueNames[name2] !== 1) {
          return;
        }
        if (name2 === "length") {
          name2 = "_length";
        }
        if (values[name2] != null) {
          return;
        }
        values[name2] = values[index];
      });
      return Object.freeze(values);
    }
    encode(writer, value) {
      return pack(writer, this.coders, value);
    }
    decode(reader) {
      return reader.coerce(this.name, unpack(reader, this.coders));
    }
  }
  const logger$1 = new Logger(version);
  const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
  const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
  class AbiCoder {
    constructor(coerceFunc) {
      defineReadOnly(this, "coerceFunc", coerceFunc || null);
    }
    _getCoder(param) {
      switch (param.baseType) {
        case "address":
          return new AddressCoder(param.name);
        case "bool":
          return new BooleanCoder(param.name);
        case "string":
          return new StringCoder(param.name);
        case "bytes":
          return new BytesCoder(param.name);
        case "array":
          return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
        case "tuple":
          return new TupleCoder((param.components || []).map((component) => {
            return this._getCoder(component);
          }), param.name);
        case "":
          return new NullCoder(param.name);
      }
      let match = param.type.match(paramTypeNumber);
      if (match) {
        let size2 = parseInt(match[2] || "256");
        if (size2 === 0 || size2 > 256 || size2 % 8 !== 0) {
          logger$1.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
        }
        return new NumberCoder(size2 / 8, match[1] === "int", param.name);
      }
      match = param.type.match(paramTypeBytes);
      if (match) {
        let size2 = parseInt(match[1]);
        if (size2 === 0 || size2 > 32) {
          logger$1.throwArgumentError("invalid bytes length", "param", param);
        }
        return new FixedBytesCoder(size2, param.name);
      }
      return logger$1.throwArgumentError("invalid type", "type", param.type);
    }
    _getWordSize() {
      return 32;
    }
    _getReader(data, allowLoose) {
      return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
    }
    _getWriter() {
      return new Writer(this._getWordSize());
    }
    getDefaultValue(types2) {
      const coders = types2.map((type2) => this._getCoder(ParamType.from(type2)));
      const coder = new TupleCoder(coders, "_");
      return coder.defaultValue();
    }
    encode(types2, values) {
      if (types2.length !== values.length) {
        logger$1.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
          count: { types: types2.length, values: values.length },
          value: { types: types2, values }
        });
      }
      const coders = types2.map((type2) => this._getCoder(ParamType.from(type2)));
      const coder = new TupleCoder(coders, "_");
      const writer = this._getWriter();
      coder.encode(writer, values);
      return writer.data;
    }
    decode(types2, data, loose) {
      const coders = types2.map((type2) => this._getCoder(ParamType.from(type2)));
      const coder = new TupleCoder(coders, "_");
      return coder.decode(this._getReader(arrayify(data), loose));
    }
  }
  const defaultAbiCoder = new AbiCoder();
  const logger = new Logger(version);
  class LogDescription extends Description {
  }
  class TransactionDescription extends Description {
  }
  class ErrorDescription extends Description {
  }
  class Indexed extends Description {
    static isIndexed(value) {
      return !!(value && value._isIndexed);
    }
  }
  const BuiltinErrors = {
    "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
    "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
  };
  function wrapAccessError(property, error2) {
    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
    wrap.error = error2;
    return wrap;
  }
  class Interface {
    constructor(fragments) {
      let abi2 = [];
      if (typeof fragments === "string") {
        abi2 = JSON.parse(fragments);
      } else {
        abi2 = fragments;
      }
      defineReadOnly(this, "fragments", abi2.map((fragment) => {
        return Fragment.from(fragment);
      }).filter((fragment) => fragment != null));
      defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
      defineReadOnly(this, "functions", {});
      defineReadOnly(this, "errors", {});
      defineReadOnly(this, "events", {});
      defineReadOnly(this, "structs", {});
      this.fragments.forEach((fragment) => {
        let bucket = null;
        switch (fragment.type) {
          case "constructor":
            if (this.deploy) {
              logger.warn("duplicate definition - constructor");
              return;
            }
            defineReadOnly(this, "deploy", fragment);
            return;
          case "function":
            bucket = this.functions;
            break;
          case "event":
            bucket = this.events;
            break;
          case "error":
            bucket = this.errors;
            break;
          default:
            return;
        }
        let signature2 = fragment.format();
        if (bucket[signature2]) {
          logger.warn("duplicate definition - " + signature2);
          return;
        }
        bucket[signature2] = fragment;
      });
      if (!this.deploy) {
        defineReadOnly(this, "deploy", ConstructorFragment.from({
          payable: false,
          type: "constructor"
        }));
      }
      defineReadOnly(this, "_isInterface", true);
    }
    format(format2) {
      if (!format2) {
        format2 = FormatTypes.full;
      }
      if (format2 === FormatTypes.sighash) {
        logger.throwArgumentError("interface does not support formatting sighash", "format", format2);
      }
      const abi2 = this.fragments.map((fragment) => fragment.format(format2));
      if (format2 === FormatTypes.json) {
        return JSON.stringify(abi2.map((j) => JSON.parse(j)));
      }
      return abi2;
    }
    // Sub-classes can override these to handle other blockchains
    static getAbiCoder() {
      return defaultAbiCoder;
    }
    static getAddress(address2) {
      return getAddress(address2);
    }
    static getSighash(fragment) {
      return hexDataSlice(id(fragment.format()), 0, 4);
    }
    static getEventTopic(eventFragment) {
      return id(eventFragment.format());
    }
    // Find a function definition by any means necessary (unless it is ambiguous)
    getFunction(nameOrSignatureOrSighash) {
      if (isHexString$1(nameOrSignatureOrSighash)) {
        for (const name2 in this.functions) {
          if (nameOrSignatureOrSighash === this.getSighash(name2)) {
            return this.functions[name2];
          }
        }
        logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
      }
      if (nameOrSignatureOrSighash.indexOf("(") === -1) {
        const name2 = nameOrSignatureOrSighash.trim();
        const matching = Object.keys(this.functions).filter((f2) => f2.split(
          "("
          /* fix:) */
        )[0] === name2);
        if (matching.length === 0) {
          logger.throwArgumentError("no matching function", "name", name2);
        } else if (matching.length > 1) {
          logger.throwArgumentError("multiple matching functions", "name", name2);
        }
        return this.functions[matching[0]];
      }
      const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
      if (!result) {
        logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
      }
      return result;
    }
    // Find an event definition by any means necessary (unless it is ambiguous)
    getEvent(nameOrSignatureOrTopic) {
      if (isHexString$1(nameOrSignatureOrTopic)) {
        const topichash = nameOrSignatureOrTopic.toLowerCase();
        for (const name2 in this.events) {
          if (topichash === this.getEventTopic(name2)) {
            return this.events[name2];
          }
        }
        logger.throwArgumentError("no matching event", "topichash", topichash);
      }
      if (nameOrSignatureOrTopic.indexOf("(") === -1) {
        const name2 = nameOrSignatureOrTopic.trim();
        const matching = Object.keys(this.events).filter((f2) => f2.split(
          "("
          /* fix:) */
        )[0] === name2);
        if (matching.length === 0) {
          logger.throwArgumentError("no matching event", "name", name2);
        } else if (matching.length > 1) {
          logger.throwArgumentError("multiple matching events", "name", name2);
        }
        return this.events[matching[0]];
      }
      const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
      if (!result) {
        logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
      }
      return result;
    }
    // Find a function definition by any means necessary (unless it is ambiguous)
    getError(nameOrSignatureOrSighash) {
      if (isHexString$1(nameOrSignatureOrSighash)) {
        const getSighash = getStatic(this.constructor, "getSighash");
        for (const name2 in this.errors) {
          const error2 = this.errors[name2];
          if (nameOrSignatureOrSighash === getSighash(error2)) {
            return this.errors[name2];
          }
        }
        logger.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
      }
      if (nameOrSignatureOrSighash.indexOf("(") === -1) {
        const name2 = nameOrSignatureOrSighash.trim();
        const matching = Object.keys(this.errors).filter((f2) => f2.split(
          "("
          /* fix:) */
        )[0] === name2);
        if (matching.length === 0) {
          logger.throwArgumentError("no matching error", "name", name2);
        } else if (matching.length > 1) {
          logger.throwArgumentError("multiple matching errors", "name", name2);
        }
        return this.errors[matching[0]];
      }
      const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
      if (!result) {
        logger.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
      }
      return result;
    }
    // Get the sighash (the bytes4 selector) used by Solidity to identify a function
    getSighash(fragment) {
      if (typeof fragment === "string") {
        try {
          fragment = this.getFunction(fragment);
        } catch (error2) {
          try {
            fragment = this.getError(fragment);
          } catch (_) {
            throw error2;
          }
        }
      }
      return getStatic(this.constructor, "getSighash")(fragment);
    }
    // Get the topic (the bytes32 hash) used by Solidity to identify an event
    getEventTopic(eventFragment) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      return getStatic(this.constructor, "getEventTopic")(eventFragment);
    }
    _decodeParams(params, data) {
      return this._abiCoder.decode(params, data);
    }
    _encodeParams(params, values) {
      return this._abiCoder.encode(params, values);
    }
    encodeDeploy(values) {
      return this._encodeParams(this.deploy.inputs, values || []);
    }
    decodeErrorResult(fragment, data) {
      if (typeof fragment === "string") {
        fragment = this.getError(fragment);
      }
      const bytes2 = arrayify(data);
      if (hexlify(bytes2.slice(0, 4)) !== this.getSighash(fragment)) {
        logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes2));
      }
      return this._decodeParams(fragment.inputs, bytes2.slice(4));
    }
    encodeErrorResult(fragment, values) {
      if (typeof fragment === "string") {
        fragment = this.getError(fragment);
      }
      return hexlify(concat([
        this.getSighash(fragment),
        this._encodeParams(fragment.inputs, values || [])
      ]));
    }
    // Decode the data for a function call (e.g. tx.data)
    decodeFunctionData(functionFragment, data) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      const bytes2 = arrayify(data);
      if (hexlify(bytes2.slice(0, 4)) !== this.getSighash(functionFragment)) {
        logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes2));
      }
      return this._decodeParams(functionFragment.inputs, bytes2.slice(4));
    }
    // Encode the data for a function call (e.g. tx.data)
    encodeFunctionData(functionFragment, values) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      return hexlify(concat([
        this.getSighash(functionFragment),
        this._encodeParams(functionFragment.inputs, values || [])
      ]));
    }
    // Decode the result from a function call (e.g. from eth_call)
    decodeFunctionResult(functionFragment, data) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      let bytes2 = arrayify(data);
      let reason = null;
      let message = "";
      let errorArgs = null;
      let errorName = null;
      let errorSignature = null;
      switch (bytes2.length % this._abiCoder._getWordSize()) {
        case 0:
          try {
            return this._abiCoder.decode(functionFragment.outputs, bytes2);
          } catch (error2) {
          }
          break;
        case 4: {
          const selector = hexlify(bytes2.slice(0, 4));
          const builtin = BuiltinErrors[selector];
          if (builtin) {
            errorArgs = this._abiCoder.decode(builtin.inputs, bytes2.slice(4));
            errorName = builtin.name;
            errorSignature = builtin.signature;
            if (builtin.reason) {
              reason = errorArgs[0];
            }
            if (errorName === "Error") {
              message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
            } else if (errorName === "Panic") {
              message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
            }
          } else {
            try {
              const error2 = this.getError(selector);
              errorArgs = this._abiCoder.decode(error2.inputs, bytes2.slice(4));
              errorName = error2.name;
              errorSignature = error2.format();
            } catch (error2) {
            }
          }
          break;
        }
      }
      return logger.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
        method: functionFragment.format(),
        data: hexlify(data),
        errorArgs,
        errorName,
        errorSignature,
        reason
      });
    }
    // Encode the result for a function call (e.g. for eth_call)
    encodeFunctionResult(functionFragment, values) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
    }
    // Create the filter for the event with search criteria (e.g. for eth_filterLog)
    encodeFilterTopics(eventFragment, values) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      if (values.length > eventFragment.inputs.length) {
        logger.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
          argument: "values",
          value: values
        });
      }
      let topics = [];
      if (!eventFragment.anonymous) {
        topics.push(this.getEventTopic(eventFragment));
      }
      const encodeTopic = (param, value) => {
        if (param.type === "string") {
          return id(value);
        } else if (param.type === "bytes") {
          return keccak256(hexlify(value));
        }
        if (param.type === "bool" && typeof value === "boolean") {
          value = value ? "0x01" : "0x00";
        }
        if (param.type.match(/^u?int/)) {
          value = BigNumber.from(value).toHexString();
        }
        if (param.type === "address") {
          this._abiCoder.encode(["address"], [value]);
        }
        return hexZeroPad(hexlify(value), 32);
      };
      values.forEach((value, index) => {
        let param = eventFragment.inputs[index];
        if (!param.indexed) {
          if (value != null) {
            logger.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
          }
          return;
        }
        if (value == null) {
          topics.push(null);
        } else if (param.baseType === "array" || param.baseType === "tuple") {
          logger.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
        } else if (Array.isArray(value)) {
          topics.push(value.map((value2) => encodeTopic(param, value2)));
        } else {
          topics.push(encodeTopic(param, value));
        }
      });
      while (topics.length && topics[topics.length - 1] === null) {
        topics.pop();
      }
      return topics;
    }
    encodeEventLog(eventFragment, values) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      const topics = [];
      const dataTypes = [];
      const dataValues = [];
      if (!eventFragment.anonymous) {
        topics.push(this.getEventTopic(eventFragment));
      }
      if (values.length !== eventFragment.inputs.length) {
        logger.throwArgumentError("event arguments/values mismatch", "values", values);
      }
      eventFragment.inputs.forEach((param, index) => {
        const value = values[index];
        if (param.indexed) {
          if (param.type === "string") {
            topics.push(id(value));
          } else if (param.type === "bytes") {
            topics.push(keccak256(value));
          } else if (param.baseType === "tuple" || param.baseType === "array") {
            throw new Error("not implemented");
          } else {
            topics.push(this._abiCoder.encode([param.type], [value]));
          }
        } else {
          dataTypes.push(param);
          dataValues.push(value);
        }
      });
      return {
        data: this._abiCoder.encode(dataTypes, dataValues),
        topics
      };
    }
    // Decode a filter for the event and the search criteria
    decodeEventLog(eventFragment, data, topics) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      if (topics != null && !eventFragment.anonymous) {
        let topicHash = this.getEventTopic(eventFragment);
        if (!isHexString$1(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
          logger.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
        }
        topics = topics.slice(1);
      }
      let indexed = [];
      let nonIndexed = [];
      let dynamic = [];
      eventFragment.inputs.forEach((param, index) => {
        if (param.indexed) {
          if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
            indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
            dynamic.push(true);
          } else {
            indexed.push(param);
            dynamic.push(false);
          }
        } else {
          nonIndexed.push(param);
          dynamic.push(false);
        }
      });
      let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
      let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
      let result = [];
      let nonIndexedIndex = 0, indexedIndex = 0;
      eventFragment.inputs.forEach((param, index) => {
        if (param.indexed) {
          if (resultIndexed == null) {
            result[index] = new Indexed({ _isIndexed: true, hash: null });
          } else if (dynamic[index]) {
            result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
          } else {
            try {
              result[index] = resultIndexed[indexedIndex++];
            } catch (error2) {
              result[index] = error2;
            }
          }
        } else {
          try {
            result[index] = resultNonIndexed[nonIndexedIndex++];
          } catch (error2) {
            result[index] = error2;
          }
        }
        if (param.name && result[param.name] == null) {
          const value = result[index];
          if (value instanceof Error) {
            Object.defineProperty(result, param.name, {
              enumerable: true,
              get: () => {
                throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
              }
            });
          } else {
            result[param.name] = value;
          }
        }
      });
      for (let i2 = 0; i2 < result.length; i2++) {
        const value = result[i2];
        if (value instanceof Error) {
          Object.defineProperty(result, i2, {
            enumerable: true,
            get: () => {
              throw wrapAccessError(`index ${i2}`, value);
            }
          });
        }
      }
      return Object.freeze(result);
    }
    // Given a transaction, find the matching function fragment (if any) and
    // determine all its properties and call parameters
    parseTransaction(tx) {
      let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
      if (!fragment) {
        return null;
      }
      return new TransactionDescription({
        args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
        functionFragment: fragment,
        name: fragment.name,
        signature: fragment.format(),
        sighash: this.getSighash(fragment),
        value: BigNumber.from(tx.value || "0")
      });
    }
    // @TODO
    //parseCallResult(data: BytesLike): ??
    // Given an event log, find the matching event fragment (if any) and
    // determine all its properties and values
    parseLog(log2) {
      let fragment = this.getEvent(log2.topics[0]);
      if (!fragment || fragment.anonymous) {
        return null;
      }
      return new LogDescription({
        eventFragment: fragment,
        name: fragment.name,
        signature: fragment.format(),
        topic: this.getEventTopic(fragment),
        args: this.decodeEventLog(fragment, log2.data, log2.topics)
      });
    }
    parseError(data) {
      const hexData = hexlify(data);
      let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
      if (!fragment) {
        return null;
      }
      return new ErrorDescription({
        args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
        errorFragment: fragment,
        name: fragment.name,
        signature: fragment.format(),
        sighash: this.getSighash(fragment)
      });
    }
    /*
    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
        if (Interface.isInterface(value)) {
            return value;
        }
        if (typeof(value) === "string") {
            return new Interface(JSON.parse(value));
        }
        return new Interface(value);
    }
    */
    static isInterface(value) {
      return !!(value && value._isInterface);
    }
  }
  var __awaiter$8 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const REGISTRIES = [
    {
      name: "ens",
      resolvers: {
        forward: "https://explorers.api.live.ledger.com/blockchain/v4/eth/ens/resolve/{name}",
        reverse: "https://explorers.api.live.ledger.com/blockchain/v4/eth/ens/reverse-resolve/{address}"
      },
      signatures: {
        forward: "https://nft.api.live.ledger.com/v1/names/ens/forward/{name}?challenge={challenge}",
        reverse: "https://nft.api.live.ledger.com/v1/names/ens/reverse/{address}?challenge={challenge}"
      },
      patterns: {
        forward: new RegExp("\\.eth$"),
        reverse: new RegExp("^0x[0-9a-fA-F]{40}$")
      },
      coinTypes: [60]
    }
  ];
  const getRegistries = () => __awaiter$8(void 0, void 0, void 0, function* () {
    return REGISTRIES;
  });
  const validateDomain = (domain) => {
    if (typeof domain !== "string") {
      return false;
    }
    const lengthIsValid = domain.length > 0 && Number(domain.length) < 30;
    const containsOnlyValidChars = new RegExp("^[a-zA-Z0-9\\-\\_\\.]+$").test(domain);
    return lengthIsValid && containsOnlyValidChars;
  };
  var __awaiter$7 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const signDomainResolution = (domain, registryName, challenge) => __awaiter$7(void 0, void 0, void 0, function* () {
    if (!validateDomain(domain)) {
      throw new Error(`Domains with more than 255 caracters or with unicode are not supported on the nano. Domain: ${domain}`);
    }
    const registries = yield getRegistries();
    const registry = registries.find((r2) => r2.name === registryName);
    if (!registry)
      return null;
    const url2 = registry.signatures.forward.replace("{name}", domain).replace("{challenge}", challenge);
    return axios.request({
      method: "GET",
      url: url2
    }).then(({ data }) => data.payload).catch((error2) => {
      if (error2.status !== 404) {
        log("domain-service", "failed to get APDU for a domain", {
          domain,
          error: error2
        });
      }
      return null;
    });
  });
  const signAddressResolution = (address2, registryName, challenge) => __awaiter$7(void 0, void 0, void 0, function* () {
    const registries = yield getRegistries();
    const registry = registries.find((r2) => r2.name === registryName);
    if (!registry)
      return null;
    const url2 = registry.signatures.reverse.replace("{address}", address2).replace("{challenge}", challenge);
    return axios.request({
      method: "GET",
      url: url2
    }).then(({ data }) => data.payload).catch((error2) => {
      if (error2.status !== 404) {
        log("domain-service", "failed to get APDU for an address", {
          address: address2,
          error: error2
        });
      }
      return null;
    });
  });
  const UNISWAP_UNIVERSAL_ROUTER_ADDRESS = "0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad";
  const UNISWAP_EXECUTE_SELECTOR = "0x3593564c";
  const WETH_PER_CHAIN_ID = {
    // Ethereum Mainnet
    1: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    // Ethereum Goerli
    5: "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    // Ethereum Sepolia
    11155111: "0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14",
    // Arbitrum One
    42161: "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    // Arbitrum Goerli
    421613: "0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3",
    // Avalanche C-Chain
    43114: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    // BSC
    56: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
    // Base
    8453: "0x4200000000000000000000000000000000000006",
    // Base Goerli
    84531: "0x44D627f900da8AdaC7561bD73aA745F132450798",
    // Blast
    23888: "0x4300000000000000000000000000000000000004",
    // Celo
    42220: new Error("Celo isn't supporting wrapping Eth"),
    // Celo Alfajores
    44787: new Error("Celo Alfajores isn't supporting wrapping Eth"),
    // Optimism
    10: "0x4200000000000000000000000000000000000006",
    // Optimism Goerli
    420: "0x4200000000000000000000000000000000000006",
    // Polygon
    137: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    // Polygon Mumbai
    80001: "0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889"
  };
  const UNISWAP_COMMANDS = {
    "0x08": "V2_SWAP_EXACT_IN",
    "0x09": "V2_SWAP_EXACT_OUT",
    "0x00": "V3_SWAP_EXACT_IN",
    "0x01": "V3_SWAP_EXACT_OUT",
    "0x0b": "WRAP_ETH",
    "0x0c": "UNWRAP_ETH",
    "0x0a": "PERMIT2_PERMIT",
    "0x0d": "PERMIT2_TRANSFER_FROM",
    "0x02": "PERMIT2_PERMIT_BATCH",
    "0x03": "PERMIT2_TRANSFER_FROM_BATCH",
    "0x06": "PAY_PORTION",
    "0x04": "SWEEP"
  };
  const SWAP_COMMANDS = [
    "V2_SWAP_EXACT_IN",
    "V2_SWAP_EXACT_OUT",
    "V3_SWAP_EXACT_IN",
    "V3_SWAP_EXACT_OUT"
  ];
  const swapV2Decoder = (input) => {
    const [, , , addresses] = defaultAbiCoder.decode(["address", "uint256", "uint256", "address[]", "bool"], input);
    return addresses.map((address2) => address2.toLowerCase());
  };
  const swapV3Decoder = (input) => {
    const [, , , path] = defaultAbiCoder.decode(["address", "uint256", "uint256", "bytes", "bool"], input);
    const pathBuffer = Buffer.from(path.slice(2), "hex");
    const tokens = [];
    let i2 = 0;
    while (i2 < pathBuffer.length) {
      tokens.push(`0x${pathBuffer.subarray(i2, i2 + 20).toString("hex").toLowerCase()}`);
      i2 += 23;
    }
    return tokens;
  };
  const wrapEthDecoder = (input, chainId) => {
    const contract = WETH_PER_CHAIN_ID[chainId];
    return contract instanceof Error ? [] : [contract.toLowerCase()];
  };
  const sweepDecoder = (input) => {
    const [token] = defaultAbiCoder.decode(["address", "address", "uint256"], input);
    return [token.toLowerCase()];
  };
  const noDecoder = () => [];
  const UniswapDecoders = {
    V2_SWAP_EXACT_IN: swapV2Decoder,
    V2_SWAP_EXACT_OUT: swapV2Decoder,
    V3_SWAP_EXACT_IN: swapV3Decoder,
    V3_SWAP_EXACT_OUT: swapV3Decoder,
    WRAP_ETH: wrapEthDecoder,
    UNWRAP_ETH: wrapEthDecoder,
    PERMIT2_PERMIT: noDecoder,
    PERMIT2_TRANSFER_FROM: noDecoder,
    PERMIT2_PERMIT_BATCH: noDecoder,
    PERMIT2_TRANSFER_FROM_BATCH: noDecoder,
    PAY_PORTION: noDecoder,
    SWEEP: sweepDecoder
  };
  var __awaiter$6 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const isSupported = (calldata, to, chainId, commandsAndTokens) => {
    const selector = calldata.slice(0, 10);
    const contractAddress = to === null || to === void 0 ? void 0 : to.toLowerCase();
    if (selector !== UNISWAP_EXECUTE_SELECTOR || contractAddress !== UNISWAP_UNIVERSAL_ROUTER_ADDRESS || !commandsAndTokens.length) {
      return false;
    }
    let endingAsset;
    for (let i2 = 0; i2 < commandsAndTokens.length; i2++) {
      const [command, tokens] = commandsAndTokens[i2];
      if (!command)
        return false;
      if (!SWAP_COMMANDS.includes(command))
        continue;
      const poolVersion = command.slice(0, 2);
      if (endingAsset && // Chained swaps should work as a pipe regarding the traded assets:
      // The last asset of swap 1 should be the first asset of swap 2
      // and the same pool version should be used for both swaps
      (endingAsset.asset !== tokens[0] || endingAsset.poolVersion !== poolVersion)) {
        return false;
      } else {
        endingAsset = {
          poolVersion,
          asset: tokens[tokens.length - 1]
        };
      }
    }
    return true;
  };
  const getCommandsAndTokensFromUniswapCalldata = (calldata, chainId) => {
    try {
      const [commands, inputs] = new Interface([
        "function execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline) external payable"
      ]).decodeFunctionData("execute", calldata);
      const commandsBuffer = Buffer.from(commands.slice(2), "hex");
      return commandsBuffer.reduce((acc, curr, i2) => {
        const commandName = UNISWAP_COMMANDS[`0x${curr.toString(16).padStart(2, "0")}`];
        if (!commandName)
          return [...acc, [void 0, []]];
        const commandDecoder = UniswapDecoders[commandName];
        return [...acc, [commandName, commandDecoder(inputs[i2], chainId)]];
      }, []);
    } catch (e) {
      log("Uniswap", "Error decoding Uniswap calldata", e);
      return [];
    }
  };
  const loadInfosForUniswap = (transaction, chainId, userConfig) => __awaiter$6(void 0, void 0, void 0, function* () {
    const selector = transaction.data.slice(0, 10);
    const commandsAndTokens = getCommandsAndTokensFromUniswapCalldata(transaction.data, chainId);
    if (!isSupported(selector, transaction.to, chainId, commandsAndTokens)) {
      return {};
    }
    const uniqueTokens = Array.from(new Set(commandsAndTokens.flatMap(([, tokens]) => tokens)));
    const tokenDescriptorsPromises = Promise.all(uniqueTokens.map((token) => __awaiter$6(void 0, void 0, void 0, function* () {
      var _a2;
      const erc20SignaturesBlob = yield findERC20SignaturesInfo({}, chainId);
      return (_a2 = byContractAddressAndChainId(token, chainId, erc20SignaturesBlob)) === null || _a2 === void 0 ? void 0 : _a2.data;
    })));
    const tokenDescriptors = yield tokenDescriptorsPromises.then((descriptors2) => descriptors2.filter((descriptor) => !!descriptor));
    const pluginName = "Uniswap";
    const lengthBuff = Buffer.alloc(1);
    lengthBuff.writeUIntBE(pluginName.length, 0, 1);
    const pluginNameBuff = Buffer.from(pluginName);
    const contractAddressBuff = Buffer.from(UNISWAP_UNIVERSAL_ROUTER_ADDRESS.slice(2), "hex");
    const selectorBuff = Buffer.from(UNISWAP_EXECUTE_SELECTOR.slice(2), "hex");
    const signature2 = Buffer.from(
      // Signature is hardcoded as it would create issues by being in the CAL ethereum.json file
      "3044022014391e8f355867a57fe88f6a5a4dbcb8bf8f888a9db3ff3449caf72d120396bd02200c13d9c3f79400fe0aa0434ac54d59b79503c9964a4abc3e8cd22763e0242935",
      "hex"
    );
    const pluginData = Buffer.concat([
      lengthBuff,
      pluginNameBuff,
      contractAddressBuff,
      selectorBuff,
      signature2
    ]);
    return {
      pluginData,
      tokenDescriptors
    };
  });
  var __awaiter$5 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const loadInfosForContractMethod = (contractAddress, selector, chainId, userLoadConfig) => __awaiter$5(void 0, void 0, void 0, function* () {
    const { pluginBaseURL, extraPlugins } = getLoadConfig(userLoadConfig);
    let data = {};
    if (pluginBaseURL) {
      const url2 = `${pluginBaseURL}/plugins/ethereum.json`;
      data = yield axios.get(`${pluginBaseURL}/plugins/ethereum.json`).then((r2) => r2.data).catch((e) => {
        log("error", "could not fetch from " + url2 + ": " + String(e));
        return null;
      });
    }
    if (extraPlugins) {
      data = Object.assign(Object.assign({}, data), extraPlugins);
    }
    if (!data)
      return;
    const lcSelector = selector.toLowerCase();
    const lcContractAddress = contractAddress.toLowerCase();
    if (lcContractAddress in data) {
      const contractSelectors = data[lcContractAddress];
      if (lcSelector in contractSelectors) {
        return {
          payload: contractSelectors[lcSelector]["serialized_data"],
          signature: contractSelectors[lcSelector]["signature"],
          plugin: contractSelectors[lcSelector]["plugin"],
          erc20OfInterest: contractSelectors[lcSelector]["erc20OfInterest"],
          abi: contractSelectors["abi"]
        };
      }
    }
  });
  var __awaiter$4 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const getNFTInfo = (contractAddress, chainId, userLoadConfig) => __awaiter$4(void 0, void 0, void 0, function* () {
    var _a2;
    const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);
    if (!nftExplorerBaseURL)
      return;
    const url2 = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}`;
    const response2 = yield axios.get(url2).then((r2) => r2.data).catch((e) => {
      log("error", "could not fetch from " + url2 + ": " + String(e));
      return null;
    });
    if (!response2)
      return;
    const payload = response2["payload"];
    const collectionNameLength = parseInt(payload.slice(4, 6), 16);
    const collectionNameHex = payload.substr(6, collectionNameLength * 2);
    const collectionName = (_a2 = collectionNameHex.match(/.{2}/g)) === null || _a2 === void 0 ? void 0 : _a2.reduce((acc, curr) => acc += String.fromCharCode(parseInt(curr, 16)), "");
    return {
      contractAddress,
      collectionName: collectionName || "",
      data: payload
    };
  });
  const loadNftPlugin = (contractAddress, selector, chainId, userLoadConfig) => __awaiter$4(void 0, void 0, void 0, function* () {
    const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);
    if (!nftExplorerBaseURL)
      return;
    const url2 = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}/plugin-selector/${selector}`;
    const response2 = yield axios.get(url2).then((r2) => r2.data).catch((e) => {
      log("error", "could not fetch from " + url2 + ": " + String(e));
      return null;
    });
    if (!response2)
      return;
    const payload = response2["payload"];
    return payload;
  });
  var __awaiter$3 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const getAdditionalDataForContract = (contractAddress, chainIdUint32, loadConfig, shouldResolve) => __awaiter$3(void 0, void 0, void 0, function* () {
    const resolution = {
      nfts: [],
      erc20Tokens: []
    };
    if (shouldResolve.nft) {
      const nftInfo = yield getNFTInfo(contractAddress, chainIdUint32, loadConfig);
      if (nftInfo) {
        log("ethereum", "loaded nft info for " + nftInfo.contractAddress + " (" + nftInfo.collectionName + ")");
        resolution.nfts.push(nftInfo.data);
      } else {
        log("ethereum", "couldn't load nft info for " + contractAddress);
      }
    }
    if (shouldResolve.token) {
      const erc20SignaturesBlob = yield findERC20SignaturesInfo(loadConfig, chainIdUint32);
      const erc20Info = byContractAddressAndChainId(contractAddress, chainIdUint32, erc20SignaturesBlob);
      if (erc20Info) {
        log("ethereum", "loaded erc20token info for " + erc20Info.contractAddress + " (" + erc20Info.ticker + ")");
        resolution.erc20Tokens.push(erc20Info.data.toString("hex"));
      } else {
        log("ethereum", "couldn't load erc20token info for " + contractAddress);
      }
    }
    return resolution;
  });
  const loadNanoAppPlugins = (contractAddress, selector, parsedTransaction, chainIdUint32, loadConfig, shouldResolve) => __awaiter$3(void 0, void 0, void 0, function* () {
    let resolution = {
      externalPlugin: [],
      plugin: [],
      nfts: [],
      erc20Tokens: [],
      domains: []
    };
    if (shouldResolve.nft) {
      const nftPluginPayload = yield loadNftPlugin(contractAddress, selector, chainIdUint32, loadConfig);
      if (nftPluginPayload) {
        resolution.plugin.push(nftPluginPayload);
      } else {
        log("ethereum", "no NFT plugin payload for selector " + selector + " and address " + contractAddress);
      }
    }
    if (shouldResolve.externalPlugins && contractAddress !== UNISWAP_UNIVERSAL_ROUTER_ADDRESS) {
      const contractMethodInfos = yield loadInfosForContractMethod(contractAddress, selector, chainIdUint32, loadConfig);
      if (contractMethodInfos) {
        const { plugin, payload, signature: signature2, erc20OfInterest, abi: abi2 } = contractMethodInfos;
        if (plugin) {
          log("ethereum", `found plugin (${plugin}) for selector: ${selector}`);
          resolution.externalPlugin.push({ payload, signature: signature2 });
        }
        if (erc20OfInterest && erc20OfInterest.length && abi2) {
          const contract = new Interface(abi2);
          const args = contract.parseTransaction(parsedTransaction).args;
          for (const path of erc20OfInterest) {
            const erc20ContractAddress = path.split(".").reduce((value, seg) => {
              if (seg === "-1" && Array.isArray(value)) {
                return value[value.length - 1];
              }
              return value[seg];
            }, args);
            const externalPluginResolution = yield getAdditionalDataForContract(erc20ContractAddress, chainIdUint32, loadConfig, {
              nft: false,
              externalPlugins: false,
              token: true,
              // enforcing resolution of tokens for external plugins that need info on assets (e.g. for a swap)
              uniswapV3: false
            });
            resolution = mergeResolutions([resolution, externalPluginResolution]);
          }
        }
      } else {
        log("ethereum", "no infos for selector " + selector);
      }
    }
    if (shouldResolve.uniswapV3) {
      const { pluginData, tokenDescriptors } = yield loadInfosForUniswap(parsedTransaction, chainIdUint32);
      if (pluginData && tokenDescriptors) {
        resolution.externalPlugin.push({
          payload: pluginData.toString("hex"),
          signature: ""
        });
        resolution.erc20Tokens.push(...tokenDescriptors.map((d) => d.toString("hex")));
      }
    }
    return resolution;
  });
  const resolveTransaction = (rawTxHex, loadConfig, resolutionConfig) => __awaiter$3(void 0, void 0, void 0, function* () {
    var _a2;
    const rawTx = Buffer.from(rawTxHex, "hex");
    const parsedTransaction = parse$i(`0x${rawTx.toString("hex")}`);
    const chainIdUint32 = getChainIdAsUint32(parsedTransaction.chainId);
    const { domains } = resolutionConfig;
    const contractAddress = (_a2 = parsedTransaction.to) === null || _a2 === void 0 ? void 0 : _a2.toLowerCase();
    if (!contractAddress)
      return {
        nfts: [],
        erc20Tokens: [],
        externalPlugin: [],
        plugin: [],
        domains: []
      };
    const selector = parsedTransaction.data.length >= 10 && parsedTransaction.data.substring(0, 10);
    const resolutions = [];
    if (selector) {
      const shouldResolve = {
        token: resolutionConfig.erc20 && tokenSelectors.includes(selector),
        nft: resolutionConfig.nft && nftSelectors.includes(selector),
        externalPlugins: resolutionConfig.externalPlugins,
        uniswapV3: resolutionConfig.uniswapV3
      };
      const pluginsResolution = yield loadNanoAppPlugins(contractAddress, selector, parsedTransaction, chainIdUint32, loadConfig, shouldResolve);
      if (pluginsResolution) {
        resolutions.push(pluginsResolution);
      }
      const contractResolution = yield getAdditionalDataForContract(contractAddress, chainIdUint32, loadConfig, shouldResolve);
      if (contractResolution) {
        resolutions.push(contractResolution);
      }
    }
    if (domains) {
      const domainResolutions = {
        domains
      };
      resolutions.push(domainResolutions);
    }
    return mergeResolutions(resolutions);
  });
  const ledgerService = {
    resolveTransaction,
    signDomainResolution,
    signAddressResolution
  };
  var __awaiter$2 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const domainResolutionFlow = (appBinding, domainDescriptor) => __awaiter$2(void 0, void 0, void 0, function* () {
    if (!domainDescriptor)
      return;
    const { domain, address: address2, registry, type: type2 } = domainDescriptor;
    const challenge = yield appBinding.getChallenge();
    const domainAPDU = type2 === "forward" ? yield ledgerService.signDomainResolution(domain, registry, challenge) : yield ledgerService.signAddressResolution(address2, registry, challenge);
    if (domainAPDU) {
      yield appBinding.provideDomainName(domainAPDU);
    }
  });
  var __awaiter$1 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  const starkQuantizationTypeMap = {
    eth: 1,
    erc20: 2,
    erc721: 3,
    erc20mintable: 4,
    erc721mintable: 5
  };
  const remapTransactionRelatedErrors = (e) => {
    if (e && e.statusCode === 27264) {
      return new EthAppPleaseEnableContractData("Please enable Blind signing or Contract data in the Ethereum app Settings");
    }
    return e;
  };
  class Eth {
    setLoadConfig(loadConfig) {
      this.loadConfig = loadConfig;
    }
    constructor(transport, scrambleKey = "w0w", loadConfig = {}) {
      this.transport = transport;
      this.loadConfig = loadConfig;
      transport.decorateAppAPIMethods(this, [
        // "getChallange",                  | ⚠️
        // "provideERC20TokenInformation",  | Those methods are not decorated as they're
        // "setExternalPlugin",             | being used inside of the `signTransaction` flow
        // "setPlugin",                     | and shouldn't be locking the transport
        // "provideDomainName",             | ⚠️
        // "provideNFTInformation",         |
        "getAddress",
        "signTransaction",
        "signPersonalMessage",
        "getAppConfiguration",
        "signEIP712Message",
        "signEIP712HashedMessage",
        "starkGetPublicKey",
        "starkSignOrder",
        "starkSignOrder_v2",
        "starkSignTransfer",
        "starkSignTransfer_v2",
        "starkProvideQuantum",
        "starkProvideQuantum_v2",
        "starkUnsafeSign",
        "eth2GetPublicKey",
        "eth2SetWithdrawalIndex",
        "getEIP1024PublicEncryptionKey",
        "getEIP1024SharedSecret"
      ], scrambleKey);
    }
    /**
     * get Ethereum address for a given BIP 32 path.
     * @param path a path in BIP 32 format
     * @option boolDisplay optionally enable or not the display
     * @option boolChaincode optionally enable or not the chaincode request
     * @option chainId optionally display the network clearly on a Stax device
     * @return an object with a publicKey, address and (optionally) chainCode
     * @example
     * eth.getAddress("44'/60'/0'/0/0").then(o => o.address)
     */
    getAddress(path, boolDisplay, boolChaincode, chainId) {
      const paths = splitPath(path);
      let buffer2 = Buffer.alloc(1 + paths.length * 4);
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      if (chainId) {
        const chainIdBufferMask = Buffer.alloc(8, 0);
        const chainIdBuffer = Buffer.from(padHexString(new BigNumber$1(chainId).toString(16)), "hex");
        chainIdBufferMask.write(chainIdBuffer.toString("hex"), chainIdBufferMask.length - chainIdBuffer.length, "hex");
        buffer2 = Buffer.concat([buffer2, chainIdBufferMask]);
      }
      return this.transport.send(224, 2, boolDisplay ? 1 : 0, boolChaincode ? 1 : 0, buffer2).then((response2) => {
        const publicKeyLength = response2[0];
        const addressLength = response2[1 + publicKeyLength];
        return {
          publicKey: response2.slice(1, 1 + publicKeyLength).toString("hex"),
          address: "0x" + response2.slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength).toString("ascii"),
          chainCode: boolChaincode ? response2.slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32).toString("hex") : void 0
        };
      });
    }
    /**
     * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign.
     *
     * @param path: the BIP32 path to sign the transaction on
     * @param rawTxHex: the raw ethereum transaction in hexadecimal to sign
     * @param resolution: resolution is an object with all "resolved" metadata necessary to allow the device to clear sign information. This includes: ERC20 token information, plugins, contracts, NFT signatures,... You must explicitly provide something to avoid having a warning. By default, you can use Ledger's service or your own resolution service. See services/types.js for the contract. Setting the value to "null" will fallback everything to blind signing but will still allow the device to sign the transaction.
     * @example
     import { ledgerService } from "@ledgerhq/hw-app-eth"
     const tx = "e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080"; // raw tx to sign
     const resolution = await ledgerService.resolveTransaction(tx);
     const result = eth.signTransaction("44'/60'/0'/0/0", tx, resolution);
     console.log(result);
     */
    signTransaction(path, rawTxHex, resolution) {
      return __awaiter$1(this, void 0, void 0, function* () {
        let APDU_FIELDS;
        (function(APDU_FIELDS2) {
          APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
          APDU_FIELDS2[APDU_FIELDS2["INS"] = 4] = "INS";
          APDU_FIELDS2[APDU_FIELDS2["P1_FIRST_CHUNK"] = 0] = "P1_FIRST_CHUNK";
          APDU_FIELDS2[APDU_FIELDS2["P1_FOLLOWING_CHUNK"] = 128] = "P1_FOLLOWING_CHUNK";
          APDU_FIELDS2[APDU_FIELDS2["P2"] = 0] = "P2";
        })(APDU_FIELDS || (APDU_FIELDS = {}));
        if (resolution === void 0) {
          console.warn("hw-app-eth: signTransaction(path, rawTxHex, resolution): please provide the 'resolution' parameter. See https://github.com/LedgerHQ/ledgerjs/blob/master/packages/hw-app-eth/README.md – the previous signature is deprecated and providing the 3rd 'resolution' parameter explicitly will become mandatory so you have the control on the resolution and the fallback mecanism (e.g. fallback to blind signing or not).// Possible solution:\n + import { ledgerService } from '@ledgerhq/hw-app-eth';\n + const resolution = await ledgerService.resolveTransaction(rawTxHex);");
          resolution = yield ledgerService.resolveTransaction(rawTxHex, this.loadConfig, {
            externalPlugins: true,
            erc20: true,
            uniswapV3: false
          }).catch((e) => {
            console.warn("an error occurred in resolveTransaction => fallback to blind signing: " + String(e));
            return null;
          });
        }
        if (resolution) {
          for (const domainDescriptor of resolution.domains) {
            yield domainResolutionFlow(this, domainDescriptor).catch((e) => {
              log("error", "domainResolutionFlow failed", {
                domainDescriptor,
                error: e
              });
            });
          }
          for (const plugin of resolution.plugin) {
            yield this.setPlugin(plugin);
          }
          for (const { payload, signature: signature2 } of resolution.externalPlugin) {
            yield this.setExternalPlugin(payload, signature2);
          }
          for (const nft of resolution.nfts) {
            yield this.provideNFTInformation(nft);
          }
          for (const data of resolution.erc20Tokens) {
            yield this.provideERC20TokenInformation(data);
          }
        }
        const rawTx = Buffer.from(rawTxHex, "hex");
        const parsedTransaction = parse$i(`0x${rawTx.toString("hex")}`);
        const chainId = new BigNumber$1(parsedTransaction.chainId);
        const paths = splitPath(path);
        const derivationPathBuff = Buffer.alloc(1 + paths.length * 4);
        derivationPathBuff[0] = paths.length;
        paths.forEach((element, index) => {
          derivationPathBuff.writeUInt32BE(element, 1 + 4 * index);
        });
        const payloadChunks = safeChunkTransaction(rawTx, derivationPathBuff, parsedTransaction.type);
        let response2;
        for (const chunk of payloadChunks) {
          const isFirstChunk = chunk === payloadChunks[0];
          response2 = yield this.transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, isFirstChunk ? APDU_FIELDS.P1_FIRST_CHUNK : APDU_FIELDS.P1_FOLLOWING_CHUNK, APDU_FIELDS.P2, chunk).catch((e) => {
            throw remapTransactionRelatedErrors(e);
          });
        }
        const v = getV(response2[0], chainId, parsedTransaction.type);
        const r2 = response2.subarray(1, 1 + 32).toString("hex");
        const s2 = response2.subarray(1 + 32, 1 + 32 + 32).toString("hex");
        return { v, r: r2, s: s2 };
      });
    }
    /**
     * Helper to get resolution and signature of a transaction in a single method
     *
     * @param path: the BIP32 path to sign the transaction on
     * @param rawTxHex: the raw ethereum transaction in hexadecimal to sign
     * @param resolutionConfig: configuration about what should be clear signed in the transaction
     * @param throwOnError: optional parameter to determine if a failing resolution of the transaction should throw an error or not
     * @example
     const tx = "e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080"; // raw tx to sign
     const result = eth.clearSignTransaction("44'/60'/0'/0/0", tx, { erc20: true, externalPlugins: true, nft: true});
     console.log(result);
     */
    clearSignTransaction(path_1, rawTxHex_1, resolutionConfig_1) {
      return __awaiter$1(this, arguments, void 0, function* (path, rawTxHex, resolutionConfig, throwOnError = false) {
        const resolution = yield ledgerService.resolveTransaction(rawTxHex, this.loadConfig, resolutionConfig).catch((e) => {
          console.warn("an error occurred in resolveTransaction => fallback to blind signing: " + String(e));
          if (throwOnError) {
            throw e;
          }
          return null;
        });
        return this.signTransaction(path, rawTxHex, resolution);
      });
    }
    /**
     */
    getAppConfiguration() {
      return this.transport.send(224, 6, 0, 0).then((response2) => {
        return {
          arbitraryDataEnabled: response2[0] & 1,
          erc20ProvisioningNecessary: response2[0] & 2,
          starkEnabled: response2[0] & 4,
          starkv2Supported: response2[0] & 8,
          version: "" + response2[1] + "." + response2[2] + "." + response2[3]
        };
      });
    }
    /**
    * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.
    * @example
    eth.signPersonalMessage("44'/60'/0'/0/0", Buffer.from("test").toString("hex")).then(result => {
    var v = result['v'] - 27;
    v = v.toString(16);
    if (v.length < 2) {
      v = "0" + v;
    }
    console.log("Signature 0x" + result['r'] + result['s'] + v);
    })
     */
    signPersonalMessage(path, messageHex) {
      return __awaiter$1(this, void 0, void 0, function* () {
        const paths = splitPath(path);
        let offset = 0;
        const message = Buffer.from(messageHex, "hex");
        let response2;
        while (offset !== message.length) {
          const maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;
          const chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;
          const buffer2 = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);
          if (offset === 0) {
            buffer2[0] = paths.length;
            paths.forEach((element, index) => {
              buffer2.writeUInt32BE(element, 1 + 4 * index);
            });
            buffer2.writeUInt32BE(message.length, 1 + 4 * paths.length);
            message.copy(buffer2, 1 + 4 * paths.length + 4, offset, offset + chunkSize);
          } else {
            message.copy(buffer2, 0, offset, offset + chunkSize);
          }
          response2 = yield this.transport.send(224, 8, offset === 0 ? 0 : 128, 0, buffer2);
          offset += chunkSize;
        }
        const v = response2[0];
        const r2 = response2.slice(1, 1 + 32).toString("hex");
        const s2 = response2.slice(1 + 32, 1 + 32 + 32).toString("hex");
        return { v, r: r2, s: s2 };
      });
    }
    /**
    * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)
    * @example
    eth.signEIP712HashedMessage("44'/60'/0'/0/0", Buffer.from("0101010101010101010101010101010101010101010101010101010101010101").toString("hex"), Buffer.from("0202020202020202020202020202020202020202020202020202020202020202").toString("hex")).then(result => {
    var v = result['v'] - 27;
    v = v.toString(16);
    if (v.length < 2) {
      v = "0" + v;
    }
    console.log("Signature 0x" + result['r'] + result['s'] + v);
    })
     */
    signEIP712HashedMessage(path, domainSeparatorHex, hashStructMessageHex) {
      return signEIP712HashedMessage(this.transport, path, domainSeparatorHex, hashStructMessageHex);
    }
    /**
     * Sign an EIP-721 formatted message following the specification here:
     * https://github.com/LedgerHQ/app-ethereum/blob/develop/doc/ethapp.asc#sign-eth-eip-712
     * ⚠️ This method is not compatible with nano S (LNS). Make sure to use a try/catch to fallback on the signEIP712HashedMessage method ⚠️
     @example
     eth.signEIP721Message("44'/60'/0'/0/0", {
        domain: {
          chainId: 69,
          name: "Da Domain",
          verifyingContract: "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC",
          version: "1"
        },
        types: {
          "EIP712Domain": [
                { name: "name", type: "string" },
                { name: "version", type: "string" },
                { name: "chainId", type: "uint256" },
                { name: "verifyingContract", type: "address" }
            ],
          "Test": [
            { name: "contents", type: "string" }
          ]
        },
        primaryType: "Test",
        message: {contents: "Hello, Bob!"},
      })
     *
     * @param {String} path derivationPath
     * @param {Object} jsonMessage message to sign
     * @param {Boolean} fullImplem use the legacy implementation
     * @returns {Promise}
     */
    signEIP712Message(path_1, jsonMessage_1) {
      return __awaiter$1(this, arguments, void 0, function* (path, jsonMessage, fullImplem = false) {
        return signEIP712Message(this.transport, path, jsonMessage, fullImplem, this.loadConfig);
      });
    }
    /**
     * Method returning a 4 bytes TLV challenge as an hexa string
     *
     * @returns {Promise<string>}
     */
    getChallenge() {
      return __awaiter$1(this, void 0, void 0, function* () {
        let APDU_FIELDS;
        (function(APDU_FIELDS2) {
          APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
          APDU_FIELDS2[APDU_FIELDS2["INS"] = 32] = "INS";
          APDU_FIELDS2[APDU_FIELDS2["P1"] = 0] = "P1";
          APDU_FIELDS2[APDU_FIELDS2["P2"] = 0] = "P2";
          APDU_FIELDS2[APDU_FIELDS2["LC"] = 0] = "LC";
        })(APDU_FIELDS || (APDU_FIELDS = {}));
        return this.transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, APDU_FIELDS.P1, APDU_FIELDS.P2).then((res) => {
          const [, fourBytesChallenge, statusCode] = new RegExp("(.*)(.{4}$)").exec(res.toString("hex")) || [];
          if (statusCode !== "9000") {
            throw new Error(`An error happened while generating the challenge. Status code: ${statusCode}`);
          }
          return `0x${fourBytesChallenge}`;
        }).catch((e) => {
          log("error", "couldn't request a challenge", e);
          throw e;
        });
      });
    }
    /**
     * get Stark public key for a given BIP 32 path.
     * @param path a path in BIP 32 format
     * @option boolDisplay optionally enable or not the display
     * @return the Stark public key
     */
    starkGetPublicKey(path, boolDisplay) {
      const paths = splitPath(path);
      const buffer2 = Buffer.alloc(1 + paths.length * 4);
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      return this.transport.send(240, 2, boolDisplay ? 1 : 0, 0, buffer2).then((response2) => {
        return response2.slice(0, response2.length - 2);
      });
    }
    /**
     * sign a Stark order
     * @param path a path in BIP 32 format
     * @option sourceTokenAddress contract address of the source token (not present for ETH)
     * @param sourceQuantization quantization used for the source token
     * @option destinationTokenAddress contract address of the destination token (not present for ETH)
     * @param destinationQuantization quantization used for the destination token
     * @param sourceVault ID of the source vault
     * @param destinationVault ID of the destination vault
     * @param amountSell amount to sell
     * @param amountBuy amount to buy
     * @param nonce transaction nonce
     * @param timestamp transaction validity timestamp
     * @return the signature
     */
    starkSignOrder(path, sourceTokenAddress, sourceQuantization, destinationTokenAddress, destinationQuantization, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {
      const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);
      const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);
      const paths = splitPath(path);
      const buffer2 = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);
      let offset = 0;
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      offset = 1 + 4 * paths.length;
      if (sourceTokenAddressHex) {
        sourceTokenAddressHex.copy(buffer2, offset);
      }
      offset += 20;
      Buffer.from(sourceQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      offset += 32;
      if (destinationTokenAddressHex) {
        destinationTokenAddressHex.copy(buffer2, offset);
      }
      offset += 20;
      Buffer.from(destinationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      offset += 32;
      buffer2.writeUInt32BE(sourceVault, offset);
      offset += 4;
      buffer2.writeUInt32BE(destinationVault, offset);
      offset += 4;
      Buffer.from(amountSell.toString(16).padStart(16, "0"), "hex").copy(buffer2, offset);
      offset += 8;
      Buffer.from(amountBuy.toString(16).padStart(16, "0"), "hex").copy(buffer2, offset);
      offset += 8;
      buffer2.writeUInt32BE(nonce, offset);
      offset += 4;
      buffer2.writeUInt32BE(timestamp, offset);
      return this.transport.send(240, 4, 1, 0, buffer2).then((response2) => {
        const r2 = response2.slice(1, 1 + 32).toString("hex");
        const s2 = response2.slice(1 + 32, 1 + 32 + 32).toString("hex");
        return {
          r: r2,
          s: s2
        };
      });
    }
    /**
     * sign a Stark order using the Starkex V2 protocol
     * @param path a path in BIP 32 format
     * @option sourceTokenAddress contract address of the source token (not present for ETH)
     * @param sourceQuantizationType quantization type used for the source token
     * @option sourceQuantization quantization used for the source token (not present for erc 721 or mintable erc 721)
     * @option sourceMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the source token
     * @option destinationTokenAddress contract address of the destination token (not present for ETH)
     * @param destinationQuantizationType quantization type used for the destination token
     * @option destinationQuantization quantization used for the destination token (not present for erc 721 or mintable erc 721)
     * @option destinationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the destination token
     * @param sourceVault ID of the source vault
     * @param destinationVault ID of the destination vault
     * @param amountSell amount to sell
     * @param amountBuy amount to buy
     * @param nonce transaction nonce
     * @param timestamp transaction validity timestamp
     * @return the signature
     */
    starkSignOrder_v2(path, sourceTokenAddress, sourceQuantizationType, sourceQuantization, sourceMintableBlobOrTokenId, destinationTokenAddress, destinationQuantizationType, destinationQuantization, destinationMintableBlobOrTokenId, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {
      const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);
      const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);
      if (!(sourceQuantizationType in starkQuantizationTypeMap)) {
        throw new Error("eth.starkSignOrderv2 invalid source quantization type=" + sourceQuantizationType);
      }
      if (!(destinationQuantizationType in starkQuantizationTypeMap)) {
        throw new Error("eth.starkSignOrderv2 invalid destination quantization type=" + destinationQuantizationType);
      }
      const paths = splitPath(path);
      const buffer2 = Buffer.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 1 + 20 + 32 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);
      let offset = 0;
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      offset = 1 + 4 * paths.length;
      buffer2[offset] = starkQuantizationTypeMap[sourceQuantizationType];
      offset++;
      if (sourceTokenAddressHex) {
        sourceTokenAddressHex.copy(buffer2, offset);
      }
      offset += 20;
      if (sourceQuantization) {
        Buffer.from(sourceQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      if (sourceMintableBlobOrTokenId) {
        Buffer.from(sourceMintableBlobOrTokenId.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      buffer2[offset] = starkQuantizationTypeMap[destinationQuantizationType];
      offset++;
      if (destinationTokenAddressHex) {
        destinationTokenAddressHex.copy(buffer2, offset);
      }
      offset += 20;
      if (destinationQuantization) {
        Buffer.from(destinationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      if (destinationMintableBlobOrTokenId) {
        Buffer.from(destinationMintableBlobOrTokenId.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      buffer2.writeUInt32BE(sourceVault, offset);
      offset += 4;
      buffer2.writeUInt32BE(destinationVault, offset);
      offset += 4;
      Buffer.from(amountSell.toString(16).padStart(16, "0"), "hex").copy(buffer2, offset);
      offset += 8;
      Buffer.from(amountBuy.toString(16).padStart(16, "0"), "hex").copy(buffer2, offset);
      offset += 8;
      buffer2.writeUInt32BE(nonce, offset);
      offset += 4;
      buffer2.writeUInt32BE(timestamp, offset);
      return this.transport.send(240, 4, 3, 0, buffer2).then((response2) => {
        const r2 = response2.slice(1, 1 + 32).toString("hex");
        const s2 = response2.slice(1 + 32, 1 + 32 + 32).toString("hex");
        return {
          r: r2,
          s: s2
        };
      });
    }
    /**
     * sign a Stark transfer
     * @param path a path in BIP 32 format
     * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)
     * @param transferQuantization quantization used for the token to be transferred
     * @param targetPublicKey target Stark public key
     * @param sourceVault ID of the source vault
     * @param destinationVault ID of the destination vault
     * @param amountTransfer amount to transfer
     * @param nonce transaction nonce
     * @param timestamp transaction validity timestamp
     * @return the signature
     */
    starkSignTransfer(path, transferTokenAddress, transferQuantization, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp) {
      const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);
      const targetPublicKeyHex = hexBuffer(targetPublicKey);
      const paths = splitPath(path);
      const buffer2 = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4, 0);
      let offset = 0;
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      offset = 1 + 4 * paths.length;
      if (transferTokenAddressHex) {
        transferTokenAddressHex.copy(buffer2, offset);
      }
      offset += 20;
      Buffer.from(transferQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      offset += 32;
      targetPublicKeyHex.copy(buffer2, offset);
      offset += 32;
      buffer2.writeUInt32BE(sourceVault, offset);
      offset += 4;
      buffer2.writeUInt32BE(destinationVault, offset);
      offset += 4;
      Buffer.from(amountTransfer.toString(16).padStart(16, "0"), "hex").copy(buffer2, offset);
      offset += 8;
      buffer2.writeUInt32BE(nonce, offset);
      offset += 4;
      buffer2.writeUInt32BE(timestamp, offset);
      return this.transport.send(240, 4, 2, 0, buffer2).then((response2) => {
        const r2 = response2.slice(1, 1 + 32).toString("hex");
        const s2 = response2.slice(1 + 32, 1 + 32 + 32).toString("hex");
        return {
          r: r2,
          s: s2
        };
      });
    }
    /**
     * sign a Stark transfer or conditional transfer using the Starkex V2 protocol
     * @param path a path in BIP 32 format
     * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)
     * @param transferQuantizationType quantization type used for the token to be transferred
     * @option transferQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)
     * @option transferMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the token to be transferred
     * @param targetPublicKey target Stark public key
     * @param sourceVault ID of the source vault
     * @param destinationVault ID of the destination vault
     * @param amountTransfer amount to transfer
     * @param nonce transaction nonce
     * @param timestamp transaction validity timestamp
     * @option conditionalTransferAddress onchain address of the condition for a conditional transfer
     * @option conditionalTransferFact fact associated to the condition for a conditional transfer
     * @return the signature
     */
    starkSignTransfer_v2(path, transferTokenAddress, transferQuantizationType, transferQuantization, transferMintableBlobOrTokenId, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp, conditionalTransferAddress, conditionalTransferFact) {
      const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);
      const targetPublicKeyHex = hexBuffer(targetPublicKey);
      const conditionalTransferAddressHex = maybeHexBuffer(conditionalTransferAddress);
      if (!(transferQuantizationType in starkQuantizationTypeMap)) {
        throw new Error("eth.starkSignTransferv2 invalid quantization type=" + transferQuantizationType);
      }
      const paths = splitPath(path);
      const buffer2 = Buffer.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 32 + 4 + 4 + 8 + 4 + 4 + (conditionalTransferAddressHex ? 32 + 20 : 0), 0);
      let offset = 0;
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      offset = 1 + 4 * paths.length;
      buffer2[offset] = starkQuantizationTypeMap[transferQuantizationType];
      offset++;
      if (transferTokenAddressHex) {
        transferTokenAddressHex.copy(buffer2, offset);
      }
      offset += 20;
      if (transferQuantization) {
        Buffer.from(transferQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      if (transferMintableBlobOrTokenId) {
        Buffer.from(transferMintableBlobOrTokenId.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      targetPublicKeyHex.copy(buffer2, offset);
      offset += 32;
      buffer2.writeUInt32BE(sourceVault, offset);
      offset += 4;
      buffer2.writeUInt32BE(destinationVault, offset);
      offset += 4;
      Buffer.from(amountTransfer.toString(16).padStart(16, "0"), "hex").copy(buffer2, offset);
      offset += 8;
      buffer2.writeUInt32BE(nonce, offset);
      offset += 4;
      buffer2.writeUInt32BE(timestamp, offset);
      if (conditionalTransferAddressHex && conditionalTransferFact) {
        offset += 4;
        Buffer.from(conditionalTransferFact.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
        offset += 32;
        conditionalTransferAddressHex.copy(buffer2, offset);
      }
      return this.transport.send(240, 4, conditionalTransferAddressHex ? 5 : 4, 0, buffer2).then((response2) => {
        const r2 = response2.slice(1, 1 + 32).toString("hex");
        const s2 = response2.slice(1 + 32, 1 + 32 + 32).toString("hex");
        return {
          r: r2,
          s: s2
        };
      });
    }
    /**
     * provide quantization information before singing a deposit or withdrawal Stark powered contract call
     *
     * It shall be run following a provideERC20TokenInformation call for the given contract
     *
     * @param operationContract contract address of the token to be transferred (not present for ETH)
     * @param operationQuantization quantization used for the token to be transferred
     */
    starkProvideQuantum(operationContract, operationQuantization) {
      const operationContractHex = maybeHexBuffer(operationContract);
      const buffer2 = Buffer.alloc(20 + 32, 0);
      if (operationContractHex) {
        operationContractHex.copy(buffer2, 0);
      }
      Buffer.from(operationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, 20);
      return this.transport.send(240, 8, 0, 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27904) {
          return false;
        }
        throw e;
      });
    }
    /**
     * provide quantization information before singing a deposit or withdrawal Stark powered contract call using the Starkex V2 protocol
     *
     * It shall be run following a provideERC20TokenInformation call for the given contract
     *
     * @param operationContract contract address of the token to be transferred (not present for ETH)
     * @param operationQuantizationType quantization type of the token to be transferred
     * @option operationQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)
     * @option operationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) of the token to be transferred
     */
    starkProvideQuantum_v2(operationContract, operationQuantizationType, operationQuantization, operationMintableBlobOrTokenId) {
      const operationContractHex = maybeHexBuffer(operationContract);
      if (!(operationQuantizationType in starkQuantizationTypeMap)) {
        throw new Error("eth.starkProvideQuantumV2 invalid quantization type=" + operationQuantizationType);
      }
      const buffer2 = Buffer.alloc(20 + 32 + 32, 0);
      let offset = 0;
      if (operationContractHex) {
        operationContractHex.copy(buffer2, offset);
      }
      offset += 20;
      if (operationQuantization) {
        Buffer.from(operationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      offset += 32;
      if (operationMintableBlobOrTokenId) {
        Buffer.from(operationMintableBlobOrTokenId.toString(16).padStart(64, "0"), "hex").copy(buffer2, offset);
      }
      return this.transport.send(240, 8, starkQuantizationTypeMap[operationQuantizationType], 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27904) {
          return false;
        }
        throw e;
      });
    }
    /**
     * sign the given hash over the Stark curve
     * It is intended for speed of execution in case an unknown Stark model is pushed and should be avoided as much as possible.
     * @param path a path in BIP 32 format
     * @param hash hexadecimal hash to sign
     * @return the signature
     */
    starkUnsafeSign(path, hash2) {
      const hashHex = hexBuffer(hash2);
      const paths = splitPath(path);
      const buffer2 = Buffer.alloc(1 + paths.length * 4 + 32);
      let offset = 0;
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      offset = 1 + 4 * paths.length;
      hashHex.copy(buffer2, offset);
      return this.transport.send(240, 10, 0, 0, buffer2).then((response2) => {
        const r2 = response2.slice(1, 1 + 32).toString("hex");
        const s2 = response2.slice(1 + 32, 1 + 32 + 32).toString("hex");
        return {
          r: r2,
          s: s2
        };
      });
    }
    /**
     * get an Ethereum 2 BLS-12 381 public key for a given BIP 32 path.
     * @param path a path in BIP 32 format
     * @option boolDisplay optionally enable or not the display
     * @return an object with a publicKey
     * @example
     * eth.eth2GetPublicKey("12381/3600/0/0").then(o => o.publicKey)
     */
    eth2GetPublicKey(path, boolDisplay) {
      const paths = splitPath(path);
      const buffer2 = Buffer.alloc(1 + paths.length * 4);
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      return this.transport.send(224, 14, boolDisplay ? 1 : 0, 0, buffer2).then((response2) => {
        return {
          publicKey: response2.slice(0, -2).toString("hex")
        };
      });
    }
    /**
     * Set the index of a Withdrawal key used as withdrawal credentials in an ETH 2 deposit contract call signature
     *
     * It shall be run before the ETH 2 deposit transaction is signed. If not called, the index is set to 0
     *
     * @param withdrawalIndex index path in the EIP 2334 path m/12381/3600/withdrawalIndex/0
     * @return True if the method was executed successfully
     */
    eth2SetWithdrawalIndex(withdrawalIndex) {
      const buffer2 = Buffer.alloc(4, 0);
      buffer2.writeUInt32BE(withdrawalIndex, 0);
      return this.transport.send(224, 16, 0, 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27904) {
          return false;
        }
        throw e;
      });
    }
    /**
     * get a public encryption key on Curve25519 according to EIP 1024
     * @param path a path in BIP 32 format
     * @option boolDisplay optionally enable or not the display
     * @return an object with a publicKey
     * @example
     * eth.getEIP1024PublicEncryptionKey("44'/60'/0'/0/0").then(o => o.publicKey)
     */
    getEIP1024PublicEncryptionKey(path, boolDisplay) {
      const paths = splitPath(path);
      const buffer2 = Buffer.alloc(1 + paths.length * 4);
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      return this.transport.send(224, 24, boolDisplay ? 1 : 0, 0, buffer2).then((response2) => {
        return {
          publicKey: response2.slice(0, -2).toString("hex")
        };
      });
    }
    /**
     * get a shared secret on Curve25519 according to EIP 1024
     * @param path a path in BIP 32 format
     * @param remotePublicKeyHex remote Curve25519 public key
     * @option boolDisplay optionally enable or not the display
     * @return an object with a shared secret
     * @example
     * eth.getEIP1024SharedSecret("44'/60'/0'/0/0", "87020e80af6e07a6e4697f091eacadb9e7e6629cb7e5a8a371689a3ed53b3d64").then(o => o.sharedSecret)
     */
    getEIP1024SharedSecret(path, remotePublicKeyHex, boolDisplay) {
      const paths = splitPath(path);
      const remotePublicKey = hexBuffer(remotePublicKeyHex);
      const buffer2 = Buffer.alloc(1 + paths.length * 4 + 32);
      let offset = 0;
      buffer2[0] = paths.length;
      paths.forEach((element, index) => {
        buffer2.writeUInt32BE(element, 1 + 4 * index);
      });
      offset = 1 + 4 * paths.length;
      remotePublicKey.copy(buffer2, offset);
      return this.transport.send(224, 24, boolDisplay ? 1 : 0, 1, buffer2).then((response2) => {
        return {
          sharedSecret: response2.slice(0, -2).toString("hex")
        };
      });
    }
    /**
     * provides a trusted description of an ERC 20 token to associate a contract address with a ticker and number of decimals.
     *
     * @param data stringified buffer of ERC20 signature
     * @returns a boolean
     */
    provideERC20TokenInformation(data) {
      const buffer2 = Buffer.from(data, "hex");
      return this.transport.send(224, 10, 0, 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27904) {
          return false;
        }
        throw e;
      });
    }
    /**
     * provides the name of a trusted binding of a plugin with a contract address and a supported method selector. This plugin will be called to interpret contract data in the following transaction signing command.
     *
     * @param payload external plugin data
     * @option signature optionally signature for the plugin
     * @returns a boolean
     */
    setExternalPlugin(payload, signature2) {
      const payloadBuffer = Buffer.from(payload, "hex");
      const signatureBuffer = Buffer.from(signature2 !== null && signature2 !== void 0 ? signature2 : "", "hex");
      const buffer2 = Buffer.concat([payloadBuffer, signatureBuffer]);
      return this.transport.send(224, 18, 0, 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27264) {
          return false;
        } else if (e && e.statusCode === 27012) {
          return false;
        } else if (e && e.statusCode === 27904) {
          return false;
        }
        throw e;
      });
    }
    /**
     * provides the name of a trusted binding of a plugin with a contract address and a supported method selector. This plugin will be called to interpret contract data in the following transaction signing command.
     *
     * @param data stringified buffer of plugin signature
     * @returns a boolean
     */
    setPlugin(data) {
      const buffer2 = Buffer.from(data, "hex");
      return this.transport.send(224, 22, 0, 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27264) {
          return false;
        } else if (e && e.statusCode === 27012) {
          return false;
        } else if (e && e.statusCode === 27904) {
          return false;
        }
        throw e;
      });
    }
    /**
     *  provides a trusted description of an NFT to associate a contract address with a collectionName.
     *
     * @param data stringified buffer of the NFT description
     * @returns a boolean
     */
    provideNFTInformation(data) {
      const buffer2 = Buffer.from(data, "hex");
      return this.transport.send(224, 20, 0, 0, buffer2).then(() => true, (e) => {
        if (e && e.statusCode === 27904) {
          throw new EthAppNftNotSupported();
        }
        throw e;
      });
    }
    /**
     * provides a domain name (like ENS) to be displayed during transactions in place of the address it is associated to. It shall be run just before a transaction involving the associated address that would be displayed on the device.
     *
     * @param data an stringied buffer of some TLV encoded data to represent the domain
     * @returns a boolean
     */
    provideDomainName(data) {
      return __awaiter$1(this, void 0, void 0, function* () {
        let APDU_FIELDS;
        (function(APDU_FIELDS2) {
          APDU_FIELDS2[APDU_FIELDS2["CLA"] = 224] = "CLA";
          APDU_FIELDS2[APDU_FIELDS2["INS"] = 34] = "INS";
          APDU_FIELDS2[APDU_FIELDS2["P1_FIRST_CHUNK"] = 1] = "P1_FIRST_CHUNK";
          APDU_FIELDS2[APDU_FIELDS2["P1_FOLLOWING_CHUNK"] = 0] = "P1_FOLLOWING_CHUNK";
          APDU_FIELDS2[APDU_FIELDS2["P2"] = 0] = "P2";
        })(APDU_FIELDS || (APDU_FIELDS = {}));
        const buffer2 = Buffer.from(data, "hex");
        const payload = Buffer.concat([Buffer.from(intAsHexBytes(buffer2.length, 2), "hex"), buffer2]);
        const bufferChunks = new Array(Math.ceil(payload.length / 256)).fill(null).map((_, i2) => payload.slice(i2 * 255, (i2 + 1) * 255));
        for (const chunk of bufferChunks) {
          const isFirstChunk = chunk === bufferChunks[0];
          yield this.transport.send(APDU_FIELDS.CLA, APDU_FIELDS.INS, isFirstChunk ? APDU_FIELDS.P1_FIRST_CHUNK : APDU_FIELDS.P1_FOLLOWING_CHUNK, APDU_FIELDS.P2, chunk);
        }
        return true;
      });
    }
  }
  var WebSocketTransport$1 = {};
  const require$$0$3 = /* @__PURE__ */ getAugmentedNamespace(Transport$1);
  const require$$1$2 = /* @__PURE__ */ getAugmentedNamespace(libEs$1);
  const require$$2 = /* @__PURE__ */ getAugmentedNamespace(libEs);
  var browser$2;
  var hasRequiredBrowser$1;
  function requireBrowser$1() {
    if (hasRequiredBrowser$1) return browser$2;
    hasRequiredBrowser$1 = 1;
    browser$2 = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
    return browser$2;
  }
  var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod2) {
    return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
  };
  var _a;
  Object.defineProperty(WebSocketTransport$1, "__esModule", { value: true });
  const hw_transport_1 = __importDefault$1(require$$0$3);
  const errors_1$1 = require$$1$2;
  const logs_1 = require$$2;
  const WebSocket = commonjsGlobal.WebSocket || requireBrowser$1();
  class WebSocketTransport extends hw_transport_1.default {
    static open(url2) {
      return __awaiter(this, void 0, void 0, function* () {
        const exchangeMethods = yield new Promise((resolve2, reject) => {
          try {
            const socket = new WebSocket(url2);
            const exchangeMethods2 = {
              resolveExchange: (_b) => {
              },
              rejectExchange: (_e) => {
              },
              onDisconnect: () => {
              },
              close: () => socket.close(),
              send: (msg) => socket.send(msg)
            };
            socket.onopen = () => {
              socket.send("open");
            };
            socket.onerror = (e) => {
              exchangeMethods2.onDisconnect();
              reject(e);
            };
            socket.onclose = () => {
              exchangeMethods2.onDisconnect();
              reject(new errors_1$1.TransportError("OpenFailed", "OpenFailed"));
            };
            socket.onmessage = (e) => {
              if (typeof e.data !== "string")
                return;
              const data = JSON.parse(e.data);
              switch (data.type) {
                case "opened":
                  return resolve2(exchangeMethods2);
                case "error":
                  reject(new Error(data.error));
                  return exchangeMethods2.rejectExchange(new errors_1$1.TransportError(data.error, "WSError"));
                case "response":
                  return exchangeMethods2.resolveExchange(Buffer.from(data.data, "hex"));
              }
            };
          } catch (e) {
            reject(e);
          }
        });
        return new _a(exchangeMethods);
      });
    }
    constructor(hook) {
      super();
      this.hook = hook;
      hook.onDisconnect = () => {
        this.emit("disconnect");
        this.hook.rejectExchange(new errors_1$1.TransportError("WebSocket disconnected", "WSDisconnect"));
      };
    }
    exchange(apdu) {
      return __awaiter(this, void 0, void 0, function* () {
        const hex2 = apdu.toString("hex");
        (0, logs_1.log)("apdu", "=> " + hex2);
        const res = yield new Promise((resolve2, reject) => {
          this.hook.rejectExchange = (e) => reject(e);
          this.hook.resolveExchange = (b) => resolve2(b);
          this.hook.send(hex2);
        });
        (0, logs_1.log)("apdu", "<= " + res.toString("hex"));
        return res;
      });
    }
    setScrambleKey() {
    }
    close() {
      return __awaiter(this, void 0, void 0, function* () {
        this.hook.close();
        return new Promise((success) => {
          setTimeout(() => {
            success(void 0);
          }, 200);
        });
      });
    }
  }
  _a = WebSocketTransport;
  WebSocketTransport.isSupported = () => Promise.resolve(typeof WebSocket === "function");
  WebSocketTransport.list = () => Promise.resolve([]);
  WebSocketTransport.listen = (_observer) => ({
    unsubscribe: () => {
    }
  });
  WebSocketTransport.check = (url_1, ...args_1) => __awaiter(void 0, [url_1, ...args_1], void 0, function* (url2, timeout = 5e3) {
    return new Promise((resolve2, reject) => {
      const socket = new WebSocket(url2);
      let success = false;
      setTimeout(() => {
        socket.close();
      }, timeout);
      socket.onopen = () => {
        success = true;
        socket.close();
      };
      socket.onclose = () => {
        if (success)
          resolve2(void 0);
        else {
          reject(new errors_1$1.TransportError("failed to access WebSocketTransport(" + url2 + ")", "WebSocketTransportNotAccessible"));
        }
      };
      socket.onerror = () => {
        reject(new errors_1$1.TransportError("failed to access WebSocketTransport(" + url2 + "): error", "WebSocketTransportNotAccessible"));
      };
    });
  });
  var _default = WebSocketTransport$1.default = WebSocketTransport;
  var dist$5 = {};
  var personalSign$1 = {};
  var dist$4 = {};
  var constants$3 = {};
  var secp256k1$1 = {};
  var secp256k1 = {};
  var sha256 = {};
  var _md = {};
  var _assert$1 = {};
  Object.defineProperty(_assert$1, "__esModule", { value: true });
  _assert$1.output = _assert$1.exists = _assert$1.hash = _assert$1.bytes = _assert$1.bool = _assert$1.number = _assert$1.isBytes = void 0;
  function number$2(n) {
    if (!Number.isSafeInteger(n) || n < 0)
      throw new Error(`positive integer expected, not ${n}`);
  }
  _assert$1.number = number$2;
  function bool$1(b) {
    if (typeof b !== "boolean")
      throw new Error(`boolean expected, not ${b}`);
  }
  _assert$1.bool = bool$1;
  function isBytes$2(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
  }
  _assert$1.isBytes = isBytes$2;
  function bytes$3(b, ...lengths) {
    if (!isBytes$2(b))
      throw new Error("Uint8Array expected");
    if (lengths.length > 0 && !lengths.includes(b.length))
      throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
  }
  _assert$1.bytes = bytes$3;
  function hash(h) {
    if (typeof h !== "function" || typeof h.create !== "function")
      throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number$2(h.outputLen);
    number$2(h.blockLen);
  }
  _assert$1.hash = hash;
  function exists(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  _assert$1.exists = exists;
  function output(out, instance) {
    bytes$3(out);
    const min2 = instance.outputLen;
    if (out.length < min2) {
      throw new Error(`digestInto() expects output buffer of length at least ${min2}`);
    }
  }
  _assert$1.output = output;
  const assert$4 = { number: number$2, bool: bool$1, bytes: bytes$3, hash, exists, output };
  _assert$1.default = assert$4;
  var utils$9 = {};
  var crypto$2 = {};
  Object.defineProperty(crypto$2, "__esModule", { value: true });
  crypto$2.crypto = void 0;
  crypto$2.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  (function(exports2) {
    /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.randomBytes = exports2.wrapXOFConstructorWithOpts = exports2.wrapConstructorWithOpts = exports2.wrapConstructor = exports2.checkOpts = exports2.Hash = exports2.concatBytes = exports2.toBytes = exports2.utf8ToBytes = exports2.asyncLoop = exports2.nextTick = exports2.hexToBytes = exports2.bytesToHex = exports2.byteSwap32 = exports2.byteSwapIfBE = exports2.byteSwap = exports2.isLE = exports2.rotl = exports2.rotr = exports2.createView = exports2.u32 = exports2.u8 = exports2.isBytes = void 0;
    const crypto_1 = crypto$2;
    const _assert_js_12 = _assert$1;
    function isBytes2(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    exports2.isBytes = isBytes2;
    const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports2.u8 = u8;
    const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports2.u32 = u32;
    const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports2.createView = createView;
    const rotr = (word, shift) => word << 32 - shift | word >>> shift;
    exports2.rotr = rotr;
    const rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
    exports2.rotl = rotl;
    exports2.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    const byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    exports2.byteSwap = byteSwap;
    exports2.byteSwapIfBE = exports2.isLE ? (n) => n : (n) => (0, exports2.byteSwap)(n);
    function byteSwap32(arr) {
      for (let i2 = 0; i2 < arr.length; i2++) {
        arr[i2] = (0, exports2.byteSwap)(arr[i2]);
      }
    }
    exports2.byteSwap32 = byteSwap32;
    const hexes2 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i2) => i2.toString(16).padStart(2, "0"));
    function bytesToHex2(bytes2) {
      (0, _assert_js_12.bytes)(bytes2);
      let hex2 = "";
      for (let i2 = 0; i2 < bytes2.length; i2++) {
        hex2 += hexes2[bytes2[i2]];
      }
      return hex2;
    }
    exports2.bytesToHex = bytesToHex2;
    const asciis2 = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
    function asciiToBase162(char) {
      if (char >= asciis2._0 && char <= asciis2._9)
        return char - asciis2._0;
      if (char >= asciis2._A && char <= asciis2._F)
        return char - (asciis2._A - 10);
      if (char >= asciis2._a && char <= asciis2._f)
        return char - (asciis2._a - 10);
      return;
    }
    function hexToBytes2(hex2) {
      if (typeof hex2 !== "string")
        throw new Error("hex string expected, got " + typeof hex2);
      const hl = hex2.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + hl);
      const array2 = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase162(hex2.charCodeAt(hi));
        const n2 = asciiToBase162(hex2.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex2[hi] + hex2[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array2[ai] = n1 * 16 + n2;
      }
      return array2;
    }
    exports2.hexToBytes = hexToBytes2;
    const nextTick = () => __async(this, null, function* () {
    });
    exports2.nextTick = nextTick;
    function asyncLoop(iters, tick, cb) {
      return __async(this, null, function* () {
        let ts = Date.now();
        for (let i2 = 0; i2 < iters; i2++) {
          cb(i2);
          const diff2 = Date.now() - ts;
          if (diff2 >= 0 && diff2 < tick)
            continue;
          yield (0, exports2.nextTick)();
          ts += diff2;
        }
      });
    }
    exports2.asyncLoop = asyncLoop;
    function utf8ToBytes2(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports2.utf8ToBytes = utf8ToBytes2;
    function toBytes2(data) {
      if (typeof data === "string")
        data = utf8ToBytes2(data);
      (0, _assert_js_12.bytes)(data);
      return data;
    }
    exports2.toBytes = toBytes2;
    function concatBytes2(...arrays) {
      let sum = 0;
      for (let i2 = 0; i2 < arrays.length; i2++) {
        const a = arrays[i2];
        (0, _assert_js_12.bytes)(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i2 = 0, pad = 0; i2 < arrays.length; i2++) {
        const a = arrays[i2];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    exports2.concatBytes = concatBytes2;
    class Hash {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    }
    exports2.Hash = Hash;
    const toStr2 = {}.toString;
    function checkOpts(defaults2, opts) {
      if (opts !== void 0 && toStr2.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults2, opts);
      return merged;
    }
    exports2.checkOpts = checkOpts;
    function wrapConstructor(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    exports2.wrapConstructor = wrapConstructor;
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports2.wrapConstructorWithOpts = wrapConstructorWithOpts;
    function wrapXOFConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports2.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
    function randomBytes(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    exports2.randomBytes = randomBytes;
  })(utils$9);
  Object.defineProperty(_md, "__esModule", { value: true });
  _md.HashMD = _md.Maj = _md.Chi = void 0;
  const _assert_js_1$2 = _assert$1;
  const utils_js_1$a = utils$9;
  function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE);
    const _32n2 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n2 & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
  }
  const Chi = (a, b, c) => a & b ^ ~a & c;
  _md.Chi = Chi;
  const Maj = (a, b, c) => a & b ^ a & c ^ b & c;
  _md.Maj = Maj;
  class HashMD extends utils_js_1$a.Hash {
    constructor(blockLen, outputLen, padOffset, isLE) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.padOffset = padOffset;
      this.isLE = isLE;
      this.finished = false;
      this.length = 0;
      this.pos = 0;
      this.destroyed = false;
      this.buffer = new Uint8Array(blockLen);
      this.view = (0, utils_js_1$a.createView)(this.buffer);
    }
    update(data) {
      (0, _assert_js_1$2.exists)(this);
      const { view, buffer: buffer2, blockLen } = this;
      data = (0, utils_js_1$a.toBytes)(data);
      const len2 = data.length;
      for (let pos = 0; pos < len2; ) {
        const take = Math.min(blockLen - this.pos, len2 - pos);
        if (take === blockLen) {
          const dataView = (0, utils_js_1$a.createView)(data);
          for (; blockLen <= len2 - pos; pos += blockLen)
            this.process(dataView, pos);
          continue;
        }
        buffer2.set(data.subarray(pos, pos + take), this.pos);
        this.pos += take;
        pos += take;
        if (this.pos === blockLen) {
          this.process(view, 0);
          this.pos = 0;
        }
      }
      this.length += data.length;
      this.roundClean();
      return this;
    }
    digestInto(out) {
      (0, _assert_js_1$2.exists)(this);
      (0, _assert_js_1$2.output)(out, this);
      this.finished = true;
      const { buffer: buffer2, view, blockLen, isLE } = this;
      let { pos } = this;
      buffer2[pos++] = 128;
      this.buffer.subarray(pos).fill(0);
      if (this.padOffset > blockLen - pos) {
        this.process(view, 0);
        pos = 0;
      }
      for (let i2 = pos; i2 < blockLen; i2++)
        buffer2[i2] = 0;
      setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
      this.process(view, 0);
      const oview = (0, utils_js_1$a.createView)(out);
      const len2 = this.outputLen;
      if (len2 % 4)
        throw new Error("_sha2: outputLen should be aligned to 32bit");
      const outLen = len2 / 4;
      const state2 = this.get();
      if (outLen > state2.length)
        throw new Error("_sha2: outputLen bigger than state");
      for (let i2 = 0; i2 < outLen; i2++)
        oview.setUint32(4 * i2, state2[i2], isLE);
    }
    digest() {
      const { buffer: buffer2, outputLen } = this;
      this.digestInto(buffer2);
      const res = buffer2.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      to || (to = new this.constructor());
      to.set(...this.get());
      const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
      to.length = length;
      to.pos = pos;
      to.finished = finished;
      to.destroyed = destroyed;
      if (length % blockLen)
        to.buffer.set(buffer2);
      return to;
    }
  }
  _md.HashMD = HashMD;
  Object.defineProperty(sha256, "__esModule", { value: true });
  sha256.sha224 = sha256.sha256 = void 0;
  const _md_js_1 = _md;
  const utils_js_1$9 = utils$9;
  const SHA256_K = /* @__PURE__ */ new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  const SHA256_IV = /* @__PURE__ */ new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ]);
  const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
  class SHA256 extends _md_js_1.HashMD {
    constructor() {
      super(64, 32, 8, false);
      this.A = SHA256_IV[0] | 0;
      this.B = SHA256_IV[1] | 0;
      this.C = SHA256_IV[2] | 0;
      this.D = SHA256_IV[3] | 0;
      this.E = SHA256_IV[4] | 0;
      this.F = SHA256_IV[5] | 0;
      this.G = SHA256_IV[6] | 0;
      this.H = SHA256_IV[7] | 0;
    }
    get() {
      const { A, B, C, D, E, F, G, H } = this;
      return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
      this.E = E | 0;
      this.F = F | 0;
      this.G = G | 0;
      this.H = H | 0;
    }
    process(view, offset) {
      for (let i2 = 0; i2 < 16; i2++, offset += 4)
        SHA256_W[i2] = view.getUint32(offset, false);
      for (let i2 = 16; i2 < 64; i2++) {
        const W15 = SHA256_W[i2 - 15];
        const W2 = SHA256_W[i2 - 2];
        const s0 = (0, utils_js_1$9.rotr)(W15, 7) ^ (0, utils_js_1$9.rotr)(W15, 18) ^ W15 >>> 3;
        const s1 = (0, utils_js_1$9.rotr)(W2, 17) ^ (0, utils_js_1$9.rotr)(W2, 19) ^ W2 >>> 10;
        SHA256_W[i2] = s1 + SHA256_W[i2 - 7] + s0 + SHA256_W[i2 - 16] | 0;
      }
      let { A, B, C, D, E, F, G, H } = this;
      for (let i2 = 0; i2 < 64; i2++) {
        const sigma1 = (0, utils_js_1$9.rotr)(E, 6) ^ (0, utils_js_1$9.rotr)(E, 11) ^ (0, utils_js_1$9.rotr)(E, 25);
        const T1 = H + sigma1 + (0, _md_js_1.Chi)(E, F, G) + SHA256_K[i2] + SHA256_W[i2] | 0;
        const sigma0 = (0, utils_js_1$9.rotr)(A, 2) ^ (0, utils_js_1$9.rotr)(A, 13) ^ (0, utils_js_1$9.rotr)(A, 22);
        const T2 = sigma0 + (0, _md_js_1.Maj)(A, B, C) | 0;
        H = G;
        G = F;
        F = E;
        E = D + T1 | 0;
        D = C;
        C = B;
        B = A;
        A = T1 + T2 | 0;
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      E = E + this.E | 0;
      F = F + this.F | 0;
      G = G + this.G | 0;
      H = H + this.H | 0;
      this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
      SHA256_W.fill(0);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
      this.buffer.fill(0);
    }
  }
  class SHA224 extends SHA256 {
    constructor() {
      super();
      this.A = 3238371032 | 0;
      this.B = 914150663 | 0;
      this.C = 812702999 | 0;
      this.D = 4144912697 | 0;
      this.E = 4290775857 | 0;
      this.F = 1750603025 | 0;
      this.G = 1694076839 | 0;
      this.H = 3204075428 | 0;
      this.outputLen = 28;
    }
  }
  sha256.sha256 = (0, utils_js_1$9.wrapConstructor)(() => new SHA256());
  sha256.sha224 = (0, utils_js_1$9.wrapConstructor)(() => new SHA224());
  var _shortw_utils = {};
  var hmac = {};
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hmac = exports2.HMAC = void 0;
    const _assert_js_12 = _assert$1;
    const utils_js_12 = utils$9;
    class HMAC extends utils_js_12.Hash {
      constructor(hash2, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_12.hash)(hash2);
        const key2 = (0, utils_js_12.toBytes)(_key);
        this.iHash = hash2.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key2.length > blockLen ? hash2.create().update(key2).digest() : key2);
        for (let i2 = 0; i2 < pad.length; i2++)
          pad[i2] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash2.create();
        for (let i2 = 0; i2 < pad.length; i2++)
          pad[i2] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        (0, _assert_js_12.exists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, _assert_js_12.exists)(this);
        (0, _assert_js_12.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    }
    exports2.HMAC = HMAC;
    const hmac2 = (hash2, key2, message) => new HMAC(hash2, key2).update(message).digest();
    exports2.hmac = hmac2;
    exports2.hmac.create = (hash2, key2) => new HMAC(hash2, key2);
  })(hmac);
  var weierstrass = {};
  var curve = {};
  var modular = {};
  var utils$8 = {};
  Object.defineProperty(utils$8, "__esModule", { value: true });
  utils$8.bitMask = void 0;
  utils$8.isBytes = isBytes$1;
  utils$8.abytes = abytes$1;
  utils$8.bytesToHex = bytesToHex$1;
  utils$8.numberToHexUnpadded = numberToHexUnpadded;
  utils$8.hexToNumber = hexToNumber$1;
  utils$8.hexToBytes = hexToBytes$1;
  utils$8.bytesToNumberBE = bytesToNumberBE;
  utils$8.bytesToNumberLE = bytesToNumberLE;
  utils$8.numberToBytesBE = numberToBytesBE;
  utils$8.numberToBytesLE = numberToBytesLE;
  utils$8.numberToVarBytesBE = numberToVarBytesBE;
  utils$8.ensureBytes = ensureBytes;
  utils$8.concatBytes = concatBytes$1;
  utils$8.equalBytes = equalBytes;
  utils$8.utf8ToBytes = utf8ToBytes$1;
  utils$8.bitLen = bitLen;
  utils$8.bitGet = bitGet;
  utils$8.bitSet = bitSet;
  utils$8.createHmacDrbg = createHmacDrbg;
  utils$8.validateObject = validateObject;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const _0n$4 = /* @__PURE__ */ BigInt(0);
  const _1n$4 = /* @__PURE__ */ BigInt(1);
  const _2n$3 = /* @__PURE__ */ BigInt(2);
  function isBytes$1(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
  }
  function abytes$1(item) {
    if (!isBytes$1(item))
      throw new Error("Uint8Array expected");
  }
  const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i2) => i2.toString(16).padStart(2, "0"));
  function bytesToHex$1(bytes2) {
    abytes$1(bytes2);
    let hex2 = "";
    for (let i2 = 0; i2 < bytes2.length; i2++) {
      hex2 += hexes[bytes2[i2]];
    }
    return hex2;
  }
  function numberToHexUnpadded(num) {
    const hex2 = num.toString(16);
    return hex2.length & 1 ? `0${hex2}` : hex2;
  }
  function hexToNumber$1(hex2) {
    if (typeof hex2 !== "string")
      throw new Error("hex string expected, got " + typeof hex2);
    return BigInt(hex2 === "" ? "0" : `0x${hex2}`);
  }
  const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
  function asciiToBase16(char) {
    if (char >= asciis._0 && char <= asciis._9)
      return char - asciis._0;
    if (char >= asciis._A && char <= asciis._F)
      return char - (asciis._A - 10);
    if (char >= asciis._a && char <= asciis._f)
      return char - (asciis._a - 10);
    return;
  }
  function hexToBytes$1(hex2) {
    if (typeof hex2 !== "string")
      throw new Error("hex string expected, got " + typeof hex2);
    const hl = hex2.length;
    const al = hl / 2;
    if (hl % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + hl);
    const array2 = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
      const n1 = asciiToBase16(hex2.charCodeAt(hi));
      const n2 = asciiToBase16(hex2.charCodeAt(hi + 1));
      if (n1 === void 0 || n2 === void 0) {
        const char = hex2[hi] + hex2[hi + 1];
        throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
      }
      array2[ai] = n1 * 16 + n2;
    }
    return array2;
  }
  function bytesToNumberBE(bytes2) {
    return hexToNumber$1(bytesToHex$1(bytes2));
  }
  function bytesToNumberLE(bytes2) {
    abytes$1(bytes2);
    return hexToNumber$1(bytesToHex$1(Uint8Array.from(bytes2).reverse()));
  }
  function numberToBytesBE(n, len2) {
    return hexToBytes$1(n.toString(16).padStart(len2 * 2, "0"));
  }
  function numberToBytesLE(n, len2) {
    return numberToBytesBE(n, len2).reverse();
  }
  function numberToVarBytesBE(n) {
    return hexToBytes$1(numberToHexUnpadded(n));
  }
  function ensureBytes(title, hex2, expectedLength) {
    let res;
    if (typeof hex2 === "string") {
      try {
        res = hexToBytes$1(hex2);
      } catch (e) {
        throw new Error(`${title} must be valid hex string, got "${hex2}". Cause: ${e}`);
      }
    } else if (isBytes$1(hex2)) {
      res = Uint8Array.from(hex2);
    } else {
      throw new Error(`${title} must be hex string or Uint8Array`);
    }
    const len2 = res.length;
    if (typeof expectedLength === "number" && len2 !== expectedLength)
      throw new Error(`${title} expected ${expectedLength} bytes, got ${len2}`);
    return res;
  }
  function concatBytes$1(...arrays) {
    let sum = 0;
    for (let i2 = 0; i2 < arrays.length; i2++) {
      const a = arrays[i2];
      abytes$1(a);
      sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i2 = 0, pad = 0; i2 < arrays.length; i2++) {
      const a = arrays[i2];
      res.set(a, pad);
      pad += a.length;
    }
    return res;
  }
  function equalBytes(a, b) {
    if (a.length !== b.length)
      return false;
    let diff2 = 0;
    for (let i2 = 0; i2 < a.length; i2++)
      diff2 |= a[i2] ^ b[i2];
    return diff2 === 0;
  }
  function utf8ToBytes$1(str) {
    if (typeof str !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str));
  }
  function bitLen(n) {
    let len2;
    for (len2 = 0; n > _0n$4; n >>= _1n$4, len2 += 1)
      ;
    return len2;
  }
  function bitGet(n, pos) {
    return n >> BigInt(pos) & _1n$4;
  }
  function bitSet(n, pos, value) {
    return n | (value ? _1n$4 : _0n$4) << BigInt(pos);
  }
  const bitMask = (n) => (_2n$3 << BigInt(n - 1)) - _1n$4;
  utils$8.bitMask = bitMask;
  const u8n = (data) => new Uint8Array(data);
  const u8fr = (arr) => Uint8Array.from(arr);
  function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== "number" || hashLen < 2)
      throw new Error("hashLen must be a number");
    if (typeof qByteLen !== "number" || qByteLen < 2)
      throw new Error("qByteLen must be a number");
    if (typeof hmacFn !== "function")
      throw new Error("hmacFn must be a function");
    let v = u8n(hashLen);
    let k = u8n(hashLen);
    let i2 = 0;
    const reset = () => {
      v.fill(1);
      k.fill(0);
      i2 = 0;
    };
    const h = (...b) => hmacFn(k, v, ...b);
    const reseed = (seed = u8n()) => {
      k = h(u8fr([0]), seed);
      v = h();
      if (seed.length === 0)
        return;
      k = h(u8fr([1]), seed);
      v = h();
    };
    const gen2 = () => {
      if (i2++ >= 1e3)
        throw new Error("drbg: tried 1000 values");
      let len2 = 0;
      const out = [];
      while (len2 < qByteLen) {
        v = h();
        const sl = v.slice();
        out.push(sl);
        len2 += v.length;
      }
      return concatBytes$1(...out);
    };
    const genUntil = (seed, pred) => {
      reset();
      reseed(seed);
      let res = void 0;
      while (!(res = pred(gen2())))
        reseed();
      reset();
      return res;
    };
    return genUntil;
  }
  const validatorFns = {
    bigint: (val) => typeof val === "bigint",
    function: (val) => typeof val === "function",
    boolean: (val) => typeof val === "boolean",
    string: (val) => typeof val === "string",
    stringOrUint8Array: (val) => typeof val === "string" || isBytes$1(val),
    isSafeInteger: (val) => Number.isSafeInteger(val),
    array: (val) => Array.isArray(val),
    field: (val, object) => object.Fp.isValid(val),
    hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
  };
  function validateObject(object, validators2, optValidators = {}) {
    const checkField = (fieldName, type2, isOptional) => {
      const checkVal = validatorFns[type2];
      if (typeof checkVal !== "function")
        throw new Error(`Invalid validator "${type2}", expected function`);
      const val = object[fieldName];
      if (isOptional && val === void 0)
        return;
      if (!checkVal(val, object)) {
        throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type2}`);
      }
    };
    for (const [fieldName, type2] of Object.entries(validators2))
      checkField(fieldName, type2, false);
    for (const [fieldName, type2] of Object.entries(optValidators))
      checkField(fieldName, type2, true);
    return object;
  }
  Object.defineProperty(modular, "__esModule", { value: true });
  modular.isNegativeLE = void 0;
  modular.mod = mod;
  modular.pow = pow;
  modular.pow2 = pow2;
  modular.invert = invert;
  modular.tonelliShanks = tonelliShanks;
  modular.FpSqrt = FpSqrt;
  modular.validateField = validateField;
  modular.FpPow = FpPow;
  modular.FpInvertBatch = FpInvertBatch;
  modular.FpDiv = FpDiv;
  modular.FpIsSquare = FpIsSquare;
  modular.nLength = nLength;
  modular.Field = Field;
  modular.FpSqrtOdd = FpSqrtOdd;
  modular.FpSqrtEven = FpSqrtEven;
  modular.hashToPrivateScalar = hashToPrivateScalar;
  modular.getFieldBytesLength = getFieldBytesLength;
  modular.getMinHashLength = getMinHashLength;
  modular.mapHashToField = mapHashToField;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const utils_js_1$8 = utils$8;
  const _0n$3 = BigInt(0), _1n$3 = BigInt(1), _2n$2 = BigInt(2), _3n = BigInt(3);
  const _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
  BigInt(9);
  BigInt(16);
  function mod(a, b) {
    const result = a % b;
    return result >= _0n$3 ? result : b + result;
  }
  function pow(num, power, modulo) {
    if (modulo <= _0n$3 || power < _0n$3)
      throw new Error("Expected power/modulo > 0");
    if (modulo === _1n$3)
      return _0n$3;
    let res = _1n$3;
    while (power > _0n$3) {
      if (power & _1n$3)
        res = res * num % modulo;
      num = num * num % modulo;
      power >>= _1n$3;
    }
    return res;
  }
  function pow2(x, power, modulo) {
    let res = x;
    while (power-- > _0n$3) {
      res *= res;
      res %= modulo;
    }
    return res;
  }
  function invert(number2, modulo) {
    if (number2 === _0n$3 || modulo <= _0n$3) {
      throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
    }
    let a = mod(number2, modulo);
    let b = modulo;
    let x = _0n$3, u = _1n$3;
    while (a !== _0n$3) {
      const q = b / a;
      const r2 = b % a;
      const m = x - u * q;
      b = a, a = r2, x = u, u = m;
    }
    const gcd = b;
    if (gcd !== _1n$3)
      throw new Error("invert: does not exist");
    return mod(x, modulo);
  }
  function tonelliShanks(P) {
    const legendreC = (P - _1n$3) / _2n$2;
    let Q, S, Z;
    for (Q = P - _1n$3, S = 0; Q % _2n$2 === _0n$3; Q /= _2n$2, S++)
      ;
    for (Z = _2n$2; Z < P && pow(Z, legendreC, P) !== P - _1n$3; Z++)
      ;
    if (S === 1) {
      const p1div4 = (P + _1n$3) / _4n;
      return function tonelliFast(Fp, n) {
        const root = Fp.pow(n, p1div4);
        if (!Fp.eql(Fp.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    const Q1div2 = (Q + _1n$3) / _2n$2;
    return function tonelliSlow(Fp, n) {
      if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
        throw new Error("Cannot find square root");
      let r2 = S;
      let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q);
      let x = Fp.pow(n, Q1div2);
      let b = Fp.pow(n, Q);
      while (!Fp.eql(b, Fp.ONE)) {
        if (Fp.eql(b, Fp.ZERO))
          return Fp.ZERO;
        let m = 1;
        for (let t2 = Fp.sqr(b); m < r2; m++) {
          if (Fp.eql(t2, Fp.ONE))
            break;
          t2 = Fp.sqr(t2);
        }
        const ge = Fp.pow(g, _1n$3 << BigInt(r2 - m - 1));
        g = Fp.sqr(ge);
        x = Fp.mul(x, ge);
        b = Fp.mul(b, g);
        r2 = m;
      }
      return x;
    };
  }
  function FpSqrt(P) {
    if (P % _4n === _3n) {
      const p1div4 = (P + _1n$3) / _4n;
      return function sqrt3mod4(Fp, n) {
        const root = Fp.pow(n, p1div4);
        if (!Fp.eql(Fp.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _8n === _5n) {
      const c1 = (P - _5n) / _8n;
      return function sqrt5mod8(Fp, n) {
        const n2 = Fp.mul(n, _2n$2);
        const v = Fp.pow(n2, c1);
        const nv = Fp.mul(n, v);
        const i2 = Fp.mul(Fp.mul(nv, _2n$2), v);
        const root = Fp.mul(nv, Fp.sub(i2, Fp.ONE));
        if (!Fp.eql(Fp.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    return tonelliShanks(P);
  }
  const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n$3) === _1n$3;
  modular.isNegativeLE = isNegativeLE;
  const FIELD_FIELDS = [
    "create",
    "isValid",
    "is0",
    "neg",
    "inv",
    "sqrt",
    "sqr",
    "eql",
    "add",
    "sub",
    "mul",
    "pow",
    "div",
    "addN",
    "subN",
    "mulN",
    "sqrN"
  ];
  function validateField(field) {
    const initial = {
      ORDER: "bigint",
      MASK: "bigint",
      BYTES: "isSafeInteger",
      BITS: "isSafeInteger"
    };
    const opts = FIELD_FIELDS.reduce((map, val) => {
      map[val] = "function";
      return map;
    }, initial);
    return (0, utils_js_1$8.validateObject)(field, opts);
  }
  function FpPow(f2, num, power) {
    if (power < _0n$3)
      throw new Error("Expected power > 0");
    if (power === _0n$3)
      return f2.ONE;
    if (power === _1n$3)
      return num;
    let p = f2.ONE;
    let d = num;
    while (power > _0n$3) {
      if (power & _1n$3)
        p = f2.mul(p, d);
      d = f2.sqr(d);
      power >>= _1n$3;
    }
    return p;
  }
  function FpInvertBatch(f2, nums) {
    const tmp = new Array(nums.length);
    const lastMultiplied = nums.reduce((acc, num, i2) => {
      if (f2.is0(num))
        return acc;
      tmp[i2] = acc;
      return f2.mul(acc, num);
    }, f2.ONE);
    const inverted = f2.inv(lastMultiplied);
    nums.reduceRight((acc, num, i2) => {
      if (f2.is0(num))
        return acc;
      tmp[i2] = f2.mul(acc, tmp[i2]);
      return f2.mul(acc, num);
    }, inverted);
    return tmp;
  }
  function FpDiv(f2, lhs, rhs) {
    return f2.mul(lhs, typeof rhs === "bigint" ? invert(rhs, f2.ORDER) : f2.inv(rhs));
  }
  function FpIsSquare(f2) {
    const legendreConst = (f2.ORDER - _1n$3) / _2n$2;
    return (x) => {
      const p = f2.pow(x, legendreConst);
      return f2.eql(p, f2.ZERO) || f2.eql(p, f2.ONE);
    };
  }
  function nLength(n, nBitLength) {
    const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
  }
  function Field(ORDER, bitLen2, isLE = false, redef = {}) {
    if (ORDER <= _0n$3)
      throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
    if (BYTES > 2048)
      throw new Error("Field lengths over 2048 bytes are not supported");
    const sqrtP = FpSqrt(ORDER);
    const f2 = Object.freeze({
      ORDER,
      BITS,
      BYTES,
      MASK: (0, utils_js_1$8.bitMask)(BITS),
      ZERO: _0n$3,
      ONE: _1n$3,
      create: (num) => mod(num, ORDER),
      isValid: (num) => {
        if (typeof num !== "bigint")
          throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
        return _0n$3 <= num && num < ORDER;
      },
      is0: (num) => num === _0n$3,
      isOdd: (num) => (num & _1n$3) === _1n$3,
      neg: (num) => mod(-num, ORDER),
      eql: (lhs, rhs) => lhs === rhs,
      sqr: (num) => mod(num * num, ORDER),
      add: (lhs, rhs) => mod(lhs + rhs, ORDER),
      sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
      mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
      pow: (num, power) => FpPow(f2, num, power),
      div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
      // Same as above, but doesn't normalize
      sqrN: (num) => num * num,
      addN: (lhs, rhs) => lhs + rhs,
      subN: (lhs, rhs) => lhs - rhs,
      mulN: (lhs, rhs) => lhs * rhs,
      inv: (num) => invert(num, ORDER),
      sqrt: redef.sqrt || ((n) => sqrtP(f2, n)),
      invertBatch: (lst) => FpInvertBatch(f2, lst),
      // TODO: do we really need constant cmov?
      // We don't have const-time bigints anyway, so probably will be not very useful
      cmov: (a, b, c) => c ? b : a,
      toBytes: (num) => isLE ? (0, utils_js_1$8.numberToBytesLE)(num, BYTES) : (0, utils_js_1$8.numberToBytesBE)(num, BYTES),
      fromBytes: (bytes2) => {
        if (bytes2.length !== BYTES)
          throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes2.length}`);
        return isLE ? (0, utils_js_1$8.bytesToNumberLE)(bytes2) : (0, utils_js_1$8.bytesToNumberBE)(bytes2);
      }
    });
    return Object.freeze(f2);
  }
  function FpSqrtOdd(Fp, elm) {
    if (!Fp.isOdd)
      throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? root : Fp.neg(root);
  }
  function FpSqrtEven(Fp, elm) {
    if (!Fp.isOdd)
      throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? Fp.neg(root) : root;
  }
  function hashToPrivateScalar(hash2, groupOrder, isLE = false) {
    hash2 = (0, utils_js_1$8.ensureBytes)("privateHash", hash2);
    const hashLen = hash2.length;
    const minLen = nLength(groupOrder).nByteLength + 8;
    if (minLen < 24 || hashLen < minLen || hashLen > 1024)
      throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
    const num = isLE ? (0, utils_js_1$8.bytesToNumberLE)(hash2) : (0, utils_js_1$8.bytesToNumberBE)(hash2);
    return mod(num, groupOrder - _1n$3) + _1n$3;
  }
  function getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== "bigint")
      throw new Error("field order must be bigint");
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
  }
  function getMinHashLength(fieldOrder) {
    const length = getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
  }
  function mapHashToField(key2, fieldOrder, isLE = false) {
    const len2 = key2.length;
    const fieldLen = getFieldBytesLength(fieldOrder);
    const minLen = getMinHashLength(fieldOrder);
    if (len2 < 16 || len2 < minLen || len2 > 1024)
      throw new Error(`expected ${minLen}-1024 bytes of input, got ${len2}`);
    const num = isLE ? (0, utils_js_1$8.bytesToNumberBE)(key2) : (0, utils_js_1$8.bytesToNumberLE)(key2);
    const reduced = mod(num, fieldOrder - _1n$3) + _1n$3;
    return isLE ? (0, utils_js_1$8.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1$8.numberToBytesBE)(reduced, fieldLen);
  }
  Object.defineProperty(curve, "__esModule", { value: true });
  curve.wNAF = wNAF;
  curve.validateBasic = validateBasic;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const modular_js_1$1 = modular;
  const utils_js_1$7 = utils$8;
  const _0n$2 = BigInt(0);
  const _1n$2 = BigInt(1);
  function wNAF(c, bits) {
    const constTimeNegate = (condition, item) => {
      const neg = item.negate();
      return condition ? neg : item;
    };
    const opts = (W) => {
      const windows = Math.ceil(bits / W) + 1;
      const windowSize = __pow(2, W - 1);
      return { windows, windowSize };
    };
    return {
      constTimeNegate,
      // non-const time multiplication ladder
      unsafeLadder(elm, n) {
        let p = c.ZERO;
        let d = elm;
        while (n > _0n$2) {
          if (n & _1n$2)
            p = p.add(d);
          d = d.double();
          n >>= _1n$2;
        }
        return p;
      },
      /**
       * Creates a wNAF precomputation window. Used for caching.
       * Default window size is set by `utils.precompute()` and is equal to 8.
       * Number of precomputed points depends on the curve size:
       * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
       * - 𝑊 is the window size
       * - 𝑛 is the bitlength of the curve order.
       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
       * @returns precomputed point tables flattened to a single array
       */
      precomputeWindow(elm, W) {
        const { windows, windowSize } = opts(W);
        const points = [];
        let p = elm;
        let base2 = p;
        for (let window2 = 0; window2 < windows; window2++) {
          base2 = p;
          points.push(base2);
          for (let i2 = 1; i2 < windowSize; i2++) {
            base2 = base2.add(p);
            points.push(base2);
          }
          p = base2.double();
        }
        return points;
      },
      /**
       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
       * @param W window size
       * @param precomputes precomputed tables
       * @param n scalar (we don't check here, but should be less than curve order)
       * @returns real and fake (for const-time) points
       */
      wNAF(W, precomputes, n) {
        const { windows, windowSize } = opts(W);
        let p = c.ZERO;
        let f2 = c.BASE;
        const mask2 = BigInt(__pow(2, W) - 1);
        const maxNumber = __pow(2, W);
        const shiftBy = BigInt(W);
        for (let window2 = 0; window2 < windows; window2++) {
          const offset = window2 * windowSize;
          let wbits = Number(n & mask2);
          n >>= shiftBy;
          if (wbits > windowSize) {
            wbits -= maxNumber;
            n += _1n$2;
          }
          const offset1 = offset;
          const offset2 = offset + Math.abs(wbits) - 1;
          const cond1 = window2 % 2 !== 0;
          const cond2 = wbits < 0;
          if (wbits === 0) {
            f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
          } else {
            p = p.add(constTimeNegate(cond2, precomputes[offset2]));
          }
        }
        return { p, f: f2 };
      },
      wNAFCached(P, precomputesMap, n, transform) {
        const W = P._WINDOW_SIZE || 1;
        let comp = precomputesMap.get(P);
        if (!comp) {
          comp = this.precomputeWindow(P, W);
          if (W !== 1) {
            precomputesMap.set(P, transform(comp));
          }
        }
        return this.wNAF(W, comp, n);
      }
    };
  }
  function validateBasic(curve2) {
    (0, modular_js_1$1.validateField)(curve2.Fp);
    (0, utils_js_1$7.validateObject)(curve2, {
      n: "bigint",
      h: "bigint",
      Gx: "field",
      Gy: "field"
    }, {
      nBitLength: "isSafeInteger",
      nByteLength: "isSafeInteger"
    });
    return Object.freeze(__spreadValues(__spreadValues(__spreadValues({}, (0, modular_js_1$1.nLength)(curve2.n, curve2.nBitLength)), curve2), { p: curve2.Fp.ORDER }));
  }
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DER = void 0;
    exports2.weierstrassPoints = weierstrassPoints;
    exports2.weierstrass = weierstrass2;
    exports2.SWUFpSqrtRatio = SWUFpSqrtRatio;
    exports2.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const curve_js_1 = curve;
    const mod2 = modular;
    const ut = utils$8;
    const utils_js_12 = utils$8;
    function validatePointOpts(curve2) {
      const opts = (0, curve_js_1.validateBasic)(curve2);
      ut.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp, a } = opts;
      if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze(__spreadValues({}, opts));
    }
    const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
    exports2.DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
        constructor(m = "") {
          super(m);
        }
      },
      _parseInt(data) {
        const { Err: E } = exports2.DER;
        if (data.length < 2 || data[0] !== 2)
          throw new E("Invalid signature integer tag");
        const len2 = data[1];
        const res = data.subarray(2, len2 + 2);
        if (!len2 || res.length !== len2)
          throw new E("Invalid signature integer: wrong length");
        if (res[0] & 128)
          throw new E("Invalid signature integer: negative");
        if (res[0] === 0 && !(res[1] & 128))
          throw new E("Invalid signature integer: unnecessary leading zero");
        return { d: b2n(res), l: data.subarray(len2 + 2) };
      },
      toSig(hex2) {
        const { Err: E } = exports2.DER;
        const data = typeof hex2 === "string" ? h2b(hex2) : hex2;
        ut.abytes(data);
        let l = data.length;
        if (l < 2 || data[0] != 48)
          throw new E("Invalid signature tag");
        if (data[1] !== l - 2)
          throw new E("Invalid signature: incorrect length");
        const { d: r2, l: sBytes } = exports2.DER._parseInt(data.subarray(2));
        const { d: s2, l: rBytesLeft } = exports2.DER._parseInt(sBytes);
        if (rBytesLeft.length)
          throw new E("Invalid signature: left bytes after parsing");
        return { r: r2, s: s2 };
      },
      hexFromSig(sig) {
        const slice = (s3) => Number.parseInt(s3[0], 16) & 8 ? "00" + s3 : s3;
        const h = (num) => {
          const hex2 = num.toString(16);
          return hex2.length & 1 ? `0${hex2}` : hex2;
        };
        const s2 = slice(h(sig.s));
        const r2 = slice(h(sig.r));
        const shl = s2.length / 2;
        const rhl = r2.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r2}02${sl}${s2}`;
      }
    };
    const _0n2 = BigInt(0), _1n2 = BigInt(1), _2n2 = BigInt(2), _3n2 = BigInt(3), _4n2 = BigInt(4);
    function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp } = CURVE;
      const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return ut.concatBytes(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes2) => {
        const tail = bytes2.subarray(1);
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x);
        const x3 = Fp.mul(x2, x);
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);
      }
      if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num) {
        return typeof num === "bigint" && _0n2 < num && num < CURVE.n;
      }
      function assertGE(num) {
        if (!isWithinCurveOrder(num))
          throw new Error("Expected valid bigint: 0 < bigint < curve.n");
      }
      function normPrivateKeyToScalar(key2) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key2 !== "bigint") {
          if (ut.isBytes(key2))
            key2 = ut.bytesToHex(key2);
          if (typeof key2 !== "string" || !lengths.includes(key2.length))
            throw new Error("Invalid key");
          key2 = key2.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
          num = typeof key2 === "bigint" ? key2 : ut.bytesToNumberBE((0, utils_js_12.ensureBytes)("private key", key2, nByteLength));
        } catch (error2) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key2}`);
        }
        if (wrapPrivateKey)
          num = mod2.mod(num, n);
        assertGE(num);
        return num;
      }
      const pointPrecomputes = /* @__PURE__ */ new Map();
      function assertPrjPoint(other) {
        if (!(other instanceof Point2))
          throw new Error("ProjectivePoint expected");
      }
      class Point2 {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp.isValid(pz))
            throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point2)
            throw new Error("projective point not allowed");
          const is0 = (i2) => Fp.eql(i2, Fp.ZERO);
          if (is0(x) && is0(y))
            return Point2.ZERO;
          return new Point2(x, y, Fp.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp.invertBatch(points.map((p) => p.pz));
          return points.map((p, i2) => p.toAffine(toInv[i2])).map(Point2.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex2) {
          const P = Point2.fromAffine(fromBytes((0, utils_js_12.ensureBytes)("pointHex", hex2)));
          P.assertValidity();
          return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          if (this.is0()) {
            if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
              return;
            throw new Error("bad point: ZERO");
          }
          const { x, y } = this.toAffine();
          if (!Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("bad point: x or y not FE");
          const left = Fp.sqr(y);
          const right = weierstrassEquation(x);
          if (!Fp.eql(left, right))
            throw new Error("bad point: equation left != right");
          if (!this.isTorsionFree())
            throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp.isOdd)
            return !Fp.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
          const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point2(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b } = CURVE;
          const b3 = Fp.mul(b, _3n2);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          let t0 = Fp.mul(X1, X1);
          let t1 = Fp.mul(Y1, Y1);
          let t2 = Fp.mul(Z1, Z1);
          let t3 = Fp.mul(X1, Y1);
          t3 = Fp.add(t3, t3);
          Z3 = Fp.mul(X1, Z1);
          Z3 = Fp.add(Z3, Z3);
          X3 = Fp.mul(a, Z3);
          Y3 = Fp.mul(b3, t2);
          Y3 = Fp.add(X3, Y3);
          X3 = Fp.sub(t1, Y3);
          Y3 = Fp.add(t1, Y3);
          Y3 = Fp.mul(X3, Y3);
          X3 = Fp.mul(t3, X3);
          Z3 = Fp.mul(b3, Z3);
          t2 = Fp.mul(a, t2);
          t3 = Fp.sub(t0, t2);
          t3 = Fp.mul(a, t3);
          t3 = Fp.add(t3, Z3);
          Z3 = Fp.add(t0, t0);
          t0 = Fp.add(Z3, t0);
          t0 = Fp.add(t0, t2);
          t0 = Fp.mul(t0, t3);
          Y3 = Fp.add(Y3, t0);
          t2 = Fp.mul(Y1, Z1);
          t2 = Fp.add(t2, t2);
          t0 = Fp.mul(t2, t3);
          X3 = Fp.sub(X3, t0);
          Z3 = Fp.mul(t2, t1);
          Z3 = Fp.add(Z3, Z3);
          Z3 = Fp.add(Z3, Z3);
          return new Point2(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          const a = CURVE.a;
          const b3 = Fp.mul(CURVE.b, _3n2);
          let t0 = Fp.mul(X1, X2);
          let t1 = Fp.mul(Y1, Y2);
          let t2 = Fp.mul(Z1, Z2);
          let t3 = Fp.add(X1, Y1);
          let t4 = Fp.add(X2, Y2);
          t3 = Fp.mul(t3, t4);
          t4 = Fp.add(t0, t1);
          t3 = Fp.sub(t3, t4);
          t4 = Fp.add(X1, Z1);
          let t5 = Fp.add(X2, Z2);
          t4 = Fp.mul(t4, t5);
          t5 = Fp.add(t0, t2);
          t4 = Fp.sub(t4, t5);
          t5 = Fp.add(Y1, Z1);
          X3 = Fp.add(Y2, Z2);
          t5 = Fp.mul(t5, X3);
          X3 = Fp.add(t1, t2);
          t5 = Fp.sub(t5, X3);
          Z3 = Fp.mul(a, t4);
          X3 = Fp.mul(b3, t2);
          Z3 = Fp.add(X3, Z3);
          X3 = Fp.sub(t1, Z3);
          Z3 = Fp.add(t1, Z3);
          Y3 = Fp.mul(X3, Z3);
          t1 = Fp.add(t0, t0);
          t1 = Fp.add(t1, t0);
          t2 = Fp.mul(a, t2);
          t4 = Fp.mul(b3, t4);
          t1 = Fp.add(t1, t2);
          t2 = Fp.sub(t0, t2);
          t2 = Fp.mul(a, t2);
          t4 = Fp.add(t4, t2);
          t0 = Fp.mul(t1, t4);
          Y3 = Fp.add(Y3, t0);
          t0 = Fp.mul(t5, t4);
          X3 = Fp.mul(t3, X3);
          X3 = Fp.sub(X3, t0);
          t0 = Fp.mul(t3, t1);
          Z3 = Fp.mul(t5, Z3);
          Z3 = Fp.add(Z3, t0);
          return new Point2(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point2.ZERO);
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
            const toInv = Fp.invertBatch(comp.map((p) => p.pz));
            return comp.map((p, i2) => p.toAffine(toInv[i2])).map(Point2.fromAffine);
          });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(n) {
          const I = Point2.ZERO;
          if (n === _0n2)
            return I;
          assertGE(n);
          if (n === _1n2)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, n);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let k1p = I;
          let k2p = I;
          let d = this;
          while (k1 > _0n2 || k2 > _0n2) {
            if (k1 & _1n2)
              k1p = k1p.add(d);
            if (k2 & _1n2)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n2;
            k2 >>= _1n2;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          assertGE(scalar);
          let n = scalar;
          let point, fake;
          const { endo } = CURVE;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point2(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f: f2 } = this.wNAF(n);
            point = p;
            fake = f2;
          }
          return Point2.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b) {
          const G = Point2.BASE;
          const mul = (P, a2) => a2 === _0n2 || a2 === _1n2 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
          const sum = mul(this, a).add(mul(Q, b));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          const { px: x, py: y, pz: z } = this;
          const is0 = this.is0();
          if (iz == null)
            iz = is0 ? Fp.ONE : Fp.inv(z);
          const ax = Fp.mul(x, iz);
          const ay = Fp.mul(y, iz);
          const zz = Fp.mul(z, iz);
          if (is0)
            return { x: Fp.ZERO, y: Fp.ZERO };
          if (!Fp.eql(zz, Fp.ONE))
            throw new Error("invZ was invalid");
          return { x: ax, y: ay };
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n2)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point2, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n2)
            return this;
          if (clearCofactor)
            return clearCofactor(Point2, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          this.assertValidity();
          return toBytes2(Point2, this, isCompressed);
        }
        toHex(isCompressed = true) {
          return ut.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp.ONE);
      Point2.ZERO = new Point2(Fp.ZERO, Fp.ONE, Fp.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point2,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    function validateOpts(curve2) {
      const opts = (0, curve_js_1.validateBasic)(curve2);
      ut.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze(__spreadValues({ lowS: true }, opts));
    }
    function weierstrass2(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp.BYTES + 1;
      const uncompressedLen = 2 * Fp.BYTES + 1;
      function isValidFieldElement(num) {
        return _0n2 < num && num < Fp.ORDER;
      }
      function modN(a) {
        return mod2.mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return mod2.invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints(__spreadProps(__spreadValues({}, CURVE), {
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x = Fp.toBytes(a.x);
          const cat = ut.concatBytes;
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp.toBytes(a.y));
          }
        },
        fromBytes(bytes2) {
          const len2 = bytes2.length;
          const head = bytes2[0];
          const tail = bytes2.subarray(1);
          if (len2 === compressedLen && (head === 2 || head === 3)) {
            const x = ut.bytesToNumberBE(tail);
            if (!isValidFieldElement(x))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y;
            try {
              y = Fp.sqrt(y2);
            } catch (sqrtError) {
              const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
              throw new Error("Point is not on curve" + suffix);
            }
            const isYOdd = (y & _1n2) === _1n2;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp.neg(y);
            return { x, y };
          } else if (len2 === uncompressedLen && head === 4) {
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x, y };
          } else {
            throw new Error(`Point of length ${len2} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      }));
      const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number2) {
        const HALF = CURVE_ORDER >> _1n2;
        return number2 > HALF;
      }
      function normalizeS(s2) {
        return isBiggerThanHalfOrder(s2) ? modN(-s2) : s2;
      }
      const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));
      class Signature2 {
        constructor(r2, s2, recovery) {
          this.r = r2;
          this.s = s2;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex2) {
          const l = CURVE.nByteLength;
          hex2 = (0, utils_js_12.ensureBytes)("compactSignature", hex2, l * 2);
          return new Signature2(slcNum(hex2, 0, l), slcNum(hex2, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex2) {
          const { r: r2, s: s2 } = exports2.DER.toSig((0, utils_js_12.ensureBytes)("DER", hex2));
          return new Signature2(r2, s2);
        }
        assertValidity() {
          if (!isWithinCurveOrder(this.r))
            throw new Error("r must be 0 < r < CURVE.n");
          if (!isWithinCurveOrder(this.s))
            throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
          return new Signature2(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r: r2, s: s2, recovery: rec } = this;
          const h = bits2int_modN((0, utils_js_12.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r2 + CURVE.n : r2;
          if (radj >= Fp.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R2 = Point2.fromHex(prefix + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN(-h * ir);
          const u2 = modN(s2 * ir);
          const Q = Point2.BASE.multiplyAndAddUnsafe(R2, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature2(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return ut.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports2.DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return ut.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils2 = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error2) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = mod2.getMinHashLength(CURVE.n);
          return mod2.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point2.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = ut.isBytes(item);
        const str = typeof item === "string";
        const len2 = (arr || str) && item.length;
        if (arr)
          return len2 === compressedLen || len2 === uncompressedLen;
        if (str)
          return len2 === 2 * compressedLen || len2 === 2 * uncompressedLen;
        if (item instanceof Point2)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b = Point2.fromHex(publicB);
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes2) {
        const num = ut.bytesToNumberBE(bytes2);
        const delta = bytes2.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
        return modN(bits2int(bytes2));
      };
      const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
      function int2octets(num) {
        if (typeof num !== "bigint")
          throw new Error("bigint expected");
        if (!(_0n2 <= num && num < ORDER_MASK))
          throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        return ut.numberToBytesBE(num, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash: hash2, randomBytes } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_12.ensureBytes)("msgHash", msgHash);
        if (prehash)
          msgHash = (0, utils_js_12.ensureBytes)("prehashed msgHash", hash2(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null && ent !== false) {
          const e = ent === true ? randomBytes(Fp.BYTES) : ent;
          seedArgs.push((0, utils_js_12.ensureBytes)("extraEntropy", e));
        }
        const seed = ut.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q = Point2.BASE.multiply(k).toAffine();
          const r2 = modN(q.x);
          if (r2 === _0n2)
            return;
          const s2 = modN(ik * modN(m + r2 * d));
          if (s2 === _0n2)
            return;
          let recovery = (q.x === r2 ? 0 : 2) | Number(q.y & _1n2);
          let normS = s2;
          if (lowS && isBiggerThanHalfOrder(s2)) {
            normS = normalizeS(s2);
            recovery ^= 1;
          }
          return new Signature2(r2, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign2(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point2.BASE._setWindowSize(8);
      function verify(signature2, msgHash, publicKey, opts = defaultVerOpts) {
        var _a2;
        const sg = signature2;
        msgHash = (0, utils_js_12.ensureBytes)("msgHash", msgHash);
        publicKey = (0, utils_js_12.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P;
        try {
          if (typeof sg === "string" || ut.isBytes(sg)) {
            try {
              _sig = Signature2.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports2.DER.Err))
                throw derError;
              _sig = Signature2.fromCompact(sg);
            }
          } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
            const { r: r3, s: s3 } = sg;
            _sig = new Signature2(r3, s3);
          } else {
            throw new Error("PARSE");
          }
          P = Point2.fromHex(publicKey);
        } catch (error2) {
          if (error2.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r: r2, s: s2 } = _sig;
        const h = bits2int_modN(msgHash);
        const is2 = invN(s2);
        const u1 = modN(h * is2);
        const u2 = modN(r2 * is2);
        const R2 = (_a2 = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a2.toAffine();
        if (!R2)
          return false;
        const v = modN(R2.x);
        return v === r2;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign: sign2,
        verify,
        ProjectivePoint: Point2,
        Signature: Signature2,
        utils: utils2
      };
    }
    function SWUFpSqrtRatio(Fp, Z) {
      const q = Fp.ORDER;
      let l = _0n2;
      for (let o = q - _1n2; o % _2n2 === _0n2; o /= _2n2)
        l += _1n2;
      const c1 = l;
      const _2n_pow_c1_1 = _2n2 << c1 - _1n2 - _1n2;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n2;
      const c2 = (q - _1n2) / _2n_pow_c1;
      const c3 = (c2 - _1n2) / _2n2;
      const c4 = _2n_pow_c1 - _1n2;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp.pow(Z, c2);
      const c7 = Fp.pow(Z, (c2 + _1n2) / _2n2);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp.pow(v, c4);
        let tv3 = Fp.sqr(tv2);
        tv3 = Fp.mul(tv3, v);
        let tv5 = Fp.mul(u, tv3);
        tv5 = Fp.pow(tv5, c3);
        tv5 = Fp.mul(tv5, tv2);
        tv2 = Fp.mul(tv5, v);
        tv3 = Fp.mul(tv5, u);
        let tv4 = Fp.mul(tv3, tv2);
        tv5 = Fp.pow(tv4, c5);
        let isQR = Fp.eql(tv5, Fp.ONE);
        tv2 = Fp.mul(tv3, c7);
        tv5 = Fp.mul(tv4, tv1);
        tv3 = Fp.cmov(tv2, tv3, isQR);
        tv4 = Fp.cmov(tv5, tv4, isQR);
        for (let i2 = c1; i2 > _1n2; i2--) {
          let tv52 = i2 - _2n2;
          tv52 = _2n2 << tv52 - _1n2;
          let tvv5 = Fp.pow(tv4, tv52);
          const e1 = Fp.eql(tvv5, Fp.ONE);
          tv2 = Fp.mul(tv3, tv1);
          tv1 = Fp.mul(tv1, tv1);
          tvv5 = Fp.mul(tv4, tv1);
          tv3 = Fp.cmov(tv2, tv3, e1);
          tv4 = Fp.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp.ORDER % _4n2 === _3n2) {
        const c12 = (Fp.ORDER - _3n2) / _4n2;
        const c22 = Fp.sqrt(Fp.neg(Z));
        sqrtRatio = (u, v) => {
          let tv1 = Fp.sqr(v);
          const tv2 = Fp.mul(u, v);
          tv1 = Fp.mul(tv1, tv2);
          let y1 = Fp.pow(tv1, c12);
          y1 = Fp.mul(y1, tv2);
          const y2 = Fp.mul(y1, c22);
          const tv3 = Fp.mul(Fp.sqr(y1), v);
          const isQR = Fp.eql(tv3, u);
          let y = Fp.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    function mapToCurveSimpleSWU(Fp, opts) {
      mod2.validateField(Fp);
      if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
      if (!Fp.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u);
        tv1 = Fp.mul(tv1, opts.Z);
        tv2 = Fp.sqr(tv1);
        tv2 = Fp.add(tv2, tv1);
        tv3 = Fp.add(tv2, Fp.ONE);
        tv3 = Fp.mul(tv3, opts.B);
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));
        tv4 = Fp.mul(tv4, opts.A);
        tv2 = Fp.sqr(tv3);
        tv6 = Fp.sqr(tv4);
        tv5 = Fp.mul(tv6, opts.A);
        tv2 = Fp.add(tv2, tv5);
        tv2 = Fp.mul(tv2, tv3);
        tv6 = Fp.mul(tv6, tv4);
        tv5 = Fp.mul(tv6, opts.B);
        tv2 = Fp.add(tv2, tv5);
        x = Fp.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp.mul(tv1, u);
        y = Fp.mul(y, value);
        x = Fp.cmov(x, tv3, isValid);
        y = Fp.cmov(y, value, isValid);
        const e1 = Fp.isOdd(u) === Fp.isOdd(y);
        y = Fp.cmov(Fp.neg(y), y, e1);
        x = Fp.div(x, tv4);
        return { x, y };
      };
    }
  })(weierstrass);
  Object.defineProperty(_shortw_utils, "__esModule", { value: true });
  _shortw_utils.getHash = getHash;
  _shortw_utils.createCurve = createCurve;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const hmac_1 = hmac;
  const utils_1$8 = utils$9;
  const weierstrass_js_1 = weierstrass;
  function getHash(hash2) {
    return {
      hash: hash2,
      hmac: (key2, ...msgs) => (0, hmac_1.hmac)(hash2, key2, (0, utils_1$8.concatBytes)(...msgs)),
      randomBytes: utils_1$8.randomBytes
    };
  }
  function createCurve(curveDef, defHash) {
    const create2 = (hash2) => (0, weierstrass_js_1.weierstrass)(__spreadValues(__spreadValues({}, curveDef), getHash(hash2)));
    return Object.freeze(__spreadProps(__spreadValues({}, create2(defHash)), { create: create2 }));
  }
  var hashToCurve = {};
  Object.defineProperty(hashToCurve, "__esModule", { value: true });
  hashToCurve.expand_message_xmd = expand_message_xmd;
  hashToCurve.expand_message_xof = expand_message_xof;
  hashToCurve.hash_to_field = hash_to_field;
  hashToCurve.isogenyMap = isogenyMap;
  hashToCurve.createHasher = createHasher;
  const modular_js_1 = modular;
  const utils_js_1$6 = utils$8;
  const os2ip = utils_js_1$6.bytesToNumberBE;
  function i2osp(value, length) {
    if (value < 0 || value >= 1 << 8 * length) {
      throw new Error(`bad I2OSP call: value=${value} length=${length}`);
    }
    const res = Array.from({ length }).fill(0);
    for (let i2 = length - 1; i2 >= 0; i2--) {
      res[i2] = value & 255;
      value >>>= 8;
    }
    return new Uint8Array(res);
  }
  function strxor(a, b) {
    const arr = new Uint8Array(a.length);
    for (let i2 = 0; i2 < a.length; i2++) {
      arr[i2] = a[i2] ^ b[i2];
    }
    return arr;
  }
  function anum(item) {
    if (!Number.isSafeInteger(item))
      throw new Error("number expected");
  }
  function expand_message_xmd(msg, DST, lenInBytes, H) {
    (0, utils_js_1$6.abytes)(msg);
    (0, utils_js_1$6.abytes)(DST);
    anum(lenInBytes);
    if (DST.length > 255)
      DST = H((0, utils_js_1$6.concatBytes)((0, utils_js_1$6.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
    const ell = Math.ceil(lenInBytes / b_in_bytes);
    if (ell > 255)
      throw new Error("Invalid xmd length");
    const DST_prime = (0, utils_js_1$6.concatBytes)(DST, i2osp(DST.length, 1));
    const Z_pad = i2osp(0, r_in_bytes);
    const l_i_b_str = i2osp(lenInBytes, 2);
    const b = new Array(ell);
    const b_0 = H((0, utils_js_1$6.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
    b[0] = H((0, utils_js_1$6.concatBytes)(b_0, i2osp(1, 1), DST_prime));
    for (let i2 = 1; i2 <= ell; i2++) {
      const args = [strxor(b_0, b[i2 - 1]), i2osp(i2 + 1, 1), DST_prime];
      b[i2] = H((0, utils_js_1$6.concatBytes)(...args));
    }
    const pseudo_random_bytes = (0, utils_js_1$6.concatBytes)(...b);
    return pseudo_random_bytes.slice(0, lenInBytes);
  }
  function expand_message_xof(msg, DST, lenInBytes, k, H) {
    (0, utils_js_1$6.abytes)(msg);
    (0, utils_js_1$6.abytes)(DST);
    anum(lenInBytes);
    if (DST.length > 255) {
      const dkLen = Math.ceil(2 * k / 8);
      DST = H.create({ dkLen }).update((0, utils_js_1$6.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
    }
    if (lenInBytes > 65535 || DST.length > 255)
      throw new Error("expand_message_xof: invalid lenInBytes");
    return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
  }
  function hash_to_field(msg, count, options) {
    (0, utils_js_1$6.validateObject)(options, {
      DST: "stringOrUint8Array",
      p: "bigint",
      m: "isSafeInteger",
      k: "isSafeInteger",
      hash: "hash"
    });
    const { p, k, m, hash: hash2, expand, DST: _DST } = options;
    (0, utils_js_1$6.abytes)(msg);
    anum(count);
    const DST = typeof _DST === "string" ? (0, utils_js_1$6.utf8ToBytes)(_DST) : _DST;
    const log2p = p.toString(2).length;
    const L = Math.ceil((log2p + k) / 8);
    const len_in_bytes = count * m * L;
    let prb;
    if (expand === "xmd") {
      prb = expand_message_xmd(msg, DST, len_in_bytes, hash2);
    } else if (expand === "xof") {
      prb = expand_message_xof(msg, DST, len_in_bytes, k, hash2);
    } else if (expand === "_internal_pass") {
      prb = msg;
    } else {
      throw new Error('expand must be "xmd" or "xof"');
    }
    const u = new Array(count);
    for (let i2 = 0; i2 < count; i2++) {
      const e = new Array(m);
      for (let j = 0; j < m; j++) {
        const elm_offset = L * (j + i2 * m);
        const tv = prb.subarray(elm_offset, elm_offset + L);
        e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
      }
      u[i2] = e;
    }
    return u;
  }
  function isogenyMap(field, map) {
    const COEFF = map.map((i2) => Array.from(i2).reverse());
    return (x, y) => {
      const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i2) => field.add(field.mul(acc, x), i2)));
      x = field.div(xNum, xDen);
      y = field.mul(y, field.div(yNum, yDen));
      return { x, y };
    };
  }
  function createHasher(Point2, mapToCurve, def) {
    if (typeof mapToCurve !== "function")
      throw new Error("mapToCurve() must be defined");
    return {
      // Encodes byte string to elliptic curve.
      // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
      hashToCurve(msg, options) {
        const u = hash_to_field(msg, 2, __spreadValues(__spreadProps(__spreadValues({}, def), { DST: def.DST }), options));
        const u0 = Point2.fromAffine(mapToCurve(u[0]));
        const u1 = Point2.fromAffine(mapToCurve(u[1]));
        const P = u0.add(u1).clearCofactor();
        P.assertValidity();
        return P;
      },
      // Encodes byte string to elliptic curve.
      // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
      encodeToCurve(msg, options) {
        const u = hash_to_field(msg, 1, __spreadValues(__spreadProps(__spreadValues({}, def), { DST: def.encodeDST }), options));
        const P = Point2.fromAffine(mapToCurve(u[0])).clearCofactor();
        P.assertValidity();
        return P;
      },
      // Same as encodeToCurve, but without hash
      mapToCurve(scalars) {
        if (!Array.isArray(scalars))
          throw new Error("mapToCurve: expected array of bigints");
        for (const i2 of scalars)
          if (typeof i2 !== "bigint")
            throw new Error(`mapToCurve: expected array of bigints, got ${i2} in array`);
        const P = Point2.fromAffine(mapToCurve(scalars)).clearCofactor();
        P.assertValidity();
        return P;
      }
    };
  }
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeToCurve = exports2.hashToCurve = exports2.schnorr = exports2.secp256k1 = void 0;
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const sha256_1 = sha256;
    const utils_12 = utils$9;
    const _shortw_utils_js_1 = _shortw_utils;
    const hash_to_curve_js_1 = hashToCurve;
    const modular_js_12 = modular;
    const utils_js_12 = utils$8;
    const weierstrass_js_12 = weierstrass;
    const secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    const secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    const _1n2 = BigInt(1);
    const _2n2 = BigInt(2);
    const divNearest = (a, b) => (a + b / _2n2) / b;
    function sqrtMod(y) {
      const P = secp256k1P;
      const _3n2 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P;
      const b3 = b2 * b2 * y % P;
      const b6 = (0, modular_js_12.pow2)(b3, _3n2, P) * b3 % P;
      const b9 = (0, modular_js_12.pow2)(b6, _3n2, P) * b3 % P;
      const b11 = (0, modular_js_12.pow2)(b9, _2n2, P) * b2 % P;
      const b22 = (0, modular_js_12.pow2)(b11, _11n, P) * b11 % P;
      const b44 = (0, modular_js_12.pow2)(b22, _22n, P) * b22 % P;
      const b88 = (0, modular_js_12.pow2)(b44, _44n, P) * b44 % P;
      const b176 = (0, modular_js_12.pow2)(b88, _88n, P) * b88 % P;
      const b220 = (0, modular_js_12.pow2)(b176, _44n, P) * b44 % P;
      const b223 = (0, modular_js_12.pow2)(b220, _3n2, P) * b3 % P;
      const t1 = (0, modular_js_12.pow2)(b223, _23n, P) * b22 % P;
      const t2 = (0, modular_js_12.pow2)(t1, _6n, P) * b2 % P;
      const root = (0, modular_js_12.pow2)(t2, _2n2, P);
      if (!Fp.eql(Fp.sqr(root), y))
        throw new Error("Cannot find square root");
      return root;
    }
    const Fp = (0, modular_js_12.Field)(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
    exports2.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
      a: BigInt(0),
      // equation params: a, b
      b: BigInt(7),
      // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
      Fp,
      // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
      n: secp256k1N,
      // Curve order, total count of valid points in the field
      // Base point (x, y) aka generator point
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      // Cofactor
      lowS: true,
      // Allow only low-S signatures by default in sign() and verify()
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k) => {
          const n = secp256k1N;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n2 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k, n);
          const c2 = divNearest(-b1 * k, n);
          let k1 = (0, modular_js_12.mod)(k - c1 * a1 - c2 * a2, n);
          let k2 = (0, modular_js_12.mod)(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      }
    }, sha256_1.sha256);
    const _0n2 = BigInt(0);
    const fe = (x) => typeof x === "bigint" && _0n2 < x && x < secp256k1P;
    const ge = (x) => typeof x === "bigint" && _0n2 < x && x < secp256k1N;
    const TAGGED_HASH_PREFIXES = {};
    function taggedHash(tag, ...messages2) {
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_js_12.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return (0, sha256_1.sha256)((0, utils_js_12.concatBytes)(tagP, ...messages2));
    }
    const pointToBytes = (point) => point.toRawBytes(true).slice(1);
    const numTo32b = (n) => (0, utils_js_12.numberToBytesBE)(n, 32);
    const modP = (x) => (0, modular_js_12.mod)(x, secp256k1P);
    const modN = (x) => (0, modular_js_12.mod)(x, secp256k1N);
    const Point2 = exports2.secp256k1.ProjectivePoint;
    const GmulAdd = (Q, a, b) => Point2.BASE.multiplyAndAddUnsafe(Q, a, b);
    function schnorrGetExtPubKey(priv) {
      let d_ = exports2.secp256k1.utils.normPrivateKeyToScalar(priv);
      let p = Point2.fromPrivateKey(d_);
      const scalar = p.hasEvenY() ? d_ : modN(-d_);
      return { scalar, bytes: pointToBytes(p) };
    }
    function lift_x(x) {
      if (!fe(x))
        throw new Error("bad x: need 0 < x < p");
      const xx = modP(x * x);
      const c = modP(xx * x + BigInt(7));
      let y = sqrtMod(c);
      if (y % _2n2 !== _0n2)
        y = modP(-y);
      const p = new Point2(x, y, _1n2);
      p.assertValidity();
      return p;
    }
    function challenge(...args) {
      return modN((0, utils_js_12.bytesToNumberBE)(taggedHash("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey(privateKey) {
      return schnorrGetExtPubKey(privateKey).bytes;
    }
    function schnorrSign(message, privateKey, auxRand = (0, utils_12.randomBytes)(32)) {
      const m = (0, utils_js_12.ensureBytes)("message", message);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
      const a = (0, utils_js_12.ensureBytes)("auxRand", auxRand, 32);
      const t2 = numTo32b(d ^ (0, utils_js_12.bytesToNumberBE)(taggedHash("BIP0340/aux", a)));
      const rand2 = taggedHash("BIP0340/nonce", t2, px, m);
      const k_ = modN((0, utils_js_12.bytesToNumberBE)(rand2));
      if (k_ === _0n2)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
      const e = challenge(rx, px, m);
      const sig = new Uint8Array(64);
      sig.set(rx, 0);
      sig.set(numTo32b(modN(k + e * d)), 32);
      if (!schnorrVerify(sig, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig;
    }
    function schnorrVerify(signature2, message, publicKey) {
      const sig = (0, utils_js_12.ensureBytes)("signature", signature2, 64);
      const m = (0, utils_js_12.ensureBytes)("message", message);
      const pub = (0, utils_js_12.ensureBytes)("publicKey", publicKey, 32);
      try {
        const P = lift_x((0, utils_js_12.bytesToNumberBE)(pub));
        const r2 = (0, utils_js_12.bytesToNumberBE)(sig.subarray(0, 32));
        if (!fe(r2))
          return false;
        const s2 = (0, utils_js_12.bytesToNumberBE)(sig.subarray(32, 64));
        if (!ge(s2))
          return false;
        const e = challenge(numTo32b(r2), pointToBytes(P), m);
        const R2 = GmulAdd(P, s2, modN(-e));
        if (!R2 || !R2.hasEvenY() || R2.toAffine().x !== r2)
          return false;
        return true;
      } catch (error2) {
        return false;
      }
    }
    exports2.schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey,
      sign: schnorrSign,
      verify: schnorrVerify,
      utils: {
        randomPrivateKey: exports2.secp256k1.utils.randomPrivateKey,
        lift_x,
        pointToBytes,
        numberToBytesBE: utils_js_12.numberToBytesBE,
        bytesToNumberBE: utils_js_12.bytesToNumberBE,
        taggedHash,
        mod: modular_js_12.mod
      }
    }))();
    const isoMap = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i2) => i2.map((j) => BigInt(j)))))();
    const mapSWU = /* @__PURE__ */ (() => (0, weierstrass_js_12.mapToCurveSimpleSWU)(Fp, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fp.create(BigInt("-11"))
    }))();
    const htf = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.createHasher)(exports2.secp256k1.ProjectivePoint, (scalars) => {
      const { x, y } = mapSWU(Fp.create(scalars[0]));
      return isoMap(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fp.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256_1.sha256
    }))();
    exports2.hashToCurve = (() => htf.hashToCurve)();
    exports2.encodeToCurve = (() => htf.encodeToCurve)();
  })(secp256k1);
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.secp256k1 = void 0;
    var secp256k1_12 = secp256k1;
    Object.defineProperty(exports2, "secp256k1", { enumerable: true, get: function() {
      return secp256k1_12.secp256k1;
    } });
  })(secp256k1$1);
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MAX_WITHDRAWALS_PER_PAYLOAD = exports2.RLP_EMPTY_STRING = exports2.KECCAK256_RLP = exports2.KECCAK256_RLP_S = exports2.KECCAK256_RLP_ARRAY = exports2.KECCAK256_RLP_ARRAY_S = exports2.KECCAK256_NULL = exports2.KECCAK256_NULL_S = exports2.TWO_POW256 = exports2.SECP256K1_ORDER_DIV_2 = exports2.SECP256K1_ORDER = exports2.MAX_INTEGER_BIGINT = exports2.MAX_INTEGER = exports2.MAX_UINT64 = void 0;
    const buffer_1 = require$$0$5;
    const secp256k1_12 = secp256k1$1;
    exports2.MAX_UINT64 = BigInt("0xffffffffffffffff");
    exports2.MAX_INTEGER = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    exports2.MAX_INTEGER_BIGINT = BigInt("115792089237316195423570985008687907853269984665640564039457584007913129639935");
    exports2.SECP256K1_ORDER = secp256k1_12.secp256k1.CURVE.n;
    exports2.SECP256K1_ORDER_DIV_2 = secp256k1_12.secp256k1.CURVE.n / BigInt(2);
    exports2.TWO_POW256 = BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");
    exports2.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    exports2.KECCAK256_NULL = buffer_1.Buffer.from(exports2.KECCAK256_NULL_S, "hex");
    exports2.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
    exports2.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports2.KECCAK256_RLP_ARRAY_S, "hex");
    exports2.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
    exports2.KECCAK256_RLP = buffer_1.Buffer.from(exports2.KECCAK256_RLP_S, "hex");
    exports2.RLP_EMPTY_STRING = buffer_1.Buffer.from([128]);
    exports2.MAX_WITHDRAWALS_PER_PAYLOAD = 16;
  })(constants$3);
  var units = {};
  Object.defineProperty(units, "__esModule", { value: true });
  units.GWEI_TO_WEI = void 0;
  units.GWEI_TO_WEI = BigInt(1e9);
  var account = {};
  var dist$3 = {};
  Object.defineProperty(dist$3, "__esModule", { value: true });
  dist$3.RLP = dist$3.utils = dist$3.decode = dist$3.encode = void 0;
  function encode$1(input) {
    if (Array.isArray(input)) {
      const output2 = [];
      let outputLength = 0;
      for (let i2 = 0; i2 < input.length; i2++) {
        const encoded = encode$1(input[i2]);
        output2.push(encoded);
        outputLength += encoded.length;
      }
      return concatBytes(encodeLength(outputLength, 192), ...output2);
    }
    const inputBuf = toBytes(input);
    if (inputBuf.length === 1 && inputBuf[0] < 128) {
      return inputBuf;
    }
    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);
  }
  dist$3.encode = encode$1;
  function safeSlice(input, start, end) {
    if (end > input.length) {
      throw new Error("invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds");
    }
    return input.slice(start, end);
  }
  function decodeLength(v) {
    if (v[0] === 0) {
      throw new Error("invalid RLP: extra zeros");
    }
    return parseHexByte(bytesToHex(v));
  }
  function encodeLength(len2, offset) {
    if (len2 < 56) {
      return Uint8Array.from([len2 + offset]);
    }
    const hexLength = numberToHex$1(len2);
    const lLength = hexLength.length / 2;
    const firstByte = numberToHex$1(offset + 55 + lLength);
    return Uint8Array.from(hexToBytes(firstByte + hexLength));
  }
  function decode$1(input, stream = false) {
    if (typeof input === "undefined" || input === null || input.length === 0) {
      return Uint8Array.from([]);
    }
    const inputBytes = toBytes(input);
    const decoded = _decode(inputBytes);
    if (stream) {
      return decoded;
    }
    if (decoded.remainder.length !== 0) {
      throw new Error("invalid RLP: remainder must be zero");
    }
    return decoded.data;
  }
  dist$3.decode = decode$1;
  function _decode(input) {
    let length, llength, data, innerRemainder, d;
    const decoded = [];
    const firstByte = input[0];
    if (firstByte <= 127) {
      return {
        data: input.slice(0, 1),
        remainder: input.slice(1)
      };
    } else if (firstByte <= 183) {
      length = firstByte - 127;
      if (firstByte === 128) {
        data = Uint8Array.from([]);
      } else {
        data = safeSlice(input, 1, length);
      }
      if (length === 2 && data[0] < 128) {
        throw new Error("invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed");
      }
      return {
        data,
        remainder: input.slice(length)
      };
    } else if (firstByte <= 191) {
      llength = firstByte - 182;
      if (input.length - 1 < llength) {
        throw new Error("invalid RLP: not enough bytes for string length");
      }
      length = decodeLength(safeSlice(input, 1, llength));
      if (length <= 55) {
        throw new Error("invalid RLP: expected string length to be greater than 55");
      }
      data = safeSlice(input, llength, length + llength);
      return {
        data,
        remainder: input.slice(length + llength)
      };
    } else if (firstByte <= 247) {
      length = firstByte - 191;
      innerRemainder = safeSlice(input, 1, length);
      while (innerRemainder.length) {
        d = _decode(innerRemainder);
        decoded.push(d.data);
        innerRemainder = d.remainder;
      }
      return {
        data: decoded,
        remainder: input.slice(length)
      };
    } else {
      llength = firstByte - 246;
      length = decodeLength(safeSlice(input, 1, llength));
      if (length < 56) {
        throw new Error("invalid RLP: encoded list too short");
      }
      const totalLength = llength + length;
      if (totalLength > input.length) {
        throw new Error("invalid RLP: total length is larger than the data");
      }
      innerRemainder = safeSlice(input, llength, totalLength);
      while (innerRemainder.length) {
        d = _decode(innerRemainder);
        decoded.push(d.data);
        innerRemainder = d.remainder;
      }
      return {
        data: decoded,
        remainder: input.slice(totalLength)
      };
    }
  }
  const cachedHexes = Array.from({ length: 256 }, (_v, i2) => i2.toString(16).padStart(2, "0"));
  function bytesToHex(uint8a) {
    let hex2 = "";
    for (let i2 = 0; i2 < uint8a.length; i2++) {
      hex2 += cachedHexes[uint8a[i2]];
    }
    return hex2;
  }
  function parseHexByte(hexByte) {
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte))
      throw new Error("Invalid byte sequence");
    return byte;
  }
  function hexToBytes(hex2) {
    if (typeof hex2 !== "string") {
      throw new TypeError("hexToBytes: expected string, got " + typeof hex2);
    }
    if (hex2.length % 2)
      throw new Error("hexToBytes: received invalid unpadded hex");
    const array2 = new Uint8Array(hex2.length / 2);
    for (let i2 = 0; i2 < array2.length; i2++) {
      const j = i2 * 2;
      array2[i2] = parseHexByte(hex2.slice(j, j + 2));
    }
    return array2;
  }
  function concatBytes(...arrays) {
    if (arrays.length === 1)
      return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i2 = 0, pad = 0; i2 < arrays.length; i2++) {
      const arr = arrays[i2];
      result.set(arr, pad);
      pad += arr.length;
    }
    return result;
  }
  function utf8ToBytes(utf) {
    return new TextEncoder().encode(utf);
  }
  function numberToHex$1(integer) {
    if (integer < 0) {
      throw new Error("Invalid integer as argument, must be unsigned!");
    }
    const hex2 = integer.toString(16);
    return hex2.length % 2 ? `0${hex2}` : hex2;
  }
  function padToEven$1(a) {
    return a.length % 2 ? `0${a}` : a;
  }
  function isHexPrefixed$1(str) {
    return str.length >= 2 && str[0] === "0" && str[1] === "x";
  }
  function stripHexPrefix$1(str) {
    if (typeof str !== "string") {
      return str;
    }
    return isHexPrefixed$1(str) ? str.slice(2) : str;
  }
  function toBytes(v) {
    if (v instanceof Uint8Array) {
      return v;
    }
    if (typeof v === "string") {
      if (isHexPrefixed$1(v)) {
        return hexToBytes(padToEven$1(stripHexPrefix$1(v)));
      }
      return utf8ToBytes(v);
    }
    if (typeof v === "number" || typeof v === "bigint") {
      if (!v) {
        return Uint8Array.from([]);
      }
      return hexToBytes(numberToHex$1(v));
    }
    if (v === null || v === void 0) {
      return Uint8Array.from([]);
    }
    throw new Error("toBytes: received unsupported type " + typeof v);
  }
  dist$3.utils = {
    bytesToHex,
    concatBytes,
    hexToBytes,
    utf8ToBytes
  };
  dist$3.RLP = { encode: encode$1, decode: decode$1 };
  var keccak = {};
  var sha3$1 = {};
  var _u64$1 = {};
  Object.defineProperty(_u64$1, "__esModule", { value: true });
  _u64$1.add5L = _u64$1.add5H = _u64$1.add4H = _u64$1.add4L = _u64$1.add3H = _u64$1.add3L = _u64$1.add = _u64$1.rotlBL = _u64$1.rotlBH = _u64$1.rotlSL = _u64$1.rotlSH = _u64$1.rotr32L = _u64$1.rotr32H = _u64$1.rotrBL = _u64$1.rotrBH = _u64$1.rotrSL = _u64$1.rotrSH = _u64$1.shrSL = _u64$1.shrSH = _u64$1.toBig = _u64$1.split = _u64$1.fromBig = void 0;
  const U32_MASK64$1 = /* @__PURE__ */ BigInt(__pow(2, 32) - 1);
  const _32n$1 = /* @__PURE__ */ BigInt(32);
  function fromBig$1(n, le = false) {
    if (le)
      return { h: Number(n & U32_MASK64$1), l: Number(n >> _32n$1 & U32_MASK64$1) };
    return { h: Number(n >> _32n$1 & U32_MASK64$1) | 0, l: Number(n & U32_MASK64$1) | 0 };
  }
  _u64$1.fromBig = fromBig$1;
  function split$1(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i2 = 0; i2 < lst.length; i2++) {
      const { h, l } = fromBig$1(lst[i2], le);
      [Ah[i2], Al[i2]] = [h, l];
    }
    return [Ah, Al];
  }
  _u64$1.split = split$1;
  const toBig$1 = (h, l) => BigInt(h >>> 0) << _32n$1 | BigInt(l >>> 0);
  _u64$1.toBig = toBig$1;
  const shrSH$1 = (h, _l, s2) => h >>> s2;
  _u64$1.shrSH = shrSH$1;
  const shrSL$1 = (h, l, s2) => h << 32 - s2 | l >>> s2;
  _u64$1.shrSL = shrSL$1;
  const rotrSH$1 = (h, l, s2) => h >>> s2 | l << 32 - s2;
  _u64$1.rotrSH = rotrSH$1;
  const rotrSL$1 = (h, l, s2) => h << 32 - s2 | l >>> s2;
  _u64$1.rotrSL = rotrSL$1;
  const rotrBH$1 = (h, l, s2) => h << 64 - s2 | l >>> s2 - 32;
  _u64$1.rotrBH = rotrBH$1;
  const rotrBL$1 = (h, l, s2) => h >>> s2 - 32 | l << 64 - s2;
  _u64$1.rotrBL = rotrBL$1;
  const rotr32H$1 = (_h, l) => l;
  _u64$1.rotr32H = rotr32H$1;
  const rotr32L$1 = (h, _l) => h;
  _u64$1.rotr32L = rotr32L$1;
  const rotlSH$1 = (h, l, s2) => h << s2 | l >>> 32 - s2;
  _u64$1.rotlSH = rotlSH$1;
  const rotlSL$1 = (h, l, s2) => l << s2 | h >>> 32 - s2;
  _u64$1.rotlSL = rotlSL$1;
  const rotlBH$1 = (h, l, s2) => l << s2 - 32 | h >>> 64 - s2;
  _u64$1.rotlBH = rotlBH$1;
  const rotlBL$1 = (h, l, s2) => h << s2 - 32 | l >>> 64 - s2;
  _u64$1.rotlBL = rotlBL$1;
  function add$1(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: Ah + Bh + (l / __pow(2, 32) | 0) | 0, l: l | 0 };
  }
  _u64$1.add = add$1;
  const add3L$1 = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  _u64$1.add3L = add3L$1;
  const add3H$1 = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / __pow(2, 32) | 0) | 0;
  _u64$1.add3H = add3H$1;
  const add4L$1 = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  _u64$1.add4L = add4L$1;
  const add4H$1 = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / __pow(2, 32) | 0) | 0;
  _u64$1.add4H = add4H$1;
  const add5L$1 = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  _u64$1.add5L = add5L$1;
  const add5H$1 = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / __pow(2, 32) | 0) | 0;
  _u64$1.add5H = add5H$1;
  const u64$1 = {
    fromBig: fromBig$1,
    split: split$1,
    toBig: toBig$1,
    shrSH: shrSH$1,
    shrSL: shrSL$1,
    rotrSH: rotrSH$1,
    rotrSL: rotrSL$1,
    rotrBH: rotrBH$1,
    rotrBL: rotrBL$1,
    rotr32H: rotr32H$1,
    rotr32L: rotr32L$1,
    rotlSH: rotlSH$1,
    rotlSL: rotlSL$1,
    rotlBH: rotlBH$1,
    rotlBL: rotlBL$1,
    add: add$1,
    add3L: add3L$1,
    add3H: add3H$1,
    add4L: add4L$1,
    add4H: add4H$1,
    add5H: add5H$1,
    add5L: add5L$1
  };
  _u64$1.default = u64$1;
  Object.defineProperty(sha3$1, "__esModule", { value: true });
  sha3$1.shake256 = sha3$1.shake128 = sha3$1.keccak_512 = sha3$1.keccak_384 = sha3$1.keccak_256 = sha3$1.keccak_224 = sha3$1.sha3_512 = sha3$1.sha3_384 = sha3$1.sha3_256 = sha3$1.sha3_224 = sha3$1.Keccak = sha3$1.keccakP = void 0;
  const _assert_js_1$1 = _assert$1;
  const _u64_js_1$1 = _u64$1;
  const utils_js_1$5 = utils$9;
  const SHA3_PI$1 = [];
  const SHA3_ROTL$1 = [];
  const _SHA3_IOTA$1 = [];
  const _0n$1 = /* @__PURE__ */ BigInt(0);
  const _1n$1 = /* @__PURE__ */ BigInt(1);
  const _2n$1 = /* @__PURE__ */ BigInt(2);
  const _7n$1 = /* @__PURE__ */ BigInt(7);
  const _256n$1 = /* @__PURE__ */ BigInt(256);
  const _0x71n$1 = /* @__PURE__ */ BigInt(113);
  for (let round2 = 0, R2 = _1n$1, x = 1, y = 0; round2 < 24; round2++) {
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI$1.push(2 * (5 * y + x));
    SHA3_ROTL$1.push((round2 + 1) * (round2 + 2) / 2 % 64);
    let t2 = _0n$1;
    for (let j = 0; j < 7; j++) {
      R2 = (R2 << _1n$1 ^ (R2 >> _7n$1) * _0x71n$1) % _256n$1;
      if (R2 & _2n$1)
        t2 ^= _1n$1 << (_1n$1 << /* @__PURE__ */ BigInt(j)) - _1n$1;
    }
    _SHA3_IOTA$1.push(t2);
  }
  const [SHA3_IOTA_H$1, SHA3_IOTA_L$1] = /* @__PURE__ */ (0, _u64_js_1$1.split)(_SHA3_IOTA$1, true);
  const rotlH$1 = (h, l, s2) => s2 > 32 ? (0, _u64_js_1$1.rotlBH)(h, l, s2) : (0, _u64_js_1$1.rotlSH)(h, l, s2);
  const rotlL$1 = (h, l, s2) => s2 > 32 ? (0, _u64_js_1$1.rotlBL)(h, l, s2) : (0, _u64_js_1$1.rotlSL)(h, l, s2);
  function keccakP$1(s2, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round2 = 24 - rounds; round2 < 24; round2++) {
      for (let x = 0; x < 10; x++)
        B[x] = s2[x] ^ s2[x + 10] ^ s2[x + 20] ^ s2[x + 30] ^ s2[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH$1(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL$1(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s2[x + y] ^= Th;
          s2[x + y + 1] ^= Tl;
        }
      }
      let curH = s2[2];
      let curL = s2[3];
      for (let t2 = 0; t2 < 24; t2++) {
        const shift = SHA3_ROTL$1[t2];
        const Th = rotlH$1(curH, curL, shift);
        const Tl = rotlL$1(curH, curL, shift);
        const PI = SHA3_PI$1[t2];
        curH = s2[PI];
        curL = s2[PI + 1];
        s2[PI] = Th;
        s2[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s2[y + x];
        for (let x = 0; x < 10; x++)
          s2[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s2[0] ^= SHA3_IOTA_H$1[round2];
      s2[1] ^= SHA3_IOTA_L$1[round2];
    }
    B.fill(0);
  }
  sha3$1.keccakP = keccakP$1;
  let Keccak$1 = class Keccak2 extends utils_js_1$5.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
      super();
      this.blockLen = blockLen;
      this.suffix = suffix;
      this.outputLen = outputLen;
      this.enableXOF = enableXOF;
      this.rounds = rounds;
      this.pos = 0;
      this.posOut = 0;
      this.finished = false;
      this.destroyed = false;
      (0, _assert_js_1$1.number)(outputLen);
      if (0 >= this.blockLen || this.blockLen >= 200)
        throw new Error("Sha3 supports only keccak-f1600 function");
      this.state = new Uint8Array(200);
      this.state32 = (0, utils_js_1$5.u32)(this.state);
    }
    keccak() {
      if (!utils_js_1$5.isLE)
        (0, utils_js_1$5.byteSwap32)(this.state32);
      keccakP$1(this.state32, this.rounds);
      if (!utils_js_1$5.isLE)
        (0, utils_js_1$5.byteSwap32)(this.state32);
      this.posOut = 0;
      this.pos = 0;
    }
    update(data) {
      (0, _assert_js_1$1.exists)(this);
      const { blockLen, state: state2 } = this;
      data = (0, utils_js_1$5.toBytes)(data);
      const len2 = data.length;
      for (let pos = 0; pos < len2; ) {
        const take = Math.min(blockLen - this.pos, len2 - pos);
        for (let i2 = 0; i2 < take; i2++)
          state2[this.pos++] ^= data[pos++];
        if (this.pos === blockLen)
          this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      const { state: state2, suffix, pos, blockLen } = this;
      state2[pos] ^= suffix;
      if ((suffix & 128) !== 0 && pos === blockLen - 1)
        this.keccak();
      state2[blockLen - 1] ^= 128;
      this.keccak();
    }
    writeInto(out) {
      (0, _assert_js_1$1.exists)(this, false);
      (0, _assert_js_1$1.bytes)(out);
      this.finish();
      const bufferOut = this.state;
      const { blockLen } = this;
      for (let pos = 0, len2 = out.length; pos < len2; ) {
        if (this.posOut >= blockLen)
          this.keccak();
        const take = Math.min(blockLen - this.posOut, len2 - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
        this.posOut += take;
        pos += take;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible for this instance");
      return this.writeInto(out);
    }
    xof(bytes2) {
      (0, _assert_js_1$1.number)(bytes2);
      return this.xofInto(new Uint8Array(bytes2));
    }
    digestInto(out) {
      (0, _assert_js_1$1.output)(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      this.destroyed = true;
      this.state.fill(0);
    }
    _cloneInto(to) {
      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
      to || (to = new Keccak2(blockLen, suffix, outputLen, enableXOF, rounds));
      to.state32.set(this.state32);
      to.pos = this.pos;
      to.posOut = this.posOut;
      to.finished = this.finished;
      to.rounds = rounds;
      to.suffix = suffix;
      to.outputLen = outputLen;
      to.enableXOF = enableXOF;
      to.destroyed = this.destroyed;
      return to;
    }
  };
  sha3$1.Keccak = Keccak$1;
  const gen$1 = (suffix, blockLen, outputLen) => (0, utils_js_1$5.wrapConstructor)(() => new Keccak$1(blockLen, suffix, outputLen));
  sha3$1.sha3_224 = gen$1(6, 144, 224 / 8);
  sha3$1.sha3_256 = gen$1(6, 136, 256 / 8);
  sha3$1.sha3_384 = gen$1(6, 104, 384 / 8);
  sha3$1.sha3_512 = gen$1(6, 72, 512 / 8);
  sha3$1.keccak_224 = gen$1(1, 144, 224 / 8);
  sha3$1.keccak_256 = gen$1(1, 136, 256 / 8);
  sha3$1.keccak_384 = gen$1(1, 104, 384 / 8);
  sha3$1.keccak_512 = gen$1(1, 72, 512 / 8);
  const genShake$1 = (suffix, blockLen, outputLen) => (0, utils_js_1$5.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak$1(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
  sha3$1.shake128 = genShake$1(31, 168, 128 / 8);
  sha3$1.shake256 = genShake$1(31, 136, 256 / 8);
  var utils$7 = { exports: {} };
  utils$7.exports;
  (function(module, exports2) {
    var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.crypto = exports2.utf8ToBytes = exports2.createView = exports2.concatBytes = exports2.toHex = exports2.bytesToHex = exports2.assertBytes = exports2.assertBool = void 0;
    exports2.bytesToUtf8 = bytesToUtf8;
    exports2.hexToBytes = hexToBytes2;
    exports2.equalsBytes = equalsBytes;
    exports2.wrapHash = wrapHash;
    const _assert_1 = __importDefault2(_assert$1);
    const utils_12 = utils$9;
    const assertBool = _assert_1.default.bool;
    exports2.assertBool = assertBool;
    const assertBytes = _assert_1.default.bytes;
    exports2.assertBytes = assertBytes;
    var utils_22 = utils$9;
    Object.defineProperty(exports2, "bytesToHex", { enumerable: true, get: function() {
      return utils_22.bytesToHex;
    } });
    Object.defineProperty(exports2, "toHex", { enumerable: true, get: function() {
      return utils_22.bytesToHex;
    } });
    Object.defineProperty(exports2, "concatBytes", { enumerable: true, get: function() {
      return utils_22.concatBytes;
    } });
    Object.defineProperty(exports2, "createView", { enumerable: true, get: function() {
      return utils_22.createView;
    } });
    Object.defineProperty(exports2, "utf8ToBytes", { enumerable: true, get: function() {
      return utils_22.utf8ToBytes;
    } });
    function bytesToUtf8(data) {
      if (!(data instanceof Uint8Array)) {
        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);
      }
      return new TextDecoder().decode(data);
    }
    function hexToBytes2(data) {
      const sliced = data.startsWith("0x") ? data.substring(2) : data;
      return (0, utils_12.hexToBytes)(sliced);
    }
    function equalsBytes(a, b) {
      if (a.length !== b.length) {
        return false;
      }
      for (let i2 = 0; i2 < a.length; i2++) {
        if (a[i2] !== b[i2]) {
          return false;
        }
      }
      return true;
    }
    function wrapHash(hash2) {
      return (msg) => {
        _assert_1.default.bytes(msg);
        return hash2(msg);
      };
    }
    exports2.crypto = (() => {
      const webCrypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
      const nodeRequire = typeof commonjsRequire === "function" && commonjsRequire.bind(module);
      return {
        node: nodeRequire && !webCrypto ? nodeRequire("crypto") : void 0,
        web: webCrypto
      };
    })();
  })(utils$7, utils$7.exports);
  var utilsExports = utils$7.exports;
  Object.defineProperty(keccak, "__esModule", { value: true });
  keccak.keccak512 = keccak.keccak384 = keccak.keccak256 = keccak.keccak224 = void 0;
  const sha3_1 = sha3$1;
  const utils_js_1$4 = utilsExports;
  keccak.keccak224 = (0, utils_js_1$4.wrapHash)(sha3_1.keccak_224);
  keccak.keccak256 = (() => {
    const k = (0, utils_js_1$4.wrapHash)(sha3_1.keccak_256);
    k.create = sha3_1.keccak_256.create;
    return k;
  })();
  keccak.keccak384 = (0, utils_js_1$4.wrapHash)(sha3_1.keccak_384);
  keccak.keccak512 = (0, utils_js_1$4.wrapHash)(sha3_1.keccak_512);
  var bytes$2 = {};
  var helpers$1 = {};
  var internal = {};
  Object.defineProperty(internal, "__esModule", { value: true });
  internal.isHexString = internal.getKeys = internal.fromAscii = internal.fromUtf8 = internal.toAscii = internal.arrayContainsArray = internal.getBinarySize = internal.padToEven = internal.stripHexPrefix = internal.isHexPrefixed = void 0;
  function isHexPrefixed(str) {
    if (typeof str !== "string") {
      throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);
    }
    return str[0] === "0" && str[1] === "x";
  }
  internal.isHexPrefixed = isHexPrefixed;
  const stripHexPrefix = (str) => {
    if (typeof str !== "string")
      throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);
    return isHexPrefixed(str) ? str.slice(2) : str;
  };
  internal.stripHexPrefix = stripHexPrefix;
  function padToEven(value) {
    let a = value;
    if (typeof a !== "string") {
      throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);
    }
    if (a.length % 2)
      a = `0${a}`;
    return a;
  }
  internal.padToEven = padToEven;
  function getBinarySize(str) {
    if (typeof str !== "string") {
      throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);
    }
    return Buffer.byteLength(str, "utf8");
  }
  internal.getBinarySize = getBinarySize;
  function arrayContainsArray(superset, subset2, some) {
    if (Array.isArray(superset) !== true) {
      throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);
    }
    if (Array.isArray(subset2) !== true) {
      throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset2}'`);
    }
    return subset2[some === true ? "some" : "every"]((value) => superset.indexOf(value) >= 0);
  }
  internal.arrayContainsArray = arrayContainsArray;
  function toAscii(hex2) {
    let str = "";
    let i2 = 0;
    const l = hex2.length;
    if (hex2.substring(0, 2) === "0x")
      i2 = 2;
    for (; i2 < l; i2 += 2) {
      const code2 = parseInt(hex2.substr(i2, 2), 16);
      str += String.fromCharCode(code2);
    }
    return str;
  }
  internal.toAscii = toAscii;
  function fromUtf8(stringValue) {
    const str = Buffer.from(stringValue, "utf8");
    return `0x${padToEven(str.toString("hex")).replace(/^0+|0+$/g, "")}`;
  }
  internal.fromUtf8 = fromUtf8;
  function fromAscii(stringValue) {
    let hex2 = "";
    for (let i2 = 0; i2 < stringValue.length; i2++) {
      const code2 = stringValue.charCodeAt(i2);
      const n = code2.toString(16);
      hex2 += n.length < 2 ? `0${n}` : n;
    }
    return `0x${hex2}`;
  }
  internal.fromAscii = fromAscii;
  function getKeys(params, key2, allowEmpty) {
    if (!Array.isArray(params)) {
      throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);
    }
    if (typeof key2 !== "string") {
      throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);
    }
    const result = [];
    for (let i2 = 0; i2 < params.length; i2++) {
      let value = params[i2][key2];
      if (allowEmpty === true && !value) {
        value = "";
      } else if (typeof value !== "string") {
        throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);
      }
      result.push(value);
    }
    return result;
  }
  internal.getKeys = getKeys;
  function isHexString(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/))
      return false;
    if (typeof length !== "undefined" && length > 0 && value.length !== 2 + 2 * length)
      return false;
    return true;
  }
  internal.isHexString = isHexString;
  Object.defineProperty(helpers$1, "__esModule", { value: true });
  helpers$1.assertIsString = helpers$1.assertIsArray = helpers$1.assertIsBuffer = helpers$1.assertIsHexString = void 0;
  const internal_1 = internal;
  const assertIsHexString = function(input) {
    if (!(0, internal_1.isHexString)(input)) {
      const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;
      throw new Error(msg);
    }
  };
  helpers$1.assertIsHexString = assertIsHexString;
  const assertIsBuffer = function(input) {
    if (!Buffer.isBuffer(input)) {
      const msg = `This method only supports Buffer but input was: ${input}`;
      throw new Error(msg);
    }
  };
  helpers$1.assertIsBuffer = assertIsBuffer;
  const assertIsArray = function(input) {
    if (!Array.isArray(input)) {
      const msg = `This method only supports number arrays but input was: ${input}`;
      throw new Error(msg);
    }
  };
  helpers$1.assertIsArray = assertIsArray;
  const assertIsString = function(input) {
    if (typeof input !== "string") {
      const msg = `This method only supports strings but input was: ${input}`;
      throw new Error(msg);
    }
  };
  helpers$1.assertIsString = assertIsString;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.intToUnpaddedBuffer = exports2.bigIntToUnpaddedBuffer = exports2.bigIntToHex = exports2.bufArrToArr = exports2.arrToBufArr = exports2.validateNoLeadingZeroes = exports2.baToJSON = exports2.toUtf8 = exports2.short = exports2.addHexPrefix = exports2.toUnsigned = exports2.fromSigned = exports2.bufferToInt = exports2.bigIntToBuffer = exports2.bufferToBigInt = exports2.bufferToHex = exports2.toBuffer = exports2.unpadHexString = exports2.unpadArray = exports2.unpadBuffer = exports2.setLengthRight = exports2.setLengthLeft = exports2.zeros = exports2.intToBuffer = exports2.intToHex = void 0;
    const helpers_12 = helpers$1;
    const internal_12 = internal;
    const intToHex = function(i2) {
      if (!Number.isSafeInteger(i2) || i2 < 0) {
        throw new Error(`Received an invalid integer type: ${i2}`);
      }
      return `0x${i2.toString(16)}`;
    };
    exports2.intToHex = intToHex;
    const intToBuffer = function(i2) {
      const hex2 = (0, exports2.intToHex)(i2);
      return Buffer.from((0, internal_12.padToEven)(hex2.slice(2)), "hex");
    };
    exports2.intToBuffer = intToBuffer;
    const zeros = function(bytes2) {
      return Buffer.allocUnsafe(bytes2).fill(0);
    };
    exports2.zeros = zeros;
    const setLength = function(msg, length, right) {
      const buf = (0, exports2.zeros)(length);
      if (right) {
        if (msg.length < length) {
          msg.copy(buf);
          return buf;
        }
        return msg.slice(0, length);
      } else {
        if (msg.length < length) {
          msg.copy(buf, length - msg.length);
          return buf;
        }
        return msg.slice(-length);
      }
    };
    const setLengthLeft = function(msg, length) {
      (0, helpers_12.assertIsBuffer)(msg);
      return setLength(msg, length, false);
    };
    exports2.setLengthLeft = setLengthLeft;
    const setLengthRight = function(msg, length) {
      (0, helpers_12.assertIsBuffer)(msg);
      return setLength(msg, length, true);
    };
    exports2.setLengthRight = setLengthRight;
    const stripZeros2 = function(a) {
      let first = a[0];
      while (a.length > 0 && first.toString() === "0") {
        a = a.slice(1);
        first = a[0];
      }
      return a;
    };
    const unpadBuffer = function(a) {
      (0, helpers_12.assertIsBuffer)(a);
      return stripZeros2(a);
    };
    exports2.unpadBuffer = unpadBuffer;
    const unpadArray = function(a) {
      (0, helpers_12.assertIsArray)(a);
      return stripZeros2(a);
    };
    exports2.unpadArray = unpadArray;
    const unpadHexString = function(a) {
      (0, helpers_12.assertIsHexString)(a);
      a = (0, internal_12.stripHexPrefix)(a);
      return "0x" + stripZeros2(a);
    };
    exports2.unpadHexString = unpadHexString;
    const toBuffer2 = function(v) {
      if (v === null || v === void 0) {
        return Buffer.allocUnsafe(0);
      }
      if (Buffer.isBuffer(v)) {
        return Buffer.from(v);
      }
      if (Array.isArray(v) || v instanceof Uint8Array) {
        return Buffer.from(v);
      }
      if (typeof v === "string") {
        if (!(0, internal_12.isHexString)(v)) {
          throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);
        }
        return Buffer.from((0, internal_12.padToEven)((0, internal_12.stripHexPrefix)(v)), "hex");
      }
      if (typeof v === "number") {
        return (0, exports2.intToBuffer)(v);
      }
      if (typeof v === "bigint") {
        if (v < BigInt(0)) {
          throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`);
        }
        let n = v.toString(16);
        if (n.length % 2)
          n = "0" + n;
        return Buffer.from(n, "hex");
      }
      if (v.toArray) {
        return Buffer.from(v.toArray());
      }
      if (v.toBuffer) {
        return Buffer.from(v.toBuffer());
      }
      throw new Error("invalid type");
    };
    exports2.toBuffer = toBuffer2;
    const bufferToHex = function(buf) {
      buf = (0, exports2.toBuffer)(buf);
      return "0x" + buf.toString("hex");
    };
    exports2.bufferToHex = bufferToHex;
    function bufferToBigInt(buf) {
      const hex2 = (0, exports2.bufferToHex)(buf);
      if (hex2 === "0x") {
        return BigInt(0);
      }
      return BigInt(hex2);
    }
    exports2.bufferToBigInt = bufferToBigInt;
    function bigIntToBuffer(num) {
      return (0, exports2.toBuffer)("0x" + num.toString(16));
    }
    exports2.bigIntToBuffer = bigIntToBuffer;
    const bufferToInt = function(buf) {
      const res = Number(bufferToBigInt(buf));
      if (!Number.isSafeInteger(res))
        throw new Error("Number exceeds 53 bits");
      return res;
    };
    exports2.bufferToInt = bufferToInt;
    const fromSigned = function(num) {
      return BigInt.asIntN(256, bufferToBigInt(num));
    };
    exports2.fromSigned = fromSigned;
    const toUnsigned = function(num) {
      return bigIntToBuffer(BigInt.asUintN(256, num));
    };
    exports2.toUnsigned = toUnsigned;
    const addHexPrefix = function(str) {
      if (typeof str !== "string") {
        return str;
      }
      return (0, internal_12.isHexPrefixed)(str) ? str : "0x" + str;
    };
    exports2.addHexPrefix = addHexPrefix;
    function short2(buffer2, maxLength = 50) {
      const bufferStr = Buffer.isBuffer(buffer2) ? buffer2.toString("hex") : buffer2;
      if (bufferStr.length <= maxLength) {
        return bufferStr;
      }
      return bufferStr.slice(0, maxLength) + "…";
    }
    exports2.short = short2;
    const toUtf8 = function(hex2) {
      const zerosRegexp = /^(00)+|(00)+$/g;
      hex2 = (0, internal_12.stripHexPrefix)(hex2);
      if (hex2.length % 2 !== 0) {
        throw new Error("Invalid non-even hex string input for toUtf8() provided");
      }
      const bufferVal = Buffer.from(hex2.replace(zerosRegexp, ""), "hex");
      return bufferVal.toString("utf8");
    };
    exports2.toUtf8 = toUtf8;
    const baToJSON = function(ba) {
      if (Buffer.isBuffer(ba)) {
        return `0x${ba.toString("hex")}`;
      } else if (ba instanceof Array) {
        const array2 = [];
        for (let i2 = 0; i2 < ba.length; i2++) {
          array2.push((0, exports2.baToJSON)(ba[i2]));
        }
        return array2;
      }
    };
    exports2.baToJSON = baToJSON;
    const validateNoLeadingZeroes = function(values) {
      for (const [k, v] of Object.entries(values)) {
        if (v !== void 0 && v.length > 0 && v[0] === 0) {
          throw new Error(`${k} cannot have leading zeroes, received: ${v.toString("hex")}`);
        }
      }
    };
    exports2.validateNoLeadingZeroes = validateNoLeadingZeroes;
    function arrToBufArr(arr) {
      if (!Array.isArray(arr)) {
        return Buffer.from(arr);
      }
      return arr.map((a) => arrToBufArr(a));
    }
    exports2.arrToBufArr = arrToBufArr;
    function bufArrToArr(arr) {
      if (!Array.isArray(arr)) {
        return Uint8Array.from(arr != null ? arr : []);
      }
      return arr.map((a) => bufArrToArr(a));
    }
    exports2.bufArrToArr = bufArrToArr;
    const bigIntToHex2 = (num) => {
      return "0x" + num.toString(16);
    };
    exports2.bigIntToHex = bigIntToHex2;
    function bigIntToUnpaddedBuffer(value) {
      return (0, exports2.unpadBuffer)(bigIntToBuffer(value));
    }
    exports2.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;
    function intToUnpaddedBuffer(value) {
      return (0, exports2.unpadBuffer)((0, exports2.intToBuffer)(value));
    }
    exports2.intToUnpaddedBuffer = intToUnpaddedBuffer;
  })(bytes$2);
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.accountBodyToRLP = exports2.accountBodyToSlim = exports2.accountBodyFromSlim = exports2.isZeroAddress = exports2.zeroAddress = exports2.importPublic = exports2.privateToAddress = exports2.privateToPublic = exports2.publicToAddress = exports2.pubToAddress = exports2.isValidPublic = exports2.isValidPrivate = exports2.generateAddress2 = exports2.generateAddress = exports2.isValidChecksumAddress = exports2.toChecksumAddress = exports2.isValidAddress = exports2.Account = void 0;
    const rlp_12 = dist$3;
    const keccak_12 = keccak;
    const secp256k1_12 = secp256k1$1;
    const utils_12 = utilsExports;
    const bytes_12 = bytes$2;
    const constants_12 = constants$3;
    const helpers_12 = helpers$1;
    const internal_12 = internal;
    const _0n2 = BigInt(0);
    class Account {
      /**
       * This constructor assigns and validates the values.
       * Use the static factory methods to assist in creating an Account from varying data types.
       */
      constructor(nonce = _0n2, balance = _0n2, storageRoot = constants_12.KECCAK256_RLP, codeHash = constants_12.KECCAK256_NULL) {
        this.nonce = nonce;
        this.balance = balance;
        this.storageRoot = storageRoot;
        this.codeHash = codeHash;
        this._validate();
      }
      static fromAccountData(accountData) {
        const { nonce, balance, storageRoot, codeHash } = accountData;
        return new Account(nonce !== void 0 ? (0, bytes_12.bufferToBigInt)((0, bytes_12.toBuffer)(nonce)) : void 0, balance !== void 0 ? (0, bytes_12.bufferToBigInt)((0, bytes_12.toBuffer)(balance)) : void 0, storageRoot !== void 0 ? (0, bytes_12.toBuffer)(storageRoot) : void 0, codeHash !== void 0 ? (0, bytes_12.toBuffer)(codeHash) : void 0);
      }
      static fromRlpSerializedAccount(serialized) {
        const values = (0, bytes_12.arrToBufArr)(rlp_12.RLP.decode(Uint8Array.from(serialized)));
        if (!Array.isArray(values)) {
          throw new Error("Invalid serialized account input. Must be array");
        }
        return this.fromValuesArray(values);
      }
      static fromValuesArray(values) {
        const [nonce, balance, storageRoot, codeHash] = values;
        return new Account((0, bytes_12.bufferToBigInt)(nonce), (0, bytes_12.bufferToBigInt)(balance), storageRoot, codeHash);
      }
      _validate() {
        if (this.nonce < _0n2) {
          throw new Error("nonce must be greater than zero");
        }
        if (this.balance < _0n2) {
          throw new Error("balance must be greater than zero");
        }
        if (this.storageRoot.length !== 32) {
          throw new Error("storageRoot must have a length of 32");
        }
        if (this.codeHash.length !== 32) {
          throw new Error("codeHash must have a length of 32");
        }
      }
      /**
       * Returns a Buffer Array of the raw Buffers for the account, in order.
       */
      raw() {
        return [
          (0, bytes_12.bigIntToUnpaddedBuffer)(this.nonce),
          (0, bytes_12.bigIntToUnpaddedBuffer)(this.balance),
          this.storageRoot,
          this.codeHash
        ];
      }
      /**
       * Returns the RLP serialization of the account as a `Buffer`.
       */
      serialize() {
        return Buffer.from(rlp_12.RLP.encode((0, bytes_12.bufArrToArr)(this.raw())));
      }
      /**
       * Returns a `Boolean` determining if the account is a contract.
       */
      isContract() {
        return !this.codeHash.equals(constants_12.KECCAK256_NULL);
      }
      /**
       * Returns a `Boolean` determining if the account is empty complying to the definition of
       * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):
       * "An account is considered empty when it has no code and zero nonce and zero balance."
       */
      isEmpty() {
        return this.balance === _0n2 && this.nonce === _0n2 && this.codeHash.equals(constants_12.KECCAK256_NULL);
      }
    }
    exports2.Account = Account;
    const isValidAddress = function(hexAddress) {
      try {
        (0, helpers_12.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
    };
    exports2.isValidAddress = isValidAddress;
    const toChecksumAddress = function(hexAddress, eip1191ChainId) {
      (0, helpers_12.assertIsHexString)(hexAddress);
      const address2 = (0, internal_12.stripHexPrefix)(hexAddress).toLowerCase();
      let prefix = "";
      if (eip1191ChainId !== void 0) {
        const chainId = (0, bytes_12.bufferToBigInt)((0, bytes_12.toBuffer)(eip1191ChainId));
        prefix = chainId.toString() + "0x";
      }
      const buf = Buffer.from(prefix + address2, "utf8");
      const hash2 = (0, utils_12.bytesToHex)((0, keccak_12.keccak256)(buf));
      let ret = "0x";
      for (let i2 = 0; i2 < address2.length; i2++) {
        if (parseInt(hash2[i2], 16) >= 8) {
          ret += address2[i2].toUpperCase();
        } else {
          ret += address2[i2];
        }
      }
      return ret;
    };
    exports2.toChecksumAddress = toChecksumAddress;
    const isValidChecksumAddress = function(hexAddress, eip1191ChainId) {
      return (0, exports2.isValidAddress)(hexAddress) && (0, exports2.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
    };
    exports2.isValidChecksumAddress = isValidChecksumAddress;
    const generateAddress = function(from, nonce) {
      (0, helpers_12.assertIsBuffer)(from);
      (0, helpers_12.assertIsBuffer)(nonce);
      if ((0, bytes_12.bufferToBigInt)(nonce) === BigInt(0)) {
        return Buffer.from((0, keccak_12.keccak256)(rlp_12.RLP.encode((0, bytes_12.bufArrToArr)([from, null])))).slice(-20);
      }
      return Buffer.from((0, keccak_12.keccak256)(rlp_12.RLP.encode((0, bytes_12.bufArrToArr)([from, nonce])))).slice(-20);
    };
    exports2.generateAddress = generateAddress;
    const generateAddress2 = function(from, salt, initCode) {
      (0, helpers_12.assertIsBuffer)(from);
      (0, helpers_12.assertIsBuffer)(salt);
      (0, helpers_12.assertIsBuffer)(initCode);
      if (from.length !== 20) {
        throw new Error("Expected from to be of length 20");
      }
      if (salt.length !== 32) {
        throw new Error("Expected salt to be of length 32");
      }
      const address2 = (0, keccak_12.keccak256)(Buffer.concat([Buffer.from("ff", "hex"), from, salt, (0, keccak_12.keccak256)(initCode)]));
      return (0, bytes_12.toBuffer)(address2).slice(-20);
    };
    exports2.generateAddress2 = generateAddress2;
    const isValidPrivate = function(privateKey) {
      return secp256k1_12.secp256k1.utils.isValidPrivateKey(privateKey);
    };
    exports2.isValidPrivate = isValidPrivate;
    const isValidPublic = function(publicKey, sanitize = false) {
      (0, helpers_12.assertIsBuffer)(publicKey);
      if (publicKey.length === 64) {
        try {
          secp256k1_12.secp256k1.ProjectivePoint.fromHex(Buffer.concat([Buffer.from([4]), publicKey]));
          return true;
        } catch (e) {
          return false;
        }
      }
      if (!sanitize) {
        return false;
      }
      try {
        secp256k1_12.secp256k1.ProjectivePoint.fromHex(publicKey);
        return true;
      } catch (e) {
        return false;
      }
    };
    exports2.isValidPublic = isValidPublic;
    const pubToAddress = function(pubKey, sanitize = false) {
      (0, helpers_12.assertIsBuffer)(pubKey);
      if (sanitize && pubKey.length !== 64) {
        pubKey = Buffer.from(secp256k1_12.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1));
      }
      if (pubKey.length !== 64) {
        throw new Error("Expected pubKey to be of length 64");
      }
      return Buffer.from((0, keccak_12.keccak256)(pubKey)).slice(-20);
    };
    exports2.pubToAddress = pubToAddress;
    exports2.publicToAddress = exports2.pubToAddress;
    const privateToPublic = function(privateKey) {
      (0, helpers_12.assertIsBuffer)(privateKey);
      return Buffer.from(secp256k1_12.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1));
    };
    exports2.privateToPublic = privateToPublic;
    const privateToAddress = function(privateKey) {
      return (0, exports2.publicToAddress)((0, exports2.privateToPublic)(privateKey));
    };
    exports2.privateToAddress = privateToAddress;
    const importPublic = function(publicKey) {
      (0, helpers_12.assertIsBuffer)(publicKey);
      if (publicKey.length !== 64) {
        publicKey = Buffer.from(secp256k1_12.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1));
      }
      return publicKey;
    };
    exports2.importPublic = importPublic;
    const zeroAddress = function() {
      const addressLength = 20;
      const addr = (0, bytes_12.zeros)(addressLength);
      return (0, bytes_12.bufferToHex)(addr);
    };
    exports2.zeroAddress = zeroAddress;
    const isZeroAddress = function(hexAddress) {
      try {
        (0, helpers_12.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      const zeroAddr = (0, exports2.zeroAddress)();
      return zeroAddr === hexAddress;
    };
    exports2.isZeroAddress = isZeroAddress;
    function accountBodyFromSlim(body) {
      const [nonce, balance, storageRoot, codeHash] = body;
      return [
        nonce,
        balance,
        (0, bytes_12.arrToBufArr)(storageRoot).length === 0 ? constants_12.KECCAK256_RLP : storageRoot,
        (0, bytes_12.arrToBufArr)(codeHash).length === 0 ? constants_12.KECCAK256_NULL : codeHash
      ];
    }
    exports2.accountBodyFromSlim = accountBodyFromSlim;
    const emptyUint8Arr = new Uint8Array(0);
    function accountBodyToSlim(body) {
      const [nonce, balance, storageRoot, codeHash] = body;
      return [
        nonce,
        balance,
        (0, bytes_12.arrToBufArr)(storageRoot).equals(constants_12.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,
        (0, bytes_12.arrToBufArr)(codeHash).equals(constants_12.KECCAK256_NULL) ? emptyUint8Arr : codeHash
      ];
    }
    exports2.accountBodyToSlim = accountBodyToSlim;
    function accountBodyToRLP(body, couldBeSlim = true) {
      const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;
      return (0, bytes_12.arrToBufArr)(rlp_12.RLP.encode(accountBody));
    }
    exports2.accountBodyToRLP = accountBodyToRLP;
  })(account);
  var address$1 = {};
  Object.defineProperty(address$1, "__esModule", { value: true });
  address$1.Address = void 0;
  const account_1 = account;
  const bytes_1$4 = bytes$2;
  class Address {
    constructor(buf) {
      if (buf.length !== 20) {
        throw new Error("Invalid address length");
      }
      this.buf = buf;
    }
    /**
     * Returns the zero address.
     */
    static zero() {
      return new Address((0, bytes_1$4.zeros)(20));
    }
    /**
     * Returns an Address object from a hex-encoded string.
     * @param str - Hex-encoded address
     */
    static fromString(str) {
      if (!(0, account_1.isValidAddress)(str)) {
        throw new Error("Invalid address");
      }
      return new Address((0, bytes_1$4.toBuffer)(str));
    }
    /**
     * Returns an address for a given public key.
     * @param pubKey The two points of an uncompressed key
     */
    static fromPublicKey(pubKey) {
      if (!Buffer.isBuffer(pubKey)) {
        throw new Error("Public key should be Buffer");
      }
      const buf = (0, account_1.pubToAddress)(pubKey);
      return new Address(buf);
    }
    /**
     * Returns an address for a given private key.
     * @param privateKey A private key must be 256 bits wide
     */
    static fromPrivateKey(privateKey) {
      if (!Buffer.isBuffer(privateKey)) {
        throw new Error("Private key should be Buffer");
      }
      const buf = (0, account_1.privateToAddress)(privateKey);
      return new Address(buf);
    }
    /**
     * Generates an address for a newly created contract.
     * @param from The address which is creating this new address
     * @param nonce The nonce of the from account
     */
    static generate(from, nonce) {
      if (typeof nonce !== "bigint") {
        throw new Error("Expected nonce to be a bigint");
      }
      return new Address((0, account_1.generateAddress)(from.buf, (0, bytes_1$4.bigIntToBuffer)(nonce)));
    }
    /**
     * Generates an address for a contract created using CREATE2.
     * @param from The address which is creating this new address
     * @param salt A salt
     * @param initCode The init code of the contract being created
     */
    static generate2(from, salt, initCode) {
      if (!Buffer.isBuffer(salt)) {
        throw new Error("Expected salt to be a Buffer");
      }
      if (!Buffer.isBuffer(initCode)) {
        throw new Error("Expected initCode to be a Buffer");
      }
      return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));
    }
    /**
     * Is address equal to another.
     */
    equals(address2) {
      return this.buf.equals(address2.buf);
    }
    /**
     * Is address zero.
     */
    isZero() {
      return this.equals(Address.zero());
    }
    /**
     * True if address is in the address range defined
     * by EIP-1352
     */
    isPrecompileOrSystemAddress() {
      const address2 = (0, bytes_1$4.bufferToBigInt)(this.buf);
      const rangeMin = BigInt(0);
      const rangeMax = BigInt("0xffff");
      return address2 >= rangeMin && address2 <= rangeMax;
    }
    /**
     * Returns hex encoding of address.
     */
    toString() {
      return "0x" + this.buf.toString("hex");
    }
    /**
     * Returns Buffer representation of address.
     */
    toBuffer() {
      return Buffer.from(this.buf);
    }
  }
  address$1.Address = Address;
  var withdrawal = {};
  var types$2 = {};
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toType = exports2.TypeOutput = void 0;
    const bytes_12 = bytes$2;
    const internal_12 = internal;
    var TypeOutput;
    (function(TypeOutput2) {
      TypeOutput2[TypeOutput2["Number"] = 0] = "Number";
      TypeOutput2[TypeOutput2["BigInt"] = 1] = "BigInt";
      TypeOutput2[TypeOutput2["Buffer"] = 2] = "Buffer";
      TypeOutput2[TypeOutput2["PrefixedHexString"] = 3] = "PrefixedHexString";
    })(TypeOutput = exports2.TypeOutput || (exports2.TypeOutput = {}));
    function toType(input, outputType) {
      if (input === null) {
        return null;
      }
      if (input === void 0) {
        return void 0;
      }
      if (typeof input === "string" && !(0, internal_12.isHexString)(input)) {
        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);
      } else if (typeof input === "number" && !Number.isSafeInteger(input)) {
        throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
      }
      const output2 = (0, bytes_12.toBuffer)(input);
      switch (outputType) {
        case TypeOutput.Buffer:
          return output2;
        case TypeOutput.BigInt:
          return (0, bytes_12.bufferToBigInt)(output2);
        case TypeOutput.Number: {
          const bigInt = (0, bytes_12.bufferToBigInt)(output2);
          if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {
            throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
          }
          return Number(bigInt);
        }
        case TypeOutput.PrefixedHexString:
          return (0, bytes_12.bufferToHex)(output2);
        default:
          throw new Error("unknown outputType");
      }
    }
    exports2.toType = toType;
  })(types$2);
  Object.defineProperty(withdrawal, "__esModule", { value: true });
  withdrawal.Withdrawal = void 0;
  const address_1 = address$1;
  const bytes_1$3 = bytes$2;
  const types_1 = types$2;
  class Withdrawal {
    /**
     * This constructor assigns and validates the values.
     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.
     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot
     */
    constructor(index, validatorIndex, address2, amount) {
      this.index = index;
      this.validatorIndex = validatorIndex;
      this.address = address2;
      this.amount = amount;
    }
    static fromWithdrawalData(withdrawalData) {
      const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData } = withdrawalData;
      const index = (0, types_1.toType)(indexData, types_1.TypeOutput.BigInt);
      const validatorIndex = (0, types_1.toType)(validatorIndexData, types_1.TypeOutput.BigInt);
      const address2 = new address_1.Address((0, types_1.toType)(addressData, types_1.TypeOutput.Buffer));
      const amount = (0, types_1.toType)(amountData, types_1.TypeOutput.BigInt);
      return new Withdrawal(index, validatorIndex, address2, amount);
    }
    static fromValuesArray(withdrawalArray) {
      if (withdrawalArray.length !== 4) {
        throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);
      }
      const [index, validatorIndex, address2, amount] = withdrawalArray;
      return Withdrawal.fromWithdrawalData({ index, validatorIndex, address: address2, amount });
    }
    /**
     * Convert a withdrawal to a buffer array
     * @param withdrawal the withdrawal to convert
     * @returns buffer array of the withdrawal
     */
    static toBufferArray(withdrawal2) {
      const { index, validatorIndex, address: address2, amount } = withdrawal2;
      const indexBuffer = (0, types_1.toType)(index, types_1.TypeOutput.BigInt) === BigInt(0) ? Buffer.alloc(0) : (0, types_1.toType)(index, types_1.TypeOutput.Buffer);
      const validatorIndexBuffer = (0, types_1.toType)(validatorIndex, types_1.TypeOutput.BigInt) === BigInt(0) ? Buffer.alloc(0) : (0, types_1.toType)(validatorIndex, types_1.TypeOutput.Buffer);
      let addressBuffer;
      if (address2 instanceof address_1.Address) {
        addressBuffer = address2.buf;
      } else {
        addressBuffer = (0, types_1.toType)(address2, types_1.TypeOutput.Buffer);
      }
      const amountBuffer = (0, types_1.toType)(amount, types_1.TypeOutput.BigInt) === BigInt(0) ? Buffer.alloc(0) : (0, types_1.toType)(amount, types_1.TypeOutput.Buffer);
      return [indexBuffer, validatorIndexBuffer, addressBuffer, amountBuffer];
    }
    raw() {
      return Withdrawal.toBufferArray(this);
    }
    toValue() {
      return {
        index: this.index,
        validatorIndex: this.validatorIndex,
        address: this.address.buf,
        amount: this.amount
      };
    }
    toJSON() {
      return {
        index: (0, bytes_1$3.bigIntToHex)(this.index),
        validatorIndex: (0, bytes_1$3.bigIntToHex)(this.validatorIndex),
        address: "0x" + this.address.buf.toString("hex"),
        amount: (0, bytes_1$3.bigIntToHex)(this.amount)
      };
    }
  }
  withdrawal.Withdrawal = Withdrawal;
  var signature = {};
  Object.defineProperty(signature, "__esModule", { value: true });
  signature.hashPersonalMessage = signature.isValidSignature = signature.fromRpcSig = signature.toCompactSig = signature.toRpcSig = signature.ecrecover = signature.ecsign = void 0;
  const keccak_1$1 = keccak;
  const secp256k1_1 = secp256k1$1;
  const bytes_1$2 = bytes$2;
  const constants_1 = constants$3;
  const helpers_1 = helpers$1;
  function ecsign(msgHash, privateKey, chainId) {
    const sig = secp256k1_1.secp256k1.sign(msgHash, privateKey);
    const buf = sig.toCompactRawBytes();
    const r2 = Buffer.from(buf.slice(0, 32));
    const s2 = Buffer.from(buf.slice(32, 64));
    const v = chainId === void 0 ? BigInt(sig.recovery + 27) : BigInt(sig.recovery + 35) + BigInt(chainId) * BigInt(2);
    return { r: r2, s: s2, v };
  }
  signature.ecsign = ecsign;
  function calculateSigRecovery(v, chainId) {
    if (v === BigInt(0) || v === BigInt(1))
      return v;
    if (chainId === void 0) {
      return v - BigInt(27);
    }
    return v - (chainId * BigInt(2) + BigInt(35));
  }
  function isValidSigRecovery(recovery) {
    return recovery === BigInt(0) || recovery === BigInt(1);
  }
  const ecrecover = function(msgHash, v, r2, s2, chainId) {
    const signature2 = Buffer.concat([(0, bytes_1$2.setLengthLeft)(r2, 32), (0, bytes_1$2.setLengthLeft)(s2, 32)], 64);
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
      throw new Error("Invalid signature v value");
    }
    const sig = secp256k1_1.secp256k1.Signature.fromCompact(signature2).addRecoveryBit(Number(recovery));
    const senderPubKey = sig.recoverPublicKey(msgHash);
    return Buffer.from(senderPubKey.toRawBytes(false).slice(1));
  };
  signature.ecrecover = ecrecover;
  const toRpcSig = function(v, r2, s2, chainId) {
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
      throw new Error("Invalid signature v value");
    }
    return (0, bytes_1$2.bufferToHex)(Buffer.concat([(0, bytes_1$2.setLengthLeft)(r2, 32), (0, bytes_1$2.setLengthLeft)(s2, 32), (0, bytes_1$2.toBuffer)(v)]));
  };
  signature.toRpcSig = toRpcSig;
  const toCompactSig = function(v, r2, s2, chainId) {
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
      throw new Error("Invalid signature v value");
    }
    let ss = s2;
    if (v > BigInt(28) && v % BigInt(2) === BigInt(1) || v === BigInt(1) || v === BigInt(28)) {
      ss = Buffer.from(s2);
      ss[0] |= 128;
    }
    return (0, bytes_1$2.bufferToHex)(Buffer.concat([(0, bytes_1$2.setLengthLeft)(r2, 32), (0, bytes_1$2.setLengthLeft)(ss, 32)]));
  };
  signature.toCompactSig = toCompactSig;
  const fromRpcSig = function(sig) {
    const buf = (0, bytes_1$2.toBuffer)(sig);
    let r2;
    let s2;
    let v;
    if (buf.length >= 65) {
      r2 = buf.slice(0, 32);
      s2 = buf.slice(32, 64);
      v = (0, bytes_1$2.bufferToBigInt)(buf.slice(64));
    } else if (buf.length === 64) {
      r2 = buf.slice(0, 32);
      s2 = buf.slice(32, 64);
      v = BigInt((0, bytes_1$2.bufferToInt)(buf.slice(32, 33)) >> 7);
      s2[0] &= 127;
    } else {
      throw new Error("Invalid signature length");
    }
    if (v < 27) {
      v = v + BigInt(27);
    }
    return {
      v,
      r: r2,
      s: s2
    };
  };
  signature.fromRpcSig = fromRpcSig;
  const isValidSignature = function(v, r2, s2, homesteadOrLater = true, chainId) {
    if (r2.length !== 32 || s2.length !== 32) {
      return false;
    }
    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
      return false;
    }
    const rBigInt = (0, bytes_1$2.bufferToBigInt)(r2);
    const sBigInt = (0, bytes_1$2.bufferToBigInt)(s2);
    if (rBigInt === BigInt(0) || rBigInt >= constants_1.SECP256K1_ORDER || sBigInt === BigInt(0) || sBigInt >= constants_1.SECP256K1_ORDER) {
      return false;
    }
    if (homesteadOrLater && sBigInt >= constants_1.SECP256K1_ORDER_DIV_2) {
      return false;
    }
    return true;
  };
  signature.isValidSignature = isValidSignature;
  const hashPersonalMessage = function(message) {
    (0, helpers_1.assertIsBuffer)(message);
    const prefix = Buffer.from(`Ethereum Signed Message:
${message.length}`, "utf-8");
    return Buffer.from((0, keccak_1$1.keccak256)(Buffer.concat([prefix, message])));
  };
  signature.hashPersonalMessage = hashPersonalMessage;
  var encoding = {};
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.compactBytesToNibbles = exports2.bytesToNibbles = exports2.nibblesToCompactBytes = exports2.nibblesToBytes = exports2.hasTerminator = void 0;
    const hasTerminator = (nibbles) => {
      return nibbles.length > 0 && nibbles[nibbles.length - 1] === 16;
    };
    exports2.hasTerminator = hasTerminator;
    const nibblesToBytes = (nibbles, bytes2) => {
      for (let bi = 0, ni = 0; ni < nibbles.length; bi += 1, ni += 2) {
        bytes2[bi] = nibbles[ni] << 4 | nibbles[ni + 1];
      }
    };
    exports2.nibblesToBytes = nibblesToBytes;
    const nibblesToCompactBytes = (nibbles) => {
      let terminator = 0;
      if ((0, exports2.hasTerminator)(nibbles)) {
        terminator = 1;
        nibbles = nibbles.subarray(0, nibbles.length - 1);
      }
      const buf = new Uint8Array(nibbles.length / 2 + 1);
      buf[0] = terminator << 5;
      if ((nibbles.length & 1) === 1) {
        buf[0] |= 1 << 4;
        buf[0] |= nibbles[0];
        nibbles = nibbles.subarray(1);
      }
      (0, exports2.nibblesToBytes)(nibbles, buf.subarray(1));
      return buf;
    };
    exports2.nibblesToCompactBytes = nibblesToCompactBytes;
    const bytesToNibbles = (str) => {
      const l = str.length * 2 + 1;
      const nibbles = new Uint8Array(l);
      for (let i2 = 0; i2 < str.length; i2++) {
        const b = str[i2];
        nibbles[i2 * 2] = b / 16;
        nibbles[i2 * 2 + 1] = b % 16;
      }
      nibbles[l - 1] = 16;
      return nibbles;
    };
    exports2.bytesToNibbles = bytesToNibbles;
    const compactBytesToNibbles = (compact2) => {
      if (compact2.length === 0) {
        return compact2;
      }
      let base2 = (0, exports2.bytesToNibbles)(compact2);
      if (base2[0] < 2) {
        base2 = base2.subarray(0, base2.length - 1);
      }
      const chop = 2 - (base2[0] & 1);
      return base2.subarray(chop);
    };
    exports2.compactBytesToNibbles = compactBytesToNibbles;
  })(encoding);
  var asyncEventEmitter = {};
  Object.defineProperty(asyncEventEmitter, "__esModule", { value: true });
  asyncEventEmitter.AsyncEventEmitter = void 0;
  const events_1 = eventsExports;
  function runInSeries(context, tasks, data) {
    return __async(this, null, function* () {
      let error2;
      try {
        for (var iter = __forAwait(tasks), more, temp, error3; more = !(temp = yield iter.next()).done; more = false) {
          const task = temp.value;
          try {
            if (task.length < 2) {
              task.call(context, data);
            } else {
              yield new Promise((resolve2, reject) => {
                task.call(context, data, (error4) => {
                  if (error4) {
                    reject(error4);
                  } else {
                    resolve2();
                  }
                });
              });
            }
          } catch (e) {
            error2 = e;
          }
        }
      } catch (temp) {
        error3 = [temp];
      } finally {
        try {
          more && (temp = iter.return) && (yield temp.call(iter));
        } finally {
          if (error3)
            throw error3[0];
        }
      }
      if (error2) {
        throw error2;
      }
    });
  }
  class AsyncEventEmitter extends events_1.EventEmitter {
    emit(event, ...args) {
      var _a2;
      let [data, callback] = args;
      const self2 = this;
      let listeners = (_a2 = self2._events[event]) != null ? _a2 : [];
      if (callback === void 0 && typeof data === "function") {
        callback = data;
        data = void 0;
      }
      if (event === "newListener" || event === "removeListener") {
        data = {
          event: data,
          fn: callback
        };
        callback = void 0;
      }
      listeners = Array.isArray(listeners) ? listeners : [listeners];
      runInSeries(self2, listeners.slice(), data).then(callback).catch(callback);
      return self2.listenerCount(event) > 0;
    }
    once(event, listener) {
      const self2 = this;
      let g;
      if (typeof listener !== "function") {
        throw new TypeError("listener must be a function");
      }
      if (listener.length >= 2) {
        g = function(e, next) {
          self2.removeListener(event, g);
          void listener(e, next);
        };
      } else {
        g = function(e) {
          self2.removeListener(event, g);
          void listener(e, g);
        };
      }
      self2.on(event, g);
      return self2;
    }
    first(event, listener) {
      var _a2;
      let listeners = (_a2 = this._events[event]) != null ? _a2 : [];
      if (typeof listener !== "function") {
        throw new TypeError("listener must be a function");
      }
      if (!Array.isArray(listeners)) {
        this._events[event] = listeners = [listeners];
      }
      listeners.unshift(listener);
      return this;
    }
    before(event, target, listener) {
      return this.beforeOrAfter(event, target, listener);
    }
    after(event, target, listener) {
      return this.beforeOrAfter(event, target, listener, "after");
    }
    beforeOrAfter(event, target, listener, beforeOrAfter) {
      var _a2;
      let listeners = (_a2 = this._events[event]) != null ? _a2 : [];
      let i2;
      let index;
      const add2 = beforeOrAfter === "after" ? 1 : 0;
      if (typeof listener !== "function") {
        throw new TypeError("listener must be a function");
      }
      if (typeof target !== "function") {
        throw new TypeError("target must be a function");
      }
      if (!Array.isArray(listeners)) {
        this._events[event] = listeners = [listeners];
      }
      index = listeners.length;
      for (i2 = listeners.length; i2--; ) {
        if (listeners[i2] === target) {
          index = i2 + add2;
          break;
        }
      }
      listeners.splice(index, 0, listener);
      return this;
    }
    on(event, listener) {
      return super.on(event, listener);
    }
    addListener(event, listener) {
      return super.addListener(event, listener);
    }
    prependListener(event, listener) {
      return super.prependListener(event, listener);
    }
    prependOnceListener(event, listener) {
      return super.prependOnceListener(event, listener);
    }
    removeAllListeners(event) {
      return super.removeAllListeners(event);
    }
    removeListener(event, listener) {
      return super.removeListener(event, listener);
    }
    eventNames() {
      return super.eventNames();
    }
    listeners(event) {
      return super.listeners(event);
    }
    listenerCount(event) {
      return super.listenerCount(event);
    }
    getMaxListeners() {
      return super.getMaxListeners();
    }
    setMaxListeners(maxListeners) {
      return super.setMaxListeners(maxListeners);
    }
  }
  asyncEventEmitter.AsyncEventEmitter = AsyncEventEmitter;
  var lock = {};
  Object.defineProperty(lock, "__esModule", { value: true });
  lock.Lock = void 0;
  class Lock {
    constructor() {
      this.permits = 1;
      this.promiseResolverQueue = [];
    }
    /**
     * Returns a promise used to wait for a permit to become available. This method should be awaited on.
     * @returns  A promise that gets resolved when execution is allowed to proceed.
     */
    acquire() {
      return __async(this, null, function* () {
        if (this.permits > 0) {
          this.permits -= 1;
          return Promise.resolve(true);
        }
        return new Promise((resolver) => this.promiseResolverQueue.push(resolver));
      });
    }
    /**
     * Increases the number of permits by one. If there are other functions waiting, one of them will
     * continue to execute in a future iteration of the event loop.
     */
    release() {
      this.permits += 1;
      if (this.permits > 1 && this.promiseResolverQueue.length > 0) {
        console.warn("Lock.permits should never be > 0 when there is someone waiting.");
      } else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {
        this.permits -= 1;
        const nextResolver = this.promiseResolverQueue.shift();
        if (nextResolver) {
          nextResolver(true);
        }
      }
    }
  }
  lock.Lock = Lock;
  var provider = {};
  var microFtch = {};
  var streamHttp = {};
  var request = { exports: {} };
  var capability = {};
  var hasRequiredCapability;
  function requireCapability() {
    if (hasRequiredCapability) return capability;
    hasRequiredCapability = 1;
    (function(exports2) {
      exports2.fetch = isFunction2(commonjsGlobal.fetch) && isFunction2(commonjsGlobal.ReadableStream);
      exports2.writableStream = isFunction2(commonjsGlobal.WritableStream);
      exports2.abortController = isFunction2(commonjsGlobal.AbortController);
      var xhr;
      function getXHR() {
        if (xhr !== void 0) return xhr;
        if (commonjsGlobal.XMLHttpRequest) {
          xhr = new commonjsGlobal.XMLHttpRequest();
          try {
            xhr.open("GET", commonjsGlobal.XDomainRequest ? "/" : "https://example.com");
          } catch (e) {
            xhr = null;
          }
        } else {
          xhr = null;
        }
        return xhr;
      }
      function checkTypeSupport(type2) {
        var xhr2 = getXHR();
        if (!xhr2) return false;
        try {
          xhr2.responseType = type2;
          return xhr2.responseType === type2;
        } catch (e) {
        }
        return false;
      }
      exports2.arraybuffer = exports2.fetch || checkTypeSupport("arraybuffer");
      exports2.msstream = !exports2.fetch && checkTypeSupport("ms-stream");
      exports2.mozchunkedarraybuffer = !exports2.fetch && checkTypeSupport("moz-chunked-arraybuffer");
      exports2.overrideMimeType = exports2.fetch || (getXHR() ? isFunction2(getXHR().overrideMimeType) : false);
      function isFunction2(value) {
        return typeof value === "function";
      }
      xhr = null;
    })(capability);
    return capability;
  }
  var response = {};
  var hasRequiredResponse;
  function requireResponse() {
    if (hasRequiredResponse) return response;
    hasRequiredResponse = 1;
    var capability2 = requireCapability();
    var inherits2 = requireInherits_browser();
    var stream = requireReadableBrowser$1();
    var rStates = response.readyStates = {
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4
    };
    var IncomingMessage = response.IncomingMessage = function(xhr, response2, mode, resetTimers) {
      var self2 = this;
      stream.Readable.call(self2);
      self2._mode = mode;
      self2.headers = {};
      self2.rawHeaders = [];
      self2.trailers = {};
      self2.rawTrailers = [];
      self2.on("end", function() {
        process$1.nextTick(function() {
          self2.emit("close");
        });
      });
      if (mode === "fetch") {
        let read = function() {
          reader.read().then(function(result) {
            if (self2._destroyed)
              return;
            resetTimers(result.done);
            if (result.done) {
              self2.push(null);
              return;
            }
            self2.push(Buffer.from(result.value));
            read();
          }).catch(function(err) {
            resetTimers(true);
            if (!self2._destroyed)
              self2.emit("error", err);
          });
        };
        self2._fetchResponse = response2;
        self2.url = response2.url;
        self2.statusCode = response2.status;
        self2.statusMessage = response2.statusText;
        response2.headers.forEach(function(header, key2) {
          self2.headers[key2.toLowerCase()] = header;
          self2.rawHeaders.push(key2, header);
        });
        if (capability2.writableStream) {
          var writable = new WritableStream({
            write: function(chunk) {
              resetTimers(false);
              return new Promise(function(resolve2, reject) {
                if (self2._destroyed) {
                  reject();
                } else if (self2.push(Buffer.from(chunk))) {
                  resolve2();
                } else {
                  self2._resumeFetch = resolve2;
                }
              });
            },
            close: function() {
              resetTimers(true);
              if (!self2._destroyed)
                self2.push(null);
            },
            abort: function(err) {
              resetTimers(true);
              if (!self2._destroyed)
                self2.emit("error", err);
            }
          });
          try {
            response2.body.pipeTo(writable).catch(function(err) {
              resetTimers(true);
              if (!self2._destroyed)
                self2.emit("error", err);
            });
            return;
          } catch (e) {
          }
        }
        var reader = response2.body.getReader();
        read();
      } else {
        self2._xhr = xhr;
        self2._pos = 0;
        self2.url = xhr.responseURL;
        self2.statusCode = xhr.status;
        self2.statusMessage = xhr.statusText;
        var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
        headers.forEach(function(header) {
          var matches = header.match(/^([^:]+):\s*(.*)/);
          if (matches) {
            var key2 = matches[1].toLowerCase();
            if (key2 === "set-cookie") {
              if (self2.headers[key2] === void 0) {
                self2.headers[key2] = [];
              }
              self2.headers[key2].push(matches[2]);
            } else if (self2.headers[key2] !== void 0) {
              self2.headers[key2] += ", " + matches[2];
            } else {
              self2.headers[key2] = matches[2];
            }
            self2.rawHeaders.push(matches[1], matches[2]);
          }
        });
        self2._charset = "x-user-defined";
        if (!capability2.overrideMimeType) {
          var mimeType = self2.rawHeaders["mime-type"];
          if (mimeType) {
            var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
            if (charsetMatch) {
              self2._charset = charsetMatch[1].toLowerCase();
            }
          }
          if (!self2._charset)
            self2._charset = "utf-8";
        }
      }
    };
    inherits2(IncomingMessage, stream.Readable);
    IncomingMessage.prototype._read = function() {
      var self2 = this;
      var resolve2 = self2._resumeFetch;
      if (resolve2) {
        self2._resumeFetch = null;
        resolve2();
      }
    };
    IncomingMessage.prototype._onXHRProgress = function(resetTimers) {
      var self2 = this;
      var xhr = self2._xhr;
      var response2 = null;
      switch (self2._mode) {
        case "text":
          response2 = xhr.responseText;
          if (response2.length > self2._pos) {
            var newData = response2.substr(self2._pos);
            if (self2._charset === "x-user-defined") {
              var buffer2 = Buffer.alloc(newData.length);
              for (var i2 = 0; i2 < newData.length; i2++)
                buffer2[i2] = newData.charCodeAt(i2) & 255;
              self2.push(buffer2);
            } else {
              self2.push(newData, self2._charset);
            }
            self2._pos = response2.length;
          }
          break;
        case "arraybuffer":
          if (xhr.readyState !== rStates.DONE || !xhr.response)
            break;
          response2 = xhr.response;
          self2.push(Buffer.from(new Uint8Array(response2)));
          break;
        case "moz-chunked-arraybuffer":
          response2 = xhr.response;
          if (xhr.readyState !== rStates.LOADING || !response2)
            break;
          self2.push(Buffer.from(new Uint8Array(response2)));
          break;
        case "ms-stream":
          response2 = xhr.response;
          if (xhr.readyState !== rStates.LOADING)
            break;
          var reader = new commonjsGlobal.MSStreamReader();
          reader.onprogress = function() {
            if (reader.result.byteLength > self2._pos) {
              self2.push(Buffer.from(new Uint8Array(reader.result.slice(self2._pos))));
              self2._pos = reader.result.byteLength;
            }
          };
          reader.onload = function() {
            resetTimers(true);
            self2.push(null);
          };
          reader.readAsArrayBuffer(response2);
          break;
      }
      if (self2._xhr.readyState === rStates.DONE && self2._mode !== "ms-stream") {
        resetTimers(true);
        self2.push(null);
      }
    };
    return response;
  }
  var hasRequiredRequest;
  function requireRequest() {
    if (hasRequiredRequest) return request.exports;
    hasRequiredRequest = 1;
    var capability2 = requireCapability();
    var inherits2 = requireInherits_browser();
    var response2 = requireResponse();
    var stream = requireReadableBrowser$1();
    var IncomingMessage = response2.IncomingMessage;
    var rStates = response2.readyStates;
    function decideMode(preferBinary, useFetch) {
      if (capability2.fetch && useFetch) {
        return "fetch";
      } else if (capability2.mozchunkedarraybuffer) {
        return "moz-chunked-arraybuffer";
      } else if (capability2.msstream) {
        return "ms-stream";
      } else if (capability2.arraybuffer && preferBinary) {
        return "arraybuffer";
      } else {
        return "text";
      }
    }
    var ClientRequest = request.exports = function(opts) {
      var self2 = this;
      stream.Writable.call(self2);
      self2._opts = opts;
      self2._body = [];
      self2._headers = {};
      if (opts.auth)
        self2.setHeader("Authorization", "Basic " + Buffer.from(opts.auth).toString("base64"));
      Object.keys(opts.headers).forEach(function(name2) {
        self2.setHeader(name2, opts.headers[name2]);
      });
      var preferBinary;
      var useFetch = true;
      if (opts.mode === "disable-fetch" || "requestTimeout" in opts && !capability2.abortController) {
        useFetch = false;
        preferBinary = true;
      } else if (opts.mode === "prefer-streaming") {
        preferBinary = false;
      } else if (opts.mode === "allow-wrong-content-type") {
        preferBinary = !capability2.overrideMimeType;
      } else if (!opts.mode || opts.mode === "default" || opts.mode === "prefer-fast") {
        preferBinary = true;
      } else {
        throw new Error("Invalid value for opts.mode");
      }
      self2._mode = decideMode(preferBinary, useFetch);
      self2._fetchTimer = null;
      self2._socketTimeout = null;
      self2._socketTimer = null;
      self2.on("finish", function() {
        self2._onFinish();
      });
    };
    inherits2(ClientRequest, stream.Writable);
    ClientRequest.prototype.setHeader = function(name2, value) {
      var self2 = this;
      var lowerName = name2.toLowerCase();
      if (unsafeHeaders.indexOf(lowerName) !== -1)
        return;
      self2._headers[lowerName] = {
        name: name2,
        value
      };
    };
    ClientRequest.prototype.getHeader = function(name2) {
      var header = this._headers[name2.toLowerCase()];
      if (header)
        return header.value;
      return null;
    };
    ClientRequest.prototype.removeHeader = function(name2) {
      var self2 = this;
      delete self2._headers[name2.toLowerCase()];
    };
    ClientRequest.prototype._onFinish = function() {
      var self2 = this;
      if (self2._destroyed)
        return;
      var opts = self2._opts;
      if ("timeout" in opts && opts.timeout !== 0) {
        self2.setTimeout(opts.timeout);
      }
      var headersObj = self2._headers;
      var body = null;
      if (opts.method !== "GET" && opts.method !== "HEAD") {
        body = new Blob(self2._body, {
          type: (headersObj["content-type"] || {}).value || ""
        });
      }
      var headersList = [];
      Object.keys(headersObj).forEach(function(keyName) {
        var name2 = headersObj[keyName].name;
        var value = headersObj[keyName].value;
        if (Array.isArray(value)) {
          value.forEach(function(v) {
            headersList.push([name2, v]);
          });
        } else {
          headersList.push([name2, value]);
        }
      });
      if (self2._mode === "fetch") {
        var signal = null;
        if (capability2.abortController) {
          var controller = new AbortController();
          signal = controller.signal;
          self2._fetchAbortController = controller;
          if ("requestTimeout" in opts && opts.requestTimeout !== 0) {
            self2._fetchTimer = commonjsGlobal.setTimeout(function() {
              self2.emit("requestTimeout");
              if (self2._fetchAbortController)
                self2._fetchAbortController.abort();
            }, opts.requestTimeout);
          }
        }
        commonjsGlobal.fetch(self2._opts.url, {
          method: self2._opts.method,
          headers: headersList,
          body: body || void 0,
          mode: "cors",
          credentials: opts.withCredentials ? "include" : "same-origin",
          signal
        }).then(function(response3) {
          self2._fetchResponse = response3;
          self2._resetTimers(false);
          self2._connect();
        }, function(reason) {
          self2._resetTimers(true);
          if (!self2._destroyed)
            self2.emit("error", reason);
        });
      } else {
        var xhr = self2._xhr = new commonjsGlobal.XMLHttpRequest();
        try {
          xhr.open(self2._opts.method, self2._opts.url, true);
        } catch (err) {
          process$1.nextTick(function() {
            self2.emit("error", err);
          });
          return;
        }
        if ("responseType" in xhr)
          xhr.responseType = self2._mode;
        if ("withCredentials" in xhr)
          xhr.withCredentials = !!opts.withCredentials;
        if (self2._mode === "text" && "overrideMimeType" in xhr)
          xhr.overrideMimeType("text/plain; charset=x-user-defined");
        if ("requestTimeout" in opts) {
          xhr.timeout = opts.requestTimeout;
          xhr.ontimeout = function() {
            self2.emit("requestTimeout");
          };
        }
        headersList.forEach(function(header) {
          xhr.setRequestHeader(header[0], header[1]);
        });
        self2._response = null;
        xhr.onreadystatechange = function() {
          switch (xhr.readyState) {
            case rStates.LOADING:
            case rStates.DONE:
              self2._onXHRProgress();
              break;
          }
        };
        if (self2._mode === "moz-chunked-arraybuffer") {
          xhr.onprogress = function() {
            self2._onXHRProgress();
          };
        }
        xhr.onerror = function() {
          if (self2._destroyed)
            return;
          self2._resetTimers(true);
          self2.emit("error", new Error("XHR error"));
        };
        try {
          xhr.send(body);
        } catch (err) {
          process$1.nextTick(function() {
            self2.emit("error", err);
          });
          return;
        }
      }
    };
    function statusValid(xhr) {
      try {
        var status = xhr.status;
        return status !== null && status !== 0;
      } catch (e) {
        return false;
      }
    }
    ClientRequest.prototype._onXHRProgress = function() {
      var self2 = this;
      self2._resetTimers(false);
      if (!statusValid(self2._xhr) || self2._destroyed)
        return;
      if (!self2._response)
        self2._connect();
      self2._response._onXHRProgress(self2._resetTimers.bind(self2));
    };
    ClientRequest.prototype._connect = function() {
      var self2 = this;
      if (self2._destroyed)
        return;
      self2._response = new IncomingMessage(self2._xhr, self2._fetchResponse, self2._mode, self2._resetTimers.bind(self2));
      self2._response.on("error", function(err) {
        self2.emit("error", err);
      });
      self2.emit("response", self2._response);
    };
    ClientRequest.prototype._write = function(chunk, encoding2, cb) {
      var self2 = this;
      self2._body.push(chunk);
      cb();
    };
    ClientRequest.prototype._resetTimers = function(done) {
      var self2 = this;
      commonjsGlobal.clearTimeout(self2._socketTimer);
      self2._socketTimer = null;
      if (done) {
        commonjsGlobal.clearTimeout(self2._fetchTimer);
        self2._fetchTimer = null;
      } else if (self2._socketTimeout) {
        self2._socketTimer = commonjsGlobal.setTimeout(function() {
          self2.emit("timeout");
        }, self2._socketTimeout);
      }
    };
    ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function(err) {
      var self2 = this;
      self2._destroyed = true;
      self2._resetTimers(true);
      if (self2._response)
        self2._response._destroyed = true;
      if (self2._xhr)
        self2._xhr.abort();
      else if (self2._fetchAbortController)
        self2._fetchAbortController.abort();
      if (err)
        self2.emit("error", err);
    };
    ClientRequest.prototype.end = function(data, encoding2, cb) {
      var self2 = this;
      if (typeof data === "function") {
        cb = data;
        data = void 0;
      }
      stream.Writable.prototype.end.call(self2, data, encoding2, cb);
    };
    ClientRequest.prototype.setTimeout = function(timeout, cb) {
      var self2 = this;
      if (cb)
        self2.once("timeout", cb);
      self2._socketTimeout = timeout;
      self2._resetTimers(false);
    };
    ClientRequest.prototype.flushHeaders = function() {
    };
    ClientRequest.prototype.setNoDelay = function() {
    };
    ClientRequest.prototype.setSocketKeepAlive = function() {
    };
    var unsafeHeaders = [
      "accept-charset",
      "accept-encoding",
      "access-control-request-headers",
      "access-control-request-method",
      "connection",
      "content-length",
      "cookie",
      "cookie2",
      "date",
      "dnt",
      "expect",
      "host",
      "keep-alive",
      "origin",
      "referer",
      "te",
      "trailer",
      "transfer-encoding",
      "upgrade",
      "via"
    ];
    return request.exports;
  }
  var immutable;
  var hasRequiredImmutable;
  function requireImmutable() {
    if (hasRequiredImmutable) return immutable;
    hasRequiredImmutable = 1;
    immutable = extend2;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    function extend2() {
      var target = {};
      for (var i2 = 0; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key2 in source) {
          if (hasOwnProperty2.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    }
    return immutable;
  }
  var browser$1;
  var hasRequiredBrowser;
  function requireBrowser() {
    if (hasRequiredBrowser) return browser$1;
    hasRequiredBrowser = 1;
    browser$1 = {
      "100": "Continue",
      "101": "Switching Protocols",
      "102": "Processing",
      "200": "OK",
      "201": "Created",
      "202": "Accepted",
      "203": "Non-Authoritative Information",
      "204": "No Content",
      "205": "Reset Content",
      "206": "Partial Content",
      "207": "Multi-Status",
      "208": "Already Reported",
      "226": "IM Used",
      "300": "Multiple Choices",
      "301": "Moved Permanently",
      "302": "Found",
      "303": "See Other",
      "304": "Not Modified",
      "305": "Use Proxy",
      "307": "Temporary Redirect",
      "308": "Permanent Redirect",
      "400": "Bad Request",
      "401": "Unauthorized",
      "402": "Payment Required",
      "403": "Forbidden",
      "404": "Not Found",
      "405": "Method Not Allowed",
      "406": "Not Acceptable",
      "407": "Proxy Authentication Required",
      "408": "Request Timeout",
      "409": "Conflict",
      "410": "Gone",
      "411": "Length Required",
      "412": "Precondition Failed",
      "413": "Payload Too Large",
      "414": "URI Too Long",
      "415": "Unsupported Media Type",
      "416": "Range Not Satisfiable",
      "417": "Expectation Failed",
      "418": "I'm a teapot",
      "421": "Misdirected Request",
      "422": "Unprocessable Entity",
      "423": "Locked",
      "424": "Failed Dependency",
      "425": "Unordered Collection",
      "426": "Upgrade Required",
      "428": "Precondition Required",
      "429": "Too Many Requests",
      "431": "Request Header Fields Too Large",
      "451": "Unavailable For Legal Reasons",
      "500": "Internal Server Error",
      "501": "Not Implemented",
      "502": "Bad Gateway",
      "503": "Service Unavailable",
      "504": "Gateway Timeout",
      "505": "HTTP Version Not Supported",
      "506": "Variant Also Negotiates",
      "507": "Insufficient Storage",
      "508": "Loop Detected",
      "509": "Bandwidth Limit Exceeded",
      "510": "Not Extended",
      "511": "Network Authentication Required"
    };
    return browser$1;
  }
  var punycode$1 = { exports: {} };
  /*! https://mths.be/punycode v1.4.1 by @mathias */
  punycode$1.exports;
  (function(module, exports2) {
    (function(root) {
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = !module.nodeType && module;
      var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
      }
      var punycode2, maxInt = 2147483647, base2 = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors2 = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      }, baseMinusTMin = base2 - tMin, floor2 = Math.floor, stringFromCharCode = String.fromCharCode, key2;
      function error2(type2) {
        throw new RangeError(errors2[type2]);
      }
      function map(array2, fn) {
        var length = array2.length;
        var result = [];
        while (length--) {
          result[length] = fn(array2[length]);
        }
        return result;
      }
      function mapDomain(string2, fn) {
        var parts = string2.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string2 = parts[1];
        }
        string2 = string2.replace(regexSeparators, ".");
        var labels = string2.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string2) {
        var output2 = [], counter = 0, length = string2.length, value, extra;
        while (counter < length) {
          value = string2.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string2.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output2.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output2.push(value);
              counter--;
            }
          } else {
            output2.push(value);
          }
        }
        return output2;
      }
      function ucs2encode(array2) {
        return map(array2, function(value) {
          var output2 = "";
          if (value > 65535) {
            value -= 65536;
            output2 += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output2 += stringFromCharCode(value);
          return output2;
        }).join("");
      }
      function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base2;
      }
      function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      }
      function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor2(delta / damp) : delta >> 1;
        delta += floor2(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base2) {
          delta = floor2(delta / baseMinusTMin);
        }
        return floor2(k + (baseMinusTMin + 1) * delta / (delta + skew));
      }
      function decode2(input) {
        var output2 = [], inputLength = input.length, out, i2 = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t2, baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error2("not-basic");
          }
          output2.push(input.charCodeAt(j));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          for (oldi = i2, w = 1, k = base2; ; k += base2) {
            if (index >= inputLength) {
              error2("invalid-input");
            }
            digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base2 || digit > floor2((maxInt - i2) / w)) {
              error2("overflow");
            }
            i2 += digit * w;
            t2 = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t2) {
              break;
            }
            baseMinusT = base2 - t2;
            if (w > floor2(maxInt / baseMinusT)) {
              error2("overflow");
            }
            w *= baseMinusT;
          }
          out = output2.length + 1;
          bias = adapt(i2 - oldi, out, oldi == 0);
          if (floor2(i2 / out) > maxInt - n) {
            error2("overflow");
          }
          n += floor2(i2 / out);
          i2 %= out;
          output2.splice(i2++, 0, n);
        }
        return ucs2encode(output2);
      }
      function encode2(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t2, currentValue, output2 = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n = initialN;
        delta = 0;
        bias = initialBias;
        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue < 128) {
            output2.push(stringFromCharCode(currentValue));
          }
        }
        handledCPCount = basicLength = output2.length;
        if (basicLength) {
          output2.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          for (m = maxInt, j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor2((maxInt - delta) / handledCPCountPlusOne)) {
            error2("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < n && ++delta > maxInt) {
              error2("overflow");
            }
            if (currentValue == n) {
              for (q = delta, k = base2; ; k += base2) {
                t2 = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t2) {
                  break;
                }
                qMinusT = q - t2;
                baseMinusT = base2 - t2;
                output2.push(
                  stringFromCharCode(digitToBasic(t2 + qMinusT % baseMinusT, 0))
                );
                q = floor2(qMinusT / baseMinusT);
              }
              output2.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n;
        }
        return output2.join("");
      }
      function toUnicode(input) {
        return mapDomain(input, function(string2) {
          return regexPunycode.test(string2) ? decode2(string2.slice(4).toLowerCase()) : string2;
        });
      }
      function toASCII(input) {
        return mapDomain(input, function(string2) {
          return regexNonASCII.test(string2) ? "xn--" + encode2(string2) : string2;
        });
      }
      punycode2 = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        "version": "1.4.1",
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode2,
        "encode": encode2,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      if (freeExports && freeModule) {
        if (module.exports == freeExports) {
          freeModule.exports = punycode2;
        } else {
          for (key2 in punycode2) {
            punycode2.hasOwnProperty(key2) && (freeExports[key2] = punycode2[key2]);
          }
        }
      } else {
        root.punycode = punycode2;
      }
    })(commonjsGlobal);
  })(punycode$1, punycode$1.exports);
  var punycodeExports = punycode$1.exports;
  const require$$0$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(punycodeExports);
  const __viteBrowserExternal = {};
  const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    default: __viteBrowserExternal
  }, Symbol.toStringTag, { value: "Module" }));
  const require$$0$1 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
  var hasMap = typeof Map === "function" && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === "function" && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
  var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var $match = String.prototype.match;
  var $slice = String.prototype.slice;
  var $replace = String.prototype.replace;
  var $toUpperCase = String.prototype.toUpperCase;
  var $toLowerCase = String.prototype.toLowerCase;
  var $test = RegExp.prototype.test;
  var $concat = Array.prototype.concat;
  var $join = Array.prototype.join;
  var $arrSlice = Array.prototype.slice;
  var $floor = Math.floor;
  var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
  var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
  var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
    return O.__proto__;
  } : null);
  function addNumericSeparator(num, str) {
    if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
      return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === "number") {
      var int = num < 0 ? -$floor(-num) : $floor(num);
      if (int !== num) {
        var intStr = String(int);
        var dec = $slice.call(str, intStr.length + 1);
        return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
      }
    }
    return $replace.call(str, sepRegex, "$&_");
  }
  var utilInspect = require$$0$1;
  var inspectCustom = utilInspect.custom;
  var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
  var quotes = {
    __proto__: null,
    "double": '"',
    single: "'"
  };
  var quoteREs = {
    __proto__: null,
    "double": /(["\\])/g,
    single: /(['\\])/g
  };
  var objectInspect = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has$3(opts, "quoteStyle") && !has$3(quotes, opts.quoteStyle)) {
      throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (has$3(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
      throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has$3(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
      throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
    }
    if (has$3(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
      throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has$3(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
      throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === "undefined") {
      return "undefined";
    }
    if (obj === null) {
      return "null";
    }
    if (typeof obj === "boolean") {
      return obj ? "true" : "false";
    }
    if (typeof obj === "string") {
      return inspectString(obj, opts);
    }
    if (typeof obj === "number") {
      if (obj === 0) {
        return Infinity / obj > 0 ? "0" : "-0";
      }
      var str = String(obj);
      return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === "bigint") {
      var bigIntStr = String(obj) + "n";
      return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
    if (typeof depth === "undefined") {
      depth = 0;
    }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
      return isArray$3(obj) ? "[Array]" : "[Object]";
    }
    var indent = getIndent(opts, depth);
    if (typeof seen === "undefined") {
      seen = [];
    } else if (indexOf(seen, obj) >= 0) {
      return "[Circular]";
    }
    function inspect2(value, from, noIndent) {
      if (from) {
        seen = $arrSlice.call(seen);
        seen.push(from);
      }
      if (noIndent) {
        var newOpts = {
          depth: opts.depth
        };
        if (has$3(opts, "quoteStyle")) {
          newOpts.quoteStyle = opts.quoteStyle;
        }
        return inspect_(value, newOpts, depth + 1, seen);
      }
      return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj === "function" && !isRegExp$1(obj)) {
      var name2 = nameOf(obj);
      var keys = arrObjKeys(obj, inspect2);
      return "[Function" + (name2 ? ": " + name2 : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
    }
    if (isSymbol(obj)) {
      var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
      return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
      var s2 = "<" + $toLowerCase.call(String(obj.nodeName));
      var attrs = obj.attributes || [];
      for (var i2 = 0; i2 < attrs.length; i2++) {
        s2 += " " + attrs[i2].name + "=" + wrapQuotes(quote(attrs[i2].value), "double", opts);
      }
      s2 += ">";
      if (obj.childNodes && obj.childNodes.length) {
        s2 += "...";
      }
      s2 += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
      return s2;
    }
    if (isArray$3(obj)) {
      if (obj.length === 0) {
        return "[]";
      }
      var xs = arrObjKeys(obj, inspect2);
      if (indent && !singleLineValues(xs)) {
        return "[" + indentedJoin(xs, indent) + "]";
      }
      return "[ " + $join.call(xs, ", ") + " ]";
    }
    if (isError$1(obj)) {
      var parts = arrObjKeys(obj, inspect2);
      if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
        return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect2(obj.cause), parts), ", ") + " }";
      }
      if (parts.length === 0) {
        return "[" + String(obj) + "]";
      }
      return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
    }
    if (typeof obj === "object" && customInspect) {
      if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
        return utilInspect(obj, { depth: maxDepth - depth });
      } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
        return obj.inspect();
      }
    }
    if (isMap(obj)) {
      var mapParts = [];
      if (mapForEach) {
        mapForEach.call(obj, function(value, key2) {
          mapParts.push(inspect2(key2, obj, true) + " => " + inspect2(value, obj));
        });
      }
      return collectionOf("Map", mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
      var setParts = [];
      if (setForEach) {
        setForEach.call(obj, function(value) {
          setParts.push(inspect2(value, obj));
        });
      }
      return collectionOf("Set", setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
      return weakCollectionOf("WeakMap");
    }
    if (isWeakSet(obj)) {
      return weakCollectionOf("WeakSet");
    }
    if (isWeakRef(obj)) {
      return weakCollectionOf("WeakRef");
    }
    if (isNumber(obj)) {
      return markBoxed(inspect2(Number(obj)));
    }
    if (isBigInt(obj)) {
      return markBoxed(inspect2(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
      return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
      return markBoxed(inspect2(String(obj)));
    }
    if (typeof window !== "undefined" && obj === window) {
      return "{ [object Window] }";
    }
    if (typeof globalThis !== "undefined" && obj === globalThis || typeof commonjsGlobal !== "undefined" && obj === commonjsGlobal) {
      return "{ [object globalThis] }";
    }
    if (!isDate(obj) && !isRegExp$1(obj)) {
      var ys = arrObjKeys(obj, inspect2);
      var isPlainObject2 = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
      var protoTag = obj instanceof Object ? "" : "null prototype";
      var stringTag = !isPlainObject2 && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
      var constructorTag = isPlainObject2 || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
      var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
      if (ys.length === 0) {
        return tag + "{}";
      }
      if (indent) {
        return tag + "{" + indentedJoin(ys, indent) + "}";
      }
      return tag + "{ " + $join.call(ys, ", ") + " }";
    }
    return String(obj);
  };
  function wrapQuotes(s2, defaultStyle, opts) {
    var style = opts.quoteStyle || defaultStyle;
    var quoteChar = quotes[style];
    return quoteChar + s2 + quoteChar;
  }
  function quote(s2) {
    return $replace.call(String(s2), /"/g, "&quot;");
  }
  function isArray$3(obj) {
    return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isDate(obj) {
    return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isRegExp$1(obj) {
    return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isError$1(obj) {
    return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isString(obj) {
    return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isNumber(obj) {
    return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isBoolean(obj) {
    return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isSymbol(obj) {
    if (hasShammedSymbols) {
      return obj && typeof obj === "object" && obj instanceof Symbol;
    }
    if (typeof obj === "symbol") {
      return true;
    }
    if (!obj || typeof obj !== "object" || !symToString) {
      return false;
    }
    try {
      symToString.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  }
  function isBigInt(obj) {
    if (!obj || typeof obj !== "object" || !bigIntValueOf) {
      return false;
    }
    try {
      bigIntValueOf.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  }
  var hasOwn = Object.prototype.hasOwnProperty || function(key2) {
    return key2 in this;
  };
  function has$3(obj, key2) {
    return hasOwn.call(obj, key2);
  }
  function toStr(obj) {
    return objectToString.call(obj);
  }
  function nameOf(f2) {
    if (f2.name) {
      return f2.name;
    }
    var m = $match.call(functionToString.call(f2), /^function\s*([\w$]+)/);
    if (m) {
      return m[1];
    }
    return null;
  }
  function indexOf(xs, x) {
    if (xs.indexOf) {
      return xs.indexOf(x);
    }
    for (var i2 = 0, l = xs.length; i2 < l; i2++) {
      if (xs[i2] === x) {
        return i2;
      }
    }
    return -1;
  }
  function isMap(x) {
    if (!mapSize || !x || typeof x !== "object") {
      return false;
    }
    try {
      mapSize.call(x);
      try {
        setSize.call(x);
      } catch (s2) {
        return true;
      }
      return x instanceof Map;
    } catch (e) {
    }
    return false;
  }
  function isWeakMap(x) {
    if (!weakMapHas || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakMapHas.call(x, weakMapHas);
      try {
        weakSetHas.call(x, weakSetHas);
      } catch (s2) {
        return true;
      }
      return x instanceof WeakMap;
    } catch (e) {
    }
    return false;
  }
  function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakRefDeref.call(x);
      return true;
    } catch (e) {
    }
    return false;
  }
  function isSet(x) {
    if (!setSize || !x || typeof x !== "object") {
      return false;
    }
    try {
      setSize.call(x);
      try {
        mapSize.call(x);
      } catch (m) {
        return true;
      }
      return x instanceof Set;
    } catch (e) {
    }
    return false;
  }
  function isWeakSet(x) {
    if (!weakSetHas || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakSetHas.call(x, weakSetHas);
      try {
        weakMapHas.call(x, weakMapHas);
      } catch (s2) {
        return true;
      }
      return x instanceof WeakSet;
    } catch (e) {
    }
    return false;
  }
  function isElement(x) {
    if (!x || typeof x !== "object") {
      return false;
    }
    if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
      return true;
    }
    return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
  }
  function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
      var remaining = str.length - opts.maxStringLength;
      var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
      return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    var quoteRE = quoteREs[opts.quoteStyle || "single"];
    quoteRE.lastIndex = 0;
    var s2 = $replace.call($replace.call(str, quoteRE, "\\$1"), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s2, "single", opts);
  }
  function lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
      8: "b",
      9: "t",
      10: "n",
      12: "f",
      13: "r"
    }[n];
    if (x) {
      return "\\" + x;
    }
    return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
  }
  function markBoxed(str) {
    return "Object(" + str + ")";
  }
  function weakCollectionOf(type2) {
    return type2 + " { ? }";
  }
  function collectionOf(type2, size2, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
    return type2 + " (" + size2 + ") {" + joinedEntries + "}";
  }
  function singleLineValues(xs) {
    for (var i2 = 0; i2 < xs.length; i2++) {
      if (indexOf(xs[i2], "\n") >= 0) {
        return false;
      }
    }
    return true;
  }
  function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === "	") {
      baseIndent = "	";
    } else if (typeof opts.indent === "number" && opts.indent > 0) {
      baseIndent = $join.call(Array(opts.indent + 1), " ");
    } else {
      return null;
    }
    return {
      base: baseIndent,
      prev: $join.call(Array(depth + 1), baseIndent)
    };
  }
  function indentedJoin(xs, indent) {
    if (xs.length === 0) {
      return "";
    }
    var lineJoiner = "\n" + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
  }
  function arrObjKeys(obj, inspect2) {
    var isArr = isArray$3(obj);
    var xs = [];
    if (isArr) {
      xs.length = obj.length;
      for (var i2 = 0; i2 < obj.length; i2++) {
        xs[i2] = has$3(obj, i2) ? inspect2(obj[i2], obj) : "";
      }
    }
    var syms = typeof gOPS === "function" ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
      symMap = {};
      for (var k = 0; k < syms.length; k++) {
        symMap["$" + syms[k]] = syms[k];
      }
    }
    for (var key2 in obj) {
      if (!has$3(obj, key2)) {
        continue;
      }
      if (isArr && String(Number(key2)) === key2 && key2 < obj.length) {
        continue;
      }
      if (hasShammedSymbols && symMap["$" + key2] instanceof Symbol) {
        continue;
      } else if ($test.call(/[^\w$]/, key2)) {
        xs.push(inspect2(key2, obj) + ": " + inspect2(obj[key2], obj));
      } else {
        xs.push(key2 + ": " + inspect2(obj[key2], obj));
      }
    }
    if (typeof gOPS === "function") {
      for (var j = 0; j < syms.length; j++) {
        if (isEnumerable.call(obj, syms[j])) {
          xs.push("[" + inspect2(syms[j]) + "]: " + inspect2(obj[syms[j]], obj));
        }
      }
    }
    return xs;
  }
  var inspect$3 = objectInspect;
  var $TypeError$3 = type;
  var listGetNode = function(list, key2, isDelete) {
    var prev = list;
    var curr;
    for (; (curr = prev.next) != null; prev = curr) {
      if (curr.key === key2) {
        prev.next = curr.next;
        if (!isDelete) {
          curr.next = /** @type {NonNullable<typeof list.next>} */
          list.next;
          list.next = curr;
        }
        return curr;
      }
    }
  };
  var listGet = function(objects, key2) {
    if (!objects) {
      return void 0;
    }
    var node2 = listGetNode(objects, key2);
    return node2 && node2.value;
  };
  var listSet = function(objects, key2, value) {
    var node2 = listGetNode(objects, key2);
    if (node2) {
      node2.value = value;
    } else {
      objects.next = /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */
      {
        // eslint-disable-line no-param-reassign, no-extra-parens
        key: key2,
        next: objects.next,
        value
      };
    }
  };
  var listHas = function(objects, key2) {
    if (!objects) {
      return false;
    }
    return !!listGetNode(objects, key2);
  };
  var listDelete = function(objects, key2) {
    if (objects) {
      return listGetNode(objects, key2, true);
    }
  };
  var sideChannelList = function getSideChannelList2() {
    var $o;
    var channel = {
      assert: function(key2) {
        if (!channel.has(key2)) {
          throw new $TypeError$3("Side channel does not contain " + inspect$3(key2));
        }
      },
      "delete": function(key2) {
        var root = $o && $o.next;
        var deletedNode = listDelete($o, key2);
        if (deletedNode && root && root === deletedNode) {
          $o = void 0;
        }
        return !!deletedNode;
      },
      get: function(key2) {
        return listGet($o, key2);
      },
      has: function(key2) {
        return listHas($o, key2);
      },
      set: function(key2, value) {
        if (!$o) {
          $o = {
            next: void 0
          };
        }
        listSet(
          /** @type {NonNullable<typeof $o>} */
          $o,
          key2,
          value
        );
      }
    };
    return channel;
  };
  var GetIntrinsic$1 = requireGetIntrinsic();
  var callBound$2 = requireCallBound$1();
  var inspect$2 = objectInspect;
  var $TypeError$2 = type;
  var $Map = GetIntrinsic$1("%Map%", true);
  var $mapGet = callBound$2("Map.prototype.get", true);
  var $mapSet = callBound$2("Map.prototype.set", true);
  var $mapHas = callBound$2("Map.prototype.has", true);
  var $mapDelete = callBound$2("Map.prototype.delete", true);
  var $mapSize = callBound$2("Map.prototype.size", true);
  var sideChannelMap = !!$Map && /** @type {Exclude<import('.'), false>} */
  function getSideChannelMap2() {
    var $m;
    var channel = {
      assert: function(key2) {
        if (!channel.has(key2)) {
          throw new $TypeError$2("Side channel does not contain " + inspect$2(key2));
        }
      },
      "delete": function(key2) {
        if ($m) {
          var result = $mapDelete($m, key2);
          if ($mapSize($m) === 0) {
            $m = void 0;
          }
          return result;
        }
        return false;
      },
      get: function(key2) {
        if ($m) {
          return $mapGet($m, key2);
        }
      },
      has: function(key2) {
        if ($m) {
          return $mapHas($m, key2);
        }
        return false;
      },
      set: function(key2, value) {
        if (!$m) {
          $m = new $Map();
        }
        $mapSet($m, key2, value);
      }
    };
    return channel;
  };
  var GetIntrinsic = requireGetIntrinsic();
  var callBound$1 = requireCallBound$1();
  var inspect$1 = objectInspect;
  var getSideChannelMap$1 = sideChannelMap;
  var $TypeError$1 = type;
  var $WeakMap = GetIntrinsic("%WeakMap%", true);
  var $weakMapGet = callBound$1("WeakMap.prototype.get", true);
  var $weakMapSet = callBound$1("WeakMap.prototype.set", true);
  var $weakMapHas = callBound$1("WeakMap.prototype.has", true);
  var $weakMapDelete = callBound$1("WeakMap.prototype.delete", true);
  var sideChannelWeakmap = $WeakMap ? (
    /** @type {Exclude<import('.'), false>} */
    function getSideChannelWeakMap2() {
      var $wm;
      var $m;
      var channel = {
        assert: function(key2) {
          if (!channel.has(key2)) {
            throw new $TypeError$1("Side channel does not contain " + inspect$1(key2));
          }
        },
        "delete": function(key2) {
          if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
            if ($wm) {
              return $weakMapDelete($wm, key2);
            }
          } else if (getSideChannelMap$1) {
            if ($m) {
              return $m["delete"](key2);
            }
          }
          return false;
        },
        get: function(key2) {
          if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key2);
            }
          }
          return $m && $m.get(key2);
        },
        has: function(key2) {
          if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key2);
            }
          }
          return !!$m && $m.has(key2);
        },
        set: function(key2, value) {
          if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key2, value);
          } else if (getSideChannelMap$1) {
            if (!$m) {
              $m = getSideChannelMap$1();
            }
            $m.set(key2, value);
          }
        }
      };
      return channel;
    }
  ) : getSideChannelMap$1;
  var $TypeError = type;
  var inspect = objectInspect;
  var getSideChannelList = sideChannelList;
  var getSideChannelMap = sideChannelMap;
  var getSideChannelWeakMap = sideChannelWeakmap;
  var makeChannel = getSideChannelWeakMap || getSideChannelMap || getSideChannelList;
  var sideChannel = function getSideChannel2() {
    var $channelData;
    var channel = {
      assert: function(key2) {
        if (!channel.has(key2)) {
          throw new $TypeError("Side channel does not contain " + inspect(key2));
        }
      },
      "delete": function(key2) {
        return !!$channelData && $channelData["delete"](key2);
      },
      get: function(key2) {
        return $channelData && $channelData.get(key2);
      },
      has: function(key2) {
        return !!$channelData && $channelData.has(key2);
      },
      set: function(key2, value) {
        if (!$channelData) {
          $channelData = makeChannel();
        }
        $channelData.set(key2, value);
      }
    };
    return channel;
  };
  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;
  var Format = {
    RFC1738: "RFC1738",
    RFC3986: "RFC3986"
  };
  var formats$3 = {
    "default": Format.RFC3986,
    formatters: {
      RFC1738: function(value) {
        return replace.call(value, percentTwenties, "+");
      },
      RFC3986: function(value) {
        return String(value);
      }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
  };
  var formats$2 = formats$3;
  var has$2 = Object.prototype.hasOwnProperty;
  var isArray$2 = Array.isArray;
  var hexTable = function() {
    var array2 = [];
    for (var i2 = 0; i2 < 256; ++i2) {
      array2.push("%" + ((i2 < 16 ? "0" : "") + i2.toString(16)).toUpperCase());
    }
    return array2;
  }();
  var compactQueue = function compactQueue2(queue2) {
    while (queue2.length > 1) {
      var item = queue2.pop();
      var obj = item.obj[item.prop];
      if (isArray$2(obj)) {
        var compacted = [];
        for (var j = 0; j < obj.length; ++j) {
          if (typeof obj[j] !== "undefined") {
            compacted.push(obj[j]);
          }
        }
        item.obj[item.prop] = compacted;
      }
    }
  };
  var arrayToObject = function arrayToObject2(source, options) {
    var obj = options && options.plainObjects ? { __proto__: null } : {};
    for (var i2 = 0; i2 < source.length; ++i2) {
      if (typeof source[i2] !== "undefined") {
        obj[i2] = source[i2];
      }
    }
    return obj;
  };
  var merge = function merge2(target, source, options) {
    if (!source) {
      return target;
    }
    if (typeof source !== "object" && typeof source !== "function") {
      if (isArray$2(target)) {
        target.push(source);
      } else if (target && typeof target === "object") {
        if (options && (options.plainObjects || options.allowPrototypes) || !has$2.call(Object.prototype, source)) {
          target[source] = true;
        }
      } else {
        return [target, source];
      }
      return target;
    }
    if (!target || typeof target !== "object") {
      return [target].concat(source);
    }
    var mergeTarget = target;
    if (isArray$2(target) && !isArray$2(source)) {
      mergeTarget = arrayToObject(target, options);
    }
    if (isArray$2(target) && isArray$2(source)) {
      source.forEach(function(item, i2) {
        if (has$2.call(target, i2)) {
          var targetItem = target[i2];
          if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
            target[i2] = merge2(targetItem, item, options);
          } else {
            target.push(item);
          }
        } else {
          target[i2] = item;
        }
      });
      return target;
    }
    return Object.keys(source).reduce(function(acc, key2) {
      var value = source[key2];
      if (has$2.call(acc, key2)) {
        acc[key2] = merge2(acc[key2], value, options);
      } else {
        acc[key2] = value;
      }
      return acc;
    }, mergeTarget);
  };
  var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function(acc, key2) {
      acc[key2] = source[key2];
      return acc;
    }, target);
  };
  var decode = function(str, defaultDecoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, " ");
    if (charset === "iso-8859-1") {
      return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    try {
      return decodeURIComponent(strWithoutPlus);
    } catch (e) {
      return strWithoutPlus;
    }
  };
  var limit = 1024;
  var encode = function encode2(str, defaultEncoder, charset, kind, format2) {
    if (str.length === 0) {
      return str;
    }
    var string2 = str;
    if (typeof str === "symbol") {
      string2 = Symbol.prototype.toString.call(str);
    } else if (typeof str !== "string") {
      string2 = String(str);
    }
    if (charset === "iso-8859-1") {
      return escape(string2).replace(/%u[0-9a-f]{4}/gi, function($0) {
        return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
      });
    }
    var out = "";
    for (var j = 0; j < string2.length; j += limit) {
      var segment = string2.length >= limit ? string2.slice(j, j + limit) : string2;
      var arr = [];
      for (var i2 = 0; i2 < segment.length; ++i2) {
        var c = segment.charCodeAt(i2);
        if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format2 === formats$2.RFC1738 && (c === 40 || c === 41)) {
          arr[arr.length] = segment.charAt(i2);
          continue;
        }
        if (c < 128) {
          arr[arr.length] = hexTable[c];
          continue;
        }
        if (c < 2048) {
          arr[arr.length] = hexTable[192 | c >> 6] + hexTable[128 | c & 63];
          continue;
        }
        if (c < 55296 || c >= 57344) {
          arr[arr.length] = hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
          continue;
        }
        i2 += 1;
        c = 65536 + ((c & 1023) << 10 | segment.charCodeAt(i2) & 1023);
        arr[arr.length] = hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
      }
      out += arr.join("");
    }
    return out;
  };
  var compact = function compact2(value) {
    var queue2 = [{ obj: { o: value }, prop: "o" }];
    var refs = [];
    for (var i2 = 0; i2 < queue2.length; ++i2) {
      var item = queue2[i2];
      var obj = item.obj[item.prop];
      var keys = Object.keys(obj);
      for (var j = 0; j < keys.length; ++j) {
        var key2 = keys[j];
        var val = obj[key2];
        if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
          queue2.push({ obj, prop: key2 });
          refs.push(val);
        }
      }
    }
    compactQueue(queue2);
    return value;
  };
  var isRegExp = function isRegExp2(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
  };
  var isBuffer = function isBuffer2(obj) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };
  var combine = function combine2(a, b) {
    return [].concat(a, b);
  };
  var maybeMap = function maybeMap2(val, fn) {
    if (isArray$2(val)) {
      var mapped = [];
      for (var i2 = 0; i2 < val.length; i2 += 1) {
        mapped.push(fn(val[i2]));
      }
      return mapped;
    }
    return fn(val);
  };
  var utils$6 = {
    arrayToObject,
    assign,
    combine,
    compact,
    decode,
    encode,
    isBuffer,
    isRegExp,
    maybeMap,
    merge
  };
  var getSideChannel = sideChannel;
  var utils$5 = utils$6;
  var formats$1 = formats$3;
  var has$1 = Object.prototype.hasOwnProperty;
  var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
      return prefix + "[]";
    },
    comma: "comma",
    indices: function indices(prefix, key2) {
      return prefix + "[" + key2 + "]";
    },
    repeat: function repeat(prefix) {
      return prefix;
    }
  };
  var isArray$1 = Array.isArray;
  var push = Array.prototype.push;
  var pushToArray = function(arr, valueOrArray) {
    push.apply(arr, isArray$1(valueOrArray) ? valueOrArray : [valueOrArray]);
  };
  var toISO = Date.prototype.toISOString;
  var defaultFormat = formats$1["default"];
  var defaults$1 = {
    addQueryPrefix: false,
    allowDots: false,
    allowEmptyArrays: false,
    arrayFormat: "indices",
    charset: "utf-8",
    charsetSentinel: false,
    commaRoundTrip: false,
    delimiter: "&",
    encode: true,
    encodeDotInKeys: false,
    encoder: utils$5.encode,
    encodeValuesOnly: false,
    filter: void 0,
    format: defaultFormat,
    formatter: formats$1.formatters[defaultFormat],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
      return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
  };
  var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
    return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
  };
  var sentinel = {};
  var stringify$1 = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter2, sort2, allowDots, serializeDate, format2, formatter, encodeValuesOnly, charset, sideChannel2) {
    var obj = object;
    var tmpSc = sideChannel2;
    var step = 0;
    var findFlag = false;
    while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
      var pos = tmpSc.get(object);
      step += 1;
      if (typeof pos !== "undefined") {
        if (pos === step) {
          throw new RangeError("Cyclic object value");
        } else {
          findFlag = true;
        }
      }
      if (typeof tmpSc.get(sentinel) === "undefined") {
        step = 0;
      }
    }
    if (typeof filter2 === "function") {
      obj = filter2(prefix, obj);
    } else if (obj instanceof Date) {
      obj = serializeDate(obj);
    } else if (generateArrayPrefix === "comma" && isArray$1(obj)) {
      obj = utils$5.maybeMap(obj, function(value2) {
        if (value2 instanceof Date) {
          return serializeDate(value2);
        }
        return value2;
      });
    }
    if (obj === null) {
      if (strictNullHandling) {
        return encoder && !encodeValuesOnly ? encoder(prefix, defaults$1.encoder, charset, "key", format2) : prefix;
      }
      obj = "";
    }
    if (isNonNullishPrimitive(obj) || utils$5.isBuffer(obj)) {
      if (encoder) {
        var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults$1.encoder, charset, "key", format2);
        return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults$1.encoder, charset, "value", format2))];
      }
      return [formatter(prefix) + "=" + formatter(String(obj))];
    }
    var values = [];
    if (typeof obj === "undefined") {
      return values;
    }
    var objKeys;
    if (generateArrayPrefix === "comma" && isArray$1(obj)) {
      if (encodeValuesOnly && encoder) {
        obj = utils$5.maybeMap(obj, encoder);
      }
      objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
    } else if (isArray$1(filter2)) {
      objKeys = filter2;
    } else {
      var keys = Object.keys(obj);
      objKeys = sort2 ? keys.sort(sort2) : keys;
    }
    var encodedPrefix = encodeDotInKeys ? String(prefix).replace(/\./g, "%2E") : String(prefix);
    var adjustedPrefix = commaRoundTrip && isArray$1(obj) && obj.length === 1 ? encodedPrefix + "[]" : encodedPrefix;
    if (allowEmptyArrays && isArray$1(obj) && obj.length === 0) {
      return adjustedPrefix + "[]";
    }
    for (var j = 0; j < objKeys.length; ++j) {
      var key2 = objKeys[j];
      var value = typeof key2 === "object" && key2 && typeof key2.value !== "undefined" ? key2.value : obj[key2];
      if (skipNulls && value === null) {
        continue;
      }
      var encodedKey = allowDots && encodeDotInKeys ? String(key2).replace(/\./g, "%2E") : String(key2);
      var keyPrefix = isArray$1(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + encodedKey : "[" + encodedKey + "]");
      sideChannel2.set(object, step);
      var valueSideChannel = getSideChannel();
      valueSideChannel.set(sentinel, sideChannel2);
      pushToArray(values, stringify2(
        value,
        keyPrefix,
        generateArrayPrefix,
        commaRoundTrip,
        allowEmptyArrays,
        strictNullHandling,
        skipNulls,
        encodeDotInKeys,
        generateArrayPrefix === "comma" && encodeValuesOnly && isArray$1(obj) ? null : encoder,
        filter2,
        sort2,
        allowDots,
        serializeDate,
        format2,
        formatter,
        encodeValuesOnly,
        charset,
        valueSideChannel
      ));
    }
    return values;
  };
  var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
    if (!opts) {
      return defaults$1;
    }
    if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
      throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
    }
    if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") {
      throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
    }
    if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
      throw new TypeError("Encoder has to be a function.");
    }
    var charset = opts.charset || defaults$1.charset;
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var format2 = formats$1["default"];
    if (typeof opts.format !== "undefined") {
      if (!has$1.call(formats$1.formatters, opts.format)) {
        throw new TypeError("Unknown format option provided.");
      }
      format2 = opts.format;
    }
    var formatter = formats$1.formatters[format2];
    var filter2 = defaults$1.filter;
    if (typeof opts.filter === "function" || isArray$1(opts.filter)) {
      filter2 = opts.filter;
    }
    var arrayFormat;
    if (opts.arrayFormat in arrayPrefixGenerators) {
      arrayFormat = opts.arrayFormat;
    } else if ("indices" in opts) {
      arrayFormat = opts.indices ? "indices" : "repeat";
    } else {
      arrayFormat = defaults$1.arrayFormat;
    }
    if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
      throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
    }
    var allowDots = typeof opts.allowDots === "undefined" ? opts.encodeDotInKeys === true ? true : defaults$1.allowDots : !!opts.allowDots;
    return {
      addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults$1.addQueryPrefix,
      allowDots,
      allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults$1.allowEmptyArrays,
      arrayFormat,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults$1.charsetSentinel,
      commaRoundTrip: !!opts.commaRoundTrip,
      delimiter: typeof opts.delimiter === "undefined" ? defaults$1.delimiter : opts.delimiter,
      encode: typeof opts.encode === "boolean" ? opts.encode : defaults$1.encode,
      encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : defaults$1.encodeDotInKeys,
      encoder: typeof opts.encoder === "function" ? opts.encoder : defaults$1.encoder,
      encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults$1.encodeValuesOnly,
      filter: filter2,
      format: format2,
      formatter,
      serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults$1.serializeDate,
      skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults$1.skipNulls,
      sort: typeof opts.sort === "function" ? opts.sort : null,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults$1.strictNullHandling
    };
  };
  var stringify_1 = function(object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter2;
    if (typeof options.filter === "function") {
      filter2 = options.filter;
      obj = filter2("", obj);
    } else if (isArray$1(options.filter)) {
      filter2 = options.filter;
      objKeys = filter2;
    }
    var keys = [];
    if (typeof obj !== "object" || obj === null) {
      return "";
    }
    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
    var commaRoundTrip = generateArrayPrefix === "comma" && options.commaRoundTrip;
    if (!objKeys) {
      objKeys = Object.keys(obj);
    }
    if (options.sort) {
      objKeys.sort(options.sort);
    }
    var sideChannel2 = getSideChannel();
    for (var i2 = 0; i2 < objKeys.length; ++i2) {
      var key2 = objKeys[i2];
      var value = obj[key2];
      if (options.skipNulls && value === null) {
        continue;
      }
      pushToArray(keys, stringify$1(
        value,
        key2,
        generateArrayPrefix,
        commaRoundTrip,
        options.allowEmptyArrays,
        options.strictNullHandling,
        options.skipNulls,
        options.encodeDotInKeys,
        options.encode ? options.encoder : null,
        options.filter,
        options.sort,
        options.allowDots,
        options.serializeDate,
        options.format,
        options.formatter,
        options.encodeValuesOnly,
        options.charset,
        sideChannel2
      ));
    }
    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? "?" : "";
    if (options.charsetSentinel) {
      if (options.charset === "iso-8859-1") {
        prefix += "utf8=%26%2310003%3B&";
      } else {
        prefix += "utf8=%E2%9C%93&";
      }
    }
    return joined.length > 0 ? prefix + joined : "";
  };
  var utils$4 = utils$6;
  var has = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;
  var defaults = {
    allowDots: false,
    allowEmptyArrays: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: "utf-8",
    charsetSentinel: false,
    comma: false,
    decodeDotInKeys: false,
    decoder: utils$4.decode,
    delimiter: "&",
    depth: 5,
    duplicates: "combine",
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1e3,
    parseArrays: true,
    plainObjects: false,
    strictDepth: false,
    strictNullHandling: false,
    throwOnLimitExceeded: false
  };
  var interpretNumericEntities = function(str) {
    return str.replace(/&#(\d+);/g, function($0, numberStr) {
      return String.fromCharCode(parseInt(numberStr, 10));
    });
  };
  var parseArrayValue = function(val, options, currentArrayLength) {
    if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
      return val.split(",");
    }
    if (options.throwOnLimitExceeded && currentArrayLength >= options.arrayLimit) {
      throw new RangeError("Array limit exceeded. Only " + options.arrayLimit + " element" + (options.arrayLimit === 1 ? "" : "s") + " allowed in an array.");
    }
    return val;
  };
  var isoSentinel = "utf8=%26%2310003%3B";
  var charsetSentinel = "utf8=%E2%9C%93";
  var parseValues = function parseQueryStringValues(str, options) {
    var obj = { __proto__: null };
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
    cleanStr = cleanStr.replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    var limit2 = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
    var parts = cleanStr.split(
      options.delimiter,
      options.throwOnLimitExceeded ? limit2 + 1 : limit2
    );
    if (options.throwOnLimitExceeded && parts.length > limit2) {
      throw new RangeError("Parameter limit exceeded. Only " + limit2 + " parameter" + (limit2 === 1 ? "" : "s") + " allowed.");
    }
    var skipIndex = -1;
    var i2;
    var charset = options.charset;
    if (options.charsetSentinel) {
      for (i2 = 0; i2 < parts.length; ++i2) {
        if (parts[i2].indexOf("utf8=") === 0) {
          if (parts[i2] === charsetSentinel) {
            charset = "utf-8";
          } else if (parts[i2] === isoSentinel) {
            charset = "iso-8859-1";
          }
          skipIndex = i2;
          i2 = parts.length;
        }
      }
    }
    for (i2 = 0; i2 < parts.length; ++i2) {
      if (i2 === skipIndex) {
        continue;
      }
      var part = parts[i2];
      var bracketEqualsPos = part.indexOf("]=");
      var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
      var key2;
      var val;
      if (pos === -1) {
        key2 = options.decoder(part, defaults.decoder, charset, "key");
        val = options.strictNullHandling ? null : "";
      } else {
        key2 = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
        val = utils$4.maybeMap(
          parseArrayValue(
            part.slice(pos + 1),
            options,
            isArray(obj[key2]) ? obj[key2].length : 0
          ),
          function(encodedVal) {
            return options.decoder(encodedVal, defaults.decoder, charset, "value");
          }
        );
      }
      if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
        val = interpretNumericEntities(String(val));
      }
      if (part.indexOf("[]=") > -1) {
        val = isArray(val) ? [val] : val;
      }
      var existing = has.call(obj, key2);
      if (existing && options.duplicates === "combine") {
        obj[key2] = utils$4.combine(obj[key2], val);
      } else if (!existing || options.duplicates === "last") {
        obj[key2] = val;
      }
    }
    return obj;
  };
  var parseObject = function(chain, val, options, valuesParsed) {
    var currentArrayLength = 0;
    if (chain.length > 0 && chain[chain.length - 1] === "[]") {
      var parentKey = chain.slice(0, -1).join("");
      currentArrayLength = Array.isArray(val) && val[parentKey] ? val[parentKey].length : 0;
    }
    var leaf = valuesParsed ? val : parseArrayValue(val, options, currentArrayLength);
    for (var i2 = chain.length - 1; i2 >= 0; --i2) {
      var obj;
      var root = chain[i2];
      if (root === "[]" && options.parseArrays) {
        obj = options.allowEmptyArrays && (leaf === "" || options.strictNullHandling && leaf === null) ? [] : utils$4.combine([], leaf);
      } else {
        obj = options.plainObjects ? { __proto__: null } : {};
        var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
        var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, ".") : cleanRoot;
        var index = parseInt(decodedRoot, 10);
        if (!options.parseArrays && decodedRoot === "") {
          obj = { 0: leaf };
        } else if (!isNaN(index) && root !== decodedRoot && String(index) === decodedRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
          obj = [];
          obj[index] = leaf;
        } else if (decodedRoot !== "__proto__") {
          obj[decodedRoot] = leaf;
        }
      }
      leaf = obj;
    }
    return leaf;
  };
  var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
      return;
    }
    var key2 = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    var segment = options.depth > 0 && brackets.exec(key2);
    var parent = segment ? key2.slice(0, segment.index) : key2;
    var keys = [];
    if (parent) {
      if (!options.plainObjects && has.call(Object.prototype, parent)) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(parent);
    }
    var i2 = 0;
    while (options.depth > 0 && (segment = child.exec(key2)) !== null && i2 < options.depth) {
      i2 += 1;
      if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(segment[1]);
    }
    if (segment) {
      if (options.strictDepth === true) {
        throw new RangeError("Input depth exceeded depth option of " + options.depth + " and strictDepth is true");
      }
      keys.push("[" + key2.slice(segment.index) + "]");
    }
    return parseObject(keys, val, options, valuesParsed);
  };
  var normalizeParseOptions = function normalizeParseOptions2(opts) {
    if (!opts) {
      return defaults;
    }
    if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
      throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
    }
    if (typeof opts.decodeDotInKeys !== "undefined" && typeof opts.decodeDotInKeys !== "boolean") {
      throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");
    }
    if (opts.decoder !== null && typeof opts.decoder !== "undefined" && typeof opts.decoder !== "function") {
      throw new TypeError("Decoder has to be a function.");
    }
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    if (typeof opts.throwOnLimitExceeded !== "undefined" && typeof opts.throwOnLimitExceeded !== "boolean") {
      throw new TypeError("`throwOnLimitExceeded` option must be a boolean");
    }
    var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
    var duplicates = typeof opts.duplicates === "undefined" ? defaults.duplicates : opts.duplicates;
    if (duplicates !== "combine" && duplicates !== "first" && duplicates !== "last") {
      throw new TypeError("The duplicates option must be either combine, first, or last");
    }
    var allowDots = typeof opts.allowDots === "undefined" ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
    return {
      allowDots,
      allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
      allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
      allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
      arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
      comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
      decodeDotInKeys: typeof opts.decodeDotInKeys === "boolean" ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
      decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
      delimiter: typeof opts.delimiter === "string" || utils$4.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
      // eslint-disable-next-line no-implicit-coercion, no-extra-parens
      depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
      duplicates,
      ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
      interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
      parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
      parseArrays: opts.parseArrays !== false,
      plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
      strictDepth: typeof opts.strictDepth === "boolean" ? !!opts.strictDepth : defaults.strictDepth,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling,
      throwOnLimitExceeded: typeof opts.throwOnLimitExceeded === "boolean" ? opts.throwOnLimitExceeded : false
    };
  };
  var parse$9 = function(str, opts) {
    var options = normalizeParseOptions(opts);
    if (str === "" || str === null || typeof str === "undefined") {
      return options.plainObjects ? { __proto__: null } : {};
    }
    var tempObj = typeof str === "string" ? parseValues(str, options) : str;
    var obj = options.plainObjects ? { __proto__: null } : {};
    var keys = Object.keys(tempObj);
    for (var i2 = 0; i2 < keys.length; ++i2) {
      var key2 = keys[i2];
      var newObj = parseKeys(key2, tempObj[key2], options, typeof str === "string");
      obj = utils$4.merge(obj, newObj, options);
    }
    if (options.allowSparse === true) {
      return obj;
    }
    return utils$4.compact(obj);
  };
  var stringify = stringify_1;
  var parse$8 = parse$9;
  var formats = formats$3;
  var lib$3 = {
    formats,
    parse: parse$8,
    stringify
  };
  const require$$1$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(lib$3);
  var punycode = require$$0$2;
  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  }
  var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/, delims = [
    "<",
    ">",
    '"',
    "`",
    " ",
    "\r",
    "\n",
    "	"
  ], unwise = [
    "{",
    "}",
    "|",
    "\\",
    "^",
    "`"
  ].concat(delims), autoEscape = ["'"].concat(unwise), nonHostChars = [
    "%",
    "/",
    "?",
    ";",
    "#"
  ].concat(autoEscape), hostEndingChars = [
    "/",
    "?",
    "#"
  ], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, unsafeProtocol = {
    javascript: true,
    "javascript:": true
  }, hostlessProtocol = {
    javascript: true,
    "javascript:": true
  }, slashedProtocol = {
    http: true,
    https: true,
    ftp: true,
    gopher: true,
    file: true,
    "http:": true,
    "https:": true,
    "ftp:": true,
    "gopher:": true,
    "file:": true
  }, querystring = require$$1$1;
  function urlParse(url2, parseQueryString, slashesDenoteHost) {
    if (url2 && typeof url2 === "object" && url2 instanceof Url) {
      return url2;
    }
    var u = new Url();
    u.parse(url2, parseQueryString, slashesDenoteHost);
    return u;
  }
  Url.prototype.parse = function(url2, parseQueryString, slashesDenoteHost) {
    if (typeof url2 !== "string") {
      throw new TypeError("Parameter 'url' must be a string, not " + typeof url2);
    }
    var queryIndex = url2.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url2.indexOf("#") ? "?" : "#", uSplit = url2.split(splitter), slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, "/");
    url2 = uSplit.join(splitter);
    var rest = url2;
    rest = rest.trim();
    if (!slashesDenoteHost && url2.split("#").length === 1) {
      var simplePath = simplePathPattern.exec(rest);
      if (simplePath) {
        this.path = rest;
        this.href = rest;
        this.pathname = simplePath[1];
        if (simplePath[2]) {
          this.search = simplePath[2];
          if (parseQueryString) {
            this.query = querystring.parse(this.search.substr(1));
          } else {
            this.query = this.search.substr(1);
          }
        } else if (parseQueryString) {
          this.search = "";
          this.query = {};
        }
        return this;
      }
    }
    var proto = protocolPattern.exec(rest);
    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      this.protocol = lowerProto;
      rest = rest.substr(proto.length);
    }
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@/]+@[^@/]+/)) {
      var slashes = rest.substr(0, 2) === "//";
      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        this.slashes = true;
      }
    }
    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
      var hostEnd = -1;
      for (var i2 = 0; i2 < hostEndingChars.length; i2++) {
        var hec = rest.indexOf(hostEndingChars[i2]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
          hostEnd = hec;
        }
      }
      var auth, atSign;
      if (hostEnd === -1) {
        atSign = rest.lastIndexOf("@");
      } else {
        atSign = rest.lastIndexOf("@", hostEnd);
      }
      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        this.auth = decodeURIComponent(auth);
      }
      hostEnd = -1;
      for (var i2 = 0; i2 < nonHostChars.length; i2++) {
        var hec = rest.indexOf(nonHostChars[i2]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
          hostEnd = hec;
        }
      }
      if (hostEnd === -1) {
        hostEnd = rest.length;
      }
      this.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd);
      this.parseHost();
      this.hostname = this.hostname || "";
      var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
      if (!ipv6Hostname) {
        var hostparts = this.hostname.split(/\./);
        for (var i2 = 0, l = hostparts.length; i2 < l; i2++) {
          var part = hostparts[i2];
          if (!part) {
            continue;
          }
          if (!part.match(hostnamePartPattern)) {
            var newpart = "";
            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                newpart += "x";
              } else {
                newpart += part[j];
              }
            }
            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i2);
              var notHost = hostparts.slice(i2 + 1);
              var bit = part.match(hostnamePartStart);
              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }
              if (notHost.length) {
                rest = "/" + notHost.join(".") + rest;
              }
              this.hostname = validParts.join(".");
              break;
            }
          }
        }
      }
      if (this.hostname.length > hostnameMaxLen) {
        this.hostname = "";
      } else {
        this.hostname = this.hostname.toLowerCase();
      }
      if (!ipv6Hostname) {
        this.hostname = punycode.toASCII(this.hostname);
      }
      var p = this.port ? ":" + this.port : "";
      var h = this.hostname || "";
      this.host = h + p;
      this.href += this.host;
      if (ipv6Hostname) {
        this.hostname = this.hostname.substr(1, this.hostname.length - 2);
        if (rest[0] !== "/") {
          rest = "/" + rest;
        }
      }
    }
    if (!unsafeProtocol[lowerProto]) {
      for (var i2 = 0, l = autoEscape.length; i2 < l; i2++) {
        var ae = autoEscape[i2];
        if (rest.indexOf(ae) === -1) {
          continue;
        }
        var esc = encodeURIComponent(ae);
        if (esc === ae) {
          esc = escape(ae);
        }
        rest = rest.split(ae).join(esc);
      }
    }
    var hash2 = rest.indexOf("#");
    if (hash2 !== -1) {
      this.hash = rest.substr(hash2);
      rest = rest.slice(0, hash2);
    }
    var qm = rest.indexOf("?");
    if (qm !== -1) {
      this.search = rest.substr(qm);
      this.query = rest.substr(qm + 1);
      if (parseQueryString) {
        this.query = querystring.parse(this.query);
      }
      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      this.search = "";
      this.query = {};
    }
    if (rest) {
      this.pathname = rest;
    }
    if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
      this.pathname = "/";
    }
    if (this.pathname || this.search) {
      var p = this.pathname || "";
      var s2 = this.search || "";
      this.path = p + s2;
    }
    this.href = this.format();
    return this;
  };
  function urlFormat(obj) {
    if (typeof obj === "string") {
      obj = urlParse(obj);
    }
    if (!(obj instanceof Url)) {
      return Url.prototype.format.call(obj);
    }
    return obj.format();
  }
  Url.prototype.format = function() {
    var auth = this.auth || "";
    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ":");
      auth += "@";
    }
    var protocol = this.protocol || "", pathname = this.pathname || "", hash2 = this.hash || "", host = false, query = "";
    if (this.host) {
      host = auth + this.host;
    } else if (this.hostname) {
      host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
      if (this.port) {
        host += ":" + this.port;
      }
    }
    if (this.query && typeof this.query === "object" && Object.keys(this.query).length) {
      query = querystring.stringify(this.query, {
        arrayFormat: "repeat",
        addQueryPrefix: false
      });
    }
    var search = this.search || query && "?" + query || "";
    if (protocol && protocol.substr(-1) !== ":") {
      protocol += ":";
    }
    if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = "//" + (host || "");
      if (pathname && pathname.charAt(0) !== "/") {
        pathname = "/" + pathname;
      }
    } else if (!host) {
      host = "";
    }
    if (hash2 && hash2.charAt(0) !== "#") {
      hash2 = "#" + hash2;
    }
    if (search && search.charAt(0) !== "?") {
      search = "?" + search;
    }
    pathname = pathname.replace(/[?#]/g, function(match) {
      return encodeURIComponent(match);
    });
    search = search.replace("#", "%23");
    return protocol + host + pathname + search + hash2;
  };
  function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
  }
  Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
  };
  function urlResolveObject(source, relative) {
    if (!source) {
      return relative;
    }
    return urlParse(source, false, true).resolveObject(relative);
  }
  Url.prototype.resolveObject = function(relative) {
    if (typeof relative === "string") {
      var rel = new Url();
      rel.parse(relative, false, true);
      relative = rel;
    }
    var result = new Url();
    var tkeys = Object.keys(this);
    for (var tk = 0; tk < tkeys.length; tk++) {
      var tkey = tkeys[tk];
      result[tkey] = this[tkey];
    }
    result.hash = relative.hash;
    if (relative.href === "") {
      result.href = result.format();
      return result;
    }
    if (relative.slashes && !relative.protocol) {
      var rkeys = Object.keys(relative);
      for (var rk = 0; rk < rkeys.length; rk++) {
        var rkey = rkeys[rk];
        if (rkey !== "protocol") {
          result[rkey] = relative[rkey];
        }
      }
      if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
        result.pathname = "/";
        result.path = result.pathname;
      }
      result.href = result.format();
      return result;
    }
    if (relative.protocol && relative.protocol !== result.protocol) {
      if (!slashedProtocol[relative.protocol]) {
        var keys = Object.keys(relative);
        for (var v = 0; v < keys.length; v++) {
          var k = keys[v];
          result[k] = relative[k];
        }
        result.href = result.format();
        return result;
      }
      result.protocol = relative.protocol;
      if (!relative.host && !hostlessProtocol[relative.protocol]) {
        var relPath = (relative.pathname || "").split("/");
        while (relPath.length && !(relative.host = relPath.shift())) {
        }
        if (!relative.host) {
          relative.host = "";
        }
        if (!relative.hostname) {
          relative.hostname = "";
        }
        if (relPath[0] !== "") {
          relPath.unshift("");
        }
        if (relPath.length < 2) {
          relPath.unshift("");
        }
        result.pathname = relPath.join("/");
      } else {
        result.pathname = relative.pathname;
      }
      result.search = relative.search;
      result.query = relative.query;
      result.host = relative.host || "";
      result.auth = relative.auth;
      result.hostname = relative.hostname || relative.host;
      result.port = relative.port;
      if (result.pathname || result.search) {
        var p = result.pathname || "";
        var s2 = result.search || "";
        result.path = p + s2;
      }
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    }
    var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
    if (psychotic) {
      result.hostname = "";
      result.port = null;
      if (result.host) {
        if (srcPath[0] === "") {
          srcPath[0] = result.host;
        } else {
          srcPath.unshift(result.host);
        }
      }
      result.host = "";
      if (relative.protocol) {
        relative.hostname = null;
        relative.port = null;
        if (relative.host) {
          if (relPath[0] === "") {
            relPath[0] = relative.host;
          } else {
            relPath.unshift(relative.host);
          }
        }
        relative.host = null;
      }
      mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
    }
    if (isRelAbs) {
      result.host = relative.host || relative.host === "" ? relative.host : result.host;
      result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
      result.search = relative.search;
      result.query = relative.query;
      srcPath = relPath;
    } else if (relPath.length) {
      if (!srcPath) {
        srcPath = [];
      }
      srcPath.pop();
      srcPath = srcPath.concat(relPath);
      result.search = relative.search;
      result.query = relative.query;
    } else if (relative.search != null) {
      if (psychotic) {
        result.host = srcPath.shift();
        result.hostname = result.host;
        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.hostname = authInHost.shift();
          result.host = result.hostname;
        }
      }
      result.search = relative.search;
      result.query = relative.query;
      if (result.pathname !== null || result.search !== null) {
        result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
      }
      result.href = result.format();
      return result;
    }
    if (!srcPath.length) {
      result.pathname = null;
      if (result.search) {
        result.path = "/" + result.search;
      } else {
        result.path = null;
      }
      result.href = result.format();
      return result;
    }
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
    var up = 0;
    for (var i2 = srcPath.length; i2 >= 0; i2--) {
      last = srcPath[i2];
      if (last === ".") {
        srcPath.splice(i2, 1);
      } else if (last === "..") {
        srcPath.splice(i2, 1);
        up++;
      } else if (up) {
        srcPath.splice(i2, 1);
        up--;
      }
    }
    if (!mustEndAbs && !removeAllDots) {
      for (; up--; up) {
        srcPath.unshift("..");
      }
    }
    if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
      srcPath.unshift("");
    }
    if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
      srcPath.push("");
    }
    var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
    if (psychotic) {
      result.hostname = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
      result.host = result.hostname;
      var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.hostname = authInHost.shift();
        result.host = result.hostname;
      }
    }
    mustEndAbs = mustEndAbs || result.host && srcPath.length;
    if (mustEndAbs && !isAbsolute) {
      srcPath.unshift("");
    }
    if (srcPath.length > 0) {
      result.pathname = srcPath.join("/");
    } else {
      result.pathname = null;
      result.path = null;
    }
    if (result.pathname !== null || result.search !== null) {
      result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
    }
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  };
  Url.prototype.parseHost = function() {
    var host = this.host;
    var port = portPattern.exec(host);
    if (port) {
      port = port[0];
      if (port !== ":") {
        this.port = port.substr(1);
      }
      host = host.substr(0, host.length - port.length);
    }
    if (host) {
      this.hostname = host;
    }
  };
  var parse$7 = urlParse;
  var resolve$1 = urlResolve;
  var resolveObject = urlResolveObject;
  var format = urlFormat;
  var Url_1 = Url;
  function normalizeArray(parts, allowAboveRoot) {
    var up = 0;
    for (var i2 = parts.length - 1; i2 >= 0; i2--) {
      var last = parts[i2];
      if (last === ".") {
        parts.splice(i2, 1);
      } else if (last === "..") {
        parts.splice(i2, 1);
        up++;
      } else if (up) {
        parts.splice(i2, 1);
        up--;
      }
    }
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift("..");
      }
    }
    return parts;
  }
  function resolve() {
    var resolvedPath = "", resolvedAbsolute = false;
    for (var i2 = arguments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
      var path = i2 >= 0 ? arguments[i2] : "/";
      if (typeof path !== "string") {
        throw new TypeError("Arguments to path.resolve must be strings");
      } else if (!path) {
        continue;
      }
      resolvedPath = path + "/" + resolvedPath;
      resolvedAbsolute = path.charAt(0) === "/";
    }
    resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
      return !!p;
    }), !resolvedAbsolute).join("/");
    return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
  }
  function filter(xs, f2) {
    if (xs.filter) return xs.filter(f2);
    var res = [];
    for (var i2 = 0; i2 < xs.length; i2++) {
      if (f2(xs[i2], i2, xs)) res.push(xs[i2]);
    }
    return res;
  }
  var _globalThis = function(Object2) {
    function get2() {
      var _global3 = this || self;
      delete Object2.prototype.__magic__;
      return _global3;
    }
    if (typeof globalThis === "object") {
      return globalThis;
    }
    if (this) {
      return get2();
    } else {
      Object2.defineProperty(Object2.prototype, "__magic__", {
        configurable: true,
        get: get2
      });
      var _global2 = __magic__;
      return _global2;
    }
  }(Object);
  var formatImport = (
    /** @type {formatImport}*/
    format
  );
  var parseImport = (
    /** @type {parseImport}*/
    parse$7
  );
  var resolveImport = (
    /** @type {resolveImport}*/
    resolve$1
  );
  var UrlImport = (
    /** @type {UrlImport}*/
    Url_1
  );
  var URL$1 = _globalThis.URL;
  var URLSearchParams$1 = _globalThis.URLSearchParams;
  var percentRegEx = /%/g;
  var backslashRegEx = /\\/g;
  var newlineRegEx = /\n/g;
  var carriageReturnRegEx = /\r/g;
  var tabRegEx = /\t/g;
  var CHAR_FORWARD_SLASH = 47;
  function isURLInstance(instance) {
    var resolved = (
      /** @type {URL|null} */
      instance != null ? instance : null
    );
    return Boolean(resolved !== null && (resolved == null ? void 0 : resolved.href) && (resolved == null ? void 0 : resolved.origin));
  }
  function getPathFromURLPosix(url2) {
    if (url2.hostname !== "") {
      throw new TypeError('File URL host must be "localhost" or empty on browser');
    }
    var pathname = url2.pathname;
    for (var n = 0; n < pathname.length; n++) {
      if (pathname[n] === "%") {
        var third = pathname.codePointAt(n + 2) | 32;
        if (pathname[n + 1] === "2" && third === 102) {
          throw new TypeError("File URL path must not include encoded / characters");
        }
      }
    }
    return decodeURIComponent(pathname);
  }
  function encodePathChars(filepath) {
    if (filepath.includes("%")) {
      filepath = filepath.replace(percentRegEx, "%25");
    }
    if (filepath.includes("\\")) {
      filepath = filepath.replace(backslashRegEx, "%5C");
    }
    if (filepath.includes("\n")) {
      filepath = filepath.replace(newlineRegEx, "%0A");
    }
    if (filepath.includes("\r")) {
      filepath = filepath.replace(carriageReturnRegEx, "%0D");
    }
    if (filepath.includes("	")) {
      filepath = filepath.replace(tabRegEx, "%09");
    }
    return filepath;
  }
  var domainToASCII = (
    /**
     * @type {domainToASCII}
     */
    function domainToASCII2(domain) {
      if (typeof domain === "undefined") {
        throw new TypeError('The "domain" argument must be specified');
      }
      return new URL$1("http://" + domain).hostname;
    }
  );
  var domainToUnicode = (
    /**
     * @type {domainToUnicode}
     */
    function domainToUnicode2(domain) {
      if (typeof domain === "undefined") {
        throw new TypeError('The "domain" argument must be specified');
      }
      return new URL$1("http://" + domain).hostname;
    }
  );
  var pathToFileURL = (
    /**
     * @type {(url: string) => URL}
     */
    function pathToFileURL2(filepath) {
      var outURL = new URL$1("file://");
      var resolved = resolve(filepath);
      var filePathLast = filepath.charCodeAt(filepath.length - 1);
      if (filePathLast === CHAR_FORWARD_SLASH && resolved[resolved.length - 1] !== "/") {
        resolved += "/";
      }
      outURL.pathname = encodePathChars(resolved);
      return outURL;
    }
  );
  var fileURLToPath = (
    /**
     * @type {fileURLToPath & ((path: string | URL) => string)}
     */
    function fileURLToPath2(path) {
      if (!isURLInstance(path) && typeof path !== "string") {
        throw new TypeError('The "path" argument must be of type string or an instance of URL. Received type ' + typeof path + " (" + path + ")");
      }
      var resolved = new URL$1(path);
      if (resolved.protocol !== "file:") {
        throw new TypeError("The URL must be of scheme file");
      }
      return getPathFromURLPosix(resolved);
    }
  );
  var formatImportWithOverloads = (
    /**
     * @type {(
     *   ((urlObject: URL, options?: URLFormatOptions) => string) &
     *   ((urlObject: UrlObject | string, options?: never) => string)
     * )}
     */
    function formatImportWithOverloads2(urlObject, options) {
      var _options$auth, _options$fragment, _options$search, _options$unicode;
      if (options === void 0) {
        options = {};
      }
      if (!(urlObject instanceof URL$1)) {
        return formatImport(urlObject);
      }
      if (typeof options !== "object" || options === null) {
        throw new TypeError('The "options" argument must be of type object.');
      }
      var auth = (_options$auth = options.auth) != null ? _options$auth : true;
      var fragment = (_options$fragment = options.fragment) != null ? _options$fragment : true;
      var search = (_options$search = options.search) != null ? _options$search : true;
      (_options$unicode = options.unicode) != null ? _options$unicode : false;
      var parsed = new URL$1(urlObject.toString());
      if (!auth) {
        parsed.username = "";
        parsed.password = "";
      }
      if (!fragment) {
        parsed.hash = "";
      }
      if (!search) {
        parsed.search = "";
      }
      return parsed.toString();
    }
  );
  var api = {
    format: formatImportWithOverloads,
    parse: parseImport,
    resolve: resolveImport,
    resolveObject,
    Url: UrlImport,
    URL: URL$1,
    URLSearchParams: URLSearchParams$1,
    domainToASCII,
    domainToUnicode,
    pathToFileURL,
    fileURLToPath
  };
  const url = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    URL: URL$1,
    URLSearchParams: URLSearchParams$1,
    Url: UrlImport,
    default: api,
    domainToASCII,
    domainToUnicode,
    fileURLToPath,
    format: formatImportWithOverloads,
    parse: parseImport,
    pathToFileURL,
    resolve: resolveImport,
    resolveObject
  }, Symbol.toStringTag, { value: "Module" }));
  const require$$4 = /* @__PURE__ */ getAugmentedNamespace(url);
  var hasRequiredStreamHttp;
  function requireStreamHttp() {
    if (hasRequiredStreamHttp) return streamHttp;
    hasRequiredStreamHttp = 1;
    (function(exports2) {
      var ClientRequest = requireRequest();
      var response2 = requireResponse();
      var extend2 = requireImmutable();
      var statusCodes = requireBrowser();
      var url2 = require$$4;
      var http = exports2;
      http.request = function(opts, cb) {
        if (typeof opts === "string")
          opts = url2.parse(opts);
        else
          opts = extend2(opts);
        var defaultProtocol = commonjsGlobal.location.protocol.search(/^https?:$/) === -1 ? "http:" : "";
        var protocol = opts.protocol || defaultProtocol;
        var host = opts.hostname || opts.host;
        var port = opts.port;
        var path = opts.path || "/";
        if (host && host.indexOf(":") !== -1)
          host = "[" + host + "]";
        opts.url = (host ? protocol + "//" + host : "") + (port ? ":" + port : "") + path;
        opts.method = (opts.method || "GET").toUpperCase();
        opts.headers = opts.headers || {};
        var req = new ClientRequest(opts);
        if (cb)
          req.on("response", cb);
        return req;
      };
      http.get = function get2(opts, cb) {
        var req = http.request(opts, cb);
        req.end();
        return req;
      };
      http.ClientRequest = ClientRequest;
      http.IncomingMessage = response2.IncomingMessage;
      http.Agent = function() {
      };
      http.Agent.defaultMaxSockets = 4;
      http.globalAgent = new http.Agent();
      http.STATUS_CODES = statusCodes;
      http.METHODS = [
        "CHECKOUT",
        "CONNECT",
        "COPY",
        "DELETE",
        "GET",
        "HEAD",
        "LOCK",
        "M-SEARCH",
        "MERGE",
        "MKACTIVITY",
        "MKCOL",
        "MOVE",
        "NOTIFY",
        "OPTIONS",
        "PATCH",
        "POST",
        "PROPFIND",
        "PROPPATCH",
        "PURGE",
        "PUT",
        "REPORT",
        "SEARCH",
        "SUBSCRIBE",
        "TRACE",
        "UNLOCK",
        "UNSUBSCRIBE"
      ];
    })(streamHttp);
    return streamHttp;
  }
  var httpsBrowserify = { exports: {} };
  var hasRequiredHttpsBrowserify;
  function requireHttpsBrowserify() {
    if (hasRequiredHttpsBrowserify) return httpsBrowserify.exports;
    hasRequiredHttpsBrowserify = 1;
    (function(module) {
      var http = requireStreamHttp();
      var url2 = require$$4;
      var https = module.exports;
      for (var key2 in http) {
        if (http.hasOwnProperty(key2)) https[key2] = http[key2];
      }
      https.request = function(params, cb) {
        params = validateParams(params);
        return http.request.call(this, params, cb);
      };
      https.get = function(params, cb) {
        params = validateParams(params);
        return http.get.call(this, params, cb);
      };
      function validateParams(params) {
        if (typeof params === "string") {
          params = url2.parse(params);
        }
        if (!params.protocol) {
          params.protocol = "https:";
        }
        if (params.protocol !== "https:") {
          throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
        }
        return params;
      }
    })(httpsBrowserify);
    return httpsBrowserify.exports;
  }
  var lib$2 = {};
  var binding = {};
  var assert$3 = { exports: {} };
  var errors$2 = {};
  var hasRequiredErrors;
  function requireErrors() {
    if (hasRequiredErrors) return errors$2;
    hasRequiredErrors = 1;
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _createClass(Constructor, protoProps, staticProps) {
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var codes = {};
    var assert2;
    var util2;
    function createErrorType(code2, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = /* @__PURE__ */ function(_Base) {
        _inherits(NodeError2, _Base);
        var _super = _createSuper(NodeError2);
        function NodeError2(arg1, arg2, arg3) {
          var _this;
          _classCallCheck(this, NodeError2);
          _this = _super.call(this, getMessage(arg1, arg2, arg3));
          _this.code = code2;
          return _this;
        }
        return _createClass(NodeError2);
      }(Base);
      codes[code2] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len2 = expected.length;
        expected = expected.map(function(i2) {
          return String(i2);
        });
        if (len2 > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len2 - 1).join(", "), ", or ") + expected[len2 - 1];
        } else if (len2 === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(0, search.length) === search;
    }
    function endsWith2(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
      if (assert2 === void 0) assert2 = requireAssert();
      assert2(typeof name2 === "string", "'name' must be a string");
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith2(name2, " argument")) {
        msg = "The ".concat(name2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type2 = includes(name2, ".") ? "property" : "argument";
        msg = 'The "'.concat(name2, '" ').concat(type2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(_typeof(actual));
      return msg;
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_VALUE", function(name2, value) {
      var reason = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "is invalid";
      if (util2 === void 0) util2 = requireUtil$1();
      var inspected = util2.inspect(value);
      if (inspected.length > 128) {
        inspected = "".concat(inspected.slice(0, 128), "...");
      }
      return "The argument '".concat(name2, "' ").concat(reason, ". Received ").concat(inspected);
    }, TypeError);
    createErrorType("ERR_INVALID_RETURN_VALUE", function(input, name2, value) {
      var type2;
      if (value && value.constructor && value.constructor.name) {
        type2 = "instance of ".concat(value.constructor.name);
      } else {
        type2 = "type ".concat(_typeof(value));
      }
      return "Expected ".concat(input, ' to be returned from the "').concat(name2, '"') + " function but got ".concat(type2, ".");
    }, TypeError);
    createErrorType("ERR_MISSING_ARGS", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (assert2 === void 0) assert2 = requireAssert();
      assert2(args.length > 0, "At least one arg needs to be specified");
      var msg = "The ";
      var len2 = args.length;
      args = args.map(function(a) {
        return '"'.concat(a, '"');
      });
      switch (len2) {
        case 1:
          msg += "".concat(args[0], " argument");
          break;
        case 2:
          msg += "".concat(args[0], " and ").concat(args[1], " arguments");
          break;
        default:
          msg += args.slice(0, len2 - 1).join(", ");
          msg += ", and ".concat(args[len2 - 1], " arguments");
          break;
      }
      return "".concat(msg, " must be specified");
    }, TypeError);
    errors$2.codes = codes;
    return errors$2;
  }
  var assertion_error;
  var hasRequiredAssertion_error;
  function requireAssertion_error() {
    if (hasRequiredAssertion_error) return assertion_error;
    hasRequiredAssertion_error = 1;
    function ownKeys(e, r2) {
      var t2 = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys(Object(t2), true).forEach(function(r3) {
          _defineProperty(e, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e;
    }
    function _defineProperty(obj, key2, value) {
      key2 = _toPropertyKey(key2);
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      _defineProperties(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key2 = _toPrimitive(arg, "string");
      return _typeof(key2) === "symbol" ? key2 : String(key2);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint);
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(input);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2)) return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2)) return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
        return _setPrototypeOf(Wrapper, Class2);
      };
      return _wrapNativeSuper(Class);
    }
    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct.bind();
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2) _setPrototypeOf(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var _require = requireUtil$1(), inspect2 = _require.inspect;
    var _require2 = requireErrors(), ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;
    function endsWith2(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function repeat(str, count) {
      count = Math.floor(count);
      if (str.length == 0 || count == 0) return "";
      var maxCount = str.length * count;
      count = Math.floor(Math.log(count) / Math.log(2));
      while (count) {
        str += str;
        count--;
      }
      str += str.substring(0, maxCount - str.length);
      return str;
    }
    var blue = "";
    var green = "";
    var red = "";
    var white = "";
    var kReadableOperator = {
      deepStrictEqual: "Expected values to be strictly deep-equal:",
      strictEqual: "Expected values to be strictly equal:",
      strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
      deepEqual: "Expected values to be loosely deep-equal:",
      equal: "Expected values to be loosely equal:",
      notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
      notStrictEqual: 'Expected "actual" to be strictly unequal to:',
      notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
      notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
      notEqual: 'Expected "actual" to be loosely unequal to:',
      notIdentical: "Values identical but not reference-equal:"
    };
    var kMaxShortLength = 10;
    function copyError(source) {
      var keys = Object.keys(source);
      var target = Object.create(Object.getPrototypeOf(source));
      keys.forEach(function(key2) {
        target[key2] = source[key2];
      });
      Object.defineProperty(target, "message", {
        value: source.message
      });
      return target;
    }
    function inspectValue(val) {
      return inspect2(val, {
        compact: false,
        customInspect: false,
        depth: 1e3,
        maxArrayLength: Infinity,
        // Assert compares only enumerable properties (with a few exceptions).
        showHidden: false,
        // Having a long line as error is better than wrapping the line for
        // comparison for now.
        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
        // have meta information about the inspected properties (i.e., know where
        // in what line the property starts and ends).
        breakLength: Infinity,
        // Assert does not detect proxies currently.
        showProxy: false,
        sorted: true,
        // Inspect getters as we also check them when comparing entries.
        getters: true
      });
    }
    function createErrDiff(actual, expected, operator) {
      var other = "";
      var res = "";
      var lastPos = 0;
      var end = "";
      var skipped = false;
      var actualInspected = inspectValue(actual);
      var actualLines = actualInspected.split("\n");
      var expectedLines = inspectValue(expected).split("\n");
      var i2 = 0;
      var indicator = "";
      if (operator === "strictEqual" && _typeof(actual) === "object" && _typeof(expected) === "object" && actual !== null && expected !== null) {
        operator = "strictEqualObject";
      }
      if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
        var inputLength = actualLines[0].length + expectedLines[0].length;
        if (inputLength <= kMaxShortLength) {
          if ((_typeof(actual) !== "object" || actual === null) && (_typeof(expected) !== "object" || expected === null) && (actual !== 0 || expected !== 0)) {
            return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
          }
        } else if (operator !== "strictEqualObject") {
          var maxLength = process$1.stderr && process$1.stderr.isTTY ? process$1.stderr.columns : 80;
          if (inputLength < maxLength) {
            while (actualLines[0][i2] === expectedLines[0][i2]) {
              i2++;
            }
            if (i2 > 2) {
              indicator = "\n  ".concat(repeat(" ", i2), "^");
              i2 = 0;
            }
          }
        }
      }
      var a = actualLines[actualLines.length - 1];
      var b = expectedLines[expectedLines.length - 1];
      while (a === b) {
        if (i2++ < 2) {
          end = "\n  ".concat(a).concat(end);
        } else {
          other = a;
        }
        actualLines.pop();
        expectedLines.pop();
        if (actualLines.length === 0 || expectedLines.length === 0) break;
        a = actualLines[actualLines.length - 1];
        b = expectedLines[expectedLines.length - 1];
      }
      var maxLines = Math.max(actualLines.length, expectedLines.length);
      if (maxLines === 0) {
        var _actualLines = actualInspected.split("\n");
        if (_actualLines.length > 30) {
          _actualLines[26] = "".concat(blue, "...").concat(white);
          while (_actualLines.length > 27) {
            _actualLines.pop();
          }
        }
        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join("\n"), "\n");
      }
      if (i2 > 3) {
        end = "\n".concat(blue, "...").concat(white).concat(end);
        skipped = true;
      }
      if (other !== "") {
        end = "\n  ".concat(other).concat(end);
        other = "";
      }
      var printedLines = 0;
      var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
      var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
      for (i2 = 0; i2 < maxLines; i2++) {
        var cur = i2 - lastPos;
        if (actualLines.length < i2 + 1) {
          if (cur > 1 && i2 > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(expectedLines[i2 - 2]);
              printedLines++;
            }
            res += "\n  ".concat(expectedLines[i2 - 1]);
            printedLines++;
          }
          lastPos = i2;
          other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i2]);
          printedLines++;
        } else if (expectedLines.length < i2 + 1) {
          if (cur > 1 && i2 > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(actualLines[i2 - 2]);
              printedLines++;
            }
            res += "\n  ".concat(actualLines[i2 - 1]);
            printedLines++;
          }
          lastPos = i2;
          res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i2]);
          printedLines++;
        } else {
          var expectedLine = expectedLines[i2];
          var actualLine = actualLines[i2];
          var divergingLines = actualLine !== expectedLine && (!endsWith2(actualLine, ",") || actualLine.slice(0, -1) !== expectedLine);
          if (divergingLines && endsWith2(expectedLine, ",") && expectedLine.slice(0, -1) === actualLine) {
            divergingLines = false;
            actualLine += ",";
          }
          if (divergingLines) {
            if (cur > 1 && i2 > 2) {
              if (cur > 4) {
                res += "\n".concat(blue, "...").concat(white);
                skipped = true;
              } else if (cur > 3) {
                res += "\n  ".concat(actualLines[i2 - 2]);
                printedLines++;
              }
              res += "\n  ".concat(actualLines[i2 - 1]);
              printedLines++;
            }
            lastPos = i2;
            res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
            printedLines += 2;
          } else {
            res += other;
            other = "";
            if (cur === 1 || i2 === 0) {
              res += "\n  ".concat(actualLine);
              printedLines++;
            }
          }
        }
        if (printedLines > 20 && i2 < maxLines - 2) {
          return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
        }
      }
      return "".concat(msg).concat(skipped ? skippedMsg : "", "\n").concat(res).concat(other).concat(end).concat(indicator);
    }
    var AssertionError2 = /* @__PURE__ */ function(_Error, _inspect$custom) {
      _inherits(AssertionError3, _Error);
      var _super = _createSuper(AssertionError3);
      function AssertionError3(options) {
        var _this;
        _classCallCheck(this, AssertionError3);
        if (_typeof(options) !== "object" || options === null) {
          throw new ERR_INVALID_ARG_TYPE("options", "Object", options);
        }
        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
        var actual = options.actual, expected = options.expected;
        var limit2 = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        if (message != null) {
          _this = _super.call(this, String(message));
        } else {
          if (process$1.stderr && process$1.stderr.isTTY) {
            if (process$1.stderr && process$1.stderr.getColorDepth && process$1.stderr.getColorDepth() !== 1) {
              blue = "\x1B[34m";
              green = "\x1B[32m";
              white = "\x1B[39m";
              red = "\x1B[31m";
            } else {
              blue = "";
              green = "";
              white = "";
              red = "";
            }
          }
          if (_typeof(actual) === "object" && actual !== null && _typeof(expected) === "object" && expected !== null && "stack" in actual && actual instanceof Error && "stack" in expected && expected instanceof Error) {
            actual = copyError(actual);
            expected = copyError(expected);
          }
          if (operator === "deepStrictEqual" || operator === "strictEqual") {
            _this = _super.call(this, createErrDiff(actual, expected, operator));
          } else if (operator === "notDeepStrictEqual" || operator === "notStrictEqual") {
            var base2 = kReadableOperator[operator];
            var res = inspectValue(actual).split("\n");
            if (operator === "notStrictEqual" && _typeof(actual) === "object" && actual !== null) {
              base2 = kReadableOperator.notStrictEqualObject;
            }
            if (res.length > 30) {
              res[26] = "".concat(blue, "...").concat(white);
              while (res.length > 27) {
                res.pop();
              }
            }
            if (res.length === 1) {
              _this = _super.call(this, "".concat(base2, " ").concat(res[0]));
            } else {
              _this = _super.call(this, "".concat(base2, "\n\n").concat(res.join("\n"), "\n"));
            }
          } else {
            var _res = inspectValue(actual);
            var other = "";
            var knownOperators = kReadableOperator[operator];
            if (operator === "notDeepEqual" || operator === "notEqual") {
              _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
              if (_res.length > 1024) {
                _res = "".concat(_res.slice(0, 1021), "...");
              }
            } else {
              other = "".concat(inspectValue(expected));
              if (_res.length > 512) {
                _res = "".concat(_res.slice(0, 509), "...");
              }
              if (other.length > 512) {
                other = "".concat(other.slice(0, 509), "...");
              }
              if (operator === "deepEqual" || operator === "equal") {
                _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
              } else {
                other = " ".concat(operator, " ").concat(other);
              }
            }
            _this = _super.call(this, "".concat(_res).concat(other));
          }
        }
        Error.stackTraceLimit = limit2;
        _this.generatedMessage = !message;
        Object.defineProperty(_assertThisInitialized(_this), "name", {
          value: "AssertionError [ERR_ASSERTION]",
          enumerable: false,
          writable: true,
          configurable: true
        });
        _this.code = "ERR_ASSERTION";
        _this.actual = actual;
        _this.expected = expected;
        _this.operator = operator;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
        }
        _this.stack;
        _this.name = "AssertionError";
        return _possibleConstructorReturn(_this);
      }
      _createClass(AssertionError3, [{
        key: "toString",
        value: function toString2() {
          return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
        }
      }, {
        key: _inspect$custom,
        value: function value(recurseTimes, ctx) {
          return inspect2(this, _objectSpread(_objectSpread({}, ctx), {}, {
            customInspect: false,
            depth: 0
          }));
        }
      }]);
      return AssertionError3;
    }(/* @__PURE__ */ _wrapNativeSuper(Error), inspect2.custom);
    assertion_error = AssertionError2;
    return assertion_error;
  }
  var isArguments;
  var hasRequiredIsArguments;
  function requireIsArguments() {
    if (hasRequiredIsArguments) return isArguments;
    hasRequiredIsArguments = 1;
    var toStr2 = Object.prototype.toString;
    isArguments = function isArguments2(value) {
      var str = toStr2.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr2.call(value.callee) === "[object Function]";
      }
      return isArgs;
    };
    return isArguments;
  }
  var implementation$3;
  var hasRequiredImplementation$3;
  function requireImplementation$3() {
    if (hasRequiredImplementation$3) return implementation$3;
    hasRequiredImplementation$3 = 1;
    var keysShim;
    if (!Object.keys) {
      var has2 = Object.prototype.hasOwnProperty;
      var toStr2 = Object.prototype.toString;
      var isArgs = requireIsArguments();
      var isEnumerable2 = Object.prototype.propertyIsEnumerable;
      var hasDontEnumBug = !isEnumerable2.call({ toString: null }, "toString");
      var hasProtoEnumBug = isEnumerable2.call(function() {
      }, "prototype");
      var dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      var equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      };
      var excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      var hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k in window) {
          try {
            if (!excludedKeys["$" + k] && has2.call(window, k) && window[k] !== null && typeof window[k] === "object") {
              try {
                equalsConstructorPrototype(window[k]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      var equalsConstructorPrototypeIfNotBuggy = function(o) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o);
        }
        try {
          return equalsConstructorPrototype(o);
        } catch (e) {
          return false;
        }
      };
      keysShim = function keys(object) {
        var isObject2 = object !== null && typeof object === "object";
        var isFunction2 = toStr2.call(object) === "[object Function]";
        var isArguments2 = isArgs(object);
        var isString2 = isObject2 && toStr2.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject2 && !isFunction2 && !isArguments2) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction2;
        if (isString2 && object.length > 0 && !has2.call(object, 0)) {
          for (var i2 = 0; i2 < object.length; ++i2) {
            theKeys.push(String(i2));
          }
        }
        if (isArguments2 && object.length > 0) {
          for (var j = 0; j < object.length; ++j) {
            theKeys.push(String(j));
          }
        } else {
          for (var name2 in object) {
            if (!(skipProto && name2 === "prototype") && has2.call(object, name2)) {
              theKeys.push(String(name2));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k = 0; k < dontEnums.length; ++k) {
            if (!(skipConstructor && dontEnums[k] === "constructor") && has2.call(object, dontEnums[k])) {
              theKeys.push(dontEnums[k]);
            }
          }
        }
        return theKeys;
      };
    }
    implementation$3 = keysShim;
    return implementation$3;
  }
  var objectKeys;
  var hasRequiredObjectKeys;
  function requireObjectKeys() {
    if (hasRequiredObjectKeys) return objectKeys;
    hasRequiredObjectKeys = 1;
    var slice = Array.prototype.slice;
    var isArgs = requireIsArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) {
      return origKeys(o);
    } : requireImplementation$3();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    objectKeys = keysShim;
    return objectKeys;
  }
  var implementation$2;
  var hasRequiredImplementation$2;
  function requireImplementation$2() {
    if (hasRequiredImplementation$2) return implementation$2;
    hasRequiredImplementation$2 = 1;
    var objectKeys2 = requireObjectKeys();
    var hasSymbols2 = requireShams$1()();
    var callBound2 = requireCallBound$1();
    var $Object = requireEsObjectAtoms();
    var $push = callBound2("Array.prototype.push");
    var $propIsEnumerable = callBound2("Object.prototype.propertyIsEnumerable");
    var originalGetSymbols = hasSymbols2 ? $Object.getOwnPropertySymbols : null;
    implementation$2 = function assign2(target, source1) {
      if (target == null) {
        throw new TypeError("target must be an object");
      }
      var to = $Object(target);
      if (arguments.length === 1) {
        return to;
      }
      for (var s2 = 1; s2 < arguments.length; ++s2) {
        var from = $Object(arguments[s2]);
        var keys = objectKeys2(from);
        var getSymbols = hasSymbols2 && ($Object.getOwnPropertySymbols || originalGetSymbols);
        if (getSymbols) {
          var syms = getSymbols(from);
          for (var j = 0; j < syms.length; ++j) {
            var key2 = syms[j];
            if ($propIsEnumerable(from, key2)) {
              $push(keys, key2);
            }
          }
        }
        for (var i2 = 0; i2 < keys.length; ++i2) {
          var nextKey = keys[i2];
          if ($propIsEnumerable(from, nextKey)) {
            var propValue = from[nextKey];
            to[nextKey] = propValue;
          }
        }
      }
      return to;
    };
    return implementation$2;
  }
  var polyfill$2;
  var hasRequiredPolyfill$2;
  function requirePolyfill$2() {
    if (hasRequiredPolyfill$2) return polyfill$2;
    hasRequiredPolyfill$2 = 1;
    var implementation2 = requireImplementation$2();
    var lacksProperEnumerationOrder = function() {
      if (!Object.assign) {
        return false;
      }
      var str = "abcdefghijklmnopqrst";
      var letters = str.split("");
      var map = {};
      for (var i2 = 0; i2 < letters.length; ++i2) {
        map[letters[i2]] = letters[i2];
      }
      var obj = Object.assign({}, map);
      var actual = "";
      for (var k in obj) {
        actual += k;
      }
      return str !== actual;
    };
    var assignHasPendingExceptions = function() {
      if (!Object.assign || !Object.preventExtensions) {
        return false;
      }
      var thrower = Object.preventExtensions({ 1: 2 });
      try {
        Object.assign(thrower, "xy");
      } catch (e) {
        return thrower[1] === "y";
      }
      return false;
    };
    polyfill$2 = function getPolyfill() {
      if (!Object.assign) {
        return implementation2;
      }
      if (lacksProperEnumerationOrder()) {
        return implementation2;
      }
      if (assignHasPendingExceptions()) {
        return implementation2;
      }
      return Object.assign;
    };
    return polyfill$2;
  }
  var implementation$1;
  var hasRequiredImplementation$1;
  function requireImplementation$1() {
    if (hasRequiredImplementation$1) return implementation$1;
    hasRequiredImplementation$1 = 1;
    var numberIsNaN = function(value) {
      return value !== value;
    };
    implementation$1 = function is2(a, b) {
      if (a === 0 && b === 0) {
        return 1 / a === 1 / b;
      }
      if (a === b) {
        return true;
      }
      if (numberIsNaN(a) && numberIsNaN(b)) {
        return true;
      }
      return false;
    };
    return implementation$1;
  }
  var polyfill$1;
  var hasRequiredPolyfill$1;
  function requirePolyfill$1() {
    if (hasRequiredPolyfill$1) return polyfill$1;
    hasRequiredPolyfill$1 = 1;
    var implementation2 = requireImplementation$1();
    polyfill$1 = function getPolyfill() {
      return typeof Object.is === "function" ? Object.is : implementation2;
    };
    return polyfill$1;
  }
  var callBound;
  var hasRequiredCallBound;
  function requireCallBound() {
    if (hasRequiredCallBound) return callBound;
    hasRequiredCallBound = 1;
    var GetIntrinsic2 = requireGetIntrinsic();
    var callBind2 = requireCallBind();
    var $indexOf = callBind2(GetIntrinsic2("String.prototype.indexOf"));
    callBound = function callBoundIntrinsic(name2, allowMissing) {
      var intrinsic = GetIntrinsic2(name2, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name2, ".prototype.") > -1) {
        return callBind2(intrinsic);
      }
      return intrinsic;
    };
    return callBound;
  }
  var defineProperties_1;
  var hasRequiredDefineProperties;
  function requireDefineProperties() {
    if (hasRequiredDefineProperties) return defineProperties_1;
    hasRequiredDefineProperties = 1;
    var keys = requireObjectKeys();
    var hasSymbols2 = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr2 = Object.prototype.toString;
    var concat2 = Array.prototype.concat;
    var defineDataProperty2 = requireDefineDataProperty();
    var isFunction2 = function(fn) {
      return typeof fn === "function" && toStr2.call(fn) === "[object Function]";
    };
    var supportsDescriptors = requireHasPropertyDescriptors()();
    var defineProperty = function(object, name2, value, predicate) {
      if (name2 in object) {
        if (predicate === true) {
          if (object[name2] === value) {
            return;
          }
        } else if (!isFunction2(predicate) || !predicate()) {
          return;
        }
      }
      if (supportsDescriptors) {
        defineDataProperty2(object, name2, value, true);
      } else {
        defineDataProperty2(object, name2, value);
      }
    };
    var defineProperties = function(object, map) {
      var predicates2 = arguments.length > 2 ? arguments[2] : {};
      var props = keys(map);
      if (hasSymbols2) {
        props = concat2.call(props, Object.getOwnPropertySymbols(map));
      }
      for (var i2 = 0; i2 < props.length; i2 += 1) {
        defineProperty(object, props[i2], map[props[i2]], predicates2[props[i2]]);
      }
    };
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    defineProperties_1 = defineProperties;
    return defineProperties_1;
  }
  var shim$1;
  var hasRequiredShim$1;
  function requireShim$1() {
    if (hasRequiredShim$1) return shim$1;
    hasRequiredShim$1 = 1;
    var getPolyfill = requirePolyfill$1();
    var define = requireDefineProperties();
    shim$1 = function shimObjectIs() {
      var polyfill2 = getPolyfill();
      define(Object, { is: polyfill2 }, {
        is: function testObjectIs() {
          return Object.is !== polyfill2;
        }
      });
      return polyfill2;
    };
    return shim$1;
  }
  var objectIs;
  var hasRequiredObjectIs;
  function requireObjectIs() {
    if (hasRequiredObjectIs) return objectIs;
    hasRequiredObjectIs = 1;
    var define = requireDefineProperties();
    var callBind2 = requireCallBind();
    var implementation2 = requireImplementation$1();
    var getPolyfill = requirePolyfill$1();
    var shim2 = requireShim$1();
    var polyfill2 = callBind2(getPolyfill(), Object);
    define(polyfill2, {
      getPolyfill,
      implementation: implementation2,
      shim: shim2
    });
    objectIs = polyfill2;
    return objectIs;
  }
  var implementation;
  var hasRequiredImplementation;
  function requireImplementation() {
    if (hasRequiredImplementation) return implementation;
    hasRequiredImplementation = 1;
    implementation = function isNaN2(value) {
      return value !== value;
    };
    return implementation;
  }
  var polyfill;
  var hasRequiredPolyfill;
  function requirePolyfill() {
    if (hasRequiredPolyfill) return polyfill;
    hasRequiredPolyfill = 1;
    var implementation2 = requireImplementation();
    polyfill = function getPolyfill() {
      if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a")) {
        return Number.isNaN;
      }
      return implementation2;
    };
    return polyfill;
  }
  var shim;
  var hasRequiredShim;
  function requireShim() {
    if (hasRequiredShim) return shim;
    hasRequiredShim = 1;
    var define = requireDefineProperties();
    var getPolyfill = requirePolyfill();
    shim = function shimNumberIsNaN() {
      var polyfill2 = getPolyfill();
      define(Number, { isNaN: polyfill2 }, {
        isNaN: function testIsNaN() {
          return Number.isNaN !== polyfill2;
        }
      });
      return polyfill2;
    };
    return shim;
  }
  var isNan;
  var hasRequiredIsNan;
  function requireIsNan() {
    if (hasRequiredIsNan) return isNan;
    hasRequiredIsNan = 1;
    var callBind2 = requireCallBind();
    var define = requireDefineProperties();
    var implementation2 = requireImplementation();
    var getPolyfill = requirePolyfill();
    var shim2 = requireShim();
    var polyfill2 = callBind2(getPolyfill(), Number);
    define(polyfill2, {
      getPolyfill,
      implementation: implementation2,
      shim: shim2
    });
    isNan = polyfill2;
    return isNan;
  }
  var comparisons;
  var hasRequiredComparisons;
  function requireComparisons() {
    if (hasRequiredComparisons) return comparisons;
    hasRequiredComparisons = 1;
    function _slicedToArray(arr, i2) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len2) {
      if (len2 == null || len2 > arr.length) len2 = arr.length;
      for (var i2 = 0, arr2 = new Array(len2); i2 < len2; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit(r2, l) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e, n, i2, u, a = [], f2 = true, o = false;
        try {
          if (i2 = (t2 = t2.call(r2)).next, 0 === l) ;
          else for (; !(f2 = (e = i2.call(t2)).done) && (a.push(e.value), a.length !== l); f2 = true) ;
        } catch (r3) {
          o = true, n = r3;
        } finally {
          try {
            if (!f2 && null != t2.return && (u = t2.return(), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var regexFlagsSupported = /a/g.flags !== void 0;
    var arrayFromSet = function arrayFromSet2(set2) {
      var array2 = [];
      set2.forEach(function(value) {
        return array2.push(value);
      });
      return array2;
    };
    var arrayFromMap = function arrayFromMap2(map) {
      var array2 = [];
      map.forEach(function(value, key2) {
        return array2.push([key2, value]);
      });
      return array2;
    };
    var objectIs2 = Object.is ? Object.is : requireObjectIs();
    var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
      return [];
    };
    var numberIsNaN = Number.isNaN ? Number.isNaN : requireIsNan();
    function uncurryThis(f2) {
      return f2.call.bind(f2);
    }
    var hasOwnProperty2 = uncurryThis(Object.prototype.hasOwnProperty);
    var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
    var objectToString2 = uncurryThis(Object.prototype.toString);
    var _require$types = requireUtil$1().types, isAnyArrayBuffer = _require$types.isAnyArrayBuffer, isArrayBufferView2 = _require$types.isArrayBufferView, isDate2 = _require$types.isDate, isMap2 = _require$types.isMap, isRegExp2 = _require$types.isRegExp, isSet2 = _require$types.isSet, isNativeError = _require$types.isNativeError, isBoxedPrimitive = _require$types.isBoxedPrimitive, isNumberObject = _require$types.isNumberObject, isStringObject = _require$types.isStringObject, isBooleanObject = _require$types.isBooleanObject, isBigIntObject = _require$types.isBigIntObject, isSymbolObject = _require$types.isSymbolObject, isFloat32Array = _require$types.isFloat32Array, isFloat64Array = _require$types.isFloat64Array;
    function isNonIndex(key2) {
      if (key2.length === 0 || key2.length > 10) return true;
      for (var i2 = 0; i2 < key2.length; i2++) {
        var code2 = key2.charCodeAt(i2);
        if (code2 < 48 || code2 > 57) return true;
      }
      return key2.length === 10 && key2 >= Math.pow(2, 32);
    }
    function getOwnNonIndexProperties(value) {
      return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
    }
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * @license  MIT
     */
    function compare2(a, b) {
      if (a === b) {
        return 0;
      }
      var x = a.length;
      var y = b.length;
      for (var i2 = 0, len2 = Math.min(x, y); i2 < len2; ++i2) {
        if (a[i2] !== b[i2]) {
          x = a[i2];
          y = b[i2];
          break;
        }
      }
      if (x < y) {
        return -1;
      }
      if (y < x) {
        return 1;
      }
      return 0;
    }
    var kStrict = true;
    var kLoose = false;
    var kNoIterator = 0;
    var kIsArray = 1;
    var kIsSet = 2;
    var kIsMap = 3;
    function areSimilarRegExps(a, b) {
      return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
    }
    function areSimilarFloatArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      for (var offset = 0; offset < a.byteLength; offset++) {
        if (a[offset] !== b[offset]) {
          return false;
        }
      }
      return true;
    }
    function areSimilarTypedArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      return compare2(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
    }
    function areEqualArrayBuffers(buf1, buf2) {
      return buf1.byteLength === buf2.byteLength && compare2(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
    }
    function isEqualBoxedPrimitive(val1, val2) {
      if (isNumberObject(val1)) {
        return isNumberObject(val2) && objectIs2(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
      }
      if (isStringObject(val1)) {
        return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
      }
      if (isBooleanObject(val1)) {
        return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
      }
      if (isBigIntObject(val1)) {
        return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
      }
      return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
    }
    function innerDeepEqual(val1, val2, strict, memos) {
      if (val1 === val2) {
        if (val1 !== 0) return true;
        return strict ? objectIs2(val1, val2) : true;
      }
      if (strict) {
        if (_typeof(val1) !== "object") {
          return typeof val1 === "number" && numberIsNaN(val1) && numberIsNaN(val2);
        }
        if (_typeof(val2) !== "object" || val1 === null || val2 === null) {
          return false;
        }
        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
          return false;
        }
      } else {
        if (val1 === null || _typeof(val1) !== "object") {
          if (val2 === null || _typeof(val2) !== "object") {
            return val1 == val2;
          }
          return false;
        }
        if (val2 === null || _typeof(val2) !== "object") {
          return false;
        }
      }
      var val1Tag = objectToString2(val1);
      var val2Tag = objectToString2(val2);
      if (val1Tag !== val2Tag) {
        return false;
      }
      if (Array.isArray(val1)) {
        if (val1.length !== val2.length) {
          return false;
        }
        var keys1 = getOwnNonIndexProperties(val1);
        var keys2 = getOwnNonIndexProperties(val2);
        if (keys1.length !== keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
      }
      if (val1Tag === "[object Object]") {
        if (!isMap2(val1) && isMap2(val2) || !isSet2(val1) && isSet2(val2)) {
          return false;
        }
      }
      if (isDate2(val1)) {
        if (!isDate2(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
          return false;
        }
      } else if (isRegExp2(val1)) {
        if (!isRegExp2(val2) || !areSimilarRegExps(val1, val2)) {
          return false;
        }
      } else if (isNativeError(val1) || val1 instanceof Error) {
        if (val1.message !== val2.message || val1.name !== val2.name) {
          return false;
        }
      } else if (isArrayBufferView2(val1)) {
        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
          if (!areSimilarFloatArrays(val1, val2)) {
            return false;
          }
        } else if (!areSimilarTypedArrays(val1, val2)) {
          return false;
        }
        var _keys = getOwnNonIndexProperties(val1);
        var _keys2 = getOwnNonIndexProperties(val2);
        if (_keys.length !== _keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
      } else if (isSet2(val1)) {
        if (!isSet2(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsSet);
      } else if (isMap2(val1)) {
        if (!isMap2(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsMap);
      } else if (isAnyArrayBuffer(val1)) {
        if (!areEqualArrayBuffers(val1, val2)) {
          return false;
        }
      } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
        return false;
      }
      return keyCheck(val1, val2, strict, memos, kNoIterator);
    }
    function getEnumerables(val, keys) {
      return keys.filter(function(k) {
        return propertyIsEnumerable(val, k);
      });
    }
    function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
      if (arguments.length === 5) {
        aKeys = Object.keys(val1);
        var bKeys = Object.keys(val2);
        if (aKeys.length !== bKeys.length) {
          return false;
        }
      }
      var i2 = 0;
      for (; i2 < aKeys.length; i2++) {
        if (!hasOwnProperty2(val2, aKeys[i2])) {
          return false;
        }
      }
      if (strict && arguments.length === 5) {
        var symbolKeysA = objectGetOwnPropertySymbols(val1);
        if (symbolKeysA.length !== 0) {
          var count = 0;
          for (i2 = 0; i2 < symbolKeysA.length; i2++) {
            var key2 = symbolKeysA[i2];
            if (propertyIsEnumerable(val1, key2)) {
              if (!propertyIsEnumerable(val2, key2)) {
                return false;
              }
              aKeys.push(key2);
              count++;
            } else if (propertyIsEnumerable(val2, key2)) {
              return false;
            }
          }
          var symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
            return false;
          }
        } else {
          var _symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
            return false;
          }
        }
      }
      if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
        return true;
      }
      if (memos === void 0) {
        memos = {
          val1: /* @__PURE__ */ new Map(),
          val2: /* @__PURE__ */ new Map(),
          position: 0
        };
      } else {
        var val2MemoA = memos.val1.get(val1);
        if (val2MemoA !== void 0) {
          var val2MemoB = memos.val2.get(val2);
          if (val2MemoB !== void 0) {
            return val2MemoA === val2MemoB;
          }
        }
        memos.position++;
      }
      memos.val1.set(val1, memos.position);
      memos.val2.set(val2, memos.position);
      var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
      memos.val1.delete(val1);
      memos.val2.delete(val2);
      return areEq;
    }
    function setHasEqualElement(set2, val1, strict, memo) {
      var setValues = arrayFromSet(set2);
      for (var i2 = 0; i2 < setValues.length; i2++) {
        var val2 = setValues[i2];
        if (innerDeepEqual(val1, val2, strict, memo)) {
          set2.delete(val2);
          return true;
        }
      }
      return false;
    }
    function findLooseMatchingPrimitives(prim) {
      switch (_typeof(prim)) {
        case "undefined":
          return null;
        case "object":
          return void 0;
        case "symbol":
          return false;
        case "string":
          prim = +prim;
        case "number":
          if (numberIsNaN(prim)) {
            return false;
          }
      }
      return true;
    }
    function setMightHaveLoosePrim(a, b, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) return altValue;
      return b.has(altValue) && !a.has(altValue);
    }
    function mapMightHaveLoosePrim(a, b, prim, item, memo) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      var curB = b.get(altValue);
      if (curB === void 0 && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
        return false;
      }
      return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
    }
    function setEquiv(a, b, strict, memo) {
      var set2 = null;
      var aValues = arrayFromSet(a);
      for (var i2 = 0; i2 < aValues.length; i2++) {
        var val = aValues[i2];
        if (_typeof(val) === "object" && val !== null) {
          if (set2 === null) {
            set2 = /* @__PURE__ */ new Set();
          }
          set2.add(val);
        } else if (!b.has(val)) {
          if (strict) return false;
          if (!setMightHaveLoosePrim(a, b, val)) {
            return false;
          }
          if (set2 === null) {
            set2 = /* @__PURE__ */ new Set();
          }
          set2.add(val);
        }
      }
      if (set2 !== null) {
        var bValues = arrayFromSet(b);
        for (var _i = 0; _i < bValues.length; _i++) {
          var _val = bValues[_i];
          if (_typeof(_val) === "object" && _val !== null) {
            if (!setHasEqualElement(set2, _val, strict, memo)) return false;
          } else if (!strict && !a.has(_val) && !setHasEqualElement(set2, _val, strict, memo)) {
            return false;
          }
        }
        return set2.size === 0;
      }
      return true;
    }
    function mapHasEqualEntry(set2, map, key1, item1, strict, memo) {
      var setValues = arrayFromSet(set2);
      for (var i2 = 0; i2 < setValues.length; i2++) {
        var key2 = setValues[i2];
        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
          set2.delete(key2);
          return true;
        }
      }
      return false;
    }
    function mapEquiv(a, b, strict, memo) {
      var set2 = null;
      var aEntries = arrayFromMap(a);
      for (var i2 = 0; i2 < aEntries.length; i2++) {
        var _aEntries$i = _slicedToArray(aEntries[i2], 2), key2 = _aEntries$i[0], item1 = _aEntries$i[1];
        if (_typeof(key2) === "object" && key2 !== null) {
          if (set2 === null) {
            set2 = /* @__PURE__ */ new Set();
          }
          set2.add(key2);
        } else {
          var item2 = b.get(key2);
          if (item2 === void 0 && !b.has(key2) || !innerDeepEqual(item1, item2, strict, memo)) {
            if (strict) return false;
            if (!mapMightHaveLoosePrim(a, b, key2, item1, memo)) return false;
            if (set2 === null) {
              set2 = /* @__PURE__ */ new Set();
            }
            set2.add(key2);
          }
        }
      }
      if (set2 !== null) {
        var bEntries = arrayFromMap(b);
        for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
          var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), _key = _bEntries$_i[0], item = _bEntries$_i[1];
          if (_typeof(_key) === "object" && _key !== null) {
            if (!mapHasEqualEntry(set2, a, _key, item, strict, memo)) return false;
          } else if (!strict && (!a.has(_key) || !innerDeepEqual(a.get(_key), item, false, memo)) && !mapHasEqualEntry(set2, a, _key, item, false, memo)) {
            return false;
          }
        }
        return set2.size === 0;
      }
      return true;
    }
    function objEquiv(a, b, strict, keys, memos, iterationType) {
      var i2 = 0;
      if (iterationType === kIsSet) {
        if (!setEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsMap) {
        if (!mapEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsArray) {
        for (; i2 < a.length; i2++) {
          if (hasOwnProperty2(a, i2)) {
            if (!hasOwnProperty2(b, i2) || !innerDeepEqual(a[i2], b[i2], strict, memos)) {
              return false;
            }
          } else if (hasOwnProperty2(b, i2)) {
            return false;
          } else {
            var keysA = Object.keys(a);
            for (; i2 < keysA.length; i2++) {
              var key2 = keysA[i2];
              if (!hasOwnProperty2(b, key2) || !innerDeepEqual(a[key2], b[key2], strict, memos)) {
                return false;
              }
            }
            if (keysA.length !== Object.keys(b).length) {
              return false;
            }
            return true;
          }
        }
      }
      for (i2 = 0; i2 < keys.length; i2++) {
        var _key2 = keys[i2];
        if (!innerDeepEqual(a[_key2], b[_key2], strict, memos)) {
          return false;
        }
      }
      return true;
    }
    function isDeepEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kLoose);
    }
    function isDeepStrictEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kStrict);
    }
    comparisons = {
      isDeepEqual,
      isDeepStrictEqual
    };
    return comparisons;
  }
  var hasRequiredAssert;
  function requireAssert() {
    if (hasRequiredAssert) return assert$3.exports;
    hasRequiredAssert = 1;
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _createClass(Constructor, protoProps, staticProps) {
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var _require = requireErrors(), _require$codes = _require.codes, ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE, ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var AssertionError2 = requireAssertion_error();
    var _require2 = requireUtil$1(), inspect2 = _require2.inspect;
    var _require$types = requireUtil$1().types, isPromise = _require$types.isPromise, isRegExp2 = _require$types.isRegExp;
    var objectAssign = requirePolyfill$2()();
    var objectIs2 = requirePolyfill$1()();
    var RegExpPrototypeTest = requireCallBound()("RegExp.prototype.test");
    var isDeepEqual;
    var isDeepStrictEqual;
    function lazyLoadComparison() {
      var comparison = requireComparisons();
      isDeepEqual = comparison.isDeepEqual;
      isDeepStrictEqual = comparison.isDeepStrictEqual;
    }
    var warned = false;
    var assert2 = assert$3.exports = ok;
    var NO_EXCEPTION_SENTINEL = {};
    function innerFail(obj) {
      if (obj.message instanceof Error) throw obj.message;
      throw new AssertionError2(obj);
    }
    function fail(actual, expected, message, operator, stackStartFn) {
      var argsLen = arguments.length;
      var internalMessage;
      if (argsLen === 0) {
        internalMessage = "Failed";
      } else if (argsLen === 1) {
        message = actual;
        actual = void 0;
      } else {
        if (warned === false) {
          warned = true;
          var warn = process$1.emitWarning ? process$1.emitWarning : console.warn.bind(console);
          warn("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
        }
        if (argsLen === 2) operator = "!=";
      }
      if (message instanceof Error) throw message;
      var errArgs = {
        actual,
        expected,
        operator: operator === void 0 ? "fail" : operator,
        stackStartFn: stackStartFn || fail
      };
      if (message !== void 0) {
        errArgs.message = message;
      }
      var err = new AssertionError2(errArgs);
      if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
      }
      throw err;
    }
    assert2.fail = fail;
    assert2.AssertionError = AssertionError2;
    function innerOk(fn, argLen, value, message) {
      if (!value) {
        var generatedMessage = false;
        if (argLen === 0) {
          generatedMessage = true;
          message = "No value argument passed to `assert.ok()`";
        } else if (message instanceof Error) {
          throw message;
        }
        var err = new AssertionError2({
          actual: value,
          expected: true,
          message,
          operator: "==",
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    }
    function ok() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      innerOk.apply(void 0, [ok, args.length].concat(args));
    }
    assert2.ok = ok;
    assert2.equal = function equal(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual != expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "==",
          stackStartFn: equal
        });
      }
    };
    assert2.notEqual = function notEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual == expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "!=",
          stackStartFn: notEqual
        });
      }
    };
    assert2.deepEqual = function deepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (!isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepEqual",
          stackStartFn: deepEqual
        });
      }
    };
    assert2.notDeepEqual = function notDeepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepEqual",
          stackStartFn: notDeepEqual
        });
      }
    };
    assert2.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (!isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepStrictEqual",
          stackStartFn: deepStrictEqual
        });
      }
    };
    assert2.notDeepStrictEqual = notDeepStrictEqual;
    function notDeepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepStrictEqual",
          stackStartFn: notDeepStrictEqual
        });
      }
    }
    assert2.strictEqual = function strictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (!objectIs2(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "strictEqual",
          stackStartFn: strictEqual
        });
      }
    };
    assert2.notStrictEqual = function notStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (objectIs2(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notStrictEqual",
          stackStartFn: notStrictEqual
        });
      }
    };
    var Comparison = /* @__PURE__ */ _createClass(function Comparison2(obj, keys, actual) {
      var _this = this;
      _classCallCheck(this, Comparison2);
      keys.forEach(function(key2) {
        if (key2 in obj) {
          if (actual !== void 0 && typeof actual[key2] === "string" && isRegExp2(obj[key2]) && RegExpPrototypeTest(obj[key2], actual[key2])) {
            _this[key2] = actual[key2];
          } else {
            _this[key2] = obj[key2];
          }
        }
      });
    });
    function compareExceptionKey(actual, expected, key2, message, keys, fn) {
      if (!(key2 in actual) || !isDeepStrictEqual(actual[key2], expected[key2])) {
        if (!message) {
          var a = new Comparison(actual, keys);
          var b = new Comparison(expected, keys, actual);
          var err = new AssertionError2({
            actual: a,
            expected: b,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.actual = actual;
          err.expected = expected;
          err.operator = fn.name;
          throw err;
        }
        innerFail({
          actual,
          expected,
          message,
          operator: fn.name,
          stackStartFn: fn
        });
      }
    }
    function expectedException(actual, expected, msg, fn) {
      if (typeof expected !== "function") {
        if (isRegExp2(expected)) return RegExpPrototypeTest(expected, actual);
        if (arguments.length === 2) {
          throw new ERR_INVALID_ARG_TYPE("expected", ["Function", "RegExp"], expected);
        }
        if (_typeof(actual) !== "object" || actual === null) {
          var err = new AssertionError2({
            actual,
            expected,
            message: msg,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.operator = fn.name;
          throw err;
        }
        var keys = Object.keys(expected);
        if (expected instanceof Error) {
          keys.push("name", "message");
        } else if (keys.length === 0) {
          throw new ERR_INVALID_ARG_VALUE("error", expected, "may not be an empty object");
        }
        if (isDeepEqual === void 0) lazyLoadComparison();
        keys.forEach(function(key2) {
          if (typeof actual[key2] === "string" && isRegExp2(expected[key2]) && RegExpPrototypeTest(expected[key2], actual[key2])) {
            return;
          }
          compareExceptionKey(actual, expected, key2, msg, keys, fn);
        });
        return true;
      }
      if (expected.prototype !== void 0 && actual instanceof expected) {
        return true;
      }
      if (Error.isPrototypeOf(expected)) {
        return false;
      }
      return expected.call({}, actual) === true;
    }
    function getActual(fn) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE("fn", "Function", fn);
      }
      try {
        fn();
      } catch (e) {
        return e;
      }
      return NO_EXCEPTION_SENTINEL;
    }
    function checkIsPromise(obj) {
      return isPromise(obj) || obj !== null && _typeof(obj) === "object" && typeof obj.then === "function" && typeof obj.catch === "function";
    }
    function waitForActual(promiseFn) {
      return Promise.resolve().then(function() {
        var resultPromise;
        if (typeof promiseFn === "function") {
          resultPromise = promiseFn();
          if (!checkIsPromise(resultPromise)) {
            throw new ERR_INVALID_RETURN_VALUE("instance of Promise", "promiseFn", resultPromise);
          }
        } else if (checkIsPromise(promiseFn)) {
          resultPromise = promiseFn;
        } else {
          throw new ERR_INVALID_ARG_TYPE("promiseFn", ["Function", "Promise"], promiseFn);
        }
        return Promise.resolve().then(function() {
          return resultPromise;
        }).then(function() {
          return NO_EXCEPTION_SENTINEL;
        }).catch(function(e) {
          return e;
        });
      });
    }
    function expectsError(stackStartFn, actual, error2, message) {
      if (typeof error2 === "string") {
        if (arguments.length === 4) {
          throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error2);
        }
        if (_typeof(actual) === "object" && actual !== null) {
          if (actual.message === error2) {
            throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error message "'.concat(actual.message, '" is identical to the message.'));
          }
        } else if (actual === error2) {
          throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error "'.concat(actual, '" is identical to the message.'));
        }
        message = error2;
        error2 = void 0;
      } else if (error2 != null && _typeof(error2) !== "object" && typeof error2 !== "function") {
        throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error2);
      }
      if (actual === NO_EXCEPTION_SENTINEL) {
        var details = "";
        if (error2 && error2.name) {
          details += " (".concat(error2.name, ")");
        }
        details += message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "rejects" ? "rejection" : "exception";
        innerFail({
          actual: void 0,
          expected: error2,
          operator: stackStartFn.name,
          message: "Missing expected ".concat(fnType).concat(details),
          stackStartFn
        });
      }
      if (error2 && !expectedException(actual, error2, message, stackStartFn)) {
        throw actual;
      }
    }
    function expectsNoError(stackStartFn, actual, error2, message) {
      if (actual === NO_EXCEPTION_SENTINEL) return;
      if (typeof error2 === "string") {
        message = error2;
        error2 = void 0;
      }
      if (!error2 || expectedException(actual, error2)) {
        var details = message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "doesNotReject" ? "rejection" : "exception";
        innerFail({
          actual,
          expected: error2,
          operator: stackStartFn.name,
          message: "Got unwanted ".concat(fnType).concat(details, "\n") + 'Actual message: "'.concat(actual && actual.message, '"'),
          stackStartFn
        });
      }
      throw actual;
    }
    assert2.throws = function throws(promiseFn) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
    };
    assert2.rejects = function rejects(promiseFn) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      return waitForActual(promiseFn).then(function(result) {
        return expectsError.apply(void 0, [rejects, result].concat(args));
      });
    };
    assert2.doesNotThrow = function doesNotThrow(fn) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
    };
    assert2.doesNotReject = function doesNotReject(fn) {
      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }
      return waitForActual(fn).then(function(result) {
        return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
      });
    };
    assert2.ifError = function ifError(err) {
      if (err !== null && err !== void 0) {
        var message = "ifError got unwanted exception: ";
        if (_typeof(err) === "object" && typeof err.message === "string") {
          if (err.message.length === 0 && err.constructor) {
            message += err.constructor.name;
          } else {
            message += err.message;
          }
        } else {
          message += inspect2(err);
        }
        var newErr = new AssertionError2({
          actual: err,
          expected: null,
          operator: "ifError",
          message,
          stackStartFn: ifError
        });
        var origStack = err.stack;
        if (typeof origStack === "string") {
          var tmp2 = origStack.split("\n");
          tmp2.shift();
          var tmp1 = newErr.stack.split("\n");
          for (var i2 = 0; i2 < tmp2.length; i2++) {
            var pos = tmp1.indexOf(tmp2[i2]);
            if (pos !== -1) {
              tmp1 = tmp1.slice(0, pos);
              break;
            }
          }
          newErr.stack = "".concat(tmp1.join("\n"), "\n").concat(tmp2.join("\n"));
        }
        throw newErr;
      }
    };
    function internalMatch(string2, regexp, message, fn, fnName) {
      if (!isRegExp2(regexp)) {
        throw new ERR_INVALID_ARG_TYPE("regexp", "RegExp", regexp);
      }
      var match = fnName === "match";
      if (typeof string2 !== "string" || RegExpPrototypeTest(regexp, string2) !== match) {
        if (message instanceof Error) {
          throw message;
        }
        var generatedMessage = !message;
        message = message || (typeof string2 !== "string" ? 'The "string" argument must be of type string. Received type ' + "".concat(_typeof(string2), " (").concat(inspect2(string2), ")") : (match ? "The input did not match the regular expression " : "The input was expected to not match the regular expression ") + "".concat(inspect2(regexp), ". Input:\n\n").concat(inspect2(string2), "\n"));
        var err = new AssertionError2({
          actual: string2,
          expected: regexp,
          message,
          operator: fnName,
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    }
    assert2.match = function match(string2, regexp, message) {
      internalMatch(string2, regexp, message, match, "match");
    };
    assert2.doesNotMatch = function doesNotMatch(string2, regexp, message) {
      internalMatch(string2, regexp, message, doesNotMatch, "doesNotMatch");
    };
    function strict() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      innerOk.apply(void 0, [strict, args.length].concat(args));
    }
    assert2.strict = objectAssign(strict, assert2, {
      equal: assert2.strictEqual,
      deepEqual: assert2.deepStrictEqual,
      notEqual: assert2.notStrictEqual,
      notDeepEqual: assert2.notDeepStrictEqual
    });
    assert2.strict.strict = assert2.strict;
    return assert$3.exports;
  }
  var zstream;
  var hasRequiredZstream;
  function requireZstream() {
    if (hasRequiredZstream) return zstream;
    hasRequiredZstream = 1;
    function ZStream() {
      this.input = null;
      this.next_in = 0;
      this.avail_in = 0;
      this.total_in = 0;
      this.output = null;
      this.next_out = 0;
      this.avail_out = 0;
      this.total_out = 0;
      this.msg = "";
      this.state = null;
      this.data_type = 2;
      this.adler = 0;
    }
    zstream = ZStream;
    return zstream;
  }
  var deflate = {};
  var common$1 = {};
  var hasRequiredCommon;
  function requireCommon() {
    if (hasRequiredCommon) return common$1;
    hasRequiredCommon = 1;
    (function(exports2) {
      var TYPED_OK = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Int32Array !== "undefined";
      function _has(obj, key2) {
        return Object.prototype.hasOwnProperty.call(obj, key2);
      }
      exports2.assign = function(obj) {
        var sources = Array.prototype.slice.call(arguments, 1);
        while (sources.length) {
          var source = sources.shift();
          if (!source) {
            continue;
          }
          if (typeof source !== "object") {
            throw new TypeError(source + "must be non-object");
          }
          for (var p in source) {
            if (_has(source, p)) {
              obj[p] = source[p];
            }
          }
        }
        return obj;
      };
      exports2.shrinkBuf = function(buf, size2) {
        if (buf.length === size2) {
          return buf;
        }
        if (buf.subarray) {
          return buf.subarray(0, size2);
        }
        buf.length = size2;
        return buf;
      };
      var fnTyped = {
        arraySet: function(dest, src, src_offs, len2, dest_offs) {
          if (src.subarray && dest.subarray) {
            dest.set(src.subarray(src_offs, src_offs + len2), dest_offs);
            return;
          }
          for (var i2 = 0; i2 < len2; i2++) {
            dest[dest_offs + i2] = src[src_offs + i2];
          }
        },
        // Join array of chunks to single array.
        flattenChunks: function(chunks) {
          var i2, l, len2, pos, chunk, result;
          len2 = 0;
          for (i2 = 0, l = chunks.length; i2 < l; i2++) {
            len2 += chunks[i2].length;
          }
          result = new Uint8Array(len2);
          pos = 0;
          for (i2 = 0, l = chunks.length; i2 < l; i2++) {
            chunk = chunks[i2];
            result.set(chunk, pos);
            pos += chunk.length;
          }
          return result;
        }
      };
      var fnUntyped = {
        arraySet: function(dest, src, src_offs, len2, dest_offs) {
          for (var i2 = 0; i2 < len2; i2++) {
            dest[dest_offs + i2] = src[src_offs + i2];
          }
        },
        // Join array of chunks to single array.
        flattenChunks: function(chunks) {
          return [].concat.apply([], chunks);
        }
      };
      exports2.setTyped = function(on) {
        if (on) {
          exports2.Buf8 = Uint8Array;
          exports2.Buf16 = Uint16Array;
          exports2.Buf32 = Int32Array;
          exports2.assign(exports2, fnTyped);
        } else {
          exports2.Buf8 = Array;
          exports2.Buf16 = Array;
          exports2.Buf32 = Array;
          exports2.assign(exports2, fnUntyped);
        }
      };
      exports2.setTyped(TYPED_OK);
    })(common$1);
    return common$1;
  }
  var trees = {};
  var hasRequiredTrees;
  function requireTrees() {
    if (hasRequiredTrees) return trees;
    hasRequiredTrees = 1;
    var utils2 = requireCommon();
    var Z_FIXED = 4;
    var Z_BINARY = 0;
    var Z_TEXT = 1;
    var Z_UNKNOWN = 2;
    function zero(buf) {
      var len2 = buf.length;
      while (--len2 >= 0) {
        buf[len2] = 0;
      }
    }
    var STORED_BLOCK = 0;
    var STATIC_TREES = 1;
    var DYN_TREES = 2;
    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var LENGTH_CODES = 29;
    var LITERALS = 256;
    var L_CODES = LITERALS + 1 + LENGTH_CODES;
    var D_CODES = 30;
    var BL_CODES = 19;
    var HEAP_SIZE = 2 * L_CODES + 1;
    var MAX_BITS = 15;
    var Buf_size = 16;
    var MAX_BL_BITS = 7;
    var END_BLOCK = 256;
    var REP_3_6 = 16;
    var REPZ_3_10 = 17;
    var REPZ_11_138 = 18;
    var extra_lbits = (
      /* extra bits for each length code */
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]
    );
    var extra_dbits = (
      /* extra bits for each distance code */
      [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]
    );
    var extra_blbits = (
      /* extra bits for each bit length code */
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]
    );
    var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    var DIST_CODE_LEN = 512;
    var static_ltree = new Array((L_CODES + 2) * 2);
    zero(static_ltree);
    var static_dtree = new Array(D_CODES * 2);
    zero(static_dtree);
    var _dist_code = new Array(DIST_CODE_LEN);
    zero(_dist_code);
    var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
    zero(_length_code);
    var base_length = new Array(LENGTH_CODES);
    zero(base_length);
    var base_dist = new Array(D_CODES);
    zero(base_dist);
    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
      this.static_tree = static_tree;
      this.extra_bits = extra_bits;
      this.extra_base = extra_base;
      this.elems = elems;
      this.max_length = max_length;
      this.has_stree = static_tree && static_tree.length;
    }
    var static_l_desc;
    var static_d_desc;
    var static_bl_desc;
    function TreeDesc(dyn_tree, stat_desc) {
      this.dyn_tree = dyn_tree;
      this.max_code = 0;
      this.stat_desc = stat_desc;
    }
    function d_code(dist2) {
      return dist2 < 256 ? _dist_code[dist2] : _dist_code[256 + (dist2 >>> 7)];
    }
    function put_short(s2, w) {
      s2.pending_buf[s2.pending++] = w & 255;
      s2.pending_buf[s2.pending++] = w >>> 8 & 255;
    }
    function send_bits(s2, value, length) {
      if (s2.bi_valid > Buf_size - length) {
        s2.bi_buf |= value << s2.bi_valid & 65535;
        put_short(s2, s2.bi_buf);
        s2.bi_buf = value >> Buf_size - s2.bi_valid;
        s2.bi_valid += length - Buf_size;
      } else {
        s2.bi_buf |= value << s2.bi_valid & 65535;
        s2.bi_valid += length;
      }
    }
    function send_code(s2, c, tree) {
      send_bits(
        s2,
        tree[c * 2],
        tree[c * 2 + 1]
        /*.Len*/
      );
    }
    function bi_reverse(code2, len2) {
      var res = 0;
      do {
        res |= code2 & 1;
        code2 >>>= 1;
        res <<= 1;
      } while (--len2 > 0);
      return res >>> 1;
    }
    function bi_flush(s2) {
      if (s2.bi_valid === 16) {
        put_short(s2, s2.bi_buf);
        s2.bi_buf = 0;
        s2.bi_valid = 0;
      } else if (s2.bi_valid >= 8) {
        s2.pending_buf[s2.pending++] = s2.bi_buf & 255;
        s2.bi_buf >>= 8;
        s2.bi_valid -= 8;
      }
    }
    function gen_bitlen(s2, desc) {
      var tree = desc.dyn_tree;
      var max_code = desc.max_code;
      var stree = desc.stat_desc.static_tree;
      var has_stree = desc.stat_desc.has_stree;
      var extra = desc.stat_desc.extra_bits;
      var base2 = desc.stat_desc.extra_base;
      var max_length = desc.stat_desc.max_length;
      var h;
      var n, m;
      var bits;
      var xbits;
      var f2;
      var overflow = 0;
      for (bits = 0; bits <= MAX_BITS; bits++) {
        s2.bl_count[bits] = 0;
      }
      tree[s2.heap[s2.heap_max] * 2 + 1] = 0;
      for (h = s2.heap_max + 1; h < HEAP_SIZE; h++) {
        n = s2.heap[h];
        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
        if (bits > max_length) {
          bits = max_length;
          overflow++;
        }
        tree[n * 2 + 1] = bits;
        if (n > max_code) {
          continue;
        }
        s2.bl_count[bits]++;
        xbits = 0;
        if (n >= base2) {
          xbits = extra[n - base2];
        }
        f2 = tree[n * 2];
        s2.opt_len += f2 * (bits + xbits);
        if (has_stree) {
          s2.static_len += f2 * (stree[n * 2 + 1] + xbits);
        }
      }
      if (overflow === 0) {
        return;
      }
      do {
        bits = max_length - 1;
        while (s2.bl_count[bits] === 0) {
          bits--;
        }
        s2.bl_count[bits]--;
        s2.bl_count[bits + 1] += 2;
        s2.bl_count[max_length]--;
        overflow -= 2;
      } while (overflow > 0);
      for (bits = max_length; bits !== 0; bits--) {
        n = s2.bl_count[bits];
        while (n !== 0) {
          m = s2.heap[--h];
          if (m > max_code) {
            continue;
          }
          if (tree[m * 2 + 1] !== bits) {
            s2.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
            tree[m * 2 + 1] = bits;
          }
          n--;
        }
      }
    }
    function gen_codes(tree, max_code, bl_count) {
      var next_code = new Array(MAX_BITS + 1);
      var code2 = 0;
      var bits;
      var n;
      for (bits = 1; bits <= MAX_BITS; bits++) {
        next_code[bits] = code2 = code2 + bl_count[bits - 1] << 1;
      }
      for (n = 0; n <= max_code; n++) {
        var len2 = tree[n * 2 + 1];
        if (len2 === 0) {
          continue;
        }
        tree[n * 2] = bi_reverse(next_code[len2]++, len2);
      }
    }
    function tr_static_init() {
      var n;
      var bits;
      var length;
      var code2;
      var dist2;
      var bl_count = new Array(MAX_BITS + 1);
      length = 0;
      for (code2 = 0; code2 < LENGTH_CODES - 1; code2++) {
        base_length[code2] = length;
        for (n = 0; n < 1 << extra_lbits[code2]; n++) {
          _length_code[length++] = code2;
        }
      }
      _length_code[length - 1] = code2;
      dist2 = 0;
      for (code2 = 0; code2 < 16; code2++) {
        base_dist[code2] = dist2;
        for (n = 0; n < 1 << extra_dbits[code2]; n++) {
          _dist_code[dist2++] = code2;
        }
      }
      dist2 >>= 7;
      for (; code2 < D_CODES; code2++) {
        base_dist[code2] = dist2 << 7;
        for (n = 0; n < 1 << extra_dbits[code2] - 7; n++) {
          _dist_code[256 + dist2++] = code2;
        }
      }
      for (bits = 0; bits <= MAX_BITS; bits++) {
        bl_count[bits] = 0;
      }
      n = 0;
      while (n <= 143) {
        static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
      }
      while (n <= 255) {
        static_ltree[n * 2 + 1] = 9;
        n++;
        bl_count[9]++;
      }
      while (n <= 279) {
        static_ltree[n * 2 + 1] = 7;
        n++;
        bl_count[7]++;
      }
      while (n <= 287) {
        static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
      }
      gen_codes(static_ltree, L_CODES + 1, bl_count);
      for (n = 0; n < D_CODES; n++) {
        static_dtree[n * 2 + 1] = 5;
        static_dtree[n * 2] = bi_reverse(n, 5);
      }
      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
      static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
      static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
    }
    function init_block(s2) {
      var n;
      for (n = 0; n < L_CODES; n++) {
        s2.dyn_ltree[n * 2] = 0;
      }
      for (n = 0; n < D_CODES; n++) {
        s2.dyn_dtree[n * 2] = 0;
      }
      for (n = 0; n < BL_CODES; n++) {
        s2.bl_tree[n * 2] = 0;
      }
      s2.dyn_ltree[END_BLOCK * 2] = 1;
      s2.opt_len = s2.static_len = 0;
      s2.last_lit = s2.matches = 0;
    }
    function bi_windup(s2) {
      if (s2.bi_valid > 8) {
        put_short(s2, s2.bi_buf);
      } else if (s2.bi_valid > 0) {
        s2.pending_buf[s2.pending++] = s2.bi_buf;
      }
      s2.bi_buf = 0;
      s2.bi_valid = 0;
    }
    function copy_block(s2, buf, len2, header) {
      bi_windup(s2);
      {
        put_short(s2, len2);
        put_short(s2, ~len2);
      }
      utils2.arraySet(s2.pending_buf, s2.window, buf, len2, s2.pending);
      s2.pending += len2;
    }
    function smaller(tree, n, m, depth) {
      var _n2 = n * 2;
      var _m2 = m * 2;
      return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
    }
    function pqdownheap(s2, tree, k) {
      var v = s2.heap[k];
      var j = k << 1;
      while (j <= s2.heap_len) {
        if (j < s2.heap_len && smaller(tree, s2.heap[j + 1], s2.heap[j], s2.depth)) {
          j++;
        }
        if (smaller(tree, v, s2.heap[j], s2.depth)) {
          break;
        }
        s2.heap[k] = s2.heap[j];
        k = j;
        j <<= 1;
      }
      s2.heap[k] = v;
    }
    function compress_block(s2, ltree, dtree) {
      var dist2;
      var lc;
      var lx = 0;
      var code2;
      var extra;
      if (s2.last_lit !== 0) {
        do {
          dist2 = s2.pending_buf[s2.d_buf + lx * 2] << 8 | s2.pending_buf[s2.d_buf + lx * 2 + 1];
          lc = s2.pending_buf[s2.l_buf + lx];
          lx++;
          if (dist2 === 0) {
            send_code(s2, lc, ltree);
          } else {
            code2 = _length_code[lc];
            send_code(s2, code2 + LITERALS + 1, ltree);
            extra = extra_lbits[code2];
            if (extra !== 0) {
              lc -= base_length[code2];
              send_bits(s2, lc, extra);
            }
            dist2--;
            code2 = d_code(dist2);
            send_code(s2, code2, dtree);
            extra = extra_dbits[code2];
            if (extra !== 0) {
              dist2 -= base_dist[code2];
              send_bits(s2, dist2, extra);
            }
          }
        } while (lx < s2.last_lit);
      }
      send_code(s2, END_BLOCK, ltree);
    }
    function build_tree(s2, desc) {
      var tree = desc.dyn_tree;
      var stree = desc.stat_desc.static_tree;
      var has_stree = desc.stat_desc.has_stree;
      var elems = desc.stat_desc.elems;
      var n, m;
      var max_code = -1;
      var node2;
      s2.heap_len = 0;
      s2.heap_max = HEAP_SIZE;
      for (n = 0; n < elems; n++) {
        if (tree[n * 2] !== 0) {
          s2.heap[++s2.heap_len] = max_code = n;
          s2.depth[n] = 0;
        } else {
          tree[n * 2 + 1] = 0;
        }
      }
      while (s2.heap_len < 2) {
        node2 = s2.heap[++s2.heap_len] = max_code < 2 ? ++max_code : 0;
        tree[node2 * 2] = 1;
        s2.depth[node2] = 0;
        s2.opt_len--;
        if (has_stree) {
          s2.static_len -= stree[node2 * 2 + 1];
        }
      }
      desc.max_code = max_code;
      for (n = s2.heap_len >> 1; n >= 1; n--) {
        pqdownheap(s2, tree, n);
      }
      node2 = elems;
      do {
        n = s2.heap[
          1
          /*SMALLEST*/
        ];
        s2.heap[
          1
          /*SMALLEST*/
        ] = s2.heap[s2.heap_len--];
        pqdownheap(
          s2,
          tree,
          1
          /*SMALLEST*/
        );
        m = s2.heap[
          1
          /*SMALLEST*/
        ];
        s2.heap[--s2.heap_max] = n;
        s2.heap[--s2.heap_max] = m;
        tree[node2 * 2] = tree[n * 2] + tree[m * 2];
        s2.depth[node2] = (s2.depth[n] >= s2.depth[m] ? s2.depth[n] : s2.depth[m]) + 1;
        tree[n * 2 + 1] = tree[m * 2 + 1] = node2;
        s2.heap[
          1
          /*SMALLEST*/
        ] = node2++;
        pqdownheap(
          s2,
          tree,
          1
          /*SMALLEST*/
        );
      } while (s2.heap_len >= 2);
      s2.heap[--s2.heap_max] = s2.heap[
        1
        /*SMALLEST*/
      ];
      gen_bitlen(s2, desc);
      gen_codes(tree, max_code, s2.bl_count);
    }
    function scan_tree(s2, tree, max_code) {
      var n;
      var prevlen = -1;
      var curlen;
      var nextlen = tree[0 * 2 + 1];
      var count = 0;
      var max_count = 7;
      var min_count = 4;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      tree[(max_code + 1) * 2 + 1] = 65535;
      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1];
        if (++count < max_count && curlen === nextlen) {
          continue;
        } else if (count < min_count) {
          s2.bl_tree[curlen * 2] += count;
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            s2.bl_tree[curlen * 2]++;
          }
          s2.bl_tree[REP_3_6 * 2]++;
        } else if (count <= 10) {
          s2.bl_tree[REPZ_3_10 * 2]++;
        } else {
          s2.bl_tree[REPZ_11_138 * 2]++;
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }
    function send_tree(s2, tree, max_code) {
      var n;
      var prevlen = -1;
      var curlen;
      var nextlen = tree[0 * 2 + 1];
      var count = 0;
      var max_count = 7;
      var min_count = 4;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1];
        if (++count < max_count && curlen === nextlen) {
          continue;
        } else if (count < min_count) {
          do {
            send_code(s2, curlen, s2.bl_tree);
          } while (--count !== 0);
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            send_code(s2, curlen, s2.bl_tree);
            count--;
          }
          send_code(s2, REP_3_6, s2.bl_tree);
          send_bits(s2, count - 3, 2);
        } else if (count <= 10) {
          send_code(s2, REPZ_3_10, s2.bl_tree);
          send_bits(s2, count - 3, 3);
        } else {
          send_code(s2, REPZ_11_138, s2.bl_tree);
          send_bits(s2, count - 11, 7);
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }
    function build_bl_tree(s2) {
      var max_blindex;
      scan_tree(s2, s2.dyn_ltree, s2.l_desc.max_code);
      scan_tree(s2, s2.dyn_dtree, s2.d_desc.max_code);
      build_tree(s2, s2.bl_desc);
      for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
        if (s2.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
          break;
        }
      }
      s2.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
      return max_blindex;
    }
    function send_all_trees(s2, lcodes, dcodes, blcodes) {
      var rank;
      send_bits(s2, lcodes - 257, 5);
      send_bits(s2, dcodes - 1, 5);
      send_bits(s2, blcodes - 4, 4);
      for (rank = 0; rank < blcodes; rank++) {
        send_bits(s2, s2.bl_tree[bl_order[rank] * 2 + 1], 3);
      }
      send_tree(s2, s2.dyn_ltree, lcodes - 1);
      send_tree(s2, s2.dyn_dtree, dcodes - 1);
    }
    function detect_data_type(s2) {
      var black_mask = 4093624447;
      var n;
      for (n = 0; n <= 31; n++, black_mask >>>= 1) {
        if (black_mask & 1 && s2.dyn_ltree[n * 2] !== 0) {
          return Z_BINARY;
        }
      }
      if (s2.dyn_ltree[9 * 2] !== 0 || s2.dyn_ltree[10 * 2] !== 0 || s2.dyn_ltree[13 * 2] !== 0) {
        return Z_TEXT;
      }
      for (n = 32; n < LITERALS; n++) {
        if (s2.dyn_ltree[n * 2] !== 0) {
          return Z_TEXT;
        }
      }
      return Z_BINARY;
    }
    var static_init_done = false;
    function _tr_init(s2) {
      if (!static_init_done) {
        tr_static_init();
        static_init_done = true;
      }
      s2.l_desc = new TreeDesc(s2.dyn_ltree, static_l_desc);
      s2.d_desc = new TreeDesc(s2.dyn_dtree, static_d_desc);
      s2.bl_desc = new TreeDesc(s2.bl_tree, static_bl_desc);
      s2.bi_buf = 0;
      s2.bi_valid = 0;
      init_block(s2);
    }
    function _tr_stored_block(s2, buf, stored_len, last) {
      send_bits(s2, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
      copy_block(s2, buf, stored_len);
    }
    function _tr_align(s2) {
      send_bits(s2, STATIC_TREES << 1, 3);
      send_code(s2, END_BLOCK, static_ltree);
      bi_flush(s2);
    }
    function _tr_flush_block(s2, buf, stored_len, last) {
      var opt_lenb, static_lenb;
      var max_blindex = 0;
      if (s2.level > 0) {
        if (s2.strm.data_type === Z_UNKNOWN) {
          s2.strm.data_type = detect_data_type(s2);
        }
        build_tree(s2, s2.l_desc);
        build_tree(s2, s2.d_desc);
        max_blindex = build_bl_tree(s2);
        opt_lenb = s2.opt_len + 3 + 7 >>> 3;
        static_lenb = s2.static_len + 3 + 7 >>> 3;
        if (static_lenb <= opt_lenb) {
          opt_lenb = static_lenb;
        }
      } else {
        opt_lenb = static_lenb = stored_len + 5;
      }
      if (stored_len + 4 <= opt_lenb && buf !== -1) {
        _tr_stored_block(s2, buf, stored_len, last);
      } else if (s2.strategy === Z_FIXED || static_lenb === opt_lenb) {
        send_bits(s2, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
        compress_block(s2, static_ltree, static_dtree);
      } else {
        send_bits(s2, (DYN_TREES << 1) + (last ? 1 : 0), 3);
        send_all_trees(s2, s2.l_desc.max_code + 1, s2.d_desc.max_code + 1, max_blindex + 1);
        compress_block(s2, s2.dyn_ltree, s2.dyn_dtree);
      }
      init_block(s2);
      if (last) {
        bi_windup(s2);
      }
    }
    function _tr_tally(s2, dist2, lc) {
      s2.pending_buf[s2.d_buf + s2.last_lit * 2] = dist2 >>> 8 & 255;
      s2.pending_buf[s2.d_buf + s2.last_lit * 2 + 1] = dist2 & 255;
      s2.pending_buf[s2.l_buf + s2.last_lit] = lc & 255;
      s2.last_lit++;
      if (dist2 === 0) {
        s2.dyn_ltree[lc * 2]++;
      } else {
        s2.matches++;
        dist2--;
        s2.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;
        s2.dyn_dtree[d_code(dist2) * 2]++;
      }
      return s2.last_lit === s2.lit_bufsize - 1;
    }
    trees._tr_init = _tr_init;
    trees._tr_stored_block = _tr_stored_block;
    trees._tr_flush_block = _tr_flush_block;
    trees._tr_tally = _tr_tally;
    trees._tr_align = _tr_align;
    return trees;
  }
  var adler32_1;
  var hasRequiredAdler32;
  function requireAdler32() {
    if (hasRequiredAdler32) return adler32_1;
    hasRequiredAdler32 = 1;
    function adler32(adler, buf, len2, pos) {
      var s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
      while (len2 !== 0) {
        n = len2 > 2e3 ? 2e3 : len2;
        len2 -= n;
        do {
          s1 = s1 + buf[pos++] | 0;
          s2 = s2 + s1 | 0;
        } while (--n);
        s1 %= 65521;
        s2 %= 65521;
      }
      return s1 | s2 << 16 | 0;
    }
    adler32_1 = adler32;
    return adler32_1;
  }
  var crc32_1;
  var hasRequiredCrc32;
  function requireCrc32() {
    if (hasRequiredCrc32) return crc32_1;
    hasRequiredCrc32 = 1;
    function makeTable() {
      var c, table = [];
      for (var n = 0; n < 256; n++) {
        c = n;
        for (var k = 0; k < 8; k++) {
          c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
        }
        table[n] = c;
      }
      return table;
    }
    var crcTable = makeTable();
    function crc32(crc, buf, len2, pos) {
      var t2 = crcTable, end = pos + len2;
      crc ^= -1;
      for (var i2 = pos; i2 < end; i2++) {
        crc = crc >>> 8 ^ t2[(crc ^ buf[i2]) & 255];
      }
      return crc ^ -1;
    }
    crc32_1 = crc32;
    return crc32_1;
  }
  var messages;
  var hasRequiredMessages;
  function requireMessages() {
    if (hasRequiredMessages) return messages;
    hasRequiredMessages = 1;
    messages = {
      2: "need dictionary",
      /* Z_NEED_DICT       2  */
      1: "stream end",
      /* Z_STREAM_END      1  */
      0: "",
      /* Z_OK              0  */
      "-1": "file error",
      /* Z_ERRNO         (-1) */
      "-2": "stream error",
      /* Z_STREAM_ERROR  (-2) */
      "-3": "data error",
      /* Z_DATA_ERROR    (-3) */
      "-4": "insufficient memory",
      /* Z_MEM_ERROR     (-4) */
      "-5": "buffer error",
      /* Z_BUF_ERROR     (-5) */
      "-6": "incompatible version"
      /* Z_VERSION_ERROR (-6) */
    };
    return messages;
  }
  var hasRequiredDeflate;
  function requireDeflate() {
    if (hasRequiredDeflate) return deflate;
    hasRequiredDeflate = 1;
    var utils2 = requireCommon();
    var trees2 = requireTrees();
    var adler32 = requireAdler32();
    var crc32 = requireCrc32();
    var msg = requireMessages();
    var Z_NO_FLUSH = 0;
    var Z_PARTIAL_FLUSH = 1;
    var Z_FULL_FLUSH = 3;
    var Z_FINISH = 4;
    var Z_BLOCK = 5;
    var Z_OK = 0;
    var Z_STREAM_END = 1;
    var Z_STREAM_ERROR = -2;
    var Z_DATA_ERROR = -3;
    var Z_BUF_ERROR = -5;
    var Z_DEFAULT_COMPRESSION = -1;
    var Z_FILTERED = 1;
    var Z_HUFFMAN_ONLY = 2;
    var Z_RLE = 3;
    var Z_FIXED = 4;
    var Z_DEFAULT_STRATEGY = 0;
    var Z_UNKNOWN = 2;
    var Z_DEFLATED = 8;
    var MAX_MEM_LEVEL = 9;
    var MAX_WBITS = 15;
    var DEF_MEM_LEVEL = 8;
    var LENGTH_CODES = 29;
    var LITERALS = 256;
    var L_CODES = LITERALS + 1 + LENGTH_CODES;
    var D_CODES = 30;
    var BL_CODES = 19;
    var HEAP_SIZE = 2 * L_CODES + 1;
    var MAX_BITS = 15;
    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
    var PRESET_DICT = 32;
    var INIT_STATE = 42;
    var EXTRA_STATE = 69;
    var NAME_STATE = 73;
    var COMMENT_STATE = 91;
    var HCRC_STATE = 103;
    var BUSY_STATE = 113;
    var FINISH_STATE = 666;
    var BS_NEED_MORE = 1;
    var BS_BLOCK_DONE = 2;
    var BS_FINISH_STARTED = 3;
    var BS_FINISH_DONE = 4;
    var OS_CODE = 3;
    function err(strm, errorCode) {
      strm.msg = msg[errorCode];
      return errorCode;
    }
    function rank(f2) {
      return (f2 << 1) - (f2 > 4 ? 9 : 0);
    }
    function zero(buf) {
      var len2 = buf.length;
      while (--len2 >= 0) {
        buf[len2] = 0;
      }
    }
    function flush_pending(strm) {
      var s2 = strm.state;
      var len2 = s2.pending;
      if (len2 > strm.avail_out) {
        len2 = strm.avail_out;
      }
      if (len2 === 0) {
        return;
      }
      utils2.arraySet(strm.output, s2.pending_buf, s2.pending_out, len2, strm.next_out);
      strm.next_out += len2;
      s2.pending_out += len2;
      strm.total_out += len2;
      strm.avail_out -= len2;
      s2.pending -= len2;
      if (s2.pending === 0) {
        s2.pending_out = 0;
      }
    }
    function flush_block_only(s2, last) {
      trees2._tr_flush_block(s2, s2.block_start >= 0 ? s2.block_start : -1, s2.strstart - s2.block_start, last);
      s2.block_start = s2.strstart;
      flush_pending(s2.strm);
    }
    function put_byte(s2, b) {
      s2.pending_buf[s2.pending++] = b;
    }
    function putShortMSB(s2, b) {
      s2.pending_buf[s2.pending++] = b >>> 8 & 255;
      s2.pending_buf[s2.pending++] = b & 255;
    }
    function read_buf(strm, buf, start, size2) {
      var len2 = strm.avail_in;
      if (len2 > size2) {
        len2 = size2;
      }
      if (len2 === 0) {
        return 0;
      }
      strm.avail_in -= len2;
      utils2.arraySet(buf, strm.input, strm.next_in, len2, start);
      if (strm.state.wrap === 1) {
        strm.adler = adler32(strm.adler, buf, len2, start);
      } else if (strm.state.wrap === 2) {
        strm.adler = crc32(strm.adler, buf, len2, start);
      }
      strm.next_in += len2;
      strm.total_in += len2;
      return len2;
    }
    function longest_match(s2, cur_match) {
      var chain_length = s2.max_chain_length;
      var scan = s2.strstart;
      var match;
      var len2;
      var best_len = s2.prev_length;
      var nice_match = s2.nice_match;
      var limit2 = s2.strstart > s2.w_size - MIN_LOOKAHEAD ? s2.strstart - (s2.w_size - MIN_LOOKAHEAD) : 0;
      var _win = s2.window;
      var wmask = s2.w_mask;
      var prev = s2.prev;
      var strend = s2.strstart + MAX_MATCH;
      var scan_end1 = _win[scan + best_len - 1];
      var scan_end = _win[scan + best_len];
      if (s2.prev_length >= s2.good_match) {
        chain_length >>= 2;
      }
      if (nice_match > s2.lookahead) {
        nice_match = s2.lookahead;
      }
      do {
        match = cur_match;
        if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
          continue;
        }
        scan += 2;
        match++;
        do {
        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
        len2 = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;
        if (len2 > best_len) {
          s2.match_start = cur_match;
          best_len = len2;
          if (len2 >= nice_match) {
            break;
          }
          scan_end1 = _win[scan + best_len - 1];
          scan_end = _win[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask]) > limit2 && --chain_length !== 0);
      if (best_len <= s2.lookahead) {
        return best_len;
      }
      return s2.lookahead;
    }
    function fill_window(s2) {
      var _w_size = s2.w_size;
      var p, n, m, more, str;
      do {
        more = s2.window_size - s2.lookahead - s2.strstart;
        if (s2.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
          utils2.arraySet(s2.window, s2.window, _w_size, _w_size, 0);
          s2.match_start -= _w_size;
          s2.strstart -= _w_size;
          s2.block_start -= _w_size;
          n = s2.hash_size;
          p = n;
          do {
            m = s2.head[--p];
            s2.head[p] = m >= _w_size ? m - _w_size : 0;
          } while (--n);
          n = _w_size;
          p = n;
          do {
            m = s2.prev[--p];
            s2.prev[p] = m >= _w_size ? m - _w_size : 0;
          } while (--n);
          more += _w_size;
        }
        if (s2.strm.avail_in === 0) {
          break;
        }
        n = read_buf(s2.strm, s2.window, s2.strstart + s2.lookahead, more);
        s2.lookahead += n;
        if (s2.lookahead + s2.insert >= MIN_MATCH) {
          str = s2.strstart - s2.insert;
          s2.ins_h = s2.window[str];
          s2.ins_h = (s2.ins_h << s2.hash_shift ^ s2.window[str + 1]) & s2.hash_mask;
          while (s2.insert) {
            s2.ins_h = (s2.ins_h << s2.hash_shift ^ s2.window[str + MIN_MATCH - 1]) & s2.hash_mask;
            s2.prev[str & s2.w_mask] = s2.head[s2.ins_h];
            s2.head[s2.ins_h] = str;
            str++;
            s2.insert--;
            if (s2.lookahead + s2.insert < MIN_MATCH) {
              break;
            }
          }
        }
      } while (s2.lookahead < MIN_LOOKAHEAD && s2.strm.avail_in !== 0);
    }
    function deflate_stored(s2, flush) {
      var max_block_size = 65535;
      if (max_block_size > s2.pending_buf_size - 5) {
        max_block_size = s2.pending_buf_size - 5;
      }
      for (; ; ) {
        if (s2.lookahead <= 1) {
          fill_window(s2);
          if (s2.lookahead === 0 && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s2.lookahead === 0) {
            break;
          }
        }
        s2.strstart += s2.lookahead;
        s2.lookahead = 0;
        var max_start = s2.block_start + max_block_size;
        if (s2.strstart === 0 || s2.strstart >= max_start) {
          s2.lookahead = s2.strstart - max_start;
          s2.strstart = max_start;
          flush_block_only(s2, false);
          if (s2.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
        if (s2.strstart - s2.block_start >= s2.w_size - MIN_LOOKAHEAD) {
          flush_block_only(s2, false);
          if (s2.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s2.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s2, true);
        if (s2.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s2.strstart > s2.block_start) {
        flush_block_only(s2, false);
        if (s2.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_NEED_MORE;
    }
    function deflate_fast(s2, flush) {
      var hash_head;
      var bflush;
      for (; ; ) {
        if (s2.lookahead < MIN_LOOKAHEAD) {
          fill_window(s2);
          if (s2.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s2.lookahead === 0) {
            break;
          }
        }
        hash_head = 0;
        if (s2.lookahead >= MIN_MATCH) {
          s2.ins_h = (s2.ins_h << s2.hash_shift ^ s2.window[s2.strstart + MIN_MATCH - 1]) & s2.hash_mask;
          hash_head = s2.prev[s2.strstart & s2.w_mask] = s2.head[s2.ins_h];
          s2.head[s2.ins_h] = s2.strstart;
        }
        if (hash_head !== 0 && s2.strstart - hash_head <= s2.w_size - MIN_LOOKAHEAD) {
          s2.match_length = longest_match(s2, hash_head);
        }
        if (s2.match_length >= MIN_MATCH) {
          bflush = trees2._tr_tally(s2, s2.strstart - s2.match_start, s2.match_length - MIN_MATCH);
          s2.lookahead -= s2.match_length;
          if (s2.match_length <= s2.max_lazy_match && s2.lookahead >= MIN_MATCH) {
            s2.match_length--;
            do {
              s2.strstart++;
              s2.ins_h = (s2.ins_h << s2.hash_shift ^ s2.window[s2.strstart + MIN_MATCH - 1]) & s2.hash_mask;
              hash_head = s2.prev[s2.strstart & s2.w_mask] = s2.head[s2.ins_h];
              s2.head[s2.ins_h] = s2.strstart;
            } while (--s2.match_length !== 0);
            s2.strstart++;
          } else {
            s2.strstart += s2.match_length;
            s2.match_length = 0;
            s2.ins_h = s2.window[s2.strstart];
            s2.ins_h = (s2.ins_h << s2.hash_shift ^ s2.window[s2.strstart + 1]) & s2.hash_mask;
          }
        } else {
          bflush = trees2._tr_tally(s2, 0, s2.window[s2.strstart]);
          s2.lookahead--;
          s2.strstart++;
        }
        if (bflush) {
          flush_block_only(s2, false);
          if (s2.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s2.insert = s2.strstart < MIN_MATCH - 1 ? s2.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH) {
        flush_block_only(s2, true);
        if (s2.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s2.last_lit) {
        flush_block_only(s2, false);
        if (s2.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    }
    function deflate_slow(s2, flush) {
      var hash_head;
      var bflush;
      var max_insert;
      for (; ; ) {
        if (s2.lookahead < MIN_LOOKAHEAD) {
          fill_window(s2);
          if (s2.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s2.lookahead === 0) {
            break;
          }
        }
        hash_head = 0;
        if (s2.lookahead >= MIN_MATCH) {
          s2.ins_h = (s2.ins_h << s2.hash_shift ^ s2.window[s2.strstart + MIN_MATCH - 1]) & s2.hash_mask;
          hash_head = s2.prev[s2.strstart & s2.w_mask] = s2.head[s2.ins_h];
          s2.head[s2.ins_h] = s2.strstart;
        }
        s2.prev_length = s2.match_length;
        s2.prev_match = s2.match_start;
        s2.match_length = MIN_MATCH - 1;
        if (hash_head !== 0 && s2.prev_length < s2.max_lazy_match && s2.strstart - hash_head <= s2.w_size - MIN_LOOKAHEAD) {
          s2.match_length = longest_match(s2, hash_head);
          if (s2.match_length <= 5 && (s2.strategy === Z_FILTERED || s2.match_length === MIN_MATCH && s2.strstart - s2.match_start > 4096)) {
            s2.match_length = MIN_MATCH - 1;
          }
        }
        if (s2.prev_length >= MIN_MATCH && s2.match_length <= s2.prev_length) {
          max_insert = s2.strstart + s2.lookahead - MIN_MATCH;
          bflush = trees2._tr_tally(s2, s2.strstart - 1 - s2.prev_match, s2.prev_length - MIN_MATCH);
          s2.lookahead -= s2.prev_length - 1;
          s2.prev_length -= 2;
          do {
            if (++s2.strstart <= max_insert) {
              s2.ins_h = (s2.ins_h << s2.hash_shift ^ s2.window[s2.strstart + MIN_MATCH - 1]) & s2.hash_mask;
              hash_head = s2.prev[s2.strstart & s2.w_mask] = s2.head[s2.ins_h];
              s2.head[s2.ins_h] = s2.strstart;
            }
          } while (--s2.prev_length !== 0);
          s2.match_available = 0;
          s2.match_length = MIN_MATCH - 1;
          s2.strstart++;
          if (bflush) {
            flush_block_only(s2, false);
            if (s2.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
          }
        } else if (s2.match_available) {
          bflush = trees2._tr_tally(s2, 0, s2.window[s2.strstart - 1]);
          if (bflush) {
            flush_block_only(s2, false);
          }
          s2.strstart++;
          s2.lookahead--;
          if (s2.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        } else {
          s2.match_available = 1;
          s2.strstart++;
          s2.lookahead--;
        }
      }
      if (s2.match_available) {
        bflush = trees2._tr_tally(s2, 0, s2.window[s2.strstart - 1]);
        s2.match_available = 0;
      }
      s2.insert = s2.strstart < MIN_MATCH - 1 ? s2.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH) {
        flush_block_only(s2, true);
        if (s2.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s2.last_lit) {
        flush_block_only(s2, false);
        if (s2.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    }
    function deflate_rle(s2, flush) {
      var bflush;
      var prev;
      var scan, strend;
      var _win = s2.window;
      for (; ; ) {
        if (s2.lookahead <= MAX_MATCH) {
          fill_window(s2);
          if (s2.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s2.lookahead === 0) {
            break;
          }
        }
        s2.match_length = 0;
        if (s2.lookahead >= MIN_MATCH && s2.strstart > 0) {
          scan = s2.strstart - 1;
          prev = _win[scan];
          if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
            strend = s2.strstart + MAX_MATCH;
            do {
            } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
            s2.match_length = MAX_MATCH - (strend - scan);
            if (s2.match_length > s2.lookahead) {
              s2.match_length = s2.lookahead;
            }
          }
        }
        if (s2.match_length >= MIN_MATCH) {
          bflush = trees2._tr_tally(s2, 1, s2.match_length - MIN_MATCH);
          s2.lookahead -= s2.match_length;
          s2.strstart += s2.match_length;
          s2.match_length = 0;
        } else {
          bflush = trees2._tr_tally(s2, 0, s2.window[s2.strstart]);
          s2.lookahead--;
          s2.strstart++;
        }
        if (bflush) {
          flush_block_only(s2, false);
          if (s2.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s2.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s2, true);
        if (s2.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s2.last_lit) {
        flush_block_only(s2, false);
        if (s2.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    }
    function deflate_huff(s2, flush) {
      var bflush;
      for (; ; ) {
        if (s2.lookahead === 0) {
          fill_window(s2);
          if (s2.lookahead === 0) {
            if (flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }
            break;
          }
        }
        s2.match_length = 0;
        bflush = trees2._tr_tally(s2, 0, s2.window[s2.strstart]);
        s2.lookahead--;
        s2.strstart++;
        if (bflush) {
          flush_block_only(s2, false);
          if (s2.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s2.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s2, true);
        if (s2.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s2.last_lit) {
        flush_block_only(s2, false);
        if (s2.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    }
    function Config(good_length, max_lazy, nice_length, max_chain, func) {
      this.good_length = good_length;
      this.max_lazy = max_lazy;
      this.nice_length = nice_length;
      this.max_chain = max_chain;
      this.func = func;
    }
    var configuration_table;
    configuration_table = [
      /*      good lazy nice chain */
      new Config(0, 0, 0, 0, deflate_stored),
      /* 0 store only */
      new Config(4, 4, 8, 4, deflate_fast),
      /* 1 max speed, no lazy matches */
      new Config(4, 5, 16, 8, deflate_fast),
      /* 2 */
      new Config(4, 6, 32, 32, deflate_fast),
      /* 3 */
      new Config(4, 4, 16, 16, deflate_slow),
      /* 4 lazy matches */
      new Config(8, 16, 32, 32, deflate_slow),
      /* 5 */
      new Config(8, 16, 128, 128, deflate_slow),
      /* 6 */
      new Config(8, 32, 128, 256, deflate_slow),
      /* 7 */
      new Config(32, 128, 258, 1024, deflate_slow),
      /* 8 */
      new Config(32, 258, 258, 4096, deflate_slow)
      /* 9 max compression */
    ];
    function lm_init(s2) {
      s2.window_size = 2 * s2.w_size;
      zero(s2.head);
      s2.max_lazy_match = configuration_table[s2.level].max_lazy;
      s2.good_match = configuration_table[s2.level].good_length;
      s2.nice_match = configuration_table[s2.level].nice_length;
      s2.max_chain_length = configuration_table[s2.level].max_chain;
      s2.strstart = 0;
      s2.block_start = 0;
      s2.lookahead = 0;
      s2.insert = 0;
      s2.match_length = s2.prev_length = MIN_MATCH - 1;
      s2.match_available = 0;
      s2.ins_h = 0;
    }
    function DeflateState() {
      this.strm = null;
      this.status = 0;
      this.pending_buf = null;
      this.pending_buf_size = 0;
      this.pending_out = 0;
      this.pending = 0;
      this.wrap = 0;
      this.gzhead = null;
      this.gzindex = 0;
      this.method = Z_DEFLATED;
      this.last_flush = -1;
      this.w_size = 0;
      this.w_bits = 0;
      this.w_mask = 0;
      this.window = null;
      this.window_size = 0;
      this.prev = null;
      this.head = null;
      this.ins_h = 0;
      this.hash_size = 0;
      this.hash_bits = 0;
      this.hash_mask = 0;
      this.hash_shift = 0;
      this.block_start = 0;
      this.match_length = 0;
      this.prev_match = 0;
      this.match_available = 0;
      this.strstart = 0;
      this.match_start = 0;
      this.lookahead = 0;
      this.prev_length = 0;
      this.max_chain_length = 0;
      this.max_lazy_match = 0;
      this.level = 0;
      this.strategy = 0;
      this.good_match = 0;
      this.nice_match = 0;
      this.dyn_ltree = new utils2.Buf16(HEAP_SIZE * 2);
      this.dyn_dtree = new utils2.Buf16((2 * D_CODES + 1) * 2);
      this.bl_tree = new utils2.Buf16((2 * BL_CODES + 1) * 2);
      zero(this.dyn_ltree);
      zero(this.dyn_dtree);
      zero(this.bl_tree);
      this.l_desc = null;
      this.d_desc = null;
      this.bl_desc = null;
      this.bl_count = new utils2.Buf16(MAX_BITS + 1);
      this.heap = new utils2.Buf16(2 * L_CODES + 1);
      zero(this.heap);
      this.heap_len = 0;
      this.heap_max = 0;
      this.depth = new utils2.Buf16(2 * L_CODES + 1);
      zero(this.depth);
      this.l_buf = 0;
      this.lit_bufsize = 0;
      this.last_lit = 0;
      this.d_buf = 0;
      this.opt_len = 0;
      this.static_len = 0;
      this.matches = 0;
      this.insert = 0;
      this.bi_buf = 0;
      this.bi_valid = 0;
    }
    function deflateResetKeep(strm) {
      var s2;
      if (!strm || !strm.state) {
        return err(strm, Z_STREAM_ERROR);
      }
      strm.total_in = strm.total_out = 0;
      strm.data_type = Z_UNKNOWN;
      s2 = strm.state;
      s2.pending = 0;
      s2.pending_out = 0;
      if (s2.wrap < 0) {
        s2.wrap = -s2.wrap;
      }
      s2.status = s2.wrap ? INIT_STATE : BUSY_STATE;
      strm.adler = s2.wrap === 2 ? 0 : 1;
      s2.last_flush = Z_NO_FLUSH;
      trees2._tr_init(s2);
      return Z_OK;
    }
    function deflateReset(strm) {
      var ret = deflateResetKeep(strm);
      if (ret === Z_OK) {
        lm_init(strm.state);
      }
      return ret;
    }
    function deflateSetHeader(strm, head) {
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      if (strm.state.wrap !== 2) {
        return Z_STREAM_ERROR;
      }
      strm.state.gzhead = head;
      return Z_OK;
    }
    function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
      if (!strm) {
        return Z_STREAM_ERROR;
      }
      var wrap = 1;
      if (level === Z_DEFAULT_COMPRESSION) {
        level = 6;
      }
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      } else if (windowBits > 15) {
        wrap = 2;
        windowBits -= 16;
      }
      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
        return err(strm, Z_STREAM_ERROR);
      }
      if (windowBits === 8) {
        windowBits = 9;
      }
      var s2 = new DeflateState();
      strm.state = s2;
      s2.strm = strm;
      s2.wrap = wrap;
      s2.gzhead = null;
      s2.w_bits = windowBits;
      s2.w_size = 1 << s2.w_bits;
      s2.w_mask = s2.w_size - 1;
      s2.hash_bits = memLevel + 7;
      s2.hash_size = 1 << s2.hash_bits;
      s2.hash_mask = s2.hash_size - 1;
      s2.hash_shift = ~~((s2.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
      s2.window = new utils2.Buf8(s2.w_size * 2);
      s2.head = new utils2.Buf16(s2.hash_size);
      s2.prev = new utils2.Buf16(s2.w_size);
      s2.lit_bufsize = 1 << memLevel + 6;
      s2.pending_buf_size = s2.lit_bufsize * 4;
      s2.pending_buf = new utils2.Buf8(s2.pending_buf_size);
      s2.d_buf = 1 * s2.lit_bufsize;
      s2.l_buf = (1 + 2) * s2.lit_bufsize;
      s2.level = level;
      s2.strategy = strategy;
      s2.method = method;
      return deflateReset(strm);
    }
    function deflateInit(strm, level) {
      return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
    }
    function deflate$1(strm, flush) {
      var old_flush, s2;
      var beg, val;
      if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
        return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
      }
      s2 = strm.state;
      if (!strm.output || !strm.input && strm.avail_in !== 0 || s2.status === FINISH_STATE && flush !== Z_FINISH) {
        return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
      }
      s2.strm = strm;
      old_flush = s2.last_flush;
      s2.last_flush = flush;
      if (s2.status === INIT_STATE) {
        if (s2.wrap === 2) {
          strm.adler = 0;
          put_byte(s2, 31);
          put_byte(s2, 139);
          put_byte(s2, 8);
          if (!s2.gzhead) {
            put_byte(s2, 0);
            put_byte(s2, 0);
            put_byte(s2, 0);
            put_byte(s2, 0);
            put_byte(s2, 0);
            put_byte(s2, s2.level === 9 ? 2 : s2.strategy >= Z_HUFFMAN_ONLY || s2.level < 2 ? 4 : 0);
            put_byte(s2, OS_CODE);
            s2.status = BUSY_STATE;
          } else {
            put_byte(
              s2,
              (s2.gzhead.text ? 1 : 0) + (s2.gzhead.hcrc ? 2 : 0) + (!s2.gzhead.extra ? 0 : 4) + (!s2.gzhead.name ? 0 : 8) + (!s2.gzhead.comment ? 0 : 16)
            );
            put_byte(s2, s2.gzhead.time & 255);
            put_byte(s2, s2.gzhead.time >> 8 & 255);
            put_byte(s2, s2.gzhead.time >> 16 & 255);
            put_byte(s2, s2.gzhead.time >> 24 & 255);
            put_byte(s2, s2.level === 9 ? 2 : s2.strategy >= Z_HUFFMAN_ONLY || s2.level < 2 ? 4 : 0);
            put_byte(s2, s2.gzhead.os & 255);
            if (s2.gzhead.extra && s2.gzhead.extra.length) {
              put_byte(s2, s2.gzhead.extra.length & 255);
              put_byte(s2, s2.gzhead.extra.length >> 8 & 255);
            }
            if (s2.gzhead.hcrc) {
              strm.adler = crc32(strm.adler, s2.pending_buf, s2.pending, 0);
            }
            s2.gzindex = 0;
            s2.status = EXTRA_STATE;
          }
        } else {
          var header = Z_DEFLATED + (s2.w_bits - 8 << 4) << 8;
          var level_flags = -1;
          if (s2.strategy >= Z_HUFFMAN_ONLY || s2.level < 2) {
            level_flags = 0;
          } else if (s2.level < 6) {
            level_flags = 1;
          } else if (s2.level === 6) {
            level_flags = 2;
          } else {
            level_flags = 3;
          }
          header |= level_flags << 6;
          if (s2.strstart !== 0) {
            header |= PRESET_DICT;
          }
          header += 31 - header % 31;
          s2.status = BUSY_STATE;
          putShortMSB(s2, header);
          if (s2.strstart !== 0) {
            putShortMSB(s2, strm.adler >>> 16);
            putShortMSB(s2, strm.adler & 65535);
          }
          strm.adler = 1;
        }
      }
      if (s2.status === EXTRA_STATE) {
        if (s2.gzhead.extra) {
          beg = s2.pending;
          while (s2.gzindex < (s2.gzhead.extra.length & 65535)) {
            if (s2.pending === s2.pending_buf_size) {
              if (s2.gzhead.hcrc && s2.pending > beg) {
                strm.adler = crc32(strm.adler, s2.pending_buf, s2.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s2.pending;
              if (s2.pending === s2.pending_buf_size) {
                break;
              }
            }
            put_byte(s2, s2.gzhead.extra[s2.gzindex] & 255);
            s2.gzindex++;
          }
          if (s2.gzhead.hcrc && s2.pending > beg) {
            strm.adler = crc32(strm.adler, s2.pending_buf, s2.pending - beg, beg);
          }
          if (s2.gzindex === s2.gzhead.extra.length) {
            s2.gzindex = 0;
            s2.status = NAME_STATE;
          }
        } else {
          s2.status = NAME_STATE;
        }
      }
      if (s2.status === NAME_STATE) {
        if (s2.gzhead.name) {
          beg = s2.pending;
          do {
            if (s2.pending === s2.pending_buf_size) {
              if (s2.gzhead.hcrc && s2.pending > beg) {
                strm.adler = crc32(strm.adler, s2.pending_buf, s2.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s2.pending;
              if (s2.pending === s2.pending_buf_size) {
                val = 1;
                break;
              }
            }
            if (s2.gzindex < s2.gzhead.name.length) {
              val = s2.gzhead.name.charCodeAt(s2.gzindex++) & 255;
            } else {
              val = 0;
            }
            put_byte(s2, val);
          } while (val !== 0);
          if (s2.gzhead.hcrc && s2.pending > beg) {
            strm.adler = crc32(strm.adler, s2.pending_buf, s2.pending - beg, beg);
          }
          if (val === 0) {
            s2.gzindex = 0;
            s2.status = COMMENT_STATE;
          }
        } else {
          s2.status = COMMENT_STATE;
        }
      }
      if (s2.status === COMMENT_STATE) {
        if (s2.gzhead.comment) {
          beg = s2.pending;
          do {
            if (s2.pending === s2.pending_buf_size) {
              if (s2.gzhead.hcrc && s2.pending > beg) {
                strm.adler = crc32(strm.adler, s2.pending_buf, s2.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s2.pending;
              if (s2.pending === s2.pending_buf_size) {
                val = 1;
                break;
              }
            }
            if (s2.gzindex < s2.gzhead.comment.length) {
              val = s2.gzhead.comment.charCodeAt(s2.gzindex++) & 255;
            } else {
              val = 0;
            }
            put_byte(s2, val);
          } while (val !== 0);
          if (s2.gzhead.hcrc && s2.pending > beg) {
            strm.adler = crc32(strm.adler, s2.pending_buf, s2.pending - beg, beg);
          }
          if (val === 0) {
            s2.status = HCRC_STATE;
          }
        } else {
          s2.status = HCRC_STATE;
        }
      }
      if (s2.status === HCRC_STATE) {
        if (s2.gzhead.hcrc) {
          if (s2.pending + 2 > s2.pending_buf_size) {
            flush_pending(strm);
          }
          if (s2.pending + 2 <= s2.pending_buf_size) {
            put_byte(s2, strm.adler & 255);
            put_byte(s2, strm.adler >> 8 & 255);
            strm.adler = 0;
            s2.status = BUSY_STATE;
          }
        } else {
          s2.status = BUSY_STATE;
        }
      }
      if (s2.pending !== 0) {
        flush_pending(strm);
        if (strm.avail_out === 0) {
          s2.last_flush = -1;
          return Z_OK;
        }
      } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
        return err(strm, Z_BUF_ERROR);
      }
      if (s2.status === FINISH_STATE && strm.avail_in !== 0) {
        return err(strm, Z_BUF_ERROR);
      }
      if (strm.avail_in !== 0 || s2.lookahead !== 0 || flush !== Z_NO_FLUSH && s2.status !== FINISH_STATE) {
        var bstate = s2.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s2, flush) : s2.strategy === Z_RLE ? deflate_rle(s2, flush) : configuration_table[s2.level].func(s2, flush);
        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
          s2.status = FINISH_STATE;
        }
        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
          if (strm.avail_out === 0) {
            s2.last_flush = -1;
          }
          return Z_OK;
        }
        if (bstate === BS_BLOCK_DONE) {
          if (flush === Z_PARTIAL_FLUSH) {
            trees2._tr_align(s2);
          } else if (flush !== Z_BLOCK) {
            trees2._tr_stored_block(s2, 0, 0, false);
            if (flush === Z_FULL_FLUSH) {
              zero(s2.head);
              if (s2.lookahead === 0) {
                s2.strstart = 0;
                s2.block_start = 0;
                s2.insert = 0;
              }
            }
          }
          flush_pending(strm);
          if (strm.avail_out === 0) {
            s2.last_flush = -1;
            return Z_OK;
          }
        }
      }
      if (flush !== Z_FINISH) {
        return Z_OK;
      }
      if (s2.wrap <= 0) {
        return Z_STREAM_END;
      }
      if (s2.wrap === 2) {
        put_byte(s2, strm.adler & 255);
        put_byte(s2, strm.adler >> 8 & 255);
        put_byte(s2, strm.adler >> 16 & 255);
        put_byte(s2, strm.adler >> 24 & 255);
        put_byte(s2, strm.total_in & 255);
        put_byte(s2, strm.total_in >> 8 & 255);
        put_byte(s2, strm.total_in >> 16 & 255);
        put_byte(s2, strm.total_in >> 24 & 255);
      } else {
        putShortMSB(s2, strm.adler >>> 16);
        putShortMSB(s2, strm.adler & 65535);
      }
      flush_pending(strm);
      if (s2.wrap > 0) {
        s2.wrap = -s2.wrap;
      }
      return s2.pending !== 0 ? Z_OK : Z_STREAM_END;
    }
    function deflateEnd(strm) {
      var status;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      status = strm.state.status;
      if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
        return err(strm, Z_STREAM_ERROR);
      }
      strm.state = null;
      return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
    }
    function deflateSetDictionary(strm, dictionary) {
      var dictLength = dictionary.length;
      var s2;
      var str, n;
      var wrap;
      var avail;
      var next;
      var input;
      var tmpDict;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      s2 = strm.state;
      wrap = s2.wrap;
      if (wrap === 2 || wrap === 1 && s2.status !== INIT_STATE || s2.lookahead) {
        return Z_STREAM_ERROR;
      }
      if (wrap === 1) {
        strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
      }
      s2.wrap = 0;
      if (dictLength >= s2.w_size) {
        if (wrap === 0) {
          zero(s2.head);
          s2.strstart = 0;
          s2.block_start = 0;
          s2.insert = 0;
        }
        tmpDict = new utils2.Buf8(s2.w_size);
        utils2.arraySet(tmpDict, dictionary, dictLength - s2.w_size, s2.w_size, 0);
        dictionary = tmpDict;
        dictLength = s2.w_size;
      }
      avail = strm.avail_in;
      next = strm.next_in;
      input = strm.input;
      strm.avail_in = dictLength;
      strm.next_in = 0;
      strm.input = dictionary;
      fill_window(s2);
      while (s2.lookahead >= MIN_MATCH) {
        str = s2.strstart;
        n = s2.lookahead - (MIN_MATCH - 1);
        do {
          s2.ins_h = (s2.ins_h << s2.hash_shift ^ s2.window[str + MIN_MATCH - 1]) & s2.hash_mask;
          s2.prev[str & s2.w_mask] = s2.head[s2.ins_h];
          s2.head[s2.ins_h] = str;
          str++;
        } while (--n);
        s2.strstart = str;
        s2.lookahead = MIN_MATCH - 1;
        fill_window(s2);
      }
      s2.strstart += s2.lookahead;
      s2.block_start = s2.strstart;
      s2.insert = s2.lookahead;
      s2.lookahead = 0;
      s2.match_length = s2.prev_length = MIN_MATCH - 1;
      s2.match_available = 0;
      strm.next_in = next;
      strm.input = input;
      strm.avail_in = avail;
      s2.wrap = wrap;
      return Z_OK;
    }
    deflate.deflateInit = deflateInit;
    deflate.deflateInit2 = deflateInit2;
    deflate.deflateReset = deflateReset;
    deflate.deflateResetKeep = deflateResetKeep;
    deflate.deflateSetHeader = deflateSetHeader;
    deflate.deflate = deflate$1;
    deflate.deflateEnd = deflateEnd;
    deflate.deflateSetDictionary = deflateSetDictionary;
    deflate.deflateInfo = "pako deflate (from Nodeca project)";
    return deflate;
  }
  var inflate = {};
  var inffast;
  var hasRequiredInffast;
  function requireInffast() {
    if (hasRequiredInffast) return inffast;
    hasRequiredInffast = 1;
    var BAD = 30;
    var TYPE = 12;
    inffast = function inflate_fast(strm, start) {
      var state2;
      var _in;
      var last;
      var _out;
      var beg;
      var end;
      var dmax;
      var wsize;
      var whave;
      var wnext;
      var s_window;
      var hold;
      var bits;
      var lcode;
      var dcode;
      var lmask;
      var dmask;
      var here;
      var op;
      var len2;
      var dist2;
      var from;
      var from_source;
      var input, output2;
      state2 = strm.state;
      _in = strm.next_in;
      input = strm.input;
      last = _in + (strm.avail_in - 5);
      _out = strm.next_out;
      output2 = strm.output;
      beg = _out - (start - strm.avail_out);
      end = _out + (strm.avail_out - 257);
      dmax = state2.dmax;
      wsize = state2.wsize;
      whave = state2.whave;
      wnext = state2.wnext;
      s_window = state2.window;
      hold = state2.hold;
      bits = state2.bits;
      lcode = state2.lencode;
      dcode = state2.distcode;
      lmask = (1 << state2.lenbits) - 1;
      dmask = (1 << state2.distbits) - 1;
      top:
        do {
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }
          here = lcode[hold & lmask];
          dolen:
            for (; ; ) {
              op = here >>> 24;
              hold >>>= op;
              bits -= op;
              op = here >>> 16 & 255;
              if (op === 0) {
                output2[_out++] = here & 65535;
              } else if (op & 16) {
                len2 = here & 65535;
                op &= 15;
                if (op) {
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                  }
                  len2 += hold & (1 << op) - 1;
                  hold >>>= op;
                  bits -= op;
                }
                if (bits < 15) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  hold += input[_in++] << bits;
                  bits += 8;
                }
                here = dcode[hold & dmask];
                dodist:
                  for (; ; ) {
                    op = here >>> 24;
                    hold >>>= op;
                    bits -= op;
                    op = here >>> 16 & 255;
                    if (op & 16) {
                      dist2 = here & 65535;
                      op &= 15;
                      if (bits < op) {
                        hold += input[_in++] << bits;
                        bits += 8;
                        if (bits < op) {
                          hold += input[_in++] << bits;
                          bits += 8;
                        }
                      }
                      dist2 += hold & (1 << op) - 1;
                      if (dist2 > dmax) {
                        strm.msg = "invalid distance too far back";
                        state2.mode = BAD;
                        break top;
                      }
                      hold >>>= op;
                      bits -= op;
                      op = _out - beg;
                      if (dist2 > op) {
                        op = dist2 - op;
                        if (op > whave) {
                          if (state2.sane) {
                            strm.msg = "invalid distance too far back";
                            state2.mode = BAD;
                            break top;
                          }
                        }
                        from = 0;
                        from_source = s_window;
                        if (wnext === 0) {
                          from += wsize - op;
                          if (op < len2) {
                            len2 -= op;
                            do {
                              output2[_out++] = s_window[from++];
                            } while (--op);
                            from = _out - dist2;
                            from_source = output2;
                          }
                        } else if (wnext < op) {
                          from += wsize + wnext - op;
                          op -= wnext;
                          if (op < len2) {
                            len2 -= op;
                            do {
                              output2[_out++] = s_window[from++];
                            } while (--op);
                            from = 0;
                            if (wnext < len2) {
                              op = wnext;
                              len2 -= op;
                              do {
                                output2[_out++] = s_window[from++];
                              } while (--op);
                              from = _out - dist2;
                              from_source = output2;
                            }
                          }
                        } else {
                          from += wnext - op;
                          if (op < len2) {
                            len2 -= op;
                            do {
                              output2[_out++] = s_window[from++];
                            } while (--op);
                            from = _out - dist2;
                            from_source = output2;
                          }
                        }
                        while (len2 > 2) {
                          output2[_out++] = from_source[from++];
                          output2[_out++] = from_source[from++];
                          output2[_out++] = from_source[from++];
                          len2 -= 3;
                        }
                        if (len2) {
                          output2[_out++] = from_source[from++];
                          if (len2 > 1) {
                            output2[_out++] = from_source[from++];
                          }
                        }
                      } else {
                        from = _out - dist2;
                        do {
                          output2[_out++] = output2[from++];
                          output2[_out++] = output2[from++];
                          output2[_out++] = output2[from++];
                          len2 -= 3;
                        } while (len2 > 2);
                        if (len2) {
                          output2[_out++] = output2[from++];
                          if (len2 > 1) {
                            output2[_out++] = output2[from++];
                          }
                        }
                      }
                    } else if ((op & 64) === 0) {
                      here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                      continue dodist;
                    } else {
                      strm.msg = "invalid distance code";
                      state2.mode = BAD;
                      break top;
                    }
                    break;
                  }
              } else if ((op & 64) === 0) {
                here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
                continue dolen;
              } else if (op & 32) {
                state2.mode = TYPE;
                break top;
              } else {
                strm.msg = "invalid literal/length code";
                state2.mode = BAD;
                break top;
              }
              break;
            }
        } while (_in < last && _out < end);
      len2 = bits >> 3;
      _in -= len2;
      bits -= len2 << 3;
      hold &= (1 << bits) - 1;
      strm.next_in = _in;
      strm.next_out = _out;
      strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
      strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
      state2.hold = hold;
      state2.bits = bits;
      return;
    };
    return inffast;
  }
  var inftrees;
  var hasRequiredInftrees;
  function requireInftrees() {
    if (hasRequiredInftrees) return inftrees;
    hasRequiredInftrees = 1;
    var utils2 = requireCommon();
    var MAXBITS = 15;
    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;
    var lbase = [
      /* Length codes 257..285 base */
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      13,
      15,
      17,
      19,
      23,
      27,
      31,
      35,
      43,
      51,
      59,
      67,
      83,
      99,
      115,
      131,
      163,
      195,
      227,
      258,
      0,
      0
    ];
    var lext = [
      /* Length codes 257..285 extra */
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      17,
      17,
      17,
      17,
      18,
      18,
      18,
      18,
      19,
      19,
      19,
      19,
      20,
      20,
      20,
      20,
      21,
      21,
      21,
      21,
      16,
      72,
      78
    ];
    var dbase = [
      /* Distance codes 0..29 base */
      1,
      2,
      3,
      4,
      5,
      7,
      9,
      13,
      17,
      25,
      33,
      49,
      65,
      97,
      129,
      193,
      257,
      385,
      513,
      769,
      1025,
      1537,
      2049,
      3073,
      4097,
      6145,
      8193,
      12289,
      16385,
      24577,
      0,
      0
    ];
    var dext = [
      /* Distance codes 0..29 extra */
      16,
      16,
      16,
      16,
      17,
      17,
      18,
      18,
      19,
      19,
      20,
      20,
      21,
      21,
      22,
      22,
      23,
      23,
      24,
      24,
      25,
      25,
      26,
      26,
      27,
      27,
      28,
      28,
      29,
      29,
      64,
      64
    ];
    inftrees = function inflate_table(type2, lens, lens_index, codes, table, table_index, work, opts) {
      var bits = opts.bits;
      var len2 = 0;
      var sym = 0;
      var min2 = 0, max2 = 0;
      var root = 0;
      var curr = 0;
      var drop = 0;
      var left = 0;
      var used = 0;
      var huff = 0;
      var incr;
      var fill;
      var low;
      var mask2;
      var next;
      var base2 = null;
      var base_index = 0;
      var end;
      var count = new utils2.Buf16(MAXBITS + 1);
      var offs = new utils2.Buf16(MAXBITS + 1);
      var extra = null;
      var extra_index = 0;
      var here_bits, here_op, here_val;
      for (len2 = 0; len2 <= MAXBITS; len2++) {
        count[len2] = 0;
      }
      for (sym = 0; sym < codes; sym++) {
        count[lens[lens_index + sym]]++;
      }
      root = bits;
      for (max2 = MAXBITS; max2 >= 1; max2--) {
        if (count[max2] !== 0) {
          break;
        }
      }
      if (root > max2) {
        root = max2;
      }
      if (max2 === 0) {
        table[table_index++] = 1 << 24 | 64 << 16 | 0;
        table[table_index++] = 1 << 24 | 64 << 16 | 0;
        opts.bits = 1;
        return 0;
      }
      for (min2 = 1; min2 < max2; min2++) {
        if (count[min2] !== 0) {
          break;
        }
      }
      if (root < min2) {
        root = min2;
      }
      left = 1;
      for (len2 = 1; len2 <= MAXBITS; len2++) {
        left <<= 1;
        left -= count[len2];
        if (left < 0) {
          return -1;
        }
      }
      if (left > 0 && (type2 === CODES || max2 !== 1)) {
        return -1;
      }
      offs[1] = 0;
      for (len2 = 1; len2 < MAXBITS; len2++) {
        offs[len2 + 1] = offs[len2] + count[len2];
      }
      for (sym = 0; sym < codes; sym++) {
        if (lens[lens_index + sym] !== 0) {
          work[offs[lens[lens_index + sym]]++] = sym;
        }
      }
      if (type2 === CODES) {
        base2 = extra = work;
        end = 19;
      } else if (type2 === LENS) {
        base2 = lbase;
        base_index -= 257;
        extra = lext;
        extra_index -= 257;
        end = 256;
      } else {
        base2 = dbase;
        extra = dext;
        end = -1;
      }
      huff = 0;
      sym = 0;
      len2 = min2;
      next = table_index;
      curr = root;
      drop = 0;
      low = -1;
      used = 1 << root;
      mask2 = used - 1;
      if (type2 === LENS && used > ENOUGH_LENS || type2 === DISTS && used > ENOUGH_DISTS) {
        return 1;
      }
      for (; ; ) {
        here_bits = len2 - drop;
        if (work[sym] < end) {
          here_op = 0;
          here_val = work[sym];
        } else if (work[sym] > end) {
          here_op = extra[extra_index + work[sym]];
          here_val = base2[base_index + work[sym]];
        } else {
          here_op = 32 + 64;
          here_val = 0;
        }
        incr = 1 << len2 - drop;
        fill = 1 << curr;
        min2 = fill;
        do {
          fill -= incr;
          table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
        } while (fill !== 0);
        incr = 1 << len2 - 1;
        while (huff & incr) {
          incr >>= 1;
        }
        if (incr !== 0) {
          huff &= incr - 1;
          huff += incr;
        } else {
          huff = 0;
        }
        sym++;
        if (--count[len2] === 0) {
          if (len2 === max2) {
            break;
          }
          len2 = lens[lens_index + work[sym]];
        }
        if (len2 > root && (huff & mask2) !== low) {
          if (drop === 0) {
            drop = root;
          }
          next += min2;
          curr = len2 - drop;
          left = 1 << curr;
          while (curr + drop < max2) {
            left -= count[curr + drop];
            if (left <= 0) {
              break;
            }
            curr++;
            left <<= 1;
          }
          used += 1 << curr;
          if (type2 === LENS && used > ENOUGH_LENS || type2 === DISTS && used > ENOUGH_DISTS) {
            return 1;
          }
          low = huff & mask2;
          table[low] = root << 24 | curr << 16 | next - table_index | 0;
        }
      }
      if (huff !== 0) {
        table[next + huff] = len2 - drop << 24 | 64 << 16 | 0;
      }
      opts.bits = root;
      return 0;
    };
    return inftrees;
  }
  var hasRequiredInflate;
  function requireInflate() {
    if (hasRequiredInflate) return inflate;
    hasRequiredInflate = 1;
    var utils2 = requireCommon();
    var adler32 = requireAdler32();
    var crc32 = requireCrc32();
    var inflate_fast = requireInffast();
    var inflate_table = requireInftrees();
    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;
    var Z_FINISH = 4;
    var Z_BLOCK = 5;
    var Z_TREES = 6;
    var Z_OK = 0;
    var Z_STREAM_END = 1;
    var Z_NEED_DICT = 2;
    var Z_STREAM_ERROR = -2;
    var Z_DATA_ERROR = -3;
    var Z_MEM_ERROR = -4;
    var Z_BUF_ERROR = -5;
    var Z_DEFLATED = 8;
    var HEAD = 1;
    var FLAGS = 2;
    var TIME = 3;
    var OS = 4;
    var EXLEN = 5;
    var EXTRA = 6;
    var NAME = 7;
    var COMMENT = 8;
    var HCRC = 9;
    var DICTID = 10;
    var DICT = 11;
    var TYPE = 12;
    var TYPEDO = 13;
    var STORED = 14;
    var COPY_ = 15;
    var COPY = 16;
    var TABLE = 17;
    var LENLENS = 18;
    var CODELENS = 19;
    var LEN_ = 20;
    var LEN = 21;
    var LENEXT = 22;
    var DIST = 23;
    var DISTEXT = 24;
    var MATCH = 25;
    var LIT = 26;
    var CHECK = 27;
    var LENGTH = 28;
    var DONE = 29;
    var BAD = 30;
    var MEM = 31;
    var SYNC = 32;
    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    var MAX_WBITS = 15;
    var DEF_WBITS = MAX_WBITS;
    function zswap32(q) {
      return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
    }
    function InflateState() {
      this.mode = 0;
      this.last = false;
      this.wrap = 0;
      this.havedict = false;
      this.flags = 0;
      this.dmax = 0;
      this.check = 0;
      this.total = 0;
      this.head = null;
      this.wbits = 0;
      this.wsize = 0;
      this.whave = 0;
      this.wnext = 0;
      this.window = null;
      this.hold = 0;
      this.bits = 0;
      this.length = 0;
      this.offset = 0;
      this.extra = 0;
      this.lencode = null;
      this.distcode = null;
      this.lenbits = 0;
      this.distbits = 0;
      this.ncode = 0;
      this.nlen = 0;
      this.ndist = 0;
      this.have = 0;
      this.next = null;
      this.lens = new utils2.Buf16(320);
      this.work = new utils2.Buf16(288);
      this.lendyn = null;
      this.distdyn = null;
      this.sane = 0;
      this.back = 0;
      this.was = 0;
    }
    function inflateResetKeep(strm) {
      var state2;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      state2 = strm.state;
      strm.total_in = strm.total_out = state2.total = 0;
      strm.msg = "";
      if (state2.wrap) {
        strm.adler = state2.wrap & 1;
      }
      state2.mode = HEAD;
      state2.last = 0;
      state2.havedict = 0;
      state2.dmax = 32768;
      state2.head = null;
      state2.hold = 0;
      state2.bits = 0;
      state2.lencode = state2.lendyn = new utils2.Buf32(ENOUGH_LENS);
      state2.distcode = state2.distdyn = new utils2.Buf32(ENOUGH_DISTS);
      state2.sane = 1;
      state2.back = -1;
      return Z_OK;
    }
    function inflateReset(strm) {
      var state2;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      state2 = strm.state;
      state2.wsize = 0;
      state2.whave = 0;
      state2.wnext = 0;
      return inflateResetKeep(strm);
    }
    function inflateReset2(strm, windowBits) {
      var wrap;
      var state2;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      state2 = strm.state;
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      } else {
        wrap = (windowBits >> 4) + 1;
        if (windowBits < 48) {
          windowBits &= 15;
        }
      }
      if (windowBits && (windowBits < 8 || windowBits > 15)) {
        return Z_STREAM_ERROR;
      }
      if (state2.window !== null && state2.wbits !== windowBits) {
        state2.window = null;
      }
      state2.wrap = wrap;
      state2.wbits = windowBits;
      return inflateReset(strm);
    }
    function inflateInit2(strm, windowBits) {
      var ret;
      var state2;
      if (!strm) {
        return Z_STREAM_ERROR;
      }
      state2 = new InflateState();
      strm.state = state2;
      state2.window = null;
      ret = inflateReset2(strm, windowBits);
      if (ret !== Z_OK) {
        strm.state = null;
      }
      return ret;
    }
    function inflateInit(strm) {
      return inflateInit2(strm, DEF_WBITS);
    }
    var virgin = true;
    var lenfix, distfix;
    function fixedtables(state2) {
      if (virgin) {
        var sym;
        lenfix = new utils2.Buf32(512);
        distfix = new utils2.Buf32(32);
        sym = 0;
        while (sym < 144) {
          state2.lens[sym++] = 8;
        }
        while (sym < 256) {
          state2.lens[sym++] = 9;
        }
        while (sym < 280) {
          state2.lens[sym++] = 7;
        }
        while (sym < 288) {
          state2.lens[sym++] = 8;
        }
        inflate_table(LENS, state2.lens, 0, 288, lenfix, 0, state2.work, { bits: 9 });
        sym = 0;
        while (sym < 32) {
          state2.lens[sym++] = 5;
        }
        inflate_table(DISTS, state2.lens, 0, 32, distfix, 0, state2.work, { bits: 5 });
        virgin = false;
      }
      state2.lencode = lenfix;
      state2.lenbits = 9;
      state2.distcode = distfix;
      state2.distbits = 5;
    }
    function updatewindow(strm, src, end, copy) {
      var dist2;
      var state2 = strm.state;
      if (state2.window === null) {
        state2.wsize = 1 << state2.wbits;
        state2.wnext = 0;
        state2.whave = 0;
        state2.window = new utils2.Buf8(state2.wsize);
      }
      if (copy >= state2.wsize) {
        utils2.arraySet(state2.window, src, end - state2.wsize, state2.wsize, 0);
        state2.wnext = 0;
        state2.whave = state2.wsize;
      } else {
        dist2 = state2.wsize - state2.wnext;
        if (dist2 > copy) {
          dist2 = copy;
        }
        utils2.arraySet(state2.window, src, end - copy, dist2, state2.wnext);
        copy -= dist2;
        if (copy) {
          utils2.arraySet(state2.window, src, end - copy, copy, 0);
          state2.wnext = copy;
          state2.whave = state2.wsize;
        } else {
          state2.wnext += dist2;
          if (state2.wnext === state2.wsize) {
            state2.wnext = 0;
          }
          if (state2.whave < state2.wsize) {
            state2.whave += dist2;
          }
        }
      }
      return 0;
    }
    function inflate$1(strm, flush) {
      var state2;
      var input, output2;
      var next;
      var put;
      var have, left;
      var hold;
      var bits;
      var _in, _out;
      var copy;
      var from;
      var from_source;
      var here = 0;
      var here_bits, here_op, here_val;
      var last_bits, last_op, last_val;
      var len2;
      var ret;
      var hbuf = new utils2.Buf8(4);
      var opts;
      var n;
      var order = (
        /* permutation of code lengths */
        [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]
      );
      if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
        return Z_STREAM_ERROR;
      }
      state2 = strm.state;
      if (state2.mode === TYPE) {
        state2.mode = TYPEDO;
      }
      put = strm.next_out;
      output2 = strm.output;
      left = strm.avail_out;
      next = strm.next_in;
      input = strm.input;
      have = strm.avail_in;
      hold = state2.hold;
      bits = state2.bits;
      _in = have;
      _out = left;
      ret = Z_OK;
      inf_leave:
        for (; ; ) {
          switch (state2.mode) {
            case HEAD:
              if (state2.wrap === 0) {
                state2.mode = TYPEDO;
                break;
              }
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state2.wrap & 2 && hold === 35615) {
                state2.check = 0;
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state2.check = crc32(state2.check, hbuf, 2, 0);
                hold = 0;
                bits = 0;
                state2.mode = FLAGS;
                break;
              }
              state2.flags = 0;
              if (state2.head) {
                state2.head.done = false;
              }
              if (!(state2.wrap & 1) || /* check if zlib header allowed */
              (((hold & 255) << 8) + (hold >> 8)) % 31) {
                strm.msg = "incorrect header check";
                state2.mode = BAD;
                break;
              }
              if ((hold & 15) !== Z_DEFLATED) {
                strm.msg = "unknown compression method";
                state2.mode = BAD;
                break;
              }
              hold >>>= 4;
              bits -= 4;
              len2 = (hold & 15) + 8;
              if (state2.wbits === 0) {
                state2.wbits = len2;
              } else if (len2 > state2.wbits) {
                strm.msg = "invalid window size";
                state2.mode = BAD;
                break;
              }
              state2.dmax = 1 << len2;
              strm.adler = state2.check = 1;
              state2.mode = hold & 512 ? DICTID : TYPE;
              hold = 0;
              bits = 0;
              break;
            case FLAGS:
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state2.flags = hold;
              if ((state2.flags & 255) !== Z_DEFLATED) {
                strm.msg = "unknown compression method";
                state2.mode = BAD;
                break;
              }
              if (state2.flags & 57344) {
                strm.msg = "unknown header flags set";
                state2.mode = BAD;
                break;
              }
              if (state2.head) {
                state2.head.text = hold >> 8 & 1;
              }
              if (state2.flags & 512) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state2.check = crc32(state2.check, hbuf, 2, 0);
              }
              hold = 0;
              bits = 0;
              state2.mode = TIME;
            case TIME:
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state2.head) {
                state2.head.time = hold;
              }
              if (state2.flags & 512) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                hbuf[2] = hold >>> 16 & 255;
                hbuf[3] = hold >>> 24 & 255;
                state2.check = crc32(state2.check, hbuf, 4, 0);
              }
              hold = 0;
              bits = 0;
              state2.mode = OS;
            case OS:
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state2.head) {
                state2.head.xflags = hold & 255;
                state2.head.os = hold >> 8;
              }
              if (state2.flags & 512) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state2.check = crc32(state2.check, hbuf, 2, 0);
              }
              hold = 0;
              bits = 0;
              state2.mode = EXLEN;
            case EXLEN:
              if (state2.flags & 1024) {
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state2.length = hold;
                if (state2.head) {
                  state2.head.extra_len = hold;
                }
                if (state2.flags & 512) {
                  hbuf[0] = hold & 255;
                  hbuf[1] = hold >>> 8 & 255;
                  state2.check = crc32(state2.check, hbuf, 2, 0);
                }
                hold = 0;
                bits = 0;
              } else if (state2.head) {
                state2.head.extra = null;
              }
              state2.mode = EXTRA;
            case EXTRA:
              if (state2.flags & 1024) {
                copy = state2.length;
                if (copy > have) {
                  copy = have;
                }
                if (copy) {
                  if (state2.head) {
                    len2 = state2.head.extra_len - state2.length;
                    if (!state2.head.extra) {
                      state2.head.extra = new Array(state2.head.extra_len);
                    }
                    utils2.arraySet(
                      state2.head.extra,
                      input,
                      next,
                      // extra field is limited to 65536 bytes
                      // - no need for additional size check
                      copy,
                      /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                      len2
                    );
                  }
                  if (state2.flags & 512) {
                    state2.check = crc32(state2.check, input, copy, next);
                  }
                  have -= copy;
                  next += copy;
                  state2.length -= copy;
                }
                if (state2.length) {
                  break inf_leave;
                }
              }
              state2.length = 0;
              state2.mode = NAME;
            case NAME:
              if (state2.flags & 2048) {
                if (have === 0) {
                  break inf_leave;
                }
                copy = 0;
                do {
                  len2 = input[next + copy++];
                  if (state2.head && len2 && state2.length < 65536) {
                    state2.head.name += String.fromCharCode(len2);
                  }
                } while (len2 && copy < have);
                if (state2.flags & 512) {
                  state2.check = crc32(state2.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                if (len2) {
                  break inf_leave;
                }
              } else if (state2.head) {
                state2.head.name = null;
              }
              state2.length = 0;
              state2.mode = COMMENT;
            case COMMENT:
              if (state2.flags & 4096) {
                if (have === 0) {
                  break inf_leave;
                }
                copy = 0;
                do {
                  len2 = input[next + copy++];
                  if (state2.head && len2 && state2.length < 65536) {
                    state2.head.comment += String.fromCharCode(len2);
                  }
                } while (len2 && copy < have);
                if (state2.flags & 512) {
                  state2.check = crc32(state2.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                if (len2) {
                  break inf_leave;
                }
              } else if (state2.head) {
                state2.head.comment = null;
              }
              state2.mode = HCRC;
            case HCRC:
              if (state2.flags & 512) {
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (hold !== (state2.check & 65535)) {
                  strm.msg = "header crc mismatch";
                  state2.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              if (state2.head) {
                state2.head.hcrc = state2.flags >> 9 & 1;
                state2.head.done = true;
              }
              strm.adler = state2.check = 0;
              state2.mode = TYPE;
              break;
            case DICTID:
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              strm.adler = state2.check = zswap32(hold);
              hold = 0;
              bits = 0;
              state2.mode = DICT;
            case DICT:
              if (state2.havedict === 0) {
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state2.hold = hold;
                state2.bits = bits;
                return Z_NEED_DICT;
              }
              strm.adler = state2.check = 1;
              state2.mode = TYPE;
            case TYPE:
              if (flush === Z_BLOCK || flush === Z_TREES) {
                break inf_leave;
              }
            case TYPEDO:
              if (state2.last) {
                hold >>>= bits & 7;
                bits -= bits & 7;
                state2.mode = CHECK;
                break;
              }
              while (bits < 3) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state2.last = hold & 1;
              hold >>>= 1;
              bits -= 1;
              switch (hold & 3) {
                case 0:
                  state2.mode = STORED;
                  break;
                case 1:
                  fixedtables(state2);
                  state2.mode = LEN_;
                  if (flush === Z_TREES) {
                    hold >>>= 2;
                    bits -= 2;
                    break inf_leave;
                  }
                  break;
                case 2:
                  state2.mode = TABLE;
                  break;
                case 3:
                  strm.msg = "invalid block type";
                  state2.mode = BAD;
              }
              hold >>>= 2;
              bits -= 2;
              break;
            case STORED:
              hold >>>= bits & 7;
              bits -= bits & 7;
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
                strm.msg = "invalid stored block lengths";
                state2.mode = BAD;
                break;
              }
              state2.length = hold & 65535;
              hold = 0;
              bits = 0;
              state2.mode = COPY_;
              if (flush === Z_TREES) {
                break inf_leave;
              }
            case COPY_:
              state2.mode = COPY;
            case COPY:
              copy = state2.length;
              if (copy) {
                if (copy > have) {
                  copy = have;
                }
                if (copy > left) {
                  copy = left;
                }
                if (copy === 0) {
                  break inf_leave;
                }
                utils2.arraySet(output2, input, next, copy, put);
                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
                state2.length -= copy;
                break;
              }
              state2.mode = TYPE;
              break;
            case TABLE:
              while (bits < 14) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state2.nlen = (hold & 31) + 257;
              hold >>>= 5;
              bits -= 5;
              state2.ndist = (hold & 31) + 1;
              hold >>>= 5;
              bits -= 5;
              state2.ncode = (hold & 15) + 4;
              hold >>>= 4;
              bits -= 4;
              if (state2.nlen > 286 || state2.ndist > 30) {
                strm.msg = "too many length or distance symbols";
                state2.mode = BAD;
                break;
              }
              state2.have = 0;
              state2.mode = LENLENS;
            case LENLENS:
              while (state2.have < state2.ncode) {
                while (bits < 3) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state2.lens[order[state2.have++]] = hold & 7;
                hold >>>= 3;
                bits -= 3;
              }
              while (state2.have < 19) {
                state2.lens[order[state2.have++]] = 0;
              }
              state2.lencode = state2.lendyn;
              state2.lenbits = 7;
              opts = { bits: state2.lenbits };
              ret = inflate_table(CODES, state2.lens, 0, 19, state2.lencode, 0, state2.work, opts);
              state2.lenbits = opts.bits;
              if (ret) {
                strm.msg = "invalid code lengths set";
                state2.mode = BAD;
                break;
              }
              state2.have = 0;
              state2.mode = CODELENS;
            case CODELENS:
              while (state2.have < state2.nlen + state2.ndist) {
                for (; ; ) {
                  here = state2.lencode[hold & (1 << state2.lenbits) - 1];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (here_val < 16) {
                  hold >>>= here_bits;
                  bits -= here_bits;
                  state2.lens[state2.have++] = here_val;
                } else {
                  if (here_val === 16) {
                    n = here_bits + 2;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    if (state2.have === 0) {
                      strm.msg = "invalid bit length repeat";
                      state2.mode = BAD;
                      break;
                    }
                    len2 = state2.lens[state2.have - 1];
                    copy = 3 + (hold & 3);
                    hold >>>= 2;
                    bits -= 2;
                  } else if (here_val === 17) {
                    n = here_bits + 3;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    len2 = 0;
                    copy = 3 + (hold & 7);
                    hold >>>= 3;
                    bits -= 3;
                  } else {
                    n = here_bits + 7;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    len2 = 0;
                    copy = 11 + (hold & 127);
                    hold >>>= 7;
                    bits -= 7;
                  }
                  if (state2.have + copy > state2.nlen + state2.ndist) {
                    strm.msg = "invalid bit length repeat";
                    state2.mode = BAD;
                    break;
                  }
                  while (copy--) {
                    state2.lens[state2.have++] = len2;
                  }
                }
              }
              if (state2.mode === BAD) {
                break;
              }
              if (state2.lens[256] === 0) {
                strm.msg = "invalid code -- missing end-of-block";
                state2.mode = BAD;
                break;
              }
              state2.lenbits = 9;
              opts = { bits: state2.lenbits };
              ret = inflate_table(LENS, state2.lens, 0, state2.nlen, state2.lencode, 0, state2.work, opts);
              state2.lenbits = opts.bits;
              if (ret) {
                strm.msg = "invalid literal/lengths set";
                state2.mode = BAD;
                break;
              }
              state2.distbits = 6;
              state2.distcode = state2.distdyn;
              opts = { bits: state2.distbits };
              ret = inflate_table(DISTS, state2.lens, state2.nlen, state2.ndist, state2.distcode, 0, state2.work, opts);
              state2.distbits = opts.bits;
              if (ret) {
                strm.msg = "invalid distances set";
                state2.mode = BAD;
                break;
              }
              state2.mode = LEN_;
              if (flush === Z_TREES) {
                break inf_leave;
              }
            case LEN_:
              state2.mode = LEN;
            case LEN:
              if (have >= 6 && left >= 258) {
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state2.hold = hold;
                state2.bits = bits;
                inflate_fast(strm, _out);
                put = strm.next_out;
                output2 = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state2.hold;
                bits = state2.bits;
                if (state2.mode === TYPE) {
                  state2.back = -1;
                }
                break;
              }
              state2.back = 0;
              for (; ; ) {
                here = state2.lencode[hold & (1 << state2.lenbits) - 1];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (here_op && (here_op & 240) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for (; ; ) {
                  here = state2.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (last_bits + here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= last_bits;
                bits -= last_bits;
                state2.back += last_bits;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              state2.back += here_bits;
              state2.length = here_val;
              if (here_op === 0) {
                state2.mode = LIT;
                break;
              }
              if (here_op & 32) {
                state2.back = -1;
                state2.mode = TYPE;
                break;
              }
              if (here_op & 64) {
                strm.msg = "invalid literal/length code";
                state2.mode = BAD;
                break;
              }
              state2.extra = here_op & 15;
              state2.mode = LENEXT;
            case LENEXT:
              if (state2.extra) {
                n = state2.extra;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state2.length += hold & (1 << state2.extra) - 1;
                hold >>>= state2.extra;
                bits -= state2.extra;
                state2.back += state2.extra;
              }
              state2.was = state2.length;
              state2.mode = DIST;
            case DIST:
              for (; ; ) {
                here = state2.distcode[hold & (1 << state2.distbits) - 1];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if ((here_op & 240) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for (; ; ) {
                  here = state2.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (last_bits + here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= last_bits;
                bits -= last_bits;
                state2.back += last_bits;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              state2.back += here_bits;
              if (here_op & 64) {
                strm.msg = "invalid distance code";
                state2.mode = BAD;
                break;
              }
              state2.offset = here_val;
              state2.extra = here_op & 15;
              state2.mode = DISTEXT;
            case DISTEXT:
              if (state2.extra) {
                n = state2.extra;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state2.offset += hold & (1 << state2.extra) - 1;
                hold >>>= state2.extra;
                bits -= state2.extra;
                state2.back += state2.extra;
              }
              if (state2.offset > state2.dmax) {
                strm.msg = "invalid distance too far back";
                state2.mode = BAD;
                break;
              }
              state2.mode = MATCH;
            case MATCH:
              if (left === 0) {
                break inf_leave;
              }
              copy = _out - left;
              if (state2.offset > copy) {
                copy = state2.offset - copy;
                if (copy > state2.whave) {
                  if (state2.sane) {
                    strm.msg = "invalid distance too far back";
                    state2.mode = BAD;
                    break;
                  }
                }
                if (copy > state2.wnext) {
                  copy -= state2.wnext;
                  from = state2.wsize - copy;
                } else {
                  from = state2.wnext - copy;
                }
                if (copy > state2.length) {
                  copy = state2.length;
                }
                from_source = state2.window;
              } else {
                from_source = output2;
                from = put - state2.offset;
                copy = state2.length;
              }
              if (copy > left) {
                copy = left;
              }
              left -= copy;
              state2.length -= copy;
              do {
                output2[put++] = from_source[from++];
              } while (--copy);
              if (state2.length === 0) {
                state2.mode = LEN;
              }
              break;
            case LIT:
              if (left === 0) {
                break inf_leave;
              }
              output2[put++] = state2.length;
              left--;
              state2.mode = LEN;
              break;
            case CHECK:
              if (state2.wrap) {
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold |= input[next++] << bits;
                  bits += 8;
                }
                _out -= left;
                strm.total_out += _out;
                state2.total += _out;
                if (_out) {
                  strm.adler = state2.check = /*UPDATE(state.check, put - _out, _out);*/
                  state2.flags ? crc32(state2.check, output2, _out, put - _out) : adler32(state2.check, output2, _out, put - _out);
                }
                _out = left;
                if ((state2.flags ? hold : zswap32(hold)) !== state2.check) {
                  strm.msg = "incorrect data check";
                  state2.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              state2.mode = LENGTH;
            case LENGTH:
              if (state2.wrap && state2.flags) {
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (hold !== (state2.total & 4294967295)) {
                  strm.msg = "incorrect length check";
                  state2.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              state2.mode = DONE;
            case DONE:
              ret = Z_STREAM_END;
              break inf_leave;
            case BAD:
              ret = Z_DATA_ERROR;
              break inf_leave;
            case MEM:
              return Z_MEM_ERROR;
            case SYNC:
            default:
              return Z_STREAM_ERROR;
          }
        }
      strm.next_out = put;
      strm.avail_out = left;
      strm.next_in = next;
      strm.avail_in = have;
      state2.hold = hold;
      state2.bits = bits;
      if (state2.wsize || _out !== strm.avail_out && state2.mode < BAD && (state2.mode < CHECK || flush !== Z_FINISH)) {
        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
      }
      _in -= strm.avail_in;
      _out -= strm.avail_out;
      strm.total_in += _in;
      strm.total_out += _out;
      state2.total += _out;
      if (state2.wrap && _out) {
        strm.adler = state2.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
        state2.flags ? crc32(state2.check, output2, _out, strm.next_out - _out) : adler32(state2.check, output2, _out, strm.next_out - _out);
      }
      strm.data_type = state2.bits + (state2.last ? 64 : 0) + (state2.mode === TYPE ? 128 : 0) + (state2.mode === LEN_ || state2.mode === COPY_ ? 256 : 0);
      if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
        ret = Z_BUF_ERROR;
      }
      return ret;
    }
    function inflateEnd(strm) {
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      var state2 = strm.state;
      if (state2.window) {
        state2.window = null;
      }
      strm.state = null;
      return Z_OK;
    }
    function inflateGetHeader(strm, head) {
      var state2;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      state2 = strm.state;
      if ((state2.wrap & 2) === 0) {
        return Z_STREAM_ERROR;
      }
      state2.head = head;
      head.done = false;
      return Z_OK;
    }
    function inflateSetDictionary(strm, dictionary) {
      var dictLength = dictionary.length;
      var state2;
      var dictid;
      var ret;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      state2 = strm.state;
      if (state2.wrap !== 0 && state2.mode !== DICT) {
        return Z_STREAM_ERROR;
      }
      if (state2.mode === DICT) {
        dictid = 1;
        dictid = adler32(dictid, dictionary, dictLength, 0);
        if (dictid !== state2.check) {
          return Z_DATA_ERROR;
        }
      }
      ret = updatewindow(strm, dictionary, dictLength, dictLength);
      if (ret) {
        state2.mode = MEM;
        return Z_MEM_ERROR;
      }
      state2.havedict = 1;
      return Z_OK;
    }
    inflate.inflateReset = inflateReset;
    inflate.inflateReset2 = inflateReset2;
    inflate.inflateResetKeep = inflateResetKeep;
    inflate.inflateInit = inflateInit;
    inflate.inflateInit2 = inflateInit2;
    inflate.inflate = inflate$1;
    inflate.inflateEnd = inflateEnd;
    inflate.inflateGetHeader = inflateGetHeader;
    inflate.inflateSetDictionary = inflateSetDictionary;
    inflate.inflateInfo = "pako inflate (from Nodeca project)";
    return inflate;
  }
  var constants$2;
  var hasRequiredConstants;
  function requireConstants() {
    if (hasRequiredConstants) return constants$2;
    hasRequiredConstants = 1;
    constants$2 = {
      /* Allowed flush values; see deflate() and inflate() below for details */
      Z_NO_FLUSH: 0,
      Z_PARTIAL_FLUSH: 1,
      Z_SYNC_FLUSH: 2,
      Z_FULL_FLUSH: 3,
      Z_FINISH: 4,
      Z_BLOCK: 5,
      Z_TREES: 6,
      /* Return codes for the compression/decompression functions. Negative values
      * are errors, positive values are used for special but normal events.
      */
      Z_OK: 0,
      Z_STREAM_END: 1,
      Z_NEED_DICT: 2,
      Z_ERRNO: -1,
      Z_STREAM_ERROR: -2,
      Z_DATA_ERROR: -3,
      //Z_MEM_ERROR:     -4,
      Z_BUF_ERROR: -5,
      //Z_VERSION_ERROR: -6,
      /* compression levels */
      Z_NO_COMPRESSION: 0,
      Z_BEST_SPEED: 1,
      Z_BEST_COMPRESSION: 9,
      Z_DEFAULT_COMPRESSION: -1,
      Z_FILTERED: 1,
      Z_HUFFMAN_ONLY: 2,
      Z_RLE: 3,
      Z_FIXED: 4,
      Z_DEFAULT_STRATEGY: 0,
      /* Possible values of the data_type field (though see inflate()) */
      Z_BINARY: 0,
      Z_TEXT: 1,
      //Z_ASCII:                1, // = Z_TEXT (deprecated)
      Z_UNKNOWN: 2,
      /* The deflate compression method */
      Z_DEFLATED: 8
      //Z_NULL:                 null // Use -1 or null inline, depending on var type
    };
    return constants$2;
  }
  var hasRequiredBinding;
  function requireBinding() {
    if (hasRequiredBinding) return binding;
    hasRequiredBinding = 1;
    (function(exports2) {
      var assert2 = requireAssert();
      var Zstream = requireZstream();
      var zlib_deflate = requireDeflate();
      var zlib_inflate = requireInflate();
      var constants2 = requireConstants();
      for (var key2 in constants2) {
        exports2[key2] = constants2[key2];
      }
      exports2.NONE = 0;
      exports2.DEFLATE = 1;
      exports2.INFLATE = 2;
      exports2.GZIP = 3;
      exports2.GUNZIP = 4;
      exports2.DEFLATERAW = 5;
      exports2.INFLATERAW = 6;
      exports2.UNZIP = 7;
      var GZIP_HEADER_ID1 = 31;
      var GZIP_HEADER_ID2 = 139;
      function Zlib(mode) {
        if (typeof mode !== "number" || mode < exports2.DEFLATE || mode > exports2.UNZIP) {
          throw new TypeError("Bad argument");
        }
        this.dictionary = null;
        this.err = 0;
        this.flush = 0;
        this.init_done = false;
        this.level = 0;
        this.memLevel = 0;
        this.mode = mode;
        this.strategy = 0;
        this.windowBits = 0;
        this.write_in_progress = false;
        this.pending_close = false;
        this.gzip_id_bytes_read = 0;
      }
      Zlib.prototype.close = function() {
        if (this.write_in_progress) {
          this.pending_close = true;
          return;
        }
        this.pending_close = false;
        assert2(this.init_done, "close before init");
        assert2(this.mode <= exports2.UNZIP);
        if (this.mode === exports2.DEFLATE || this.mode === exports2.GZIP || this.mode === exports2.DEFLATERAW) {
          zlib_deflate.deflateEnd(this.strm);
        } else if (this.mode === exports2.INFLATE || this.mode === exports2.GUNZIP || this.mode === exports2.INFLATERAW || this.mode === exports2.UNZIP) {
          zlib_inflate.inflateEnd(this.strm);
        }
        this.mode = exports2.NONE;
        this.dictionary = null;
      };
      Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
        return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
      };
      Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
        return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
      };
      Zlib.prototype._write = function(async2, flush, input, in_off, in_len, out, out_off, out_len) {
        assert2.equal(arguments.length, 8);
        assert2(this.init_done, "write before init");
        assert2(this.mode !== exports2.NONE, "already finalized");
        assert2.equal(false, this.write_in_progress, "write already in progress");
        assert2.equal(false, this.pending_close, "close is pending");
        this.write_in_progress = true;
        assert2.equal(false, flush === void 0, "must provide flush value");
        this.write_in_progress = true;
        if (flush !== exports2.Z_NO_FLUSH && flush !== exports2.Z_PARTIAL_FLUSH && flush !== exports2.Z_SYNC_FLUSH && flush !== exports2.Z_FULL_FLUSH && flush !== exports2.Z_FINISH && flush !== exports2.Z_BLOCK) {
          throw new Error("Invalid flush value");
        }
        if (input == null) {
          input = Buffer.alloc(0);
          in_len = 0;
          in_off = 0;
        }
        this.strm.avail_in = in_len;
        this.strm.input = input;
        this.strm.next_in = in_off;
        this.strm.avail_out = out_len;
        this.strm.output = out;
        this.strm.next_out = out_off;
        this.flush = flush;
        if (!async2) {
          this._process();
          if (this._checkError()) {
            return this._afterSync();
          }
          return;
        }
        var self2 = this;
        process$1.nextTick(function() {
          self2._process();
          self2._after();
        });
        return this;
      };
      Zlib.prototype._afterSync = function() {
        var avail_out = this.strm.avail_out;
        var avail_in = this.strm.avail_in;
        this.write_in_progress = false;
        return [avail_in, avail_out];
      };
      Zlib.prototype._process = function() {
        var next_expected_header_byte = null;
        switch (this.mode) {
          case exports2.DEFLATE:
          case exports2.GZIP:
          case exports2.DEFLATERAW:
            this.err = zlib_deflate.deflate(this.strm, this.flush);
            break;
          case exports2.UNZIP:
            if (this.strm.avail_in > 0) {
              next_expected_header_byte = this.strm.next_in;
            }
            switch (this.gzip_id_bytes_read) {
              case 0:
                if (next_expected_header_byte === null) {
                  break;
                }
                if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
                  this.gzip_id_bytes_read = 1;
                  next_expected_header_byte++;
                  if (this.strm.avail_in === 1) {
                    break;
                  }
                } else {
                  this.mode = exports2.INFLATE;
                  break;
                }
              case 1:
                if (next_expected_header_byte === null) {
                  break;
                }
                if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
                  this.gzip_id_bytes_read = 2;
                  this.mode = exports2.GUNZIP;
                } else {
                  this.mode = exports2.INFLATE;
                }
                break;
              default:
                throw new Error("invalid number of gzip magic number bytes read");
            }
          case exports2.INFLATE:
          case exports2.GUNZIP:
          case exports2.INFLATERAW:
            this.err = zlib_inflate.inflate(
              this.strm,
              this.flush
              // If data was encoded with dictionary
            );
            if (this.err === exports2.Z_NEED_DICT && this.dictionary) {
              this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);
              if (this.err === exports2.Z_OK) {
                this.err = zlib_inflate.inflate(this.strm, this.flush);
              } else if (this.err === exports2.Z_DATA_ERROR) {
                this.err = exports2.Z_NEED_DICT;
              }
            }
            while (this.strm.avail_in > 0 && this.mode === exports2.GUNZIP && this.err === exports2.Z_STREAM_END && this.strm.next_in[0] !== 0) {
              this.reset();
              this.err = zlib_inflate.inflate(this.strm, this.flush);
            }
            break;
          default:
            throw new Error("Unknown mode " + this.mode);
        }
      };
      Zlib.prototype._checkError = function() {
        switch (this.err) {
          case exports2.Z_OK:
          case exports2.Z_BUF_ERROR:
            if (this.strm.avail_out !== 0 && this.flush === exports2.Z_FINISH) {
              this._error("unexpected end of file");
              return false;
            }
            break;
          case exports2.Z_STREAM_END:
            break;
          case exports2.Z_NEED_DICT:
            if (this.dictionary == null) {
              this._error("Missing dictionary");
            } else {
              this._error("Bad dictionary");
            }
            return false;
          default:
            this._error("Zlib error");
            return false;
        }
        return true;
      };
      Zlib.prototype._after = function() {
        if (!this._checkError()) {
          return;
        }
        var avail_out = this.strm.avail_out;
        var avail_in = this.strm.avail_in;
        this.write_in_progress = false;
        this.callback(avail_in, avail_out);
        if (this.pending_close) {
          this.close();
        }
      };
      Zlib.prototype._error = function(message) {
        if (this.strm.msg) {
          message = this.strm.msg;
        }
        this.onerror(
          message,
          this.err
          // no hope of rescue.
        );
        this.write_in_progress = false;
        if (this.pending_close) {
          this.close();
        }
      };
      Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
        assert2(arguments.length === 4 || arguments.length === 5, "init(windowBits, level, memLevel, strategy, [dictionary])");
        assert2(windowBits >= 8 && windowBits <= 15, "invalid windowBits");
        assert2(level >= -1 && level <= 9, "invalid compression level");
        assert2(memLevel >= 1 && memLevel <= 9, "invalid memlevel");
        assert2(strategy === exports2.Z_FILTERED || strategy === exports2.Z_HUFFMAN_ONLY || strategy === exports2.Z_RLE || strategy === exports2.Z_FIXED || strategy === exports2.Z_DEFAULT_STRATEGY, "invalid strategy");
        this._init(level, windowBits, memLevel, strategy, dictionary);
        this._setDictionary();
      };
      Zlib.prototype.params = function() {
        throw new Error("deflateParams Not supported");
      };
      Zlib.prototype.reset = function() {
        this._reset();
        this._setDictionary();
      };
      Zlib.prototype._init = function(level, windowBits, memLevel, strategy, dictionary) {
        this.level = level;
        this.windowBits = windowBits;
        this.memLevel = memLevel;
        this.strategy = strategy;
        this.flush = exports2.Z_NO_FLUSH;
        this.err = exports2.Z_OK;
        if (this.mode === exports2.GZIP || this.mode === exports2.GUNZIP) {
          this.windowBits += 16;
        }
        if (this.mode === exports2.UNZIP) {
          this.windowBits += 32;
        }
        if (this.mode === exports2.DEFLATERAW || this.mode === exports2.INFLATERAW) {
          this.windowBits = -1 * this.windowBits;
        }
        this.strm = new Zstream();
        switch (this.mode) {
          case exports2.DEFLATE:
          case exports2.GZIP:
          case exports2.DEFLATERAW:
            this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports2.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
            break;
          case exports2.INFLATE:
          case exports2.GUNZIP:
          case exports2.INFLATERAW:
          case exports2.UNZIP:
            this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
            break;
          default:
            throw new Error("Unknown mode " + this.mode);
        }
        if (this.err !== exports2.Z_OK) {
          this._error("Init error");
        }
        this.dictionary = dictionary;
        this.write_in_progress = false;
        this.init_done = true;
      };
      Zlib.prototype._setDictionary = function() {
        if (this.dictionary == null) {
          return;
        }
        this.err = exports2.Z_OK;
        switch (this.mode) {
          case exports2.DEFLATE:
          case exports2.DEFLATERAW:
            this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
            break;
        }
        if (this.err !== exports2.Z_OK) {
          this._error("Failed to set dictionary");
        }
      };
      Zlib.prototype._reset = function() {
        this.err = exports2.Z_OK;
        switch (this.mode) {
          case exports2.DEFLATE:
          case exports2.DEFLATERAW:
          case exports2.GZIP:
            this.err = zlib_deflate.deflateReset(this.strm);
            break;
          case exports2.INFLATE:
          case exports2.INFLATERAW:
          case exports2.GUNZIP:
            this.err = zlib_inflate.inflateReset(this.strm);
            break;
        }
        if (this.err !== exports2.Z_OK) {
          this._error("Failed to reset stream");
        }
      };
      exports2.Zlib = Zlib;
    })(binding);
    return binding;
  }
  var hasRequiredLib;
  function requireLib() {
    if (hasRequiredLib) return lib$2;
    hasRequiredLib = 1;
    (function(exports2) {
      var Buffer2 = require$$0$5.Buffer;
      var Transform = requireStreamBrowserify().Transform;
      var binding2 = requireBinding();
      var util2 = requireUtil$1();
      var assert2 = requireAssert().ok;
      var kMaxLength2 = require$$0$5.kMaxLength;
      var kRangeErrorMessage = "Cannot create final Buffer. It would be larger than 0x" + kMaxLength2.toString(16) + " bytes";
      binding2.Z_MIN_WINDOWBITS = 8;
      binding2.Z_MAX_WINDOWBITS = 15;
      binding2.Z_DEFAULT_WINDOWBITS = 15;
      binding2.Z_MIN_CHUNK = 64;
      binding2.Z_MAX_CHUNK = Infinity;
      binding2.Z_DEFAULT_CHUNK = 16 * 1024;
      binding2.Z_MIN_MEMLEVEL = 1;
      binding2.Z_MAX_MEMLEVEL = 9;
      binding2.Z_DEFAULT_MEMLEVEL = 8;
      binding2.Z_MIN_LEVEL = -1;
      binding2.Z_MAX_LEVEL = 9;
      binding2.Z_DEFAULT_LEVEL = binding2.Z_DEFAULT_COMPRESSION;
      var bkeys = Object.keys(binding2);
      for (var bk = 0; bk < bkeys.length; bk++) {
        var bkey = bkeys[bk];
        if (bkey.match(/^Z/)) {
          Object.defineProperty(exports2, bkey, {
            enumerable: true,
            value: binding2[bkey],
            writable: false
          });
        }
      }
      var codes = {
        Z_OK: binding2.Z_OK,
        Z_STREAM_END: binding2.Z_STREAM_END,
        Z_NEED_DICT: binding2.Z_NEED_DICT,
        Z_ERRNO: binding2.Z_ERRNO,
        Z_STREAM_ERROR: binding2.Z_STREAM_ERROR,
        Z_DATA_ERROR: binding2.Z_DATA_ERROR,
        Z_MEM_ERROR: binding2.Z_MEM_ERROR,
        Z_BUF_ERROR: binding2.Z_BUF_ERROR,
        Z_VERSION_ERROR: binding2.Z_VERSION_ERROR
      };
      var ckeys = Object.keys(codes);
      for (var ck = 0; ck < ckeys.length; ck++) {
        var ckey = ckeys[ck];
        codes[codes[ckey]] = ckey;
      }
      Object.defineProperty(exports2, "codes", {
        enumerable: true,
        value: Object.freeze(codes),
        writable: false
      });
      exports2.Deflate = Deflate;
      exports2.Inflate = Inflate;
      exports2.Gzip = Gzip;
      exports2.Gunzip = Gunzip;
      exports2.DeflateRaw = DeflateRaw;
      exports2.InflateRaw = InflateRaw;
      exports2.Unzip = Unzip;
      exports2.createDeflate = function(o) {
        return new Deflate(o);
      };
      exports2.createInflate = function(o) {
        return new Inflate(o);
      };
      exports2.createDeflateRaw = function(o) {
        return new DeflateRaw(o);
      };
      exports2.createInflateRaw = function(o) {
        return new InflateRaw(o);
      };
      exports2.createGzip = function(o) {
        return new Gzip(o);
      };
      exports2.createGunzip = function(o) {
        return new Gunzip(o);
      };
      exports2.createUnzip = function(o) {
        return new Unzip(o);
      };
      exports2.deflate = function(buffer2, opts, callback) {
        if (typeof opts === "function") {
          callback = opts;
          opts = {};
        }
        return zlibBuffer(new Deflate(opts), buffer2, callback);
      };
      exports2.deflateSync = function(buffer2, opts) {
        return zlibBufferSync(new Deflate(opts), buffer2);
      };
      exports2.gzip = function(buffer2, opts, callback) {
        if (typeof opts === "function") {
          callback = opts;
          opts = {};
        }
        return zlibBuffer(new Gzip(opts), buffer2, callback);
      };
      exports2.gzipSync = function(buffer2, opts) {
        return zlibBufferSync(new Gzip(opts), buffer2);
      };
      exports2.deflateRaw = function(buffer2, opts, callback) {
        if (typeof opts === "function") {
          callback = opts;
          opts = {};
        }
        return zlibBuffer(new DeflateRaw(opts), buffer2, callback);
      };
      exports2.deflateRawSync = function(buffer2, opts) {
        return zlibBufferSync(new DeflateRaw(opts), buffer2);
      };
      exports2.unzip = function(buffer2, opts, callback) {
        if (typeof opts === "function") {
          callback = opts;
          opts = {};
        }
        return zlibBuffer(new Unzip(opts), buffer2, callback);
      };
      exports2.unzipSync = function(buffer2, opts) {
        return zlibBufferSync(new Unzip(opts), buffer2);
      };
      exports2.inflate = function(buffer2, opts, callback) {
        if (typeof opts === "function") {
          callback = opts;
          opts = {};
        }
        return zlibBuffer(new Inflate(opts), buffer2, callback);
      };
      exports2.inflateSync = function(buffer2, opts) {
        return zlibBufferSync(new Inflate(opts), buffer2);
      };
      exports2.gunzip = function(buffer2, opts, callback) {
        if (typeof opts === "function") {
          callback = opts;
          opts = {};
        }
        return zlibBuffer(new Gunzip(opts), buffer2, callback);
      };
      exports2.gunzipSync = function(buffer2, opts) {
        return zlibBufferSync(new Gunzip(opts), buffer2);
      };
      exports2.inflateRaw = function(buffer2, opts, callback) {
        if (typeof opts === "function") {
          callback = opts;
          opts = {};
        }
        return zlibBuffer(new InflateRaw(opts), buffer2, callback);
      };
      exports2.inflateRawSync = function(buffer2, opts) {
        return zlibBufferSync(new InflateRaw(opts), buffer2);
      };
      function zlibBuffer(engine, buffer2, callback) {
        var buffers = [];
        var nread = 0;
        engine.on("error", onError);
        engine.on("end", onEnd);
        engine.end(buffer2);
        flow();
        function flow() {
          var chunk;
          while (null !== (chunk = engine.read())) {
            buffers.push(chunk);
            nread += chunk.length;
          }
          engine.once("readable", flow);
        }
        function onError(err) {
          engine.removeListener("end", onEnd);
          engine.removeListener("readable", flow);
          callback(err);
        }
        function onEnd() {
          var buf;
          var err = null;
          if (nread >= kMaxLength2) {
            err = new RangeError(kRangeErrorMessage);
          } else {
            buf = Buffer2.concat(buffers, nread);
          }
          buffers = [];
          engine.close();
          callback(err, buf);
        }
      }
      function zlibBufferSync(engine, buffer2) {
        if (typeof buffer2 === "string") buffer2 = Buffer2.from(buffer2);
        if (!Buffer2.isBuffer(buffer2)) throw new TypeError("Not a string or buffer");
        var flushFlag = engine._finishFlushFlag;
        return engine._processChunk(buffer2, flushFlag);
      }
      function Deflate(opts) {
        if (!(this instanceof Deflate)) return new Deflate(opts);
        Zlib.call(this, opts, binding2.DEFLATE);
      }
      function Inflate(opts) {
        if (!(this instanceof Inflate)) return new Inflate(opts);
        Zlib.call(this, opts, binding2.INFLATE);
      }
      function Gzip(opts) {
        if (!(this instanceof Gzip)) return new Gzip(opts);
        Zlib.call(this, opts, binding2.GZIP);
      }
      function Gunzip(opts) {
        if (!(this instanceof Gunzip)) return new Gunzip(opts);
        Zlib.call(this, opts, binding2.GUNZIP);
      }
      function DeflateRaw(opts) {
        if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
        Zlib.call(this, opts, binding2.DEFLATERAW);
      }
      function InflateRaw(opts) {
        if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
        Zlib.call(this, opts, binding2.INFLATERAW);
      }
      function Unzip(opts) {
        if (!(this instanceof Unzip)) return new Unzip(opts);
        Zlib.call(this, opts, binding2.UNZIP);
      }
      function isValidFlushFlag(flag) {
        return flag === binding2.Z_NO_FLUSH || flag === binding2.Z_PARTIAL_FLUSH || flag === binding2.Z_SYNC_FLUSH || flag === binding2.Z_FULL_FLUSH || flag === binding2.Z_FINISH || flag === binding2.Z_BLOCK;
      }
      function Zlib(opts, mode) {
        var _this = this;
        this._opts = opts = opts || {};
        this._chunkSize = opts.chunkSize || exports2.Z_DEFAULT_CHUNK;
        Transform.call(this, opts);
        if (opts.flush && !isValidFlushFlag(opts.flush)) {
          throw new Error("Invalid flush flag: " + opts.flush);
        }
        if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
          throw new Error("Invalid flush flag: " + opts.finishFlush);
        }
        this._flushFlag = opts.flush || binding2.Z_NO_FLUSH;
        this._finishFlushFlag = typeof opts.finishFlush !== "undefined" ? opts.finishFlush : binding2.Z_FINISH;
        if (opts.chunkSize) {
          if (opts.chunkSize < exports2.Z_MIN_CHUNK || opts.chunkSize > exports2.Z_MAX_CHUNK) {
            throw new Error("Invalid chunk size: " + opts.chunkSize);
          }
        }
        if (opts.windowBits) {
          if (opts.windowBits < exports2.Z_MIN_WINDOWBITS || opts.windowBits > exports2.Z_MAX_WINDOWBITS) {
            throw new Error("Invalid windowBits: " + opts.windowBits);
          }
        }
        if (opts.level) {
          if (opts.level < exports2.Z_MIN_LEVEL || opts.level > exports2.Z_MAX_LEVEL) {
            throw new Error("Invalid compression level: " + opts.level);
          }
        }
        if (opts.memLevel) {
          if (opts.memLevel < exports2.Z_MIN_MEMLEVEL || opts.memLevel > exports2.Z_MAX_MEMLEVEL) {
            throw new Error("Invalid memLevel: " + opts.memLevel);
          }
        }
        if (opts.strategy) {
          if (opts.strategy != exports2.Z_FILTERED && opts.strategy != exports2.Z_HUFFMAN_ONLY && opts.strategy != exports2.Z_RLE && opts.strategy != exports2.Z_FIXED && opts.strategy != exports2.Z_DEFAULT_STRATEGY) {
            throw new Error("Invalid strategy: " + opts.strategy);
          }
        }
        if (opts.dictionary) {
          if (!Buffer2.isBuffer(opts.dictionary)) {
            throw new Error("Invalid dictionary: it should be a Buffer instance");
          }
        }
        this._handle = new binding2.Zlib(mode);
        var self2 = this;
        this._hadError = false;
        this._handle.onerror = function(message, errno) {
          _close(self2);
          self2._hadError = true;
          var error2 = new Error(message);
          error2.errno = errno;
          error2.code = exports2.codes[errno];
          self2.emit("error", error2);
        };
        var level = exports2.Z_DEFAULT_COMPRESSION;
        if (typeof opts.level === "number") level = opts.level;
        var strategy = exports2.Z_DEFAULT_STRATEGY;
        if (typeof opts.strategy === "number") strategy = opts.strategy;
        this._handle.init(opts.windowBits || exports2.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports2.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);
        this._buffer = Buffer2.allocUnsafe(this._chunkSize);
        this._offset = 0;
        this._level = level;
        this._strategy = strategy;
        this.once("end", this.close);
        Object.defineProperty(this, "_closed", {
          get: function() {
            return !_this._handle;
          },
          configurable: true,
          enumerable: true
        });
      }
      util2.inherits(Zlib, Transform);
      Zlib.prototype.params = function(level, strategy, callback) {
        if (level < exports2.Z_MIN_LEVEL || level > exports2.Z_MAX_LEVEL) {
          throw new RangeError("Invalid compression level: " + level);
        }
        if (strategy != exports2.Z_FILTERED && strategy != exports2.Z_HUFFMAN_ONLY && strategy != exports2.Z_RLE && strategy != exports2.Z_FIXED && strategy != exports2.Z_DEFAULT_STRATEGY) {
          throw new TypeError("Invalid strategy: " + strategy);
        }
        if (this._level !== level || this._strategy !== strategy) {
          var self2 = this;
          this.flush(binding2.Z_SYNC_FLUSH, function() {
            assert2(self2._handle, "zlib binding closed");
            self2._handle.params(level, strategy);
            if (!self2._hadError) {
              self2._level = level;
              self2._strategy = strategy;
              if (callback) callback();
            }
          });
        } else {
          process$1.nextTick(callback);
        }
      };
      Zlib.prototype.reset = function() {
        assert2(this._handle, "zlib binding closed");
        return this._handle.reset();
      };
      Zlib.prototype._flush = function(callback) {
        this._transform(Buffer2.alloc(0), "", callback);
      };
      Zlib.prototype.flush = function(kind, callback) {
        var _this2 = this;
        var ws = this._writableState;
        if (typeof kind === "function" || kind === void 0 && !callback) {
          callback = kind;
          kind = binding2.Z_FULL_FLUSH;
        }
        if (ws.ended) {
          if (callback) process$1.nextTick(callback);
        } else if (ws.ending) {
          if (callback) this.once("end", callback);
        } else if (ws.needDrain) {
          if (callback) {
            this.once("drain", function() {
              return _this2.flush(kind, callback);
            });
          }
        } else {
          this._flushFlag = kind;
          this.write(Buffer2.alloc(0), "", callback);
        }
      };
      Zlib.prototype.close = function(callback) {
        _close(this, callback);
        process$1.nextTick(emitCloseNT, this);
      };
      function _close(engine, callback) {
        if (callback) process$1.nextTick(callback);
        if (!engine._handle) return;
        engine._handle.close();
        engine._handle = null;
      }
      function emitCloseNT(self2) {
        self2.emit("close");
      }
      Zlib.prototype._transform = function(chunk, encoding2, cb) {
        var flushFlag;
        var ws = this._writableState;
        var ending = ws.ending || ws.ended;
        var last = ending && (!chunk || ws.length === chunk.length);
        if (chunk !== null && !Buffer2.isBuffer(chunk)) return cb(new Error("invalid input"));
        if (!this._handle) return cb(new Error("zlib binding closed"));
        if (last) flushFlag = this._finishFlushFlag;
        else {
          flushFlag = this._flushFlag;
          if (chunk.length >= ws.length) {
            this._flushFlag = this._opts.flush || binding2.Z_NO_FLUSH;
          }
        }
        this._processChunk(chunk, flushFlag, cb);
      };
      Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
        var availInBefore = chunk && chunk.length;
        var availOutBefore = this._chunkSize - this._offset;
        var inOff = 0;
        var self2 = this;
        var async2 = typeof cb === "function";
        if (!async2) {
          var buffers = [];
          var nread = 0;
          var error2;
          this.on("error", function(er) {
            error2 = er;
          });
          assert2(this._handle, "zlib binding closed");
          do {
            var res = this._handle.writeSync(
              flushFlag,
              chunk,
              // in
              inOff,
              // in_off
              availInBefore,
              // in_len
              this._buffer,
              // out
              this._offset,
              //out_off
              availOutBefore
            );
          } while (!this._hadError && callback(res[0], res[1]));
          if (this._hadError) {
            throw error2;
          }
          if (nread >= kMaxLength2) {
            _close(this);
            throw new RangeError(kRangeErrorMessage);
          }
          var buf = Buffer2.concat(buffers, nread);
          _close(this);
          return buf;
        }
        assert2(this._handle, "zlib binding closed");
        var req = this._handle.write(
          flushFlag,
          chunk,
          // in
          inOff,
          // in_off
          availInBefore,
          // in_len
          this._buffer,
          // out
          this._offset,
          //out_off
          availOutBefore
        );
        req.buffer = chunk;
        req.callback = callback;
        function callback(availInAfter, availOutAfter) {
          if (this) {
            this.buffer = null;
            this.callback = null;
          }
          if (self2._hadError) return;
          var have = availOutBefore - availOutAfter;
          assert2(have >= 0, "have should not go down");
          if (have > 0) {
            var out = self2._buffer.slice(self2._offset, self2._offset + have);
            self2._offset += have;
            if (async2) {
              self2.push(out);
            } else {
              buffers.push(out);
              nread += out.length;
            }
          }
          if (availOutAfter === 0 || self2._offset >= self2._chunkSize) {
            availOutBefore = self2._chunkSize;
            self2._offset = 0;
            self2._buffer = Buffer2.allocUnsafe(self2._chunkSize);
          }
          if (availOutAfter === 0) {
            inOff += availInBefore - availInAfter;
            availInBefore = availInAfter;
            if (!async2) return true;
            var newReq = self2._handle.write(flushFlag, chunk, inOff, availInBefore, self2._buffer, self2._offset, self2._chunkSize);
            newReq.callback = callback;
            newReq.buffer = chunk;
            return;
          }
          if (!async2) return false;
          cb();
        }
      };
      util2.inherits(Deflate, Zlib);
      util2.inherits(Inflate, Zlib);
      util2.inherits(Gzip, Zlib);
      util2.inherits(Gunzip, Zlib);
      util2.inherits(DeflateRaw, Zlib);
      util2.inherits(InflateRaw, Zlib);
      util2.inherits(Unzip, Zlib);
    })(lib$2);
    return lib$2;
  }
  Object.defineProperty(microFtch, "__esModule", { value: true });
  microFtch.InvalidStatusCodeError = microFtch.InvalidCertError = void 0;
  const DEFAULT_OPT = Object.freeze({
    redirect: true,
    expectStatusCode: 200,
    headers: {},
    full: false,
    keepAlive: true,
    cors: false,
    referrer: false,
    sslAllowSelfSigned: false,
    _redirectCount: 0
  });
  class InvalidCertError extends Error {
    constructor(msg, fingerprint256) {
      super(msg);
      this.fingerprint256 = fingerprint256;
    }
  }
  microFtch.InvalidCertError = InvalidCertError;
  class InvalidStatusCodeError extends Error {
    constructor(statusCode) {
      super(`Request Failed. Status Code: ${statusCode}`);
      this.statusCode = statusCode;
    }
  }
  microFtch.InvalidStatusCodeError = InvalidStatusCodeError;
  function detectType(b, type2) {
    if (!type2 || type2 === "text" || type2 === "json") {
      try {
        let text = new TextDecoder("utf8", { fatal: true }).decode(b);
        if (type2 === "text")
          return text;
        try {
          return JSON.parse(text);
        } catch (err) {
          if (type2 === "json")
            throw err;
          return text;
        }
      } catch (err) {
        if (type2 === "text" || type2 === "json")
          throw err;
      }
    }
    return b;
  }
  let agents = {};
  function fetchNode(url2, _options) {
    var _a2;
    let options = __spreadValues(__spreadValues({}, DEFAULT_OPT), _options);
    const http = requireStreamHttp();
    const https = requireHttpsBrowserify();
    const zlib = requireLib();
    const { promisify } = requireUtil$1();
    const { resolve: urlResolve2 } = require$$4;
    const isSecure = !!/^https/.test(url2);
    let opts = {
      method: options.method || "GET",
      headers: { "Accept-Encoding": "gzip, deflate, br" }
    };
    const compactFP = (s2) => s2.replace(/:| /g, "").toLowerCase();
    if (options.keepAlive) {
      const agentOpt = {
        keepAlive: true,
        keepAliveMsecs: 30 * 1e3,
        maxFreeSockets: 1024,
        maxCachedSessions: 1024
      };
      const agentKey = [
        isSecure,
        isSecure && ((_a2 = options.sslPinnedCertificates) == null ? void 0 : _a2.map((i2) => compactFP(i2)).sort())
      ].join();
      opts.agent = agents[agentKey] || (agents[agentKey] = new (isSecure ? https : http).Agent(agentOpt));
    }
    if (options.type === "json")
      opts.headers["Content-Type"] = "application/json";
    if (options.data) {
      if (!options.method)
        opts.method = "POST";
      opts.body = options.type === "json" ? JSON.stringify(options.data) : options.data;
    }
    opts.headers = __spreadValues(__spreadValues({}, opts.headers), options.headers);
    if (options.sslAllowSelfSigned)
      opts.rejectUnauthorized = false;
    const handleRes = (res) => __async(this, null, function* () {
      const status = res.statusCode;
      if (options.redirect && 300 <= status && status < 400 && res.headers["location"]) {
        if (options._redirectCount == 10)
          throw new Error("Request failed. Too much redirects.");
        options._redirectCount += 1;
        return yield fetchNode(urlResolve2(url2, res.headers["location"]), options);
      }
      if (options.expectStatusCode && status !== options.expectStatusCode) {
        res.resume();
        throw new InvalidStatusCodeError(status);
      }
      let buf = [];
      try {
        for (var iter = __forAwait(res), more, temp, error2; more = !(temp = yield iter.next()).done; more = false) {
          const chunk = temp.value;
          buf.push(chunk);
        }
      } catch (temp) {
        error2 = [temp];
      } finally {
        try {
          more && (temp = iter.return) && (yield temp.call(iter));
        } finally {
          if (error2)
            throw error2[0];
        }
      }
      let bytes2 = Buffer.concat(buf);
      const encoding2 = res.headers["content-encoding"];
      if (encoding2 === "br")
        bytes2 = yield promisify(zlib.brotliDecompress)(bytes2);
      if (encoding2 === "gzip" || encoding2 === "deflate")
        bytes2 = yield promisify(zlib.unzip)(bytes2);
      const body = detectType(bytes2, options.type);
      if (options.full)
        return { headers: res.headers, status, body };
      return body;
    });
    return new Promise((resolve2, reject) => {
      var _a3;
      const handleError = (err) => __async(this, null, function* () {
        if (err && err.code === "DEPTH_ZERO_SELF_SIGNED_CERT") {
          try {
            yield fetchNode(url2, __spreadProps(__spreadValues({}, options), { sslAllowSelfSigned: true, sslPinnedCertificates: [] }));
          } catch (e) {
            if (e && e.fingerprint256) {
              err = new InvalidCertError(`Self-signed SSL certificate: ${e.fingerprint256}`, e.fingerprint256);
            }
          }
        }
        reject(err);
      });
      const req = (isSecure ? https : http).request(url2, opts, (res) => {
        res.on("error", handleError);
        (() => __async(this, null, function* () {
          try {
            resolve2(yield handleRes(res));
          } catch (error2) {
            reject(error2);
          }
        }))();
      });
      req.on("error", handleError);
      const pinned = (_a3 = options.sslPinnedCertificates) == null ? void 0 : _a3.map((i2) => compactFP(i2));
      const mfetchSecureConnect = (socket) => {
        var _a4;
        const fp256 = compactFP(((_a4 = socket.getPeerCertificate()) == null ? void 0 : _a4.fingerprint256) || "");
        if (!fp256 && socket.isSessionReused())
          return;
        if (pinned.includes(fp256))
          return;
        req.emit("error", new InvalidCertError(`Invalid SSL certificate: ${fp256} Expected: ${pinned}`, fp256));
        return req.abort();
      };
      if (options.sslPinnedCertificates) {
        req.on("socket", (socket) => {
          const hasListeners = socket.listeners("secureConnect").map((i2) => (i2.name || "").replace("bound ", "")).includes("mfetchSecureConnect");
          if (hasListeners)
            return;
          socket.on("secureConnect", mfetchSecureConnect.bind(null, socket));
        });
      }
      if (options.keepAlive)
        req.setNoDelay(true);
      if (opts.body)
        req.write(opts.body);
      req.end();
    });
  }
  const SAFE_HEADERS = new Set(["Accept", "Accept-Language", "Content-Language", "Content-Type"].map((i2) => i2.toLowerCase()));
  const FORBIDDEN_HEADERS = new Set([
    "Accept-Charset",
    "Accept-Encoding",
    "Access-Control-Request-Headers",
    "Access-Control-Request-Method",
    "Connection",
    "Content-Length",
    "Cookie",
    "Cookie2",
    "Date",
    "DNT",
    "Expect",
    "Host",
    "Keep-Alive",
    "Origin",
    "Referer",
    "TE",
    "Trailer",
    "Transfer-Encoding",
    "Upgrade",
    "Via"
  ].map((i2) => i2.toLowerCase()));
  function fetchBrowser(url2, _options) {
    return __async(this, null, function* () {
      let options = __spreadValues(__spreadValues({}, DEFAULT_OPT), _options);
      const headers = new Headers();
      if (options.type === "json")
        headers.set("Content-Type", "application/json");
      let parsed = new URL(url2);
      if (parsed.username) {
        const auth = btoa(`${parsed.username}:${parsed.password}`);
        headers.set("Authorization", `Basic ${auth}`);
        parsed.username = "";
        parsed.password = "";
      }
      url2 = "" + parsed;
      for (let k in options.headers) {
        const name2 = k.toLowerCase();
        if (SAFE_HEADERS.has(name2) || options.cors && !FORBIDDEN_HEADERS.has(name2))
          headers.set(k, options.headers[k]);
      }
      let opts = { headers, redirect: options.redirect ? "follow" : "manual" };
      if (!options.referrer)
        opts.referrerPolicy = "no-referrer";
      if (options.cors)
        opts.mode = "cors";
      if (options.data) {
        if (!options.method)
          opts.method = "POST";
        opts.body = options.type === "json" ? JSON.stringify(options.data) : options.data;
      }
      const res = yield fetch(url2, opts);
      if (options.expectStatusCode && res.status !== options.expectStatusCode)
        throw new InvalidStatusCodeError(res.status);
      const body = detectType(new Uint8Array(yield res.arrayBuffer()), options.type);
      if (options.full)
        return { headers: Object.fromEntries(res.headers.entries()), status: res.status, body };
      return body;
    });
  }
  const IS_NODE = !!(typeof process$1 == "object" && process$1.versions && process$1.versions.node && process$1.versions.v8);
  function fetchUrl(url2, options) {
    const fn = IS_NODE ? fetchNode : fetchBrowser;
    return fn(url2, options);
  }
  microFtch.default = fetchUrl;
  Object.defineProperty(provider, "__esModule", { value: true });
  provider.getProvider = provider.fetchFromProvider = void 0;
  const micro_ftch_1 = microFtch;
  const fetchFromProvider = (url2, params) => __async(this, null, function* () {
    const res = yield (0, micro_ftch_1.default)(url2, {
      headers: {
        "content-type": "application/json"
      },
      type: "json",
      data: {
        method: params.method,
        params: params.params,
        jsonrpc: "2.0",
        id: 1
      }
    });
    return res.result;
  });
  provider.fetchFromProvider = fetchFromProvider;
  const getProvider = (provider2) => {
    var _a2;
    if (typeof provider2 === "string") {
      return provider2;
    } else if (((_a2 = provider2 == null ? void 0 : provider2.connection) == null ? void 0 : _a2.url) !== void 0) {
      return provider2.connection.url;
    } else {
      throw new Error("Must provide valid provider URL or Web3Provider");
    }
  };
  provider.getProvider = getProvider;
  (function(exports2) {
    var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toAscii = exports2.stripHexPrefix = exports2.padToEven = exports2.isHexString = exports2.isHexPrefixed = exports2.getKeys = exports2.getBinarySize = exports2.fromUtf8 = exports2.fromAscii = exports2.arrayContainsArray = void 0;
    __exportStar(constants$3, exports2);
    __exportStar(units, exports2);
    __exportStar(account, exports2);
    __exportStar(address$1, exports2);
    __exportStar(withdrawal, exports2);
    __exportStar(signature, exports2);
    __exportStar(bytes$2, exports2);
    __exportStar(types$2, exports2);
    __exportStar(encoding, exports2);
    __exportStar(asyncEventEmitter, exports2);
    var internal_12 = internal;
    Object.defineProperty(exports2, "arrayContainsArray", { enumerable: true, get: function() {
      return internal_12.arrayContainsArray;
    } });
    Object.defineProperty(exports2, "fromAscii", { enumerable: true, get: function() {
      return internal_12.fromAscii;
    } });
    Object.defineProperty(exports2, "fromUtf8", { enumerable: true, get: function() {
      return internal_12.fromUtf8;
    } });
    Object.defineProperty(exports2, "getBinarySize", { enumerable: true, get: function() {
      return internal_12.getBinarySize;
    } });
    Object.defineProperty(exports2, "getKeys", { enumerable: true, get: function() {
      return internal_12.getKeys;
    } });
    Object.defineProperty(exports2, "isHexPrefixed", { enumerable: true, get: function() {
      return internal_12.isHexPrefixed;
    } });
    Object.defineProperty(exports2, "isHexString", { enumerable: true, get: function() {
      return internal_12.isHexString;
    } });
    Object.defineProperty(exports2, "padToEven", { enumerable: true, get: function() {
      return internal_12.padToEven;
    } });
    Object.defineProperty(exports2, "stripHexPrefix", { enumerable: true, get: function() {
      return internal_12.stripHexPrefix;
    } });
    Object.defineProperty(exports2, "toAscii", { enumerable: true, get: function() {
      return internal_12.toAscii;
    } });
    __exportStar(lock, exports2);
    __exportStar(provider, exports2);
  })(dist$4);
  var utils$3 = {};
  var dist$2 = {};
  var assert$2 = {};
  var dist$1 = {};
  var error = {};
  Object.defineProperty(error, "__esModule", { value: true });
  error.StructError = void 0;
  class StructError extends TypeError {
    constructor(failure, failures) {
      let cached;
      const _a2 = failure, { message, explanation } = _a2, rest = __objRest(_a2, ["message", "explanation"]);
      const { path } = failure;
      const cause = path.length === 0 ? message : `At path: ${path.join(".")} -- ${message}`;
      super(explanation != null ? explanation : cause);
      if (explanation !== null && explanation !== void 0) {
        this.cause = cause;
      }
      Object.assign(this, rest);
      this.name = this.constructor.name;
      this.failures = () => {
        return cached != null ? cached : cached = [failure, ...failures()];
      };
    }
  }
  error.StructError = StructError;
  var struct = {};
  var utils$2 = {};
  Object.defineProperty(utils$2, "__esModule", { value: true });
  utils$2.run = utils$2.toFailures = utils$2.toFailure = utils$2.shiftIterator = utils$2.print = utils$2.isPlainObject = utils$2.isObject = void 0;
  function isIterable(value) {
    return isObject(value) && typeof value[Symbol.iterator] === "function";
  }
  function isObject(value) {
    return typeof value === "object" && value !== null;
  }
  utils$2.isObject = isObject;
  function isPlainObject(value) {
    if (Object.prototype.toString.call(value) !== "[object Object]") {
      return false;
    }
    const prototype2 = Object.getPrototypeOf(value);
    return prototype2 === null || prototype2 === Object.prototype;
  }
  utils$2.isPlainObject = isPlainObject;
  function print(value) {
    if (typeof value === "symbol") {
      return value.toString();
    }
    return typeof value === "string" ? JSON.stringify(value) : `${value}`;
  }
  utils$2.print = print;
  function shiftIterator(input) {
    const { done, value } = input.next();
    return done ? void 0 : value;
  }
  utils$2.shiftIterator = shiftIterator;
  function toFailure(result, context, struct2, value) {
    if (result === true) {
      return void 0;
    } else if (result === false) {
      result = {};
    } else if (typeof result === "string") {
      result = { message: result };
    }
    const { path, branch } = context;
    const { type: type2 } = struct2;
    const { refinement, message = `Expected a value of type \`${type2}\`${refinement ? ` with refinement \`${refinement}\`` : ""}, but received: \`${print(value)}\`` } = result;
    return __spreadProps(__spreadValues({
      value,
      type: type2,
      refinement,
      key: path[path.length - 1],
      path,
      branch
    }, result), {
      message
    });
  }
  utils$2.toFailure = toFailure;
  function* toFailures(result, context, struct2, value) {
    if (!isIterable(result)) {
      result = [result];
    }
    for (const validationResult of result) {
      const failure = toFailure(validationResult, context, struct2, value);
      if (failure) {
        yield failure;
      }
    }
  }
  utils$2.toFailures = toFailures;
  function* run(value, struct2, options = {}) {
    const { path = [], branch = [value], coerce: coerce2 = false, mask: mask2 = false } = options;
    const context = { path, branch };
    if (coerce2) {
      value = struct2.coercer(value, context);
      if (mask2 && struct2.type !== "type" && isObject(struct2.schema) && isObject(value) && !Array.isArray(value)) {
        for (const key2 in value) {
          if (struct2.schema[key2] === void 0) {
            delete value[key2];
          }
        }
      }
    }
    let status = "valid";
    for (const failure of struct2.validator(value, context)) {
      failure.explanation = options.message;
      status = "not_valid";
      yield [failure, void 0];
    }
    for (let [innerKey, innerValue, innerStruct] of struct2.entries(value, context)) {
      const iterable = run(innerValue, innerStruct, {
        path: innerKey === void 0 ? path : [...path, innerKey],
        branch: innerKey === void 0 ? branch : [...branch, innerValue],
        coerce: coerce2,
        mask: mask2,
        message: options.message
      });
      for (const result of iterable) {
        if (result[0]) {
          status = result[0].refinement === null || result[0].refinement === void 0 ? "not_valid" : "not_refined";
          yield [result[0], void 0];
        } else if (coerce2) {
          innerValue = result[1];
          if (innerKey === void 0) {
            value = innerValue;
          } else if (value instanceof Map) {
            value.set(innerKey, innerValue);
          } else if (value instanceof Set) {
            value.add(innerValue);
          } else if (isObject(value)) {
            if (innerValue !== void 0 || innerKey in value) {
              value[innerKey] = innerValue;
            }
          }
        }
      }
    }
    if (status !== "not_valid") {
      for (const failure of struct2.refiner(value, context)) {
        failure.explanation = options.message;
        status = "not_refined";
        yield [failure, void 0];
      }
    }
    if (status === "valid") {
      yield [void 0, value];
    }
  }
  utils$2.run = run;
  Object.defineProperty(struct, "__esModule", { value: true });
  struct.validate = struct.is = struct.mask = struct.create = struct.assert = struct.Struct = void 0;
  const error_js_1 = error;
  const utils_js_1$3 = utils$2;
  class Struct {
    constructor(props) {
      const { type: type2, schema, validator: validator2, refiner, coercer = (value) => value, entries = function* () {
      } } = props;
      this.type = type2;
      this.schema = schema;
      this.entries = entries;
      this.coercer = coercer;
      if (validator2) {
        this.validator = (value, context) => {
          const result = validator2(value, context);
          return (0, utils_js_1$3.toFailures)(result, context, this, value);
        };
      } else {
        this.validator = () => [];
      }
      if (refiner) {
        this.refiner = (value, context) => {
          const result = refiner(value, context);
          return (0, utils_js_1$3.toFailures)(result, context, this, value);
        };
      } else {
        this.refiner = () => [];
      }
    }
    /**
     * Assert that a value passes the struct's validation, throwing if it doesn't.
     */
    assert(value, message) {
      return assert$1(value, this, message);
    }
    /**
     * Create a value with the struct's coercion logic, then validate it.
     */
    create(value, message) {
      return create(value, this, message);
    }
    /**
     * Check if a value passes the struct's validation.
     */
    is(value) {
      return is(value, this);
    }
    /**
     * Mask a value, coercing and validating it, but returning only the subset of
     * properties defined by the struct's schema.
     */
    mask(value, message) {
      return mask(value, this, message);
    }
    /**
     * Validate a value with the struct's validation logic, returning a tuple
     * representing the result.
     *
     * You may optionally pass `true` for the `withCoercion` argument to coerce
     * the value before attempting to validate it. If you do, the result will
     * contain the coerced result when successful.
     */
    validate(value, options = {}) {
      return validate(value, this, options);
    }
  }
  struct.Struct = Struct;
  function assert$1(value, struct2, message) {
    const result = validate(value, struct2, { message });
    if (result[0]) {
      throw result[0];
    }
  }
  struct.assert = assert$1;
  function create(value, struct2, message) {
    const result = validate(value, struct2, { coerce: true, message });
    if (result[0]) {
      throw result[0];
    } else {
      return result[1];
    }
  }
  struct.create = create;
  function mask(value, struct2, message) {
    const result = validate(value, struct2, { coerce: true, mask: true, message });
    if (result[0]) {
      throw result[0];
    } else {
      return result[1];
    }
  }
  struct.mask = mask;
  function is(value, struct2) {
    const result = validate(value, struct2);
    return !result[0];
  }
  struct.is = is;
  function validate(value, struct2, options = {}) {
    const tuples = (0, utils_js_1$3.run)(value, struct2, options);
    const tuple2 = (0, utils_js_1$3.shiftIterator)(tuples);
    if (tuple2[0]) {
      const error2 = new error_js_1.StructError(tuple2[0], function* () {
        for (const innerTuple of tuples) {
          if (innerTuple[0]) {
            yield innerTuple[0];
          }
        }
      });
      return [error2, void 0];
    }
    const validatedValue = tuple2[1];
    return [void 0, validatedValue];
  }
  struct.validate = validate;
  var coercions = {};
  var types$1 = {};
  var utilities = {};
  var hasRequiredUtilities;
  function requireUtilities() {
    if (hasRequiredUtilities) return utilities;
    hasRequiredUtilities = 1;
    Object.defineProperty(utilities, "__esModule", { value: true });
    utilities.pick = utilities.partial = utilities.omit = utilities.lazy = utilities.dynamic = utilities.deprecated = utilities.define = utilities.assign = void 0;
    const struct_js_12 = struct;
    const types_js_12 = requireTypes();
    function assign2(...Structs) {
      var _a2;
      const isType = ((_a2 = Structs[0]) == null ? void 0 : _a2.type) === "type";
      const schemas = Structs.map(({ schema: schema2 }) => schema2);
      const schema = Object.assign({}, ...schemas);
      return isType ? (0, types_js_12.type)(schema) : (0, types_js_12.object)(schema);
    }
    utilities.assign = assign2;
    function define(name2, validator2) {
      return new struct_js_12.Struct({ type: name2, schema: null, validator: validator2 });
    }
    utilities.define = define;
    function deprecated(struct2, log2) {
      return new struct_js_12.Struct(__spreadProps(__spreadValues({}, struct2), {
        refiner: (value, ctx) => value === void 0 || struct2.refiner(value, ctx),
        validator(value, ctx) {
          if (value === void 0) {
            return true;
          }
          log2(value, ctx);
          return struct2.validator(value, ctx);
        }
      }));
    }
    utilities.deprecated = deprecated;
    function dynamic(fn) {
      return new struct_js_12.Struct({
        type: "dynamic",
        schema: null,
        *entries(value, ctx) {
          const struct2 = fn(value, ctx);
          yield* __yieldStar(struct2.entries(value, ctx));
        },
        validator(value, ctx) {
          const struct2 = fn(value, ctx);
          return struct2.validator(value, ctx);
        },
        coercer(value, ctx) {
          const struct2 = fn(value, ctx);
          return struct2.coercer(value, ctx);
        },
        refiner(value, ctx) {
          const struct2 = fn(value, ctx);
          return struct2.refiner(value, ctx);
        }
      });
    }
    utilities.dynamic = dynamic;
    function lazy(fn) {
      let struct2;
      return new struct_js_12.Struct({
        type: "lazy",
        schema: null,
        *entries(value, ctx) {
          struct2 != null ? struct2 : struct2 = fn();
          yield* __yieldStar(struct2.entries(value, ctx));
        },
        validator(value, ctx) {
          struct2 != null ? struct2 : struct2 = fn();
          return struct2.validator(value, ctx);
        },
        coercer(value, ctx) {
          struct2 != null ? struct2 : struct2 = fn();
          return struct2.coercer(value, ctx);
        },
        refiner(value, ctx) {
          struct2 != null ? struct2 : struct2 = fn();
          return struct2.refiner(value, ctx);
        }
      });
    }
    utilities.lazy = lazy;
    function omit(struct2, keys) {
      const { schema } = struct2;
      const subschema = __spreadValues({}, schema);
      for (const key2 of keys) {
        delete subschema[key2];
      }
      switch (struct2.type) {
        case "type":
          return (0, types_js_12.type)(subschema);
        default:
          return (0, types_js_12.object)(subschema);
      }
    }
    utilities.omit = omit;
    function partial(struct2) {
      const isStruct = struct2 instanceof struct_js_12.Struct;
      const schema = isStruct ? __spreadValues({}, struct2.schema) : __spreadValues({}, struct2);
      for (const key2 in schema) {
        schema[key2] = (0, types_js_12.optional)(schema[key2]);
      }
      if (isStruct && struct2.type === "type") {
        return (0, types_js_12.type)(schema);
      }
      return (0, types_js_12.object)(schema);
    }
    utilities.partial = partial;
    function pick(struct2, keys) {
      const { schema } = struct2;
      const subschema = {};
      for (const key2 of keys) {
        subschema[key2] = schema[key2];
      }
      switch (struct2.type) {
        case "type":
          return (0, types_js_12.type)(subschema);
        default:
          return (0, types_js_12.object)(subschema);
      }
    }
    utilities.pick = pick;
    return utilities;
  }
  var hasRequiredTypes;
  function requireTypes() {
    if (hasRequiredTypes) return types$1;
    hasRequiredTypes = 1;
    Object.defineProperty(types$1, "__esModule", { value: true });
    types$1.unknown = types$1.union = types$1.type = types$1.tuple = types$1.string = types$1.set = types$1.regexp = types$1.record = types$1.optional = types$1.object = types$1.number = types$1.nullable = types$1.never = types$1.map = types$1.literal = types$1.intersection = types$1.integer = types$1.instance = types$1.func = types$1.enums = types$1.date = types$1.boolean = types$1.bigint = types$1.array = types$1.any = void 0;
    const struct_js_12 = struct;
    const utils_js_12 = utils$2;
    const utilities_js_1 = requireUtilities();
    function any() {
      return (0, utilities_js_1.define)("any", () => true);
    }
    types$1.any = any;
    function array2(Element) {
      return new struct_js_12.Struct({
        type: "array",
        schema: Element,
        *entries(value) {
          if (Element && Array.isArray(value)) {
            for (const [index, arrayValue] of value.entries()) {
              yield [index, arrayValue, Element];
            }
          }
        },
        coercer(value) {
          return Array.isArray(value) ? value.slice() : value;
        },
        validator(value) {
          return Array.isArray(value) || `Expected an array value, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.array = array2;
    function bigint() {
      return (0, utilities_js_1.define)("bigint", (value) => {
        return typeof value === "bigint";
      });
    }
    types$1.bigint = bigint;
    function boolean() {
      return (0, utilities_js_1.define)("boolean", (value) => {
        return typeof value === "boolean";
      });
    }
    types$1.boolean = boolean;
    function date() {
      return (0, utilities_js_1.define)("date", (value) => {
        return value instanceof Date && !isNaN(value.getTime()) || `Expected a valid \`Date\` object, but received: ${(0, utils_js_12.print)(value)}`;
      });
    }
    types$1.date = date;
    function enums(values) {
      const schema = {};
      const description2 = values.map((value) => (0, utils_js_12.print)(value)).join();
      for (const key2 of values) {
        schema[key2] = key2;
      }
      return new struct_js_12.Struct({
        type: "enums",
        schema,
        validator(value) {
          return values.includes(value) || `Expected one of \`${description2}\`, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.enums = enums;
    function func() {
      return (0, utilities_js_1.define)("func", (value) => {
        return typeof value === "function" || `Expected a function, but received: ${(0, utils_js_12.print)(value)}`;
      });
    }
    types$1.func = func;
    function instance(Class) {
      return (0, utilities_js_1.define)("instance", (value) => {
        return value instanceof Class || `Expected a \`${Class.name}\` instance, but received: ${(0, utils_js_12.print)(value)}`;
      });
    }
    types$1.instance = instance;
    function integer() {
      return (0, utilities_js_1.define)("integer", (value) => {
        return typeof value === "number" && !isNaN(value) && Number.isInteger(value) || `Expected an integer, but received: ${(0, utils_js_12.print)(value)}`;
      });
    }
    types$1.integer = integer;
    function intersection(Structs) {
      return new struct_js_12.Struct({
        type: "intersection",
        schema: null,
        *entries(value, context) {
          for (const { entries } of Structs) {
            yield* __yieldStar(entries(value, context));
          }
        },
        *validator(value, context) {
          for (const { validator: validator2 } of Structs) {
            yield* __yieldStar(validator2(value, context));
          }
        },
        *refiner(value, context) {
          for (const { refiner } of Structs) {
            yield* __yieldStar(refiner(value, context));
          }
        }
      });
    }
    types$1.intersection = intersection;
    function literal(constant) {
      const description2 = (0, utils_js_12.print)(constant);
      const valueType = typeof constant;
      return new struct_js_12.Struct({
        type: "literal",
        schema: valueType === "string" || valueType === "number" || valueType === "boolean" ? constant : null,
        validator(value) {
          return value === constant || `Expected the literal \`${description2}\`, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.literal = literal;
    function map(Key, Value) {
      return new struct_js_12.Struct({
        type: "map",
        schema: null,
        *entries(value) {
          if (Key && Value && value instanceof Map) {
            for (const [mapKey, mapValue] of value.entries()) {
              yield [mapKey, mapKey, Key];
              yield [mapKey, mapValue, Value];
            }
          }
        },
        coercer(value) {
          return value instanceof Map ? new Map(value) : value;
        },
        validator(value) {
          return value instanceof Map || `Expected a \`Map\` object, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.map = map;
    function never() {
      return (0, utilities_js_1.define)("never", () => false);
    }
    types$1.never = never;
    function nullable(struct2) {
      return new struct_js_12.Struct(__spreadProps(__spreadValues({}, struct2), {
        validator: (value, ctx) => value === null || struct2.validator(value, ctx),
        refiner: (value, ctx) => value === null || struct2.refiner(value, ctx)
      }));
    }
    types$1.nullable = nullable;
    function number2() {
      return (0, utilities_js_1.define)("number", (value) => {
        return typeof value === "number" && !isNaN(value) || `Expected a number, but received: ${(0, utils_js_12.print)(value)}`;
      });
    }
    types$1.number = number2;
    function object(schema) {
      const knowns = schema ? Object.keys(schema) : [];
      const Never = never();
      return new struct_js_12.Struct({
        type: "object",
        schema: schema != null ? schema : null,
        *entries(value) {
          if (schema && (0, utils_js_12.isObject)(value)) {
            const unknowns = new Set(Object.keys(value));
            for (const key2 of knowns) {
              unknowns.delete(key2);
              yield [key2, value[key2], schema[key2]];
            }
            for (const key2 of unknowns) {
              yield [key2, value[key2], Never];
            }
          }
        },
        validator(value) {
          return (0, utils_js_12.isObject)(value) || `Expected an object, but received: ${(0, utils_js_12.print)(value)}`;
        },
        coercer(value) {
          return (0, utils_js_12.isObject)(value) ? __spreadValues({}, value) : value;
        }
      });
    }
    types$1.object = object;
    function optional(struct2) {
      return new struct_js_12.Struct(__spreadProps(__spreadValues({}, struct2), {
        validator: (value, ctx) => value === void 0 || struct2.validator(value, ctx),
        refiner: (value, ctx) => value === void 0 || struct2.refiner(value, ctx)
      }));
    }
    types$1.optional = optional;
    function record(Key, Value) {
      return new struct_js_12.Struct({
        type: "record",
        schema: null,
        *entries(value) {
          if ((0, utils_js_12.isObject)(value)) {
            for (const objectKey in value) {
              const objectValue = value[objectKey];
              yield [objectKey, objectKey, Key];
              yield [objectKey, objectValue, Value];
            }
          }
        },
        validator(value) {
          return (0, utils_js_12.isObject)(value) || `Expected an object, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.record = record;
    function regexp() {
      return (0, utilities_js_1.define)("regexp", (value) => {
        return value instanceof RegExp;
      });
    }
    types$1.regexp = regexp;
    function set2(Element) {
      return new struct_js_12.Struct({
        type: "set",
        schema: null,
        *entries(value) {
          if (Element && value instanceof Set) {
            for (const setValue of value) {
              yield [setValue, setValue, Element];
            }
          }
        },
        coercer(value) {
          return value instanceof Set ? new Set(value) : value;
        },
        validator(value) {
          return value instanceof Set || `Expected a \`Set\` object, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.set = set2;
    function string2() {
      return (0, utilities_js_1.define)("string", (value) => {
        return typeof value === "string" || `Expected a string, but received: ${(0, utils_js_12.print)(value)}`;
      });
    }
    types$1.string = string2;
    function tuple2(Structs) {
      const Never = never();
      return new struct_js_12.Struct({
        type: "tuple",
        schema: null,
        *entries(value) {
          if (Array.isArray(value)) {
            const length = Math.max(Structs.length, value.length);
            for (let i2 = 0; i2 < length; i2++) {
              yield [i2, value[i2], Structs[i2] || Never];
            }
          }
        },
        validator(value) {
          return Array.isArray(value) || `Expected an array, but received: ${(0, utils_js_12.print)(value)}`;
        }
      });
    }
    types$1.tuple = tuple2;
    function type2(schema) {
      const keys = Object.keys(schema);
      return new struct_js_12.Struct({
        type: "type",
        schema,
        *entries(value) {
          if ((0, utils_js_12.isObject)(value)) {
            for (const k of keys) {
              yield [k, value[k], schema[k]];
            }
          }
        },
        validator(value) {
          return (0, utils_js_12.isObject)(value) || `Expected an object, but received: ${(0, utils_js_12.print)(value)}`;
        },
        coercer(value) {
          return (0, utils_js_12.isObject)(value) ? __spreadValues({}, value) : value;
        }
      });
    }
    types$1.type = type2;
    function union(Structs) {
      const description2 = Structs.map((struct2) => struct2.type).join(" | ");
      return new struct_js_12.Struct({
        type: "union",
        schema: null,
        coercer(value) {
          for (const InnerStruct of Structs) {
            const [error2, coerced] = InnerStruct.validate(value, { coerce: true });
            if (!error2) {
              return coerced;
            }
          }
          return value;
        },
        validator(value, ctx) {
          const failures = [];
          for (const InnerStruct of Structs) {
            const [...tuples] = (0, utils_js_12.run)(value, InnerStruct, ctx);
            const [first] = tuples;
            if (!(first == null ? void 0 : first[0])) {
              return [];
            }
            for (const [failure] of tuples) {
              if (failure) {
                failures.push(failure);
              }
            }
          }
          return [
            `Expected the value to satisfy a union of \`${description2}\`, but received: ${(0, utils_js_12.print)(value)}`,
            ...failures
          ];
        }
      });
    }
    types$1.union = union;
    function unknown() {
      return (0, utilities_js_1.define)("unknown", () => true);
    }
    types$1.unknown = unknown;
    return types$1;
  }
  Object.defineProperty(coercions, "__esModule", { value: true });
  coercions.trimmed = coercions.defaulted = coercions.coerce = void 0;
  const struct_js_1$1 = struct;
  const utils_js_1$2 = utils$2;
  const types_js_1 = requireTypes();
  function coerce$2(struct2, condition, coercer) {
    return new struct_js_1$1.Struct(__spreadProps(__spreadValues({}, struct2), {
      coercer: (value, ctx) => {
        return (0, struct_js_1$1.is)(value, condition) ? struct2.coercer(coercer(value, ctx), ctx) : struct2.coercer(value, ctx);
      }
    }));
  }
  coercions.coerce = coerce$2;
  function defaulted(struct2, fallback, options = {}) {
    return coerce$2(struct2, (0, types_js_1.unknown)(), (value) => {
      const result = typeof fallback === "function" ? fallback() : fallback;
      if (value === void 0) {
        return result;
      }
      if (!options.strict && (0, utils_js_1$2.isPlainObject)(value) && (0, utils_js_1$2.isPlainObject)(result)) {
        const ret = __spreadValues({}, value);
        let changed = false;
        for (const key2 in result) {
          if (ret[key2] === void 0) {
            ret[key2] = result[key2];
            changed = true;
          }
        }
        if (changed) {
          return ret;
        }
      }
      return value;
    });
  }
  coercions.defaulted = defaulted;
  function trimmed(struct2) {
    return coerce$2(struct2, (0, types_js_1.string)(), (value) => value.trim());
  }
  coercions.trimmed = trimmed;
  var refinements = {};
  Object.defineProperty(refinements, "__esModule", { value: true });
  refinements.refine = refinements.size = refinements.pattern = refinements.nonempty = refinements.min = refinements.max = refinements.empty = void 0;
  const struct_js_1 = struct;
  const utils_js_1$1 = utils$2;
  function empty(struct2) {
    return refine(struct2, "empty", (value) => {
      const size2 = getSize(value);
      return size2 === 0 || `Expected an empty ${struct2.type} but received one with a size of \`${size2}\``;
    });
  }
  refinements.empty = empty;
  function getSize(value) {
    if (value instanceof Map || value instanceof Set) {
      return value.size;
    }
    return value.length;
  }
  function max(struct2, threshold, options = {}) {
    const { exclusive } = options;
    return refine(struct2, "max", (value) => {
      return exclusive ? value < threshold : value <= threshold || `Expected a ${struct2.type} less than ${exclusive ? "" : "or equal to "}${threshold} but received \`${value}\``;
    });
  }
  refinements.max = max;
  function min(struct2, threshold, options = {}) {
    const { exclusive } = options;
    return refine(struct2, "min", (value) => {
      return exclusive ? value > threshold : value >= threshold || `Expected a ${struct2.type} greater than ${exclusive ? "" : "or equal to "}${threshold} but received \`${value}\``;
    });
  }
  refinements.min = min;
  function nonempty(struct2) {
    return refine(struct2, "nonempty", (value) => {
      const size2 = getSize(value);
      return size2 > 0 || `Expected a nonempty ${struct2.type} but received an empty one`;
    });
  }
  refinements.nonempty = nonempty;
  function pattern(struct2, regexp) {
    return refine(struct2, "pattern", (value) => {
      return regexp.test(value) || `Expected a ${struct2.type} matching \`/${regexp.source}/\` but received "${value}"`;
    });
  }
  refinements.pattern = pattern;
  function size(struct2, minimum, maximum = minimum) {
    const expected = `Expected a ${struct2.type}`;
    const of = minimum === maximum ? `of \`${minimum}\`` : `between \`${minimum}\` and \`${maximum}\``;
    return refine(struct2, "size", (value) => {
      if (typeof value === "number" || value instanceof Date) {
        return minimum <= value && value <= maximum || // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        `${expected} ${of} but received \`${value}\``;
      } else if (value instanceof Map || value instanceof Set) {
        const { size: size2 } = value;
        return minimum <= size2 && size2 <= maximum || `${expected} with a size ${of} but received one with a size of \`${size2}\``;
      }
      const { length } = value;
      return minimum <= length && length <= maximum || `${expected} with a length ${of} but received one with a length of \`${length}\``;
    });
  }
  refinements.size = size;
  function refine(struct2, name2, refiner) {
    return new struct_js_1.Struct(__spreadProps(__spreadValues({}, struct2), {
      *refiner(value, ctx) {
        yield* __yieldStar(struct2.refiner(value, ctx));
        const result = refiner(value, ctx);
        const failures = (0, utils_js_1$1.toFailures)(result, ctx, struct2, value);
        for (const failure of failures) {
          yield __spreadProps(__spreadValues({}, failure), { refinement: name2 });
        }
      }
    }));
  }
  refinements.refine = refine;
  (function(exports2) {
    var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(error, exports2);
    __exportStar(struct, exports2);
    __exportStar(coercions, exports2);
    __exportStar(refinements, exports2);
    __exportStar(requireTypes(), exports2);
    __exportStar(requireUtilities(), exports2);
  })(dist$1);
  var errors$1 = {};
  let ErrorWithCause$1 = class ErrorWithCause2 extends Error {
    /**
     * @param {string} message
     * @param {{ cause?: T }} options
     */
    constructor(message, { cause } = {}) {
      super(message);
      this.name = ErrorWithCause2.name;
      if (cause) {
        this.cause = cause;
      }
      this.message = message;
    }
  };
  const errorWithCause = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    ErrorWithCause: ErrorWithCause$1
  }, Symbol.toStringTag, { value: "Module" }));
  const require$$0 = /* @__PURE__ */ getAugmentedNamespace(errorWithCause);
  const findCauseByReference$1 = (err, reference) => {
    if (!err || !reference) return;
    if (!(err instanceof Error)) return;
    if (!(reference.prototype instanceof Error) && // @ts-ignore
    reference !== Error) return;
    const seen = /* @__PURE__ */ new Set();
    let currentErr = err;
    while (currentErr && !seen.has(currentErr)) {
      seen.add(currentErr);
      if (currentErr instanceof reference) {
        return currentErr;
      }
      currentErr = getErrorCause$1(currentErr);
    }
  };
  const getErrorCause$1 = (err) => {
    if (!err || typeof err !== "object" || !("cause" in err)) {
      return;
    }
    if (typeof err.cause === "function") {
      const causeResult = err.cause();
      return causeResult instanceof Error ? causeResult : void 0;
    } else {
      return err.cause instanceof Error ? err.cause : void 0;
    }
  };
  const _stackWithCauses = (err, seen) => {
    if (!(err instanceof Error)) return "";
    const stack = err.stack || "";
    if (seen.has(err)) {
      return stack + "\ncauses have become circular...";
    }
    const cause = getErrorCause$1(err);
    if (cause) {
      seen.add(err);
      return stack + "\ncaused by: " + _stackWithCauses(cause, seen);
    } else {
      return stack;
    }
  };
  const stackWithCauses$1 = (err) => _stackWithCauses(err, /* @__PURE__ */ new Set());
  const _messageWithCauses = (err, seen, skip) => {
    if (!(err instanceof Error)) return "";
    const message = skip ? "" : err.message || "";
    if (seen.has(err)) {
      return message + ": ...";
    }
    const cause = getErrorCause$1(err);
    if (cause) {
      seen.add(err);
      const skipIfVErrorStyleCause = "cause" in err && typeof err.cause === "function";
      return message + (skipIfVErrorStyleCause ? "" : ": ") + _messageWithCauses(cause, seen, skipIfVErrorStyleCause);
    } else {
      return message;
    }
  };
  const messageWithCauses$1 = (err) => _messageWithCauses(err, /* @__PURE__ */ new Set());
  const helpers = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    findCauseByReference: findCauseByReference$1,
    getErrorCause: getErrorCause$1,
    messageWithCauses: messageWithCauses$1,
    stackWithCauses: stackWithCauses$1
  }, Symbol.toStringTag, { value: "Module" }));
  const require$$1 = /* @__PURE__ */ getAugmentedNamespace(helpers);
  const { ErrorWithCause } = require$$0;
  const {
    // linemod-replace-with: export {
    findCauseByReference,
    getErrorCause,
    messageWithCauses,
    stackWithCauses
  } = require$$1;
  var ponyCause = {
    // linemod-remove
    ErrorWithCause,
    // linemod-remove
    findCauseByReference,
    // linemod-remove
    getErrorCause,
    // linemod-remove
    stackWithCauses,
    // linemod-remove
    messageWithCauses
    // linemod-remove
  };
  var misc = {};
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.calculateNumberSize = exports2.calculateStringSize = exports2.isASCII = exports2.isPlainObject = exports2.ESCAPE_CHARACTERS_REGEXP = exports2.JsonSize = exports2.getKnownPropertyNames = exports2.hasProperty = exports2.isObject = exports2.isNullOrUndefined = exports2.isNonEmptyArray = void 0;
    function isNonEmptyArray(value) {
      return Array.isArray(value) && value.length > 0;
    }
    exports2.isNonEmptyArray = isNonEmptyArray;
    function isNullOrUndefined(value) {
      return value === null || value === void 0;
    }
    exports2.isNullOrUndefined = isNullOrUndefined;
    function isObject2(value) {
      return Boolean(value) && typeof value === "object" && !Array.isArray(value);
    }
    exports2.isObject = isObject2;
    const hasProperty = (objectToCheck, name2) => Object.hasOwnProperty.call(objectToCheck, name2);
    exports2.hasProperty = hasProperty;
    function getKnownPropertyNames(object) {
      return Object.getOwnPropertyNames(object);
    }
    exports2.getKnownPropertyNames = getKnownPropertyNames;
    (function(JsonSize) {
      JsonSize[JsonSize["Null"] = 4] = "Null";
      JsonSize[JsonSize["Comma"] = 1] = "Comma";
      JsonSize[JsonSize["Wrapper"] = 1] = "Wrapper";
      JsonSize[JsonSize["True"] = 4] = "True";
      JsonSize[JsonSize["False"] = 5] = "False";
      JsonSize[JsonSize["Quote"] = 1] = "Quote";
      JsonSize[JsonSize["Colon"] = 1] = "Colon";
      JsonSize[JsonSize["Date"] = 24] = "Date";
    })(exports2.JsonSize || (exports2.JsonSize = {}));
    exports2.ESCAPE_CHARACTERS_REGEXP = /"|\\|\n|\r|\t/gu;
    function isPlainObject2(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      try {
        let proto = value;
        while (Object.getPrototypeOf(proto) !== null) {
          proto = Object.getPrototypeOf(proto);
        }
        return Object.getPrototypeOf(value) === proto;
      } catch (_) {
        return false;
      }
    }
    exports2.isPlainObject = isPlainObject2;
    function isASCII(character) {
      return character.charCodeAt(0) <= 127;
    }
    exports2.isASCII = isASCII;
    function calculateStringSize(value) {
      var _a2;
      const size2 = value.split("").reduce((total, character) => {
        if (isASCII(character)) {
          return total + 1;
        }
        return total + 2;
      }, 0);
      return size2 + ((_a2 = value.match(exports2.ESCAPE_CHARACTERS_REGEXP)) != null ? _a2 : []).length;
    }
    exports2.calculateStringSize = calculateStringSize;
    function calculateNumberSize(value) {
      return value.toString().length;
    }
    exports2.calculateNumberSize = calculateNumberSize;
  })(misc);
  Object.defineProperty(errors$1, "__esModule", { value: true });
  errors$1.wrapError = errors$1.getErrorMessage = errors$1.isErrorWithStack = errors$1.isErrorWithMessage = errors$1.isErrorWithCode = void 0;
  const pony_cause_1 = ponyCause;
  const misc_1 = misc;
  function isError(error2) {
    return error2 instanceof Error || (0, misc_1.isObject)(error2) && error2.constructor.name === "Error";
  }
  function isErrorWithCode(error2) {
    return typeof error2 === "object" && error2 !== null && "code" in error2;
  }
  errors$1.isErrorWithCode = isErrorWithCode;
  function isErrorWithMessage(error2) {
    return typeof error2 === "object" && error2 !== null && "message" in error2;
  }
  errors$1.isErrorWithMessage = isErrorWithMessage;
  function isErrorWithStack(error2) {
    return typeof error2 === "object" && error2 !== null && "stack" in error2;
  }
  errors$1.isErrorWithStack = isErrorWithStack;
  function getErrorMessage(error2) {
    if (isErrorWithMessage(error2) && typeof error2.message === "string") {
      return error2.message;
    }
    if ((0, misc_1.isNullOrUndefined)(error2)) {
      return "";
    }
    return String(error2);
  }
  errors$1.getErrorMessage = getErrorMessage;
  function wrapError(originalError, message) {
    if (isError(originalError)) {
      let error2;
      if (Error.length === 2) {
        error2 = new Error(message, { cause: originalError });
      } else {
        error2 = new pony_cause_1.ErrorWithCause(message, { cause: originalError });
      }
      if (isErrorWithCode(originalError)) {
        error2.code = originalError.code;
      }
      return error2;
    }
    if (message.length > 0) {
      return new Error(`${String(originalError)}: ${message}`);
    }
    return new Error(String(originalError));
  }
  errors$1.wrapError = wrapError;
  Object.defineProperty(assert$2, "__esModule", { value: true });
  assert$2.assertExhaustive = assert$2.assertStruct = assert$2.assert = assert$2.AssertionError = void 0;
  const superstruct_1$4 = dist$1;
  const errors_1 = errors$1;
  function isConstructable(fn) {
    var _a2, _b;
    return Boolean(typeof ((_b = (_a2 = fn == null ? void 0 : fn.prototype) == null ? void 0 : _a2.constructor) == null ? void 0 : _b.name) === "string");
  }
  function getErrorMessageWithoutTrailingPeriod(error2) {
    return (0, errors_1.getErrorMessage)(error2).replace(/\.$/u, "");
  }
  function getError(ErrorWrapper, message) {
    if (isConstructable(ErrorWrapper)) {
      return new ErrorWrapper({
        message
      });
    }
    return ErrorWrapper({
      message
    });
  }
  class AssertionError extends Error {
    constructor(options) {
      super(options.message);
      this.code = "ERR_ASSERTION";
    }
  }
  assert$2.AssertionError = AssertionError;
  function assert(value, message = "Assertion failed.", ErrorWrapper = AssertionError) {
    if (!value) {
      if (message instanceof Error) {
        throw message;
      }
      throw getError(ErrorWrapper, message);
    }
  }
  assert$2.assert = assert;
  function assertStruct(value, struct2, errorPrefix = "Assertion failed", ErrorWrapper = AssertionError) {
    try {
      (0, superstruct_1$4.assert)(value, struct2);
    } catch (error2) {
      throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessageWithoutTrailingPeriod(error2)}.`);
    }
  }
  assert$2.assertStruct = assertStruct;
  function assertExhaustive(_object) {
    throw new Error("Invalid branch reached. Should be detected during compilation.");
  }
  assert$2.assertExhaustive = assertExhaustive;
  var base64$1 = {};
  Object.defineProperty(base64$1, "__esModule", { value: true });
  base64$1.base64 = void 0;
  const superstruct_1$3 = dist$1;
  const assert_1$2 = assert$2;
  const base64 = (struct2, options = {}) => {
    var _a2, _b;
    const paddingRequired = (_a2 = options.paddingRequired) != null ? _a2 : false;
    const characterSet = (_b = options.characterSet) != null ? _b : "base64";
    let letters;
    if (characterSet === "base64") {
      letters = String.raw`[A-Za-z0-9+\/]`;
    } else {
      (0, assert_1$2.assert)(characterSet === "base64url");
      letters = String.raw`[-_A-Za-z0-9]`;
    }
    let re2;
    if (paddingRequired) {
      re2 = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, "u");
    } else {
      re2 = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, "u");
    }
    return (0, superstruct_1$3.pattern)(struct2, re2);
  };
  base64$1.base64 = base64;
  var bytes$1 = {};
  var lib$1 = {};
  (function(exports2) {
    /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bytes = exports2.stringToBytes = exports2.str = exports2.bytesToString = exports2.hex = exports2.utf8 = exports2.bech32m = exports2.bech32 = exports2.base58check = exports2.createBase58check = exports2.base58xmr = exports2.base58xrp = exports2.base58flickr = exports2.base58 = exports2.base64urlnopad = exports2.base64url = exports2.base64nopad = exports2.base64 = exports2.base32crockford = exports2.base32hexnopad = exports2.base32hex = exports2.base32nopad = exports2.base32 = exports2.base16 = exports2.utils = exports2.assertNumber = void 0;
    function isBytes2(a) {
      return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
    }
    function isArrayOf(isString2, arr) {
      if (!Array.isArray(arr))
        return false;
      if (arr.length === 0)
        return true;
      if (isString2) {
        return arr.every((item) => typeof item === "string");
      } else {
        return arr.every((item) => Number.isSafeInteger(item));
      }
    }
    function afn(input) {
      if (typeof input !== "function")
        throw new Error("function expected");
      return true;
    }
    function astr(label, input) {
      if (typeof input !== "string")
        throw new Error(`${label}: string expected`);
      return true;
    }
    function anumber2(n) {
      if (!Number.isSafeInteger(n))
        throw new Error(`invalid integer: ${n}`);
    }
    exports2.assertNumber = anumber2;
    function aArr(input) {
      if (!Array.isArray(input))
        throw new Error("array expected");
    }
    function astrArr(label, input) {
      if (!isArrayOf(true, input))
        throw new Error(`${label}: array of strings expected`);
    }
    function anumArr(label, input) {
      if (!isArrayOf(false, input))
        throw new Error(`${label}: array of numbers expected`);
    }
    // @__NO_SIDE_EFFECTS__
    function chain(...args) {
      const id2 = (a) => a;
      const wrap = (a, b) => (c) => a(b(c));
      const encode2 = args.map((x) => x.encode).reduceRight(wrap, id2);
      const decode2 = args.map((x) => x.decode).reduce(wrap, id2);
      return { encode: encode2, decode: decode2 };
    }
    // @__NO_SIDE_EFFECTS__
    function alphabet(letters) {
      const lettersA = typeof letters === "string" ? letters.split("") : letters;
      const len2 = lettersA.length;
      astrArr("alphabet", lettersA);
      const indexes = new Map(lettersA.map((l, i2) => [l, i2]));
      return {
        encode: (digits) => {
          aArr(digits);
          return digits.map((i2) => {
            if (!Number.isSafeInteger(i2) || i2 < 0 || i2 >= len2)
              throw new Error(`alphabet.encode: digit index outside alphabet "${i2}". Allowed: ${letters}`);
            return lettersA[i2];
          });
        },
        decode: (input) => {
          aArr(input);
          return input.map((letter) => {
            astr("alphabet.decode", letter);
            const i2 = indexes.get(letter);
            if (i2 === void 0)
              throw new Error(`Unknown letter: "${letter}". Allowed: ${letters}`);
            return i2;
          });
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function join(separator = "") {
      astr("join", separator);
      return {
        encode: (from) => {
          astrArr("join.decode", from);
          return from.join(separator);
        },
        decode: (to) => {
          astr("join.decode", to);
          return to.split(separator);
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function padding(bits, chr = "=") {
      anumber2(bits);
      astr("padding", chr);
      return {
        encode(data) {
          astrArr("padding.encode", data);
          while (data.length * bits % 8)
            data.push(chr);
          return data;
        },
        decode(input) {
          astrArr("padding.decode", input);
          let end = input.length;
          if (end * bits % 8)
            throw new Error("padding: invalid, string should have whole number of bytes");
          for (; end > 0 && input[end - 1] === chr; end--) {
            const last = end - 1;
            const byte = last * bits;
            if (byte % 8 === 0)
              throw new Error("padding: invalid, string has too much padding");
          }
          return input.slice(0, end);
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function normalize2(fn) {
      afn(fn);
      return { encode: (from) => from, decode: (to) => fn(to) };
    }
    function convertRadix(data, from, to) {
      if (from < 2)
        throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);
      if (to < 2)
        throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);
      aArr(data);
      if (!data.length)
        return [];
      let pos = 0;
      const res = [];
      const digits = Array.from(data, (d) => {
        anumber2(d);
        if (d < 0 || d >= from)
          throw new Error(`invalid integer: ${d}`);
        return d;
      });
      const dlen = digits.length;
      while (true) {
        let carry = 0;
        let done = true;
        for (let i2 = pos; i2 < dlen; i2++) {
          const digit = digits[i2];
          const fromCarry = from * carry;
          const digitBase = fromCarry + digit;
          if (!Number.isSafeInteger(digitBase) || fromCarry / from !== carry || digitBase - digit !== fromCarry) {
            throw new Error("convertRadix: carry overflow");
          }
          const div = digitBase / to;
          carry = digitBase % to;
          const rounded = Math.floor(div);
          digits[i2] = rounded;
          if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
            throw new Error("convertRadix: carry overflow");
          if (!done)
            continue;
          else if (!rounded)
            pos = i2;
          else
            done = false;
        }
        res.push(carry);
        if (done)
          break;
      }
      for (let i2 = 0; i2 < data.length - 1 && data[i2] === 0; i2++)
        res.push(0);
      return res.reverse();
    }
    const gcd = (a, b) => b === 0 ? a : gcd(b, a % b);
    const radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));
    const powers = /* @__PURE__ */ (() => {
      let res = [];
      for (let i2 = 0; i2 < 40; i2++)
        res.push(__pow(2, i2));
      return res;
    })();
    function convertRadix2(data, from, to, padding2) {
      aArr(data);
      if (from <= 0 || from > 32)
        throw new Error(`convertRadix2: wrong from=${from}`);
      if (to <= 0 || to > 32)
        throw new Error(`convertRadix2: wrong to=${to}`);
      if (/* @__PURE__ */ radix2carry(from, to) > 32) {
        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${/* @__PURE__ */ radix2carry(from, to)}`);
      }
      let carry = 0;
      let pos = 0;
      const max2 = powers[from];
      const mask2 = powers[to] - 1;
      const res = [];
      for (const n of data) {
        anumber2(n);
        if (n >= max2)
          throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
        carry = carry << from | n;
        if (pos + from > 32)
          throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
        pos += from;
        for (; pos >= to; pos -= to)
          res.push((carry >> pos - to & mask2) >>> 0);
        const pow3 = powers[pos];
        if (pow3 === void 0)
          throw new Error("invalid carry");
        carry &= pow3 - 1;
      }
      carry = carry << to - pos & mask2;
      if (!padding2 && pos >= from)
        throw new Error("Excess padding");
      if (!padding2 && carry > 0)
        throw new Error(`Non-zero padding: ${carry}`);
      if (padding2 && pos > 0)
        res.push(carry >>> 0);
      return res;
    }
    // @__NO_SIDE_EFFECTS__
    function radix(num) {
      anumber2(num);
      const _2562 = __pow(2, 8);
      return {
        encode: (bytes2) => {
          if (!isBytes2(bytes2))
            throw new Error("radix.encode input should be Uint8Array");
          return convertRadix(Array.from(bytes2), _2562, num);
        },
        decode: (digits) => {
          anumArr("radix.decode", digits);
          return Uint8Array.from(convertRadix(digits, num, _2562));
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function radix2(bits, revPadding = false) {
      anumber2(bits);
      if (bits <= 0 || bits > 32)
        throw new Error("radix2: bits should be in (0..32]");
      if (/* @__PURE__ */ radix2carry(8, bits) > 32 || /* @__PURE__ */ radix2carry(bits, 8) > 32)
        throw new Error("radix2: carry overflow");
      return {
        encode: (bytes2) => {
          if (!isBytes2(bytes2))
            throw new Error("radix2.encode input should be Uint8Array");
          return convertRadix2(Array.from(bytes2), 8, bits, !revPadding);
        },
        decode: (digits) => {
          anumArr("radix2.decode", digits);
          return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
        }
      };
    }
    function unsafeWrapper(fn) {
      afn(fn);
      return function(...args) {
        try {
          return fn.apply(null, args);
        } catch (e) {
        }
      };
    }
    function checksum2(len2, fn) {
      anumber2(len2);
      afn(fn);
      return {
        encode(data) {
          if (!isBytes2(data))
            throw new Error("checksum.encode: input should be Uint8Array");
          const sum = fn(data).slice(0, len2);
          const res = new Uint8Array(data.length + len2);
          res.set(data);
          res.set(sum, data.length);
          return res;
        },
        decode(data) {
          if (!isBytes2(data))
            throw new Error("checksum.decode: input should be Uint8Array");
          const payload = data.slice(0, -len2);
          const oldChecksum = data.slice(-len2);
          const newChecksum = fn(payload).slice(0, len2);
          for (let i2 = 0; i2 < len2; i2++)
            if (newChecksum[i2] !== oldChecksum[i2])
              throw new Error("Invalid checksum");
          return payload;
        }
      };
    }
    exports2.utils = {
      alphabet,
      chain,
      checksum: checksum2,
      convertRadix,
      convertRadix2,
      radix,
      radix2,
      join,
      padding
    };
    exports2.base16 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789ABCDEF"), /* @__PURE__ */ join(""));
    exports2.base32 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
    exports2.base32nopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ join(""));
    exports2.base32hex = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
    exports2.base32hexnopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ join(""));
    exports2.base32crockford = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize2((s2) => s2.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
    exports2.base64 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
    exports2.base64nopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ join(""));
    exports2.base64url = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
    exports2.base64urlnopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ join(""));
    const genBase58 = /* @__NO_SIDE_EFFECTS__ */ (abc) => /* @__PURE__ */ chain(/* @__PURE__ */ radix(58), /* @__PURE__ */ alphabet(abc), /* @__PURE__ */ join(""));
    exports2.base58 = /* @__PURE__ */ genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    exports2.base58flickr = /* @__PURE__ */ genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
    exports2.base58xrp = /* @__PURE__ */ genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
    const XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
    exports2.base58xmr = {
      encode(data) {
        let res = "";
        for (let i2 = 0; i2 < data.length; i2 += 8) {
          const block = data.subarray(i2, i2 + 8);
          res += exports2.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
        }
        return res;
      },
      decode(str) {
        let res = [];
        for (let i2 = 0; i2 < str.length; i2 += 11) {
          const slice = str.slice(i2, i2 + 11);
          const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
          const block = exports2.base58.decode(slice);
          for (let j = 0; j < block.length - blockLen; j++) {
            if (block[j] !== 0)
              throw new Error("base58xmr: wrong padding");
          }
          res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
      }
    };
    const createBase58check = (sha2562) => /* @__PURE__ */ chain(checksum2(4, (data) => sha2562(sha2562(data))), exports2.base58);
    exports2.createBase58check = createBase58check;
    exports2.base58check = exports2.createBase58check;
    const BECH_ALPHABET = /* @__PURE__ */ chain(/* @__PURE__ */ alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), /* @__PURE__ */ join(""));
    const POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
    function bech32Polymod(pre) {
      const b = pre >> 25;
      let chk = (pre & 33554431) << 5;
      for (let i2 = 0; i2 < POLYMOD_GENERATORS.length; i2++) {
        if ((b >> i2 & 1) === 1)
          chk ^= POLYMOD_GENERATORS[i2];
      }
      return chk;
    }
    function bechChecksum(prefix, words, encodingConst = 1) {
      const len2 = prefix.length;
      let chk = 1;
      for (let i2 = 0; i2 < len2; i2++) {
        const c = prefix.charCodeAt(i2);
        if (c < 33 || c > 126)
          throw new Error(`Invalid prefix (${prefix})`);
        chk = bech32Polymod(chk) ^ c >> 5;
      }
      chk = bech32Polymod(chk);
      for (let i2 = 0; i2 < len2; i2++)
        chk = bech32Polymod(chk) ^ prefix.charCodeAt(i2) & 31;
      for (let v of words)
        chk = bech32Polymod(chk) ^ v;
      for (let i2 = 0; i2 < 6; i2++)
        chk = bech32Polymod(chk);
      chk ^= encodingConst;
      return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));
    }
    // @__NO_SIDE_EFFECTS__
    function genBech32(encoding2) {
      const ENCODING_CONST = encoding2 === "bech32" ? 1 : 734539939;
      const _words = /* @__PURE__ */ radix2(5);
      const fromWords = _words.decode;
      const toWords = _words.encode;
      const fromWordsUnsafe = unsafeWrapper(fromWords);
      function encode2(prefix, words, limit2 = 90) {
        astr("bech32.encode prefix", prefix);
        if (isBytes2(words))
          words = Array.from(words);
        anumArr("bech32.encode", words);
        const plen = prefix.length;
        if (plen === 0)
          throw new TypeError(`Invalid prefix length ${plen}`);
        const actualLength = plen + 7 + words.length;
        if (limit2 !== false && actualLength > limit2)
          throw new TypeError(`Length ${actualLength} exceeds limit ${limit2}`);
        const lowered = prefix.toLowerCase();
        const sum = bechChecksum(lowered, words, ENCODING_CONST);
        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
      }
      function decode2(str, limit2 = 90) {
        astr("bech32.decode input", str);
        const slen = str.length;
        if (slen < 8 || limit2 !== false && slen > limit2)
          throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit2})`);
        const lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase())
          throw new Error(`String must be lowercase or uppercase`);
        const sepIndex = lowered.lastIndexOf("1");
        if (sepIndex === 0 || sepIndex === -1)
          throw new Error(`Letter "1" must be present between prefix and data only`);
        const prefix = lowered.slice(0, sepIndex);
        const data = lowered.slice(sepIndex + 1);
        if (data.length < 6)
          throw new Error("Data must be at least 6 characters long");
        const words = BECH_ALPHABET.decode(data).slice(0, -6);
        const sum = bechChecksum(prefix, words, ENCODING_CONST);
        if (!data.endsWith(sum))
          throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
        return { prefix, words };
      }
      const decodeUnsafe = unsafeWrapper(decode2);
      function decodeToBytes(str) {
        const { prefix, words } = decode2(str, false);
        return { prefix, words, bytes: fromWords(words) };
      }
      function encodeFromBytes(prefix, bytes2) {
        return encode2(prefix, toWords(bytes2));
      }
      return {
        encode: encode2,
        decode: decode2,
        encodeFromBytes,
        decodeToBytes,
        decodeUnsafe,
        fromWords,
        fromWordsUnsafe,
        toWords
      };
    }
    exports2.bech32 = /* @__PURE__ */ genBech32("bech32");
    exports2.bech32m = /* @__PURE__ */ genBech32("bech32m");
    exports2.utf8 = {
      encode: (data) => new TextDecoder().decode(data),
      decode: (str) => new TextEncoder().encode(str)
    };
    exports2.hex = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789abcdef"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize2((s2) => {
      if (typeof s2 !== "string" || s2.length % 2 !== 0)
        throw new TypeError(`hex.decode: expected string, got ${typeof s2} with length ${s2.length}`);
      return s2.toLowerCase();
    }));
    const CODERS = {
      utf8: exports2.utf8,
      hex: exports2.hex,
      base16: exports2.base16,
      base32: exports2.base32,
      base64: exports2.base64,
      base64url: exports2.base64url,
      base58: exports2.base58,
      base58xmr: exports2.base58xmr
    };
    const coderTypeError = "Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr";
    const bytesToString = (type2, bytes2) => {
      if (typeof type2 !== "string" || !CODERS.hasOwnProperty(type2))
        throw new TypeError(coderTypeError);
      if (!isBytes2(bytes2))
        throw new TypeError("bytesToString() expects Uint8Array");
      return CODERS[type2].encode(bytes2);
    };
    exports2.bytesToString = bytesToString;
    exports2.str = exports2.bytesToString;
    const stringToBytes = (type2, str) => {
      if (!CODERS.hasOwnProperty(type2))
        throw new TypeError(coderTypeError);
      if (typeof str !== "string")
        throw new TypeError("stringToBytes() expects string");
      return CODERS[type2].decode(str);
    };
    exports2.stringToBytes = stringToBytes;
    exports2.bytes = exports2.stringToBytes;
  })(lib$1);
  var hex = {};
  var sha3 = {};
  var _assert = {};
  Object.defineProperty(_assert, "__esModule", { value: true });
  _assert.anumber = anumber;
  _assert.abytes = abytes;
  _assert.ahash = ahash;
  _assert.aexists = aexists;
  _assert.aoutput = aoutput;
  function anumber(n) {
    if (!Number.isSafeInteger(n) || n < 0)
      throw new Error("positive integer expected, got " + n);
  }
  function isBytes(a) {
    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
  }
  function abytes(b, ...lengths) {
    if (!isBytes(b))
      throw new Error("Uint8Array expected");
    if (lengths.length > 0 && !lengths.includes(b.length))
      throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
  }
  function ahash(h) {
    if (typeof h !== "function" || typeof h.create !== "function")
      throw new Error("Hash should be wrapped by utils.wrapConstructor");
    anumber(h.outputLen);
    anumber(h.blockLen);
  }
  function aexists(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function aoutput(out, instance) {
    abytes(out);
    const min2 = instance.outputLen;
    if (out.length < min2) {
      throw new Error("digestInto() expects output buffer of length at least " + min2);
    }
  }
  var _u64 = {};
  Object.defineProperty(_u64, "__esModule", { value: true });
  _u64.add5L = _u64.add5H = _u64.add4H = _u64.add4L = _u64.add3H = _u64.add3L = _u64.rotlBL = _u64.rotlBH = _u64.rotlSL = _u64.rotlSH = _u64.rotr32L = _u64.rotr32H = _u64.rotrBL = _u64.rotrBH = _u64.rotrSL = _u64.rotrSH = _u64.shrSL = _u64.shrSH = _u64.toBig = void 0;
  _u64.fromBig = fromBig;
  _u64.split = split;
  _u64.add = add;
  const U32_MASK64 = /* @__PURE__ */ BigInt(__pow(2, 32) - 1);
  const _32n = /* @__PURE__ */ BigInt(32);
  function fromBig(n, le = false) {
    if (le)
      return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
    return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
  }
  function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i2 = 0; i2 < lst.length; i2++) {
      const { h, l } = fromBig(lst[i2], le);
      [Ah[i2], Al[i2]] = [h, l];
    }
    return [Ah, Al];
  }
  const toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
  _u64.toBig = toBig;
  const shrSH = (h, _l, s2) => h >>> s2;
  _u64.shrSH = shrSH;
  const shrSL = (h, l, s2) => h << 32 - s2 | l >>> s2;
  _u64.shrSL = shrSL;
  const rotrSH = (h, l, s2) => h >>> s2 | l << 32 - s2;
  _u64.rotrSH = rotrSH;
  const rotrSL = (h, l, s2) => h << 32 - s2 | l >>> s2;
  _u64.rotrSL = rotrSL;
  const rotrBH = (h, l, s2) => h << 64 - s2 | l >>> s2 - 32;
  _u64.rotrBH = rotrBH;
  const rotrBL = (h, l, s2) => h >>> s2 - 32 | l << 64 - s2;
  _u64.rotrBL = rotrBL;
  const rotr32H = (_h, l) => l;
  _u64.rotr32H = rotr32H;
  const rotr32L = (h, _l) => h;
  _u64.rotr32L = rotr32L;
  const rotlSH = (h, l, s2) => h << s2 | l >>> 32 - s2;
  _u64.rotlSH = rotlSH;
  const rotlSL = (h, l, s2) => l << s2 | h >>> 32 - s2;
  _u64.rotlSL = rotlSL;
  const rotlBH = (h, l, s2) => l << s2 - 32 | h >>> 64 - s2;
  _u64.rotlBH = rotlBH;
  const rotlBL = (h, l, s2) => h << s2 - 32 | l >>> 64 - s2;
  _u64.rotlBL = rotlBL;
  function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: Ah + Bh + (l / __pow(2, 32) | 0) | 0, l: l | 0 };
  }
  const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  _u64.add3L = add3L;
  const add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / __pow(2, 32) | 0) | 0;
  _u64.add3H = add3H;
  const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  _u64.add4L = add4L;
  const add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / __pow(2, 32) | 0) | 0;
  _u64.add4H = add4H;
  const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  _u64.add5L = add5L;
  const add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / __pow(2, 32) | 0) | 0;
  _u64.add5H = add5H;
  const u64 = {
    fromBig,
    split,
    toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L
  };
  _u64.default = u64;
  var utils$1 = {};
  var crypto$1 = {};
  Object.defineProperty(crypto$1, "__esModule", { value: true });
  crypto$1.crypto = void 0;
  crypto$1.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  (function(exports2) {
    /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Hash = exports2.nextTick = exports2.byteSwapIfBE = exports2.isLE = void 0;
    exports2.isBytes = isBytes2;
    exports2.u8 = u8;
    exports2.u32 = u32;
    exports2.createView = createView;
    exports2.rotr = rotr;
    exports2.rotl = rotl;
    exports2.byteSwap = byteSwap;
    exports2.byteSwap32 = byteSwap32;
    exports2.bytesToHex = bytesToHex2;
    exports2.hexToBytes = hexToBytes2;
    exports2.asyncLoop = asyncLoop;
    exports2.utf8ToBytes = utf8ToBytes2;
    exports2.toBytes = toBytes2;
    exports2.concatBytes = concatBytes2;
    exports2.checkOpts = checkOpts;
    exports2.wrapConstructor = wrapConstructor;
    exports2.wrapConstructorWithOpts = wrapConstructorWithOpts;
    exports2.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
    exports2.randomBytes = randomBytes;
    const crypto_1 = crypto$1;
    const _assert_js_12 = _assert;
    function isBytes2(a) {
      return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
    }
    function u8(arr) {
      return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    }
    function u32(arr) {
      return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    }
    function createView(arr) {
      return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    }
    function rotr(word, shift) {
      return word << 32 - shift | word >>> shift;
    }
    function rotl(word, shift) {
      return word << shift | word >>> 32 - shift >>> 0;
    }
    exports2.isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
    function byteSwap(word) {
      return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    }
    exports2.byteSwapIfBE = exports2.isLE ? (n) => n : (n) => byteSwap(n);
    function byteSwap32(arr) {
      for (let i2 = 0; i2 < arr.length; i2++) {
        arr[i2] = byteSwap(arr[i2]);
      }
    }
    const hexes2 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i2) => i2.toString(16).padStart(2, "0"));
    function bytesToHex2(bytes2) {
      (0, _assert_js_12.abytes)(bytes2);
      let hex2 = "";
      for (let i2 = 0; i2 < bytes2.length; i2++) {
        hex2 += hexes2[bytes2[i2]];
      }
      return hex2;
    }
    const asciis2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
    function asciiToBase162(ch) {
      if (ch >= asciis2._0 && ch <= asciis2._9)
        return ch - asciis2._0;
      if (ch >= asciis2.A && ch <= asciis2.F)
        return ch - (asciis2.A - 10);
      if (ch >= asciis2.a && ch <= asciis2.f)
        return ch - (asciis2.a - 10);
      return;
    }
    function hexToBytes2(hex2) {
      if (typeof hex2 !== "string")
        throw new Error("hex string expected, got " + typeof hex2);
      const hl = hex2.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("hex string expected, got unpadded hex of length " + hl);
      const array2 = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase162(hex2.charCodeAt(hi));
        const n2 = asciiToBase162(hex2.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex2[hi] + hex2[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array2[ai] = n1 * 16 + n2;
      }
      return array2;
    }
    const nextTick = () => __async(this, null, function* () {
    });
    exports2.nextTick = nextTick;
    function asyncLoop(iters, tick, cb) {
      return __async(this, null, function* () {
        let ts = Date.now();
        for (let i2 = 0; i2 < iters; i2++) {
          cb(i2);
          const diff2 = Date.now() - ts;
          if (diff2 >= 0 && diff2 < tick)
            continue;
          yield (0, exports2.nextTick)();
          ts += diff2;
        }
      });
    }
    function utf8ToBytes2(str) {
      if (typeof str !== "string")
        throw new Error("utf8ToBytes expected string, got " + typeof str);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    function toBytes2(data) {
      if (typeof data === "string")
        data = utf8ToBytes2(data);
      (0, _assert_js_12.abytes)(data);
      return data;
    }
    function concatBytes2(...arrays) {
      let sum = 0;
      for (let i2 = 0; i2 < arrays.length; i2++) {
        const a = arrays[i2];
        (0, _assert_js_12.abytes)(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i2 = 0, pad = 0; i2 < arrays.length; i2++) {
        const a = arrays[i2];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    class Hash {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    }
    exports2.Hash = Hash;
    function checkOpts(defaults2, opts) {
      if (opts !== void 0 && {}.toString.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults2, opts);
      return merged;
    }
    function wrapConstructor(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    function wrapXOFConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    function randomBytes(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      if (crypto_1.crypto && typeof crypto_1.crypto.randomBytes === "function") {
        return crypto_1.crypto.randomBytes(bytesLength);
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
  })(utils$1);
  Object.defineProperty(sha3, "__esModule", { value: true });
  sha3.shake256 = sha3.shake128 = sha3.keccak_512 = sha3.keccak_384 = sha3.keccak_256 = sha3.keccak_224 = sha3.sha3_512 = sha3.sha3_384 = sha3.sha3_256 = sha3.sha3_224 = sha3.Keccak = void 0;
  sha3.keccakP = keccakP;
  const _assert_js_1 = _assert;
  const _u64_js_1 = _u64;
  const utils_js_1 = utils$1;
  const SHA3_PI = [];
  const SHA3_ROTL = [];
  const _SHA3_IOTA = [];
  const _0n = /* @__PURE__ */ BigInt(0);
  const _1n = /* @__PURE__ */ BigInt(1);
  const _2n = /* @__PURE__ */ BigInt(2);
  const _7n = /* @__PURE__ */ BigInt(7);
  const _256n = /* @__PURE__ */ BigInt(256);
  const _0x71n = /* @__PURE__ */ BigInt(113);
  for (let round2 = 0, R2 = _1n, x = 1, y = 0; round2 < 24; round2++) {
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    SHA3_ROTL.push((round2 + 1) * (round2 + 2) / 2 % 64);
    let t2 = _0n;
    for (let j = 0; j < 7; j++) {
      R2 = (R2 << _1n ^ (R2 >> _7n) * _0x71n) % _256n;
      if (R2 & _2n)
        t2 ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
    }
    _SHA3_IOTA.push(t2);
  }
  const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);
  const rotlH = (h, l, s2) => s2 > 32 ? (0, _u64_js_1.rotlBH)(h, l, s2) : (0, _u64_js_1.rotlSH)(h, l, s2);
  const rotlL = (h, l, s2) => s2 > 32 ? (0, _u64_js_1.rotlBL)(h, l, s2) : (0, _u64_js_1.rotlSL)(h, l, s2);
  function keccakP(s2, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round2 = 24 - rounds; round2 < 24; round2++) {
      for (let x = 0; x < 10; x++)
        B[x] = s2[x] ^ s2[x + 10] ^ s2[x + 20] ^ s2[x + 30] ^ s2[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s2[x + y] ^= Th;
          s2[x + y + 1] ^= Tl;
        }
      }
      let curH = s2[2];
      let curL = s2[3];
      for (let t2 = 0; t2 < 24; t2++) {
        const shift = SHA3_ROTL[t2];
        const Th = rotlH(curH, curL, shift);
        const Tl = rotlL(curH, curL, shift);
        const PI = SHA3_PI[t2];
        curH = s2[PI];
        curL = s2[PI + 1];
        s2[PI] = Th;
        s2[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s2[y + x];
        for (let x = 0; x < 10; x++)
          s2[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s2[0] ^= SHA3_IOTA_H[round2];
      s2[1] ^= SHA3_IOTA_L[round2];
    }
    B.fill(0);
  }
  class Keccak extends utils_js_1.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
      super();
      this.blockLen = blockLen;
      this.suffix = suffix;
      this.outputLen = outputLen;
      this.enableXOF = enableXOF;
      this.rounds = rounds;
      this.pos = 0;
      this.posOut = 0;
      this.finished = false;
      this.destroyed = false;
      (0, _assert_js_1.anumber)(outputLen);
      if (0 >= this.blockLen || this.blockLen >= 200)
        throw new Error("Sha3 supports only keccak-f1600 function");
      this.state = new Uint8Array(200);
      this.state32 = (0, utils_js_1.u32)(this.state);
    }
    keccak() {
      if (!utils_js_1.isLE)
        (0, utils_js_1.byteSwap32)(this.state32);
      keccakP(this.state32, this.rounds);
      if (!utils_js_1.isLE)
        (0, utils_js_1.byteSwap32)(this.state32);
      this.posOut = 0;
      this.pos = 0;
    }
    update(data) {
      (0, _assert_js_1.aexists)(this);
      const { blockLen, state: state2 } = this;
      data = (0, utils_js_1.toBytes)(data);
      const len2 = data.length;
      for (let pos = 0; pos < len2; ) {
        const take = Math.min(blockLen - this.pos, len2 - pos);
        for (let i2 = 0; i2 < take; i2++)
          state2[this.pos++] ^= data[pos++];
        if (this.pos === blockLen)
          this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      const { state: state2, suffix, pos, blockLen } = this;
      state2[pos] ^= suffix;
      if ((suffix & 128) !== 0 && pos === blockLen - 1)
        this.keccak();
      state2[blockLen - 1] ^= 128;
      this.keccak();
    }
    writeInto(out) {
      (0, _assert_js_1.aexists)(this, false);
      (0, _assert_js_1.abytes)(out);
      this.finish();
      const bufferOut = this.state;
      const { blockLen } = this;
      for (let pos = 0, len2 = out.length; pos < len2; ) {
        if (this.posOut >= blockLen)
          this.keccak();
        const take = Math.min(blockLen - this.posOut, len2 - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
        this.posOut += take;
        pos += take;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible for this instance");
      return this.writeInto(out);
    }
    xof(bytes2) {
      (0, _assert_js_1.anumber)(bytes2);
      return this.xofInto(new Uint8Array(bytes2));
    }
    digestInto(out) {
      (0, _assert_js_1.aoutput)(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      this.destroyed = true;
      this.state.fill(0);
    }
    _cloneInto(to) {
      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
      to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
      to.state32.set(this.state32);
      to.pos = this.pos;
      to.posOut = this.posOut;
      to.finished = this.finished;
      to.rounds = rounds;
      to.suffix = suffix;
      to.outputLen = outputLen;
      to.enableXOF = enableXOF;
      to.destroyed = this.destroyed;
      return to;
    }
  }
  sha3.Keccak = Keccak;
  const gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
  sha3.sha3_224 = gen(6, 144, 224 / 8);
  sha3.sha3_256 = gen(6, 136, 256 / 8);
  sha3.sha3_384 = gen(6, 104, 384 / 8);
  sha3.sha3_512 = gen(6, 72, 512 / 8);
  sha3.keccak_224 = gen(1, 144, 224 / 8);
  sha3.keccak_256 = gen(1, 136, 256 / 8);
  sha3.keccak_384 = gen(1, 104, 384 / 8);
  sha3.keccak_512 = gen(1, 72, 512 / 8);
  const genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
  sha3.shake128 = genShake(31, 168, 128 / 8);
  sha3.shake256 = genShake(31, 136, 256 / 8);
  var hasRequiredHex;
  function requireHex() {
    if (hasRequiredHex) return hex;
    hasRequiredHex = 1;
    (function(exports2) {
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.remove0x = exports2.add0x = exports2.isValidChecksumAddress = exports2.getChecksumAddress = exports2.isValidHexAddress = exports2.assertIsStrictHexString = exports2.assertIsHexString = exports2.isStrictHexString = exports2.isHexString = exports2.HexChecksumAddressStruct = exports2.HexAddressStruct = exports2.StrictHexStruct = exports2.HexStruct = void 0;
      const superstruct_12 = dist$1;
      const sha3_12 = sha3;
      const assert_12 = assert$2;
      const bytes_12 = requireBytes();
      exports2.HexStruct = (0, superstruct_12.pattern)((0, superstruct_12.string)(), /^(?:0x)?[0-9a-f]+$/iu);
      exports2.StrictHexStruct = (0, superstruct_12.pattern)((0, superstruct_12.string)(), /^0x[0-9a-f]+$/iu);
      exports2.HexAddressStruct = (0, superstruct_12.pattern)((0, superstruct_12.string)(), /^0x[0-9a-f]{40}$/u);
      exports2.HexChecksumAddressStruct = (0, superstruct_12.pattern)((0, superstruct_12.string)(), /^0x[0-9a-fA-F]{40}$/u);
      function isHexString2(value) {
        return (0, superstruct_12.is)(value, exports2.HexStruct);
      }
      exports2.isHexString = isHexString2;
      function isStrictHexString(value) {
        return (0, superstruct_12.is)(value, exports2.StrictHexStruct);
      }
      exports2.isStrictHexString = isStrictHexString;
      function assertIsHexString2(value) {
        (0, assert_12.assert)(isHexString2(value), "Value must be a hexadecimal string.");
      }
      exports2.assertIsHexString = assertIsHexString2;
      function assertIsStrictHexString(value) {
        (0, assert_12.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with "0x".');
      }
      exports2.assertIsStrictHexString = assertIsStrictHexString;
      function isValidHexAddress(possibleAddress) {
        return (0, superstruct_12.is)(possibleAddress, exports2.HexAddressStruct) || isValidChecksumAddress(possibleAddress);
      }
      exports2.isValidHexAddress = isValidHexAddress;
      function getChecksumAddress2(address2) {
        (0, assert_12.assert)((0, superstruct_12.is)(address2, exports2.HexChecksumAddressStruct), "Invalid hex address.");
        const unPrefixed = remove0x(address2.toLowerCase());
        const unPrefixedHash = remove0x((0, bytes_12.bytesToHex)((0, sha3_12.keccak_256)(unPrefixed)));
        return `0x${unPrefixed.split("").map((character, nibbleIndex) => {
          const hashCharacter = unPrefixedHash[nibbleIndex];
          (0, assert_12.assert)((0, superstruct_12.is)(hashCharacter, (0, superstruct_12.string)()), "Hash shorter than address.");
          return parseInt(hashCharacter, 16) > 7 ? character.toUpperCase() : character;
        }).join("")}`;
      }
      exports2.getChecksumAddress = getChecksumAddress2;
      function isValidChecksumAddress(possibleChecksum) {
        if (!(0, superstruct_12.is)(possibleChecksum, exports2.HexChecksumAddressStruct)) {
          return false;
        }
        return getChecksumAddress2(possibleChecksum) === possibleChecksum;
      }
      exports2.isValidChecksumAddress = isValidChecksumAddress;
      function add0x(hexadecimal) {
        if (hexadecimal.startsWith("0x")) {
          return hexadecimal;
        }
        if (hexadecimal.startsWith("0X")) {
          return `0x${hexadecimal.substring(2)}`;
        }
        return `0x${hexadecimal}`;
      }
      exports2.add0x = add0x;
      function remove0x(hexadecimal) {
        if (hexadecimal.startsWith("0x") || hexadecimal.startsWith("0X")) {
          return hexadecimal.substring(2);
        }
        return hexadecimal;
      }
      exports2.remove0x = remove0x;
    })(hex);
    return hex;
  }
  var hasRequiredBytes;
  function requireBytes() {
    if (hasRequiredBytes) return bytes$1;
    hasRequiredBytes = 1;
    Object.defineProperty(bytes$1, "__esModule", { value: true });
    bytes$1.createDataView = bytes$1.concatBytes = bytes$1.valueToBytes = bytes$1.base64ToBytes = bytes$1.stringToBytes = bytes$1.numberToBytes = bytes$1.signedBigIntToBytes = bytes$1.bigIntToBytes = bytes$1.hexToBytes = bytes$1.bytesToBase64 = bytes$1.bytesToString = bytes$1.bytesToNumber = bytes$1.bytesToSignedBigInt = bytes$1.bytesToBigInt = bytes$1.bytesToHex = bytes$1.assertIsBytes = bytes$1.isBytes = void 0;
    const base_12 = lib$1;
    const assert_12 = assert$2;
    const hex_12 = requireHex();
    const HEX_MINIMUM_NUMBER_CHARACTER = 48;
    const HEX_MAXIMUM_NUMBER_CHARACTER = 58;
    const HEX_CHARACTER_OFFSET = 87;
    function getPrecomputedHexValuesBuilder() {
      const lookupTable = [];
      return () => {
        if (lookupTable.length === 0) {
          for (let i2 = 0; i2 < 256; i2++) {
            lookupTable.push(i2.toString(16).padStart(2, "0"));
          }
        }
        return lookupTable;
      };
    }
    const getPrecomputedHexValues = getPrecomputedHexValuesBuilder();
    function isBytes2(value) {
      return value instanceof Uint8Array;
    }
    bytes$1.isBytes = isBytes2;
    function assertIsBytes(value) {
      (0, assert_12.assert)(isBytes2(value), "Value must be a Uint8Array.");
    }
    bytes$1.assertIsBytes = assertIsBytes;
    function bytesToHex2(bytes2) {
      assertIsBytes(bytes2);
      if (bytes2.length === 0) {
        return "0x";
      }
      const lookupTable = getPrecomputedHexValues();
      const hexadecimal = new Array(bytes2.length);
      for (let i2 = 0; i2 < bytes2.length; i2++) {
        hexadecimal[i2] = lookupTable[bytes2[i2]];
      }
      return (0, hex_12.add0x)(hexadecimal.join(""));
    }
    bytes$1.bytesToHex = bytesToHex2;
    function bytesToBigInt(bytes2) {
      assertIsBytes(bytes2);
      const hexadecimal = bytesToHex2(bytes2);
      return BigInt(hexadecimal);
    }
    bytes$1.bytesToBigInt = bytesToBigInt;
    function bytesToSignedBigInt(bytes2) {
      assertIsBytes(bytes2);
      let value = BigInt(0);
      for (const byte of bytes2) {
        value = (value << BigInt(8)) + BigInt(byte);
      }
      return BigInt.asIntN(bytes2.length * 8, value);
    }
    bytes$1.bytesToSignedBigInt = bytesToSignedBigInt;
    function bytesToNumber(bytes2) {
      assertIsBytes(bytes2);
      const bigint = bytesToBigInt(bytes2);
      (0, assert_12.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), "Number is not a safe integer. Use `bytesToBigInt` instead.");
      return Number(bigint);
    }
    bytes$1.bytesToNumber = bytesToNumber;
    function bytesToString(bytes2) {
      assertIsBytes(bytes2);
      return new TextDecoder().decode(bytes2);
    }
    bytes$1.bytesToString = bytesToString;
    function bytesToBase64(bytes2) {
      assertIsBytes(bytes2);
      return base_12.base64.encode(bytes2);
    }
    bytes$1.bytesToBase64 = bytesToBase64;
    function hexToBytes2(value) {
      var _a2;
      if (((_a2 = value == null ? void 0 : value.toLowerCase) == null ? void 0 : _a2.call(value)) === "0x") {
        return new Uint8Array();
      }
      (0, hex_12.assertIsHexString)(value);
      const strippedValue = (0, hex_12.remove0x)(value).toLowerCase();
      const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;
      const bytes2 = new Uint8Array(normalizedValue.length / 2);
      for (let i2 = 0; i2 < bytes2.length; i2++) {
        const c1 = normalizedValue.charCodeAt(i2 * 2);
        const c2 = normalizedValue.charCodeAt(i2 * 2 + 1);
        const n1 = c1 - (c1 < HEX_MAXIMUM_NUMBER_CHARACTER ? HEX_MINIMUM_NUMBER_CHARACTER : HEX_CHARACTER_OFFSET);
        const n2 = c2 - (c2 < HEX_MAXIMUM_NUMBER_CHARACTER ? HEX_MINIMUM_NUMBER_CHARACTER : HEX_CHARACTER_OFFSET);
        bytes2[i2] = n1 * 16 + n2;
      }
      return bytes2;
    }
    bytes$1.hexToBytes = hexToBytes2;
    function bigIntToBytes(value) {
      (0, assert_12.assert)(typeof value === "bigint", "Value must be a bigint.");
      (0, assert_12.assert)(value >= BigInt(0), "Value must be a non-negative bigint.");
      const hexadecimal = value.toString(16);
      return hexToBytes2(hexadecimal);
    }
    bytes$1.bigIntToBytes = bigIntToBytes;
    function bigIntFits(value, bytes2) {
      (0, assert_12.assert)(bytes2 > 0);
      const mask2 = value >> BigInt(31);
      return !((~value & mask2) + (value & ~mask2) >> BigInt(bytes2 * 8 + -1));
    }
    function signedBigIntToBytes(value, byteLength2) {
      (0, assert_12.assert)(typeof value === "bigint", "Value must be a bigint.");
      (0, assert_12.assert)(typeof byteLength2 === "number", "Byte length must be a number.");
      (0, assert_12.assert)(byteLength2 > 0, "Byte length must be greater than 0.");
      (0, assert_12.assert)(bigIntFits(value, byteLength2), "Byte length is too small to represent the given value.");
      let numberValue = value;
      const bytes2 = new Uint8Array(byteLength2);
      for (let i2 = 0; i2 < bytes2.length; i2++) {
        bytes2[i2] = Number(BigInt.asUintN(8, numberValue));
        numberValue >>= BigInt(8);
      }
      return bytes2.reverse();
    }
    bytes$1.signedBigIntToBytes = signedBigIntToBytes;
    function numberToBytes(value) {
      (0, assert_12.assert)(typeof value === "number", "Value must be a number.");
      (0, assert_12.assert)(value >= 0, "Value must be a non-negative number.");
      (0, assert_12.assert)(Number.isSafeInteger(value), "Value is not a safe integer. Use `bigIntToBytes` instead.");
      const hexadecimal = value.toString(16);
      return hexToBytes2(hexadecimal);
    }
    bytes$1.numberToBytes = numberToBytes;
    function stringToBytes(value) {
      (0, assert_12.assert)(typeof value === "string", "Value must be a string.");
      return new TextEncoder().encode(value);
    }
    bytes$1.stringToBytes = stringToBytes;
    function base64ToBytes(value) {
      (0, assert_12.assert)(typeof value === "string", "Value must be a string.");
      return base_12.base64.decode(value);
    }
    bytes$1.base64ToBytes = base64ToBytes;
    function valueToBytes(value) {
      if (typeof value === "bigint") {
        return bigIntToBytes(value);
      }
      if (typeof value === "number") {
        return numberToBytes(value);
      }
      if (typeof value === "string") {
        if (value.startsWith("0x")) {
          return hexToBytes2(value);
        }
        return stringToBytes(value);
      }
      if (isBytes2(value)) {
        return value;
      }
      throw new TypeError(`Unsupported value type: "${typeof value}".`);
    }
    bytes$1.valueToBytes = valueToBytes;
    function concatBytes2(values) {
      const normalizedValues = new Array(values.length);
      let byteLength2 = 0;
      for (let i2 = 0; i2 < values.length; i2++) {
        const value = valueToBytes(values[i2]);
        normalizedValues[i2] = value;
        byteLength2 += value.length;
      }
      const bytes2 = new Uint8Array(byteLength2);
      for (let i2 = 0, offset = 0; i2 < normalizedValues.length; i2++) {
        bytes2.set(normalizedValues[i2], offset);
        offset += normalizedValues[i2].length;
      }
      return bytes2;
    }
    bytes$1.concatBytes = concatBytes2;
    function createDataView(bytes2) {
      if (typeof Buffer !== "undefined" && bytes2 instanceof Buffer) {
        const buffer2 = bytes2.buffer.slice(bytes2.byteOffset, bytes2.byteOffset + bytes2.byteLength);
        return new DataView(buffer2);
      }
      return new DataView(bytes2.buffer, bytes2.byteOffset, bytes2.byteLength);
    }
    bytes$1.createDataView = createDataView;
    return bytes$1;
  }
  var caipTypes = {};
  var superstruct = {};
  Object.defineProperty(superstruct, "__esModule", { value: true });
  superstruct.definePattern = void 0;
  const superstruct_1$2 = dist$1;
  function definePattern(name2, pattern2) {
    return (0, superstruct_1$2.define)(name2, (value) => {
      return typeof value === "string" && pattern2.test(value);
    });
  }
  superstruct.definePattern = definePattern;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toCaipAssetId = exports2.toCaipAssetType = exports2.toCaipAccountId = exports2.toCaipChainId = exports2.parseCaipAssetId = exports2.parseCaipAssetType = exports2.parseCaipAccountId = exports2.parseCaipChainId = exports2.isCaipAssetId = exports2.isCaipAssetType = exports2.isCaipTokenId = exports2.isCaipAssetReference = exports2.isCaipAssetNamespace = exports2.isCaipAccountAddress = exports2.isCaipAccountId = exports2.isCaipReference = exports2.isCaipNamespace = exports2.isCaipChainId = exports2.KnownCaipNamespace = exports2.CaipAssetTypeOrIdStruct = exports2.CaipAssetIdStruct = exports2.CaipAssetTypeStruct = exports2.CaipTokenIdStruct = exports2.CaipAssetReferenceStruct = exports2.CaipAssetNamespaceStruct = exports2.CaipAccountAddressStruct = exports2.CaipAccountIdStruct = exports2.CaipReferenceStruct = exports2.CaipNamespaceStruct = exports2.CaipChainIdStruct = exports2.CAIP_ASSET_ID_REGEX = exports2.CAIP_ASSET_TYPE_REGEX = exports2.CAIP_TOKEN_ID_REGEX = exports2.CAIP_ASSET_REFERENCE_REGEX = exports2.CAIP_ASSET_NAMESPACE_REGEX = exports2.CAIP_ACCOUNT_ADDRESS_REGEX = exports2.CAIP_ACCOUNT_ID_REGEX = exports2.CAIP_REFERENCE_REGEX = exports2.CAIP_NAMESPACE_REGEX = exports2.CAIP_CHAIN_ID_REGEX = void 0;
    const superstruct_12 = dist$1;
    const superstruct_2 = superstruct;
    exports2.CAIP_CHAIN_ID_REGEX = new RegExp("^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$", "u");
    exports2.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u;
    exports2.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u;
    exports2.CAIP_ACCOUNT_ID_REGEX = new RegExp("^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$", "u");
    exports2.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u;
    exports2.CAIP_ASSET_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u;
    exports2.CAIP_ASSET_REFERENCE_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u;
    exports2.CAIP_TOKEN_ID_REGEX = /^[-.%a-zA-Z0-9]{1,78}$/u;
    exports2.CAIP_ASSET_TYPE_REGEX = new RegExp("^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})$", "u");
    exports2.CAIP_ASSET_ID_REGEX = new RegExp("^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})\\/(?<tokenId>[-.%a-zA-Z0-9]{1,78})$", "u");
    const CAIP_ASSET_TYPE_OR_ID_REGEX = new RegExp("^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32}))\\/(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-.%a-zA-Z0-9]{1,128})(\\/(?<tokenId>[-.%a-zA-Z0-9]{1,78}))?$", "u");
    exports2.CaipChainIdStruct = (0, superstruct_2.definePattern)("CaipChainId", exports2.CAIP_CHAIN_ID_REGEX);
    exports2.CaipNamespaceStruct = (0, superstruct_2.definePattern)("CaipNamespace", exports2.CAIP_NAMESPACE_REGEX);
    exports2.CaipReferenceStruct = (0, superstruct_2.definePattern)("CaipReference", exports2.CAIP_REFERENCE_REGEX);
    exports2.CaipAccountIdStruct = (0, superstruct_2.definePattern)("CaipAccountId", exports2.CAIP_ACCOUNT_ID_REGEX);
    exports2.CaipAccountAddressStruct = (0, superstruct_2.definePattern)("CaipAccountAddress", exports2.CAIP_ACCOUNT_ADDRESS_REGEX);
    exports2.CaipAssetNamespaceStruct = (0, superstruct_2.definePattern)("CaipAssetNamespace", exports2.CAIP_ASSET_NAMESPACE_REGEX);
    exports2.CaipAssetReferenceStruct = (0, superstruct_2.definePattern)("CaipAssetReference", exports2.CAIP_ASSET_REFERENCE_REGEX);
    exports2.CaipTokenIdStruct = (0, superstruct_2.definePattern)("CaipTokenId", exports2.CAIP_TOKEN_ID_REGEX);
    exports2.CaipAssetTypeStruct = (0, superstruct_2.definePattern)("CaipAssetType", exports2.CAIP_ASSET_TYPE_REGEX);
    exports2.CaipAssetIdStruct = (0, superstruct_2.definePattern)("CaipAssetId", exports2.CAIP_ASSET_ID_REGEX);
    exports2.CaipAssetTypeOrIdStruct = (0, superstruct_2.definePattern)("CaipAssetTypeOrId", CAIP_ASSET_TYPE_OR_ID_REGEX);
    (function(KnownCaipNamespace) {
      KnownCaipNamespace["Bip122"] = "bip122";
      KnownCaipNamespace["Solana"] = "solana";
      KnownCaipNamespace["Eip155"] = "eip155";
      KnownCaipNamespace["Wallet"] = "wallet";
    })(exports2.KnownCaipNamespace || (exports2.KnownCaipNamespace = {}));
    function isCaipChainId(value) {
      return (0, superstruct_12.is)(value, exports2.CaipChainIdStruct);
    }
    exports2.isCaipChainId = isCaipChainId;
    function isCaipNamespace(value) {
      return (0, superstruct_12.is)(value, exports2.CaipNamespaceStruct);
    }
    exports2.isCaipNamespace = isCaipNamespace;
    function isCaipReference(value) {
      return (0, superstruct_12.is)(value, exports2.CaipReferenceStruct);
    }
    exports2.isCaipReference = isCaipReference;
    function isCaipAccountId(value) {
      return (0, superstruct_12.is)(value, exports2.CaipAccountIdStruct);
    }
    exports2.isCaipAccountId = isCaipAccountId;
    function isCaipAccountAddress(value) {
      return (0, superstruct_12.is)(value, exports2.CaipAccountAddressStruct);
    }
    exports2.isCaipAccountAddress = isCaipAccountAddress;
    function isCaipAssetNamespace(value) {
      return (0, superstruct_12.is)(value, exports2.CaipAssetNamespaceStruct);
    }
    exports2.isCaipAssetNamespace = isCaipAssetNamespace;
    function isCaipAssetReference(value) {
      return (0, superstruct_12.is)(value, exports2.CaipAssetReferenceStruct);
    }
    exports2.isCaipAssetReference = isCaipAssetReference;
    function isCaipTokenId(value) {
      return (0, superstruct_12.is)(value, exports2.CaipTokenIdStruct);
    }
    exports2.isCaipTokenId = isCaipTokenId;
    function isCaipAssetType(value) {
      return (0, superstruct_12.is)(value, exports2.CaipAssetTypeStruct);
    }
    exports2.isCaipAssetType = isCaipAssetType;
    function isCaipAssetId(value) {
      return (0, superstruct_12.is)(value, exports2.CaipAssetIdStruct);
    }
    exports2.isCaipAssetId = isCaipAssetId;
    function parseCaipChainId(caipChainId) {
      const match = exports2.CAIP_CHAIN_ID_REGEX.exec(caipChainId);
      if (!(match == null ? void 0 : match.groups)) {
        throw new Error("Invalid CAIP chain ID.");
      }
      return {
        namespace: match.groups.namespace,
        reference: match.groups.reference
      };
    }
    exports2.parseCaipChainId = parseCaipChainId;
    function parseCaipAccountId(caipAccountId) {
      const match = exports2.CAIP_ACCOUNT_ID_REGEX.exec(caipAccountId);
      if (!(match == null ? void 0 : match.groups)) {
        throw new Error("Invalid CAIP account ID.");
      }
      return {
        address: match.groups.accountAddress,
        chainId: match.groups.chainId,
        chain: {
          namespace: match.groups.namespace,
          reference: match.groups.reference
        }
      };
    }
    exports2.parseCaipAccountId = parseCaipAccountId;
    function parseCaipAssetType(caipAssetType) {
      const match = exports2.CAIP_ASSET_TYPE_REGEX.exec(caipAssetType);
      if (!(match == null ? void 0 : match.groups)) {
        throw new Error("Invalid CAIP asset type.");
      }
      return {
        assetNamespace: match.groups.assetNamespace,
        assetReference: match.groups.assetReference,
        chainId: match.groups.chainId,
        chain: {
          namespace: match.groups.namespace,
          reference: match.groups.reference
        }
      };
    }
    exports2.parseCaipAssetType = parseCaipAssetType;
    function parseCaipAssetId(caipAssetId) {
      const match = exports2.CAIP_ASSET_ID_REGEX.exec(caipAssetId);
      if (!(match == null ? void 0 : match.groups)) {
        throw new Error("Invalid CAIP asset ID.");
      }
      return {
        assetNamespace: match.groups.assetNamespace,
        assetReference: match.groups.assetReference,
        tokenId: match.groups.tokenId,
        chainId: match.groups.chainId,
        chain: {
          namespace: match.groups.namespace,
          reference: match.groups.reference
        }
      };
    }
    exports2.parseCaipAssetId = parseCaipAssetId;
    function toCaipChainId(namespace, reference) {
      if (!isCaipNamespace(namespace)) {
        throw new Error(`Invalid "namespace", must match: ${exports2.CAIP_NAMESPACE_REGEX.toString()}`);
      }
      if (!isCaipReference(reference)) {
        throw new Error(`Invalid "reference", must match: ${exports2.CAIP_REFERENCE_REGEX.toString()}`);
      }
      return `${namespace}:${reference}`;
    }
    exports2.toCaipChainId = toCaipChainId;
    function toCaipAccountId(namespace, reference, accountAddress) {
      if (!isCaipNamespace(namespace)) {
        throw new Error(`Invalid "namespace", must match: ${exports2.CAIP_NAMESPACE_REGEX.toString()}`);
      }
      if (!isCaipReference(reference)) {
        throw new Error(`Invalid "reference", must match: ${exports2.CAIP_REFERENCE_REGEX.toString()}`);
      }
      if (!isCaipAccountAddress(accountAddress)) {
        throw new Error(`Invalid "accountAddress", must match: ${exports2.CAIP_ACCOUNT_ADDRESS_REGEX.toString()}`);
      }
      return `${namespace}:${reference}:${accountAddress}`;
    }
    exports2.toCaipAccountId = toCaipAccountId;
    function toCaipAssetType(namespace, reference, assetNamespace, assetReference) {
      if (!isCaipNamespace(namespace)) {
        throw new Error(`Invalid "namespace", must match: ${exports2.CAIP_NAMESPACE_REGEX.toString()}`);
      }
      if (!isCaipReference(reference)) {
        throw new Error(`Invalid "reference", must match: ${exports2.CAIP_REFERENCE_REGEX.toString()}`);
      }
      if (!isCaipAssetNamespace(assetNamespace)) {
        throw new Error(`Invalid "assetNamespace", must match: ${exports2.CAIP_ASSET_NAMESPACE_REGEX.toString()}`);
      }
      if (!isCaipAssetReference(assetReference)) {
        throw new Error(`Invalid "assetReference", must match: ${exports2.CAIP_ASSET_REFERENCE_REGEX.toString()}`);
      }
      return `${namespace}:${reference}/${assetNamespace}:${assetReference}`;
    }
    exports2.toCaipAssetType = toCaipAssetType;
    function toCaipAssetId(namespace, reference, assetNamespace, assetReference, tokenId) {
      if (!isCaipNamespace(namespace)) {
        throw new Error(`Invalid "namespace", must match: ${exports2.CAIP_NAMESPACE_REGEX.toString()}`);
      }
      if (!isCaipReference(reference)) {
        throw new Error(`Invalid "reference", must match: ${exports2.CAIP_REFERENCE_REGEX.toString()}`);
      }
      if (!isCaipAssetNamespace(assetNamespace)) {
        throw new Error(`Invalid "assetNamespace", must match: ${exports2.CAIP_ASSET_NAMESPACE_REGEX.toString()}`);
      }
      if (!isCaipAssetReference(assetReference)) {
        throw new Error(`Invalid "assetReference", must match: ${exports2.CAIP_ASSET_REFERENCE_REGEX.toString()}`);
      }
      if (!isCaipTokenId(tokenId)) {
        throw new Error(`Invalid "tokenId", must match: ${exports2.CAIP_TOKEN_ID_REGEX.toString()}`);
      }
      return `${namespace}:${reference}/${assetNamespace}:${assetReference}/${tokenId}`;
    }
    exports2.toCaipAssetId = toCaipAssetId;
  })(caipTypes);
  var checksum = {};
  Object.defineProperty(checksum, "__esModule", { value: true });
  checksum.ChecksumStruct = void 0;
  const superstruct_1$1 = dist$1;
  const base64_1 = base64$1;
  checksum.ChecksumStruct = (0, superstruct_1$1.size)((0, base64_1.base64)((0, superstruct_1$1.string)(), { paddingRequired: true }), 44, 44);
  var coercers = {};
  Object.defineProperty(coercers, "__esModule", { value: true });
  coercers.createHex = coercers.createBytes = coercers.createBigInt = coercers.createNumber = void 0;
  const superstruct_1 = dist$1;
  const assert_1$1 = assert$2;
  const bytes_1$1 = requireBytes();
  const hex_1$1 = requireHex();
  const NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1$1.StrictHexStruct]);
  const NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);
  const BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);
  (0, superstruct_1.union)([hex_1$1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);
  const BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1$1.StrictHexStruct]), bytes_1$1.hexToBytes);
  const HexCoercer = (0, superstruct_1.coerce)(hex_1$1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1$1.bytesToHex);
  function createNumber(value) {
    try {
      const result = (0, superstruct_1.create)(value, NumberCoercer);
      (0, assert_1$1.assert)(Number.isFinite(result), `Expected a number-like value, got "${value}".`);
      return result;
    } catch (error2) {
      if (error2 instanceof superstruct_1.StructError) {
        throw new Error(`Expected a number-like value, got "${value}".`);
      }
      throw error2;
    }
  }
  coercers.createNumber = createNumber;
  function createBigInt(value) {
    try {
      return (0, superstruct_1.create)(value, BigIntCoercer);
    } catch (error2) {
      if (error2 instanceof superstruct_1.StructError) {
        throw new Error(`Expected a number-like value, got "${String(error2.value)}".`);
      }
      throw error2;
    }
  }
  coercers.createBigInt = createBigInt;
  function createBytes(value) {
    if (typeof value === "string" && value.toLowerCase() === "0x") {
      return new Uint8Array();
    }
    try {
      return (0, superstruct_1.create)(value, BytesCoercer);
    } catch (error2) {
      if (error2 instanceof superstruct_1.StructError) {
        throw new Error(`Expected a bytes-like value, got "${String(error2.value)}".`);
      }
      throw error2;
    }
  }
  coercers.createBytes = createBytes;
  function createHex(value) {
    if (value instanceof Uint8Array && value.length === 0 || typeof value === "string" && value.toLowerCase() === "0x") {
      return "0x";
    }
    try {
      return (0, superstruct_1.create)(value, HexCoercer);
    } catch (error2) {
      if (error2 instanceof superstruct_1.StructError) {
        throw new Error(`Expected a bytes-like value, got "${String(error2.value)}".`);
      }
      throw error2;
    }
  }
  coercers.createHex = createHex;
  var collections = {};
  var __classPrivateFieldGet = commonjsGlobal && commonjsGlobal.__classPrivateFieldGet || function(receiver, state2, kind, f2) {
    if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state2.get(receiver);
  };
  var __classPrivateFieldSet = commonjsGlobal && commonjsGlobal.__classPrivateFieldSet || function(receiver, state2, value, kind, f2) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state2.set(receiver, value), value;
  };
  var _FrozenMap_map, _FrozenSet_set;
  Object.defineProperty(collections, "__esModule", { value: true });
  collections.FrozenSet = collections.FrozenMap = void 0;
  class FrozenMap {
    get size() {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").size;
    }
    [(_FrozenMap_map = /* @__PURE__ */ new WeakMap(), Symbol.iterator)]() {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f")[Symbol.iterator]();
    }
    constructor(entries) {
      _FrozenMap_map.set(this, void 0);
      __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), "f");
      Object.freeze(this);
    }
    entries() {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").entries();
    }
    forEach(callbackfn, thisArg) {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").forEach((value, key2, _map) => callbackfn.call(thisArg, value, key2, this));
    }
    get(key2) {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").get(key2);
    }
    has(key2) {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").has(key2);
    }
    keys() {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").keys();
    }
    values() {
      return __classPrivateFieldGet(this, _FrozenMap_map, "f").values();
    }
    toString() {
      return `FrozenMap(${this.size}) {${this.size > 0 ? ` ${[...this.entries()].map(([key2, value]) => `${String(key2)} => ${String(value)}`).join(", ")} ` : ""}}`;
    }
  }
  collections.FrozenMap = FrozenMap;
  class FrozenSet {
    get size() {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f").size;
    }
    [(_FrozenSet_set = /* @__PURE__ */ new WeakMap(), Symbol.iterator)]() {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f")[Symbol.iterator]();
    }
    constructor(values) {
      _FrozenSet_set.set(this, void 0);
      __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), "f");
      Object.freeze(this);
    }
    entries() {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f").entries();
    }
    forEach(callbackfn, thisArg) {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));
    }
    has(value) {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f").has(value);
    }
    keys() {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f").keys();
    }
    values() {
      return __classPrivateFieldGet(this, _FrozenSet_set, "f").values();
    }
    toString() {
      return `FrozenSet(${this.size}) {${this.size > 0 ? ` ${[...this.values()].map((member) => String(member)).join(", ")} ` : ""}}`;
    }
  }
  collections.FrozenSet = FrozenSet;
  Object.freeze(FrozenMap);
  Object.freeze(FrozenMap.prototype);
  Object.freeze(FrozenSet);
  Object.freeze(FrozenSet.prototype);
  var encryptionTypes = {};
  Object.defineProperty(encryptionTypes, "__esModule", { value: true });
  var json = {};
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getJsonRpcIdValidator = exports2.assertIsJsonRpcError = exports2.isJsonRpcError = exports2.assertIsJsonRpcFailure = exports2.isJsonRpcFailure = exports2.assertIsJsonRpcSuccess = exports2.isJsonRpcSuccess = exports2.assertIsJsonRpcResponse = exports2.isJsonRpcResponse = exports2.assertIsPendingJsonRpcResponse = exports2.isPendingJsonRpcResponse = exports2.JsonRpcResponseStruct = exports2.JsonRpcFailureStruct = exports2.JsonRpcSuccessStruct = exports2.PendingJsonRpcResponseStruct = exports2.assertIsJsonRpcRequest = exports2.isJsonRpcRequest = exports2.assertIsJsonRpcNotification = exports2.isJsonRpcNotification = exports2.JsonRpcNotificationStruct = exports2.JsonRpcRequestStruct = exports2.JsonRpcParamsStruct = exports2.JsonRpcErrorStruct = exports2.JsonRpcIdStruct = exports2.JsonRpcVersionStruct = exports2.jsonrpc2 = exports2.getJsonSize = exports2.getSafeJson = exports2.isValidJson = exports2.JsonStruct = exports2.UnsafeJsonStruct = exports2.exactOptional = exports2.object = void 0;
    const superstruct_12 = dist$1;
    const assert_12 = assert$2;
    const misc_12 = misc;
    const object = (schema) => (
      // The type is slightly different from a regular object struct, because we
      // want to make properties with `undefined` in their type optional, but not
      // `undefined` itself. This means that we need a type cast.
      (0, superstruct_12.object)(schema)
    );
    exports2.object = object;
    function hasOptional({ path, branch }) {
      const field = path[path.length - 1];
      return (0, misc_12.hasProperty)(branch[branch.length - 2], field);
    }
    function exactOptional(struct2) {
      return new superstruct_12.Struct(__spreadProps(__spreadValues({}, struct2), {
        type: `optional ${struct2.type}`,
        validator: (value, context) => !hasOptional(context) || struct2.validator(value, context),
        refiner: (value, context) => !hasOptional(context) || struct2.refiner(value, context)
      }));
    }
    exports2.exactOptional = exactOptional;
    function validateJson(json2) {
      if (json2 === null || typeof json2 === "boolean" || typeof json2 === "string") {
        return true;
      }
      if (typeof json2 === "number" && Number.isFinite(json2)) {
        return true;
      }
      if (typeof json2 === "object") {
        let every = true;
        if (Array.isArray(json2)) {
          for (let i2 = 0; i2 < json2.length; i2++) {
            if (!validateJson(json2[i2])) {
              every = false;
              break;
            }
          }
          return every;
        }
        const entries = Object.entries(json2);
        for (let i2 = 0; i2 < entries.length; i2++) {
          if (typeof entries[i2][0] !== "string" || !validateJson(entries[i2][1])) {
            every = false;
            break;
          }
        }
        return every;
      }
      return false;
    }
    exports2.UnsafeJsonStruct = (0, superstruct_12.define)("JSON", (json2) => validateJson(json2));
    exports2.JsonStruct = (0, superstruct_12.coerce)(exports2.UnsafeJsonStruct, (0, superstruct_12.refine)((0, superstruct_12.any)(), "JSON", (value) => (0, superstruct_12.is)(value, exports2.UnsafeJsonStruct)), (value) => JSON.parse(JSON.stringify(value, (propKey, propValue) => {
      if (propKey === "__proto__" || propKey === "constructor") {
        return void 0;
      }
      return propValue;
    })));
    function isValidJson(value) {
      try {
        getSafeJson(value);
        return true;
      } catch (e) {
        return false;
      }
    }
    exports2.isValidJson = isValidJson;
    function getSafeJson(value) {
      return (0, superstruct_12.create)(value, exports2.JsonStruct);
    }
    exports2.getSafeJson = getSafeJson;
    function getJsonSize(value) {
      (0, assert_12.assertStruct)(value, exports2.JsonStruct, "Invalid JSON value");
      const json2 = JSON.stringify(value);
      return new TextEncoder().encode(json2).byteLength;
    }
    exports2.getJsonSize = getJsonSize;
    exports2.jsonrpc2 = "2.0";
    exports2.JsonRpcVersionStruct = (0, superstruct_12.literal)(exports2.jsonrpc2);
    exports2.JsonRpcIdStruct = (0, superstruct_12.nullable)((0, superstruct_12.union)([(0, superstruct_12.number)(), (0, superstruct_12.string)()]));
    exports2.JsonRpcErrorStruct = (0, exports2.object)({
      code: (0, superstruct_12.integer)(),
      message: (0, superstruct_12.string)(),
      data: exactOptional(exports2.JsonStruct),
      stack: exactOptional((0, superstruct_12.string)())
    });
    exports2.JsonRpcParamsStruct = (0, superstruct_12.union)([(0, superstruct_12.record)((0, superstruct_12.string)(), exports2.JsonStruct), (0, superstruct_12.array)(exports2.JsonStruct)]);
    exports2.JsonRpcRequestStruct = (0, exports2.object)({
      id: exports2.JsonRpcIdStruct,
      jsonrpc: exports2.JsonRpcVersionStruct,
      method: (0, superstruct_12.string)(),
      params: exactOptional(exports2.JsonRpcParamsStruct)
    });
    exports2.JsonRpcNotificationStruct = (0, exports2.object)({
      jsonrpc: exports2.JsonRpcVersionStruct,
      method: (0, superstruct_12.string)(),
      params: exactOptional(exports2.JsonRpcParamsStruct)
    });
    function isJsonRpcNotification(value) {
      return (0, superstruct_12.is)(value, exports2.JsonRpcNotificationStruct);
    }
    exports2.isJsonRpcNotification = isJsonRpcNotification;
    function assertIsJsonRpcNotification(value, ErrorWrapper) {
      (0, assert_12.assertStruct)(value, exports2.JsonRpcNotificationStruct, "Invalid JSON-RPC notification", ErrorWrapper);
    }
    exports2.assertIsJsonRpcNotification = assertIsJsonRpcNotification;
    function isJsonRpcRequest(value) {
      return (0, superstruct_12.is)(value, exports2.JsonRpcRequestStruct);
    }
    exports2.isJsonRpcRequest = isJsonRpcRequest;
    function assertIsJsonRpcRequest(value, ErrorWrapper) {
      (0, assert_12.assertStruct)(value, exports2.JsonRpcRequestStruct, "Invalid JSON-RPC request", ErrorWrapper);
    }
    exports2.assertIsJsonRpcRequest = assertIsJsonRpcRequest;
    exports2.PendingJsonRpcResponseStruct = (0, superstruct_12.object)({
      id: exports2.JsonRpcIdStruct,
      jsonrpc: exports2.JsonRpcVersionStruct,
      result: (0, superstruct_12.optional)((0, superstruct_12.unknown)()),
      error: (0, superstruct_12.optional)(exports2.JsonRpcErrorStruct)
    });
    exports2.JsonRpcSuccessStruct = (0, exports2.object)({
      id: exports2.JsonRpcIdStruct,
      jsonrpc: exports2.JsonRpcVersionStruct,
      result: exports2.JsonStruct
    });
    exports2.JsonRpcFailureStruct = (0, exports2.object)({
      id: exports2.JsonRpcIdStruct,
      jsonrpc: exports2.JsonRpcVersionStruct,
      error: exports2.JsonRpcErrorStruct
    });
    exports2.JsonRpcResponseStruct = (0, superstruct_12.union)([
      exports2.JsonRpcSuccessStruct,
      exports2.JsonRpcFailureStruct
    ]);
    function isPendingJsonRpcResponse(response2) {
      return (0, superstruct_12.is)(response2, exports2.PendingJsonRpcResponseStruct);
    }
    exports2.isPendingJsonRpcResponse = isPendingJsonRpcResponse;
    function assertIsPendingJsonRpcResponse(response2, ErrorWrapper) {
      (0, assert_12.assertStruct)(response2, exports2.PendingJsonRpcResponseStruct, "Invalid pending JSON-RPC response", ErrorWrapper);
    }
    exports2.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;
    function isJsonRpcResponse(response2) {
      return (0, superstruct_12.is)(response2, exports2.JsonRpcResponseStruct);
    }
    exports2.isJsonRpcResponse = isJsonRpcResponse;
    function assertIsJsonRpcResponse(value, ErrorWrapper) {
      (0, assert_12.assertStruct)(value, exports2.JsonRpcResponseStruct, "Invalid JSON-RPC response", ErrorWrapper);
    }
    exports2.assertIsJsonRpcResponse = assertIsJsonRpcResponse;
    function isJsonRpcSuccess(value) {
      return (0, superstruct_12.is)(value, exports2.JsonRpcSuccessStruct);
    }
    exports2.isJsonRpcSuccess = isJsonRpcSuccess;
    function assertIsJsonRpcSuccess(value, ErrorWrapper) {
      (0, assert_12.assertStruct)(value, exports2.JsonRpcSuccessStruct, "Invalid JSON-RPC success response", ErrorWrapper);
    }
    exports2.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;
    function isJsonRpcFailure(value) {
      return (0, superstruct_12.is)(value, exports2.JsonRpcFailureStruct);
    }
    exports2.isJsonRpcFailure = isJsonRpcFailure;
    function assertIsJsonRpcFailure(value, ErrorWrapper) {
      (0, assert_12.assertStruct)(value, exports2.JsonRpcFailureStruct, "Invalid JSON-RPC failure response", ErrorWrapper);
    }
    exports2.assertIsJsonRpcFailure = assertIsJsonRpcFailure;
    function isJsonRpcError(value) {
      return (0, superstruct_12.is)(value, exports2.JsonRpcErrorStruct);
    }
    exports2.isJsonRpcError = isJsonRpcError;
    function assertIsJsonRpcError(value, ErrorWrapper) {
      (0, assert_12.assertStruct)(value, exports2.JsonRpcErrorStruct, "Invalid JSON-RPC error", ErrorWrapper);
    }
    exports2.assertIsJsonRpcError = assertIsJsonRpcError;
    function getJsonRpcIdValidator(options) {
      const { permitEmptyString, permitFractions, permitNull } = __spreadValues({
        permitEmptyString: true,
        permitFractions: false,
        permitNull: true
      }, options);
      const isValidJsonRpcId = (id2) => {
        return Boolean(typeof id2 === "number" && (permitFractions || Number.isInteger(id2)) || typeof id2 === "string" && (permitEmptyString || id2.length > 0) || permitNull && id2 === null);
      };
      return isValidJsonRpcId;
    }
    exports2.getJsonRpcIdValidator = getJsonRpcIdValidator;
  })(json);
  var keyring = {};
  Object.defineProperty(keyring, "__esModule", { value: true });
  var logging = {};
  var browser = { exports: {} };
  var ms;
  var hasRequiredMs;
  function requireMs() {
    if (hasRequiredMs) return ms;
    hasRequiredMs = 1;
    var s2 = 1e3;
    var m = s2 * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    ms = function(val, options) {
      options = options || {};
      var type2 = typeof val;
      if (type2 === "string" && val.length > 0) {
        return parse2(val);
      } else if (type2 === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type2 = (match[2] || "ms").toLowerCase();
      switch (type2) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s2;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms2) {
      var msAbs = Math.abs(ms2);
      if (msAbs >= d) {
        return Math.round(ms2 / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms2 / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms2 / m) + "m";
      }
      if (msAbs >= s2) {
        return Math.round(ms2 / s2) + "s";
      }
      return ms2 + "ms";
    }
    function fmtLong(ms2) {
      var msAbs = Math.abs(ms2);
      if (msAbs >= d) {
        return plural(ms2, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms2, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms2, msAbs, m, "minute");
      }
      if (msAbs >= s2) {
        return plural(ms2, msAbs, s2, "second");
      }
      return ms2 + " ms";
    }
    function plural(ms2, msAbs, n, name2) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms2 / n) + " " + name2 + (isPlural ? "s" : "");
    }
    return ms;
  }
  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce2;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = requireMs();
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key2) => {
      createDebug[key2] = env[key2];
    });
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash2 = 0;
      for (let i2 = 0; i2 < namespace.length; i2++) {
        hash2 = (hash2 << 5) - hash2 + namespace.charCodeAt(i2);
        hash2 |= 0;
      }
      return createDebug.colors[Math.abs(hash2) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug2(...args) {
        if (!debug2.enabled) {
          return;
        }
        const self2 = debug2;
        const curr = Number(/* @__PURE__ */ new Date());
        const ms2 = curr - (prevTime || curr);
        self2.diff = ms2;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format2) => {
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter = createDebug.formatters[format2];
          if (typeof formatter === "function") {
            const val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self2, args);
        const logFn = self2.log || createDebug.log;
        logFn.apply(self2, args);
      }
      debug2.namespace = namespace;
      debug2.useColors = createDebug.useColors();
      debug2.color = createDebug.selectColor(namespace);
      debug2.extend = extend2;
      debug2.destroy = createDebug.destroy;
      Object.defineProperty(debug2, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: (v) => {
          enableOverride = v;
        }
      });
      if (typeof createDebug.init === "function") {
        createDebug.init(debug2);
      }
      return debug2;
    }
    function extend2(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      const split2 = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
      for (const ns of split2) {
        if (ns[0] === "-") {
          createDebug.skips.push(ns.slice(1));
        } else {
          createDebug.names.push(ns);
        }
      }
    }
    function matchesTemplate(search, template) {
      let searchIndex = 0;
      let templateIndex = 0;
      let starIndex = -1;
      let matchIndex = 0;
      while (searchIndex < search.length) {
        if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
          if (template[templateIndex] === "*") {
            starIndex = templateIndex;
            matchIndex = searchIndex;
            templateIndex++;
          } else {
            searchIndex++;
            templateIndex++;
          }
        } else if (starIndex !== -1) {
          templateIndex = starIndex + 1;
          matchIndex++;
          searchIndex = matchIndex;
        } else {
          return false;
        }
      }
      while (templateIndex < template.length && template[templateIndex] === "*") {
        templateIndex++;
      }
      return templateIndex === template.length;
    }
    function disable() {
      const namespaces = [
        ...createDebug.names,
        ...createDebug.skips.map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name2) {
      for (const skip of createDebug.skips) {
        if (matchesTemplate(name2, skip)) {
          return false;
        }
      }
      for (const ns of createDebug.names) {
        if (matchesTemplate(name2, ns)) {
          return true;
        }
      }
      return false;
    }
    function coerce2(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    function destroy() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  var common = setup;
  (function(module, exports2) {
    var define_process_env_default2 = {};
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.storage = localstorage();
    exports2.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports2.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports2.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports2.storage.setItem("debug", namespaces);
        } else {
          exports2.storage.removeItem("debug");
        }
      } catch (error2) {
      }
    }
    function load() {
      let r2;
      try {
        r2 = exports2.storage.getItem("debug");
      } catch (error2) {
      }
      if (!r2 && typeof process$1 !== "undefined" && "env" in process$1) {
        r2 = define_process_env_default2.DEBUG;
      }
      return r2;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error2) {
      }
    }
    module.exports = common(exports2);
    const { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error2) {
        return "[UnexpectedJSONParseError]: " + error2.message;
      }
    };
  })(browser, browser.exports);
  var browserExports = browser.exports;
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod2) {
    return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
  };
  Object.defineProperty(logging, "__esModule", { value: true });
  logging.createModuleLogger = logging.createProjectLogger = void 0;
  const debug_1$1 = __importDefault(browserExports);
  const globalLogger = (0, debug_1$1.default)("metamask");
  function createProjectLogger(projectName) {
    return globalLogger.extend(projectName);
  }
  logging.createProjectLogger = createProjectLogger;
  function createModuleLogger(projectLogger, moduleName) {
    return projectLogger.extend(moduleName);
  }
  logging.createModuleLogger = createModuleLogger;
  var number$1 = {};
  Object.defineProperty(number$1, "__esModule", { value: true });
  number$1.hexToBigInt = number$1.hexToNumber = number$1.bigIntToHex = number$1.numberToHex = void 0;
  const assert_1 = assert$2;
  const hex_1 = requireHex();
  const numberToHex = (value) => {
    (0, assert_1.assert)(typeof value === "number", "Value must be a number.");
    (0, assert_1.assert)(value >= 0, "Value must be a non-negative number.");
    (0, assert_1.assert)(Number.isSafeInteger(value), "Value is not a safe integer. Use `bigIntToHex` instead.");
    return (0, hex_1.add0x)(value.toString(16));
  };
  number$1.numberToHex = numberToHex;
  const bigIntToHex = (value) => {
    (0, assert_1.assert)(typeof value === "bigint", "Value must be a bigint.");
    (0, assert_1.assert)(value >= 0, "Value must be a non-negative bigint.");
    return (0, hex_1.add0x)(value.toString(16));
  };
  number$1.bigIntToHex = bigIntToHex;
  const hexToNumber = (value) => {
    (0, hex_1.assertIsHexString)(value);
    const numberValue = parseInt(value, 16);
    (0, assert_1.assert)(Number.isSafeInteger(numberValue), "Value is not a safe integer. Use `hexToBigInt` instead.");
    return numberValue;
  };
  number$1.hexToNumber = hexToNumber;
  const hexToBigInt = (value) => {
    (0, hex_1.assertIsHexString)(value);
    return BigInt((0, hex_1.add0x)(value));
  };
  number$1.hexToBigInt = hexToBigInt;
  var opaque = {};
  Object.defineProperty(opaque, "__esModule", { value: true });
  var promise = {};
  Object.defineProperty(promise, "__esModule", { value: true });
  promise.createDeferredPromise = void 0;
  function createDeferredPromise({ suppressUnhandledRejection = false } = {}) {
    let resolve2;
    let reject;
    const promise2 = new Promise((innerResolve, innerReject) => {
      resolve2 = innerResolve;
      reject = innerReject;
    });
    if (suppressUnhandledRejection) {
      promise2.catch((_error) => {
      });
    }
    return { promise: promise2, resolve: resolve2, reject };
  }
  promise.createDeferredPromise = createDeferredPromise;
  var time = {};
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.timeSince = exports2.inMilliseconds = exports2.Duration = void 0;
    (function(Duration) {
      Duration[Duration["Millisecond"] = 1] = "Millisecond";
      Duration[Duration["Second"] = 1e3] = "Second";
      Duration[Duration["Minute"] = 6e4] = "Minute";
      Duration[Duration["Hour"] = 36e5] = "Hour";
      Duration[Duration["Day"] = 864e5] = "Day";
      Duration[Duration["Week"] = 6048e5] = "Week";
      Duration[Duration["Year"] = 31536e6] = "Year";
    })(exports2.Duration || (exports2.Duration = {}));
    const isNonNegativeInteger = (number2) => Number.isInteger(number2) && number2 >= 0;
    const assertIsNonNegativeInteger = (number2, name2) => {
      if (!isNonNegativeInteger(number2)) {
        throw new Error(`"${name2}" must be a non-negative integer. Received: "${number2}".`);
      }
    };
    function inMilliseconds(count, duration) {
      assertIsNonNegativeInteger(count, "count");
      return count * duration;
    }
    exports2.inMilliseconds = inMilliseconds;
    function timeSince(timestamp) {
      assertIsNonNegativeInteger(timestamp, "timestamp");
      return Date.now() - timestamp;
    }
    exports2.timeSince = timeSince;
  })(time);
  var transactionTypes = {};
  Object.defineProperty(transactionTypes, "__esModule", { value: true });
  var versions = {};
  var re$2 = { exports: {} };
  const SEMVER_SPEC_VERSION = "2.0.0";
  const MAX_LENGTH$1 = 256;
  const MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
  9007199254740991;
  const MAX_SAFE_COMPONENT_LENGTH = 16;
  const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH$1 - 6;
  const RELEASE_TYPES = [
    "major",
    "premajor",
    "minor",
    "preminor",
    "patch",
    "prepatch",
    "prerelease"
  ];
  var constants$1 = {
    MAX_LENGTH: MAX_LENGTH$1,
    MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH,
    MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1,
    RELEASE_TYPES,
    SEMVER_SPEC_VERSION,
    FLAG_INCLUDE_PRERELEASE: 1,
    FLAG_LOOSE: 2
  };
  var define_process_env_default = {};
  const debug$1 = typeof process$1 === "object" && define_process_env_default && define_process_env_default.NODE_DEBUG && /\bsemver\b/i.test(define_process_env_default.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
  };
  var debug_1 = debug$1;
  (function(module, exports2) {
    const {
      MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH2,
      MAX_SAFE_BUILD_LENGTH: MAX_SAFE_BUILD_LENGTH2,
      MAX_LENGTH: MAX_LENGTH2
    } = constants$1;
    const debug2 = debug_1;
    exports2 = module.exports = {};
    const re2 = exports2.re = [];
    const safeRe = exports2.safeRe = [];
    const src = exports2.src = [];
    const t2 = exports2.t = {};
    let R2 = 0;
    const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    const safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH2],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH2]
    ];
    const makeSafeRegex = (value) => {
      for (const [token, max2] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max2}}`).split(`${token}+`).join(`${token}{1,${max2}}`);
      }
      return value;
    };
    const createToken = (name2, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R2++;
      debug2(name2, index, value);
      t2[name2] = index;
      src[index] = value;
      re2[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t2.NUMERICIDENTIFIER]}|${src[t2.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t2.NUMERICIDENTIFIERLOOSE]}|${src[t2.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t2.PRERELEASEIDENTIFIER]}(?:\\.${src[t2.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t2.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t2.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t2.BUILDIDENTIFIER]}(?:\\.${src[t2.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t2.MAINVERSION]}${src[t2.PRERELEASE]}?${src[t2.BUILD]}?`);
    createToken("FULL", `^${src[t2.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t2.MAINVERSIONLOOSE]}${src[t2.PRERELEASELOOSE]}?${src[t2.BUILD]}?`);
    createToken("LOOSE", `^${src[t2.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t2.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t2.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:${src[t2.PRERELEASE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:${src[t2.PRERELEASELOOSE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH2}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}}))?`);
    createToken("COERCE", `${src[t2.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src[t2.COERCEPLAIN] + `(?:${src[t2.PRERELEASE]})?(?:${src[t2.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t2.COERCE], true);
    createToken("COERCERTLFULL", src[t2.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t2.LONETILDE]}\\s+`, true);
    exports2.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t2.LONECARET]}\\s+`, true);
    exports2.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t2.GTLT]}\\s*(${src[t2.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]}|${src[t2.XRANGEPLAIN]})`, true);
    exports2.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t2.XRANGEPLAIN]})\\s+-\\s+(${src[t2.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t2.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t2.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  })(re$2, re$2.exports);
  var reExports = re$2.exports;
  const looseOption = Object.freeze({ loose: true });
  const emptyOpts = Object.freeze({});
  const parseOptions$1 = (options) => {
    if (!options) {
      return emptyOpts;
    }
    if (typeof options !== "object") {
      return looseOption;
    }
    return options;
  };
  var parseOptions_1 = parseOptions$1;
  const numeric = /^[0-9]+$/;
  const compareIdentifiers$1 = (a, b) => {
    const anum2 = numeric.test(a);
    const bnum = numeric.test(b);
    if (anum2 && bnum) {
      a = +a;
      b = +b;
    }
    return a === b ? 0 : anum2 && !bnum ? -1 : bnum && !anum2 ? 1 : a < b ? -1 : 1;
  };
  const rcompareIdentifiers = (a, b) => compareIdentifiers$1(b, a);
  var identifiers$1 = {
    compareIdentifiers: compareIdentifiers$1,
    rcompareIdentifiers
  };
  const debug = debug_1;
  const { MAX_LENGTH, MAX_SAFE_INTEGER } = constants$1;
  const { safeRe: re$1, t: t$1 } = reExports;
  const parseOptions = parseOptions_1;
  const { compareIdentifiers } = identifiers$1;
  let SemVer$d = class SemVer2 {
    constructor(version2, options) {
      options = parseOptions(options);
      if (version2 instanceof SemVer2) {
        if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
          return version2;
        } else {
          version2 = version2.version;
        }
      } else if (typeof version2 !== "string") {
        throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version2}".`);
      }
      if (version2.length > MAX_LENGTH) {
        throw new TypeError(
          `version is longer than ${MAX_LENGTH} characters`
        );
      }
      debug("SemVer", version2, options);
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      const m = version2.trim().match(options.loose ? re$1[t$1.LOOSE] : re$1[t$1.FULL]);
      if (!m) {
        throw new TypeError(`Invalid Version: ${version2}`);
      }
      this.raw = version2;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map((id2) => {
          if (/^[0-9]+$/.test(id2)) {
            const num = +id2;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id2;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    format() {
      this.version = `${this.major}.${this.minor}.${this.patch}`;
      if (this.prerelease.length) {
        this.version += `-${this.prerelease.join(".")}`;
      }
      return this.version;
    }
    toString() {
      return this.version;
    }
    compare(other) {
      debug("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer2)) {
        if (typeof other === "string" && other === this.version) {
          return 0;
        }
        other = new SemVer2(other, this.options);
      }
      if (other.version === this.version) {
        return 0;
      }
      return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
      if (!(other instanceof SemVer2)) {
        other = new SemVer2(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
      if (!(other instanceof SemVer2)) {
        other = new SemVer2(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      let i2 = 0;
      do {
        const a = this.prerelease[i2];
        const b = other.prerelease[i2];
        debug("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    }
    compareBuild(other) {
      if (!(other instanceof SemVer2)) {
        other = new SemVer2(other, this.options);
      }
      let i2 = 0;
      do {
        const a = this.build[i2];
        const b = other.build[i2];
        debug("build compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    }
    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier, identifierBase);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier, identifierBase);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier, identifierBase);
          this.inc("pre", identifier, identifierBase);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier, identifierBase);
          }
          this.inc("pre", identifier, identifierBase);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre": {
          const base2 = Number(identifierBase) ? 1 : 0;
          if (!identifier && identifierBase === false) {
            throw new Error("invalid increment argument: identifier is empty");
          }
          if (this.prerelease.length === 0) {
            this.prerelease = [base2];
          } else {
            let i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              if (identifier === this.prerelease.join(".") && identifierBase === false) {
                throw new Error("invalid increment argument: identifier already exists");
              }
              this.prerelease.push(base2);
            }
          }
          if (identifier) {
            let prerelease2 = [identifier, base2];
            if (identifierBase === false) {
              prerelease2 = [identifier];
            }
            if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = prerelease2;
              }
            } else {
              this.prerelease = prerelease2;
            }
          }
          break;
        }
        default:
          throw new Error(`invalid increment argument: ${release}`);
      }
      this.raw = this.format();
      if (this.build.length) {
        this.raw += `+${this.build.join(".")}`;
      }
      return this;
    }
  };
  var semver$1 = SemVer$d;
  const SemVer$c = semver$1;
  const parse$6 = (version2, options, throwErrors = false) => {
    if (version2 instanceof SemVer$c) {
      return version2;
    }
    try {
      return new SemVer$c(version2, options);
    } catch (er) {
      if (!throwErrors) {
        return null;
      }
      throw er;
    }
  };
  var parse_1 = parse$6;
  const parse$5 = parse_1;
  const valid$2 = (version2, options) => {
    const v = parse$5(version2, options);
    return v ? v.version : null;
  };
  var valid_1 = valid$2;
  const parse$4 = parse_1;
  const clean$1 = (version2, options) => {
    const s2 = parse$4(version2.trim().replace(/^[=v]+/, ""), options);
    return s2 ? s2.version : null;
  };
  var clean_1 = clean$1;
  const SemVer$b = semver$1;
  const inc$1 = (version2, release, options, identifier, identifierBase) => {
    if (typeof options === "string") {
      identifierBase = identifier;
      identifier = options;
      options = void 0;
    }
    try {
      return new SemVer$b(
        version2 instanceof SemVer$b ? version2.version : version2,
        options
      ).inc(release, identifier, identifierBase).version;
    } catch (er) {
      return null;
    }
  };
  var inc_1 = inc$1;
  const parse$3 = parse_1;
  const diff$1 = (version1, version2) => {
    const v1 = parse$3(version1, null, true);
    const v2 = parse$3(version2, null, true);
    const comparison = v1.compare(v2);
    if (comparison === 0) {
      return null;
    }
    const v1Higher = comparison > 0;
    const highVersion = v1Higher ? v1 : v2;
    const lowVersion = v1Higher ? v2 : v1;
    const highHasPre = !!highVersion.prerelease.length;
    const lowHasPre = !!lowVersion.prerelease.length;
    if (lowHasPre && !highHasPre) {
      if (!lowVersion.patch && !lowVersion.minor) {
        return "major";
      }
      if (highVersion.patch) {
        return "patch";
      }
      if (highVersion.minor) {
        return "minor";
      }
      return "major";
    }
    const prefix = highHasPre ? "pre" : "";
    if (v1.major !== v2.major) {
      return prefix + "major";
    }
    if (v1.minor !== v2.minor) {
      return prefix + "minor";
    }
    if (v1.patch !== v2.patch) {
      return prefix + "patch";
    }
    return "prerelease";
  };
  var diff_1 = diff$1;
  const SemVer$a = semver$1;
  const major$1 = (a, loose) => new SemVer$a(a, loose).major;
  var major_1 = major$1;
  const SemVer$9 = semver$1;
  const minor$1 = (a, loose) => new SemVer$9(a, loose).minor;
  var minor_1 = minor$1;
  const SemVer$8 = semver$1;
  const patch$1 = (a, loose) => new SemVer$8(a, loose).patch;
  var patch_1 = patch$1;
  const parse$2 = parse_1;
  const prerelease$1 = (version2, options) => {
    const parsed = parse$2(version2, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  };
  var prerelease_1 = prerelease$1;
  const SemVer$7 = semver$1;
  const compare$b = (a, b, loose) => new SemVer$7(a, loose).compare(new SemVer$7(b, loose));
  var compare_1 = compare$b;
  const compare$a = compare_1;
  const rcompare$1 = (a, b, loose) => compare$a(b, a, loose);
  var rcompare_1 = rcompare$1;
  const compare$9 = compare_1;
  const compareLoose$1 = (a, b) => compare$9(a, b, true);
  var compareLoose_1 = compareLoose$1;
  const SemVer$6 = semver$1;
  const compareBuild$3 = (a, b, loose) => {
    const versionA = new SemVer$6(a, loose);
    const versionB = new SemVer$6(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  };
  var compareBuild_1 = compareBuild$3;
  const compareBuild$2 = compareBuild_1;
  const sort$1 = (list, loose) => list.sort((a, b) => compareBuild$2(a, b, loose));
  var sort_1 = sort$1;
  const compareBuild$1 = compareBuild_1;
  const rsort$1 = (list, loose) => list.sort((a, b) => compareBuild$1(b, a, loose));
  var rsort_1 = rsort$1;
  const compare$8 = compare_1;
  const gt$4 = (a, b, loose) => compare$8(a, b, loose) > 0;
  var gt_1 = gt$4;
  const compare$7 = compare_1;
  const lt$3 = (a, b, loose) => compare$7(a, b, loose) < 0;
  var lt_1 = lt$3;
  const compare$6 = compare_1;
  const eq$2 = (a, b, loose) => compare$6(a, b, loose) === 0;
  var eq_1 = eq$2;
  const compare$5 = compare_1;
  const neq$2 = (a, b, loose) => compare$5(a, b, loose) !== 0;
  var neq_1 = neq$2;
  const compare$4 = compare_1;
  const gte$3 = (a, b, loose) => compare$4(a, b, loose) >= 0;
  var gte_1 = gte$3;
  const compare$3 = compare_1;
  const lte$3 = (a, b, loose) => compare$3(a, b, loose) <= 0;
  var lte_1 = lte$3;
  const eq$1 = eq_1;
  const neq$1 = neq_1;
  const gt$3 = gt_1;
  const gte$2 = gte_1;
  const lt$2 = lt_1;
  const lte$2 = lte_1;
  const cmp$1 = (a, op, b, loose) => {
    switch (op) {
      case "===":
        if (typeof a === "object") {
          a = a.version;
        }
        if (typeof b === "object") {
          b = b.version;
        }
        return a === b;
      case "!==":
        if (typeof a === "object") {
          a = a.version;
        }
        if (typeof b === "object") {
          b = b.version;
        }
        return a !== b;
      case "":
      case "=":
      case "==":
        return eq$1(a, b, loose);
      case "!=":
        return neq$1(a, b, loose);
      case ">":
        return gt$3(a, b, loose);
      case ">=":
        return gte$2(a, b, loose);
      case "<":
        return lt$2(a, b, loose);
      case "<=":
        return lte$2(a, b, loose);
      default:
        throw new TypeError(`Invalid operator: ${op}`);
    }
  };
  var cmp_1 = cmp$1;
  const SemVer$5 = semver$1;
  const parse$1 = parse_1;
  const { safeRe: re, t } = reExports;
  const coerce$1 = (version2, options) => {
    if (version2 instanceof SemVer$5) {
      return version2;
    }
    if (typeof version2 === "number") {
      version2 = String(version2);
    }
    if (typeof version2 !== "string") {
      return null;
    }
    options = options || {};
    let match = null;
    if (!options.rtl) {
      match = version2.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
    } else {
      const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
      let next;
      while ((next = coerceRtlRegex.exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
        if (!match || next.index + next[0].length !== match.index + match[0].length) {
          match = next;
        }
        coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
      }
      coerceRtlRegex.lastIndex = -1;
    }
    if (match === null) {
      return null;
    }
    const major2 = match[2];
    const minor2 = match[3] || "0";
    const patch2 = match[4] || "0";
    const prerelease2 = options.includePrerelease && match[5] ? `-${match[5]}` : "";
    const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
    return parse$1(`${major2}.${minor2}.${patch2}${prerelease2}${build}`, options);
  };
  var coerce_1 = coerce$1;
  class LRUCache {
    constructor() {
      this.max = 1e3;
      this.map = /* @__PURE__ */ new Map();
    }
    get(key2) {
      const value = this.map.get(key2);
      if (value === void 0) {
        return void 0;
      } else {
        this.map.delete(key2);
        this.map.set(key2, value);
        return value;
      }
    }
    delete(key2) {
      return this.map.delete(key2);
    }
    set(key2, value) {
      const deleted = this.delete(key2);
      if (!deleted && value !== void 0) {
        if (this.map.size >= this.max) {
          const firstKey = this.map.keys().next().value;
          this.delete(firstKey);
        }
        this.map.set(key2, value);
      }
      return this;
    }
  }
  var lrucache = LRUCache;
  var range;
  var hasRequiredRange;
  function requireRange() {
    if (hasRequiredRange) return range;
    hasRequiredRange = 1;
    const SPACE_CHARACTERS = /\s+/g;
    class Range2 {
      constructor(range2, options) {
        options = parseOptions2(options);
        if (range2 instanceof Range2) {
          if (range2.loose === !!options.loose && range2.includePrerelease === !!options.includePrerelease) {
            return range2;
          } else {
            return new Range2(range2.raw, options);
          }
        }
        if (range2 instanceof Comparator2) {
          this.raw = range2.value;
          this.set = [[range2]];
          this.formatted = void 0;
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range2.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r2) => this.parseRange(r2.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i2 = 0; i2 < this.set.length; i2++) {
            if (i2 > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i2];
            for (let k = 0; k < comps.length; k++) {
              if (k > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range2) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range2;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re2[t2.HYPHENRANGELOOSE] : re2[t2.HYPHENRANGE];
        range2 = range2.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug2("hyphen replace", range2);
        range2 = range2.replace(re2[t2.COMPARATORTRIM], comparatorTrimReplace);
        debug2("comparator trim", range2);
        range2 = range2.replace(re2[t2.TILDETRIM], tildeTrimReplace);
        debug2("tilde trim", range2);
        range2 = range2.replace(re2[t2.CARETTRIM], caretTrimReplace);
        debug2("caret trim", range2);
        let rangeList = range2.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug2("loose invalid filter", comp, this.options);
            return !!comp.match(re2[t2.COMPARATORLOOSE]);
          });
        }
        debug2("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator2(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range2, options) {
        if (!(range2 instanceof Range2)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range2.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer2(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i2 = 0; i2 < this.set.length; i2++) {
          if (testSet(this.set[i2], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    }
    range = Range2;
    const LRU = lrucache;
    const cache = new LRU();
    const parseOptions2 = parseOptions_1;
    const Comparator2 = requireComparator();
    const debug2 = debug_1;
    const SemVer2 = semver$1;
    const {
      safeRe: re2,
      t: t2,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = reExports;
    const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = constants$1;
    const isNullSet = (c) => c.value === "<0.0.0-0";
    const isAny = (c) => c.value === "";
    const isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    const parseComparator = (comp, options) => {
      debug2("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug2("caret", comp);
      comp = replaceTildes(comp, options);
      debug2("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug2("xrange", comp);
      comp = replaceStars(comp, options);
      debug2("stars", comp);
      return comp;
    };
    const isX = (id2) => !id2 || id2.toLowerCase() === "x" || id2 === "*";
    const replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
    };
    const replaceTilde = (comp, options) => {
      const r2 = options.loose ? re2[t2.TILDELOOSE] : re2[t2.TILDE];
      return comp.replace(r2, (_, M, m, p, pr) => {
        debug2("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug2("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug2("tilde return", ret);
        return ret;
      });
    };
    const replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
    };
    const replaceCaret = (comp, options) => {
      debug2("caret", comp, options);
      const r2 = options.loose ? re2[t2.CARETLOOSE] : re2[t2.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r2, (_, M, m, p, pr) => {
        debug2("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug2("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug2("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug2("caret return", ret);
        return ret;
      });
    };
    const replaceXRanges = (comp, options) => {
      debug2("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
    };
    const replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r2 = options.loose ? re2[t2.XRANGELOOSE] : re2[t2.XRANGE];
      return comp.replace(r2, (ret, gtlt, M, m, p, pr) => {
        debug2("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug2("xRange return", ret);
        return ret;
      });
    };
    const replaceStars = (comp, options) => {
      debug2("replaceStars", comp, options);
      return comp.trim().replace(re2[t2.STAR], "");
    };
    const replaceGTE0 = (comp, options) => {
      debug2("replaceGTE0", comp, options);
      return comp.trim().replace(re2[options.includePrerelease ? t2.GTE0PRE : t2.GTE0], "");
    };
    const hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    const testSet = (set2, version2, options) => {
      for (let i2 = 0; i2 < set2.length; i2++) {
        if (!set2[i2].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i2 = 0; i2 < set2.length; i2++) {
          debug2(set2[i2].semver);
          if (set2[i2].semver === Comparator2.ANY) {
            continue;
          }
          if (set2[i2].semver.prerelease.length > 0) {
            const allowed = set2[i2].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
    return range;
  }
  var comparator;
  var hasRequiredComparator;
  function requireComparator() {
    if (hasRequiredComparator) return comparator;
    hasRequiredComparator = 1;
    const ANY2 = Symbol("SemVer ANY");
    class Comparator2 {
      static get ANY() {
        return ANY2;
      }
      constructor(comp, options) {
        options = parseOptions2(options);
        if (comp instanceof Comparator2) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug2("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY2) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug2("comp", this);
      }
      parse(comp) {
        const r2 = this.options.loose ? re2[t2.COMPARATORLOOSE] : re2[t2.COMPARATOR];
        const m = comp.match(r2);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY2;
        } else {
          this.semver = new SemVer2(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug2("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY2 || version2 === ANY2) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer2(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp2(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator2)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range2(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range2(this.value, options).test(comp.semver);
        }
        options = parseOptions2(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp2(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp2(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    }
    comparator = Comparator2;
    const parseOptions2 = parseOptions_1;
    const { safeRe: re2, t: t2 } = reExports;
    const cmp2 = cmp_1;
    const debug2 = debug_1;
    const SemVer2 = semver$1;
    const Range2 = requireRange();
    return comparator;
  }
  const Range$9 = requireRange();
  const satisfies$4 = (version2, range2, options) => {
    try {
      range2 = new Range$9(range2, options);
    } catch (er) {
      return false;
    }
    return range2.test(version2);
  };
  var satisfies_1 = satisfies$4;
  const Range$8 = requireRange();
  const toComparators$1 = (range2, options) => new Range$8(range2, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
  var toComparators_1 = toComparators$1;
  const SemVer$4 = semver$1;
  const Range$7 = requireRange();
  const maxSatisfying$1 = (versions2, range2, options) => {
    let max2 = null;
    let maxSV = null;
    let rangeObj = null;
    try {
      rangeObj = new Range$7(range2, options);
    } catch (er) {
      return null;
    }
    versions2.forEach((v) => {
      if (rangeObj.test(v)) {
        if (!max2 || maxSV.compare(v) === -1) {
          max2 = v;
          maxSV = new SemVer$4(max2, options);
        }
      }
    });
    return max2;
  };
  var maxSatisfying_1 = maxSatisfying$1;
  const SemVer$3 = semver$1;
  const Range$6 = requireRange();
  const minSatisfying$1 = (versions2, range2, options) => {
    let min2 = null;
    let minSV = null;
    let rangeObj = null;
    try {
      rangeObj = new Range$6(range2, options);
    } catch (er) {
      return null;
    }
    versions2.forEach((v) => {
      if (rangeObj.test(v)) {
        if (!min2 || minSV.compare(v) === 1) {
          min2 = v;
          minSV = new SemVer$3(min2, options);
        }
      }
    });
    return min2;
  };
  var minSatisfying_1 = minSatisfying$1;
  const SemVer$2 = semver$1;
  const Range$5 = requireRange();
  const gt$2 = gt_1;
  const minVersion$1 = (range2, loose) => {
    range2 = new Range$5(range2, loose);
    let minver = new SemVer$2("0.0.0");
    if (range2.test(minver)) {
      return minver;
    }
    minver = new SemVer$2("0.0.0-0");
    if (range2.test(minver)) {
      return minver;
    }
    minver = null;
    for (let i2 = 0; i2 < range2.set.length; ++i2) {
      const comparators = range2.set[i2];
      let setMin = null;
      comparators.forEach((comparator2) => {
        const compver = new SemVer$2(comparator2.semver.version);
        switch (comparator2.operator) {
          case ">":
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }
            compver.raw = compver.format();
          case "":
          case ">=":
            if (!setMin || gt$2(compver, setMin)) {
              setMin = compver;
            }
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error(`Unexpected operation: ${comparator2.operator}`);
        }
      });
      if (setMin && (!minver || gt$2(minver, setMin))) {
        minver = setMin;
      }
    }
    if (minver && range2.test(minver)) {
      return minver;
    }
    return null;
  };
  var minVersion_1 = minVersion$1;
  const Range$4 = requireRange();
  const validRange$1 = (range2, options) => {
    try {
      return new Range$4(range2, options).range || "*";
    } catch (er) {
      return null;
    }
  };
  var valid$1 = validRange$1;
  const SemVer$1 = semver$1;
  const Comparator$2 = requireComparator();
  const { ANY: ANY$1 } = Comparator$2;
  const Range$3 = requireRange();
  const satisfies$3 = satisfies_1;
  const gt$1 = gt_1;
  const lt$1 = lt_1;
  const lte$1 = lte_1;
  const gte$1 = gte_1;
  const outside$3 = (version2, range2, hilo, options) => {
    version2 = new SemVer$1(version2, options);
    range2 = new Range$3(range2, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt$1;
        ltefn = lte$1;
        ltfn = lt$1;
        comp = ">";
        ecomp = ">=";
        break;
      case "<":
        gtfn = lt$1;
        ltefn = gte$1;
        ltfn = gt$1;
        comp = "<";
        ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies$3(version2, range2, options)) {
      return false;
    }
    for (let i2 = 0; i2 < range2.set.length; ++i2) {
      const comparators = range2.set[i2];
      let high = null;
      let low = null;
      comparators.forEach((comparator2) => {
        if (comparator2.semver === ANY$1) {
          comparator2 = new Comparator$2(">=0.0.0");
        }
        high = high || comparator2;
        low = low || comparator2;
        if (gtfn(comparator2.semver, high.semver, options)) {
          high = comparator2;
        } else if (ltfn(comparator2.semver, low.semver, options)) {
          low = comparator2;
        }
      });
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }
      if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
        return false;
      }
    }
    return true;
  };
  var outside_1 = outside$3;
  const outside$2 = outside_1;
  const gtr$1 = (version2, range2, options) => outside$2(version2, range2, ">", options);
  var gtr_1 = gtr$1;
  const outside$1 = outside_1;
  const ltr$1 = (version2, range2, options) => outside$1(version2, range2, "<", options);
  var ltr_1 = ltr$1;
  const Range$2 = requireRange();
  const intersects$1 = (r1, r2, options) => {
    r1 = new Range$2(r1, options);
    r2 = new Range$2(r2, options);
    return r1.intersects(r2, options);
  };
  var intersects_1 = intersects$1;
  const satisfies$2 = satisfies_1;
  const compare$2 = compare_1;
  var simplify = (versions2, range2, options) => {
    const set2 = [];
    let first = null;
    let prev = null;
    const v = versions2.sort((a, b) => compare$2(a, b, options));
    for (const version2 of v) {
      const included = satisfies$2(version2, range2, options);
      if (included) {
        prev = version2;
        if (!first) {
          first = version2;
        }
      } else {
        if (prev) {
          set2.push([first, prev]);
        }
        prev = null;
        first = null;
      }
    }
    if (first) {
      set2.push([first, null]);
    }
    const ranges = [];
    for (const [min2, max2] of set2) {
      if (min2 === max2) {
        ranges.push(min2);
      } else if (!max2 && min2 === v[0]) {
        ranges.push("*");
      } else if (!max2) {
        ranges.push(`>=${min2}`);
      } else if (min2 === v[0]) {
        ranges.push(`<=${max2}`);
      } else {
        ranges.push(`${min2} - ${max2}`);
      }
    }
    const simplified = ranges.join(" || ");
    const original = typeof range2.raw === "string" ? range2.raw : String(range2);
    return simplified.length < original.length ? simplified : range2;
  };
  const Range$1 = requireRange();
  const Comparator$1 = requireComparator();
  const { ANY } = Comparator$1;
  const satisfies$1 = satisfies_1;
  const compare$1 = compare_1;
  const subset$1 = (sub, dom, options = {}) => {
    if (sub === dom) {
      return true;
    }
    sub = new Range$1(sub, options);
    dom = new Range$1(dom, options);
    let sawNonNull = false;
    OUTER: for (const simpleSub of sub.set) {
      for (const simpleDom of dom.set) {
        const isSub = simpleSubset(simpleSub, simpleDom, options);
        sawNonNull = sawNonNull || isSub !== null;
        if (isSub) {
          continue OUTER;
        }
      }
      if (sawNonNull) {
        return false;
      }
    }
    return true;
  };
  const minimumVersionWithPreRelease = [new Comparator$1(">=0.0.0-0")];
  const minimumVersion = [new Comparator$1(">=0.0.0")];
  const simpleSubset = (sub, dom, options) => {
    if (sub === dom) {
      return true;
    }
    if (sub.length === 1 && sub[0].semver === ANY) {
      if (dom.length === 1 && dom[0].semver === ANY) {
        return true;
      } else if (options.includePrerelease) {
        sub = minimumVersionWithPreRelease;
      } else {
        sub = minimumVersion;
      }
    }
    if (dom.length === 1 && dom[0].semver === ANY) {
      if (options.includePrerelease) {
        return true;
      } else {
        dom = minimumVersion;
      }
    }
    const eqSet = /* @__PURE__ */ new Set();
    let gt2, lt2;
    for (const c of sub) {
      if (c.operator === ">" || c.operator === ">=") {
        gt2 = higherGT(gt2, c, options);
      } else if (c.operator === "<" || c.operator === "<=") {
        lt2 = lowerLT(lt2, c, options);
      } else {
        eqSet.add(c.semver);
      }
    }
    if (eqSet.size > 1) {
      return null;
    }
    let gtltComp;
    if (gt2 && lt2) {
      gtltComp = compare$1(gt2.semver, lt2.semver, options);
      if (gtltComp > 0) {
        return null;
      } else if (gtltComp === 0 && (gt2.operator !== ">=" || lt2.operator !== "<=")) {
        return null;
      }
    }
    for (const eq2 of eqSet) {
      if (gt2 && !satisfies$1(eq2, String(gt2), options)) {
        return null;
      }
      if (lt2 && !satisfies$1(eq2, String(lt2), options)) {
        return null;
      }
      for (const c of dom) {
        if (!satisfies$1(eq2, String(c), options)) {
          return false;
        }
      }
      return true;
    }
    let higher, lower;
    let hasDomLT, hasDomGT;
    let needDomLTPre = lt2 && !options.includePrerelease && lt2.semver.prerelease.length ? lt2.semver : false;
    let needDomGTPre = gt2 && !options.includePrerelease && gt2.semver.prerelease.length ? gt2.semver : false;
    if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt2.operator === "<" && needDomLTPre.prerelease[0] === 0) {
      needDomLTPre = false;
    }
    for (const c of dom) {
      hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
      hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
      if (gt2) {
        if (needDomGTPre) {
          if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
            needDomGTPre = false;
          }
        }
        if (c.operator === ">" || c.operator === ">=") {
          higher = higherGT(gt2, c, options);
          if (higher === c && higher !== gt2) {
            return false;
          }
        } else if (gt2.operator === ">=" && !satisfies$1(gt2.semver, String(c), options)) {
          return false;
        }
      }
      if (lt2) {
        if (needDomLTPre) {
          if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
            needDomLTPre = false;
          }
        }
        if (c.operator === "<" || c.operator === "<=") {
          lower = lowerLT(lt2, c, options);
          if (lower === c && lower !== lt2) {
            return false;
          }
        } else if (lt2.operator === "<=" && !satisfies$1(lt2.semver, String(c), options)) {
          return false;
        }
      }
      if (!c.operator && (lt2 || gt2) && gtltComp !== 0) {
        return false;
      }
    }
    if (gt2 && hasDomLT && !lt2 && gtltComp !== 0) {
      return false;
    }
    if (lt2 && hasDomGT && !gt2 && gtltComp !== 0) {
      return false;
    }
    if (needDomGTPre || needDomLTPre) {
      return false;
    }
    return true;
  };
  const higherGT = (a, b, options) => {
    if (!a) {
      return b;
    }
    const comp = compare$1(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
  };
  const lowerLT = (a, b, options) => {
    if (!a) {
      return b;
    }
    const comp = compare$1(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
  };
  var subset_1 = subset$1;
  const internalRe = reExports;
  const constants = constants$1;
  const SemVer = semver$1;
  const identifiers = identifiers$1;
  const parse = parse_1;
  const valid = valid_1;
  const clean = clean_1;
  const inc = inc_1;
  const diff = diff_1;
  const major = major_1;
  const minor = minor_1;
  const patch = patch_1;
  const prerelease = prerelease_1;
  const compare = compare_1;
  const rcompare = rcompare_1;
  const compareLoose = compareLoose_1;
  const compareBuild = compareBuild_1;
  const sort = sort_1;
  const rsort = rsort_1;
  const gt = gt_1;
  const lt = lt_1;
  const eq = eq_1;
  const neq = neq_1;
  const gte = gte_1;
  const lte = lte_1;
  const cmp = cmp_1;
  const coerce = coerce_1;
  const Comparator = requireComparator();
  const Range = requireRange();
  const satisfies = satisfies_1;
  const toComparators = toComparators_1;
  const maxSatisfying = maxSatisfying_1;
  const minSatisfying = minSatisfying_1;
  const minVersion = minVersion_1;
  const validRange = valid$1;
  const outside = outside_1;
  const gtr = gtr_1;
  const ltr = ltr_1;
  const intersects = intersects_1;
  const simplifyRange = simplify;
  const subset = subset_1;
  var semver = {
    parse,
    valid,
    clean,
    inc,
    diff,
    major,
    minor,
    patch,
    prerelease,
    compare,
    rcompare,
    compareLoose,
    compareBuild,
    sort,
    rsort,
    gt,
    lt,
    eq,
    neq,
    gte,
    lte,
    cmp,
    coerce,
    Comparator,
    Range,
    satisfies,
    toComparators,
    maxSatisfying,
    minSatisfying,
    minVersion,
    validRange,
    outside,
    gtr,
    ltr,
    intersects,
    simplifyRange,
    subset,
    SemVer,
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: constants.RELEASE_TYPES,
    compareIdentifiers: identifiers.compareIdentifiers,
    rcompareIdentifiers: identifiers.rcompareIdentifiers
  };
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.satisfiesVersionRange = exports2.gtRange = exports2.gtVersion = exports2.assertIsSemVerRange = exports2.assertIsSemVerVersion = exports2.isValidSemVerRange = exports2.isValidSemVerVersion = exports2.VersionRangeStruct = exports2.VersionStruct = void 0;
    const superstruct_12 = dist$1;
    const semver_1 = semver;
    const assert_12 = assert$2;
    exports2.VersionStruct = (0, superstruct_12.refine)((0, superstruct_12.string)(), "Version", (value) => {
      if ((0, semver_1.valid)(value) === null) {
        return `Expected SemVer version, got "${value}"`;
      }
      return true;
    });
    exports2.VersionRangeStruct = (0, superstruct_12.refine)((0, superstruct_12.string)(), "Version range", (value) => {
      if ((0, semver_1.validRange)(value) === null) {
        return `Expected SemVer range, got "${value}"`;
      }
      return true;
    });
    function isValidSemVerVersion(version2) {
      return (0, superstruct_12.is)(version2, exports2.VersionStruct);
    }
    exports2.isValidSemVerVersion = isValidSemVerVersion;
    function isValidSemVerRange(versionRange) {
      return (0, superstruct_12.is)(versionRange, exports2.VersionRangeStruct);
    }
    exports2.isValidSemVerRange = isValidSemVerRange;
    function assertIsSemVerVersion(version2) {
      (0, assert_12.assertStruct)(version2, exports2.VersionStruct);
    }
    exports2.assertIsSemVerVersion = assertIsSemVerVersion;
    function assertIsSemVerRange(range2) {
      (0, assert_12.assertStruct)(range2, exports2.VersionRangeStruct);
    }
    exports2.assertIsSemVerRange = assertIsSemVerRange;
    function gtVersion(version1, version2) {
      return (0, semver_1.gt)(version1, version2);
    }
    exports2.gtVersion = gtVersion;
    function gtRange(version2, range2) {
      return (0, semver_1.gtr)(version2, range2);
    }
    exports2.gtRange = gtRange;
    function satisfiesVersionRange(version2, versionRange) {
      return (0, semver_1.satisfies)(version2, versionRange, {
        includePrerelease: true
      });
    }
    exports2.satisfiesVersionRange = satisfiesVersionRange;
  })(versions);
  (function(exports2) {
    var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(assert$2, exports2);
    __exportStar(base64$1, exports2);
    __exportStar(requireBytes(), exports2);
    __exportStar(caipTypes, exports2);
    __exportStar(checksum, exports2);
    __exportStar(coercers, exports2);
    __exportStar(collections, exports2);
    __exportStar(encryptionTypes, exports2);
    __exportStar(errors$1, exports2);
    __exportStar(requireHex(), exports2);
    __exportStar(json, exports2);
    __exportStar(keyring, exports2);
    __exportStar(logging, exports2);
    __exportStar(misc, exports2);
    __exportStar(number$1, exports2);
    __exportStar(opaque, exports2);
    __exportStar(promise, exports2);
    __exportStar(superstruct, exports2);
    __exportStar(time, exports2);
    __exportStar(transactionTypes, exports2);
    __exportStar(versions, exports2);
  })(dist$2);
  Object.defineProperty(utils$3, "__esModule", { value: true });
  utils$3.normalize = utils$3.recoverPublicKey = utils$3.concatSig = utils$3.legacyToBuffer = utils$3.isNullish = utils$3.padWithZeroes = void 0;
  const util_1$2 = dist$4;
  const utils_1$7 = dist$2;
  function padWithZeroes(hexString, targetLength) {
    if (hexString !== "" && !/^[a-f0-9]+$/iu.test(hexString)) {
      throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);
    }
    if (targetLength < 0) {
      throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);
    }
    return String.prototype.padStart.call(hexString, targetLength, "0");
  }
  utils$3.padWithZeroes = padWithZeroes;
  function isNullish(value) {
    return value === null || value === void 0;
  }
  utils$3.isNullish = isNullish;
  function legacyToBuffer(value) {
    return typeof value === "string" && !(0, util_1$2.isHexString)(value) ? Buffer.from(value) : (0, util_1$2.toBuffer)(value);
  }
  utils$3.legacyToBuffer = legacyToBuffer;
  function concatSig(v, r2, s2) {
    const rSig = (0, util_1$2.fromSigned)(r2);
    const sSig = (0, util_1$2.fromSigned)(s2);
    const vSig = (0, util_1$2.bufferToInt)(v);
    const rStr = padWithZeroes((0, util_1$2.toUnsigned)(rSig).toString("hex"), 64);
    const sStr = padWithZeroes((0, util_1$2.toUnsigned)(sSig).toString("hex"), 64);
    const vStr = (0, utils_1$7.remove0x)((0, utils_1$7.numberToHex)(vSig));
    return (0, utils_1$7.add0x)(rStr.concat(sStr, vStr));
  }
  utils$3.concatSig = concatSig;
  function recoverPublicKey(messageHash, signature2) {
    const sigParams = (0, util_1$2.fromRpcSig)(signature2);
    return (0, util_1$2.ecrecover)(messageHash, sigParams.v, sigParams.r, sigParams.s);
  }
  utils$3.recoverPublicKey = recoverPublicKey;
  function normalize(input) {
    if (isNullish(input)) {
      return void 0;
    }
    if (typeof input === "number") {
      if (input < 0) {
        return "0x";
      }
      const buffer2 = (0, utils_1$7.numberToBytes)(input);
      input = (0, utils_1$7.bytesToHex)(buffer2);
    }
    if (typeof input !== "string") {
      let msg = "eth-sig-util.normalize() requires hex string or integer input.";
      msg += ` received ${typeof input}: ${input}`;
      throw new Error(msg);
    }
    return (0, utils_1$7.add0x)(input.toLowerCase());
  }
  utils$3.normalize = normalize;
  Object.defineProperty(personalSign$1, "__esModule", { value: true });
  personalSign$1.extractPublicKey = personalSign$1.recoverPersonalSignature = personalSign$1.personalSign = void 0;
  const util_1$1 = dist$4;
  const utils_1$6 = utils$3;
  function personalSign({ privateKey, data }) {
    if ((0, utils_1$6.isNullish)(data)) {
      throw new Error("Missing data parameter");
    } else if ((0, utils_1$6.isNullish)(privateKey)) {
      throw new Error("Missing privateKey parameter");
    }
    const message = (0, utils_1$6.legacyToBuffer)(data);
    const msgHash = (0, util_1$1.hashPersonalMessage)(message);
    const sig = (0, util_1$1.ecsign)(msgHash, privateKey);
    const serialized = (0, utils_1$6.concatSig)((0, util_1$1.toBuffer)(sig.v), sig.r, sig.s);
    return serialized;
  }
  personalSign$1.personalSign = personalSign;
  function recoverPersonalSignature({ data, signature: signature2 }) {
    if ((0, utils_1$6.isNullish)(data)) {
      throw new Error("Missing data parameter");
    } else if ((0, utils_1$6.isNullish)(signature2)) {
      throw new Error("Missing signature parameter");
    }
    const publicKey = getPublicKeyFor(data, signature2);
    const sender = (0, util_1$1.publicToAddress)(publicKey);
    const senderHex = (0, util_1$1.bufferToHex)(sender);
    return senderHex;
  }
  personalSign$1.recoverPersonalSignature = recoverPersonalSignature;
  function extractPublicKey({ data, signature: signature2 }) {
    if ((0, utils_1$6.isNullish)(data)) {
      throw new Error("Missing data parameter");
    } else if ((0, utils_1$6.isNullish)(signature2)) {
      throw new Error("Missing signature parameter");
    }
    const publicKey = getPublicKeyFor(data, signature2);
    return `0x${publicKey.toString("hex")}`;
  }
  personalSign$1.extractPublicKey = extractPublicKey;
  function getPublicKeyFor(message, signature2) {
    const messageHash = (0, util_1$1.hashPersonalMessage)((0, utils_1$6.legacyToBuffer)(message));
    return (0, utils_1$6.recoverPublicKey)(messageHash, signature2);
  }
  var signTypedData = {};
  var dist = {};
  var abi$1 = {};
  var errors = {};
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ParserError = exports2.getErrorStack = exports2.getErrorMessage = void 0;
    const utils_12 = dist$2;
    const getErrorMessage2 = (error2) => {
      if (typeof error2 === "string") {
        return error2;
      }
      if (error2 instanceof Error) {
        return error2.message;
      }
      if ((0, utils_12.isObject)(error2) && (0, utils_12.hasProperty)(error2, "message") && typeof error2.message === "string") {
        return error2.message;
      }
      return "Unknown error.";
    };
    exports2.getErrorMessage = getErrorMessage2;
    const getErrorStack = (error2) => {
      if (error2 instanceof Error) {
        return error2.stack;
      }
      return void 0;
    };
    exports2.getErrorStack = getErrorStack;
    class ParserError extends Error {
      constructor(message, originalError) {
        super(message);
        this.name = "ParserError";
        const originalStack = (0, exports2.getErrorStack)(originalError);
        if (originalStack) {
          this.stack = originalStack;
        }
      }
    }
    exports2.ParserError = ParserError;
  })(errors);
  var packer = {};
  var iterator = {};
  Object.defineProperty(iterator, "__esModule", { value: true });
  iterator.iterate = void 0;
  const utils_1$5 = dist$2;
  const iterate = function* (buffer2, size2 = 32) {
    for (let pointer = 0; pointer < buffer2.length; pointer += size2) {
      const skip = (length) => {
        (0, utils_1$5.assert)(length >= 0, "Cannot skip a negative number of bytes.");
        (0, utils_1$5.assert)(length % size2 === 0, "Length must be a multiple of the size.");
        pointer += length;
      };
      const value = buffer2.subarray(pointer);
      yield { skip, value };
    }
    return {
      skip: () => void 0,
      value: new Uint8Array()
    };
  };
  iterator.iterate = iterate;
  var parsers = {};
  var address = {};
  var utils = {};
  var buffer = {};
  Object.defineProperty(buffer, "__esModule", { value: true });
  buffer.padEnd = buffer.padStart = buffer.set = void 0;
  const utils_1$4 = dist$2;
  const BUFFER_WIDTH = 32;
  const set = (target, buffer2, position) => {
    return (0, utils_1$4.concatBytes)([
      target.subarray(0, position),
      buffer2,
      target.subarray(position + buffer2.length)
    ]);
  };
  buffer.set = set;
  const padStart = (buffer2, length = BUFFER_WIDTH) => {
    const padding = new Uint8Array(Math.max(length - buffer2.length, 0)).fill(0);
    return (0, utils_1$4.concatBytes)([padding, buffer2]);
  };
  buffer.padStart = padStart;
  const padEnd = (buffer2, length = BUFFER_WIDTH) => {
    const padding = new Uint8Array(Math.max(length - buffer2.length, 0)).fill(0);
    return (0, utils_1$4.concatBytes)([buffer2, padding]);
  };
  buffer.padEnd = padEnd;
  (function(exports2) {
    var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(buffer, exports2);
  })(utils);
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.address = exports2.getAddress = void 0;
    const utils_12 = dist$2;
    const errors_12 = errors;
    const utils_22 = utils;
    const getAddress2 = (value) => {
      const bytesValue = (0, utils_12.createBytes)(value);
      (0, utils_12.assert)(bytesValue.length <= 20, new errors_12.ParserError(`Invalid address value. Expected address to be 20 bytes long, but received ${bytesValue.length} bytes.`));
      return (0, utils_22.padStart)(bytesValue, 20);
    };
    exports2.getAddress = getAddress2;
    exports2.address = {
      isDynamic: false,
      /**
       * Get if the given value is a valid address type. Since `address` is a simple
       * type, this is just a check that the value is "address".
       *
       * @param type - The type to check.
       * @returns Whether the type is a valid address type.
       */
      isType: (type2) => type2 === "address",
      /**
       * Get the byte length of an encoded address. Since `address` is a simple
       * type, this always returns 32.
       *
       * Note that actual addresses are only 20 bytes long, but the encoding of
       * the `address` type is always 32 bytes long.
       *
       * @returns The byte length of an encoded address.
       */
      getByteLength() {
        return 32;
      },
      /**
       * Encode the given address to a 32-byte-long byte array.
       *
       * @param args - The encoding arguments.
       * @param args.buffer - The byte array to add to.
       * @param args.value - The address to encode.
       * @param args.packed - Whether to use packed encoding.
       * @returns The bytes with the encoded address added to it.
       */
      encode({ buffer: buffer2, value, packed }) {
        const addressValue = (0, exports2.getAddress)(value);
        if (packed) {
          return (0, utils_12.concatBytes)([buffer2, addressValue]);
        }
        const addressBuffer = (0, utils_22.padStart)(addressValue);
        return (0, utils_12.concatBytes)([buffer2, addressBuffer]);
      },
      /**
       * Decode the given byte array to an address.
       *
       * @param args - The decoding arguments.
       * @param args.value - The byte array to decode.
       * @returns The decoded address as a hexadecimal string, starting with the
       * "0x"-prefix.
       */
      decode({ value }) {
        return (0, utils_12.add0x)((0, utils_12.bytesToHex)(value.slice(12, 32)));
      }
    };
  })(address);
  var array = {};
  var fixedBytes = {};
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fixedBytes = exports2.getByteLength = void 0;
    const utils_12 = dist$2;
    const errors_12 = errors;
    const utils_22 = utils;
    const BYTES_REGEX = /^bytes([0-9]{1,2})$/u;
    const getByteLength = (type2) => {
      var _a2;
      const bytes2 = (_a2 = type2.match(BYTES_REGEX)) == null ? void 0 : _a2[1];
      (0, utils_12.assert)(bytes2, `Invalid byte length. Expected a number between 1 and 32, but received "${type2}".`);
      const length = Number(bytes2);
      (0, utils_12.assert)(length > 0 && length <= 32, new errors_12.ParserError(`Invalid byte length. Expected a number between 1 and 32, but received "${type2}".`));
      return length;
    };
    exports2.getByteLength = getByteLength;
    exports2.fixedBytes = {
      isDynamic: false,
      /**
       * Check if a type is a fixed bytes type.
       *
       * @param type - The type to check.
       * @returns Whether the type is a fixed bytes type.
       */
      isType(type2) {
        return BYTES_REGEX.test(type2);
      },
      /**
       * Get the byte length of an encoded fixed bytes type.
       *
       * @returns The byte length of the type.
       */
      getByteLength() {
        return 32;
      },
      /**
       * Encode a fixed bytes value.
       *
       * @param args - The arguments to encode.
       * @param args.type - The type of the value.
       * @param args.buffer - The byte array to add to.
       * @param args.value - The value to encode.
       * @param args.packed - Whether to use packed encoding.
       * @returns The bytes with the encoded value added to it.
       */
      encode({ type: type2, buffer: buffer2, value, packed }) {
        const length = (0, exports2.getByteLength)(type2);
        const bufferValue = (0, utils_12.createBytes)(value);
        (0, utils_12.assert)(bufferValue.length <= length, new errors_12.ParserError(`Expected a value of length ${length}, but received a value of length ${bufferValue.length}.`));
        if (packed) {
          return (0, utils_12.concatBytes)([buffer2, (0, utils_22.padEnd)(bufferValue, length)]);
        }
        return (0, utils_12.concatBytes)([buffer2, (0, utils_22.padEnd)(bufferValue)]);
      },
      /**
       * Decode a fixed bytes value.
       *
       * @param args - The arguments to decode.
       * @param args.type - The type of the value.
       * @param args.value - The value to decode.
       * @returns The decoded value as a `Uint8Array`.
       */
      decode({ type: type2, value }) {
        const length = (0, exports2.getByteLength)(type2);
        return value.slice(0, length);
      }
    };
  })(fixedBytes);
  var tuple = {};
  var hasRequiredTuple;
  function requireTuple() {
    if (hasRequiredTuple) return tuple;
    hasRequiredTuple = 1;
    (function(exports2) {
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.tuple = exports2.getTupleElements = void 0;
      const utils_12 = dist$2;
      const errors_12 = errors;
      const packer_1 = requirePacker();
      const TUPLE_REGEX = /^\((.+)\)$/u;
      const isTupleType = (type2) => TUPLE_REGEX.test(type2);
      const getTupleElements = (type2) => {
        (0, utils_12.assert)(type2.startsWith("(") && type2.endsWith(")"), new errors_12.ParserError(`Invalid tuple type. Expected tuple type, but received "${type2}".`));
        const elements = [];
        let current = "";
        let depth = 0;
        for (let i2 = 1; i2 < type2.length - 1; i2++) {
          const char = type2[i2];
          if (char === "," && depth === 0) {
            elements.push(current.trim());
            current = "";
          } else {
            current += char;
            if (char === "(") {
              depth += 1;
            } else if (char === ")") {
              depth -= 1;
            }
          }
        }
        if (current.trim()) {
          elements.push(current.trim());
        }
        return elements;
      };
      exports2.getTupleElements = getTupleElements;
      exports2.tuple = {
        /**
         * Check if the tuple is dynamic. Tuples are dynamic if one or more elements
         * of the tuple are dynamic.
         *
         * @param type - The type to check.
         * @returns Whether the tuple is dynamic.
         */
        isDynamic(type2) {
          const elements = (0, exports2.getTupleElements)(type2);
          return elements.some((element) => {
            const parser2 = (0, packer_1.getParser)(element);
            return (0, packer_1.isDynamicParser)(parser2, element);
          });
        },
        /**
         * Check if a type is a tuple type.
         *
         * @param type - The type to check.
         * @returns Whether the type is a tuple type.
         */
        isType(type2) {
          return isTupleType(type2);
        },
        /**
         * Get the byte length of a tuple type. If the tuple is dynamic, this will
         * always return 32. If the tuple is static, this will return the sum of the
         * byte lengths of the tuple elements.
         *
         * @param type - The type to get the byte length for.
         * @returns The byte length of the tuple type.
         */
        getByteLength(type2) {
          if ((0, packer_1.isDynamicParser)(this, type2)) {
            return 32;
          }
          const elements = (0, exports2.getTupleElements)(type2);
          return elements.reduce((total, element) => {
            return total + (0, packer_1.getParser)(element).getByteLength(element);
          }, 0);
        },
        /**
         * Encode a tuple value.
         *
         * @param args - The encoding arguments.
         * @param args.type - The type of the value.
         * @param args.buffer - The byte array to add to.
         * @param args.value - The value to encode.
         * @param args.packed - Whether to use non-standard packed encoding.
         * @param args.tight - Whether to use non-standard tight encoding.
         * @returns The bytes with the encoded value added to it.
         */
        encode({ type: type2, buffer: buffer2, value, packed, tight }) {
          const elements = (0, exports2.getTupleElements)(type2);
          return (0, packer_1.pack)({
            types: elements,
            values: value,
            byteArray: buffer2,
            packed,
            tight
          });
        },
        /**
         * Decode a tuple value.
         *
         * @param args - The decoding arguments.
         * @param args.type - The type of the value.
         * @param args.value - The value to decode.
         * @param args.skip - A function to skip a number of bytes.
         * @returns The decoded value.
         */
        decode({ type: type2, value, skip }) {
          const elements = (0, exports2.getTupleElements)(type2);
          const length = this.getByteLength(type2) - 32;
          skip(length);
          return (0, packer_1.unpack)(elements, value);
        }
      };
    })(tuple);
    return tuple;
  }
  var hasRequiredArray;
  function requireArray() {
    if (hasRequiredArray) return array;
    hasRequiredArray = 1;
    (function(exports2) {
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.array = exports2.getTupleType = exports2.getArrayType = exports2.isArrayType = void 0;
      const utils_12 = dist$2;
      const errors_12 = errors;
      const packer_1 = requirePacker();
      const utils_22 = utils;
      const fixed_bytes_1 = fixedBytes;
      const tuple_1 = requireTuple();
      const ARRAY_REGEX = new RegExp("^(?<type>.*)\\[(?<length>\\d*?)\\]$", "u");
      const isArrayType = (type2) => ARRAY_REGEX.test(type2);
      exports2.isArrayType = isArrayType;
      const getArrayType = (type2) => {
        var _a2;
        const match = type2.match(ARRAY_REGEX);
        (0, utils_12.assert)((_a2 = match == null ? void 0 : match.groups) == null ? void 0 : _a2.type, new errors_12.ParserError(`Invalid array type. Expected an array type, but received "${type2}".`));
        return [
          match.groups.type,
          match.groups.length ? parseInt(match.groups.length, 10) : void 0
        ];
      };
      exports2.getArrayType = getArrayType;
      const getTupleType = (innerType, length) => {
        return `(${new Array(length).fill(innerType).join(",")})`;
      };
      exports2.getTupleType = getTupleType;
      exports2.array = {
        /**
         * Check if the array is dynamic. Arrays are dynamic if the array does not
         * have a fixed length, or if the array type is dynamic.
         *
         * @param type - The type to check.
         * @returns Whether the array is dynamic.
         */
        isDynamic(type2) {
          const [innerType, length] = (0, exports2.getArrayType)(type2);
          return (
            // `T[]` is dynamic for any `T`. `T[k]` is dynamic for any dynamic `T` and
            // any `k >= 0`.
            length === void 0 || (0, packer_1.isDynamicParser)((0, packer_1.getParser)(innerType), innerType)
          );
        },
        /**
         * Check if a type is an array type.
         *
         * @param type - The type to check.
         * @returns Whether the type is an array type.
         */
        isType(type2) {
          return (0, exports2.isArrayType)(type2);
        },
        /**
         * Get the byte length of an encoded array. If the array is dynamic, this
         * returns 32, i.e., the length of the pointer to the array. If the array is
         * static, this returns the byte length of the resulting tuple type.
         *
         * @param type - The type to get the byte length for.
         * @returns The byte length of an encoded array.
         */
        getByteLength(type2) {
          (0, utils_12.assert)((0, exports2.isArrayType)(type2), new errors_12.ParserError(`Expected an array type, but received "${type2}".`));
          const [innerType, length] = (0, exports2.getArrayType)(type2);
          if (!(0, packer_1.isDynamicParser)(this, type2) && length !== void 0) {
            return tuple_1.tuple.getByteLength((0, exports2.getTupleType)(innerType, length));
          }
          return 32;
        },
        /**
         * Encode the given array to a byte array. If the array is static, this uses
         * the tuple encoder.
         *
         * @param args - The encoding arguments.
         * @param args.type - The type of the array.
         * @param args.buffer - The byte array to add to.
         * @param args.value - The array to encode.
         * @param args.packed - Whether to use non-standard packed encoding.
         * @param args.tight - Whether to use non-standard tight encoding.
         * @returns The bytes with the encoded array added to it.
         */
        encode({ type: type2, buffer: buffer2, value, packed, tight }) {
          const [arrayType, fixedLength] = (0, exports2.getArrayType)(type2);
          (0, utils_12.assert)(!packed || !(0, exports2.isArrayType)(arrayType), new errors_12.ParserError(`Cannot pack nested arrays.`));
          if (packed && (0, packer_1.isDynamicParser)((0, packer_1.getParser)(arrayType), arrayType)) {
            return (0, packer_1.pack)({
              types: new Array(value.length).fill(arrayType),
              values: value,
              byteArray: buffer2,
              packed,
              arrayPacked: true,
              tight
            });
          }
          if (fixedLength) {
            (0, utils_12.assert)(fixedLength === value.length, new errors_12.ParserError(`Array length does not match type length. Expected a length of ${fixedLength}, but received ${value.length}.`));
            return tuple_1.tuple.encode({
              type: (0, exports2.getTupleType)(arrayType, fixedLength),
              buffer: buffer2,
              value,
              // In "tight" mode, we don't pad the values to 32 bytes if the value is
              // of type `bytesN`. This is an edge case in `ethereumjs-abi` that we
              // support to provide compatibility with it.
              packed: fixed_bytes_1.fixedBytes.isType(arrayType) && tight,
              tight
            });
          }
          if (packed) {
            return (0, packer_1.pack)({
              types: new Array(value.length).fill(arrayType),
              values: value,
              byteArray: buffer2,
              // In "tight" mode, we don't pad the values to 32 bytes if the value is
              // of type `bytesN`. This is an edge case in `ethereumjs-abi` that we
              // support to provide compatibility with it.
              packed: fixed_bytes_1.fixedBytes.isType(arrayType) && tight,
              arrayPacked: true,
              tight
            });
          }
          const arrayLength = (0, utils_22.padStart)((0, utils_12.numberToBytes)(value.length));
          return (0, packer_1.pack)({
            types: new Array(value.length).fill(arrayType),
            values: value,
            byteArray: (0, utils_12.concatBytes)([buffer2, arrayLength]),
            packed,
            tight
          });
        },
        /**
         * Decode an array from the given byte array.
         *
         * @param args - The decoding arguments.
         * @param args.type - The type of the array.
         * @param args.value - The byte array to decode.
         * @returns The decoded array.
         */
        decode(_a2) {
          var _b = _a2, { type: type2, value } = _b, rest = __objRest(_b, ["type", "value"]);
          const [arrayType, fixedLength] = (0, exports2.getArrayType)(type2);
          if (fixedLength) {
            const result = tuple_1.tuple.decode(__spreadValues({
              type: (0, exports2.getTupleType)(arrayType, fixedLength),
              value
            }, rest));
            (0, utils_12.assert)(result.length === fixedLength, new errors_12.ParserError(`Array length does not match type length. Expected a length of ${fixedLength}, but received ${result.length}.`));
            return result;
          }
          const arrayLength = (0, utils_12.bytesToNumber)(value.subarray(0, 32));
          return (0, packer_1.unpack)(new Array(arrayLength).fill(arrayType), value.subarray(32));
        }
      };
    })(array);
    return array;
  }
  var bool = {};
  var number = {};
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.number = exports2.getBigInt = exports2.assertNumberLength = exports2.getLength = exports2.isSigned = void 0;
    const utils_12 = dist$2;
    const errors_12 = errors;
    const utils_22 = utils;
    const NUMBER_REGEX = new RegExp("^u?int(?<length>[0-9]*)?$", "u");
    const isSigned = (type2) => {
      return !type2.startsWith("u");
    };
    exports2.isSigned = isSigned;
    const getLength2 = (type2) => {
      var _a2;
      if (type2 === "int" || type2 === "uint") {
        return 256;
      }
      const match = type2.match(NUMBER_REGEX);
      (0, utils_12.assert)((_a2 = match == null ? void 0 : match.groups) == null ? void 0 : _a2.length, new errors_12.ParserError(`Invalid number type. Expected a number type, but received "${type2}".`));
      const length = parseInt(match.groups.length, 10);
      (0, utils_12.assert)(length >= 8 && length <= 256, new errors_12.ParserError(`Invalid number length. Expected a number between 8 and 256, but received "${type2}".`));
      (0, utils_12.assert)(length % 8 === 0, new errors_12.ParserError(`Invalid number length. Expected a multiple of 8, but received "${type2}".`));
      return length;
    };
    exports2.getLength = getLength2;
    const assertNumberLength = (value, type2) => {
      const length = (0, exports2.getLength)(type2);
      const maxValue = __pow(BigInt(2), BigInt(length - ((0, exports2.isSigned)(type2) ? 1 : 0))) - BigInt(1);
      if ((0, exports2.isSigned)(type2)) {
        (0, utils_12.assert)(value >= -(maxValue + BigInt(1)) && value <= maxValue, new errors_12.ParserError(`Number "${value}" is out of range for type "${type2}".`));
        return;
      }
      (0, utils_12.assert)(value <= maxValue, new errors_12.ParserError(`Number "${value}" is out of range for type "${type2}".`));
    };
    exports2.assertNumberLength = assertNumberLength;
    const getBigInt = (value) => {
      try {
        return (0, utils_12.createBigInt)(value);
      } catch (e) {
        throw new errors_12.ParserError(`Invalid number. Expected a valid number value, but received "${value}".`);
      }
    };
    exports2.getBigInt = getBigInt;
    exports2.number = {
      isDynamic: false,
      /**
       * Check if a type is a number type.
       *
       * @param type - The type to check.
       * @returns Whether the type is a number type.
       */
      isType(type2) {
        return NUMBER_REGEX.test(type2);
      },
      /**
       * Get the byte length of an encoded number type. Since `int` and `uint` are
       * simple types, this will always return 32.
       *
       * @returns The byte length of the type.
       */
      getByteLength() {
        return 32;
      },
      /**
       * Encode a number value.
       *
       * @param args - The arguments to encode.
       * @param args.type - The type of the value.
       * @param args.buffer - The byte array to add to.
       * @param args.value - The value to encode.
       * @param args.packed - Whether to use packed encoding.
       * @returns The bytes with the encoded value added to it.
       */
      encode({ type: type2, buffer: buffer2, value, packed }) {
        const bigIntValue = (0, exports2.getBigInt)(value);
        (0, exports2.assertNumberLength)(bigIntValue, type2);
        if ((0, exports2.isSigned)(type2)) {
          if (packed) {
            const length = (0, exports2.getLength)(type2) / 8;
            return (0, utils_12.concatBytes)([buffer2, (0, utils_12.signedBigIntToBytes)(bigIntValue, length)]);
          }
          return (0, utils_12.concatBytes)([
            buffer2,
            (0, utils_22.padStart)((0, utils_12.signedBigIntToBytes)(bigIntValue, 32))
          ]);
        }
        if (packed) {
          const length = (0, exports2.getLength)(type2) / 8;
          return (0, utils_12.concatBytes)([
            buffer2,
            (0, utils_22.padStart)((0, utils_12.bigIntToBytes)(bigIntValue), length)
          ]);
        }
        return (0, utils_12.concatBytes)([buffer2, (0, utils_22.padStart)((0, utils_12.bigIntToBytes)(bigIntValue))]);
      },
      /**
       * Decode a number value.
       *
       * @param args - The decoding arguments.
       * @param args.type - The type of the value.
       * @param args.value - The value to decode.
       * @returns The decoded value.
       */
      decode({ type: type2, value }) {
        const buffer2 = value.subarray(0, 32);
        if ((0, exports2.isSigned)(type2)) {
          const numberValue2 = (0, utils_12.bytesToSignedBigInt)(buffer2);
          (0, exports2.assertNumberLength)(numberValue2, type2);
          return numberValue2;
        }
        const numberValue = (0, utils_12.bytesToBigInt)(buffer2);
        (0, exports2.assertNumberLength)(numberValue, type2);
        return numberValue;
      }
    };
  })(number);
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bool = exports2.getBooleanValue = void 0;
    const superstruct_12 = dist$1;
    const utils_12 = dist$2;
    const errors_12 = errors;
    const number_1 = number;
    const BooleanCoercer = (0, superstruct_12.coerce)((0, superstruct_12.boolean)(), (0, superstruct_12.union)([(0, superstruct_12.literal)("true"), (0, superstruct_12.literal)("false")]), (value) => value === "true");
    const getBooleanValue = (value) => {
      try {
        const booleanValue = (0, superstruct_12.create)(value, BooleanCoercer);
        if (booleanValue) {
          return BigInt(1);
        }
        return BigInt(0);
      } catch (e) {
        throw new errors_12.ParserError(`Invalid boolean value. Expected a boolean literal, or the string "true" or "false", but received "${value}".`);
      }
    };
    exports2.getBooleanValue = getBooleanValue;
    exports2.bool = {
      isDynamic: false,
      /**
       * Get if the given value is a valid boolean type. Since `bool` is a simple
       * type, this is just a check that the value is "bool".
       *
       * @param type - The type to check.
       * @returns Whether the type is a valid boolean type.
       */
      isType: (type2) => type2 === "bool",
      /**
       * Get the byte length of an encoded boolean. Since `bool` is a simple
       * type, this always returns 32.
       *
       * Note that actual booleans are only 1 byte long, but the encoding of
       * the `bool` type is always 32 bytes long.
       *
       * @returns The byte length of an encoded boolean.
       */
      getByteLength() {
        return 32;
      },
      /**
       * Encode the given boolean to a byte array.
       *
       * @param args - The encoding arguments.
       * @param args.buffer - The byte array to add to.
       * @param args.value - The boolean to encode.
       * @param args.packed - Whether the value is packed.
       * @param args.tight - Whether to use non-standard tight encoding.
       * @returns The bytes with the encoded boolean added to it.
       */
      encode({ buffer: buffer2, value, packed, tight }) {
        const booleanValue = (0, exports2.getBooleanValue)(value);
        if (packed) {
          return (0, utils_12.concatBytes)([buffer2, (0, utils_12.bigIntToBytes)(booleanValue)]);
        }
        return number_1.number.encode({
          type: "uint256",
          buffer: buffer2,
          value: booleanValue,
          packed,
          tight
        });
      },
      /**
       * Decode the given byte array to a boolean.
       *
       * @param args - The decoding arguments.
       * @returns The decoded boolean.
       */
      decode(args) {
        return number_1.number.decode(__spreadProps(__spreadValues({}, args), { type: "uint256" })) === BigInt(1);
      }
    };
  })(bool);
  var bytes = {};
  Object.defineProperty(bytes, "__esModule", { value: true });
  bytes.bytes = void 0;
  const utils_1$3 = dist$2;
  const utils_2$1 = utils;
  bytes.bytes = {
    isDynamic: true,
    /**
     * Check if a type is a bytes type. Since `bytes` is a simple type, this is
     * just a check that the type is "bytes".
     *
     * @param type - The type to check.
     * @returns Whether the type is a bytes type.
     */
    isType: (type2) => type2 === "bytes",
    /**
     * Get the byte length of an encoded bytes value. Since `bytes` is a simple
     * type, this always returns 32.
     *
     * Note that actual length of a bytes value is variable, but the encoded
     * static value (pointer) is always 32 bytes long.
     *
     * @returns The byte length of an encoded bytes value.
     */
    getByteLength() {
      return 32;
    },
    /**
     * Encode the given bytes value to a byte array.
     *
     * @param args - The encoding arguments.
     * @param args.buffer - The byte array to add to.
     * @param args.value - The bytes value to encode.
     * @param args.packed - Whether to use packed encoding.
     * @returns The bytes with the encoded bytes value added to it.
     */
    encode({ buffer: buffer2, value, packed }) {
      const bufferValue = (0, utils_1$3.createBytes)(value);
      if (packed) {
        return (0, utils_1$3.concatBytes)([buffer2, bufferValue]);
      }
      const paddedSize = Math.ceil(bufferValue.byteLength / 32) * 32;
      return (0, utils_1$3.concatBytes)([
        buffer2,
        (0, utils_2$1.padStart)((0, utils_1$3.numberToBytes)(bufferValue.byteLength)),
        (0, utils_2$1.padEnd)(bufferValue, paddedSize)
      ]);
    },
    /**
     * Decode the given byte array to a bytes value.
     *
     * @param args - The decoding arguments.
     * @param args.value - The byte array to decode.
     * @returns The decoded bytes value as a `Uint8Array`.
     */
    decode({ value }) {
      const bytesValue = value.subarray(0, 32);
      const length = (0, utils_1$3.bytesToNumber)(bytesValue);
      return value.slice(32, 32 + length);
    }
  };
  var _function = {};
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fn = exports2.getFunction = void 0;
    const superstruct_12 = dist$1;
    const utils_12 = dist$2;
    const errors_12 = errors;
    const fixed_bytes_1 = fixedBytes;
    const FunctionStruct = (0, superstruct_12.coerce)((0, superstruct_12.object)({
      address: utils_12.StrictHexStruct,
      selector: utils_12.StrictHexStruct
    }), (0, superstruct_12.union)([utils_12.StrictHexStruct, (0, superstruct_12.instance)(Uint8Array)]), (value) => {
      const bytes2 = (0, utils_12.createBytes)(value);
      (0, utils_12.assert)(bytes2.length === 24, new errors_12.ParserError(`Invalid Solidity function. Expected function to be 24 bytes long, but received ${bytes2.length} bytes.`));
      return {
        address: (0, utils_12.bytesToHex)(bytes2.subarray(0, 20)),
        selector: (0, utils_12.bytesToHex)(bytes2.subarray(20, 24))
      };
    });
    const getFunction = (input) => {
      const value = (0, superstruct_12.create)(input, FunctionStruct);
      return (0, utils_12.concatBytes)([(0, utils_12.hexToBytes)(value.address), (0, utils_12.hexToBytes)(value.selector)]);
    };
    exports2.getFunction = getFunction;
    exports2.fn = {
      isDynamic: false,
      /**
       * Check if a type is a function type. Since `function` is a simple type, this
       * is just a check that the type is "function".
       *
       * @param type - The type to check.
       * @returns Whether the type is a function type.
       */
      isType: (type2) => type2 === "function",
      /**
       * Get the byte length of an encoded function. Since `function` is a simple
       * type, this always returns 32.
       *
       * Note that actual functions are only 24 bytes long, but the encoding of
       * the `function` type is always 32 bytes long.
       *
       * @returns The byte length of an encoded function.
       */
      getByteLength() {
        return 32;
      },
      /**
       * Encode the given function to a byte array.
       *
       * @param args - The encoding arguments.
       * @param args.buffer - The byte array to add to.
       * @param args.value - The function to encode.
       * @param args.packed - Whether to use packed encoding.
       * @param args.tight - Whether to use non-standard tight encoding.
       * @returns The bytes with the encoded function added to it.
       */
      encode({ buffer: buffer2, value, packed, tight }) {
        const fnValue = (0, exports2.getFunction)(value);
        return fixed_bytes_1.fixedBytes.encode({
          type: "bytes24",
          buffer: buffer2,
          value: fnValue,
          packed,
          tight
        });
      },
      /**
       * Decode the given byte array to a function.
       *
       * @param args - The decoding arguments.
       * @param args.value - The byte array to decode.
       * @returns The decoded function as a {@link SolidityFunction} object.
       */
      decode({ value }) {
        return {
          address: (0, utils_12.bytesToHex)(value.slice(0, 20)),
          selector: (0, utils_12.bytesToHex)(value.slice(20, 24))
        };
      }
    };
  })(_function);
  var parser = {};
  Object.defineProperty(parser, "__esModule", { value: true });
  var string = {};
  Object.defineProperty(string, "__esModule", { value: true });
  string.string = void 0;
  const utils_1$2 = dist$2;
  const bytes_1 = bytes;
  string.string = {
    isDynamic: true,
    /**
     * Check if a type is a string type. Since `string` is a simple type, this
     * is just a check if the type is "string".
     *
     * @param type - The type to check.
     * @returns Whether the type is a string type.
     */
    isType: (type2) => type2 === "string",
    /**
     * Get the byte length of an encoded string type. Since `string` is a simple
     * type, this will always return 32.
     *
     * Note that actual strings are variable in length, but the encoded static
     * value (pointer) is always 32 bytes long.
     *
     * @returns The byte length of an encoded string.
     */
    getByteLength() {
      return 32;
    },
    /**
     * Encode the given string value to a byte array.
     *
     * @param args - The encoding arguments.
     * @param args.buffer - The byte array to add to.
     * @param args.value - The string value to encode.
     * @param args.packed - Whether to use packed encoding.
     * @param args.tight - Whether to use non-standard tight encoding.
     * @returns The bytes with the encoded string value added to it.
     */
    encode({ buffer: buffer2, value, packed, tight }) {
      return bytes_1.bytes.encode({
        type: "bytes",
        buffer: buffer2,
        value: (0, utils_1$2.stringToBytes)(value),
        packed,
        tight
      });
    },
    /**
     * Decode the given byte array to a string value.
     *
     * @param args - The decoding arguments.
     * @returns The decoded string value.
     */
    decode(args) {
      return (0, utils_1$2.bytesToString)(bytes_1.bytes.decode(args));
    }
  };
  var hasRequiredParsers;
  function requireParsers() {
    if (hasRequiredParsers) return parsers;
    hasRequiredParsers = 1;
    (function(exports2) {
      var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports3) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m, p);
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      __exportStar(address, exports2);
      __exportStar(requireArray(), exports2);
      __exportStar(bool, exports2);
      __exportStar(bytes, exports2);
      __exportStar(fixedBytes, exports2);
      __exportStar(_function, exports2);
      __exportStar(number, exports2);
      __exportStar(parser, exports2);
      __exportStar(string, exports2);
      __exportStar(requireTuple(), exports2);
    })(parsers);
    return parsers;
  }
  var hasRequiredPacker;
  function requirePacker() {
    if (hasRequiredPacker) return packer;
    hasRequiredPacker = 1;
    (function(exports2) {
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.unpack = exports2.pack = exports2.isDynamicParser = exports2.getParser = void 0;
      const utils_12 = dist$2;
      const errors_12 = errors;
      const iterator_1 = iterator;
      const parsers_1 = requireParsers();
      const utils_22 = utils;
      const getParser = (type2) => {
        const parsers2 = {
          address: parsers_1.address,
          array: parsers_1.array,
          bool: parsers_1.bool,
          bytes: parsers_1.bytes,
          fixedBytes: parsers_1.fixedBytes,
          function: parsers_1.fn,
          number: parsers_1.number,
          string: parsers_1.string,
          tuple: parsers_1.tuple
        };
        const staticParser = parsers2[type2];
        if (staticParser) {
          return staticParser;
        }
        const parser2 = Object.values(parsers2).find((value) => value.isType(type2));
        if (parser2) {
          return parser2;
        }
        throw new errors_12.ParserError(`The type "${type2}" is not supported.`);
      };
      exports2.getParser = getParser;
      const isDynamicParser = (parser2, type2) => {
        const { isDynamic } = parser2;
        if (typeof isDynamic === "function") {
          return isDynamic(type2);
        }
        return isDynamic;
      };
      exports2.isDynamicParser = isDynamicParser;
      const pack2 = ({ types: types2, values, packed = false, tight = false, arrayPacked = false, byteArray = new Uint8Array() }) => {
        (0, utils_12.assert)(types2.length === values.length, new errors_12.ParserError(`The number of types (${types2.length}) does not match the number of values (${values.length}).`));
        const { staticBuffer, dynamicBuffer, pointers } = types2.reduce(
          // eslint-disable-next-line @typescript-eslint/no-shadow
          ({ staticBuffer: staticBuffer2, dynamicBuffer: dynamicBuffer2, pointers: pointers2 }, type2, index) => {
            const parser2 = (0, exports2.getParser)(type2);
            const value = values[index];
            if (packed || arrayPacked || !(0, exports2.isDynamicParser)(parser2, type2)) {
              return {
                staticBuffer: parser2.encode({
                  buffer: staticBuffer2,
                  value,
                  type: type2,
                  packed,
                  tight
                }),
                dynamicBuffer: dynamicBuffer2,
                pointers: pointers2
              };
            }
            const newStaticBuffer = (0, utils_12.concatBytes)([staticBuffer2, new Uint8Array(32)]);
            const newDynamicBuffer = parser2.encode({
              buffer: dynamicBuffer2,
              value,
              type: type2,
              packed,
              tight
            });
            return {
              staticBuffer: newStaticBuffer,
              dynamicBuffer: newDynamicBuffer,
              pointers: [
                ...pointers2,
                { position: staticBuffer2.length, pointer: dynamicBuffer2.length }
              ]
            };
          },
          {
            staticBuffer: new Uint8Array(),
            dynamicBuffer: new Uint8Array(),
            pointers: []
          }
        );
        (0, utils_12.assert)(!packed && !arrayPacked || dynamicBuffer.length === 0, new errors_12.ParserError("Invalid pack state."));
        const dynamicStart = staticBuffer.length;
        const updatedBuffer = pointers.reduce((target, { pointer, position }) => {
          const offset = (0, utils_22.padStart)((0, utils_12.numberToBytes)(dynamicStart + pointer));
          return (0, utils_22.set)(target, offset, position);
        }, staticBuffer);
        return (0, utils_12.concatBytes)([byteArray, updatedBuffer, dynamicBuffer]);
      };
      exports2.pack = pack2;
      const unpack2 = (types2, buffer2) => {
        const iterator2 = (0, iterator_1.iterate)(buffer2);
        return types2.map((type2) => {
          const { value: { value, skip }, done } = iterator2.next();
          (0, utils_12.assert)(!done, new errors_12.ParserError(`The encoded value is invalid for the provided types. Reached end of buffer while attempting to parse "${type2}".`));
          const parser2 = (0, exports2.getParser)(type2);
          const isDynamic = (0, exports2.isDynamicParser)(parser2, type2);
          if (isDynamic) {
            const pointer = (0, utils_12.bytesToNumber)(value.subarray(0, 32));
            const target = buffer2.subarray(pointer);
            return parser2.decode({ type: type2, value: target, skip });
          }
          return parser2.decode({ type: type2, value, skip });
        });
      };
      exports2.unpack = unpack2;
    })(packer);
    return packer;
  }
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeSingle = exports2.decode = exports2.encodePacked = exports2.encodeSingle = exports2.encode = void 0;
    const utils_12 = dist$2;
    const errors_12 = errors;
    const packer_1 = requirePacker();
    const encode2 = (types2, values, packed, tight) => {
      try {
        return (0, packer_1.pack)({ types: types2, values, packed, tight });
      } catch (error2) {
        if (error2 instanceof errors_12.ParserError) {
          throw new errors_12.ParserError(`Unable to encode value: ${error2.message}`, error2);
        }
        throw new errors_12.ParserError(`An unexpected error occurred: ${(0, errors_12.getErrorMessage)(error2)}`, error2);
      }
    };
    exports2.encode = encode2;
    const encodeSingle = (type2, value) => {
      return (0, exports2.encode)([type2], [value]);
    };
    exports2.encodeSingle = encodeSingle;
    const encodePacked = (types2, values, tight) => {
      return (0, exports2.encode)(types2, values, true, tight);
    };
    exports2.encodePacked = encodePacked;
    const decode2 = (types2, value) => {
      const bytes2 = (0, utils_12.createBytes)(value);
      try {
        return (0, packer_1.unpack)(types2, bytes2);
      } catch (error2) {
        if (error2 instanceof errors_12.ParserError) {
          throw new errors_12.ParserError(`Unable to decode value: ${error2.message}`, error2);
        }
        throw new errors_12.ParserError(`An unexpected error occurred: ${(0, errors_12.getErrorMessage)(error2)}`, error2);
      }
    };
    exports2.decode = decode2;
    const decodeSingle = (type2, value) => {
      const result = (0, exports2.decode)([type2], value);
      (0, utils_12.assert)(result.length === 1, new errors_12.ParserError("Decoded value array has unexpected length."));
      return result[0];
    };
    exports2.decodeSingle = decodeSingle;
  })(abi$1);
  var types = {};
  var abi = {};
  Object.defineProperty(abi, "__esModule", { value: true });
  (function(exports2) {
    var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(abi, exports2);
  })(types);
  (function(exports2) {
    var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(abi$1, exports2);
    __exportStar(errors, exports2);
    __exportStar(types, exports2);
  })(dist);
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverTypedSignature = exports2.signTypedData = exports2.typedSignatureHash = exports2.TypedDataUtils = exports2.TYPED_MESSAGE_SCHEMA = exports2.SignTypedDataVersion = void 0;
    const util_12 = dist$4;
    const abi_utils_1 = dist;
    const parsers_1 = requireParsers();
    const utils_12 = utils;
    const utils_22 = dist$2;
    const keccak_12 = keccak;
    const utils_3 = utils$3;
    var SignTypedDataVersion;
    (function(SignTypedDataVersion2) {
      SignTypedDataVersion2["V1"] = "V1";
      SignTypedDataVersion2["V3"] = "V3";
      SignTypedDataVersion2["V4"] = "V4";
    })(SignTypedDataVersion = exports2.SignTypedDataVersion || (exports2.SignTypedDataVersion = {}));
    exports2.TYPED_MESSAGE_SCHEMA = {
      type: "object",
      properties: {
        types: {
          type: "object",
          additionalProperties: {
            type: "array",
            items: {
              type: "object",
              properties: {
                name: { type: "string" },
                type: { type: "string" }
              },
              required: ["name", "type"]
            }
          }
        },
        primaryType: { type: "string" },
        domain: { type: "object" },
        message: { type: "object" }
      },
      required: ["types", "primaryType", "domain", "message"]
    };
    function validateVersion(version2, allowedVersions) {
      if (!Object.keys(SignTypedDataVersion).includes(version2)) {
        throw new Error(`Invalid version: '${version2}'`);
      } else if (allowedVersions && !allowedVersions.includes(version2)) {
        throw new Error(`SignTypedDataVersion not allowed: '${version2}'. Allowed versions are: ${allowedVersions.join(", ")}`);
      }
    }
    function parseNumber(type2, value) {
      (0, utils_22.assert)(value !== null, `Unable to encode value: Invalid number. Expected a valid number value, but received "${value}".`);
      const bigIntValue = BigInt(value);
      const length = (0, parsers_1.getLength)(type2);
      const maxValue = __pow(BigInt(2), BigInt(length)) - BigInt(1);
      (0, utils_22.assert)(bigIntValue >= -maxValue && bigIntValue <= maxValue, `Unable to encode value: Number "${value}" is out of range for type "${type2}".`);
      return bigIntValue;
    }
    function reallyStrangeAddressToBytes(address2) {
      let addressValue = BigInt(0);
      for (let i2 = 0; i2 < address2.length; i2++) {
        const character = BigInt(address2.charCodeAt(i2) - 48);
        addressValue *= BigInt(10);
        if (character >= 49) {
          addressValue += character - BigInt(49) + BigInt(10);
        } else if (character >= 17) {
          addressValue += character - BigInt(17) + BigInt(10);
        } else {
          addressValue += character;
        }
      }
      return (0, utils_12.padStart)((0, utils_22.bigIntToBytes)(addressValue), 20);
    }
    function encodeField(types2, name2, type2, value, version2) {
      validateVersion(version2, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);
      if (types2[type2] !== void 0) {
        return [
          "bytes32",
          // TODO: return Buffer, remove string from return type
          version2 === SignTypedDataVersion.V4 && value == null ? "0x0000000000000000000000000000000000000000000000000000000000000000" : (0, util_12.arrToBufArr)((0, keccak_12.keccak256)(encodeData(type2, value, types2, version2)))
        ];
      }
      if (type2 === "function") {
        throw new Error('Unsupported or invalid type: "function"');
      }
      if (value === void 0) {
        throw new Error(`missing value for field ${name2} of type ${type2}`);
      }
      if (type2 === "address") {
        if (typeof value === "number") {
          return ["address", (0, utils_12.padStart)((0, utils_22.numberToBytes)(value), 20)];
        } else if ((0, utils_22.isStrictHexString)(value)) {
          return ["address", (0, utils_22.add0x)(value)];
        } else if (typeof value === "string") {
          return ["address", reallyStrangeAddressToBytes(value).subarray(0, 20)];
        }
      }
      if (type2 === "bool") {
        return ["bool", Boolean(value)];
      }
      if (type2 === "bytes") {
        if (typeof value === "number") {
          value = (0, utils_22.numberToBytes)(value);
        } else if ((0, utils_22.isStrictHexString)(value) || value === "0x") {
          value = (0, utils_22.hexToBytes)(value);
        } else if (typeof value === "string") {
          value = (0, utils_22.stringToBytes)(value);
        }
        return ["bytes32", (0, util_12.arrToBufArr)((0, keccak_12.keccak256)(value))];
      }
      if (type2.startsWith("bytes") && type2 !== "bytes" && !type2.includes("[")) {
        if (typeof value === "number") {
          if (value < 0) {
            return ["bytes32", new Uint8Array(32)];
          }
          return ["bytes32", (0, utils_22.bigIntToBytes)(BigInt(value))];
        } else if ((0, utils_22.isStrictHexString)(value)) {
          return ["bytes32", (0, utils_22.hexToBytes)(value)];
        }
        return ["bytes32", value];
      }
      if (type2.startsWith("int") && !type2.includes("[")) {
        const bigIntValue = parseNumber(type2, value);
        if (bigIntValue >= BigInt(0)) {
          return ["uint256", bigIntValue];
        }
        return ["int256", bigIntValue];
      }
      if (type2 === "string") {
        if (typeof value === "number") {
          value = (0, utils_22.numberToBytes)(value);
        } else {
          value = (0, utils_22.stringToBytes)(value !== null && value !== void 0 ? value : "");
        }
        return ["bytes32", (0, util_12.arrToBufArr)((0, keccak_12.keccak256)(value))];
      }
      if (type2.endsWith("]")) {
        if (version2 === SignTypedDataVersion.V3) {
          throw new Error("Arrays are unimplemented in encodeData; use V4 extension");
        }
        const parsedType = type2.slice(0, type2.lastIndexOf("["));
        const typeValuePairs = value.map((item) => encodeField(types2, name2, parsedType, item, version2));
        return [
          "bytes32",
          (0, util_12.arrToBufArr)((0, keccak_12.keccak256)((0, abi_utils_1.encode)(typeValuePairs.map(([t2]) => t2), typeValuePairs.map(([, v]) => v))))
        ];
      }
      return [type2, value];
    }
    function encodeData(primaryType, data, types2, version2) {
      validateVersion(version2, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);
      const encodedTypes = ["bytes32"];
      const encodedValues = [
        hashType(primaryType, types2)
      ];
      for (const field of types2[primaryType]) {
        if (version2 === SignTypedDataVersion.V3 && data[field.name] === void 0) {
          continue;
        }
        const [type2, value] = encodeField(types2, field.name, field.type, data[field.name], version2);
        encodedTypes.push(type2);
        encodedValues.push(value);
      }
      return (0, util_12.arrToBufArr)((0, abi_utils_1.encode)(encodedTypes, encodedValues));
    }
    function encodeType(primaryType, types2) {
      let result = "";
      const unsortedDeps = findTypeDependencies(primaryType, types2);
      unsortedDeps.delete(primaryType);
      const deps = [primaryType, ...Array.from(unsortedDeps).sort()];
      for (const type2 of deps) {
        const children = types2[type2];
        if (!children) {
          throw new Error(`No type definition specified: ${type2}`);
        }
        result += `${type2}(${types2[type2].map(({ name: name2, type: t2 }) => `${t2} ${name2}`).join(",")})`;
      }
      return result;
    }
    function findTypeDependencies(primaryType, types2, results = /* @__PURE__ */ new Set()) {
      if (typeof primaryType !== "string") {
        throw new Error(`Invalid findTypeDependencies input ${JSON.stringify(primaryType)}`);
      }
      const match = primaryType.match(/^\w*/u);
      [primaryType] = match;
      if (results.has(primaryType) || types2[primaryType] === void 0) {
        return results;
      }
      results.add(primaryType);
      for (const field of types2[primaryType]) {
        findTypeDependencies(field.type, types2, results);
      }
      return results;
    }
    function hashStruct(primaryType, data, types2, version2) {
      validateVersion(version2, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);
      const encoded = encodeData(primaryType, data, types2, version2);
      const hashed = (0, keccak_12.keccak256)(encoded);
      const buf = (0, util_12.arrToBufArr)(hashed);
      return buf;
    }
    function hashType(primaryType, types2) {
      const encodedHashType = (0, utils_22.stringToBytes)(encodeType(primaryType, types2));
      return (0, util_12.arrToBufArr)((0, keccak_12.keccak256)(encodedHashType));
    }
    function sanitizeData(data) {
      const sanitizedData = {};
      for (const key2 in exports2.TYPED_MESSAGE_SCHEMA.properties) {
        if (data[key2]) {
          sanitizedData[key2] = data[key2];
        }
      }
      if ("types" in sanitizedData) {
        sanitizedData.types = Object.assign({ EIP712Domain: [] }, sanitizedData.types);
      }
      return sanitizedData;
    }
    function eip712DomainHash(typedData, version2) {
      validateVersion(version2, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);
      const sanitizedData = sanitizeData(typedData);
      const { domain } = sanitizedData;
      const domainType = { EIP712Domain: sanitizedData.types.EIP712Domain };
      return hashStruct("EIP712Domain", domain, domainType, version2);
    }
    function eip712Hash(typedData, version2) {
      validateVersion(version2, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);
      const sanitizedData = sanitizeData(typedData);
      const parts = [(0, utils_22.hexToBytes)("1901")];
      parts.push(eip712DomainHash(typedData, version2));
      if (sanitizedData.primaryType !== "EIP712Domain") {
        parts.push(hashStruct(
          // TODO: Validate that this is a string, so this type cast can be removed.
          sanitizedData.primaryType,
          sanitizedData.message,
          sanitizedData.types,
          version2
        ));
      }
      return (0, util_12.arrToBufArr)((0, keccak_12.keccak256)((0, utils_22.concatBytes)(parts)));
    }
    exports2.TypedDataUtils = {
      encodeData,
      encodeType,
      findTypeDependencies,
      hashStruct,
      hashType,
      sanitizeData,
      eip712Hash,
      eip712DomainHash
    };
    function typedSignatureHash(typedData) {
      const hashBuffer = _typedSignatureHash(typedData);
      return (0, utils_22.bytesToHex)(hashBuffer);
    }
    exports2.typedSignatureHash = typedSignatureHash;
    function normalizeValue2(type2, value) {
      if ((0, parsers_1.isArrayType)(type2) && Array.isArray(value)) {
        const [innerType] = (0, parsers_1.getArrayType)(type2);
        return value.map((item) => normalizeValue2(innerType, item));
      }
      if (type2 === "address") {
        if ((0, utils_22.isStrictHexString)(value)) {
          return (0, utils_12.padStart)((0, utils_22.hexToBytes)(value).subarray(0, 20), 20);
        }
        if (value instanceof Uint8Array) {
          return (0, utils_12.padStart)(value.subarray(0, 20), 20);
        }
      }
      if (type2 === "bool") {
        return Boolean(value);
      }
      if (type2.startsWith("bytes") && type2 !== "bytes") {
        const length = (0, parsers_1.getByteLength)(type2);
        if (typeof value === "number") {
          if (value < 0) {
            return new Uint8Array();
          }
          return (0, utils_22.numberToBytes)(value).subarray(0, length);
        }
        if ((0, utils_22.isStrictHexString)(value)) {
          return (0, utils_22.hexToBytes)(value).subarray(0, length);
        }
        if (value instanceof Uint8Array) {
          return value.subarray(0, length);
        }
      }
      if (type2.startsWith("uint")) {
        if (typeof value === "number") {
          return Math.abs(value);
        }
      }
      if (type2.startsWith("int")) {
        if (typeof value === "number") {
          const length = (0, parsers_1.getLength)(type2);
          return BigInt.asIntN(length, BigInt(value));
        }
      }
      return value;
    }
    function normalizeAddresses(values) {
      return values.map((value) => {
        if (typeof value === "number") {
          return (0, utils_12.padStart)((0, utils_22.numberToBytes)(value), 32);
        }
        if ((0, utils_22.isStrictHexString)(value)) {
          return (0, utils_12.padStart)((0, utils_22.hexToBytes)(value).subarray(0, 32), 32);
        }
        if (value instanceof Uint8Array) {
          return (0, utils_12.padStart)(value.subarray(0, 32), 32);
        }
        return value;
      });
    }
    function normalizeIntegers(type2, values) {
      return values.map((value) => {
        if (typeof value === "string" || typeof value === "number" || typeof value === "bigint") {
          const bigIntValue = parseNumber(type2, value);
          if (bigIntValue >= BigInt(0)) {
            return (0, utils_12.padStart)((0, utils_22.bigIntToBytes)(bigIntValue), 32);
          }
          const length = (0, parsers_1.getLength)(type2);
          const asIntN = BigInt.asIntN(length, bigIntValue);
          return (0, utils_22.signedBigIntToBytes)(asIntN, 32);
        }
        return value;
      });
    }
    function _typedSignatureHash(typedData) {
      const error2 = new Error("Expect argument to be non-empty array");
      if (typeof typedData !== "object" || !("length" in typedData) || !typedData.length) {
        throw error2;
      }
      const normalizedData = typedData.map(({ name: name2, type: type2, value }) => {
        if (type2 === "address[]") {
          return {
            name: name2,
            type: "bytes32[]",
            value: normalizeAddresses(value)
          };
        }
        if (type2.startsWith("int") && (0, parsers_1.isArrayType)(type2)) {
          const [innerType, length] = (0, parsers_1.getArrayType)(type2);
          return {
            name: name2,
            type: `bytes32[${length !== null && length !== void 0 ? length : ""}]`,
            value: normalizeIntegers(innerType, value)
          };
        }
        return {
          name: name2,
          type: type2,
          value: normalizeValue2(type2, value)
        };
      });
      const data = normalizedData.map((e) => {
        if (e.type !== "bytes") {
          return e.value;
        }
        return (0, utils_3.legacyToBuffer)(e.value);
      });
      const types2 = normalizedData.map((e) => {
        if (e.type === "function") {
          throw new Error('Unsupported or invalid type: "function"');
        }
        return e.type;
      });
      const schema = typedData.map((e) => {
        if (!e.name) {
          throw error2;
        }
        return `${e.type} ${e.name}`;
      });
      return (0, util_12.arrToBufArr)((0, keccak_12.keccak256)((0, abi_utils_1.encodePacked)(["bytes32", "bytes32"], [
        (0, keccak_12.keccak256)((0, abi_utils_1.encodePacked)(["string[]"], [schema], true)),
        (0, keccak_12.keccak256)((0, abi_utils_1.encodePacked)(types2, data, true))
      ])));
    }
    function signTypedData2({ privateKey, data, version: version2 }) {
      validateVersion(version2);
      if ((0, utils_3.isNullish)(data)) {
        throw new Error("Missing data parameter");
      } else if ((0, utils_3.isNullish)(privateKey)) {
        throw new Error("Missing private key parameter");
      }
      const messageHash = version2 === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports2.TypedDataUtils.eip712Hash(data, version2);
      const sig = (0, util_12.ecsign)(messageHash, privateKey);
      return (0, utils_3.concatSig)((0, util_12.arrToBufArr)((0, utils_22.bigIntToBytes)(sig.v)), sig.r, sig.s);
    }
    exports2.signTypedData = signTypedData2;
    function recoverTypedSignature({ data, signature: signature2, version: version2 }) {
      validateVersion(version2);
      if ((0, utils_3.isNullish)(data)) {
        throw new Error("Missing data parameter");
      } else if ((0, utils_3.isNullish)(signature2)) {
        throw new Error("Missing signature parameter");
      }
      const messageHash = version2 === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports2.TypedDataUtils.eip712Hash(data, version2);
      const publicKey = (0, utils_3.recoverPublicKey)(messageHash, signature2);
      const sender = (0, util_12.publicToAddress)(publicKey);
      return (0, utils_22.bytesToHex)(sender);
    }
    exports2.recoverTypedSignature = recoverTypedSignature;
  })(signTypedData);
  var encryption = {};
  var lib = {};
  (function(exports2) {
    /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bytes = exports2.stringToBytes = exports2.str = exports2.bytesToString = exports2.hex = exports2.utf8 = exports2.bech32m = exports2.bech32 = exports2.base58check = exports2.createBase58check = exports2.base58xmr = exports2.base58xrp = exports2.base58flickr = exports2.base58 = exports2.base64urlnopad = exports2.base64url = exports2.base64nopad = exports2.base64 = exports2.base32crockford = exports2.base32hexnopad = exports2.base32hex = exports2.base32nopad = exports2.base32 = exports2.base16 = exports2.utils = void 0;
    exports2.assertNumber = assertNumber;
    // @__NO_SIDE_EFFECTS__
    function assertNumber(n) {
      if (!Number.isSafeInteger(n))
        throw new Error(`Wrong integer: ${n}`);
    }
    function isBytes2(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    // @__NO_SIDE_EFFECTS__
    function chain(...args) {
      const id2 = (a) => a;
      const wrap = (a, b) => (c) => a(b(c));
      const encode2 = args.map((x) => x.encode).reduceRight(wrap, id2);
      const decode2 = args.map((x) => x.decode).reduce(wrap, id2);
      return { encode: encode2, decode: decode2 };
    }
    // @__NO_SIDE_EFFECTS__
    function alphabet(alphabet2) {
      return {
        encode: (digits) => {
          if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
            throw new Error("alphabet.encode input should be an array of numbers");
          return digits.map((i2) => {
            if (i2 < 0 || i2 >= alphabet2.length)
              throw new Error(`Digit index outside alphabet: ${i2} (alphabet: ${alphabet2.length})`);
            return alphabet2[i2];
          });
        },
        decode: (input) => {
          if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
            throw new Error("alphabet.decode input should be array of strings");
          return input.map((letter) => {
            if (typeof letter !== "string")
              throw new Error(`alphabet.decode: not string element=${letter}`);
            const index = alphabet2.indexOf(letter);
            if (index === -1)
              throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet2}`);
            return index;
          });
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function join(separator = "") {
      if (typeof separator !== "string")
        throw new Error("join separator should be string");
      return {
        encode: (from) => {
          if (!Array.isArray(from) || from.length && typeof from[0] !== "string")
            throw new Error("join.encode input should be array of strings");
          for (let i2 of from)
            if (typeof i2 !== "string")
              throw new Error(`join.encode: non-string input=${i2}`);
          return from.join(separator);
        },
        decode: (to) => {
          if (typeof to !== "string")
            throw new Error("join.decode input should be string");
          return to.split(separator);
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function padding(bits, chr = "=") {
      if (typeof chr !== "string")
        throw new Error("padding chr should be string");
      return {
        encode(data) {
          if (!Array.isArray(data) || data.length && typeof data[0] !== "string")
            throw new Error("padding.encode input should be array of strings");
          for (let i2 of data)
            if (typeof i2 !== "string")
              throw new Error(`padding.encode: non-string input=${i2}`);
          while (data.length * bits % 8)
            data.push(chr);
          return data;
        },
        decode(input) {
          if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
            throw new Error("padding.encode input should be array of strings");
          for (let i2 of input)
            if (typeof i2 !== "string")
              throw new Error(`padding.decode: non-string input=${i2}`);
          let end = input.length;
          if (end * bits % 8)
            throw new Error("Invalid padding: string should have whole number of bytes");
          for (; end > 0 && input[end - 1] === chr; end--) {
            if (!((end - 1) * bits % 8))
              throw new Error("Invalid padding: string has too much padding");
          }
          return input.slice(0, end);
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function normalize2(fn) {
      if (typeof fn !== "function")
        throw new Error("normalize fn should be function");
      return { encode: (from) => from, decode: (to) => fn(to) };
    }
    // @__NO_SIDE_EFFECTS__
    function convertRadix(data, from, to) {
      if (from < 2)
        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
      if (to < 2)
        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
      if (!Array.isArray(data))
        throw new Error("convertRadix: data should be array");
      if (!data.length)
        return [];
      let pos = 0;
      const res = [];
      const digits = Array.from(data);
      digits.forEach((d) => {
        if (d < 0 || d >= from)
          throw new Error(`Wrong integer: ${d}`);
      });
      while (true) {
        let carry = 0;
        let done = true;
        for (let i2 = pos; i2 < digits.length; i2++) {
          const digit = digits[i2];
          const digitBase = from * carry + digit;
          if (!Number.isSafeInteger(digitBase) || from * carry / from !== carry || digitBase - digit !== from * carry) {
            throw new Error("convertRadix: carry overflow");
          }
          carry = digitBase % to;
          const rounded = Math.floor(digitBase / to);
          digits[i2] = rounded;
          if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
            throw new Error("convertRadix: carry overflow");
          if (!done)
            continue;
          else if (!rounded)
            pos = i2;
          else
            done = false;
        }
        res.push(carry);
        if (done)
          break;
      }
      for (let i2 = 0; i2 < data.length - 1 && data[i2] === 0; i2++)
        res.push(0);
      return res.reverse();
    }
    const gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => !b ? a : /* @__PURE__ */ gcd(b, a % b);
    const radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - /* @__PURE__ */ gcd(from, to));
    // @__NO_SIDE_EFFECTS__
    function convertRadix2(data, from, to, padding2) {
      if (!Array.isArray(data))
        throw new Error("convertRadix2: data should be array");
      if (from <= 0 || from > 32)
        throw new Error(`convertRadix2: wrong from=${from}`);
      if (to <= 0 || to > 32)
        throw new Error(`convertRadix2: wrong to=${to}`);
      if (/* @__PURE__ */ radix2carry(from, to) > 32) {
        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${/* @__PURE__ */ radix2carry(from, to)}`);
      }
      let carry = 0;
      let pos = 0;
      const mask2 = __pow(2, to) - 1;
      const res = [];
      for (const n of data) {
        if (n >= __pow(2, from))
          throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
        carry = carry << from | n;
        if (pos + from > 32)
          throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
        pos += from;
        for (; pos >= to; pos -= to)
          res.push((carry >> pos - to & mask2) >>> 0);
        carry &= __pow(2, pos) - 1;
      }
      carry = carry << to - pos & mask2;
      if (!padding2 && pos >= from)
        throw new Error("Excess padding");
      if (!padding2 && carry)
        throw new Error(`Non-zero padding: ${carry}`);
      if (padding2 && pos > 0)
        res.push(carry >>> 0);
      return res;
    }
    // @__NO_SIDE_EFFECTS__
    function radix(num) {
      return {
        encode: (bytes2) => {
          if (!isBytes2(bytes2))
            throw new Error("radix.encode input should be Uint8Array");
          return /* @__PURE__ */ convertRadix(Array.from(bytes2), __pow(2, 8), num);
        },
        decode: (digits) => {
          if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
            throw new Error("radix.decode input should be array of numbers");
          return Uint8Array.from(/* @__PURE__ */ convertRadix(digits, num, __pow(2, 8)));
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function radix2(bits, revPadding = false) {
      if (bits <= 0 || bits > 32)
        throw new Error("radix2: bits should be in (0..32]");
      if (/* @__PURE__ */ radix2carry(8, bits) > 32 || /* @__PURE__ */ radix2carry(bits, 8) > 32)
        throw new Error("radix2: carry overflow");
      return {
        encode: (bytes2) => {
          if (!isBytes2(bytes2))
            throw new Error("radix2.encode input should be Uint8Array");
          return /* @__PURE__ */ convertRadix2(Array.from(bytes2), 8, bits, !revPadding);
        },
        decode: (digits) => {
          if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
            throw new Error("radix2.decode input should be array of numbers");
          return Uint8Array.from(/* @__PURE__ */ convertRadix2(digits, bits, 8, revPadding));
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function unsafeWrapper(fn) {
      if (typeof fn !== "function")
        throw new Error("unsafeWrapper fn should be function");
      return function(...args) {
        try {
          return fn.apply(null, args);
        } catch (e) {
        }
      };
    }
    // @__NO_SIDE_EFFECTS__
    function checksum2(len2, fn) {
      if (typeof fn !== "function")
        throw new Error("checksum fn should be function");
      return {
        encode(data) {
          if (!isBytes2(data))
            throw new Error("checksum.encode: input should be Uint8Array");
          const checksum3 = fn(data).slice(0, len2);
          const res = new Uint8Array(data.length + len2);
          res.set(data);
          res.set(checksum3, data.length);
          return res;
        },
        decode(data) {
          if (!isBytes2(data))
            throw new Error("checksum.decode: input should be Uint8Array");
          const payload = data.slice(0, -len2);
          const newChecksum = fn(payload).slice(0, len2);
          const oldChecksum = data.slice(-len2);
          for (let i2 = 0; i2 < len2; i2++)
            if (newChecksum[i2] !== oldChecksum[i2])
              throw new Error("Invalid checksum");
          return payload;
        }
      };
    }
    exports2.utils = {
      alphabet,
      chain,
      checksum: checksum2,
      convertRadix,
      convertRadix2,
      radix,
      radix2,
      join,
      padding
    };
    exports2.base16 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789ABCDEF"), /* @__PURE__ */ join(""));
    exports2.base32 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
    exports2.base32nopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ join(""));
    exports2.base32hex = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
    exports2.base32hexnopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ join(""));
    exports2.base32crockford = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize2((s2) => s2.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
    exports2.base64 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
    exports2.base64nopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ join(""));
    exports2.base64url = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
    exports2.base64urlnopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ join(""));
    const genBase58 = (abc) => /* @__PURE__ */ chain(/* @__PURE__ */ radix(58), /* @__PURE__ */ alphabet(abc), /* @__PURE__ */ join(""));
    exports2.base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    exports2.base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
    exports2.base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
    const XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
    exports2.base58xmr = {
      encode(data) {
        let res = "";
        for (let i2 = 0; i2 < data.length; i2 += 8) {
          const block = data.subarray(i2, i2 + 8);
          res += exports2.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
        }
        return res;
      },
      decode(str) {
        let res = [];
        for (let i2 = 0; i2 < str.length; i2 += 11) {
          const slice = str.slice(i2, i2 + 11);
          const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
          const block = exports2.base58.decode(slice);
          for (let j = 0; j < block.length - blockLen; j++) {
            if (block[j] !== 0)
              throw new Error("base58xmr: wrong padding");
          }
          res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
      }
    };
    const createBase58check = (sha2562) => /* @__PURE__ */ chain(/* @__PURE__ */ checksum2(4, (data) => sha2562(sha2562(data))), exports2.base58);
    exports2.createBase58check = createBase58check;
    exports2.base58check = exports2.createBase58check;
    const BECH_ALPHABET = /* @__PURE__ */ chain(/* @__PURE__ */ alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), /* @__PURE__ */ join(""));
    const POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
    // @__NO_SIDE_EFFECTS__
    function bech32Polymod(pre) {
      const b = pre >> 25;
      let chk = (pre & 33554431) << 5;
      for (let i2 = 0; i2 < POLYMOD_GENERATORS.length; i2++) {
        if ((b >> i2 & 1) === 1)
          chk ^= POLYMOD_GENERATORS[i2];
      }
      return chk;
    }
    // @__NO_SIDE_EFFECTS__
    function bechChecksum(prefix, words, encodingConst = 1) {
      const len2 = prefix.length;
      let chk = 1;
      for (let i2 = 0; i2 < len2; i2++) {
        const c = prefix.charCodeAt(i2);
        if (c < 33 || c > 126)
          throw new Error(`Invalid prefix (${prefix})`);
        chk = /* @__PURE__ */ bech32Polymod(chk) ^ c >> 5;
      }
      chk = /* @__PURE__ */ bech32Polymod(chk);
      for (let i2 = 0; i2 < len2; i2++)
        chk = /* @__PURE__ */ bech32Polymod(chk) ^ prefix.charCodeAt(i2) & 31;
      for (let v of words)
        chk = /* @__PURE__ */ bech32Polymod(chk) ^ v;
      for (let i2 = 0; i2 < 6; i2++)
        chk = /* @__PURE__ */ bech32Polymod(chk);
      chk ^= encodingConst;
      return BECH_ALPHABET.encode(/* @__PURE__ */ convertRadix2([chk % __pow(2, 30)], 30, 5, false));
    }
    // @__NO_SIDE_EFFECTS__
    function genBech32(encoding2) {
      const ENCODING_CONST = encoding2 === "bech32" ? 1 : 734539939;
      const _words = /* @__PURE__ */ radix2(5);
      const fromWords = _words.decode;
      const toWords = _words.encode;
      const fromWordsUnsafe = /* @__PURE__ */ unsafeWrapper(fromWords);
      function encode2(prefix, words, limit2 = 90) {
        if (typeof prefix !== "string")
          throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);
        if (words instanceof Uint8Array)
          words = Array.from(words);
        if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
          throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
        if (prefix.length === 0)
          throw new TypeError(`Invalid prefix length ${prefix.length}`);
        const actualLength = prefix.length + 7 + words.length;
        if (limit2 !== false && actualLength > limit2)
          throw new TypeError(`Length ${actualLength} exceeds limit ${limit2}`);
        const lowered = prefix.toLowerCase();
        const sum = /* @__PURE__ */ bechChecksum(lowered, words, ENCODING_CONST);
        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
      }
      function decode2(str, limit2 = 90) {
        if (typeof str !== "string")
          throw new Error(`bech32.decode input should be string, not ${typeof str}`);
        if (str.length < 8 || limit2 !== false && str.length > limit2)
          throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit2})`);
        const lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase())
          throw new Error(`String must be lowercase or uppercase`);
        const sepIndex = lowered.lastIndexOf("1");
        if (sepIndex === 0 || sepIndex === -1)
          throw new Error(`Letter "1" must be present between prefix and data only`);
        const prefix = lowered.slice(0, sepIndex);
        const data = lowered.slice(sepIndex + 1);
        if (data.length < 6)
          throw new Error("Data must be at least 6 characters long");
        const words = BECH_ALPHABET.decode(data).slice(0, -6);
        const sum = /* @__PURE__ */ bechChecksum(prefix, words, ENCODING_CONST);
        if (!data.endsWith(sum))
          throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
        return { prefix, words };
      }
      const decodeUnsafe = /* @__PURE__ */ unsafeWrapper(decode2);
      function decodeToBytes(str) {
        const { prefix, words } = decode2(str, false);
        return { prefix, words, bytes: fromWords(words) };
      }
      function encodeFromBytes(prefix, bytes2) {
        return encode2(prefix, toWords(bytes2));
      }
      return {
        encode: encode2,
        decode: decode2,
        encodeFromBytes,
        decodeToBytes,
        decodeUnsafe,
        fromWords,
        fromWordsUnsafe,
        toWords
      };
    }
    exports2.bech32 = /* @__PURE__ */ genBech32("bech32");
    exports2.bech32m = /* @__PURE__ */ genBech32("bech32m");
    exports2.utf8 = {
      encode: (data) => new TextDecoder().decode(data),
      decode: (str) => new TextEncoder().encode(str)
    };
    exports2.hex = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789abcdef"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize2((s2) => {
      if (typeof s2 !== "string" || s2.length % 2)
        throw new TypeError(`hex.decode: expected string, got ${typeof s2} with length ${s2.length}`);
      return s2.toLowerCase();
    }));
    const CODERS = {
      utf8: exports2.utf8,
      hex: exports2.hex,
      base16: exports2.base16,
      base32: exports2.base32,
      base64: exports2.base64,
      base64url: exports2.base64url,
      base58: exports2.base58,
      base58xmr: exports2.base58xmr
    };
    const coderTypeError = "Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr";
    const bytesToString = (type2, bytes2) => {
      if (typeof type2 !== "string" || !CODERS.hasOwnProperty(type2))
        throw new TypeError(coderTypeError);
      if (!isBytes2(bytes2))
        throw new TypeError("bytesToString() expects Uint8Array");
      return CODERS[type2].encode(bytes2);
    };
    exports2.bytesToString = bytesToString;
    exports2.str = exports2.bytesToString;
    const stringToBytes = (type2, str) => {
      if (!CODERS.hasOwnProperty(type2))
        throw new TypeError(coderTypeError);
      if (typeof str !== "string")
        throw new TypeError("stringToBytes() expects string");
      return CODERS[type2].decode(str);
    };
    exports2.stringToBytes = stringToBytes;
    exports2.bytes = exports2.stringToBytes;
  })(lib);
  var naclFast = { exports: {} };
  (function(module) {
    (function(nacl2) {
      var gf = function(init) {
        var i2, r2 = new Float64Array(16);
        if (init) for (i2 = 0; i2 < init.length; i2++) r2[i2] = init[i2];
        return r2;
      };
      var randombytes = function() {
        throw new Error("no PRNG");
      };
      var _0 = new Uint8Array(16);
      var _9 = new Uint8Array(32);
      _9[0] = 9;
      var gf0 = gf(), gf1 = gf([1]), _121665 = gf([56129, 1]), D = gf([30883, 4953, 19914, 30187, 55467, 16705, 2637, 112, 59544, 30585, 16505, 36039, 65139, 11119, 27886, 20995]), D2 = gf([61785, 9906, 39828, 60374, 45398, 33411, 5274, 224, 53552, 61171, 33010, 6542, 64743, 22239, 55772, 9222]), X = gf([54554, 36645, 11616, 51542, 42930, 38181, 51040, 26924, 56412, 64982, 57905, 49316, 21502, 52590, 14035, 8553]), Y = gf([26200, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214]), I = gf([41136, 18958, 6951, 50414, 58488, 44335, 6150, 12099, 55207, 15867, 153, 11085, 57099, 20417, 9344, 11139]);
      function ts64(x, i2, h, l) {
        x[i2] = h >> 24 & 255;
        x[i2 + 1] = h >> 16 & 255;
        x[i2 + 2] = h >> 8 & 255;
        x[i2 + 3] = h & 255;
        x[i2 + 4] = l >> 24 & 255;
        x[i2 + 5] = l >> 16 & 255;
        x[i2 + 6] = l >> 8 & 255;
        x[i2 + 7] = l & 255;
      }
      function vn(x, xi, y, yi, n) {
        var i2, d = 0;
        for (i2 = 0; i2 < n; i2++) d |= x[xi + i2] ^ y[yi + i2];
        return (1 & d - 1 >>> 8) - 1;
      }
      function crypto_verify_16(x, xi, y, yi) {
        return vn(x, xi, y, yi, 16);
      }
      function crypto_verify_32(x, xi, y, yi) {
        return vn(x, xi, y, yi, 32);
      }
      function core_salsa20(o, p, k, c) {
        var j0 = c[0] & 255 | (c[1] & 255) << 8 | (c[2] & 255) << 16 | (c[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c[4] & 255 | (c[5] & 255) << 8 | (c[6] & 255) << 16 | (c[7] & 255) << 24, j6 = p[0] & 255 | (p[1] & 255) << 8 | (p[2] & 255) << 16 | (p[3] & 255) << 24, j7 = p[4] & 255 | (p[5] & 255) << 8 | (p[6] & 255) << 16 | (p[7] & 255) << 24, j8 = p[8] & 255 | (p[9] & 255) << 8 | (p[10] & 255) << 16 | (p[11] & 255) << 24, j9 = p[12] & 255 | (p[13] & 255) << 8 | (p[14] & 255) << 16 | (p[15] & 255) << 24, j10 = c[8] & 255 | (c[9] & 255) << 8 | (c[10] & 255) << 16 | (c[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c[12] & 255 | (c[13] & 255) << 8 | (c[14] & 255) << 16 | (c[15] & 255) << 24;
        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
        for (var i2 = 0; i2 < 20; i2 += 2) {
          u = x0 + x12 | 0;
          x4 ^= u << 7 | u >>> 32 - 7;
          u = x4 + x0 | 0;
          x8 ^= u << 9 | u >>> 32 - 9;
          u = x8 + x4 | 0;
          x12 ^= u << 13 | u >>> 32 - 13;
          u = x12 + x8 | 0;
          x0 ^= u << 18 | u >>> 32 - 18;
          u = x5 + x1 | 0;
          x9 ^= u << 7 | u >>> 32 - 7;
          u = x9 + x5 | 0;
          x13 ^= u << 9 | u >>> 32 - 9;
          u = x13 + x9 | 0;
          x1 ^= u << 13 | u >>> 32 - 13;
          u = x1 + x13 | 0;
          x5 ^= u << 18 | u >>> 32 - 18;
          u = x10 + x6 | 0;
          x14 ^= u << 7 | u >>> 32 - 7;
          u = x14 + x10 | 0;
          x2 ^= u << 9 | u >>> 32 - 9;
          u = x2 + x14 | 0;
          x6 ^= u << 13 | u >>> 32 - 13;
          u = x6 + x2 | 0;
          x10 ^= u << 18 | u >>> 32 - 18;
          u = x15 + x11 | 0;
          x3 ^= u << 7 | u >>> 32 - 7;
          u = x3 + x15 | 0;
          x7 ^= u << 9 | u >>> 32 - 9;
          u = x7 + x3 | 0;
          x11 ^= u << 13 | u >>> 32 - 13;
          u = x11 + x7 | 0;
          x15 ^= u << 18 | u >>> 32 - 18;
          u = x0 + x3 | 0;
          x1 ^= u << 7 | u >>> 32 - 7;
          u = x1 + x0 | 0;
          x2 ^= u << 9 | u >>> 32 - 9;
          u = x2 + x1 | 0;
          x3 ^= u << 13 | u >>> 32 - 13;
          u = x3 + x2 | 0;
          x0 ^= u << 18 | u >>> 32 - 18;
          u = x5 + x4 | 0;
          x6 ^= u << 7 | u >>> 32 - 7;
          u = x6 + x5 | 0;
          x7 ^= u << 9 | u >>> 32 - 9;
          u = x7 + x6 | 0;
          x4 ^= u << 13 | u >>> 32 - 13;
          u = x4 + x7 | 0;
          x5 ^= u << 18 | u >>> 32 - 18;
          u = x10 + x9 | 0;
          x11 ^= u << 7 | u >>> 32 - 7;
          u = x11 + x10 | 0;
          x8 ^= u << 9 | u >>> 32 - 9;
          u = x8 + x11 | 0;
          x9 ^= u << 13 | u >>> 32 - 13;
          u = x9 + x8 | 0;
          x10 ^= u << 18 | u >>> 32 - 18;
          u = x15 + x14 | 0;
          x12 ^= u << 7 | u >>> 32 - 7;
          u = x12 + x15 | 0;
          x13 ^= u << 9 | u >>> 32 - 9;
          u = x13 + x12 | 0;
          x14 ^= u << 13 | u >>> 32 - 13;
          u = x14 + x13 | 0;
          x15 ^= u << 18 | u >>> 32 - 18;
        }
        x0 = x0 + j0 | 0;
        x1 = x1 + j1 | 0;
        x2 = x2 + j2 | 0;
        x3 = x3 + j3 | 0;
        x4 = x4 + j4 | 0;
        x5 = x5 + j5 | 0;
        x6 = x6 + j6 | 0;
        x7 = x7 + j7 | 0;
        x8 = x8 + j8 | 0;
        x9 = x9 + j9 | 0;
        x10 = x10 + j10 | 0;
        x11 = x11 + j11 | 0;
        x12 = x12 + j12 | 0;
        x13 = x13 + j13 | 0;
        x14 = x14 + j14 | 0;
        x15 = x15 + j15 | 0;
        o[0] = x0 >>> 0 & 255;
        o[1] = x0 >>> 8 & 255;
        o[2] = x0 >>> 16 & 255;
        o[3] = x0 >>> 24 & 255;
        o[4] = x1 >>> 0 & 255;
        o[5] = x1 >>> 8 & 255;
        o[6] = x1 >>> 16 & 255;
        o[7] = x1 >>> 24 & 255;
        o[8] = x2 >>> 0 & 255;
        o[9] = x2 >>> 8 & 255;
        o[10] = x2 >>> 16 & 255;
        o[11] = x2 >>> 24 & 255;
        o[12] = x3 >>> 0 & 255;
        o[13] = x3 >>> 8 & 255;
        o[14] = x3 >>> 16 & 255;
        o[15] = x3 >>> 24 & 255;
        o[16] = x4 >>> 0 & 255;
        o[17] = x4 >>> 8 & 255;
        o[18] = x4 >>> 16 & 255;
        o[19] = x4 >>> 24 & 255;
        o[20] = x5 >>> 0 & 255;
        o[21] = x5 >>> 8 & 255;
        o[22] = x5 >>> 16 & 255;
        o[23] = x5 >>> 24 & 255;
        o[24] = x6 >>> 0 & 255;
        o[25] = x6 >>> 8 & 255;
        o[26] = x6 >>> 16 & 255;
        o[27] = x6 >>> 24 & 255;
        o[28] = x7 >>> 0 & 255;
        o[29] = x7 >>> 8 & 255;
        o[30] = x7 >>> 16 & 255;
        o[31] = x7 >>> 24 & 255;
        o[32] = x8 >>> 0 & 255;
        o[33] = x8 >>> 8 & 255;
        o[34] = x8 >>> 16 & 255;
        o[35] = x8 >>> 24 & 255;
        o[36] = x9 >>> 0 & 255;
        o[37] = x9 >>> 8 & 255;
        o[38] = x9 >>> 16 & 255;
        o[39] = x9 >>> 24 & 255;
        o[40] = x10 >>> 0 & 255;
        o[41] = x10 >>> 8 & 255;
        o[42] = x10 >>> 16 & 255;
        o[43] = x10 >>> 24 & 255;
        o[44] = x11 >>> 0 & 255;
        o[45] = x11 >>> 8 & 255;
        o[46] = x11 >>> 16 & 255;
        o[47] = x11 >>> 24 & 255;
        o[48] = x12 >>> 0 & 255;
        o[49] = x12 >>> 8 & 255;
        o[50] = x12 >>> 16 & 255;
        o[51] = x12 >>> 24 & 255;
        o[52] = x13 >>> 0 & 255;
        o[53] = x13 >>> 8 & 255;
        o[54] = x13 >>> 16 & 255;
        o[55] = x13 >>> 24 & 255;
        o[56] = x14 >>> 0 & 255;
        o[57] = x14 >>> 8 & 255;
        o[58] = x14 >>> 16 & 255;
        o[59] = x14 >>> 24 & 255;
        o[60] = x15 >>> 0 & 255;
        o[61] = x15 >>> 8 & 255;
        o[62] = x15 >>> 16 & 255;
        o[63] = x15 >>> 24 & 255;
      }
      function core_hsalsa20(o, p, k, c) {
        var j0 = c[0] & 255 | (c[1] & 255) << 8 | (c[2] & 255) << 16 | (c[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c[4] & 255 | (c[5] & 255) << 8 | (c[6] & 255) << 16 | (c[7] & 255) << 24, j6 = p[0] & 255 | (p[1] & 255) << 8 | (p[2] & 255) << 16 | (p[3] & 255) << 24, j7 = p[4] & 255 | (p[5] & 255) << 8 | (p[6] & 255) << 16 | (p[7] & 255) << 24, j8 = p[8] & 255 | (p[9] & 255) << 8 | (p[10] & 255) << 16 | (p[11] & 255) << 24, j9 = p[12] & 255 | (p[13] & 255) << 8 | (p[14] & 255) << 16 | (p[15] & 255) << 24, j10 = c[8] & 255 | (c[9] & 255) << 8 | (c[10] & 255) << 16 | (c[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c[12] & 255 | (c[13] & 255) << 8 | (c[14] & 255) << 16 | (c[15] & 255) << 24;
        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
        for (var i2 = 0; i2 < 20; i2 += 2) {
          u = x0 + x12 | 0;
          x4 ^= u << 7 | u >>> 32 - 7;
          u = x4 + x0 | 0;
          x8 ^= u << 9 | u >>> 32 - 9;
          u = x8 + x4 | 0;
          x12 ^= u << 13 | u >>> 32 - 13;
          u = x12 + x8 | 0;
          x0 ^= u << 18 | u >>> 32 - 18;
          u = x5 + x1 | 0;
          x9 ^= u << 7 | u >>> 32 - 7;
          u = x9 + x5 | 0;
          x13 ^= u << 9 | u >>> 32 - 9;
          u = x13 + x9 | 0;
          x1 ^= u << 13 | u >>> 32 - 13;
          u = x1 + x13 | 0;
          x5 ^= u << 18 | u >>> 32 - 18;
          u = x10 + x6 | 0;
          x14 ^= u << 7 | u >>> 32 - 7;
          u = x14 + x10 | 0;
          x2 ^= u << 9 | u >>> 32 - 9;
          u = x2 + x14 | 0;
          x6 ^= u << 13 | u >>> 32 - 13;
          u = x6 + x2 | 0;
          x10 ^= u << 18 | u >>> 32 - 18;
          u = x15 + x11 | 0;
          x3 ^= u << 7 | u >>> 32 - 7;
          u = x3 + x15 | 0;
          x7 ^= u << 9 | u >>> 32 - 9;
          u = x7 + x3 | 0;
          x11 ^= u << 13 | u >>> 32 - 13;
          u = x11 + x7 | 0;
          x15 ^= u << 18 | u >>> 32 - 18;
          u = x0 + x3 | 0;
          x1 ^= u << 7 | u >>> 32 - 7;
          u = x1 + x0 | 0;
          x2 ^= u << 9 | u >>> 32 - 9;
          u = x2 + x1 | 0;
          x3 ^= u << 13 | u >>> 32 - 13;
          u = x3 + x2 | 0;
          x0 ^= u << 18 | u >>> 32 - 18;
          u = x5 + x4 | 0;
          x6 ^= u << 7 | u >>> 32 - 7;
          u = x6 + x5 | 0;
          x7 ^= u << 9 | u >>> 32 - 9;
          u = x7 + x6 | 0;
          x4 ^= u << 13 | u >>> 32 - 13;
          u = x4 + x7 | 0;
          x5 ^= u << 18 | u >>> 32 - 18;
          u = x10 + x9 | 0;
          x11 ^= u << 7 | u >>> 32 - 7;
          u = x11 + x10 | 0;
          x8 ^= u << 9 | u >>> 32 - 9;
          u = x8 + x11 | 0;
          x9 ^= u << 13 | u >>> 32 - 13;
          u = x9 + x8 | 0;
          x10 ^= u << 18 | u >>> 32 - 18;
          u = x15 + x14 | 0;
          x12 ^= u << 7 | u >>> 32 - 7;
          u = x12 + x15 | 0;
          x13 ^= u << 9 | u >>> 32 - 9;
          u = x13 + x12 | 0;
          x14 ^= u << 13 | u >>> 32 - 13;
          u = x14 + x13 | 0;
          x15 ^= u << 18 | u >>> 32 - 18;
        }
        o[0] = x0 >>> 0 & 255;
        o[1] = x0 >>> 8 & 255;
        o[2] = x0 >>> 16 & 255;
        o[3] = x0 >>> 24 & 255;
        o[4] = x5 >>> 0 & 255;
        o[5] = x5 >>> 8 & 255;
        o[6] = x5 >>> 16 & 255;
        o[7] = x5 >>> 24 & 255;
        o[8] = x10 >>> 0 & 255;
        o[9] = x10 >>> 8 & 255;
        o[10] = x10 >>> 16 & 255;
        o[11] = x10 >>> 24 & 255;
        o[12] = x15 >>> 0 & 255;
        o[13] = x15 >>> 8 & 255;
        o[14] = x15 >>> 16 & 255;
        o[15] = x15 >>> 24 & 255;
        o[16] = x6 >>> 0 & 255;
        o[17] = x6 >>> 8 & 255;
        o[18] = x6 >>> 16 & 255;
        o[19] = x6 >>> 24 & 255;
        o[20] = x7 >>> 0 & 255;
        o[21] = x7 >>> 8 & 255;
        o[22] = x7 >>> 16 & 255;
        o[23] = x7 >>> 24 & 255;
        o[24] = x8 >>> 0 & 255;
        o[25] = x8 >>> 8 & 255;
        o[26] = x8 >>> 16 & 255;
        o[27] = x8 >>> 24 & 255;
        o[28] = x9 >>> 0 & 255;
        o[29] = x9 >>> 8 & 255;
        o[30] = x9 >>> 16 & 255;
        o[31] = x9 >>> 24 & 255;
      }
      function crypto_core_salsa20(out, inp, k, c) {
        core_salsa20(out, inp, k, c);
      }
      function crypto_core_hsalsa20(out, inp, k, c) {
        core_hsalsa20(out, inp, k, c);
      }
      var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
      function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i2;
        for (i2 = 0; i2 < 16; i2++) z[i2] = 0;
        for (i2 = 0; i2 < 8; i2++) z[i2] = n[i2];
        while (b >= 64) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i2 = 0; i2 < 64; i2++) c[cpos + i2] = m[mpos + i2] ^ x[i2];
          u = 1;
          for (i2 = 8; i2 < 16; i2++) {
            u = u + (z[i2] & 255) | 0;
            z[i2] = u & 255;
            u >>>= 8;
          }
          b -= 64;
          cpos += 64;
          mpos += 64;
        }
        if (b > 0) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i2 = 0; i2 < b; i2++) c[cpos + i2] = m[mpos + i2] ^ x[i2];
        }
        return 0;
      }
      function crypto_stream_salsa20(c, cpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i2;
        for (i2 = 0; i2 < 16; i2++) z[i2] = 0;
        for (i2 = 0; i2 < 8; i2++) z[i2] = n[i2];
        while (b >= 64) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i2 = 0; i2 < 64; i2++) c[cpos + i2] = x[i2];
          u = 1;
          for (i2 = 8; i2 < 16; i2++) {
            u = u + (z[i2] & 255) | 0;
            z[i2] = u & 255;
            u >>>= 8;
          }
          b -= 64;
          cpos += 64;
        }
        if (b > 0) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i2 = 0; i2 < b; i2++) c[cpos + i2] = x[i2];
        }
        return 0;
      }
      function crypto_stream(c, cpos, d, n, k) {
        var s2 = new Uint8Array(32);
        crypto_core_hsalsa20(s2, n, k, sigma);
        var sn = new Uint8Array(8);
        for (var i2 = 0; i2 < 8; i2++) sn[i2] = n[i2 + 16];
        return crypto_stream_salsa20(c, cpos, d, sn, s2);
      }
      function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
        var s2 = new Uint8Array(32);
        crypto_core_hsalsa20(s2, n, k, sigma);
        var sn = new Uint8Array(8);
        for (var i2 = 0; i2 < 8; i2++) sn[i2] = n[i2 + 16];
        return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s2);
      }
      var poly1305 = function(key2) {
        this.buffer = new Uint8Array(16);
        this.r = new Uint16Array(10);
        this.h = new Uint16Array(10);
        this.pad = new Uint16Array(8);
        this.leftover = 0;
        this.fin = 0;
        var t0, t1, t2, t3, t4, t5, t6, t7;
        t0 = key2[0] & 255 | (key2[1] & 255) << 8;
        this.r[0] = t0 & 8191;
        t1 = key2[2] & 255 | (key2[3] & 255) << 8;
        this.r[1] = (t0 >>> 13 | t1 << 3) & 8191;
        t2 = key2[4] & 255 | (key2[5] & 255) << 8;
        this.r[2] = (t1 >>> 10 | t2 << 6) & 7939;
        t3 = key2[6] & 255 | (key2[7] & 255) << 8;
        this.r[3] = (t2 >>> 7 | t3 << 9) & 8191;
        t4 = key2[8] & 255 | (key2[9] & 255) << 8;
        this.r[4] = (t3 >>> 4 | t4 << 12) & 255;
        this.r[5] = t4 >>> 1 & 8190;
        t5 = key2[10] & 255 | (key2[11] & 255) << 8;
        this.r[6] = (t4 >>> 14 | t5 << 2) & 8191;
        t6 = key2[12] & 255 | (key2[13] & 255) << 8;
        this.r[7] = (t5 >>> 11 | t6 << 5) & 8065;
        t7 = key2[14] & 255 | (key2[15] & 255) << 8;
        this.r[8] = (t6 >>> 8 | t7 << 8) & 8191;
        this.r[9] = t7 >>> 5 & 127;
        this.pad[0] = key2[16] & 255 | (key2[17] & 255) << 8;
        this.pad[1] = key2[18] & 255 | (key2[19] & 255) << 8;
        this.pad[2] = key2[20] & 255 | (key2[21] & 255) << 8;
        this.pad[3] = key2[22] & 255 | (key2[23] & 255) << 8;
        this.pad[4] = key2[24] & 255 | (key2[25] & 255) << 8;
        this.pad[5] = key2[26] & 255 | (key2[27] & 255) << 8;
        this.pad[6] = key2[28] & 255 | (key2[29] & 255) << 8;
        this.pad[7] = key2[30] & 255 | (key2[31] & 255) << 8;
      };
      poly1305.prototype.blocks = function(m, mpos, bytes2) {
        var hibit = this.fin ? 0 : 1 << 11;
        var t0, t1, t2, t3, t4, t5, t6, t7, c;
        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
        var h0 = this.h[0], h1 = this.h[1], h2 = this.h[2], h3 = this.h[3], h4 = this.h[4], h5 = this.h[5], h6 = this.h[6], h7 = this.h[7], h8 = this.h[8], h9 = this.h[9];
        var r0 = this.r[0], r1 = this.r[1], r2 = this.r[2], r3 = this.r[3], r4 = this.r[4], r5 = this.r[5], r6 = this.r[6], r7 = this.r[7], r8 = this.r[8], r9 = this.r[9];
        while (bytes2 >= 16) {
          t0 = m[mpos + 0] & 255 | (m[mpos + 1] & 255) << 8;
          h0 += t0 & 8191;
          t1 = m[mpos + 2] & 255 | (m[mpos + 3] & 255) << 8;
          h1 += (t0 >>> 13 | t1 << 3) & 8191;
          t2 = m[mpos + 4] & 255 | (m[mpos + 5] & 255) << 8;
          h2 += (t1 >>> 10 | t2 << 6) & 8191;
          t3 = m[mpos + 6] & 255 | (m[mpos + 7] & 255) << 8;
          h3 += (t2 >>> 7 | t3 << 9) & 8191;
          t4 = m[mpos + 8] & 255 | (m[mpos + 9] & 255) << 8;
          h4 += (t3 >>> 4 | t4 << 12) & 8191;
          h5 += t4 >>> 1 & 8191;
          t5 = m[mpos + 10] & 255 | (m[mpos + 11] & 255) << 8;
          h6 += (t4 >>> 14 | t5 << 2) & 8191;
          t6 = m[mpos + 12] & 255 | (m[mpos + 13] & 255) << 8;
          h7 += (t5 >>> 11 | t6 << 5) & 8191;
          t7 = m[mpos + 14] & 255 | (m[mpos + 15] & 255) << 8;
          h8 += (t6 >>> 8 | t7 << 8) & 8191;
          h9 += t7 >>> 5 | hibit;
          c = 0;
          d0 = c;
          d0 += h0 * r0;
          d0 += h1 * (5 * r9);
          d0 += h2 * (5 * r8);
          d0 += h3 * (5 * r7);
          d0 += h4 * (5 * r6);
          c = d0 >>> 13;
          d0 &= 8191;
          d0 += h5 * (5 * r5);
          d0 += h6 * (5 * r4);
          d0 += h7 * (5 * r3);
          d0 += h8 * (5 * r2);
          d0 += h9 * (5 * r1);
          c += d0 >>> 13;
          d0 &= 8191;
          d1 = c;
          d1 += h0 * r1;
          d1 += h1 * r0;
          d1 += h2 * (5 * r9);
          d1 += h3 * (5 * r8);
          d1 += h4 * (5 * r7);
          c = d1 >>> 13;
          d1 &= 8191;
          d1 += h5 * (5 * r6);
          d1 += h6 * (5 * r5);
          d1 += h7 * (5 * r4);
          d1 += h8 * (5 * r3);
          d1 += h9 * (5 * r2);
          c += d1 >>> 13;
          d1 &= 8191;
          d2 = c;
          d2 += h0 * r2;
          d2 += h1 * r1;
          d2 += h2 * r0;
          d2 += h3 * (5 * r9);
          d2 += h4 * (5 * r8);
          c = d2 >>> 13;
          d2 &= 8191;
          d2 += h5 * (5 * r7);
          d2 += h6 * (5 * r6);
          d2 += h7 * (5 * r5);
          d2 += h8 * (5 * r4);
          d2 += h9 * (5 * r3);
          c += d2 >>> 13;
          d2 &= 8191;
          d3 = c;
          d3 += h0 * r3;
          d3 += h1 * r2;
          d3 += h2 * r1;
          d3 += h3 * r0;
          d3 += h4 * (5 * r9);
          c = d3 >>> 13;
          d3 &= 8191;
          d3 += h5 * (5 * r8);
          d3 += h6 * (5 * r7);
          d3 += h7 * (5 * r6);
          d3 += h8 * (5 * r5);
          d3 += h9 * (5 * r4);
          c += d3 >>> 13;
          d3 &= 8191;
          d4 = c;
          d4 += h0 * r4;
          d4 += h1 * r3;
          d4 += h2 * r2;
          d4 += h3 * r1;
          d4 += h4 * r0;
          c = d4 >>> 13;
          d4 &= 8191;
          d4 += h5 * (5 * r9);
          d4 += h6 * (5 * r8);
          d4 += h7 * (5 * r7);
          d4 += h8 * (5 * r6);
          d4 += h9 * (5 * r5);
          c += d4 >>> 13;
          d4 &= 8191;
          d5 = c;
          d5 += h0 * r5;
          d5 += h1 * r4;
          d5 += h2 * r3;
          d5 += h3 * r2;
          d5 += h4 * r1;
          c = d5 >>> 13;
          d5 &= 8191;
          d5 += h5 * r0;
          d5 += h6 * (5 * r9);
          d5 += h7 * (5 * r8);
          d5 += h8 * (5 * r7);
          d5 += h9 * (5 * r6);
          c += d5 >>> 13;
          d5 &= 8191;
          d6 = c;
          d6 += h0 * r6;
          d6 += h1 * r5;
          d6 += h2 * r4;
          d6 += h3 * r3;
          d6 += h4 * r2;
          c = d6 >>> 13;
          d6 &= 8191;
          d6 += h5 * r1;
          d6 += h6 * r0;
          d6 += h7 * (5 * r9);
          d6 += h8 * (5 * r8);
          d6 += h9 * (5 * r7);
          c += d6 >>> 13;
          d6 &= 8191;
          d7 = c;
          d7 += h0 * r7;
          d7 += h1 * r6;
          d7 += h2 * r5;
          d7 += h3 * r4;
          d7 += h4 * r3;
          c = d7 >>> 13;
          d7 &= 8191;
          d7 += h5 * r2;
          d7 += h6 * r1;
          d7 += h7 * r0;
          d7 += h8 * (5 * r9);
          d7 += h9 * (5 * r8);
          c += d7 >>> 13;
          d7 &= 8191;
          d8 = c;
          d8 += h0 * r8;
          d8 += h1 * r7;
          d8 += h2 * r6;
          d8 += h3 * r5;
          d8 += h4 * r4;
          c = d8 >>> 13;
          d8 &= 8191;
          d8 += h5 * r3;
          d8 += h6 * r2;
          d8 += h7 * r1;
          d8 += h8 * r0;
          d8 += h9 * (5 * r9);
          c += d8 >>> 13;
          d8 &= 8191;
          d9 = c;
          d9 += h0 * r9;
          d9 += h1 * r8;
          d9 += h2 * r7;
          d9 += h3 * r6;
          d9 += h4 * r5;
          c = d9 >>> 13;
          d9 &= 8191;
          d9 += h5 * r4;
          d9 += h6 * r3;
          d9 += h7 * r2;
          d9 += h8 * r1;
          d9 += h9 * r0;
          c += d9 >>> 13;
          d9 &= 8191;
          c = (c << 2) + c | 0;
          c = c + d0 | 0;
          d0 = c & 8191;
          c = c >>> 13;
          d1 += c;
          h0 = d0;
          h1 = d1;
          h2 = d2;
          h3 = d3;
          h4 = d4;
          h5 = d5;
          h6 = d6;
          h7 = d7;
          h8 = d8;
          h9 = d9;
          mpos += 16;
          bytes2 -= 16;
        }
        this.h[0] = h0;
        this.h[1] = h1;
        this.h[2] = h2;
        this.h[3] = h3;
        this.h[4] = h4;
        this.h[5] = h5;
        this.h[6] = h6;
        this.h[7] = h7;
        this.h[8] = h8;
        this.h[9] = h9;
      };
      poly1305.prototype.finish = function(mac, macpos) {
        var g = new Uint16Array(10);
        var c, mask2, f2, i2;
        if (this.leftover) {
          i2 = this.leftover;
          this.buffer[i2++] = 1;
          for (; i2 < 16; i2++) this.buffer[i2] = 0;
          this.fin = 1;
          this.blocks(this.buffer, 0, 16);
        }
        c = this.h[1] >>> 13;
        this.h[1] &= 8191;
        for (i2 = 2; i2 < 10; i2++) {
          this.h[i2] += c;
          c = this.h[i2] >>> 13;
          this.h[i2] &= 8191;
        }
        this.h[0] += c * 5;
        c = this.h[0] >>> 13;
        this.h[0] &= 8191;
        this.h[1] += c;
        c = this.h[1] >>> 13;
        this.h[1] &= 8191;
        this.h[2] += c;
        g[0] = this.h[0] + 5;
        c = g[0] >>> 13;
        g[0] &= 8191;
        for (i2 = 1; i2 < 10; i2++) {
          g[i2] = this.h[i2] + c;
          c = g[i2] >>> 13;
          g[i2] &= 8191;
        }
        g[9] -= 1 << 13;
        mask2 = (c ^ 1) - 1;
        for (i2 = 0; i2 < 10; i2++) g[i2] &= mask2;
        mask2 = ~mask2;
        for (i2 = 0; i2 < 10; i2++) this.h[i2] = this.h[i2] & mask2 | g[i2];
        this.h[0] = (this.h[0] | this.h[1] << 13) & 65535;
        this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 65535;
        this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 65535;
        this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 65535;
        this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 65535;
        this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 65535;
        this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 65535;
        this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 65535;
        f2 = this.h[0] + this.pad[0];
        this.h[0] = f2 & 65535;
        for (i2 = 1; i2 < 8; i2++) {
          f2 = (this.h[i2] + this.pad[i2] | 0) + (f2 >>> 16) | 0;
          this.h[i2] = f2 & 65535;
        }
        mac[macpos + 0] = this.h[0] >>> 0 & 255;
        mac[macpos + 1] = this.h[0] >>> 8 & 255;
        mac[macpos + 2] = this.h[1] >>> 0 & 255;
        mac[macpos + 3] = this.h[1] >>> 8 & 255;
        mac[macpos + 4] = this.h[2] >>> 0 & 255;
        mac[macpos + 5] = this.h[2] >>> 8 & 255;
        mac[macpos + 6] = this.h[3] >>> 0 & 255;
        mac[macpos + 7] = this.h[3] >>> 8 & 255;
        mac[macpos + 8] = this.h[4] >>> 0 & 255;
        mac[macpos + 9] = this.h[4] >>> 8 & 255;
        mac[macpos + 10] = this.h[5] >>> 0 & 255;
        mac[macpos + 11] = this.h[5] >>> 8 & 255;
        mac[macpos + 12] = this.h[6] >>> 0 & 255;
        mac[macpos + 13] = this.h[6] >>> 8 & 255;
        mac[macpos + 14] = this.h[7] >>> 0 & 255;
        mac[macpos + 15] = this.h[7] >>> 8 & 255;
      };
      poly1305.prototype.update = function(m, mpos, bytes2) {
        var i2, want;
        if (this.leftover) {
          want = 16 - this.leftover;
          if (want > bytes2)
            want = bytes2;
          for (i2 = 0; i2 < want; i2++)
            this.buffer[this.leftover + i2] = m[mpos + i2];
          bytes2 -= want;
          mpos += want;
          this.leftover += want;
          if (this.leftover < 16)
            return;
          this.blocks(this.buffer, 0, 16);
          this.leftover = 0;
        }
        if (bytes2 >= 16) {
          want = bytes2 - bytes2 % 16;
          this.blocks(m, mpos, want);
          mpos += want;
          bytes2 -= want;
        }
        if (bytes2) {
          for (i2 = 0; i2 < bytes2; i2++)
            this.buffer[this.leftover + i2] = m[mpos + i2];
          this.leftover += bytes2;
        }
      };
      function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
        var s2 = new poly1305(k);
        s2.update(m, mpos, n);
        s2.finish(out, outpos);
        return 0;
      }
      function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
        var x = new Uint8Array(16);
        crypto_onetimeauth(x, 0, m, mpos, n, k);
        return crypto_verify_16(h, hpos, x, 0);
      }
      function crypto_secretbox(c, m, d, n, k) {
        var i2;
        if (d < 32) return -1;
        crypto_stream_xor(c, 0, m, 0, d, n, k);
        crypto_onetimeauth(c, 16, c, 32, d - 32, c);
        for (i2 = 0; i2 < 16; i2++) c[i2] = 0;
        return 0;
      }
      function crypto_secretbox_open(m, c, d, n, k) {
        var i2;
        var x = new Uint8Array(32);
        if (d < 32) return -1;
        crypto_stream(x, 0, 32, n, k);
        if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
        crypto_stream_xor(m, 0, c, 0, d, n, k);
        for (i2 = 0; i2 < 32; i2++) m[i2] = 0;
        return 0;
      }
      function set25519(r2, a) {
        var i2;
        for (i2 = 0; i2 < 16; i2++) r2[i2] = a[i2] | 0;
      }
      function car25519(o) {
        var i2, v, c = 1;
        for (i2 = 0; i2 < 16; i2++) {
          v = o[i2] + c + 65535;
          c = Math.floor(v / 65536);
          o[i2] = v - c * 65536;
        }
        o[0] += c - 1 + 37 * (c - 1);
      }
      function sel25519(p, q, b) {
        var t2, c = ~(b - 1);
        for (var i2 = 0; i2 < 16; i2++) {
          t2 = c & (p[i2] ^ q[i2]);
          p[i2] ^= t2;
          q[i2] ^= t2;
        }
      }
      function pack25519(o, n) {
        var i2, j, b;
        var m = gf(), t2 = gf();
        for (i2 = 0; i2 < 16; i2++) t2[i2] = n[i2];
        car25519(t2);
        car25519(t2);
        car25519(t2);
        for (j = 0; j < 2; j++) {
          m[0] = t2[0] - 65517;
          for (i2 = 1; i2 < 15; i2++) {
            m[i2] = t2[i2] - 65535 - (m[i2 - 1] >> 16 & 1);
            m[i2 - 1] &= 65535;
          }
          m[15] = t2[15] - 32767 - (m[14] >> 16 & 1);
          b = m[15] >> 16 & 1;
          m[14] &= 65535;
          sel25519(t2, m, 1 - b);
        }
        for (i2 = 0; i2 < 16; i2++) {
          o[2 * i2] = t2[i2] & 255;
          o[2 * i2 + 1] = t2[i2] >> 8;
        }
      }
      function neq25519(a, b) {
        var c = new Uint8Array(32), d = new Uint8Array(32);
        pack25519(c, a);
        pack25519(d, b);
        return crypto_verify_32(c, 0, d, 0);
      }
      function par25519(a) {
        var d = new Uint8Array(32);
        pack25519(d, a);
        return d[0] & 1;
      }
      function unpack25519(o, n) {
        var i2;
        for (i2 = 0; i2 < 16; i2++) o[i2] = n[2 * i2] + (n[2 * i2 + 1] << 8);
        o[15] &= 32767;
      }
      function A(o, a, b) {
        for (var i2 = 0; i2 < 16; i2++) o[i2] = a[i2] + b[i2];
      }
      function Z(o, a, b) {
        for (var i2 = 0; i2 < 16; i2++) o[i2] = a[i2] - b[i2];
      }
      function M(o, a, b) {
        var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
        v = a[0];
        t0 += v * b0;
        t1 += v * b1;
        t2 += v * b2;
        t3 += v * b3;
        t4 += v * b4;
        t5 += v * b5;
        t6 += v * b6;
        t7 += v * b7;
        t8 += v * b8;
        t9 += v * b9;
        t10 += v * b10;
        t11 += v * b11;
        t12 += v * b12;
        t13 += v * b13;
        t14 += v * b14;
        t15 += v * b15;
        v = a[1];
        t1 += v * b0;
        t2 += v * b1;
        t3 += v * b2;
        t4 += v * b3;
        t5 += v * b4;
        t6 += v * b5;
        t7 += v * b6;
        t8 += v * b7;
        t9 += v * b8;
        t10 += v * b9;
        t11 += v * b10;
        t12 += v * b11;
        t13 += v * b12;
        t14 += v * b13;
        t15 += v * b14;
        t16 += v * b15;
        v = a[2];
        t2 += v * b0;
        t3 += v * b1;
        t4 += v * b2;
        t5 += v * b3;
        t6 += v * b4;
        t7 += v * b5;
        t8 += v * b6;
        t9 += v * b7;
        t10 += v * b8;
        t11 += v * b9;
        t12 += v * b10;
        t13 += v * b11;
        t14 += v * b12;
        t15 += v * b13;
        t16 += v * b14;
        t17 += v * b15;
        v = a[3];
        t3 += v * b0;
        t4 += v * b1;
        t5 += v * b2;
        t6 += v * b3;
        t7 += v * b4;
        t8 += v * b5;
        t9 += v * b6;
        t10 += v * b7;
        t11 += v * b8;
        t12 += v * b9;
        t13 += v * b10;
        t14 += v * b11;
        t15 += v * b12;
        t16 += v * b13;
        t17 += v * b14;
        t18 += v * b15;
        v = a[4];
        t4 += v * b0;
        t5 += v * b1;
        t6 += v * b2;
        t7 += v * b3;
        t8 += v * b4;
        t9 += v * b5;
        t10 += v * b6;
        t11 += v * b7;
        t12 += v * b8;
        t13 += v * b9;
        t14 += v * b10;
        t15 += v * b11;
        t16 += v * b12;
        t17 += v * b13;
        t18 += v * b14;
        t19 += v * b15;
        v = a[5];
        t5 += v * b0;
        t6 += v * b1;
        t7 += v * b2;
        t8 += v * b3;
        t9 += v * b4;
        t10 += v * b5;
        t11 += v * b6;
        t12 += v * b7;
        t13 += v * b8;
        t14 += v * b9;
        t15 += v * b10;
        t16 += v * b11;
        t17 += v * b12;
        t18 += v * b13;
        t19 += v * b14;
        t20 += v * b15;
        v = a[6];
        t6 += v * b0;
        t7 += v * b1;
        t8 += v * b2;
        t9 += v * b3;
        t10 += v * b4;
        t11 += v * b5;
        t12 += v * b6;
        t13 += v * b7;
        t14 += v * b8;
        t15 += v * b9;
        t16 += v * b10;
        t17 += v * b11;
        t18 += v * b12;
        t19 += v * b13;
        t20 += v * b14;
        t21 += v * b15;
        v = a[7];
        t7 += v * b0;
        t8 += v * b1;
        t9 += v * b2;
        t10 += v * b3;
        t11 += v * b4;
        t12 += v * b5;
        t13 += v * b6;
        t14 += v * b7;
        t15 += v * b8;
        t16 += v * b9;
        t17 += v * b10;
        t18 += v * b11;
        t19 += v * b12;
        t20 += v * b13;
        t21 += v * b14;
        t22 += v * b15;
        v = a[8];
        t8 += v * b0;
        t9 += v * b1;
        t10 += v * b2;
        t11 += v * b3;
        t12 += v * b4;
        t13 += v * b5;
        t14 += v * b6;
        t15 += v * b7;
        t16 += v * b8;
        t17 += v * b9;
        t18 += v * b10;
        t19 += v * b11;
        t20 += v * b12;
        t21 += v * b13;
        t22 += v * b14;
        t23 += v * b15;
        v = a[9];
        t9 += v * b0;
        t10 += v * b1;
        t11 += v * b2;
        t12 += v * b3;
        t13 += v * b4;
        t14 += v * b5;
        t15 += v * b6;
        t16 += v * b7;
        t17 += v * b8;
        t18 += v * b9;
        t19 += v * b10;
        t20 += v * b11;
        t21 += v * b12;
        t22 += v * b13;
        t23 += v * b14;
        t24 += v * b15;
        v = a[10];
        t10 += v * b0;
        t11 += v * b1;
        t12 += v * b2;
        t13 += v * b3;
        t14 += v * b4;
        t15 += v * b5;
        t16 += v * b6;
        t17 += v * b7;
        t18 += v * b8;
        t19 += v * b9;
        t20 += v * b10;
        t21 += v * b11;
        t22 += v * b12;
        t23 += v * b13;
        t24 += v * b14;
        t25 += v * b15;
        v = a[11];
        t11 += v * b0;
        t12 += v * b1;
        t13 += v * b2;
        t14 += v * b3;
        t15 += v * b4;
        t16 += v * b5;
        t17 += v * b6;
        t18 += v * b7;
        t19 += v * b8;
        t20 += v * b9;
        t21 += v * b10;
        t22 += v * b11;
        t23 += v * b12;
        t24 += v * b13;
        t25 += v * b14;
        t26 += v * b15;
        v = a[12];
        t12 += v * b0;
        t13 += v * b1;
        t14 += v * b2;
        t15 += v * b3;
        t16 += v * b4;
        t17 += v * b5;
        t18 += v * b6;
        t19 += v * b7;
        t20 += v * b8;
        t21 += v * b9;
        t22 += v * b10;
        t23 += v * b11;
        t24 += v * b12;
        t25 += v * b13;
        t26 += v * b14;
        t27 += v * b15;
        v = a[13];
        t13 += v * b0;
        t14 += v * b1;
        t15 += v * b2;
        t16 += v * b3;
        t17 += v * b4;
        t18 += v * b5;
        t19 += v * b6;
        t20 += v * b7;
        t21 += v * b8;
        t22 += v * b9;
        t23 += v * b10;
        t24 += v * b11;
        t25 += v * b12;
        t26 += v * b13;
        t27 += v * b14;
        t28 += v * b15;
        v = a[14];
        t14 += v * b0;
        t15 += v * b1;
        t16 += v * b2;
        t17 += v * b3;
        t18 += v * b4;
        t19 += v * b5;
        t20 += v * b6;
        t21 += v * b7;
        t22 += v * b8;
        t23 += v * b9;
        t24 += v * b10;
        t25 += v * b11;
        t26 += v * b12;
        t27 += v * b13;
        t28 += v * b14;
        t29 += v * b15;
        v = a[15];
        t15 += v * b0;
        t16 += v * b1;
        t17 += v * b2;
        t18 += v * b3;
        t19 += v * b4;
        t20 += v * b5;
        t21 += v * b6;
        t22 += v * b7;
        t23 += v * b8;
        t24 += v * b9;
        t25 += v * b10;
        t26 += v * b11;
        t27 += v * b12;
        t28 += v * b13;
        t29 += v * b14;
        t30 += v * b15;
        t0 += 38 * t16;
        t1 += 38 * t17;
        t2 += 38 * t18;
        t3 += 38 * t19;
        t4 += 38 * t20;
        t5 += 38 * t21;
        t6 += 38 * t22;
        t7 += 38 * t23;
        t8 += 38 * t24;
        t9 += 38 * t25;
        t10 += 38 * t26;
        t11 += 38 * t27;
        t12 += 38 * t28;
        t13 += 38 * t29;
        t14 += 38 * t30;
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        o[0] = t0;
        o[1] = t1;
        o[2] = t2;
        o[3] = t3;
        o[4] = t4;
        o[5] = t5;
        o[6] = t6;
        o[7] = t7;
        o[8] = t8;
        o[9] = t9;
        o[10] = t10;
        o[11] = t11;
        o[12] = t12;
        o[13] = t13;
        o[14] = t14;
        o[15] = t15;
      }
      function S(o, a) {
        M(o, a, a);
      }
      function inv25519(o, i2) {
        var c = gf();
        var a;
        for (a = 0; a < 16; a++) c[a] = i2[a];
        for (a = 253; a >= 0; a--) {
          S(c, c);
          if (a !== 2 && a !== 4) M(c, c, i2);
        }
        for (a = 0; a < 16; a++) o[a] = c[a];
      }
      function pow2523(o, i2) {
        var c = gf();
        var a;
        for (a = 0; a < 16; a++) c[a] = i2[a];
        for (a = 250; a >= 0; a--) {
          S(c, c);
          if (a !== 1) M(c, c, i2);
        }
        for (a = 0; a < 16; a++) o[a] = c[a];
      }
      function crypto_scalarmult(q, n, p) {
        var z = new Uint8Array(32);
        var x = new Float64Array(80), r2, i2;
        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f2 = gf();
        for (i2 = 0; i2 < 31; i2++) z[i2] = n[i2];
        z[31] = n[31] & 127 | 64;
        z[0] &= 248;
        unpack25519(x, p);
        for (i2 = 0; i2 < 16; i2++) {
          b[i2] = x[i2];
          d[i2] = a[i2] = c[i2] = 0;
        }
        a[0] = d[0] = 1;
        for (i2 = 254; i2 >= 0; --i2) {
          r2 = z[i2 >>> 3] >>> (i2 & 7) & 1;
          sel25519(a, b, r2);
          sel25519(c, d, r2);
          A(e, a, c);
          Z(a, a, c);
          A(c, b, d);
          Z(b, b, d);
          S(d, e);
          S(f2, a);
          M(a, c, a);
          M(c, b, e);
          A(e, a, c);
          Z(a, a, c);
          S(b, a);
          Z(c, d, f2);
          M(a, c, _121665);
          A(a, a, d);
          M(c, c, a);
          M(a, d, f2);
          M(d, b, x);
          S(b, e);
          sel25519(a, b, r2);
          sel25519(c, d, r2);
        }
        for (i2 = 0; i2 < 16; i2++) {
          x[i2 + 16] = a[i2];
          x[i2 + 32] = c[i2];
          x[i2 + 48] = b[i2];
          x[i2 + 64] = d[i2];
        }
        var x32 = x.subarray(32);
        var x16 = x.subarray(16);
        inv25519(x32, x32);
        M(x16, x16, x32);
        pack25519(q, x16);
        return 0;
      }
      function crypto_scalarmult_base(q, n) {
        return crypto_scalarmult(q, n, _9);
      }
      function crypto_box_keypair(y, x) {
        randombytes(x, 32);
        return crypto_scalarmult_base(y, x);
      }
      function crypto_box_beforenm(k, y, x) {
        var s2 = new Uint8Array(32);
        crypto_scalarmult(s2, x, y);
        return crypto_core_hsalsa20(k, _0, s2, sigma);
      }
      var crypto_box_afternm = crypto_secretbox;
      var crypto_box_open_afternm = crypto_secretbox_open;
      function crypto_box(c, m, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_afternm(c, m, d, n, k);
      }
      function crypto_box_open(m, c, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_open_afternm(m, c, d, n, k);
      }
      var K2 = [
        1116352408,
        3609767458,
        1899447441,
        602891725,
        3049323471,
        3964484399,
        3921009573,
        2173295548,
        961987163,
        4081628472,
        1508970993,
        3053834265,
        2453635748,
        2937671579,
        2870763221,
        3664609560,
        3624381080,
        2734883394,
        310598401,
        1164996542,
        607225278,
        1323610764,
        1426881987,
        3590304994,
        1925078388,
        4068182383,
        2162078206,
        991336113,
        2614888103,
        633803317,
        3248222580,
        3479774868,
        3835390401,
        2666613458,
        4022224774,
        944711139,
        264347078,
        2341262773,
        604807628,
        2007800933,
        770255983,
        1495990901,
        1249150122,
        1856431235,
        1555081692,
        3175218132,
        1996064986,
        2198950837,
        2554220882,
        3999719339,
        2821834349,
        766784016,
        2952996808,
        2566594879,
        3210313671,
        3203337956,
        3336571891,
        1034457026,
        3584528711,
        2466948901,
        113926993,
        3758326383,
        338241895,
        168717936,
        666307205,
        1188179964,
        773529912,
        1546045734,
        1294757372,
        1522805485,
        1396182291,
        2643833823,
        1695183700,
        2343527390,
        1986661051,
        1014477480,
        2177026350,
        1206759142,
        2456956037,
        344077627,
        2730485921,
        1290863460,
        2820302411,
        3158454273,
        3259730800,
        3505952657,
        3345764771,
        106217008,
        3516065817,
        3606008344,
        3600352804,
        1432725776,
        4094571909,
        1467031594,
        275423344,
        851169720,
        430227734,
        3100823752,
        506948616,
        1363258195,
        659060556,
        3750685593,
        883997877,
        3785050280,
        958139571,
        3318307427,
        1322822218,
        3812723403,
        1537002063,
        2003034995,
        1747873779,
        3602036899,
        1955562222,
        1575990012,
        2024104815,
        1125592928,
        2227730452,
        2716904306,
        2361852424,
        442776044,
        2428436474,
        593698344,
        2756734187,
        3733110249,
        3204031479,
        2999351573,
        3329325298,
        3815920427,
        3391569614,
        3928383900,
        3515267271,
        566280711,
        3940187606,
        3454069534,
        4118630271,
        4000239992,
        116418474,
        1914138554,
        174292421,
        2731055270,
        289380356,
        3203993006,
        460393269,
        320620315,
        685471733,
        587496836,
        852142971,
        1086792851,
        1017036298,
        365543100,
        1126000580,
        2618297676,
        1288033470,
        3409855158,
        1501505948,
        4234509866,
        1607167915,
        987167468,
        1816402316,
        1246189591
      ];
      function crypto_hashblocks_hl(hh, hl, m, n) {
        var wh = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i2, j, h, l, a, b, c, d;
        var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
        var pos = 0;
        while (n >= 128) {
          for (i2 = 0; i2 < 16; i2++) {
            j = 8 * i2 + pos;
            wh[i2] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
            wl[i2] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
          }
          for (i2 = 0; i2 < 80; i2++) {
            bh0 = ah0;
            bh1 = ah1;
            bh2 = ah2;
            bh3 = ah3;
            bh4 = ah4;
            bh5 = ah5;
            bh6 = ah6;
            bh7 = ah7;
            bl0 = al0;
            bl1 = al1;
            bl2 = al2;
            bl3 = al3;
            bl4 = al4;
            bl5 = al5;
            bl6 = al6;
            bl7 = al7;
            h = ah7;
            l = al7;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
            l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            h = ah4 & ah5 ^ ~ah4 & ah6;
            l = al4 & al5 ^ ~al4 & al6;
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            h = K2[i2 * 2];
            l = K2[i2 * 2 + 1];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            h = wh[i2 % 16];
            l = wl[i2 % 16];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            th = c & 65535 | d << 16;
            tl = a & 65535 | b << 16;
            h = th;
            l = tl;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
            l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
            l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            bh7 = c & 65535 | d << 16;
            bl7 = a & 65535 | b << 16;
            h = bh3;
            l = bl3;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = th;
            l = tl;
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            bh3 = c & 65535 | d << 16;
            bl3 = a & 65535 | b << 16;
            ah1 = bh0;
            ah2 = bh1;
            ah3 = bh2;
            ah4 = bh3;
            ah5 = bh4;
            ah6 = bh5;
            ah7 = bh6;
            ah0 = bh7;
            al1 = bl0;
            al2 = bl1;
            al3 = bl2;
            al4 = bl3;
            al5 = bl4;
            al6 = bl5;
            al7 = bl6;
            al0 = bl7;
            if (i2 % 16 === 15) {
              for (j = 0; j < 16; j++) {
                h = wh[j];
                l = wl[j];
                a = l & 65535;
                b = l >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = wh[(j + 9) % 16];
                l = wl[(j + 9) % 16];
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                th = wh[(j + 1) % 16];
                tl = wl[(j + 1) % 16];
                h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
                l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                th = wh[(j + 14) % 16];
                tl = wl[(j + 14) % 16];
                h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
                l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                wh[j] = c & 65535 | d << 16;
                wl[j] = a & 65535 | b << 16;
              }
            }
          }
          h = ah0;
          l = al0;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[0];
          l = hl[0];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[0] = ah0 = c & 65535 | d << 16;
          hl[0] = al0 = a & 65535 | b << 16;
          h = ah1;
          l = al1;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[1];
          l = hl[1];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[1] = ah1 = c & 65535 | d << 16;
          hl[1] = al1 = a & 65535 | b << 16;
          h = ah2;
          l = al2;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[2];
          l = hl[2];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[2] = ah2 = c & 65535 | d << 16;
          hl[2] = al2 = a & 65535 | b << 16;
          h = ah3;
          l = al3;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[3];
          l = hl[3];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[3] = ah3 = c & 65535 | d << 16;
          hl[3] = al3 = a & 65535 | b << 16;
          h = ah4;
          l = al4;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[4];
          l = hl[4];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[4] = ah4 = c & 65535 | d << 16;
          hl[4] = al4 = a & 65535 | b << 16;
          h = ah5;
          l = al5;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[5];
          l = hl[5];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[5] = ah5 = c & 65535 | d << 16;
          hl[5] = al5 = a & 65535 | b << 16;
          h = ah6;
          l = al6;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[6];
          l = hl[6];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[6] = ah6 = c & 65535 | d << 16;
          hl[6] = al6 = a & 65535 | b << 16;
          h = ah7;
          l = al7;
          a = l & 65535;
          b = l >>> 16;
          c = h & 65535;
          d = h >>> 16;
          h = hh[7];
          l = hl[7];
          a += l & 65535;
          b += l >>> 16;
          c += h & 65535;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          hh[7] = ah7 = c & 65535 | d << 16;
          hl[7] = al7 = a & 65535 | b << 16;
          pos += 128;
          n -= 128;
        }
        return n;
      }
      function crypto_hash(out, m, n) {
        var hh = new Int32Array(8), hl = new Int32Array(8), x = new Uint8Array(256), i2, b = n;
        hh[0] = 1779033703;
        hh[1] = 3144134277;
        hh[2] = 1013904242;
        hh[3] = 2773480762;
        hh[4] = 1359893119;
        hh[5] = 2600822924;
        hh[6] = 528734635;
        hh[7] = 1541459225;
        hl[0] = 4089235720;
        hl[1] = 2227873595;
        hl[2] = 4271175723;
        hl[3] = 1595750129;
        hl[4] = 2917565137;
        hl[5] = 725511199;
        hl[6] = 4215389547;
        hl[7] = 327033209;
        crypto_hashblocks_hl(hh, hl, m, n);
        n %= 128;
        for (i2 = 0; i2 < n; i2++) x[i2] = m[b - n + i2];
        x[n] = 128;
        n = 256 - 128 * (n < 112 ? 1 : 0);
        x[n - 9] = 0;
        ts64(x, n - 8, b / 536870912 | 0, b << 3);
        crypto_hashblocks_hl(hh, hl, x, n);
        for (i2 = 0; i2 < 8; i2++) ts64(out, 8 * i2, hh[i2], hl[i2]);
        return 0;
      }
      function add2(p, q) {
        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f2 = gf(), g = gf(), h = gf(), t2 = gf();
        Z(a, p[1], p[0]);
        Z(t2, q[1], q[0]);
        M(a, a, t2);
        A(b, p[0], p[1]);
        A(t2, q[0], q[1]);
        M(b, b, t2);
        M(c, p[3], q[3]);
        M(c, c, D2);
        M(d, p[2], q[2]);
        A(d, d, d);
        Z(e, b, a);
        Z(f2, d, c);
        A(g, d, c);
        A(h, b, a);
        M(p[0], e, f2);
        M(p[1], h, g);
        M(p[2], g, f2);
        M(p[3], e, h);
      }
      function cswap(p, q, b) {
        var i2;
        for (i2 = 0; i2 < 4; i2++) {
          sel25519(p[i2], q[i2], b);
        }
      }
      function pack2(r2, p) {
        var tx = gf(), ty = gf(), zi = gf();
        inv25519(zi, p[2]);
        M(tx, p[0], zi);
        M(ty, p[1], zi);
        pack25519(r2, ty);
        r2[31] ^= par25519(tx) << 7;
      }
      function scalarmult(p, q, s2) {
        var b, i2;
        set25519(p[0], gf0);
        set25519(p[1], gf1);
        set25519(p[2], gf1);
        set25519(p[3], gf0);
        for (i2 = 255; i2 >= 0; --i2) {
          b = s2[i2 / 8 | 0] >> (i2 & 7) & 1;
          cswap(p, q, b);
          add2(q, p);
          add2(p, p);
          cswap(p, q, b);
        }
      }
      function scalarbase(p, s2) {
        var q = [gf(), gf(), gf(), gf()];
        set25519(q[0], X);
        set25519(q[1], Y);
        set25519(q[2], gf1);
        M(q[3], X, Y);
        scalarmult(p, q, s2);
      }
      function crypto_sign_keypair(pk, sk, seeded) {
        var d = new Uint8Array(64);
        var p = [gf(), gf(), gf(), gf()];
        var i2;
        if (!seeded) randombytes(sk, 32);
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        scalarbase(p, d);
        pack2(pk, p);
        for (i2 = 0; i2 < 32; i2++) sk[i2 + 32] = pk[i2];
        return 0;
      }
      var L = new Float64Array([237, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]);
      function modL(r2, x) {
        var carry, i2, j, k;
        for (i2 = 63; i2 >= 32; --i2) {
          carry = 0;
          for (j = i2 - 32, k = i2 - 12; j < k; ++j) {
            x[j] += carry - 16 * x[i2] * L[j - (i2 - 32)];
            carry = Math.floor((x[j] + 128) / 256);
            x[j] -= carry * 256;
          }
          x[j] += carry;
          x[i2] = 0;
        }
        carry = 0;
        for (j = 0; j < 32; j++) {
          x[j] += carry - (x[31] >> 4) * L[j];
          carry = x[j] >> 8;
          x[j] &= 255;
        }
        for (j = 0; j < 32; j++) x[j] -= carry * L[j];
        for (i2 = 0; i2 < 32; i2++) {
          x[i2 + 1] += x[i2] >> 8;
          r2[i2] = x[i2] & 255;
        }
      }
      function reduce(r2) {
        var x = new Float64Array(64), i2;
        for (i2 = 0; i2 < 64; i2++) x[i2] = r2[i2];
        for (i2 = 0; i2 < 64; i2++) r2[i2] = 0;
        modL(r2, x);
      }
      function crypto_sign(sm, m, n, sk) {
        var d = new Uint8Array(64), h = new Uint8Array(64), r2 = new Uint8Array(64);
        var i2, j, x = new Float64Array(64);
        var p = [gf(), gf(), gf(), gf()];
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        var smlen = n + 64;
        for (i2 = 0; i2 < n; i2++) sm[64 + i2] = m[i2];
        for (i2 = 0; i2 < 32; i2++) sm[32 + i2] = d[32 + i2];
        crypto_hash(r2, sm.subarray(32), n + 32);
        reduce(r2);
        scalarbase(p, r2);
        pack2(sm, p);
        for (i2 = 32; i2 < 64; i2++) sm[i2] = sk[i2];
        crypto_hash(h, sm, n + 64);
        reduce(h);
        for (i2 = 0; i2 < 64; i2++) x[i2] = 0;
        for (i2 = 0; i2 < 32; i2++) x[i2] = r2[i2];
        for (i2 = 0; i2 < 32; i2++) {
          for (j = 0; j < 32; j++) {
            x[i2 + j] += h[i2] * d[j];
          }
        }
        modL(sm.subarray(32), x);
        return smlen;
      }
      function unpackneg(r2, p) {
        var t2 = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
        set25519(r2[2], gf1);
        unpack25519(r2[1], p);
        S(num, r2[1]);
        M(den, num, D);
        Z(num, num, r2[2]);
        A(den, r2[2], den);
        S(den2, den);
        S(den4, den2);
        M(den6, den4, den2);
        M(t2, den6, num);
        M(t2, t2, den);
        pow2523(t2, t2);
        M(t2, t2, num);
        M(t2, t2, den);
        M(t2, t2, den);
        M(r2[0], t2, den);
        S(chk, r2[0]);
        M(chk, chk, den);
        if (neq25519(chk, num)) M(r2[0], r2[0], I);
        S(chk, r2[0]);
        M(chk, chk, den);
        if (neq25519(chk, num)) return -1;
        if (par25519(r2[0]) === p[31] >> 7) Z(r2[0], gf0, r2[0]);
        M(r2[3], r2[0], r2[1]);
        return 0;
      }
      function crypto_sign_open(m, sm, n, pk) {
        var i2;
        var t2 = new Uint8Array(32), h = new Uint8Array(64);
        var p = [gf(), gf(), gf(), gf()], q = [gf(), gf(), gf(), gf()];
        if (n < 64) return -1;
        if (unpackneg(q, pk)) return -1;
        for (i2 = 0; i2 < n; i2++) m[i2] = sm[i2];
        for (i2 = 0; i2 < 32; i2++) m[i2 + 32] = pk[i2];
        crypto_hash(h, m, n);
        reduce(h);
        scalarmult(p, q, h);
        scalarbase(q, sm.subarray(32));
        add2(p, q);
        pack2(t2, p);
        n -= 64;
        if (crypto_verify_32(sm, 0, t2, 0)) {
          for (i2 = 0; i2 < n; i2++) m[i2] = 0;
          return -1;
        }
        for (i2 = 0; i2 < n; i2++) m[i2] = sm[i2 + 64];
        return n;
      }
      var crypto_secretbox_KEYBYTES = 32, crypto_secretbox_NONCEBYTES = 24, crypto_secretbox_ZEROBYTES = 32, crypto_secretbox_BOXZEROBYTES = 16, crypto_scalarmult_BYTES = 32, crypto_scalarmult_SCALARBYTES = 32, crypto_box_PUBLICKEYBYTES = 32, crypto_box_SECRETKEYBYTES = 32, crypto_box_BEFORENMBYTES = 32, crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES, crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES, crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES, crypto_sign_BYTES = 64, crypto_sign_PUBLICKEYBYTES = 32, crypto_sign_SECRETKEYBYTES = 64, crypto_sign_SEEDBYTES = 32, crypto_hash_BYTES = 64;
      nacl2.lowlevel = {
        crypto_core_hsalsa20,
        crypto_stream_xor,
        crypto_stream,
        crypto_stream_salsa20_xor,
        crypto_stream_salsa20,
        crypto_onetimeauth,
        crypto_onetimeauth_verify,
        crypto_verify_16,
        crypto_verify_32,
        crypto_secretbox,
        crypto_secretbox_open,
        crypto_scalarmult,
        crypto_scalarmult_base,
        crypto_box_beforenm,
        crypto_box_afternm,
        crypto_box,
        crypto_box_open,
        crypto_box_keypair,
        crypto_hash,
        crypto_sign,
        crypto_sign_keypair,
        crypto_sign_open,
        crypto_secretbox_KEYBYTES,
        crypto_secretbox_NONCEBYTES,
        crypto_secretbox_ZEROBYTES,
        crypto_secretbox_BOXZEROBYTES,
        crypto_scalarmult_BYTES,
        crypto_scalarmult_SCALARBYTES,
        crypto_box_PUBLICKEYBYTES,
        crypto_box_SECRETKEYBYTES,
        crypto_box_BEFORENMBYTES,
        crypto_box_NONCEBYTES,
        crypto_box_ZEROBYTES,
        crypto_box_BOXZEROBYTES,
        crypto_sign_BYTES,
        crypto_sign_PUBLICKEYBYTES,
        crypto_sign_SECRETKEYBYTES,
        crypto_sign_SEEDBYTES,
        crypto_hash_BYTES,
        gf,
        D,
        L,
        pack25519,
        unpack25519,
        M,
        A,
        S,
        Z,
        pow2523,
        add: add2,
        set25519,
        modL,
        scalarmult,
        scalarbase
      };
      function checkLengths(k, n) {
        if (k.length !== crypto_secretbox_KEYBYTES) throw new Error("bad key size");
        if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error("bad nonce size");
      }
      function checkBoxLengths(pk, sk) {
        if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error("bad public key size");
        if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error("bad secret key size");
      }
      function checkArrayTypes() {
        for (var i2 = 0; i2 < arguments.length; i2++) {
          if (!(arguments[i2] instanceof Uint8Array))
            throw new TypeError("unexpected type, use Uint8Array");
        }
      }
      function cleanup(arr) {
        for (var i2 = 0; i2 < arr.length; i2++) arr[i2] = 0;
      }
      nacl2.randomBytes = function(n) {
        var b = new Uint8Array(n);
        randombytes(b, n);
        return b;
      };
      nacl2.secretbox = function(msg, nonce, key2) {
        checkArrayTypes(msg, nonce, key2);
        checkLengths(key2, nonce);
        var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
        var c = new Uint8Array(m.length);
        for (var i2 = 0; i2 < msg.length; i2++) m[i2 + crypto_secretbox_ZEROBYTES] = msg[i2];
        crypto_secretbox(c, m, m.length, nonce, key2);
        return c.subarray(crypto_secretbox_BOXZEROBYTES);
      };
      nacl2.secretbox.open = function(box, nonce, key2) {
        checkArrayTypes(box, nonce, key2);
        checkLengths(key2, nonce);
        var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
        var m = new Uint8Array(c.length);
        for (var i2 = 0; i2 < box.length; i2++) c[i2 + crypto_secretbox_BOXZEROBYTES] = box[i2];
        if (c.length < 32) return null;
        if (crypto_secretbox_open(m, c, c.length, nonce, key2) !== 0) return null;
        return m.subarray(crypto_secretbox_ZEROBYTES);
      };
      nacl2.secretbox.keyLength = crypto_secretbox_KEYBYTES;
      nacl2.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
      nacl2.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
      nacl2.scalarMult = function(n, p) {
        checkArrayTypes(n, p);
        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error("bad n size");
        if (p.length !== crypto_scalarmult_BYTES) throw new Error("bad p size");
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult(q, n, p);
        return q;
      };
      nacl2.scalarMult.base = function(n) {
        checkArrayTypes(n);
        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error("bad n size");
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult_base(q, n);
        return q;
      };
      nacl2.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
      nacl2.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
      nacl2.box = function(msg, nonce, publicKey, secretKey) {
        var k = nacl2.box.before(publicKey, secretKey);
        return nacl2.secretbox(msg, nonce, k);
      };
      nacl2.box.before = function(publicKey, secretKey) {
        checkArrayTypes(publicKey, secretKey);
        checkBoxLengths(publicKey, secretKey);
        var k = new Uint8Array(crypto_box_BEFORENMBYTES);
        crypto_box_beforenm(k, publicKey, secretKey);
        return k;
      };
      nacl2.box.after = nacl2.secretbox;
      nacl2.box.open = function(msg, nonce, publicKey, secretKey) {
        var k = nacl2.box.before(publicKey, secretKey);
        return nacl2.secretbox.open(msg, nonce, k);
      };
      nacl2.box.open.after = nacl2.secretbox.open;
      nacl2.box.keyPair = function() {
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
        crypto_box_keypair(pk, sk);
        return { publicKey: pk, secretKey: sk };
      };
      nacl2.box.keyPair.fromSecretKey = function(secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_box_SECRETKEYBYTES)
          throw new Error("bad secret key size");
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        crypto_scalarmult_base(pk, secretKey);
        return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
      };
      nacl2.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
      nacl2.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
      nacl2.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
      nacl2.box.nonceLength = crypto_box_NONCEBYTES;
      nacl2.box.overheadLength = nacl2.secretbox.overheadLength;
      nacl2.sign = function(msg, secretKey) {
        checkArrayTypes(msg, secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
          throw new Error("bad secret key size");
        var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
        crypto_sign(signedMsg, msg, msg.length, secretKey);
        return signedMsg;
      };
      nacl2.sign.open = function(signedMsg, publicKey) {
        checkArrayTypes(signedMsg, publicKey);
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
          throw new Error("bad public key size");
        var tmp = new Uint8Array(signedMsg.length);
        var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
        if (mlen < 0) return null;
        var m = new Uint8Array(mlen);
        for (var i2 = 0; i2 < m.length; i2++) m[i2] = tmp[i2];
        return m;
      };
      nacl2.sign.detached = function(msg, secretKey) {
        var signedMsg = nacl2.sign(msg, secretKey);
        var sig = new Uint8Array(crypto_sign_BYTES);
        for (var i2 = 0; i2 < sig.length; i2++) sig[i2] = signedMsg[i2];
        return sig;
      };
      nacl2.sign.detached.verify = function(msg, sig, publicKey) {
        checkArrayTypes(msg, sig, publicKey);
        if (sig.length !== crypto_sign_BYTES)
          throw new Error("bad signature size");
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
          throw new Error("bad public key size");
        var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
        var m = new Uint8Array(crypto_sign_BYTES + msg.length);
        var i2;
        for (i2 = 0; i2 < crypto_sign_BYTES; i2++) sm[i2] = sig[i2];
        for (i2 = 0; i2 < msg.length; i2++) sm[i2 + crypto_sign_BYTES] = msg[i2];
        return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
      };
      nacl2.sign.keyPair = function() {
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        crypto_sign_keypair(pk, sk);
        return { publicKey: pk, secretKey: sk };
      };
      nacl2.sign.keyPair.fromSecretKey = function(secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
          throw new Error("bad secret key size");
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        for (var i2 = 0; i2 < pk.length; i2++) pk[i2] = secretKey[32 + i2];
        return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
      };
      nacl2.sign.keyPair.fromSeed = function(seed) {
        checkArrayTypes(seed);
        if (seed.length !== crypto_sign_SEEDBYTES)
          throw new Error("bad seed size");
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        for (var i2 = 0; i2 < 32; i2++) sk[i2] = seed[i2];
        crypto_sign_keypair(pk, sk, true);
        return { publicKey: pk, secretKey: sk };
      };
      nacl2.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
      nacl2.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
      nacl2.sign.seedLength = crypto_sign_SEEDBYTES;
      nacl2.sign.signatureLength = crypto_sign_BYTES;
      nacl2.hash = function(msg) {
        checkArrayTypes(msg);
        var h = new Uint8Array(crypto_hash_BYTES);
        crypto_hash(h, msg, msg.length);
        return h;
      };
      nacl2.hash.hashLength = crypto_hash_BYTES;
      nacl2.verify = function(x, y) {
        checkArrayTypes(x, y);
        if (x.length === 0 || y.length === 0) return false;
        if (x.length !== y.length) return false;
        return vn(x, 0, y, 0, x.length) === 0 ? true : false;
      };
      nacl2.setPRNG = function(fn) {
        randombytes = fn;
      };
      (function() {
        var crypto2 = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
        if (crypto2 && crypto2.getRandomValues) {
          var QUOTA = 65536;
          nacl2.setPRNG(function(x, n) {
            var i2, v = new Uint8Array(n);
            for (i2 = 0; i2 < n; i2 += QUOTA) {
              crypto2.getRandomValues(v.subarray(i2, i2 + Math.min(n - i2, QUOTA)));
            }
            for (i2 = 0; i2 < n; i2++) x[i2] = v[i2];
            cleanup(v);
          });
        } else if (typeof commonjsRequire !== "undefined") {
          crypto2 = requireCryptoBrowserify();
          if (crypto2 && crypto2.randomBytes) {
            nacl2.setPRNG(function(x, n) {
              var i2, v = crypto2.randomBytes(n);
              for (i2 = 0; i2 < n; i2++) x[i2] = v[i2];
              cleanup(v);
            });
          }
        }
      })();
    })(module.exports ? module.exports : self.nacl = self.nacl || {});
  })(naclFast);
  var naclFastExports = naclFast.exports;
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod2) {
    if (mod2 && mod2.__esModule) return mod2;
    var result = {};
    if (mod2 != null) {
      for (var k in mod2) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
    }
    __setModuleDefault(result, mod2);
    return result;
  };
  Object.defineProperty(encryption, "__esModule", { value: true });
  encryption.getEncryptionPublicKey = encryption.decryptSafely = encryption.decrypt = encryption.encryptSafely = encryption.encrypt = void 0;
  const base_1 = lib;
  const nacl = __importStar(naclFastExports);
  const utils_1$1 = utils$3;
  function encrypt({ publicKey, data, version: version2 }) {
    if ((0, utils_1$1.isNullish)(publicKey)) {
      throw new Error("Missing publicKey parameter");
    } else if ((0, utils_1$1.isNullish)(data)) {
      throw new Error("Missing data parameter");
    } else if ((0, utils_1$1.isNullish)(version2)) {
      throw new Error("Missing version parameter");
    }
    switch (version2) {
      case "x25519-xsalsa20-poly1305": {
        if (typeof data !== "string") {
          throw new Error("Message data must be given as a string");
        }
        const ephemeralKeyPair = nacl.box.keyPair();
        let pubKeyUInt8Array;
        try {
          pubKeyUInt8Array = base_1.base64.decode(publicKey);
        } catch (err) {
          throw new Error("Bad public key");
        }
        const msgParamsUInt8Array = base_1.utf8.decode(data);
        const nonce = nacl.randomBytes(nacl.box.nonceLength);
        const encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);
        const output2 = {
          version: "x25519-xsalsa20-poly1305",
          nonce: base_1.base64.encode(nonce),
          ephemPublicKey: base_1.base64.encode(ephemeralKeyPair.publicKey),
          ciphertext: base_1.base64.encode(encryptedMessage)
        };
        return output2;
      }
      default:
        throw new Error("Encryption type/version not supported");
    }
  }
  encryption.encrypt = encrypt;
  function encryptSafely({ publicKey, data, version: version2 }) {
    if ((0, utils_1$1.isNullish)(publicKey)) {
      throw new Error("Missing publicKey parameter");
    } else if ((0, utils_1$1.isNullish)(data)) {
      throw new Error("Missing data parameter");
    } else if ((0, utils_1$1.isNullish)(version2)) {
      throw new Error("Missing version parameter");
    }
    const DEFAULT_PADDING_LENGTH = __pow(2, 11);
    const NACL_EXTRA_BYTES = 16;
    if (typeof data === "object" && data && "toJSON" in data) {
      throw new Error("Cannot encrypt with toJSON property.  Please remove toJSON property");
    }
    const dataWithPadding = {
      data,
      padding: ""
    };
    const dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), "utf-8");
    const modVal = dataLength % DEFAULT_PADDING_LENGTH;
    let padLength = 0;
    if (modVal > 0) {
      padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES;
    }
    dataWithPadding.padding = "0".repeat(padLength);
    const paddedMessage = JSON.stringify(dataWithPadding);
    return encrypt({ publicKey, data: paddedMessage, version: version2 });
  }
  encryption.encryptSafely = encryptSafely;
  function decrypt({ encryptedData, privateKey }) {
    if ((0, utils_1$1.isNullish)(encryptedData)) {
      throw new Error("Missing encryptedData parameter");
    } else if ((0, utils_1$1.isNullish)(privateKey)) {
      throw new Error("Missing privateKey parameter");
    }
    switch (encryptedData.version) {
      case "x25519-xsalsa20-poly1305": {
        const receiverPrivateKeyUint8Array = Buffer.from(privateKey, "hex");
        const receiverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(receiverPrivateKeyUint8Array).secretKey;
        const nonce = base_1.base64.decode(encryptedData.nonce);
        const ciphertext = base_1.base64.decode(encryptedData.ciphertext);
        const ephemPublicKey = base_1.base64.decode(encryptedData.ephemPublicKey);
        const decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, receiverEncryptionPrivateKey);
        try {
          if (!decryptedMessage) {
            throw new Error();
          }
          const output2 = base_1.utf8.encode(decryptedMessage);
          if (!output2) {
            throw new Error();
          }
          return output2;
        } catch (err) {
          if (err && typeof err.message === "string" && err.message.length) {
            throw new Error(`Decryption failed: ${err.message}`);
          }
          throw new Error(`Decryption failed.`);
        }
      }
      default:
        throw new Error("Encryption type/version not supported.");
    }
  }
  encryption.decrypt = decrypt;
  function decryptSafely({ encryptedData, privateKey }) {
    if ((0, utils_1$1.isNullish)(encryptedData)) {
      throw new Error("Missing encryptedData parameter");
    } else if ((0, utils_1$1.isNullish)(privateKey)) {
      throw new Error("Missing privateKey parameter");
    }
    const dataWithPadding = JSON.parse(decrypt({ encryptedData, privateKey }));
    return dataWithPadding.data;
  }
  encryption.decryptSafely = decryptSafely;
  function getEncryptionPublicKey(privateKey) {
    const privateKeyUint8Array = Buffer.from(privateKey, "hex");
    const encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;
    return base_1.base64.encode(encryptionPublicKey);
  }
  encryption.getEncryptionPublicKey = getEncryptionPublicKey;
  var signEip7702Authorization = {};
  Object.defineProperty(signEip7702Authorization, "__esModule", { value: true });
  signEip7702Authorization.hashEIP7702Authorization = signEip7702Authorization.recoverEIP7702Authorization = signEip7702Authorization.signEIP7702Authorization = void 0;
  const rlp_1 = dist$3;
  const util_1 = dist$4;
  const utils_1 = dist$2;
  const keccak_1 = keccak;
  const utils_2 = utils$3;
  function signEIP7702Authorization({ privateKey, authorization }) {
    validateEIP7702Authorization(authorization);
    if ((0, utils_2.isNullish)(privateKey)) {
      throw new Error("Missing privateKey parameter");
    }
    const messageHash = hashEIP7702Authorization(authorization);
    const { r: r2, s: s2, v } = (0, util_1.ecsign)(messageHash, privateKey);
    const vBuffer = (0, util_1.toBuffer)(v);
    return (0, utils_2.concatSig)(vBuffer, r2, s2);
  }
  signEip7702Authorization.signEIP7702Authorization = signEIP7702Authorization;
  function recoverEIP7702Authorization({ signature: signature2, authorization }) {
    validateEIP7702Authorization(authorization);
    if ((0, utils_2.isNullish)(signature2)) {
      throw new Error("Missing signature parameter");
    }
    const messageHash = hashEIP7702Authorization(authorization);
    const publicKey = (0, utils_2.recoverPublicKey)(messageHash, signature2);
    const sender = (0, util_1.publicToAddress)(publicKey);
    return (0, utils_1.bytesToHex)(sender);
  }
  signEip7702Authorization.recoverEIP7702Authorization = recoverEIP7702Authorization;
  function hashEIP7702Authorization(authorization) {
    validateEIP7702Authorization(authorization);
    const encodedAuthorization = (0, rlp_1.encode)(authorization);
    const message = Buffer.concat([
      Buffer.from("05", "hex"),
      encodedAuthorization
    ]);
    return Buffer.from((0, keccak_1.keccak256)(message));
  }
  signEip7702Authorization.hashEIP7702Authorization = hashEIP7702Authorization;
  function validateEIP7702Authorization(authorization) {
    if ((0, utils_2.isNullish)(authorization)) {
      throw new Error("Missing authorization parameter");
    }
    const [chainId, contractAddress, nonce] = authorization;
    if ((0, utils_2.isNullish)(chainId)) {
      throw new Error("Missing chainId parameter");
    }
    if ((0, utils_2.isNullish)(contractAddress)) {
      throw new Error("Missing contractAddress parameter");
    }
    if ((0, utils_2.isNullish)(nonce)) {
      throw new Error("Missing nonce parameter");
    }
  }
  (function(exports2) {
    var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding2(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalize = exports2.concatSig = void 0;
    __exportStar(personalSign$1, exports2);
    __exportStar(signTypedData, exports2);
    __exportStar(encryption, exports2);
    __exportStar(signEip7702Authorization, exports2);
    var utils_12 = utils$3;
    Object.defineProperty(exports2, "concatSig", { enumerable: true, get: function() {
      return utils_12.concatSig;
    } });
    Object.defineProperty(exports2, "normalize", { enumerable: true, get: function() {
      return utils_12.normalize;
    } });
  })(dist$5);
  const BRIDGE_URL = "ws://localhost:8435";
  const TRANSPORT_CHECK_DELAY = 1e3;
  const TRANSPORT_CHECK_LIMIT = 120;
  class LedgerBridge {
    constructor() {
      this.addEventListeners();
      this.transportType = "u2f";
    }
    addEventListeners() {
      window.addEventListener(
        "message",
        (e) => __async(this, null, function* () {
          if (e && e.data && e.data.target === "LEDGER-IFRAME") {
            const { action, params, messageId } = e.data;
            const replyAction = `${action}-reply`;
            switch (action) {
              case "ledger-is-iframe-ready":
                this.sendMessageToExtension({
                  action: replyAction,
                  success: true,
                  messageId
                });
                break;
              case "ledger-unlock":
                this.unlock(replyAction, params.hdPath, messageId);
                break;
              case "ledger-sign-transaction":
                console.log("ledger-sign-transaction", params);
                this.signTransaction(
                  replyAction,
                  params.hdPath,
                  params.tx,
                  messageId
                );
                break;
              case "ledger-sign-personal-message":
                this.signPersonalMessage(
                  replyAction,
                  params.hdPath,
                  params.message,
                  messageId
                );
                break;
              case "ledger-close-bridge":
                this.cleanUp(replyAction, messageId);
                break;
              case "ledger-update-transport":
                if (params.transportType === "ledgerLive" || params.useLedgerLive) {
                  this.updateTransportTypePreference(
                    replyAction,
                    "ledgerLive",
                    messageId
                  );
                } else if (params.transportType === "webhid") {
                  this.updateTransportTypePreference(
                    replyAction,
                    "webhid",
                    messageId
                  );
                } else {
                  this.updateTransportTypePreference(
                    replyAction,
                    "u2f",
                    messageId
                  );
                }
                break;
              case "ledger-make-app":
                this.attemptMakeApp(replyAction, messageId);
                break;
              case "ledger-sign-typed-data":
                this.signTypedData(
                  replyAction,
                  params.hdPath,
                  params.message,
                  messageId
                );
                break;
            }
          }
        }),
        false
      );
    }
    sendMessageToExtension(msg) {
      window.parent.postMessage(msg, "*");
    }
    delay(ms2) {
      return new Promise((success) => setTimeout(success, ms2));
    }
    checkTransportLoop(i2) {
      const iterator2 = i2 || 0;
      return _default.check(BRIDGE_URL).catch(() => __async(this, null, function* () {
        yield this.delay(TRANSPORT_CHECK_DELAY);
        if (iterator2 < TRANSPORT_CHECK_LIMIT) {
          return this.checkTransportLoop(iterator2 + 1);
        } else {
          throw new Error("Ledger transport check timeout");
        }
      }));
    }
    attemptMakeApp(replyAction, messageId) {
      return __async(this, null, function* () {
        try {
          yield this.makeApp({ openOnly: true });
          yield this.cleanUp();
          this.sendMessageToExtension({
            action: replyAction,
            success: true,
            messageId
          });
        } catch (error2) {
          yield this.cleanUp();
          this.sendMessageToExtension({
            action: replyAction,
            success: false,
            messageId,
            error: error2
          });
        }
      });
    }
    makeApp() {
      return __async(this, arguments, function* (config2 = {}) {
        try {
          if (this.transportType === "ledgerLive") {
            let reestablish = false;
            try {
              yield _default.check(BRIDGE_URL);
            } catch (_err) {
              window.open("ledgerlive://bridge?appName=Ethereum");
              yield this.checkTransportLoop();
              reestablish = true;
            }
            if (!this.app || reestablish) {
              this.transport = yield _default.open(BRIDGE_URL);
              this.app = new Eth(this.transport);
            }
          } else if (this.transportType === "webhid") {
            const device = this.transport && this.transport.device;
            const nameOfDeviceType = device && device.constructor.name;
            const deviceIsOpen = device && device.opened;
            if (this.app && nameOfDeviceType === "HIDDevice" && deviceIsOpen) {
              return;
            }
            this.transport = config2.openOnly ? yield TransportWebHID.openConnected() : yield TransportWebHID.create();
            this.app = new Eth(this.transport);
          } else {
            this.transport = yield TransportWebUSB.create();
            this.app = new Eth(this.transport);
          }
        } catch (e) {
          console.log("LEDGER:::CREATE APP ERROR", e);
          throw e;
        }
      });
    }
    updateTransportTypePreference(replyAction, transportType, messageId) {
      this.transportType = transportType;
      this.cleanUp();
      this.sendMessageToExtension({
        action: replyAction,
        success: true,
        messageId
      });
    }
    cleanUp(replyAction, messageId) {
      return __async(this, null, function* () {
        this.app = null;
        if (this.transport) {
          yield this.transport.close();
          this.transport = null;
        }
        if (replyAction) {
          this.sendMessageToExtension({
            action: replyAction,
            success: true,
            messageId
          });
        }
      });
    }
    unlock(replyAction, hdPath, messageId) {
      return __async(this, null, function* () {
        try {
          yield this.makeApp();
          const res = yield this.app.getAddress(hdPath, false, true);
          this.sendMessageToExtension({
            action: replyAction,
            success: true,
            payload: res,
            messageId
          });
        } catch (err) {
          const e = this.ledgerErrToMessage(err);
          this.sendMessageToExtension({
            action: replyAction,
            success: false,
            payload: { error: e },
            messageId
          });
        } finally {
          if (this.transportType !== "ledgerLive") {
            this.cleanUp();
          }
        }
      });
    }
    signTransaction(replyAction, hdPath, tx, messageId) {
      return __async(this, null, function* () {
        try {
          yield this.makeApp();
          const res = yield this.app.clearSignTransaction(hdPath, tx, {
            nft: true,
            externalPlugins: true,
            erc20: true
          });
          this.sendMessageToExtension({
            action: replyAction,
            success: true,
            payload: res,
            messageId
          });
        } catch (err) {
          const e = this.ledgerErrToMessage(err);
          this.sendMessageToExtension({
            action: replyAction,
            success: false,
            payload: { error: e },
            messageId
          });
        } finally {
          if (this.transportType !== "ledgerLive") {
            this.cleanUp();
          }
        }
      });
    }
    signPersonalMessage(replyAction, hdPath, message, messageId) {
      return __async(this, null, function* () {
        try {
          yield this.makeApp();
          const res = yield this.app.signPersonalMessage(hdPath, message);
          this.sendMessageToExtension({
            action: replyAction,
            success: true,
            payload: res,
            messageId
          });
        } catch (err) {
          const e = this.ledgerErrToMessage(err);
          this.sendMessageToExtension({
            action: replyAction,
            success: false,
            payload: { error: e },
            messageId
          });
        } finally {
          if (this.transportType !== "ledgerLive") {
            this.cleanUp();
          }
        }
      });
    }
    signTypedData(replyAction, hdPath, message, messageId) {
      return __async(this, null, function* () {
        try {
          yield this.makeApp();
          let res = yield this.attemptSignEIP712Message(hdPath, message);
          this.sendMessageToExtension({
            action: replyAction,
            success: true,
            payload: res,
            messageId
          });
        } catch (err) {
          const e = this.ledgerErrToMessage(err);
          this.sendMessageToExtension({
            action: replyAction,
            success: false,
            payload: { error: e },
            messageId
          });
        } finally {
          this.cleanUp();
        }
      });
    }
    attemptSignEIP712Message(hdPath, message) {
      return __async(this, null, function* () {
        try {
          return yield this.app.signEIP712Message(hdPath, message);
        } catch (signError) {
          const domainSeparatorHex = dist$5.TypedDataUtils.hashStruct(
            "EIP712Domain",
            message.domain,
            message.types,
            dist$5.SignTypedDataVersion.V4
          ).toString("hex");
          const hashStructMessageHex = dist$5.TypedDataUtils.hashStruct(
            message.primaryType,
            message.message,
            message.types,
            dist$5.SignTypedDataVersion.V4
          ).toString("hex");
          return yield this.app.signEIP712HashedMessage(
            hdPath,
            domainSeparatorHex,
            hashStructMessageHex
          );
        }
      });
    }
    ledgerErrToMessage(err) {
      const isU2FError = (err2) => !!err2 && !!err2.metaData;
      const isStringError = (err2) => typeof err2 === "string";
      const isErrorWithId = (err2) => err2.hasOwnProperty("id") && err2.hasOwnProperty("message");
      const isWrongAppError = (err2) => String(err2.message || err2).includes("6804");
      const isLedgerLockedError = (err2) => err2.message && err2.message.includes("OpenFailed");
      if (isU2FError(err)) {
        if (err.metaData.code === 5) {
          return new Error("LEDGER_TIMEOUT");
        }
        return err.metaData.type;
      }
      if (isWrongAppError(err)) {
        return new Error("LEDGER_WRONG_APP");
      }
      if (isLedgerLockedError(err) || isStringError(err) && err.includes("6801")) {
        return new Error("LEDGER_LOCKED");
      }
      if (isErrorWithId(err)) {
        if (err.message.includes("U2F not supported")) {
          return new Error("U2F_NOT_SUPPORTED");
        }
      }
      return err;
    }
  }
  const bridge = new LedgerBridge();
  console.log(
    `MetaMask < = > Ledger Bridge initialized over ${bridge.transportType} from ${window.location}!`
  );
})();
