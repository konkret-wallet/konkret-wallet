var y=(p,e)=>()=>(e||p((e={exports:{}}).exports,e),e.exports);var i=(p,e,s)=>new Promise((t,a)=>{var r=c=>{try{n(s.next(c))}catch(d){a(d)}},o=c=>{try{n(s.throw(c))}catch(d){a(d)}},n=c=>c.done?t(c.value):Promise.resolve(c.value).then(r,o);n((s=s.apply(p,e)).next())});import{_ as l,E as g,T,a as w,d as h}from"./vendor-9knWg-MH.js";var k=y(E=>{const u="ws://localhost:8435",f=1e3,M=120;class m{constructor(){this.addEventListeners(),this.transportType="u2f"}addEventListeners(){window.addEventListener("message",e=>i(this,null,function*(){if(e&&e.data&&e.data.target==="LEDGER-IFRAME"){const{action:s,params:t,messageId:a}=e.data,r=`${s}-reply`;switch(s){case"ledger-is-iframe-ready":this.sendMessageToExtension({action:r,success:!0,messageId:a});break;case"ledger-unlock":this.unlock(r,t.hdPath,a);break;case"ledger-sign-transaction":console.log("ledger-sign-transaction",t),this.signTransaction(r,t.hdPath,t.tx,a);break;case"ledger-sign-personal-message":this.signPersonalMessage(r,t.hdPath,t.message,a);break;case"ledger-close-bridge":this.cleanUp(r,a);break;case"ledger-update-transport":t.transportType==="ledgerLive"||t.useLedgerLive?this.updateTransportTypePreference(r,"ledgerLive",a):t.transportType==="webhid"?this.updateTransportTypePreference(r,"webhid",a):this.updateTransportTypePreference(r,"u2f",a);break;case"ledger-make-app":this.attemptMakeApp(r,a);break;case"ledger-sign-typed-data":this.signTypedData(r,t.hdPath,t.message,a);break}}}),!1)}sendMessageToExtension(e){window.parent.postMessage(e,"*")}delay(e){return new Promise(s=>setTimeout(s,e))}checkTransportLoop(e){const s=e||0;return l.check(u).catch(()=>i(this,null,function*(){if(yield this.delay(f),s<M)return this.checkTransportLoop(s+1);throw new Error("Ledger transport check timeout")}))}attemptMakeApp(e,s){return i(this,null,function*(){try{yield this.makeApp({openOnly:!0}),yield this.cleanUp(),this.sendMessageToExtension({action:e,success:!0,messageId:s})}catch(t){yield this.cleanUp(),this.sendMessageToExtension({action:e,success:!1,messageId:s,error:t})}})}makeApp(){return i(this,arguments,function*(e={}){try{if(this.transportType==="ledgerLive"){let s=!1;try{yield l.check(u)}catch(t){window.open("ledgerlive://bridge?appName=Ethereum"),yield this.checkTransportLoop(),s=!0}(!this.app||s)&&(this.transport=yield l.open(u),this.app=new g(this.transport))}else if(this.transportType==="webhid"){const s=this.transport&&this.transport.device,t=s&&s.constructor.name,a=s&&s.opened;if(this.app&&t==="HIDDevice"&&a)return;this.transport=e.openOnly?yield T.openConnected():yield T.create(),this.app=new g(this.transport)}else this.transport=yield w.create(),this.app=new g(this.transport)}catch(s){throw console.log("LEDGER:::CREATE APP ERROR",s),s}})}updateTransportTypePreference(e,s,t){this.transportType=s,this.cleanUp(),this.sendMessageToExtension({action:e,success:!0,messageId:t})}cleanUp(e,s){return i(this,null,function*(){this.app=null,this.transport&&(yield this.transport.close(),this.transport=null),e&&this.sendMessageToExtension({action:e,success:!0,messageId:s})})}unlock(e,s,t){return i(this,null,function*(){try{yield this.makeApp();const a=yield this.app.getAddress(s,!1,!0);this.sendMessageToExtension({action:e,success:!0,payload:a,messageId:t})}catch(a){const r=this.ledgerErrToMessage(a);this.sendMessageToExtension({action:e,success:!1,payload:{error:r},messageId:t})}finally{this.transportType!=="ledgerLive"&&this.cleanUp()}})}signTransaction(e,s,t,a){return i(this,null,function*(){try{yield this.makeApp();const r=yield this.app.clearSignTransaction(s,t,{nft:!0,externalPlugins:!0,erc20:!0});this.sendMessageToExtension({action:e,success:!0,payload:r,messageId:a})}catch(r){const o=this.ledgerErrToMessage(r);this.sendMessageToExtension({action:e,success:!1,payload:{error:o},messageId:a})}finally{this.transportType!=="ledgerLive"&&this.cleanUp()}})}signPersonalMessage(e,s,t,a){return i(this,null,function*(){try{yield this.makeApp();const r=yield this.app.signPersonalMessage(s,t);this.sendMessageToExtension({action:e,success:!0,payload:r,messageId:a})}catch(r){const o=this.ledgerErrToMessage(r);this.sendMessageToExtension({action:e,success:!1,payload:{error:o},messageId:a})}finally{this.transportType!=="ledgerLive"&&this.cleanUp()}})}signTypedData(e,s,t,a){return i(this,null,function*(){try{yield this.makeApp();let r=yield this.attemptSignEIP712Message(s,t);this.sendMessageToExtension({action:e,success:!0,payload:r,messageId:a})}catch(r){const o=this.ledgerErrToMessage(r);this.sendMessageToExtension({action:e,success:!1,payload:{error:o},messageId:a})}finally{this.cleanUp()}})}attemptSignEIP712Message(e,s){return i(this,null,function*(){try{return yield this.app.signEIP712Message(e,s)}catch(t){const a=h.TypedDataUtils.hashStruct("EIP712Domain",s.domain,s.types,h.SignTypedDataVersion.V4).toString("hex"),r=h.TypedDataUtils.hashStruct(s.primaryType,s.message,s.types,h.SignTypedDataVersion.V4).toString("hex");return yield this.app.signEIP712HashedMessage(e,a,r)}})}ledgerErrToMessage(e){const s=n=>!!n&&!!n.metaData,t=n=>typeof n=="string",a=n=>n.hasOwnProperty("id")&&n.hasOwnProperty("message"),r=n=>String(n.message||n).includes("6804"),o=n=>n.message&&n.message.includes("OpenFailed");return s(e)?e.metaData.code===5?new Error("LEDGER_TIMEOUT"):e.metaData.type:r(e)?new Error("LEDGER_WRONG_APP"):o(e)||t(e)&&e.includes("6801")?new Error("LEDGER_LOCKED"):a(e)&&e.message.includes("U2F not supported")?new Error("U2F_NOT_SUPPORTED"):e}}i(E,null,function*(){new m});console.log(`MetaMask < = > Ledger Bridge initialized from ${window.location}!`)});export default k();
