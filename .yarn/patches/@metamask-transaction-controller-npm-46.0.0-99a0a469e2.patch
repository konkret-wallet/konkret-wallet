diff --git a/dist/TransactionController.cjs b/dist/TransactionController.cjs
index 29560f711072814a43a3d0ae6161609ff4aa96aa..71ab8a4f24f5457b2494f3d985c6c3cd3adbdd2e 100644
--- a/dist/TransactionController.cjs
+++ b/dist/TransactionController.cjs
@@ -13,7 +13,7 @@ var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-var _TransactionController_instances, _TransactionController_internalEvents, _TransactionController_methodDataHelper, _TransactionController_incomingTransactionChainIds, _TransactionController_incomingTransactionHelper, _TransactionController_incomingTransactionOptions, _TransactionController_pendingTransactionOptions, _TransactionController_trace, _TransactionController_transactionHistoryLimit, _TransactionController_isFirstTimeInteractionEnabled, _TransactionController_isSimulationEnabled, _TransactionController_testGasFeeFlows, _TransactionController_multichainTrackingHelper, _TransactionController_retryTransaction, _TransactionController_getChainId, _TransactionController_getNetworkClientId, _TransactionController_getEthQuery, _TransactionController_getProvider, _TransactionController_createNonceTracker, _TransactionController_createPendingTransactionTracker, _TransactionController_checkForPendingTransactionAndStartPolling, _TransactionController_stopAllTracking, _TransactionController_addIncomingTransactionHelperListeners, _TransactionController_removePendingTransactionTrackerListeners, _TransactionController_addPendingTransactionTrackerListeners, _TransactionController_getNonceTrackerPendingTransactions, _TransactionController_getGasFeeFlows, _TransactionController_getLayer1GasFeeFlows, _TransactionController_updateTransactionInternal, _TransactionController_updateFirstTimeInteraction, _TransactionController_updateSimulationData, _TransactionController_onGasFeePollerTransactionUpdate, _TransactionController_getSelectedAccount, _TransactionController_updateSubmitHistory;
+var _TransactionController_instances, _TransactionController_internalEvents, _TransactionController_methodDataHelper, _TransactionController_incomingTransactionChainIds, _TransactionController_incomingTransactionHelper, _TransactionController_incomingTransactionOptions, _TransactionController_pendingTransactionOptions, _TransactionController_trace, _TransactionController_transactionHistoryLimit, _TransactionController_isFirstTimeInteractionEnabled, _TransactionController_isSimulationEnabled, _TransactionController_testGasFeeFlows, _TransactionController_multichainTrackingHelper, _TransactionController_retryTransaction, _TransactionController_getChainId, _TransactionController_getNetworkClientId, _TransactionController_getEthQuery, _TransactionController_getProvider, _TransactionController_createNonceTracker, _TransactionController_createPendingTransactionTracker, _TransactionController_checkForPendingTransactionAndStartPolling, _TransactionController_stopAllTracking, _TransactionController_addIncomingTransactionHelperListeners, _TransactionController_removePendingTransactionTrackerListeners, _TransactionController_addPendingTransactionTrackerListeners, _TransactionController_getNonceTrackerPendingTransactions, _TransactionController_getGasFeeFlows, _TransactionController_getLayer1GasFeeFlows, _TransactionController_updateTransactionInternal, _TransactionController_updateFirstTimeInteraction, _TransactionController_checkIfTransactionParamsUpdated, _TransactionController_onTransactionParamsUpdated, _TransactionController_updateSimulationData, _TransactionController_onGasFeePollerTransactionUpdate, _TransactionController_getSelectedAccount, _TransactionController_updateSubmitHistory;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.TransactionController = exports.ApprovalState = exports.SPEED_UP_RATE = exports.CANCEL_RATE = void 0;
 const base_controller_1 = require("@metamask/base-controller");
@@ -41,7 +41,6 @@ const IncomingTransactionHelper_1 = require("./helpers/IncomingTransactionHelper
 const MethodDataHelper_1 = require("./helpers/MethodDataHelper.cjs");
 const MultichainTrackingHelper_1 = require("./helpers/MultichainTrackingHelper.cjs");
 const PendingTransactionTracker_1 = require("./helpers/PendingTransactionTracker.cjs");
-const ResimulateHelper_1 = require("./helpers/ResimulateHelper.cjs");
 const logger_1 = require("./logger.cjs");
 const types_1 = require("./types.cjs");
 const eip7702_1 = require("./utils/eip7702.cjs");
@@ -212,7 +211,7 @@ class TransactionController extends base_controller_1.BaseController {
         this.isHistoryDisabled = disableHistory ?? false;
         this.isSwapsDisabled = disableSwaps ?? false;
         __classPrivateFieldSet(this, _TransactionController_isFirstTimeInteractionEnabled, isFirstTimeInteractionEnabled ?? (() => true), "f");
-        __classPrivateFieldSet(this, _TransactionController_isSimulationEnabled, isSimulationEnabled ?? (() => true), "f");
+        __classPrivateFieldSet(this, _TransactionController_isSimulationEnabled, isSimulationEnabled ?? (() => false), "f");
         this.getSavedGasFees = getSavedGasFees ?? ((_chainId) => undefined);
         this.getCurrentAccountEIP1559Compatibility =
             getCurrentAccountEIP1559Compatibility ?? (() => Promise.resolve(true));
@@ -302,13 +301,6 @@ class TransactionController extends base_controller_1.BaseController {
         // when transactionsController state changes
         // check for pending transactions and start polling if there are any
         this.messagingSystem.subscribe('TransactionController:stateChange', __classPrivateFieldGet(this, _TransactionController_checkForPendingTransactionAndStartPolling, "f"));
-        new ResimulateHelper_1.ResimulateHelper({
-            simulateTransaction: __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateSimulationData).bind(this),
-            onTransactionsUpdate: (listener) => {
-                this.messagingSystem.subscribe('TransactionController:stateChange', listener, (controllerState) => controllerState.transactions);
-            },
-            getTransactions: () => this.state.transactions,
-        });
         this.onBootCleanup();
         __classPrivateFieldGet(this, _TransactionController_checkForPendingTransactionAndStartPolling, "f").call(this);
     }
@@ -423,12 +415,14 @@ class TransactionController extends base_controller_1.BaseController {
             });
             this.addMetadata(addedTransactionMeta);
             if (requireApproval !== false) {
-                __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateSimulationData).call(this, addedTransactionMeta, {
-                    traceContext,
-                }).catch((error) => {
-                    (0, logger_1.projectLogger)('Error while updating simulation data', error);
-                    throw error;
-                });
+                if (__classPrivateFieldGet(this, _TransactionController_isSimulationEnabled, "f").call(this)) {
+                    __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateSimulationData).call(this, addedTransactionMeta, {
+                        traceContext,
+                    }).catch((error) => {
+                        (0, logger_1.projectLogger)('Error while updating simulation data', error);
+                        throw error;
+                    });
+                }
                 __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateFirstTimeInteraction).call(this, addedTransactionMeta, {
                     traceContext,
                 }).catch((error) => {
@@ -802,27 +796,6 @@ class TransactionController extends base_controller_1.BaseController {
         this.updateTransaction(updatedTransaction, `Update Editable Params for ${txId}`);
         return this.getTransaction(txId);
     }
-    /**
-     * Update the isActive state of a transaction.
-     *
-     * @param transactionId - The ID of the transaction to update.
-     * @param isActive - The active state.
-     */
-    setTransactionActive(transactionId, isActive) {
-        const transactionMeta = this.getTransaction(transactionId);
-        if (!transactionMeta) {
-            throw new Error(`Transaction with id ${transactionId} not found`);
-        }
-        __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateTransactionInternal).call(this, {
-            transactionId,
-            note: 'TransactionController#setTransactionActive - Transaction isActive updated',
-            skipHistory: true,
-            skipValidation: true,
-            skipResimulateCheck: true,
-        }, (updatedTransactionMeta) => {
-            updatedTransactionMeta.isActive = isActive;
-        });
-    }
     /**
      * Signs and returns the raw transaction data for provided transaction params list.
      *
@@ -1863,20 +1836,18 @@ _TransactionController_internalEvents = new WeakMap(), _TransactionController_me
     return [new LineaGasFeeFlow_1.LineaGasFeeFlow(), new DefaultGasFeeFlow_1.DefaultGasFeeFlow()];
 }, _TransactionController_getLayer1GasFeeFlows = function _TransactionController_getLayer1GasFeeFlows() {
     return [new OptimismLayer1GasFeeFlow_1.OptimismLayer1GasFeeFlow(), new ScrollLayer1GasFeeFlow_1.ScrollLayer1GasFeeFlow()];
-}, _TransactionController_updateTransactionInternal = function _TransactionController_updateTransactionInternal({ transactionId, note, skipHistory, skipValidation, skipResimulateCheck, }, callback) {
-    let resimulateResponse;
+}, _TransactionController_updateTransactionInternal = function _TransactionController_updateTransactionInternal({ transactionId, note, skipHistory, skipValidation, }, callback) {
+    let updatedTransactionParams = [];
     this.update((state) => {
         const index = state.transactions.findIndex(({ id }) => id === transactionId);
         let transactionMeta = state.transactions[index];
-        const originalTransactionMeta = (0, lodash_1.cloneDeep)(transactionMeta);
         transactionMeta = callback(transactionMeta) ?? transactionMeta;
         if (skipValidation !== true) {
             transactionMeta.txParams = (0, utils_2.normalizeTransactionParams)(transactionMeta.txParams);
             (0, validation_1.validateTxParams)(transactionMeta.txParams);
         }
-        if (!skipResimulateCheck && __classPrivateFieldGet(this, _TransactionController_isSimulationEnabled, "f").call(this)) {
-            resimulateResponse = (0, ResimulateHelper_1.shouldResimulate)(originalTransactionMeta, transactionMeta);
-        }
+        updatedTransactionParams =
+            __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_checkIfTransactionParamsUpdated).call(this, transactionMeta);
         const shouldSkipHistory = this.isHistoryDisabled || skipHistory;
         if (!shouldSkipHistory) {
             transactionMeta = (0, history_1.updateTransactionHistory)(transactionMeta, note ?? 'Transaction updated');
@@ -1884,13 +1855,8 @@ _TransactionController_internalEvents = new WeakMap(), _TransactionController_me
         state.transactions[index] = transactionMeta;
     });
     const transactionMeta = this.getTransaction(transactionId);
-    if (resimulateResponse?.resimulate) {
-        __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateSimulationData).call(this, transactionMeta, {
-            blockTime: resimulateResponse.blockTime,
-        }).catch((error) => {
-            (0, logger_1.projectLogger)('Error during re-simulation', error);
-            throw error;
-        });
+    if (updatedTransactionParams.length > 0) {
+        __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_onTransactionParamsUpdated).call(this, transactionMeta, updatedTransactionParams);
     }
     return transactionMeta;
 }, _TransactionController_updateFirstTimeInteraction = async function _TransactionController_updateFirstTimeInteraction(transactionMeta, { traceContext, } = {}) {
@@ -1935,8 +1901,26 @@ _TransactionController_internalEvents = new WeakMap(), _TransactionController_me
     catch (error) {
         (0, logger_1.projectLogger)('Error fetching account address relationship, skipping first time interaction update', error);
     }
-}, _TransactionController_updateSimulationData = async function _TransactionController_updateSimulationData(transactionMeta, { blockTime, traceContext, } = {}) {
-    const { id: transactionId, chainId, txParams, simulationData: prevSimulationData, } = transactionMeta;
+}, _TransactionController_checkIfTransactionParamsUpdated = function _TransactionController_checkIfTransactionParamsUpdated(newTransactionMeta) {
+    const { id: transactionId, txParams: newParams } = newTransactionMeta;
+    const originalParams = this.getTransaction(transactionId)?.txParams;
+    if (!originalParams || (0, lodash_1.isEqual)(originalParams, newParams)) {
+        return [];
+    }
+    const params = Object.keys(newParams);
+    const updatedProperties = params.filter((param) => newParams[param] !== originalParams[param]);
+    (0, logger_1.projectLogger)('Transaction parameters have been updated', transactionId, updatedProperties, originalParams, newParams);
+    return updatedProperties;
+}, _TransactionController_onTransactionParamsUpdated = function _TransactionController_onTransactionParamsUpdated(transactionMeta, updatedParams) {
+    if (['to', 'value', 'data'].some((param) => updatedParams.includes(param))) {
+        (0, logger_1.projectLogger)('Updating simulation data due to transaction parameter update');
+        __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateSimulationData).call(this, transactionMeta).catch((error) => {
+            (0, logger_1.projectLogger)('Error updating simulation data', error);
+            throw error;
+        });
+    }
+}, _TransactionController_updateSimulationData = async function _TransactionController_updateSimulationData(transactionMeta, { traceContext } = {}) {
+    const { id: transactionId, chainId, txParams } = transactionMeta;
     const { from, to, value, data } = txParams;
     let simulationData = {
         error: {
@@ -1946,23 +1930,16 @@ _TransactionController_internalEvents = new WeakMap(), _TransactionController_me
         tokenBalanceChanges: [],
     };
     if (__classPrivateFieldGet(this, _TransactionController_isSimulationEnabled, "f").call(this)) {
+        __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateTransactionInternal).call(this, { transactionId, skipHistory: true }, (txMeta) => {
+            txMeta.simulationData = undefined;
+        });
         simulationData = await __classPrivateFieldGet(this, _TransactionController_trace, "f").call(this, { name: 'Simulate', parentContext: traceContext }, () => (0, simulation_1.getSimulationData)({
             chainId,
             from: from,
             to: to,
             value: value,
             data: data,
-        }, {
-            blockTime,
         }));
-        if (blockTime &&
-            prevSimulationData &&
-            (0, ResimulateHelper_1.hasSimulationDataChanged)(prevSimulationData, simulationData)) {
-            simulationData = {
-                ...simulationData,
-                isUpdatedAfterSecurityCheck: true,
-            };
-        }
     }
     const finalTransactionMeta = this.getTransaction(transactionId);
     /* istanbul ignore if */
@@ -1973,7 +1950,6 @@ _TransactionController_internalEvents = new WeakMap(), _TransactionController_me
     __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateTransactionInternal).call(this, {
         transactionId,
         note: 'TransactionController#updateSimulationData - Update simulation data',
-        skipResimulateCheck: Boolean(blockTime),
     }, (txMeta) => {
         txMeta.simulationData = simulationData;
     });
diff --git a/dist/TransactionController.cjs.map b/dist/TransactionController.cjs.map
index 48fa8bd65f6648239c69eb676c0267632584b199..530adce4cc9200cdd47a1ee860fe4f8cb9ed68b6 100644
--- a/dist/TransactionController.cjs.map
+++ b/dist/TransactionController.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"TransactionController.cjs","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TypedTransaction } from '@ethereumjs/tx';\nimport type { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  query,\n  ApprovalType,\n  ORIGIN_METAMASK,\n  convertHexToDecimal,\n} from '@metamask/controller-utils';\nimport type { TraceCallback, TraceContext } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  FetchGasFeeEstimateOptions,\n  GasFeeState,\n} from '@metamask/gas-fee-controller';\nimport type {\n  BlockTracker,\n  NetworkClientId,\n  NetworkController,\n  NetworkControllerStateChangeEvent,\n  NetworkState,\n  Provider,\n  NetworkControllerFindNetworkClientIdByChainIdAction,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport { NetworkClientType } from '@metamask/network-controller';\nimport type {\n  NonceLock,\n  Transaction as NonceTrackerTransaction,\n} from '@metamask/nonce-tracker';\nimport { NonceTracker } from '@metamask/nonce-tracker';\nimport { errorCodes, rpcErrors, providerErrors } from '@metamask/rpc-errors';\nimport type { Hex } from '@metamask/utils';\nimport { add0x, hexToNumber } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\n// This package purposefully relies on Node's EventEmitter module.\n// eslint-disable-next-line import-x/no-nodejs-modules\nimport { EventEmitter } from 'events';\nimport { cloneDeep, mapValues, merge, pickBy, sortBy } from 'lodash';\nimport { v1 as random } from 'uuid';\n\nimport {\n  getAccountAddressRelationship,\n  type GetAccountAddressRelationshipRequest,\n} from './api/accounts-api';\nimport { DefaultGasFeeFlow } from './gas-flows/DefaultGasFeeFlow';\nimport { LineaGasFeeFlow } from './gas-flows/LineaGasFeeFlow';\nimport { OptimismLayer1GasFeeFlow } from './gas-flows/OptimismLayer1GasFeeFlow';\nimport { ScrollLayer1GasFeeFlow } from './gas-flows/ScrollLayer1GasFeeFlow';\nimport { TestGasFeeFlow } from './gas-flows/TestGasFeeFlow';\nimport { AccountsApiRemoteTransactionSource } from './helpers/AccountsApiRemoteTransactionSource';\nimport { GasFeePoller } from './helpers/GasFeePoller';\nimport type { IncomingTransactionOptions } from './helpers/IncomingTransactionHelper';\nimport { IncomingTransactionHelper } from './helpers/IncomingTransactionHelper';\nimport { MethodDataHelper } from './helpers/MethodDataHelper';\nimport { MultichainTrackingHelper } from './helpers/MultichainTrackingHelper';\nimport { PendingTransactionTracker } from './helpers/PendingTransactionTracker';\nimport type { ResimulateResponse } from './helpers/ResimulateHelper';\nimport {\n  ResimulateHelper,\n  hasSimulationDataChanged,\n  shouldResimulate,\n} from './helpers/ResimulateHelper';\nimport { projectLogger as log } from './logger';\nimport type {\n  DappSuggestedGasFees,\n  Layer1GasFeeFlow,\n  SavedGasFees,\n  SecurityProviderRequest,\n  SendFlowHistoryEntry,\n  TransactionParams,\n  TransactionMeta,\n  TransactionReceipt,\n  WalletDevice,\n  SecurityAlertResponse,\n  GasFeeFlow,\n  SimulationData,\n  GasFeeEstimates,\n  GasFeeFlowResponse,\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n  SubmitHistoryEntry,\n} from './types';\nimport {\n  TransactionEnvelopeType,\n  TransactionType,\n  TransactionStatus,\n  SimulationErrorCode,\n} from './types';\nimport type { KeyringControllerSignAuthorization } from './utils/eip7702';\nimport { signAuthorizationList } from './utils/eip7702';\nimport { validateConfirmedExternalTransaction } from './utils/external-transactions';\nimport { addGasBuffer, estimateGas, updateGas } from './utils/gas';\nimport { updateGasFees } from './utils/gas-fees';\nimport { getGasFeeFlow } from './utils/gas-flow';\nimport {\n  addInitialHistorySnapshot,\n  updateTransactionHistory,\n} from './utils/history';\nimport {\n  getTransactionLayer1GasFee,\n  updateTransactionLayer1GasFee,\n} from './utils/layer1-gas-fee-flow';\nimport {\n  getAndFormatTransactionsForNonceTracker,\n  getNextNonce,\n} from './utils/nonce';\nimport { prepareTransaction, serializeTransaction } from './utils/prepare';\nimport { getTransactionParamsWithIncreasedGasFee } from './utils/retry';\nimport { getSimulationData } from './utils/simulation';\nimport {\n  updatePostTransactionBalance,\n  updateSwapsTransaction,\n} from './utils/swaps';\nimport { determineTransactionType } from './utils/transaction-type';\nimport {\n  normalizeTransactionParams,\n  isEIP1559Transaction,\n  validateGasValues,\n  validateIfTransactionUnapproved,\n  normalizeTxError,\n  normalizeGasFeeValues,\n} from './utils/utils';\nimport {\n  validateParamTo,\n  validateTransactionOrigin,\n  validateTxParams,\n} from './utils/validation';\n\n/**\n * Metadata for the TransactionController state, describing how to \"anonymize\"\n * the state and which parts should be persisted.\n */\nconst metadata = {\n  transactions: {\n    persist: true,\n    anonymous: false,\n  },\n  methodData: {\n    persist: true,\n    anonymous: false,\n  },\n  lastFetchedBlockNumbers: {\n    persist: true,\n    anonymous: false,\n  },\n  submitHistory: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\nconst SUBMIT_HISTORY_LIMIT = 100;\n\n/**\n * Object with new transaction's meta and a promise resolving to the\n * transaction hash if successful.\n *\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\n/**\n * Method data registry object\n *\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\nexport type MethodData = {\n  registryMethod: string;\n  parsedRegistryMethod:\n    | {\n        name: string;\n        args: { type: string }[];\n      }\n    | {\n        // We're using `any` instead of `undefined` for compatibility with `Json`\n        // TODO: Correct this type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        name?: any;\n        // We're using `any` instead of `undefined` for compatibility with `Json`\n        // TODO: Correct this type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        args?: any;\n      };\n};\n\n/**\n * Transaction controller state\n *\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n * @property lastFetchedBlockNumbers - Cache to optimise incoming transaction queries\n */\nexport type TransactionControllerState = {\n  transactions: TransactionMeta[];\n  methodData: Record<string, MethodData>;\n  lastFetchedBlockNumbers: { [key: string]: number | string };\n  submitHistory: SubmitHistoryEntry[];\n};\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.1;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * Represents the `TransactionController:getState` action.\n */\nexport type TransactionControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TransactionControllerState\n>;\n\n/**\n * The internal actions available to the TransactionController.\n */\nexport type TransactionControllerActions = TransactionControllerGetStateAction;\n\n/**\n * Configuration options for the PendingTransactionTracker\n *\n * @property isResubmitEnabled - Whether transaction publishing is automatically retried.\n */\nexport type PendingTransactionOptions = {\n  isResubmitEnabled?: () => boolean;\n};\n\n/**\n * TransactionController constructor options.\n *\n * @property disableHistory - Whether to disable storing history in transaction metadata.\n * @property disableSendFlowHistory - Explicitly disable transaction metadata history.\n * @property disableSwaps - Whether to disable additional processing on swaps transactions.\n * @property getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n * @property getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n * @property getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.\n * @property getGasFeeEstimates - Callback to retrieve gas fee estimates.\n * @property getNetworkClientRegistry - Gets the network client registry.\n * @property getNetworkState - Gets the state of the network controller.\n * @property getPermittedAccounts - Get accounts that a given origin has permissions for.\n * @property getSavedGasFees - Gets the saved gas fee config.\n * @property getSelectedAddress - Gets the address of the currently selected account.\n * @property incomingTransactions - Configuration options for incoming transaction support.\n * @property isSimulationEnabled - Whether new transactions will be automatically simulated.\n * @property messenger - The controller messenger.\n * @property pendingTransactions - Configuration options for pending transaction support.\n * @property securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.\n * @property sign - Function used to sign transactions.\n * @property state - Initial state to set on this controller.\n * @property transactionHistoryLimit - Transaction history limit.\n * @property hooks - The controller hooks.\n * @property hooks.afterSign - Additional logic to execute after signing a transaction. Return false to not change the status to signed.\n * @property hooks.beforeApproveOnInit - Additional logic to execute before starting an approval flow for a transaction during initialization. Return false to skip the transaction.\n * @property hooks.beforeCheckPendingTransaction - Additional logic to execute before checking pending transactions. Return false to prevent the broadcast of the transaction.\n * @property hooks.beforePublish - Additional logic to execute before publishing a transaction. Return false to prevent the broadcast of the transaction.\n * @property hooks.getAdditionalSignArguments - Returns additional arguments required to sign a transaction.\n * @property hooks.publish - Alternate logic to publish a transaction.\n */\nexport type TransactionControllerOptions = {\n  disableHistory: boolean;\n  disableSendFlowHistory: boolean;\n  disableSwaps: boolean;\n  getCurrentAccountEIP1559Compatibility?: () => Promise<boolean>;\n  getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n  getExternalPendingTransactions?: (\n    address: string,\n    chainId?: string,\n  ) => NonceTrackerTransaction[];\n  getGasFeeEstimates?: (\n    options: FetchGasFeeEstimateOptions,\n  ) => Promise<GasFeeState>;\n  getNetworkClientRegistry: NetworkController['getNetworkClientRegistry'];\n  getNetworkState: () => NetworkState;\n  getPermittedAccounts?: (origin?: string) => Promise<string[]>;\n  getSavedGasFees?: (chainId: Hex) => SavedGasFees | undefined;\n  incomingTransactions?: IncomingTransactionOptions & {\n    /** API keys to be used for Etherscan requests to prevent rate limiting. */\n    etherscanApiKeysByChainId?: Record<Hex, string>;\n  };\n  isFirstTimeInteractionEnabled?: () => boolean;\n  isSimulationEnabled?: () => boolean;\n  messenger: TransactionControllerMessenger;\n  pendingTransactions?: PendingTransactionOptions;\n  securityProviderRequest?: SecurityProviderRequest;\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n    transactionMeta?: TransactionMeta,\n  ) => Promise<TypedTransaction>;\n  state?: Partial<TransactionControllerState>;\n  testGasFeeFlows?: boolean;\n  trace?: TraceCallback;\n  transactionHistoryLimit: number;\n  hooks: {\n    afterSign?: (\n      transactionMeta: TransactionMeta,\n      signedTx: TypedTransaction,\n    ) => boolean;\n    beforeCheckPendingTransaction?: (\n      transactionMeta: TransactionMeta,\n    ) => boolean;\n    beforePublish?: (transactionMeta: TransactionMeta) => boolean;\n    getAdditionalSignArguments?: (\n      transactionMeta: TransactionMeta,\n    ) => (TransactionMeta | undefined)[];\n    publish?: (\n      transactionMeta: TransactionMeta,\n    ) => Promise<{ transactionHash: string }>;\n  };\n};\n\n/**\n * The name of the {@link TransactionController}.\n */\nconst controllerName = 'TransactionController';\n\n/**\n * The external actions available to the {@link TransactionController}.\n */\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AddApprovalRequest\n  | KeyringControllerSignAuthorization\n  | NetworkControllerFindNetworkClientIdByChainIdAction\n  | NetworkControllerGetNetworkClientByIdAction;\n\n/**\n * The external events available to the {@link TransactionController}.\n */\nexport type AllowedEvents = NetworkControllerStateChangeEvent;\n\n/**\n * Represents the `TransactionController:stateChange` event.\n */\nexport type TransactionControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof controllerName,\n  TransactionControllerState\n>;\n\n/**\n * Represents the `TransactionController:incomingTransactionsReceived` event.\n */\nexport type TransactionControllerIncomingTransactionsReceivedEvent = {\n  type: `${typeof controllerName}:incomingTransactionsReceived`;\n  payload: [incomingTransactions: TransactionMeta[]];\n};\n\n/**\n * Represents the `TransactionController:postTransactionBalanceUpdated` event.\n */\nexport type TransactionControllerPostTransactionBalanceUpdatedEvent = {\n  type: `${typeof controllerName}:postTransactionBalanceUpdated`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      approvalTransactionMeta?: TransactionMeta;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:speedUpTransactionAdded` event.\n */\nexport type TransactionControllerSpeedupTransactionAddedEvent = {\n  type: `${typeof controllerName}:speedupTransactionAdded`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionApproved` event.\n */\nexport type TransactionControllerTransactionApprovedEvent = {\n  type: `${typeof controllerName}:transactionApproved`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      actionId?: string;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionConfirmed` event.\n */\nexport type TransactionControllerTransactionConfirmedEvent = {\n  type: `${typeof controllerName}:transactionConfirmed`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionDropped` event.\n */\nexport type TransactionControllerTransactionDroppedEvent = {\n  type: `${typeof controllerName}:transactionDropped`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionFailed` event.\n */\nexport type TransactionControllerTransactionFailedEvent = {\n  type: `${typeof controllerName}:transactionFailed`;\n  payload: [\n    {\n      actionId?: string;\n      error: string;\n      transactionMeta: TransactionMeta;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionFinished` event.\n */\nexport type TransactionControllerTransactionFinishedEvent = {\n  type: `${typeof controllerName}:transactionFinished`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionNewSwapApproval` event.\n */\nexport type TransactionControllerTransactionNewSwapApprovalEvent = {\n  type: `${typeof controllerName}:transactionNewSwapApproval`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionNewSwap` event.\n */\nexport type TransactionControllerTransactionNewSwapEvent = {\n  type: `${typeof controllerName}:transactionNewSwap`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionNewSwapApproval` event.\n */\nexport type TransactionControllerTransactionNewSwapAndSendEvent = {\n  type: `${typeof controllerName}:transactionNewSwapAndSend`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionPublishingSkipped` event.\n */\nexport type TransactionControllerTransactionPublishingSkipped = {\n  type: `${typeof controllerName}:transactionPublishingSkipped`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionRejected` event.\n */\nexport type TransactionControllerTransactionRejectedEvent = {\n  type: `${typeof controllerName}:transactionRejected`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      actionId?: string;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionStatusUpdated` event.\n */\nexport type TransactionControllerTransactionStatusUpdatedEvent = {\n  type: `${typeof controllerName}:transactionStatusUpdated`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionSubmitted` event.\n */\nexport type TransactionControllerTransactionSubmittedEvent = {\n  type: `${typeof controllerName}:transactionSubmitted`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      actionId?: string;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:unapprovedTransactionAdded` event.\n */\nexport type TransactionControllerUnapprovedTransactionAddedEvent = {\n  type: `${typeof controllerName}:unapprovedTransactionAdded`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * The internal events available to the {@link TransactionController}.\n */\nexport type TransactionControllerEvents =\n  | TransactionControllerIncomingTransactionsReceivedEvent\n  | TransactionControllerPostTransactionBalanceUpdatedEvent\n  | TransactionControllerSpeedupTransactionAddedEvent\n  | TransactionControllerStateChangeEvent\n  | TransactionControllerTransactionApprovedEvent\n  | TransactionControllerTransactionConfirmedEvent\n  | TransactionControllerTransactionDroppedEvent\n  | TransactionControllerTransactionFailedEvent\n  | TransactionControllerTransactionFinishedEvent\n  | TransactionControllerTransactionNewSwapApprovalEvent\n  | TransactionControllerTransactionNewSwapEvent\n  | TransactionControllerTransactionNewSwapAndSendEvent\n  | TransactionControllerTransactionPublishingSkipped\n  | TransactionControllerTransactionRejectedEvent\n  | TransactionControllerTransactionStatusUpdatedEvent\n  | TransactionControllerTransactionSubmittedEvent\n  | TransactionControllerUnapprovedTransactionAddedEvent;\n\n/**\n * The messenger of the {@link TransactionController}.\n */\nexport type TransactionControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  TransactionControllerActions | AllowedActions,\n  TransactionControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Possible states of the approve transaction step.\n */\nexport enum ApprovalState {\n  Approved = 'approved',\n  NotApproved = 'not-approved',\n  SkippedViaBeforePublishHook = 'skipped-via-before-publish-hook',\n}\n\n/**\n * Get the default TransactionsController state.\n *\n * @returns The default TransactionsController state.\n */\nfunction getDefaultTransactionControllerState(): TransactionControllerState {\n  return {\n    methodData: {},\n    transactions: [],\n    lastFetchedBlockNumbers: {},\n    submitHistory: [],\n  };\n}\n\n/**\n * Controller responsible for submitting and managing transactions.\n */\nexport class TransactionController extends BaseController<\n  typeof controllerName,\n  TransactionControllerState,\n  TransactionControllerMessenger\n> {\n  readonly #internalEvents = new EventEmitter();\n\n  private readonly isHistoryDisabled: boolean;\n\n  private readonly isSwapsDisabled: boolean;\n\n  private readonly isSendFlowHistoryDisabled: boolean;\n\n  private readonly approvingTransactionIds: Set<string> = new Set();\n\n  readonly #methodDataHelper: MethodDataHelper;\n\n  private readonly mutex = new Mutex();\n\n  private readonly gasFeeFlows: GasFeeFlow[];\n\n  private readonly getSavedGasFees: (chainId: Hex) => SavedGasFees | undefined;\n\n  private readonly getNetworkState: () => NetworkState;\n\n  private readonly getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;\n\n  private readonly getCurrentNetworkEIP1559Compatibility: (\n    networkClientId?: NetworkClientId,\n  ) => Promise<boolean>;\n\n  private readonly getGasFeeEstimates: (\n    options: FetchGasFeeEstimateOptions,\n  ) => Promise<GasFeeState>;\n\n  private readonly getPermittedAccounts?: (\n    origin?: string,\n  ) => Promise<string[]>;\n\n  private readonly getExternalPendingTransactions: (\n    address: string,\n    chainId?: string,\n  ) => NonceTrackerTransaction[];\n\n  readonly #incomingTransactionChainIds: Set<Hex> = new Set();\n\n  readonly #incomingTransactionHelper: IncomingTransactionHelper;\n\n  private readonly layer1GasFeeFlows: Layer1GasFeeFlow[];\n\n  readonly #incomingTransactionOptions: IncomingTransactionOptions & {\n    etherscanApiKeysByChainId?: Record<Hex, string>;\n  };\n\n  private readonly securityProviderRequest?: SecurityProviderRequest;\n\n  readonly #pendingTransactionOptions: PendingTransactionOptions;\n\n  private readonly signAbortCallbacks: Map<string, () => void> = new Map();\n\n  readonly #trace: TraceCallback;\n\n  readonly #transactionHistoryLimit: number;\n\n  readonly #isFirstTimeInteractionEnabled: () => boolean;\n\n  readonly #isSimulationEnabled: () => boolean;\n\n  readonly #testGasFeeFlows: boolean;\n\n  private readonly afterSign: (\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ) => boolean;\n\n  private readonly beforeCheckPendingTransaction: (\n    transactionMeta: TransactionMeta,\n  ) => boolean;\n\n  private readonly beforePublish: (transactionMeta: TransactionMeta) => boolean;\n\n  private readonly publish: (\n    transactionMeta: TransactionMeta,\n    rawTx: string,\n  ) => Promise<{ transactionHash?: string }>;\n\n  private readonly getAdditionalSignArguments: (\n    transactionMeta: TransactionMeta,\n  ) => (TransactionMeta | undefined)[];\n\n  private failTransaction(\n    transactionMeta: TransactionMeta,\n    error: Error,\n    actionId?: string,\n  ) {\n    let newTransactionMeta: TransactionMeta;\n\n    try {\n      newTransactionMeta = this.#updateTransactionInternal(\n        {\n          transactionId: transactionMeta.id,\n          note: 'TransactionController#failTransaction - Add error message and set status to failed',\n          skipValidation: true,\n        },\n        (draftTransactionMeta) => {\n          draftTransactionMeta.status = TransactionStatus.failed;\n\n          (\n            draftTransactionMeta as TransactionMeta & {\n              status: TransactionStatus.failed;\n            }\n          ).error = normalizeTxError(error);\n        },\n      );\n    } catch (err: unknown) {\n      log('Failed to mark transaction as failed', err);\n\n      newTransactionMeta = {\n        ...transactionMeta,\n        status: TransactionStatus.failed,\n        error: normalizeTxError(error),\n      };\n    }\n\n    this.messagingSystem.publish(`${controllerName}:transactionFailed`, {\n      actionId,\n      error: error.message,\n      transactionMeta: newTransactionMeta,\n    });\n\n    this.onTransactionStatusChange(newTransactionMeta);\n\n    this.messagingSystem.publish(\n      `${controllerName}:transactionFinished`,\n      newTransactionMeta,\n    );\n\n    this.#internalEvents.emit(\n      `${transactionMeta.id}:finished`,\n      newTransactionMeta,\n    );\n  }\n\n  readonly #multichainTrackingHelper: MultichainTrackingHelper;\n\n  /**\n   * Method used to sign transactions\n   */\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n    transactionMeta?: TransactionMeta,\n  ) => Promise<TypedTransaction>;\n\n  /**\n   * Constructs a TransactionController.\n   *\n   * @param options - The controller options.\n   * @param options.disableHistory - Whether to disable storing history in transaction metadata.\n   * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.\n   * @param options.disableSwaps - Whether to disable additional processing on swaps transactions.\n   * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n   * @param options.getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.\n   * @param options.getGasFeeEstimates - Callback to retrieve gas fee estimates.\n   * @param options.getNetworkClientRegistry - Gets the network client registry.\n   * @param options.getNetworkState - Gets the state of the network controller.\n   * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.\n   * @param options.getSavedGasFees - Gets the saved gas fee config.\n   * @param options.incomingTransactions - Configuration options for incoming transaction support.\n   * @param options.isFirstTimeInteractionEnabled - Whether first time interaction checks are enabled.\n   * @param options.isSimulationEnabled - Whether new transactions will be automatically simulated.\n   * @param options.messenger - The controller messenger.\n   * @param options.pendingTransactions - Configuration options for pending transaction support.\n   * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.\n   * @param options.sign - Function used to sign transactions.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.testGasFeeFlows - Whether to use the test gas fee flow.\n   * @param options.trace - Callback to generate trace information.\n   * @param options.transactionHistoryLimit - Transaction history limit.\n   * @param options.hooks - The controller hooks.\n   */\n  constructor({\n    disableHistory,\n    disableSendFlowHistory,\n    disableSwaps,\n    getCurrentAccountEIP1559Compatibility,\n    getCurrentNetworkEIP1559Compatibility,\n    getExternalPendingTransactions,\n    getGasFeeEstimates,\n    getNetworkClientRegistry,\n    getNetworkState,\n    getPermittedAccounts,\n    getSavedGasFees,\n    incomingTransactions = {},\n    isFirstTimeInteractionEnabled,\n    isSimulationEnabled,\n    messenger,\n    pendingTransactions = {},\n    securityProviderRequest,\n    sign,\n    state,\n    testGasFeeFlows,\n    trace,\n    transactionHistoryLimit = 40,\n    hooks,\n  }: TransactionControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTransactionControllerState(),\n        ...state,\n      },\n    });\n\n    this.messagingSystem = messenger;\n    this.getNetworkState = getNetworkState;\n    this.isSendFlowHistoryDisabled = disableSendFlowHistory ?? false;\n    this.isHistoryDisabled = disableHistory ?? false;\n    this.isSwapsDisabled = disableSwaps ?? false;\n    this.#isFirstTimeInteractionEnabled =\n      isFirstTimeInteractionEnabled ?? (() => true);\n    this.#isSimulationEnabled = isSimulationEnabled ?? (() => true);\n    this.getSavedGasFees = getSavedGasFees ?? ((_chainId) => undefined);\n    this.getCurrentAccountEIP1559Compatibility =\n      getCurrentAccountEIP1559Compatibility ?? (() => Promise.resolve(true));\n    this.getCurrentNetworkEIP1559Compatibility =\n      getCurrentNetworkEIP1559Compatibility;\n    this.getGasFeeEstimates =\n      getGasFeeEstimates || (() => Promise.resolve({} as GasFeeState));\n    this.getPermittedAccounts = getPermittedAccounts;\n    this.getExternalPendingTransactions =\n      getExternalPendingTransactions ?? (() => []);\n    this.securityProviderRequest = securityProviderRequest;\n    this.#incomingTransactionOptions = incomingTransactions;\n    this.#pendingTransactionOptions = pendingTransactions;\n    this.#transactionHistoryLimit = transactionHistoryLimit;\n    this.sign = sign;\n    this.#testGasFeeFlows = testGasFeeFlows === true;\n    this.#trace = trace ?? (((_request, fn) => fn?.()) as TraceCallback);\n\n    this.afterSign = hooks?.afterSign ?? (() => true);\n    this.beforeCheckPendingTransaction =\n      hooks?.beforeCheckPendingTransaction ??\n      /* istanbul ignore next */\n      (() => true);\n    this.beforePublish = hooks?.beforePublish ?? (() => true);\n    this.getAdditionalSignArguments =\n      hooks?.getAdditionalSignArguments ?? (() => []);\n    this.publish =\n      hooks?.publish ?? (() => Promise.resolve({ transactionHash: undefined }));\n\n    const findNetworkClientIdByChainId = (chainId: Hex) => {\n      return this.messagingSystem.call(\n        `NetworkController:findNetworkClientIdByChainId`,\n        chainId,\n      );\n    };\n\n    this.#multichainTrackingHelper = new MultichainTrackingHelper({\n      findNetworkClientIdByChainId,\n      getNetworkClientById: ((networkClientId: NetworkClientId) => {\n        return this.messagingSystem.call(\n          `NetworkController:getNetworkClientById`,\n          networkClientId,\n        );\n      }) as NetworkController['getNetworkClientById'],\n      getNetworkClientRegistry,\n      removePendingTransactionTrackerListeners:\n        this.#removePendingTransactionTrackerListeners.bind(this),\n      createNonceTracker: this.#createNonceTracker.bind(this),\n      createPendingTransactionTracker:\n        this.#createPendingTransactionTracker.bind(this),\n      onNetworkStateChange: (listener) => {\n        this.messagingSystem.subscribe(\n          'NetworkController:stateChange',\n          listener,\n        );\n      },\n    });\n    this.#multichainTrackingHelper.initialize();\n\n    this.gasFeeFlows = this.#getGasFeeFlows();\n    this.layer1GasFeeFlows = this.#getLayer1GasFeeFlows();\n\n    const gasFeePoller = new GasFeePoller({\n      findNetworkClientIdByChainId,\n      gasFeeFlows: this.gasFeeFlows,\n      getGasFeeControllerEstimates: this.getGasFeeEstimates,\n      getProvider: (networkClientId) => this.#getProvider({ networkClientId }),\n      getTransactions: () => this.state.transactions,\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      onStateChange: (listener) => {\n        this.messagingSystem.subscribe(\n          'TransactionController:stateChange',\n          listener,\n        );\n      },\n    });\n\n    gasFeePoller.hub.on(\n      'transaction-updated',\n      this.#onGasFeePollerTransactionUpdate.bind(this),\n    );\n\n    this.#methodDataHelper = new MethodDataHelper({\n      getProvider: (networkClientId) => this.#getProvider({ networkClientId }),\n      getState: () => this.state.methodData,\n    });\n\n    this.#methodDataHelper.hub.on(\n      'update',\n      ({ fourBytePrefix, methodData }) => {\n        this.update((_state) => {\n          _state.methodData[fourBytePrefix] = methodData;\n        });\n      },\n    );\n\n    const updateCache = (fn: (cache: Record<string, unknown>) => void) => {\n      this.update((_state) => {\n        fn(_state.lastFetchedBlockNumbers);\n      });\n    };\n\n    this.#incomingTransactionHelper = new IncomingTransactionHelper({\n      getCache: () => this.state.lastFetchedBlockNumbers,\n      getChainIds: () => [...this.#incomingTransactionChainIds],\n      getCurrentAccount: () => this.#getSelectedAccount(),\n      getLocalTransactions: () => this.state.transactions,\n      includeTokenTransfers:\n        this.#incomingTransactionOptions.includeTokenTransfers,\n      isEnabled: this.#incomingTransactionOptions.isEnabled,\n      queryEntireHistory: this.#incomingTransactionOptions.queryEntireHistory,\n      remoteTransactionSource: new AccountsApiRemoteTransactionSource(),\n      trimTransactions: this.trimTransactionsForState.bind(this),\n      updateCache,\n      updateTransactions: this.#incomingTransactionOptions.updateTransactions,\n    });\n\n    this.#addIncomingTransactionHelperListeners(\n      this.#incomingTransactionHelper,\n    );\n\n    // when transactionsController state changes\n    // check for pending transactions and start polling if there are any\n    this.messagingSystem.subscribe(\n      'TransactionController:stateChange',\n      this.#checkForPendingTransactionAndStartPolling,\n    );\n\n    new ResimulateHelper({\n      simulateTransaction: this.#updateSimulationData.bind(this),\n      onTransactionsUpdate: (listener) => {\n        this.messagingSystem.subscribe(\n          'TransactionController:stateChange',\n          listener,\n          (controllerState) => controllerState.transactions,\n        );\n      },\n      getTransactions: () => this.state.transactions,\n    });\n\n    this.onBootCleanup();\n    this.#checkForPendingTransactionAndStartPolling();\n  }\n\n  /**\n   * Stops polling and removes listeners to prepare the controller for garbage collection.\n   */\n  destroy() {\n    this.#stopAllTracking();\n  }\n\n  /**\n   * Handle new method data request.\n   *\n   * @param fourBytePrefix - The method prefix.\n   * @param networkClientId - The ID of the network client used to fetch the method data.\n   * @returns The method data object corresponding to the given signature prefix.\n   */\n  async handleMethodData(\n    fourBytePrefix: string,\n    networkClientId: NetworkClientId,\n  ): Promise<MethodData> {\n    return this.#methodDataHelper.lookup(fourBytePrefix, networkClientId);\n  }\n\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param txParams - Standard parameters for an Ethereum transaction.\n   * @param options - Additional options to control how the transaction is added.\n   * @param options.actionId - Unique ID to prevent duplicate requests.\n   * @param options.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.\n   * @param options.method - RPC method that requested the transaction.\n   * @param options.origin - The origin of the transaction request, such as a dApp hostname.\n   * @param options.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.\n   * @param options.securityAlertResponse - Response from security validator.\n   * @param options.sendFlowHistory - The sendFlowHistory entries to add.\n   * @param options.type - Type of transaction to add, such as 'cancel' or 'swap'.\n   * @param options.swaps - Options for swaps transactions.\n   * @param options.swaps.hasApproveTx - Whether the transaction has an approval transaction.\n   * @param options.swaps.meta - Metadata for swap transaction.\n   * @param options.networkClientId - The id of the network client for this transaction.\n   * @param options.traceContext - The parent context for any new traces.\n   * @returns Object containing a promise resolving to the transaction hash if approved.\n   */\n  async addTransaction(\n    txParams: TransactionParams,\n    options: {\n      actionId?: string;\n      deviceConfirmedOn?: WalletDevice;\n      method?: string;\n      networkClientId: NetworkClientId;\n      origin?: string;\n      requireApproval?: boolean | undefined;\n      securityAlertResponse?: SecurityAlertResponse;\n      sendFlowHistory?: SendFlowHistoryEntry[];\n      swaps?: {\n        hasApproveTx?: boolean;\n        meta?: Partial<TransactionMeta>;\n      };\n      traceContext?: unknown;\n      type?: TransactionType;\n    },\n  ): Promise<Result> {\n    log('Adding transaction', txParams, options);\n\n    const {\n      actionId,\n      deviceConfirmedOn,\n      method,\n      networkClientId,\n      origin,\n      requireApproval,\n      securityAlertResponse,\n      sendFlowHistory,\n      swaps = {},\n      traceContext,\n      type,\n    } = options;\n\n    txParams = normalizeTransactionParams(txParams);\n\n    if (!this.#multichainTrackingHelper.has(networkClientId)) {\n      throw new Error(\n        `Network client not found - ${networkClientId as string}`,\n      );\n    }\n\n    const permittedAddresses =\n      origin === undefined\n        ? undefined\n        : await this.getPermittedAccounts?.(origin);\n\n    const selectedAddress = this.#getSelectedAccount().address;\n\n    await validateTransactionOrigin({\n      from: txParams.from,\n      origin,\n      permittedAddresses,\n      selectedAddress,\n      txParams,\n    });\n\n    const isEIP1559Compatible =\n      await this.getEIP1559Compatibility(networkClientId);\n\n    validateTxParams(txParams, isEIP1559Compatible);\n\n    const dappSuggestedGasFees = this.generateDappSuggestedGasFees(\n      txParams,\n      origin,\n    );\n\n    const chainId = this.#getChainId(networkClientId);\n\n    const ethQuery = this.#getEthQuery({\n      networkClientId,\n    });\n\n    const transactionType =\n      type ?? (await determineTransactionType(txParams, ethQuery)).type;\n\n    const existingTransactionMeta = this.getTransactionWithActionId(actionId);\n\n    // If a request to add a transaction with the same actionId is submitted again, a new transaction will not be created for it.\n    let addedTransactionMeta = existingTransactionMeta\n      ? cloneDeep(existingTransactionMeta)\n      : {\n          // Add actionId to txMeta to check if same actionId is seen again\n          actionId,\n          chainId,\n          dappSuggestedGasFees,\n          deviceConfirmedOn,\n          id: random(),\n          isFirstTimeInteraction: undefined,\n          networkClientId,\n          origin,\n          securityAlertResponse,\n          status: TransactionStatus.unapproved as const,\n          time: Date.now(),\n          txParams,\n          type: transactionType,\n          userEditedGasLimit: false,\n          verifiedOnBlockchain: false,\n        };\n\n    await this.#trace(\n      { name: 'Estimate Gas Properties', parentContext: traceContext },\n      (context) =>\n        this.updateGasProperties(addedTransactionMeta, {\n          traceContext: context,\n        }),\n    );\n\n    // Checks if a transaction already exists with a given actionId\n    if (!existingTransactionMeta) {\n      // Set security provider response\n      if (method && this.securityProviderRequest) {\n        const securityProviderResponse = await this.securityProviderRequest(\n          addedTransactionMeta,\n          method,\n        );\n        addedTransactionMeta.securityProviderResponse =\n          securityProviderResponse;\n      }\n\n      if (!this.isSendFlowHistoryDisabled) {\n        addedTransactionMeta.sendFlowHistory = sendFlowHistory ?? [];\n      }\n      // Initial history push\n      if (!this.isHistoryDisabled) {\n        addedTransactionMeta = addInitialHistorySnapshot(addedTransactionMeta);\n      }\n\n      addedTransactionMeta = updateSwapsTransaction(\n        addedTransactionMeta,\n        transactionType,\n        swaps,\n        {\n          isSwapsDisabled: this.isSwapsDisabled,\n          cancelTransaction: this.cancelTransaction.bind(this),\n          messenger: this.messagingSystem,\n        },\n      );\n\n      this.addMetadata(addedTransactionMeta);\n\n      if (requireApproval !== false) {\n        this.#updateSimulationData(addedTransactionMeta, {\n          traceContext,\n        }).catch((error) => {\n          log('Error while updating simulation data', error);\n          throw error;\n        });\n\n        this.#updateFirstTimeInteraction(addedTransactionMeta, {\n          traceContext,\n        }).catch((error) => {\n          log('Error while updating first interaction properties', error);\n        });\n      } else {\n        log(\n          'Skipping simulation & first interaction update as approval not required',\n        );\n      }\n\n      this.messagingSystem.publish(\n        `${controllerName}:unapprovedTransactionAdded`,\n        addedTransactionMeta,\n      );\n    }\n\n    return {\n      result: this.processApproval(addedTransactionMeta, {\n        isExisting: Boolean(existingTransactionMeta),\n        requireApproval,\n        actionId,\n        traceContext,\n      }),\n      transactionMeta: addedTransactionMeta,\n    };\n  }\n\n  startIncomingTransactionPolling(chainIds: Hex[]) {\n    chainIds.forEach((chainId) =>\n      this.#incomingTransactionChainIds.add(chainId),\n    );\n\n    this.#incomingTransactionHelper.start();\n  }\n\n  stopIncomingTransactionPolling(chainIds?: Hex[]) {\n    chainIds?.forEach((chainId) =>\n      this.#incomingTransactionChainIds.delete(chainId),\n    );\n\n    if (!chainIds) {\n      this.#incomingTransactionChainIds.clear();\n    }\n\n    if (this.#incomingTransactionChainIds.size === 0) {\n      this.#incomingTransactionHelper.stop();\n    }\n  }\n\n  async updateIncomingTransactions(chainIds: Hex[]) {\n    chainIds.forEach((chainId) =>\n      this.#incomingTransactionChainIds.add(chainId),\n    );\n\n    await this.#incomingTransactionHelper.update();\n  }\n\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param gasValues - The gas values to use for the cancellation transaction.\n   * @param options - The options for the cancellation transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests.\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async stopTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      estimatedBaseFee,\n      actionId,\n    }: { estimatedBaseFee?: string; actionId?: string } = {},\n  ) {\n    return await this.#retryTransaction({\n      actionId,\n      estimatedBaseFee,\n      gasValues,\n      label: 'cancel',\n      rate: CANCEL_RATE,\n      transactionId,\n      transactionType: TransactionType.cancel,\n      prepareTransactionParams: (txParams) => {\n        delete txParams.data;\n        txParams.to = txParams.from;\n        txParams.value = '0x0';\n      },\n      afterSubmit: (newTransactionMeta) => {\n        this.messagingSystem.publish(\n          `${controllerName}:transactionFinished`,\n          newTransactionMeta,\n        );\n\n        this.#internalEvents.emit(\n          `${newTransactionMeta.id}:finished`,\n          newTransactionMeta,\n        );\n      },\n    });\n  }\n\n  /**\n   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.\n   *\n   * @param transactionId - The ID of the transaction to speed up.\n   * @param gasValues - The gas values to use for the speed up transaction.\n   * @param options - The options for the speed up transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async speedUpTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      actionId,\n      estimatedBaseFee,\n    }: { actionId?: string; estimatedBaseFee?: string } = {},\n  ) {\n    return await this.#retryTransaction({\n      actionId,\n      estimatedBaseFee,\n      gasValues,\n      label: 'speed up',\n      rate: SPEED_UP_RATE,\n      transactionId,\n      transactionType: TransactionType.retry,\n      afterSubmit: (newTransactionMeta) => {\n        this.messagingSystem.publish(\n          `${controllerName}:speedupTransactionAdded`,\n          newTransactionMeta,\n        );\n      },\n    });\n  }\n\n  async #retryTransaction({\n    actionId,\n    afterSubmit,\n    estimatedBaseFee,\n    gasValues,\n    label,\n    prepareTransactionParams,\n    rate,\n    transactionId,\n    transactionType,\n  }: {\n    actionId?: string;\n    afterSubmit?: (transactionMeta: TransactionMeta) => void;\n    estimatedBaseFee?: string;\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values;\n    label: string;\n    prepareTransactionParams?: (txParams: TransactionParams) => void;\n    rate: number;\n    transactionId: string;\n    transactionType: TransactionType;\n  }) {\n    // If transaction is found for same action id, do not create a new transaction.\n    if (this.getTransactionWithActionId(actionId)) {\n      return;\n    }\n\n    if (gasValues) {\n      // Not good practice to reassign a parameter but temporarily avoiding a larger refactor.\n      gasValues = normalizeGasFeeValues(gasValues);\n      validateGasValues(gasValues);\n    }\n\n    log(`Creating ${label} transaction`, transactionId, gasValues);\n\n    const transactionMeta = this.getTransaction(transactionId);\n    /* istanbul ignore next */\n    if (!transactionMeta) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const newTxParams: TransactionParams =\n      getTransactionParamsWithIncreasedGasFee(\n        transactionMeta.txParams,\n        rate,\n        gasValues,\n      );\n\n    prepareTransactionParams?.(newTxParams);\n\n    const unsignedEthTx = prepareTransaction(\n      transactionMeta.chainId,\n      newTxParams,\n    );\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from,\n    );\n\n    const transactionMetaWithRsv = this.updateTransactionMetaRSV(\n      transactionMeta,\n      signedTx,\n    );\n\n    const rawTx = serializeTransaction(signedTx);\n    const newFee = newTxParams.maxFeePerGas ?? newTxParams.gasPrice;\n\n    const oldFee = newTxParams.maxFeePerGas\n      ? transactionMetaWithRsv.txParams.maxFeePerGas\n      : transactionMetaWithRsv.txParams.gasPrice;\n\n    log(`Submitting ${label} transaction`, {\n      oldFee,\n      newFee,\n      txParams: newTxParams,\n    });\n\n    const { networkClientId } = transactionMeta;\n    const ethQuery = this.#getEthQuery({ networkClientId });\n\n    const newTransactionMeta = {\n      ...transactionMetaWithRsv,\n      actionId,\n      estimatedBaseFee,\n      id: random(),\n      originalGasEstimate: transactionMeta.txParams.gas,\n      originalType: transactionMeta.type,\n      rawTx,\n      time: Date.now(),\n      txParams: newTxParams,\n      type: transactionType,\n    };\n\n    const hash = await this.publishTransactionForRetry(ethQuery, {\n      ...newTransactionMeta,\n      origin: label,\n    });\n\n    newTransactionMeta.hash = hash;\n\n    this.addMetadata(newTransactionMeta);\n\n    // speedUpTransaction has no approval request, so we assume the user has already approved the transaction\n    this.messagingSystem.publish(`${controllerName}:transactionApproved`, {\n      transactionMeta: newTransactionMeta,\n      actionId,\n    });\n\n    this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {\n      transactionMeta: newTransactionMeta,\n      actionId,\n    });\n\n    afterSubmit?.(newTransactionMeta);\n  }\n\n  /**\n   * Estimates required gas for a given transaction.\n   *\n   * @param transaction - The transaction to estimate gas for.\n   * @param networkClientId - The network client id to use for the estimate.\n   * @returns The gas and gas price.\n   */\n  async estimateGas(\n    transaction: TransactionParams,\n    networkClientId: NetworkClientId,\n  ) {\n    const ethQuery = this.#getEthQuery({\n      networkClientId,\n    });\n\n    const { estimatedGas, simulationFails } = await estimateGas(\n      transaction,\n      ethQuery,\n    );\n\n    return { gas: estimatedGas, simulationFails };\n  }\n\n  /**\n   * Estimates required gas for a given transaction and add additional gas buffer with the given multiplier.\n   *\n   * @param transaction - The transaction params to estimate gas for.\n   * @param multiplier - The multiplier to use for the gas buffer.\n   * @param networkClientId - The network client id to use for the estimate.\n   */\n  async estimateGasBuffered(\n    transaction: TransactionParams,\n    multiplier: number,\n    networkClientId: NetworkClientId,\n  ) {\n    const ethQuery = this.#getEthQuery({\n      networkClientId,\n    });\n\n    const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(\n      transaction,\n      ethQuery,\n    );\n\n    const gas = addGasBuffer(estimatedGas, blockGasLimit, multiplier);\n\n    return {\n      gas,\n      simulationFails,\n    };\n  }\n\n  /**\n   * Updates an existing transaction in state.\n   *\n   * @param transactionMeta - The new transaction to store in state.\n   * @param note - A note or update reason to include in the transaction history.\n   */\n  updateTransaction(transactionMeta: TransactionMeta, note: string) {\n    const { id: transactionId } = transactionMeta;\n\n    this.#updateTransactionInternal({ transactionId, note }, () => ({\n      ...transactionMeta,\n    }));\n  }\n\n  /**\n   * Update the security alert response for a transaction.\n   *\n   * @param transactionId - ID of the transaction.\n   * @param securityAlertResponse - The new security alert response for the transaction.\n   */\n  updateSecurityAlertResponse(\n    transactionId: string,\n    securityAlertResponse: SecurityAlertResponse,\n  ) {\n    if (!securityAlertResponse) {\n      throw new Error(\n        'updateSecurityAlertResponse: securityAlertResponse should not be null',\n      );\n    }\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update security alert response as no transaction metadata found`,\n      );\n    }\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      securityAlertResponse,\n    };\n    this.updateTransaction(\n      updatedTransactionMeta,\n      `${controllerName}:updatesecurityAlertResponse - securityAlertResponse updated`,\n    );\n  }\n\n  /**\n   * Remove transactions from state.\n   *\n   * @param options - The options bag.\n   * @param options.address - Remove transactions from this account only. Defaults to all accounts.\n   * @param options.chainId - Remove transactions for the specified chain only. Defaults to all chains.\n   */\n  wipeTransactions({\n    address,\n    chainId,\n  }: {\n    address?: string;\n    chainId?: string;\n  } = {}) {\n    if (!chainId && !address) {\n      this.update((state) => {\n        state.transactions = [];\n      });\n\n      return;\n    }\n\n    const newTransactions = this.state.transactions.filter(\n      ({ chainId: txChainId, txParams }) => {\n        const isMatchingNetwork = !chainId || chainId === txChainId;\n\n        if (!isMatchingNetwork) {\n          return true;\n        }\n\n        const isMatchingAddress =\n          !address || txParams.from?.toLowerCase() === address.toLowerCase();\n\n        return !isMatchingAddress;\n      },\n    );\n\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState(newTransactions);\n    });\n  }\n\n  /**\n   * Adds external provided transaction to state as confirmed transaction.\n   *\n   * @param transactionMeta - TransactionMeta to add transactions.\n   * @param transactionReceipt - TransactionReceipt of the external transaction.\n   * @param baseFeePerGas - Base fee per gas of the external transaction.\n   */\n  async confirmExternalTransaction(\n    transactionMeta: TransactionMeta,\n    transactionReceipt: TransactionReceipt,\n    baseFeePerGas: Hex,\n  ) {\n    // Run validation and add external transaction to state.\n    const newTransactionMeta = this.addExternalTransaction(transactionMeta);\n\n    try {\n      const transactionId = newTransactionMeta.id;\n\n      // Make sure status is confirmed and define gasUsed as in receipt.\n      const updatedTransactionMeta = {\n        ...newTransactionMeta,\n        status: TransactionStatus.confirmed as const,\n        txReceipt: transactionReceipt,\n      };\n      if (baseFeePerGas) {\n        updatedTransactionMeta.baseFeePerGas = baseFeePerGas;\n      }\n\n      // Update same nonce local transactions as dropped and define replacedBy properties.\n      this.markNonceDuplicatesDropped(transactionId);\n\n      // Update external provided transaction with updated gas values and confirmed status.\n      this.updateTransaction(\n        updatedTransactionMeta,\n        `${controllerName}:confirmExternalTransaction - Add external transaction`,\n      );\n      this.onTransactionStatusChange(updatedTransactionMeta);\n\n      // Intentional given potential duration of process.\n      this.updatePostBalance(updatedTransactionMeta).catch((error) => {\n        log('Error while updating post balance', error);\n        throw error;\n      });\n\n      this.messagingSystem.publish(\n        `${controllerName}:transactionConfirmed`,\n        updatedTransactionMeta,\n      );\n    } catch (error) {\n      console.error('Failed to confirm external transaction', error);\n    }\n  }\n\n  /**\n   * Append new send flow history to a transaction.\n   *\n   * @param transactionID - The ID of the transaction to update.\n   * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.\n   * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionSendFlowHistory(\n    transactionID: string,\n    currentSendFlowHistoryLength: number,\n    sendFlowHistoryToAdd: SendFlowHistoryEntry[],\n  ): TransactionMeta {\n    if (this.isSendFlowHistoryDisabled) {\n      throw new Error(\n        'Send flow history is disabled for the current transaction controller',\n      );\n    }\n\n    const transactionMeta = this.getTransaction(transactionID);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update send flow history as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionSendFlowHistory',\n    );\n\n    const sendFlowHistory = transactionMeta.sendFlowHistory ?? [];\n    if (currentSendFlowHistoryLength === sendFlowHistory.length) {\n      const updatedTransactionMeta = {\n        ...transactionMeta,\n        sendFlowHistory: [...sendFlowHistory, ...sendFlowHistoryToAdd],\n      };\n      this.updateTransaction(\n        updatedTransactionMeta,\n        `${controllerName}:updateTransactionSendFlowHistory - sendFlowHistory updated`,\n      );\n    }\n\n    return this.getTransaction(transactionID) as TransactionMeta;\n  }\n\n  /**\n   * Update the gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param gasValues - Gas values to update.\n   * @param gasValues.gas - Same as transaction.gasLimit.\n   * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param gasValues.gasPrice - Price per gas for legacy transactions.\n   * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param gasValues.estimateUsed - Which estimate level was used.\n   * @param gasValues.estimateSuggested - Which estimate level that the API suggested.\n   * @param gasValues.defaultGasEstimates - The default estimate for gas.\n   * @param gasValues.originalGasEstimate - Original estimate for gas.\n   * @param gasValues.userEditedGasLimit - The gas limit supplied by user.\n   * @param gasValues.userFeeLevel - Estimate level user selected.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionGasFees(\n    transactionId: string,\n    {\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      gas,\n      gasLimit,\n      gasPrice,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n    }: {\n      defaultGasEstimates?: string;\n      estimateUsed?: string;\n      estimateSuggested?: string;\n      gas?: string;\n      gasLimit?: string;\n      gasPrice?: string;\n      maxPriorityFeePerGas?: string;\n      maxFeePerGas?: string;\n      originalGasEstimate?: string;\n      userEditedGasLimit?: boolean;\n      userFeeLevel?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionGasFees',\n    );\n\n    let transactionGasFees = {\n      txParams: {\n        gas,\n        gasLimit,\n        gasPrice,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n      },\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n\n    // only update what is defined\n    transactionGasFees.txParams = pickBy(transactionGasFees.txParams);\n    transactionGasFees = pickBy(transactionGasFees);\n\n    // merge updated gas values with existing transaction meta\n    const updatedMeta = merge({}, transactionMeta, transactionGasFees);\n\n    this.updateTransaction(\n      updatedMeta,\n      `${controllerName}:updateTransactionGasFees - gas values updated`,\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  /**\n   * Update the previous gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param previousGas - Previous gas values to update.\n   * @param previousGas.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param previousGas.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param previousGas.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @returns The updated transactionMeta.\n   */\n  updatePreviousGasParams(\n    transactionId: string,\n    {\n      gasLimit,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    }: {\n      gasLimit?: string;\n      maxFeePerGas?: string;\n      maxPriorityFeePerGas?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(transactionMeta, 'updatePreviousGasParams');\n\n    const transactionPreviousGas = {\n      previousGas: {\n        gasLimit,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n      },\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n\n    // only update what is defined\n    transactionPreviousGas.previousGas = pickBy(\n      transactionPreviousGas.previousGas,\n    );\n\n    // merge updated previous gas values with existing transaction meta\n    const updatedMeta = merge({}, transactionMeta, transactionPreviousGas);\n\n    this.updateTransaction(\n      updatedMeta,\n      `${controllerName}:updatePreviousGasParams - Previous gas values updated`,\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  async getNonceLock(\n    address: string,\n    networkClientId: NetworkClientId,\n  ): Promise<NonceLock> {\n    return this.#multichainTrackingHelper.getNonceLock(\n      address,\n      networkClientId,\n    );\n  }\n\n  /**\n   * Updates the editable parameters of a transaction.\n   *\n   * @param txId - The ID of the transaction to update.\n   * @param params - The editable parameters to update.\n   * @param params.data - Data to pass with the transaction.\n   * @param params.gas - Maximum number of units of gas to use for the transaction.\n   * @param params.gasPrice - Price per gas for legacy transactions.\n   * @param params.from - Address to send the transaction from.\n   * @param params.to - Address to send the transaction to.\n   * @param params.value - Value associated with the transaction.\n   * @returns The updated transaction metadata.\n   */\n  async updateEditableParams(\n    txId: string,\n    {\n      data,\n      gas,\n      gasPrice,\n      from,\n      to,\n      value,\n    }: {\n      data?: string;\n      gas?: string;\n      gasPrice?: string;\n      from?: string;\n      to?: string;\n      value?: string;\n    },\n  ) {\n    const transactionMeta = this.getTransaction(txId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update editable params as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(transactionMeta, 'updateEditableParams');\n\n    const editableParams = {\n      txParams: {\n        data,\n        from,\n        to,\n        value,\n        gas,\n        gasPrice,\n      },\n    } as Partial<TransactionMeta>;\n\n    editableParams.txParams = pickBy(\n      editableParams.txParams,\n    ) as TransactionParams;\n\n    const updatedTransaction = merge({}, transactionMeta, editableParams);\n\n    const { networkClientId } = transactionMeta;\n    const provider = this.#getProvider({ networkClientId });\n    const ethQuery = new EthQuery(provider);\n\n    const { type } = await determineTransactionType(\n      updatedTransaction.txParams,\n      ethQuery,\n    );\n\n    updatedTransaction.type = type;\n\n    await updateTransactionLayer1GasFee({\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      provider,\n      transactionMeta: updatedTransaction,\n    });\n\n    this.updateTransaction(\n      updatedTransaction,\n      `Update Editable Params for ${txId}`,\n    );\n\n    return this.getTransaction(txId);\n  }\n\n  /**\n   * Update the isActive state of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param isActive - The active state.\n   */\n  setTransactionActive(transactionId: string, isActive: boolean) {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(`Transaction with id ${transactionId} not found`);\n    }\n\n    this.#updateTransactionInternal(\n      {\n        transactionId,\n        note: 'TransactionController#setTransactionActive - Transaction isActive updated',\n        skipHistory: true,\n        skipValidation: true,\n        skipResimulateCheck: true,\n      },\n      (updatedTransactionMeta) => {\n        updatedTransactionMeta.isActive = isActive;\n      },\n    );\n  }\n\n  /**\n   * Signs and returns the raw transaction data for provided transaction params list.\n   *\n   * @param listOfTxParams - The list of transaction params to approve.\n   * @param opts - Options bag.\n   * @param opts.hasNonce - Whether the transactions already have a nonce.\n   * @returns The raw transactions.\n   */\n  async approveTransactionsWithSameNonce(\n    listOfTxParams: (TransactionParams & { chainId: Hex })[] = [],\n    { hasNonce }: { hasNonce?: boolean } = {},\n  ): Promise<string | string[]> {\n    log('Approving transactions with same nonce', {\n      transactions: listOfTxParams,\n    });\n\n    if (listOfTxParams.length === 0) {\n      return '';\n    }\n\n    const initialTx = listOfTxParams[0];\n    const { chainId } = initialTx;\n    const networkClientId = this.#getNetworkClientId({ chainId });\n    const initialTxAsEthTx = prepareTransaction(chainId, initialTx);\n    const initialTxAsSerializedHex = serializeTransaction(initialTxAsEthTx);\n\n    if (this.approvingTransactionIds.has(initialTxAsSerializedHex)) {\n      return '';\n    }\n\n    this.approvingTransactionIds.add(initialTxAsSerializedHex);\n\n    let rawTransactions, nonceLock;\n    try {\n      // TODO: we should add a check to verify that all transactions have the same from address\n      const fromAddress = initialTx.from;\n      const requiresNonce = hasNonce !== true;\n\n      nonceLock = requiresNonce\n        ? await this.getNonceLock(fromAddress, networkClientId)\n        : undefined;\n\n      const nonce = nonceLock\n        ? add0x(nonceLock.nextNonce.toString(16))\n        : initialTx.nonce;\n\n      if (nonceLock) {\n        log('Using nonce from nonce tracker', nonce, nonceLock.nonceDetails);\n      }\n\n      rawTransactions = await Promise.all(\n        listOfTxParams.map((txParams) => {\n          txParams.nonce = nonce;\n          return this.signExternalTransaction(txParams.chainId, txParams);\n        }),\n      );\n    } catch (err) {\n      log('Error while signing transactions with same nonce', err);\n      // Must set transaction to submitted/failed before releasing lock\n      // continue with error chain\n      throw err;\n    } finally {\n      nonceLock?.releaseLock();\n      this.approvingTransactionIds.delete(initialTxAsSerializedHex);\n    }\n    return rawTransactions;\n  }\n\n  /**\n   * Update a custodial transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param options - The custodial transaction options to update.\n   * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.\n   * @param options.hash - The new hash value to be assigned.\n   * @param options.status - The new status value to be assigned.\n   */\n  updateCustodialTransaction(\n    transactionId: string,\n    {\n      errorMessage,\n      hash,\n      status,\n    }: {\n      errorMessage?: string;\n      hash?: string;\n      status?: TransactionStatus;\n    },\n  ) {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update custodial transaction as no transaction metadata found`,\n      );\n    }\n\n    if (!transactionMeta.custodyId) {\n      throw new Error('Transaction must be a custodian transaction');\n    }\n\n    if (\n      status &&\n      ![\n        TransactionStatus.submitted,\n        TransactionStatus.signed,\n        TransactionStatus.failed,\n      ].includes(status)\n    ) {\n      throw new Error(\n        `Cannot update custodial transaction with status: ${status}`,\n      );\n    }\n\n    const updatedTransactionMeta = merge(\n      {},\n      transactionMeta,\n      pickBy({ hash, status }),\n    ) as TransactionMeta;\n\n    if (updatedTransactionMeta.status === TransactionStatus.submitted) {\n      updatedTransactionMeta.submittedTime = new Date().getTime();\n    }\n\n    if (updatedTransactionMeta.status === TransactionStatus.failed) {\n      updatedTransactionMeta.error = normalizeTxError(new Error(errorMessage));\n    }\n\n    this.updateTransaction(\n      updatedTransactionMeta,\n      `${controllerName}:updateCustodialTransaction - Custodial transaction updated`,\n    );\n\n    if (\n      [TransactionStatus.submitted, TransactionStatus.failed].includes(\n        status as TransactionStatus,\n      )\n    ) {\n      this.messagingSystem.publish(\n        `${controllerName}:transactionFinished`,\n        updatedTransactionMeta,\n      );\n      this.#internalEvents.emit(\n        `${updatedTransactionMeta.id}:finished`,\n        updatedTransactionMeta,\n      );\n    }\n  }\n\n  /**\n   * Search transaction metadata for matching entries.\n   *\n   * @param opts - Options bag.\n   * @param opts.initialList - The transactions to search. Defaults to the current state.\n   * @param opts.limit - The maximum number of transactions to return. No limit by default.\n   * @param opts.searchCriteria - An object containing values or functions for transaction properties to filter transactions with.\n   * @returns An array of transactions matching the provided options.\n   */\n  getTransactions({\n    initialList,\n    limit,\n    searchCriteria = {},\n  }: {\n    initialList?: TransactionMeta[];\n    limit?: number;\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    searchCriteria?: any;\n  } = {}): TransactionMeta[] {\n    // searchCriteria is an object that might have values that aren't predicate\n    // methods. When providing any other value type (string, number, etc), we\n    // consider this shorthand for \"check the value at key for strict equality\n    // with the provided value\". To conform this object to be only methods, we\n    // mapValues (lodash) such that every value on the object is a method that\n    // returns a boolean.\n    const predicateMethods = mapValues(searchCriteria, (predicate) => {\n      return typeof predicate === 'function'\n        ? predicate\n        : // TODO: Replace `any` with type\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (v: any) => v === predicate;\n    });\n\n    const transactionsToFilter = initialList ?? this.state.transactions;\n\n    // Combine sortBy and pickBy to transform our state object into an array of\n    // matching transactions that are sorted by time.\n    const filteredTransactions = sortBy(\n      pickBy(transactionsToFilter, (transaction) => {\n        // iterate over the predicateMethods keys to check if the transaction\n        // matches the searchCriteria\n        for (const [key, predicate] of Object.entries(predicateMethods)) {\n          // We return false early as soon as we know that one of the specified\n          // search criteria do not match the transaction. This prevents\n          // needlessly checking all criteria when we already know the criteria\n          // are not fully satisfied. We check both txParams and the base\n          // object as predicate keys can be either.\n          if (key in transaction.txParams) {\n            // TODO: Replace `any` with type\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (predicate((transaction.txParams as any)[key]) === false) {\n              return false;\n            }\n            // TODO: Replace `any` with type\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          } else if (predicate((transaction as any)[key]) === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }),\n      'time',\n    );\n    if (limit !== undefined) {\n      // We need to have all transactions of a given nonce in order to display\n      // necessary details in the UI. We use the size of this set to determine\n      // whether we have reached the limit provided, thus ensuring that all\n      // transactions of nonces we include will be sent to the UI.\n      const nonces = new Set();\n      const txs = [];\n      // By default, the transaction list we filter from is sorted by time ASC.\n      // To ensure that filtered results prefers the newest transactions we\n      // iterate from right to left, inserting transactions into front of a new\n      // array. The original order is preserved, but we ensure that newest txs\n      // are preferred.\n      for (let i = filteredTransactions.length - 1; i > -1; i--) {\n        const txMeta = filteredTransactions[i];\n        const { nonce } = txMeta.txParams;\n        if (!nonces.has(nonce)) {\n          if (nonces.size < limit) {\n            nonces.add(nonce);\n          } else {\n            continue;\n          }\n        }\n        // Push transaction into the beginning of our array to ensure the\n        // original order is preserved.\n        txs.unshift(txMeta);\n      }\n      return txs;\n    }\n    return filteredTransactions;\n  }\n\n  async estimateGasFee({\n    transactionParams,\n    chainId,\n    networkClientId: requestNetworkClientId,\n  }: {\n    transactionParams: TransactionParams;\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): Promise<GasFeeFlowResponse> {\n    const { id: networkClientId, provider } =\n      this.#multichainTrackingHelper.getNetworkClient({\n        chainId,\n        networkClientId: requestNetworkClientId,\n      });\n\n    const transactionMeta = {\n      txParams: transactionParams,\n      chainId,\n      networkClientId,\n    } as TransactionMeta;\n\n    // Guaranteed as the default gas fee flow matches all transactions.\n    const gasFeeFlow = getGasFeeFlow(\n      transactionMeta,\n      this.gasFeeFlows,\n    ) as GasFeeFlow;\n\n    const ethQuery = new EthQuery(provider);\n\n    const gasFeeControllerData = await this.getGasFeeEstimates({\n      networkClientId,\n    });\n\n    return gasFeeFlow.getGasFees({\n      ethQuery,\n      gasFeeControllerData,\n      transactionMeta,\n    });\n  }\n\n  /**\n   * Determine the layer 1 gas fee for the given transaction parameters.\n   *\n   * @param request - The request object.\n   * @param request.transactionParams - The transaction parameters to estimate the layer 1 gas fee for.\n   * @param request.chainId - The ID of the chain where the transaction will be executed.\n   * @param request.networkClientId - The ID of a specific network client to process the transaction.\n   */\n  async getLayer1GasFee({\n    transactionParams,\n    chainId,\n    networkClientId,\n  }: {\n    transactionParams: TransactionParams;\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): Promise<Hex | undefined> {\n    const provider = this.#getProvider({\n      chainId,\n      networkClientId,\n    });\n\n    return await getTransactionLayer1GasFee({\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      provider,\n      transactionMeta: {\n        txParams: transactionParams,\n        chainId,\n      } as TransactionMeta,\n    });\n  }\n\n  private async signExternalTransaction(\n    chainId: Hex,\n    transactionParams: TransactionParams,\n  ): Promise<string> {\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const normalizedTransactionParams =\n      normalizeTransactionParams(transactionParams);\n    const type = isEIP1559Transaction(normalizedTransactionParams)\n      ? TransactionEnvelopeType.feeMarket\n      : TransactionEnvelopeType.legacy;\n    const updatedTransactionParams = {\n      ...normalizedTransactionParams,\n      type,\n      gasLimit: normalizedTransactionParams.gas,\n      chainId,\n    };\n\n    const { from } = updatedTransactionParams;\n\n    const unsignedTransaction = prepareTransaction(\n      chainId,\n      updatedTransactionParams,\n    );\n\n    const signedTransaction = await this.sign(unsignedTransaction, from);\n    const rawTransaction = serializeTransaction(signedTransaction);\n\n    return rawTransaction;\n  }\n\n  /**\n   * Removes unapproved transactions from state.\n   */\n  clearUnapprovedTransactions() {\n    const transactions = this.state.transactions.filter(\n      ({ status }) => status !== TransactionStatus.unapproved,\n    );\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState(transactions);\n    });\n  }\n\n  /**\n   * Stop the signing process for a specific transaction.\n   * Throws an error causing the transaction status to be set to failed.\n   *\n   * @param transactionId - The ID of the transaction to stop signing.\n   */\n  abortTransactionSigning(transactionId: string) {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(`Cannot abort signing as no transaction metadata found`);\n    }\n\n    const abortCallback = this.signAbortCallbacks.get(transactionId);\n\n    if (!abortCallback) {\n      throw new Error(\n        `Cannot abort signing as transaction is not waiting for signing`,\n      );\n    }\n\n    abortCallback();\n\n    this.signAbortCallbacks.delete(transactionId);\n  }\n\n  private addMetadata(transactionMeta: TransactionMeta) {\n    validateTxParams(transactionMeta.txParams);\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState([\n        ...state.transactions,\n        transactionMeta,\n      ]);\n    });\n  }\n\n  private async updateGasProperties(\n    transactionMeta: TransactionMeta,\n    { traceContext }: { traceContext?: TraceContext } = {},\n  ) {\n    const isEIP1559Compatible =\n      transactionMeta.txParams.type !== TransactionEnvelopeType.legacy &&\n      (await this.getEIP1559Compatibility(transactionMeta.networkClientId));\n\n    const { networkClientId, chainId } = transactionMeta;\n\n    const isCustomNetwork =\n      this.#multichainTrackingHelper.getNetworkClient({ networkClientId })\n        .configuration.type === NetworkClientType.Custom;\n\n    const ethQuery = this.#getEthQuery({ networkClientId });\n    const provider = this.#getProvider({ networkClientId });\n\n    await this.#trace(\n      { name: 'Update Gas', parentContext: traceContext },\n      async () => {\n        await updateGas({\n          ethQuery,\n          chainId,\n          isCustomNetwork,\n          txMeta: transactionMeta,\n        });\n      },\n    );\n\n    await this.#trace(\n      { name: 'Update Gas Fees', parentContext: traceContext },\n      async () =>\n        await updateGasFees({\n          eip1559: isEIP1559Compatible,\n          ethQuery,\n          gasFeeFlows: this.gasFeeFlows,\n          getGasFeeEstimates: this.getGasFeeEstimates,\n          getSavedGasFees: this.getSavedGasFees.bind(this),\n          txMeta: transactionMeta,\n        }),\n    );\n\n    await this.#trace(\n      { name: 'Update Layer 1 Gas Fees', parentContext: traceContext },\n      async () =>\n        await updateTransactionLayer1GasFee({\n          layer1GasFeeFlows: this.layer1GasFeeFlows,\n          provider,\n          transactionMeta,\n        }),\n    );\n  }\n\n  private onBootCleanup() {\n    this.clearUnapprovedTransactions();\n    this.failIncompleteTransactions();\n  }\n\n  private failIncompleteTransactions() {\n    const incompleteTransactions = this.state.transactions.filter(\n      (transaction) =>\n        [TransactionStatus.approved, TransactionStatus.signed].includes(\n          transaction.status,\n        ),\n    );\n\n    for (const transactionMeta of incompleteTransactions) {\n      this.failTransaction(\n        transactionMeta,\n        new Error('Transaction incomplete at startup'),\n      );\n    }\n  }\n\n  private async processApproval(\n    transactionMeta: TransactionMeta,\n    {\n      isExisting = false,\n      requireApproval,\n      shouldShowRequest = true,\n      actionId,\n      traceContext,\n    }: {\n      isExisting?: boolean;\n      requireApproval?: boolean | undefined;\n      shouldShowRequest?: boolean;\n      actionId?: string;\n      traceContext?: TraceContext;\n    },\n  ): Promise<string> {\n    const transactionId = transactionMeta.id;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n    const { meta, isCompleted } = this.isTransactionCompleted(transactionId);\n    const finishedPromise = isCompleted\n      ? Promise.resolve(meta)\n      : this.waitForTransactionFinished(transactionId);\n\n    if (meta && !isExisting && !isCompleted) {\n      try {\n        if (requireApproval !== false) {\n          const acceptResult = await this.#trace(\n            { name: 'Await Approval', parentContext: traceContext },\n            (context) =>\n              this.requestApproval(transactionMeta, {\n                shouldShowRequest,\n                traceContext: context,\n              }),\n          );\n\n          resultCallbacks = acceptResult.resultCallbacks;\n\n          const approvalValue = acceptResult.value as\n            | {\n                txMeta?: TransactionMeta;\n              }\n            | undefined;\n\n          const updatedTransaction = approvalValue?.txMeta;\n\n          if (updatedTransaction) {\n            log('Updating transaction with approval data', {\n              customNonce: updatedTransaction.customNonceValue,\n              params: updatedTransaction.txParams,\n            });\n\n            this.updateTransaction(\n              updatedTransaction,\n              'TransactionController#processApproval - Updated with approval data',\n            );\n          }\n        }\n\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n\n        if (!isTxCompleted) {\n          const approvalResult = await this.approveTransaction(\n            transactionId,\n            traceContext,\n          );\n          if (\n            approvalResult === ApprovalState.SkippedViaBeforePublishHook &&\n            resultCallbacks\n          ) {\n            resultCallbacks.success();\n          }\n          const updatedTransactionMeta = this.getTransaction(\n            transactionId,\n          ) as TransactionMeta;\n          this.messagingSystem.publish(\n            `${controllerName}:transactionApproved`,\n            {\n              transactionMeta: updatedTransactionMeta,\n              actionId,\n            },\n          );\n        }\n        // TODO: Replace `any` with type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } catch (error: any) {\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n        if (!isTxCompleted) {\n          if (error?.code === errorCodes.provider.userRejectedRequest) {\n            this.cancelTransaction(transactionId, actionId);\n\n            throw providerErrors.userRejectedRequest(\n              'MetaMask Tx Signature: User denied transaction signature.',\n            );\n          } else {\n            this.failTransaction(meta, error, actionId);\n          }\n        }\n      }\n    }\n\n    const finalMeta = await finishedPromise;\n\n    switch (finalMeta?.status) {\n      case TransactionStatus.failed:\n        resultCallbacks?.error(finalMeta.error);\n        throw rpcErrors.internal(finalMeta.error.message);\n\n      case TransactionStatus.submitted:\n        resultCallbacks?.success();\n        return finalMeta.hash as string;\n\n      default:\n        const internalError = rpcErrors.internal(\n          `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n            finalMeta || transactionId,\n          )}`,\n        );\n\n        resultCallbacks?.error(internalError);\n        throw internalError;\n    }\n  }\n\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionId - The ID of the transaction to approve.\n   * @param traceContext - The parent context for any new traces.\n   */\n  private async approveTransaction(\n    transactionId: string,\n    traceContext?: unknown,\n  ) {\n    const cleanupTasks = new Array<() => void>();\n    cleanupTasks.push(await this.mutex.acquire());\n\n    let transactionMeta = this.getTransactionOrThrow(transactionId);\n\n    try {\n      if (!this.sign) {\n        this.failTransaction(\n          transactionMeta,\n          new Error('No sign method defined.'),\n        );\n        return ApprovalState.NotApproved;\n      } else if (!transactionMeta.chainId) {\n        this.failTransaction(transactionMeta, new Error('No chainId defined.'));\n        return ApprovalState.NotApproved;\n      }\n\n      if (this.approvingTransactionIds.has(transactionId)) {\n        log('Skipping approval as signing in progress', transactionId);\n        return ApprovalState.NotApproved;\n      }\n      this.approvingTransactionIds.add(transactionId);\n      cleanupTasks.push(() =>\n        this.approvingTransactionIds.delete(transactionId),\n      );\n\n      const [nonce, releaseNonce] = await getNextNonce(\n        transactionMeta,\n        (address: string) =>\n          this.#multichainTrackingHelper.getNonceLock(\n            address,\n            transactionMeta.networkClientId,\n          ),\n      );\n\n      // must set transaction to submitted/failed before releasing lock\n      releaseNonce && cleanupTasks.push(releaseNonce);\n\n      transactionMeta = this.#updateTransactionInternal(\n        {\n          transactionId,\n          note: 'TransactionController#approveTransaction - Transaction approved',\n        },\n        (draftTxMeta) => {\n          const { chainId, txParams } = draftTxMeta;\n          const { gas, type } = txParams;\n\n          draftTxMeta.status = TransactionStatus.approved;\n          draftTxMeta.txParams.chainId = chainId;\n          draftTxMeta.txParams.gasLimit = gas;\n          draftTxMeta.txParams.nonce = nonce;\n\n          if (!type && isEIP1559Transaction(txParams)) {\n            draftTxMeta.txParams.type = TransactionEnvelopeType.feeMarket;\n          }\n        },\n      );\n\n      this.onTransactionStatusChange(transactionMeta);\n\n      const rawTx = await this.#trace(\n        { name: 'Sign', parentContext: traceContext },\n        () => this.signTransaction(transactionMeta, transactionMeta.txParams),\n      );\n\n      if (!this.beforePublish(transactionMeta)) {\n        log('Skipping publishing transaction based on hook');\n        this.messagingSystem.publish(\n          `${controllerName}:transactionPublishingSkipped`,\n          transactionMeta,\n        );\n        return ApprovalState.SkippedViaBeforePublishHook;\n      }\n\n      if (!rawTx) {\n        return ApprovalState.NotApproved;\n      }\n\n      const { networkClientId } = transactionMeta;\n      const ethQuery = this.#getEthQuery({ networkClientId });\n\n      let preTxBalance: string | undefined;\n      const shouldUpdatePreTxBalance =\n        transactionMeta.type === TransactionType.swap;\n\n      if (shouldUpdatePreTxBalance) {\n        log('Determining pre-transaction balance');\n\n        preTxBalance = await query(ethQuery, 'getBalance', [\n          transactionMeta.txParams.from,\n        ]);\n      }\n\n      log('Publishing transaction', transactionMeta.txParams);\n\n      let hash: string | undefined;\n\n      await this.#trace(\n        { name: 'Publish', parentContext: traceContext },\n        async () => {\n          ({ transactionHash: hash } = await this.publish(\n            transactionMeta,\n            rawTx,\n          ));\n\n          if (hash === undefined) {\n            hash = await this.publishTransaction(ethQuery, {\n              ...transactionMeta,\n              rawTx,\n            });\n          }\n        },\n      );\n\n      log('Publish successful', hash);\n\n      transactionMeta = this.#updateTransactionInternal(\n        {\n          transactionId,\n          note: 'TransactionController#approveTransaction - Transaction submitted',\n        },\n        (draftTxMeta) => {\n          draftTxMeta.hash = hash;\n          draftTxMeta.status = TransactionStatus.submitted;\n          draftTxMeta.submittedTime = new Date().getTime();\n          if (shouldUpdatePreTxBalance) {\n            draftTxMeta.preTxBalance = preTxBalance;\n            log('Updated pre-transaction balance', preTxBalance);\n          }\n        },\n      );\n\n      this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {\n        transactionMeta,\n      });\n\n      this.messagingSystem.publish(\n        `${controllerName}:transactionFinished`,\n        transactionMeta,\n      );\n      this.#internalEvents.emit(`${transactionId}:finished`, transactionMeta);\n\n      this.onTransactionStatusChange(transactionMeta);\n      return ApprovalState.Approved;\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n      return ApprovalState.NotApproved;\n    } finally {\n      cleanupTasks.forEach((task) => task());\n    }\n  }\n\n  private async publishTransaction(\n    ethQuery: EthQuery,\n    transactionMeta: TransactionMeta,\n    { skipSubmitHistory }: { skipSubmitHistory?: boolean } = {},\n  ): Promise<string> {\n    const transactionHash = await query(ethQuery, 'sendRawTransaction', [\n      transactionMeta.rawTx,\n    ]);\n\n    if (skipSubmitHistory !== true) {\n      this.#updateSubmitHistory(transactionMeta, transactionHash);\n    }\n\n    return transactionHash;\n  }\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param actionId - The actionId passed from UI\n   */\n  private cancelTransaction(transactionId: string, actionId?: string) {\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n    this.update((state) => {\n      const transactions = state.transactions.filter(\n        ({ id }) => id !== transactionId,\n      );\n      state.transactions = this.trimTransactionsForState(transactions);\n    });\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      status: TransactionStatus.rejected as const,\n    };\n    this.messagingSystem.publish(\n      `${controllerName}:transactionFinished`,\n      updatedTransactionMeta,\n    );\n    this.#internalEvents.emit(\n      `${transactionMeta.id}:finished`,\n      updatedTransactionMeta,\n    );\n    this.messagingSystem.publish(`${controllerName}:transactionRejected`, {\n      transactionMeta: updatedTransactionMeta,\n      actionId,\n    });\n    this.onTransactionStatusChange(updatedTransactionMeta);\n  }\n\n  /**\n   * Trim the amount of transactions that are set on the state. Checks\n   * if the length of the tx history is longer then desired persistence\n   * limit and then if it is removes the oldest confirmed or rejected tx.\n   * Pending or unapproved transactions will not be removed by this\n   * operation. For safety of presenting a fully functional transaction UI\n   * representation, this function will not break apart transactions with the\n   * same nonce, created on the same day, per network. Not accounting for\n   * transactions of the same nonce, same day and network combo can result in\n   * confusing or broken experiences in the UI.\n   *\n   * @param transactions - The transactions to be applied to the state.\n   * @returns The trimmed list of transactions.\n   */\n  private trimTransactionsForState(\n    transactions: TransactionMeta[],\n  ): TransactionMeta[] {\n    const nonceNetworkSet = new Set();\n\n    const txsToKeep = [...transactions]\n      .sort((a, b) => (a.time > b.time ? -1 : 1)) // Descending time order\n      .filter((tx) => {\n        const { chainId, status, txParams, time } = tx;\n\n        if (txParams) {\n          const key = `${String(txParams.nonce)}-${convertHexToDecimal(\n            chainId,\n          )}-${new Date(time).toDateString()}`;\n\n          if (nonceNetworkSet.has(key)) {\n            return true;\n          } else if (\n            nonceNetworkSet.size < this.#transactionHistoryLimit ||\n            !this.isFinalState(status)\n          ) {\n            nonceNetworkSet.add(key);\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n    txsToKeep.reverse(); // Ascending time order\n    return txsToKeep;\n  }\n\n  /**\n   * Determines if the transaction is in a final state.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isFinalState(status: TransactionStatus): boolean {\n    return (\n      status === TransactionStatus.rejected ||\n      status === TransactionStatus.confirmed ||\n      status === TransactionStatus.failed\n    );\n  }\n\n  /**\n   * Whether the transaction has at least completed all local processing.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isLocalFinalState(status: TransactionStatus): boolean {\n    return [\n      TransactionStatus.confirmed,\n      TransactionStatus.failed,\n      TransactionStatus.rejected,\n      TransactionStatus.submitted,\n    ].includes(status);\n  }\n\n  private async requestApproval(\n    txMeta: TransactionMeta,\n    {\n      shouldShowRequest,\n      traceContext,\n    }: { shouldShowRequest: boolean; traceContext?: TraceContext },\n  ): Promise<AddResult> {\n    const id = this.getApprovalId(txMeta);\n    const { origin } = txMeta;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: txMeta.id };\n\n    await this.#trace({\n      name: 'Notification Display',\n      id,\n      parentContext: traceContext,\n    });\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin: origin || ORIGIN_METAMASK,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      shouldShowRequest,\n    )) as Promise<AddResult>;\n  }\n\n  private getTransaction(\n    transactionId: string,\n  ): Readonly<TransactionMeta> | undefined {\n    const { transactions } = this.state;\n    return transactions.find(({ id }) => id === transactionId);\n  }\n\n  private getTransactionOrThrow(\n    transactionId: string,\n    errorMessagePrefix = 'TransactionController',\n  ): Readonly<TransactionMeta> {\n    const txMeta = this.getTransaction(transactionId);\n    if (!txMeta) {\n      throw new Error(\n        `${errorMessagePrefix}: No transaction found with id ${transactionId}`,\n      );\n    }\n    return txMeta;\n  }\n\n  private getApprovalId(txMeta: TransactionMeta) {\n    return String(txMeta.id);\n  }\n\n  private isTransactionCompleted(transactionId: string): {\n    meta?: TransactionMeta;\n    isCompleted: boolean;\n  } {\n    const transaction = this.getTransaction(transactionId);\n\n    if (!transaction) {\n      return { meta: undefined, isCompleted: false };\n    }\n\n    const isCompleted = this.isLocalFinalState(transaction.status);\n\n    return { meta: transaction, isCompleted };\n  }\n\n  #getChainId(networkClientId: NetworkClientId): Hex {\n    return this.#multichainTrackingHelper.getNetworkClient({ networkClientId })\n      .configuration.chainId;\n  }\n\n  #getNetworkClientId({\n    chainId,\n    networkClientId,\n  }: {\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }) {\n    if (networkClientId) {\n      return networkClientId;\n    }\n\n    return this.#multichainTrackingHelper.getNetworkClient({\n      chainId,\n    }).id;\n  }\n\n  #getEthQuery({\n    chainId,\n    networkClientId,\n  }: {\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): EthQuery {\n    return new EthQuery(this.#getProvider({ chainId, networkClientId }));\n  }\n\n  #getProvider({\n    chainId,\n    networkClientId,\n  }: {\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): Provider {\n    return this.#multichainTrackingHelper.getNetworkClient({\n      chainId,\n      networkClientId,\n    }).provider;\n  }\n\n  private onIncomingTransactions(transactions: TransactionMeta[]) {\n    if (!transactions.length) {\n      return;\n    }\n\n    const finalTransactions = transactions.map((tx) => {\n      const { chainId } = tx;\n      const networkClientId = this.#getNetworkClientId({ chainId });\n\n      return {\n        ...tx,\n        networkClientId,\n      };\n    });\n\n    this.update((state) => {\n      const { transactions: currentTransactions } = state;\n\n      state.transactions = this.trimTransactionsForState([\n        ...finalTransactions,\n        ...currentTransactions,\n      ]);\n\n      log(\n        'Added incoming transactions to state',\n        finalTransactions.length,\n        finalTransactions,\n      );\n    });\n\n    this.messagingSystem.publish(\n      `${controllerName}:incomingTransactionsReceived`,\n      finalTransactions,\n    );\n  }\n\n  private generateDappSuggestedGasFees(\n    txParams: TransactionParams,\n    origin?: string,\n  ): DappSuggestedGasFees | undefined {\n    if (!origin || origin === ORIGIN_METAMASK) {\n      return undefined;\n    }\n\n    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas } = txParams;\n\n    if (\n      gasPrice === undefined &&\n      maxFeePerGas === undefined &&\n      maxPriorityFeePerGas === undefined &&\n      gas === undefined\n    ) {\n      return undefined;\n    }\n\n    const dappSuggestedGasFees: DappSuggestedGasFees = {};\n\n    if (gasPrice !== undefined) {\n      dappSuggestedGasFees.gasPrice = gasPrice;\n    } else if (\n      maxFeePerGas !== undefined ||\n      maxPriorityFeePerGas !== undefined\n    ) {\n      dappSuggestedGasFees.maxFeePerGas = maxFeePerGas;\n      dappSuggestedGasFees.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    }\n\n    if (gas !== undefined) {\n      dappSuggestedGasFees.gas = gas;\n    }\n\n    return dappSuggestedGasFees;\n  }\n\n  /**\n   * Validates and adds external provided transaction to state.\n   *\n   * @param transactionMeta - Nominated external transaction to be added to state.\n   * @returns The new transaction.\n   */\n  private addExternalTransaction(transactionMeta: TransactionMeta) {\n    const { chainId } = transactionMeta;\n    const { transactions } = this.state;\n    const fromAddress = transactionMeta?.txParams?.from;\n    const sameFromAndNetworkTransactions = transactions.filter(\n      (transaction) =>\n        transaction.txParams.from === fromAddress &&\n        transaction.chainId === chainId,\n    );\n    const confirmedTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.confirmed,\n    );\n    const pendingTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.submitted,\n    );\n\n    validateConfirmedExternalTransaction(\n      transactionMeta,\n      confirmedTxs,\n      pendingTxs,\n    );\n\n    // Make sure provided external transaction has non empty history array\n    const newTransactionMeta =\n      (transactionMeta.history ?? []).length === 0 && !this.isHistoryDisabled\n        ? addInitialHistorySnapshot(transactionMeta)\n        : transactionMeta;\n\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState([\n        ...state.transactions,\n        newTransactionMeta,\n      ]);\n    });\n\n    return newTransactionMeta;\n  }\n\n  /**\n   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions\n   * in the transactions have the same nonce.\n   *\n   * @param transactionId - Used to identify original transaction.\n   */\n  private markNonceDuplicatesDropped(transactionId: string) {\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      return;\n    }\n    const nonce = transactionMeta.txParams?.nonce;\n    const from = transactionMeta.txParams?.from;\n    const { chainId } = transactionMeta;\n\n    const sameNonceTransactions = this.state.transactions.filter(\n      (transaction) =>\n        transaction.id !== transactionId &&\n        transaction.txParams.from === from &&\n        transaction.txParams.nonce === nonce &&\n        transaction.chainId === chainId &&\n        transaction.type !== TransactionType.incoming,\n    );\n    const sameNonceTransactionIds = sameNonceTransactions.map(\n      (transaction) => transaction.id,\n    );\n\n    if (sameNonceTransactions.length === 0) {\n      return;\n    }\n\n    this.update((state) => {\n      for (const transaction of state.transactions) {\n        if (sameNonceTransactionIds.includes(transaction.id)) {\n          transaction.replacedBy = transactionMeta?.hash;\n          transaction.replacedById = transactionMeta?.id;\n        }\n      }\n    });\n\n    for (const transaction of this.state.transactions) {\n      if (\n        sameNonceTransactionIds.includes(transaction.id) &&\n        transaction.status !== TransactionStatus.failed\n      ) {\n        this.setTransactionStatusDropped(transaction);\n      }\n    }\n  }\n\n  /**\n   * Method to set transaction status to dropped.\n   *\n   * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.\n   */\n  private setTransactionStatusDropped(transactionMeta: TransactionMeta) {\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      status: TransactionStatus.dropped as const,\n    };\n    this.messagingSystem.publish(`${controllerName}:transactionDropped`, {\n      transactionMeta: updatedTransactionMeta,\n    });\n    this.updateTransaction(\n      updatedTransactionMeta,\n      'TransactionController#setTransactionStatusDropped - Transaction dropped',\n    );\n    this.onTransactionStatusChange(updatedTransactionMeta);\n  }\n\n  /**\n   * Get transaction with provided actionId.\n   *\n   * @param actionId - Unique ID to prevent duplicate requests\n   * @returns the filtered transaction\n   */\n  private getTransactionWithActionId(actionId?: string) {\n    return this.state.transactions.find(\n      (transaction) => actionId && transaction.actionId === actionId,\n    );\n  }\n\n  private async waitForTransactionFinished(\n    transactionId: string,\n  ): Promise<TransactionMeta> {\n    return new Promise((resolve) => {\n      this.#internalEvents.once(`${transactionId}:finished`, (txMeta) => {\n        resolve(txMeta);\n      });\n    });\n  }\n\n  /**\n   * Updates the r, s, and v properties of a TransactionMeta object\n   * with values from a signed transaction.\n   *\n   * @param transactionMeta - The TransactionMeta object to update.\n   * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.\n   * @returns The updated TransactionMeta object.\n   */\n  private updateTransactionMetaRSV(\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ): TransactionMeta {\n    const transactionMetaWithRsv = cloneDeep(transactionMeta);\n\n    for (const key of ['r', 's', 'v'] as const) {\n      const value = signedTx[key];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      transactionMetaWithRsv[key] = add0x(value.toString(16));\n    }\n\n    return transactionMetaWithRsv;\n  }\n\n  private async getEIP1559Compatibility(networkClientId?: NetworkClientId) {\n    const currentNetworkIsEIP1559Compatible =\n      await this.getCurrentNetworkEIP1559Compatibility(networkClientId);\n\n    const currentAccountIsEIP1559Compatible =\n      await this.getCurrentAccountEIP1559Compatibility();\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n\n  private async signTransaction(\n    transactionMeta: TransactionMeta,\n    txParams: TransactionParams,\n  ): Promise<string | undefined> {\n    log('Signing transaction', txParams);\n\n    const { authorizationList, from } = txParams;\n    const finalTxParams = { ...txParams };\n\n    finalTxParams.authorizationList = await signAuthorizationList({\n      authorizationList,\n      messenger: this.messagingSystem,\n      transactionMeta,\n    });\n\n    const unsignedEthTx = prepareTransaction(\n      transactionMeta.chainId,\n      finalTxParams,\n    );\n\n    this.approvingTransactionIds.add(transactionMeta.id);\n\n    const signedTx = await new Promise<TypedTransaction>((resolve, reject) => {\n      this.sign?.(\n        unsignedEthTx,\n        from,\n        ...this.getAdditionalSignArguments(transactionMeta),\n      ).then(resolve, reject);\n\n      this.signAbortCallbacks.set(transactionMeta.id, () =>\n        reject(new Error('Signing aborted by user')),\n      );\n    });\n\n    this.signAbortCallbacks.delete(transactionMeta.id);\n\n    if (!signedTx) {\n      log('Skipping signed status as no signed transaction');\n      return undefined;\n    }\n\n    const transactionMetaFromHook = cloneDeep(transactionMeta);\n    if (!this.afterSign(transactionMetaFromHook, signedTx)) {\n      this.updateTransaction(\n        transactionMetaFromHook,\n        'TransactionController#signTransaction - Update after sign',\n      );\n\n      log('Skipping signed status based on hook');\n\n      return undefined;\n    }\n\n    const transactionMetaWithRsv = {\n      ...this.updateTransactionMetaRSV(transactionMetaFromHook, signedTx),\n      status: TransactionStatus.signed as const,\n    };\n\n    this.updateTransaction(\n      transactionMetaWithRsv,\n      'TransactionController#approveTransaction - Transaction signed',\n    );\n\n    this.onTransactionStatusChange(transactionMetaWithRsv);\n\n    const rawTx = serializeTransaction(signedTx);\n\n    const transactionMetaWithRawTx = merge({}, transactionMetaWithRsv, {\n      rawTx,\n    });\n\n    this.updateTransaction(\n      transactionMetaWithRawTx,\n      'TransactionController#approveTransaction - RawTransaction added',\n    );\n\n    return rawTx;\n  }\n\n  private onTransactionStatusChange(transactionMeta: TransactionMeta) {\n    this.messagingSystem.publish(`${controllerName}:transactionStatusUpdated`, {\n      transactionMeta,\n    });\n  }\n\n  private getNonceTrackerTransactions(\n    status: TransactionStatus,\n    address: string,\n    chainId: string,\n  ) {\n    return getAndFormatTransactionsForNonceTracker(\n      chainId,\n      address,\n      status,\n      this.state.transactions,\n    );\n  }\n\n  private onConfirmedTransaction(transactionMeta: TransactionMeta) {\n    log('Processing confirmed transaction', transactionMeta.id);\n\n    this.markNonceDuplicatesDropped(transactionMeta.id);\n\n    this.messagingSystem.publish(\n      `${controllerName}:transactionConfirmed`,\n      transactionMeta,\n    );\n\n    this.onTransactionStatusChange(transactionMeta);\n\n    // Intentional given potential duration of process.\n    this.updatePostBalance(transactionMeta).catch((error) => {\n      log('Error while updating post balance', error);\n      throw error;\n    });\n  }\n\n  private async updatePostBalance(transactionMeta: TransactionMeta) {\n    try {\n      const { networkClientId, type } = transactionMeta;\n\n      if (type !== TransactionType.swap) {\n        return;\n      }\n\n      const ethQuery = this.#getEthQuery({ networkClientId });\n\n      const { updatedTransactionMeta, approvalTransactionMeta } =\n        await updatePostTransactionBalance(transactionMeta, {\n          ethQuery,\n          getTransaction: this.getTransaction.bind(this),\n          updateTransaction: this.updateTransaction.bind(this),\n        });\n\n      this.messagingSystem.publish(\n        `${controllerName}:postTransactionBalanceUpdated`,\n        {\n          transactionMeta: updatedTransactionMeta,\n          approvalTransactionMeta,\n        },\n      );\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Error while updating post transaction balance', error);\n    }\n  }\n\n  #createNonceTracker({\n    provider,\n    blockTracker,\n    chainId,\n  }: {\n    provider: Provider;\n    blockTracker: BlockTracker;\n    chainId: Hex;\n  }): NonceTracker {\n    return new NonceTracker({\n      // TODO: Fix types\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      provider: provider as any,\n      // TODO: Fix types\n      blockTracker,\n      getPendingTransactions: this.#getNonceTrackerPendingTransactions.bind(\n        this,\n        chainId,\n      ),\n      getConfirmedTransactions: this.getNonceTrackerTransactions.bind(\n        this,\n        TransactionStatus.confirmed,\n        chainId,\n      ),\n    });\n  }\n\n  #createPendingTransactionTracker({\n    provider,\n    blockTracker,\n    chainId,\n    networkClientId,\n  }: {\n    provider: Provider;\n    blockTracker: BlockTracker;\n    chainId: Hex;\n    networkClientId: NetworkClientId;\n  }): PendingTransactionTracker {\n    const ethQuery = new EthQuery(provider);\n\n    const pendingTransactionTracker = new PendingTransactionTracker({\n      blockTracker,\n      getChainId: () => chainId,\n      getEthQuery: () => ethQuery,\n      getNetworkClientId: () => networkClientId,\n      getTransactions: () => this.state.transactions,\n      isResubmitEnabled: this.#pendingTransactionOptions.isResubmitEnabled,\n      getGlobalLock: () =>\n        this.#multichainTrackingHelper.acquireNonceLockForChainIdKey({\n          chainId,\n        }),\n      publishTransaction: (_ethQuery, transactionMeta) =>\n        this.publishTransaction(_ethQuery, transactionMeta, {\n          skipSubmitHistory: true,\n        }),\n      hooks: {\n        beforeCheckPendingTransaction:\n          this.beforeCheckPendingTransaction.bind(this),\n        beforePublish: this.beforePublish.bind(this),\n      },\n    });\n\n    this.#addPendingTransactionTrackerListeners(pendingTransactionTracker);\n\n    return pendingTransactionTracker;\n  }\n\n  readonly #checkForPendingTransactionAndStartPolling = () => {\n    this.#multichainTrackingHelper.checkForPendingTransactionAndStartPolling();\n  };\n\n  #stopAllTracking() {\n    this.#multichainTrackingHelper.stopAllTracking();\n  }\n\n  #addIncomingTransactionHelperListeners(\n    incomingTransactionHelper: IncomingTransactionHelper,\n  ) {\n    incomingTransactionHelper.hub.on(\n      'transactions',\n      this.onIncomingTransactions.bind(this),\n    );\n  }\n\n  #removePendingTransactionTrackerListeners(\n    pendingTransactionTracker: PendingTransactionTracker,\n  ) {\n    pendingTransactionTracker.hub.removeAllListeners('transaction-confirmed');\n    pendingTransactionTracker.hub.removeAllListeners('transaction-dropped');\n    pendingTransactionTracker.hub.removeAllListeners('transaction-failed');\n    pendingTransactionTracker.hub.removeAllListeners('transaction-updated');\n  }\n\n  #addPendingTransactionTrackerListeners(\n    pendingTransactionTracker: PendingTransactionTracker,\n  ) {\n    pendingTransactionTracker.hub.on(\n      'transaction-confirmed',\n      this.onConfirmedTransaction.bind(this),\n    );\n\n    pendingTransactionTracker.hub.on(\n      'transaction-dropped',\n      this.setTransactionStatusDropped.bind(this),\n    );\n\n    pendingTransactionTracker.hub.on(\n      'transaction-failed',\n      this.failTransaction.bind(this),\n    );\n\n    pendingTransactionTracker.hub.on(\n      'transaction-updated',\n      this.updateTransaction.bind(this),\n    );\n  }\n\n  #getNonceTrackerPendingTransactions(chainId: string, address: string) {\n    const standardPendingTransactions = this.getNonceTrackerTransactions(\n      TransactionStatus.submitted,\n      address,\n      chainId,\n    );\n\n    const externalPendingTransactions = this.getExternalPendingTransactions(\n      address,\n      chainId,\n    );\n    return [...standardPendingTransactions, ...externalPendingTransactions];\n  }\n\n  private async publishTransactionForRetry(\n    ethQuery: EthQuery,\n    transactionMeta: TransactionMeta,\n  ): Promise<string> {\n    try {\n      return await this.publishTransaction(ethQuery, transactionMeta);\n    } catch (error: unknown) {\n      if (this.isTransactionAlreadyConfirmedError(error as Error)) {\n        throw new Error('Previous transaction is already confirmed');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Ensures that error is a nonce issue\n   *\n   * @param error - The error to check\n   * @returns Whether or not the error is a nonce issue\n   */\n  // TODO: Replace `any` with type\n  // Some networks are returning original error in the data field\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private isTransactionAlreadyConfirmedError(error: any): boolean {\n    return (\n      error?.message?.includes('nonce too low') ||\n      error?.data?.message?.includes('nonce too low')\n    );\n  }\n\n  #getGasFeeFlows(): GasFeeFlow[] {\n    if (this.#testGasFeeFlows) {\n      return [new TestGasFeeFlow()];\n    }\n\n    return [new LineaGasFeeFlow(), new DefaultGasFeeFlow()];\n  }\n\n  #getLayer1GasFeeFlows(): Layer1GasFeeFlow[] {\n    return [new OptimismLayer1GasFeeFlow(), new ScrollLayer1GasFeeFlow()];\n  }\n\n  #updateTransactionInternal(\n    {\n      transactionId,\n      note,\n      skipHistory,\n      skipValidation,\n      skipResimulateCheck,\n    }: {\n      transactionId: string;\n      note?: string;\n      skipHistory?: boolean;\n      skipValidation?: boolean;\n      skipResimulateCheck?: boolean;\n    },\n    callback: (transactionMeta: TransactionMeta) => TransactionMeta | void,\n  ): Readonly<TransactionMeta> {\n    let resimulateResponse: ResimulateResponse | undefined;\n\n    this.update((state) => {\n      const index = state.transactions.findIndex(\n        ({ id }) => id === transactionId,\n      );\n\n      let transactionMeta = state.transactions[index];\n\n      const originalTransactionMeta = cloneDeep(transactionMeta);\n\n      transactionMeta = callback(transactionMeta) ?? transactionMeta;\n\n      if (skipValidation !== true) {\n        transactionMeta.txParams = normalizeTransactionParams(\n          transactionMeta.txParams,\n        );\n\n        validateTxParams(transactionMeta.txParams);\n      }\n\n      if (!skipResimulateCheck && this.#isSimulationEnabled()) {\n        resimulateResponse = shouldResimulate(\n          originalTransactionMeta,\n          transactionMeta,\n        );\n      }\n\n      const shouldSkipHistory = this.isHistoryDisabled || skipHistory;\n\n      if (!shouldSkipHistory) {\n        transactionMeta = updateTransactionHistory(\n          transactionMeta,\n          note ?? 'Transaction updated',\n        );\n      }\n      state.transactions[index] = transactionMeta;\n    });\n\n    const transactionMeta = this.getTransaction(\n      transactionId,\n    ) as TransactionMeta;\n\n    if (resimulateResponse?.resimulate) {\n      this.#updateSimulationData(transactionMeta, {\n        blockTime: resimulateResponse.blockTime,\n      }).catch((error) => {\n        log('Error during re-simulation', error);\n        throw error;\n      });\n    }\n\n    return transactionMeta;\n  }\n\n  async #updateFirstTimeInteraction(\n    transactionMeta: TransactionMeta,\n    {\n      traceContext,\n    }: {\n      traceContext?: TraceContext;\n    } = {},\n  ) {\n    if (!this.#isFirstTimeInteractionEnabled()) {\n      return;\n    }\n\n    const {\n      chainId,\n      id: transactionId,\n      txParams: { to, from },\n    } = transactionMeta;\n\n    const request: GetAccountAddressRelationshipRequest = {\n      chainId: hexToNumber(chainId),\n      to: to as string,\n      from,\n    };\n\n    validateParamTo(to);\n\n    const existingTransaction = this.state.transactions.find(\n      (tx) =>\n        tx.chainId === chainId &&\n        tx.txParams.from === from &&\n        tx.txParams.to === to &&\n        tx.id !== transactionId,\n    );\n\n    // Check if there is an existing transaction with the same from, to, and chainId\n    // else we continue to check the account address relationship from API\n    if (existingTransaction) {\n      return;\n    }\n\n    try {\n      const { count } = await this.#trace(\n        { name: 'Account Address Relationship', parentContext: traceContext },\n        () => getAccountAddressRelationship(request),\n      );\n\n      const isFirstTimeInteraction =\n        count === undefined ? undefined : count === 0;\n\n      const finalTransactionMeta = this.getTransaction(transactionId);\n\n      /* istanbul ignore if */\n      if (!finalTransactionMeta) {\n        log(\n          'Cannot update first time interaction as transaction not found',\n          transactionId,\n        );\n        return;\n      }\n\n      this.#updateTransactionInternal(\n        {\n          transactionId,\n          note: 'TransactionController#updateFirstInteraction - Update first time interaction',\n        },\n        (txMeta) => {\n          txMeta.isFirstTimeInteraction = isFirstTimeInteraction;\n        },\n      );\n\n      log('Updated first time interaction', transactionId, {\n        isFirstTimeInteraction,\n      });\n    } catch (error) {\n      log(\n        'Error fetching account address relationship, skipping first time interaction update',\n        error,\n      );\n    }\n  }\n\n  async #updateSimulationData(\n    transactionMeta: TransactionMeta,\n    {\n      blockTime,\n      traceContext,\n    }: {\n      blockTime?: number;\n      traceContext?: TraceContext;\n    } = {},\n  ) {\n    const {\n      id: transactionId,\n      chainId,\n      txParams,\n      simulationData: prevSimulationData,\n    } = transactionMeta;\n\n    const { from, to, value, data } = txParams;\n\n    let simulationData: SimulationData = {\n      error: {\n        code: SimulationErrorCode.Disabled,\n        message: 'Simulation disabled',\n      },\n      tokenBalanceChanges: [],\n    };\n\n    if (this.#isSimulationEnabled()) {\n      simulationData = await this.#trace(\n        { name: 'Simulate', parentContext: traceContext },\n        () =>\n          getSimulationData(\n            {\n              chainId,\n              from: from as Hex,\n              to: to as Hex,\n              value: value as Hex,\n              data: data as Hex,\n            },\n            {\n              blockTime,\n            },\n          ),\n      );\n\n      if (\n        blockTime &&\n        prevSimulationData &&\n        hasSimulationDataChanged(prevSimulationData, simulationData)\n      ) {\n        simulationData = {\n          ...simulationData,\n          isUpdatedAfterSecurityCheck: true,\n        };\n      }\n    }\n\n    const finalTransactionMeta = this.getTransaction(transactionId);\n\n    /* istanbul ignore if */\n    if (!finalTransactionMeta) {\n      log(\n        'Cannot update simulation data as transaction not found',\n        transactionId,\n        simulationData,\n      );\n\n      return;\n    }\n\n    this.#updateTransactionInternal(\n      {\n        transactionId,\n        note: 'TransactionController#updateSimulationData - Update simulation data',\n        skipResimulateCheck: Boolean(blockTime),\n      },\n      (txMeta) => {\n        txMeta.simulationData = simulationData;\n      },\n    );\n\n    log('Updated simulation data', transactionId, simulationData);\n  }\n\n  #onGasFeePollerTransactionUpdate({\n    transactionId,\n    gasFeeEstimates,\n    gasFeeEstimatesLoaded,\n    layer1GasFee,\n  }: {\n    transactionId: string;\n    gasFeeEstimates?: GasFeeEstimates;\n    gasFeeEstimatesLoaded?: boolean;\n    layer1GasFee?: Hex;\n  }) {\n    this.#updateTransactionInternal(\n      { transactionId, skipHistory: true },\n      (txMeta) => {\n        if (gasFeeEstimates) {\n          txMeta.gasFeeEstimates = gasFeeEstimates;\n        }\n\n        if (gasFeeEstimatesLoaded !== undefined) {\n          txMeta.gasFeeEstimatesLoaded = gasFeeEstimatesLoaded;\n        }\n\n        if (layer1GasFee) {\n          txMeta.layer1GasFee = layer1GasFee;\n        }\n      },\n    );\n  }\n\n  #getSelectedAccount() {\n    return this.messagingSystem.call('AccountsController:getSelectedAccount');\n  }\n\n  #updateSubmitHistory(transactionMeta: TransactionMeta, hash: string): void {\n    const { chainId, networkClientId, origin, rawTx, txParams } =\n      transactionMeta;\n\n    const { networkConfigurationsByChainId } = this.getNetworkState();\n    const networkConfiguration = networkConfigurationsByChainId[chainId as Hex];\n\n    const endpoint = networkConfiguration?.rpcEndpoints.find(\n      (currentEndpoint) => currentEndpoint.networkClientId === networkClientId,\n    );\n\n    const networkUrl = endpoint?.url;\n    const networkType = endpoint?.name ?? networkClientId;\n\n    const submitHistoryEntry: SubmitHistoryEntry = {\n      chainId,\n      hash,\n      networkType,\n      networkUrl,\n      origin,\n      rawTransaction: rawTx as string,\n      time: Date.now(),\n      transaction: txParams,\n    };\n\n    log('Updating submit history', submitHistoryEntry);\n\n    this.update((state) => {\n      const { submitHistory } = state;\n\n      if (submitHistory.length === SUBMIT_HISTORY_LIMIT) {\n        submitHistory.pop();\n      }\n\n      submitHistory.unshift(submitHistoryEntry);\n    });\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"TransactionController.cjs","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAYA,+DAA2D;AAC3D,iEAKoC;AAEpC,oEAA2C;AAe3C,qEAAiE;AAKjE,2DAAuD;AACvD,qDAA6E;AAE7E,2CAAqD;AACrD,6CAAoC;AACpC,kEAAkE;AAClE,sDAAsD;AACtD,mCAAsC;AACtC,mCAA8E;AAC9E,+BAAoC;AAEpC,yDAG4B;AAC5B,yEAAkE;AAClE,qEAA8D;AAC9D,uFAAgF;AAChF,mFAA4E;AAC5E,mEAA4D;AAC5D,yGAAkG;AAClG,6DAAsD;AAEtD,uFAAgF;AAChF,qEAA8D;AAC9D,qFAA8E;AAC9E,uFAAgF;AAChF,yCAAgD;AAoBhD,uCAKiB;AAEjB,iDAAwD;AACxD,6EAAqF;AACrF,yCAAmE;AACnE,mDAAiD;AACjD,mDAAiD;AACjD,iDAGyB;AACzB,yEAGqC;AACrC,6CAGuB;AACvB,iDAA2E;AAC3E,6CAAwE;AACxE,uDAAuD;AACvD,6CAGuB;AACvB,mEAAoE;AACpE,6CAOuB;AACvB,uDAI4B;AAE5B;;;GAGG;AACH,MAAM,QAAQ,GAAG;IACf,YAAY,EAAE;QACZ,OAAO,EAAE,IAAI;QACb,SAAS,EAAE,KAAK;KACjB;IACD,UAAU,EAAE;QACV,OAAO,EAAE,IAAI;QACb,SAAS,EAAE,KAAK;KACjB;IACD,uBAAuB,EAAE;QACvB,OAAO,EAAE,IAAI;QACb,SAAS,EAAE,KAAK;KACjB;IACD,aAAa,EAAE;QACb,OAAO,EAAE,IAAI;QACb,SAAS,EAAE,KAAK;KACjB;CACF,CAAC;AAEF,MAAM,oBAAoB,GAAG,GAAG,CAAC;AAwDjC;;GAEG;AACU,QAAA,WAAW,GAAG,GAAG,CAAC;AAE/B;;GAEG;AACU,QAAA,aAAa,GAAG,GAAG,CAAC;AA4GjC;;GAEG;AACH,MAAM,cAAc,GAAG,uBAAuB,CAAC;AAwN/C;;GAEG;AACH,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,sCAAqB,CAAA;IACrB,6CAA4B,CAAA;IAC5B,gFAA+D,CAAA;AACjE,CAAC,EAJW,aAAa,6BAAb,aAAa,QAIxB;AAED;;;;GAIG;AACH,SAAS,oCAAoC;IAC3C,OAAO;QACL,UAAU,EAAE,EAAE;QACd,YAAY,EAAE,EAAE;QAChB,uBAAuB,EAAE,EAAE;QAC3B,aAAa,EAAE,EAAE;KAClB,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAa,qBAAsB,SAAQ,gCAI1C;IAsFS,eAAe,CACrB,eAAgC,EAChC,KAAY,EACZ,QAAiB;QAEjB,IAAI,kBAAmC,CAAC;QAExC,IAAI;YACF,kBAAkB,GAAG,uBAAA,IAAI,0FAA2B,MAA/B,IAAI,EACvB;gBACE,aAAa,EAAE,eAAe,CAAC,EAAE;gBACjC,IAAI,EAAE,oFAAoF;gBAC1F,cAAc,EAAE,IAAI;aACrB,EACD,CAAC,oBAAoB,EAAE,EAAE;gBACvB,oBAAoB,CAAC,MAAM,GAAG,yBAAiB,CAAC,MAAM,CAAC;gBAGrD,oBAGD,CAAC,KAAK,GAAG,IAAA,wBAAgB,EAAC,KAAK,CAAC,CAAC;YACpC,CAAC,CACF,CAAC;SACH;QAAC,OAAO,GAAY,EAAE;YACrB,IAAA,sBAAG,EAAC,sCAAsC,EAAE,GAAG,CAAC,CAAC;YAEjD,kBAAkB,GAAG;gBACnB,GAAG,eAAe;gBAClB,MAAM,EAAE,yBAAiB,CAAC,MAAM;gBAChC,KAAK,EAAE,IAAA,wBAAgB,EAAC,KAAK,CAAC;aAC/B,CAAC;SACH;QAED,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,cAAc,oBAAoB,EAAE;YAClE,QAAQ;YACR,KAAK,EAAE,KAAK,CAAC,OAAO;YACpB,eAAe,EAAE,kBAAkB;SACpC,CAAC,CAAC;QAEH,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,CAAC;QAEnD,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,sBAAsB,EACvC,kBAAkB,CACnB,CAAC;QAEF,uBAAA,IAAI,6CAAgB,CAAC,IAAI,CACvB,GAAG,eAAe,CAAC,EAAE,WAAW,EAChC,kBAAkB,CACnB,CAAC;IACJ,CAAC;IAaD;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;IACH,YAAY,EACV,cAAc,EACd,sBAAsB,EACtB,YAAY,EACZ,qCAAqC,EACrC,qCAAqC,EACrC,8BAA8B,EAC9B,kBAAkB,EAClB,wBAAwB,EACxB,eAAe,EACf,oBAAoB,EACpB,eAAe,EACf,oBAAoB,GAAG,EAAE,EACzB,6BAA6B,EAC7B,mBAAmB,EACnB,SAAS,EACT,mBAAmB,GAAG,EAAE,EACxB,uBAAuB,EACvB,IAAI,EACJ,KAAK,EACL,eAAe,EACf,KAAK,EACL,uBAAuB,GAAG,EAAE,EAC5B,KAAK,GACwB;QAC7B,KAAK,CAAC;YACJ,IAAI,EAAE,cAAc;YACpB,QAAQ;YACR,SAAS;YACT,KAAK,EAAE;gBACL,GAAG,oCAAoC,EAAE;gBACzC,GAAG,KAAK;aACT;SACF,CAAC,CAAC;;QAlNI,gDAAkB,IAAI,qBAAY,EAAE,EAAC;QAQ7B,4BAAuB,GAAgB,IAAI,GAAG,EAAE,CAAC;QAEzD,0DAAoC;QAE5B,UAAK,GAAG,IAAI,mBAAK,EAAE,CAAC;QA2B5B,6DAAyC,IAAI,GAAG,EAAE,EAAC;QAEnD,mEAAsD;QAItD,oEAEP;QAIO,mEAAsD;QAE9C,uBAAkB,GAA4B,IAAI,GAAG,EAAE,CAAC;QAEhE,+CAAsB;QAEtB,iEAAiC;QAEjC,uEAA8C;QAE9C,6DAAoC;QAEpC,yDAA0B;QA2E1B,kEAAoD;QA2jFpD,2EAA6C,GAAG,EAAE;YACzD,uBAAA,IAAI,uDAA0B,CAAC,yCAAyC,EAAE,CAAC;QAC7E,CAAC,EAAC;QAn/EA,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,yBAAyB,GAAG,sBAAsB,IAAI,KAAK,CAAC;QACjE,IAAI,CAAC,iBAAiB,GAAG,cAAc,IAAI,KAAK,CAAC;QACjD,IAAI,CAAC,eAAe,GAAG,YAAY,IAAI,KAAK,CAAC;QAC7C,uBAAA,IAAI,wDACF,6BAA6B,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAA,CAAC;QAChD,uBAAA,IAAI,8CAAwB,mBAAmB,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,MAAA,CAAC;QACjE,IAAI,CAAC,eAAe,GAAG,eAAe,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC;QACpE,IAAI,CAAC,qCAAqC;YACxC,qCAAqC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QACzE,IAAI,CAAC,qCAAqC;YACxC,qCAAqC,CAAC;QACxC,IAAI,CAAC,kBAAkB;YACrB,kBAAkB,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAiB,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,8BAA8B;YACjC,8BAA8B,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QAC/C,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACvD,uBAAA,IAAI,qDAA+B,oBAAoB,MAAA,CAAC;QACxD,uBAAA,IAAI,oDAA8B,mBAAmB,MAAA,CAAC;QACtD,uBAAA,IAAI,kDAA4B,uBAAuB,MAAA,CAAC;QACxD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,uBAAA,IAAI,0CAAoB,eAAe,KAAK,IAAI,MAAA,CAAC;QACjD,uBAAA,IAAI,gCAAU,KAAK,IAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAmB,MAAA,CAAC;QAErE,IAAI,CAAC,SAAS,GAAG,KAAK,EAAE,SAAS,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,6BAA6B;YAChC,KAAK,EAAE,6BAA6B;gBACpC,0BAA0B;gBAC1B,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;QACf,IAAI,CAAC,aAAa,GAAG,KAAK,EAAE,aAAa,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;QAC1D,IAAI,CAAC,0BAA0B;YAC7B,KAAK,EAAE,0BAA0B,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO;YACV,KAAK,EAAE,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;QAE5E,MAAM,4BAA4B,GAAG,CAAC,OAAY,EAAE,EAAE;YACpD,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAC9B,gDAAgD,EAChD,OAAO,CACR,CAAC;QACJ,CAAC,CAAC;QAEF,uBAAA,IAAI,mDAA6B,IAAI,mDAAwB,CAAC;YAC5D,4BAA4B;YAC5B,oBAAoB,EAAE,CAAC,CAAC,eAAgC,EAAE,EAAE;gBAC1D,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAC9B,wCAAwC,EACxC,eAAe,CAChB,CAAC;YACJ,CAAC,CAA8C;YAC/C,wBAAwB;YACxB,wCAAwC,EACtC,uBAAA,IAAI,yGAA0C,CAAC,IAAI,CAAC,IAAI,CAAC;YAC3D,kBAAkB,EAAE,uBAAA,IAAI,mFAAoB,CAAC,IAAI,CAAC,IAAI,CAAC;YACvD,+BAA+B,EAC7B,uBAAA,IAAI,gGAAiC,CAAC,IAAI,CAAC,IAAI,CAAC;YAClD,oBAAoB,EAAE,CAAC,QAAQ,EAAE,EAAE;gBACjC,IAAI,CAAC,eAAe,CAAC,SAAS,CAC5B,+BAA+B,EAC/B,QAAQ,CACT,CAAC;YACJ,CAAC;SACF,CAAC,MAAA,CAAC;QACH,uBAAA,IAAI,uDAA0B,CAAC,UAAU,EAAE,CAAC;QAE5C,IAAI,CAAC,WAAW,GAAG,uBAAA,IAAI,+EAAgB,MAApB,IAAI,CAAkB,CAAC;QAC1C,IAAI,CAAC,iBAAiB,GAAG,uBAAA,IAAI,qFAAsB,MAA1B,IAAI,CAAwB,CAAC;QAEtD,MAAM,YAAY,GAAG,IAAI,2BAAY,CAAC;YACpC,4BAA4B;YAC5B,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,4BAA4B,EAAE,IAAI,CAAC,kBAAkB;YACrD,WAAW,EAAE,CAAC,eAAe,EAAE,EAAE,CAAC,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc,EAAE,eAAe,EAAE,CAAC;YACxE,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY;YAC9C,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,aAAa,EAAE,CAAC,QAAQ,EAAE,EAAE;gBAC1B,IAAI,CAAC,eAAe,CAAC,SAAS,CAC5B,mCAAmC,EACnC,QAAQ,CACT,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QAEH,YAAY,CAAC,GAAG,CAAC,EAAE,CACjB,qBAAqB,EACrB,uBAAA,IAAI,gGAAiC,CAAC,IAAI,CAAC,IAAI,CAAC,CACjD,CAAC;QAEF,uBAAA,IAAI,2CAAqB,IAAI,mCAAgB,CAAC;YAC5C,WAAW,EAAE,CAAC,eAAe,EAAE,EAAE,CAAC,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc,EAAE,eAAe,EAAE,CAAC;YACxE,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU;SACtC,CAAC,MAAA,CAAC;QAEH,uBAAA,IAAI,+CAAkB,CAAC,GAAG,CAAC,EAAE,CAC3B,QAAQ,EACR,CAAC,EAAE,cAAc,EAAE,UAAU,EAAE,EAAE,EAAE;YACjC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE;gBACrB,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,UAAU,CAAC;YACjD,CAAC,CAAC,CAAC;QACL,CAAC,CACF,CAAC;QAEF,MAAM,WAAW,GAAG,CAAC,EAA4C,EAAE,EAAE;YACnE,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE;gBACrB,EAAE,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,uBAAA,IAAI,oDAA8B,IAAI,qDAAyB,CAAC;YAC9D,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,uBAAuB;YAClD,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,uBAAA,IAAI,0DAA6B,CAAC;YACzD,iBAAiB,EAAE,GAAG,EAAE,CAAC,uBAAA,IAAI,mFAAoB,MAAxB,IAAI,CAAsB;YACnD,oBAAoB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY;YACnD,qBAAqB,EACnB,uBAAA,IAAI,yDAA4B,CAAC,qBAAqB;YACxD,SAAS,EAAE,uBAAA,IAAI,yDAA4B,CAAC,SAAS;YACrD,kBAAkB,EAAE,uBAAA,IAAI,yDAA4B,CAAC,kBAAkB;YACvE,uBAAuB,EAAE,IAAI,uEAAkC,EAAE;YACjE,gBAAgB,EAAE,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC;YAC1D,WAAW;YACX,kBAAkB,EAAE,uBAAA,IAAI,yDAA4B,CAAC,kBAAkB;SACxE,CAAC,MAAA,CAAC;QAEH,uBAAA,IAAI,sGAAuC,MAA3C,IAAI,EACF,uBAAA,IAAI,wDAA2B,CAChC,CAAC;QAEF,4CAA4C;QAC5C,oEAAoE;QACpE,IAAI,CAAC,eAAe,CAAC,SAAS,CAC5B,mCAAmC,EACnC,uBAAA,IAAI,wEAA2C,CAChD,CAAC;QAEF,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,uBAAA,IAAI,wEAA2C,MAA/C,IAAI,CAA6C,CAAC;IACpD,CAAC;IAED;;OAEG;IACH,OAAO;QACL,uBAAA,IAAI,gFAAiB,MAArB,IAAI,CAAmB,CAAC;IAC1B,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,gBAAgB,CACpB,cAAsB,EACtB,eAAgC;QAEhC,OAAO,uBAAA,IAAI,+CAAkB,CAAC,MAAM,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;IACxE,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,KAAK,CAAC,cAAc,CAClB,QAA2B,EAC3B,OAeC;QAED,IAAA,sBAAG,EAAC,oBAAoB,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAE7C,MAAM,EACJ,QAAQ,EACR,iBAAiB,EACjB,MAAM,EACN,eAAe,EACf,MAAM,EACN,eAAe,EACf,qBAAqB,EACrB,eAAe,EACf,KAAK,GAAG,EAAE,EACV,YAAY,EACZ,IAAI,GACL,GAAG,OAAO,CAAC;QAEZ,QAAQ,GAAG,IAAA,kCAA0B,EAAC,QAAQ,CAAC,CAAC;QAEhD,IAAI,CAAC,uBAAA,IAAI,uDAA0B,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;YACxD,MAAM,IAAI,KAAK,CACb,8BAA8B,eAAyB,EAAE,CAC1D,CAAC;SACH;QAED,MAAM,kBAAkB,GACtB,MAAM,KAAK,SAAS;YAClB,CAAC,CAAC,SAAS;YACX,CAAC,CAAC,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC,MAAM,CAAC,CAAC;QAEhD,MAAM,eAAe,GAAG,uBAAA,IAAI,mFAAoB,MAAxB,IAAI,CAAsB,CAAC,OAAO,CAAC;QAE3D,MAAM,IAAA,sCAAyB,EAAC;YAC9B,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,MAAM;YACN,kBAAkB;YAClB,eAAe;YACf,QAAQ;SACT,CAAC,CAAC;QAEH,MAAM,mBAAmB,GACvB,MAAM,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,CAAC;QAEtD,IAAA,6BAAgB,EAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QAEhD,MAAM,oBAAoB,GAAG,IAAI,CAAC,4BAA4B,CAC5D,QAAQ,EACR,MAAM,CACP,CAAC;QAEF,MAAM,OAAO,GAAG,uBAAA,IAAI,2EAAY,MAAhB,IAAI,EAAa,eAAe,CAAC,CAAC;QAElD,MAAM,QAAQ,GAAG,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc;YACjC,eAAe;SAChB,CAAC,CAAC;QAEH,MAAM,eAAe,GACnB,IAAI,IAAI,CAAC,MAAM,IAAA,2CAAwB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;QAEpE,MAAM,uBAAuB,GAAG,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;QAE1E,6HAA6H;QAC7H,IAAI,oBAAoB,GAAG,uBAAuB;YAChD,CAAC,CAAC,IAAA,kBAAS,EAAC,uBAAuB,CAAC;YACpC,CAAC,CAAC;gBACE,iEAAiE;gBACjE,QAAQ;gBACR,OAAO;gBACP,oBAAoB;gBACpB,iBAAiB;gBACjB,EAAE,EAAE,IAAA,SAAM,GAAE;gBACZ,sBAAsB,EAAE,SAAS;gBACjC,eAAe;gBACf,MAAM;gBACN,qBAAqB;gBACrB,MAAM,EAAE,yBAAiB,CAAC,UAAmB;gBAC7C,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;gBAChB,QAAQ;gBACR,IAAI,EAAE,eAAe;gBACrB,kBAAkB,EAAE,KAAK;gBACzB,oBAAoB,EAAE,KAAK;aAC5B,CAAC;QAEN,MAAM,uBAAA,IAAI,oCAAO,MAAX,IAAI,EACR,EAAE,IAAI,EAAE,yBAAyB,EAAE,aAAa,EAAE,YAAY,EAAE,EAChE,CAAC,OAAO,EAAE,EAAE,CACV,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,EAAE;YAC7C,YAAY,EAAE,OAAO;SACtB,CAAC,CACL,CAAC;QAEF,+DAA+D;QAC/D,IAAI,CAAC,uBAAuB,EAAE;YAC5B,iCAAiC;YACjC,IAAI,MAAM,IAAI,IAAI,CAAC,uBAAuB,EAAE;gBAC1C,MAAM,wBAAwB,GAAG,MAAM,IAAI,CAAC,uBAAuB,CACjE,oBAAoB,EACpB,MAAM,CACP,CAAC;gBACF,oBAAoB,CAAC,wBAAwB;oBAC3C,wBAAwB,CAAC;aAC5B;YAED,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;gBACnC,oBAAoB,CAAC,eAAe,GAAG,eAAe,IAAI,EAAE,CAAC;aAC9D;YACD,uBAAuB;YACvB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;gBAC3B,oBAAoB,GAAG,IAAA,mCAAyB,EAAC,oBAAoB,CAAC,CAAC;aACxE;YAED,oBAAoB,GAAG,IAAA,8BAAsB,EAC3C,oBAAoB,EACpB,eAAe,EACf,KAAK,EACL;gBACE,eAAe,EAAE,IAAI,CAAC,eAAe;gBACrC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;gBACpD,SAAS,EAAE,IAAI,CAAC,eAAe;aAChC,CACF,CAAC;YAEF,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;YAEvC,IAAI,eAAe,KAAK,KAAK,EAAE;gBAC7B,IAAI,uBAAA,IAAI,kDAAqB,MAAzB,IAAI,CAAuB,EAAE;oBAC/B,uBAAA,IAAI,qFAAsB,MAA1B,IAAI,EAAuB,oBAAoB,EAAE;wBAC/C,YAAY;qBACb,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;wBACjB,IAAA,sBAAG,EAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;wBACnD,MAAM,KAAK,CAAC;oBACd,CAAC,CAAC,CAAC;iBACJ;gBACD,uBAAA,IAAI,2FAA4B,MAAhC,IAAI,EAA6B,oBAAoB,EAAE;oBACrD,YAAY;iBACb,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;oBACjB,IAAA,sBAAG,EAAC,mDAAmD,EAAE,KAAK,CAAC,CAAC;gBAClE,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,IAAA,sBAAG,EACD,yEAAyE,CAC1E,CAAC;aACH;YAED,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,6BAA6B,EAC9C,oBAAoB,CACrB,CAAC;SACH;QAED,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE;gBACjD,UAAU,EAAE,OAAO,CAAC,uBAAuB,CAAC;gBAC5C,eAAe;gBACf,QAAQ;gBACR,YAAY;aACb,CAAC;YACF,eAAe,EAAE,oBAAoB;SACtC,CAAC;IACJ,CAAC;IAED,+BAA+B,CAAC,QAAe;QAC7C,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAC3B,uBAAA,IAAI,0DAA6B,CAAC,GAAG,CAAC,OAAO,CAAC,CAC/C,CAAC;QAEF,uBAAA,IAAI,wDAA2B,CAAC,KAAK,EAAE,CAAC;IAC1C,CAAC;IAED,8BAA8B,CAAC,QAAgB;QAC7C,QAAQ,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAC5B,uBAAA,IAAI,0DAA6B,CAAC,MAAM,CAAC,OAAO,CAAC,CAClD,CAAC;QAEF,IAAI,CAAC,QAAQ,EAAE;YACb,uBAAA,IAAI,0DAA6B,CAAC,KAAK,EAAE,CAAC;SAC3C;QAED,IAAI,uBAAA,IAAI,0DAA6B,CAAC,IAAI,KAAK,CAAC,EAAE;YAChD,uBAAA,IAAI,wDAA2B,CAAC,IAAI,EAAE,CAAC;SACxC;IACH,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,QAAe;QAC9C,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAC3B,uBAAA,IAAI,0DAA6B,CAAC,GAAG,CAAC,OAAO,CAAC,CAC/C,CAAC;QAEF,MAAM,uBAAA,IAAI,wDAA2B,CAAC,MAAM,EAAE,CAAC;IACjD,CAAC;IAED;;;;;;;;;OASG;IACH,KAAK,CAAC,eAAe,CACnB,aAAqB,EACrB,SAAkD,EAClD,EACE,gBAAgB,EAChB,QAAQ,MAC4C,EAAE;QAExD,OAAO,MAAM,uBAAA,IAAI,iFAAkB,MAAtB,IAAI,EAAmB;YAClC,QAAQ;YACR,gBAAgB;YAChB,SAAS;YACT,KAAK,EAAE,QAAQ;YACf,IAAI,EAAE,mBAAW;YACjB,aAAa;YACb,eAAe,EAAE,uBAAe,CAAC,MAAM;YACvC,wBAAwB,EAAE,CAAC,QAAQ,EAAE,EAAE;gBACrC,OAAO,QAAQ,CAAC,IAAI,CAAC;gBACrB,QAAQ,CAAC,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC;gBAC5B,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACzB,CAAC;YACD,WAAW,EAAE,CAAC,kBAAkB,EAAE,EAAE;gBAClC,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,sBAAsB,EACvC,kBAAkB,CACnB,CAAC;gBAEF,uBAAA,IAAI,6CAAgB,CAAC,IAAI,CACvB,GAAG,kBAAkB,CAAC,EAAE,WAAW,EACnC,kBAAkB,CACnB,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;OAQG;IACH,KAAK,CAAC,kBAAkB,CACtB,aAAqB,EACrB,SAAkD,EAClD,EACE,QAAQ,EACR,gBAAgB,MACoC,EAAE;QAExD,OAAO,MAAM,uBAAA,IAAI,iFAAkB,MAAtB,IAAI,EAAmB;YAClC,QAAQ;YACR,gBAAgB;YAChB,SAAS;YACT,KAAK,EAAE,UAAU;YACjB,IAAI,EAAE,qBAAa;YACnB,aAAa;YACb,eAAe,EAAE,uBAAe,CAAC,KAAK;YACtC,WAAW,EAAE,CAAC,kBAAkB,EAAE,EAAE;gBAClC,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,0BAA0B,EAC3C,kBAAkB,CACnB,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IA2HD;;;;;;OAMG;IACH,KAAK,CAAC,WAAW,CACf,WAA8B,EAC9B,eAAgC;QAEhC,MAAM,QAAQ,GAAG,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc;YACjC,eAAe;SAChB,CAAC,CAAC;QAEH,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,GAAG,MAAM,IAAA,iBAAW,EACzD,WAAW,EACX,QAAQ,CACT,CAAC;QAEF,OAAO,EAAE,GAAG,EAAE,YAAY,EAAE,eAAe,EAAE,CAAC;IAChD,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,mBAAmB,CACvB,WAA8B,EAC9B,UAAkB,EAClB,eAAgC;QAEhC,MAAM,QAAQ,GAAG,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc;YACjC,eAAe;SAChB,CAAC,CAAC;QAEH,MAAM,EAAE,aAAa,EAAE,YAAY,EAAE,eAAe,EAAE,GAAG,MAAM,IAAA,iBAAW,EACxE,WAAW,EACX,QAAQ,CACT,CAAC;QAEF,MAAM,GAAG,GAAG,IAAA,kBAAY,EAAC,YAAY,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;QAElE,OAAO;YACL,GAAG;YACH,eAAe;SAChB,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,iBAAiB,CAAC,eAAgC,EAAE,IAAY;QAC9D,MAAM,EAAE,EAAE,EAAE,aAAa,EAAE,GAAG,eAAe,CAAC;QAE9C,uBAAA,IAAI,0FAA2B,MAA/B,IAAI,EAA4B,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;YAC9D,GAAG,eAAe;SACnB,CAAC,CAAC,CAAC;IACN,CAAC;IAED;;;;;OAKG;IACH,2BAA2B,CACzB,aAAqB,EACrB,qBAA4C;QAE5C,IAAI,CAAC,qBAAqB,EAAE;YAC1B,MAAM,IAAI,KAAK,CACb,uEAAuE,CACxE,CAAC;SACH;QACD,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CACb,wEAAwE,CACzE,CAAC;SACH;QACD,MAAM,sBAAsB,GAAG;YAC7B,GAAG,eAAe;YAClB,qBAAqB;SACtB,CAAC;QACF,IAAI,CAAC,iBAAiB,CACpB,sBAAsB,EACtB,GAAG,cAAc,8DAA8D,CAChF,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,gBAAgB,CAAC,EACf,OAAO,EACP,OAAO,MAIL,EAAE;QACJ,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;gBACpB,KAAK,CAAC,YAAY,GAAG,EAAE,CAAC;YAC1B,CAAC,CAAC,CAAC;YAEH,OAAO;SACR;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CACpD,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE,EAAE;YACnC,MAAM,iBAAiB,GAAG,CAAC,OAAO,IAAI,OAAO,KAAK,SAAS,CAAC;YAE5D,IAAI,CAAC,iBAAiB,EAAE;gBACtB,OAAO,IAAI,CAAC;aACb;YAED,MAAM,iBAAiB,GACrB,CAAC,OAAO,IAAI,QAAQ,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,OAAO,CAAC,WAAW,EAAE,CAAC;YAErE,OAAO,CAAC,iBAAiB,CAAC;QAC5B,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,0BAA0B,CAC9B,eAAgC,EAChC,kBAAsC,EACtC,aAAkB;QAElB,wDAAwD;QACxD,MAAM,kBAAkB,GAAG,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;QAExE,IAAI;YACF,MAAM,aAAa,GAAG,kBAAkB,CAAC,EAAE,CAAC;YAE5C,kEAAkE;YAClE,MAAM,sBAAsB,GAAG;gBAC7B,GAAG,kBAAkB;gBACrB,MAAM,EAAE,yBAAiB,CAAC,SAAkB;gBAC5C,SAAS,EAAE,kBAAkB;aAC9B,CAAC;YACF,IAAI,aAAa,EAAE;gBACjB,sBAAsB,CAAC,aAAa,GAAG,aAAa,CAAC;aACtD;YAED,oFAAoF;YACpF,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;YAE/C,qFAAqF;YACrF,IAAI,CAAC,iBAAiB,CACpB,sBAAsB,EACtB,GAAG,cAAc,wDAAwD,CAC1E,CAAC;YACF,IAAI,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,CAAC;YAEvD,mDAAmD;YACnD,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC7D,IAAA,sBAAG,EAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;gBAChD,MAAM,KAAK,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,uBAAuB,EACxC,sBAAsB,CACvB,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,wCAAwC,EAAE,KAAK,CAAC,CAAC;SAChE;IACH,CAAC;IAED;;;;;;;OAOG;IACH,gCAAgC,CAC9B,aAAqB,EACrB,4BAAoC,EACpC,oBAA4C;QAE5C,IAAI,IAAI,CAAC,yBAAyB,EAAE;YAClC,MAAM,IAAI,KAAK,CACb,sEAAsE,CACvE,CAAC;SACH;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAE3D,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CACb,kEAAkE,CACnE,CAAC;SACH;QAED,IAAA,uCAA+B,EAC7B,eAAe,EACf,kCAAkC,CACnC,CAAC;QAEF,MAAM,eAAe,GAAG,eAAe,CAAC,eAAe,IAAI,EAAE,CAAC;QAC9D,IAAI,4BAA4B,KAAK,eAAe,CAAC,MAAM,EAAE;YAC3D,MAAM,sBAAsB,GAAG;gBAC7B,GAAG,eAAe;gBAClB,eAAe,EAAE,CAAC,GAAG,eAAe,EAAE,GAAG,oBAAoB,CAAC;aAC/D,CAAC;YACF,IAAI,CAAC,iBAAiB,CACpB,sBAAsB,EACtB,GAAG,cAAc,6DAA6D,CAC/E,CAAC;SACH;QAED,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAoB,CAAC;IAC/D,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACH,wBAAwB,CACtB,aAAqB,EACrB,EACE,mBAAmB,EACnB,YAAY,EACZ,iBAAiB,EACjB,GAAG,EACH,QAAQ,EACR,QAAQ,EACR,oBAAoB,EACpB,YAAY,EACZ,mBAAmB,EACnB,kBAAkB,EAClB,YAAY,GAab;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAE3D,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CACb,4DAA4D,CAC7D,CAAC;SACH;QAED,IAAA,uCAA+B,EAC7B,eAAe,EACf,0BAA0B,CAC3B,CAAC;QAEF,IAAI,kBAAkB,GAAG;YACvB,QAAQ,EAAE;gBACR,GAAG;gBACH,QAAQ;gBACR,QAAQ;gBACR,oBAAoB;gBACpB,YAAY;aACb;YACD,mBAAmB;YACnB,YAAY;YACZ,iBAAiB;YACjB,mBAAmB;YACnB,kBAAkB;YAClB,YAAY;YACZ,gCAAgC;YAChC,8DAA8D;SACxD,CAAC;QAET,8BAA8B;QAC9B,kBAAkB,CAAC,QAAQ,GAAG,IAAA,eAAM,EAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAClE,kBAAkB,GAAG,IAAA,eAAM,EAAC,kBAAkB,CAAC,CAAC;QAEhD,0DAA0D;QAC1D,MAAM,WAAW,GAAG,IAAA,cAAK,EAAC,EAAE,EAAE,eAAe,EAAE,kBAAkB,CAAC,CAAC;QAEnE,IAAI,CAAC,iBAAiB,CACpB,WAAW,EACX,GAAG,cAAc,gDAAgD,CAClE,CAAC;QAEF,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAoB,CAAC;IAC/D,CAAC;IAED;;;;;;;;;OASG;IACH,uBAAuB,CACrB,aAAqB,EACrB,EACE,QAAQ,EACR,YAAY,EACZ,oBAAoB,GAKrB;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAE3D,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CACb,4DAA4D,CAC7D,CAAC;SACH;QAED,IAAA,uCAA+B,EAAC,eAAe,EAAE,yBAAyB,CAAC,CAAC;QAE5E,MAAM,sBAAsB,GAAG;YAC7B,WAAW,EAAE;gBACX,QAAQ;gBACR,YAAY;gBACZ,oBAAoB;aACrB;YACD,gCAAgC;YAChC,8DAA8D;SACxD,CAAC;QAET,8BAA8B;QAC9B,sBAAsB,CAAC,WAAW,GAAG,IAAA,eAAM,EACzC,sBAAsB,CAAC,WAAW,CACnC,CAAC;QAEF,mEAAmE;QACnE,MAAM,WAAW,GAAG,IAAA,cAAK,EAAC,EAAE,EAAE,eAAe,EAAE,sBAAsB,CAAC,CAAC;QAEvE,IAAI,CAAC,iBAAiB,CACpB,WAAW,EACX,GAAG,cAAc,wDAAwD,CAC1E,CAAC;QAEF,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAoB,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,YAAY,CAChB,OAAe,EACf,eAAgC;QAEhC,OAAO,uBAAA,IAAI,uDAA0B,CAAC,YAAY,CAChD,OAAO,EACP,eAAe,CAChB,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,KAAK,CAAC,oBAAoB,CACxB,IAAY,EACZ,EACE,IAAI,EACJ,GAAG,EACH,QAAQ,EACR,IAAI,EACJ,EAAE,EACF,KAAK,GAQN;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CACb,gEAAgE,CACjE,CAAC;SACH;QAED,IAAA,uCAA+B,EAAC,eAAe,EAAE,sBAAsB,CAAC,CAAC;QAEzE,MAAM,cAAc,GAAG;YACrB,QAAQ,EAAE;gBACR,IAAI;gBACJ,IAAI;gBACJ,EAAE;gBACF,KAAK;gBACL,GAAG;gBACH,QAAQ;aACT;SAC0B,CAAC;QAE9B,cAAc,CAAC,QAAQ,GAAG,IAAA,eAAM,EAC9B,cAAc,CAAC,QAAQ,CACH,CAAC;QAEvB,MAAM,kBAAkB,GAAG,IAAA,cAAK,EAAC,EAAE,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC;QAEtE,MAAM,EAAE,eAAe,EAAE,GAAG,eAAe,CAAC;QAC5C,MAAM,QAAQ,GAAG,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc,EAAE,eAAe,EAAE,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAC,QAAQ,CAAC,CAAC;QAExC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,2CAAwB,EAC7C,kBAAkB,CAAC,QAAQ,EAC3B,QAAQ,CACT,CAAC;QAEF,kBAAkB,CAAC,IAAI,GAAG,IAAI,CAAC;QAE/B,MAAM,IAAA,mDAA6B,EAAC;YAClC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,QAAQ;YACR,eAAe,EAAE,kBAAkB;SACpC,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,CACpB,kBAAkB,EAClB,8BAA8B,IAAI,EAAE,CACrC,CAAC;QAEF,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,gCAAgC,CACpC,iBAA2D,EAAE,EAC7D,EAAE,QAAQ,KAA6B,EAAE;QAEzC,IAAA,sBAAG,EAAC,wCAAwC,EAAE;YAC5C,YAAY,EAAE,cAAc;SAC7B,CAAC,CAAC;QAEH,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/B,OAAO,EAAE,CAAC;SACX;QAED,MAAM,SAAS,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QACpC,MAAM,EAAE,OAAO,EAAE,GAAG,SAAS,CAAC;QAC9B,MAAM,eAAe,GAAG,uBAAA,IAAI,mFAAoB,MAAxB,IAAI,EAAqB,EAAE,OAAO,EAAE,CAAC,CAAC;QAC9D,MAAM,gBAAgB,GAAG,IAAA,4BAAkB,EAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAChE,MAAM,wBAAwB,GAAG,IAAA,8BAAoB,EAAC,gBAAgB,CAAC,CAAC;QAExE,IAAI,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,wBAAwB,CAAC,EAAE;YAC9D,OAAO,EAAE,CAAC;SACX;QAED,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QAE3D,IAAI,eAAe,EAAE,SAAS,CAAC;QAC/B,IAAI;YACF,yFAAyF;YACzF,MAAM,WAAW,GAAG,SAAS,CAAC,IAAI,CAAC;YACnC,MAAM,aAAa,GAAG,QAAQ,KAAK,IAAI,CAAC;YAExC,SAAS,GAAG,aAAa;gBACvB,CAAC,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,eAAe,CAAC;gBACvD,CAAC,CAAC,SAAS,CAAC;YAEd,MAAM,KAAK,GAAG,SAAS;gBACrB,CAAC,CAAC,IAAA,aAAK,EAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACzC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC;YAEpB,IAAI,SAAS,EAAE;gBACb,IAAA,sBAAG,EAAC,gCAAgC,EAAE,KAAK,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC;aACtE;YAED,eAAe,GAAG,MAAM,OAAO,CAAC,GAAG,CACjC,cAAc,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAC9B,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;gBACvB,OAAO,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YAClE,CAAC,CAAC,CACH,CAAC;SACH;QAAC,OAAO,GAAG,EAAE;YACZ,IAAA,sBAAG,EAAC,kDAAkD,EAAE,GAAG,CAAC,CAAC;YAC7D,iEAAiE;YACjE,4BAA4B;YAC5B,MAAM,GAAG,CAAC;SACX;gBAAS;YACR,SAAS,EAAE,WAAW,EAAE,CAAC;YACzB,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;SAC/D;QACD,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;;;;;;;OAQG;IACH,0BAA0B,CACxB,aAAqB,EACrB,EACE,YAAY,EACZ,IAAI,EACJ,MAAM,GAKP;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAE3D,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CACb,sEAAsE,CACvE,CAAC;SACH;QAED,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;SAChE;QAED,IACE,MAAM;YACN,CAAC;gBACC,yBAAiB,CAAC,SAAS;gBAC3B,yBAAiB,CAAC,MAAM;gBACxB,yBAAiB,CAAC,MAAM;aACzB,CAAC,QAAQ,CAAC,MAAM,CAAC,EAClB;YACA,MAAM,IAAI,KAAK,CACb,oDAAoD,MAAM,EAAE,CAC7D,CAAC;SACH;QAED,MAAM,sBAAsB,GAAG,IAAA,cAAK,EAClC,EAAE,EACF,eAAe,EACf,IAAA,eAAM,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CACN,CAAC;QAErB,IAAI,sBAAsB,CAAC,MAAM,KAAK,yBAAiB,CAAC,SAAS,EAAE;YACjE,sBAAsB,CAAC,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;SAC7D;QAED,IAAI,sBAAsB,CAAC,MAAM,KAAK,yBAAiB,CAAC,MAAM,EAAE;YAC9D,sBAAsB,CAAC,KAAK,GAAG,IAAA,wBAAgB,EAAC,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;SAC1E;QAED,IAAI,CAAC,iBAAiB,CACpB,sBAAsB,EACtB,GAAG,cAAc,6DAA6D,CAC/E,CAAC;QAEF,IACE,CAAC,yBAAiB,CAAC,SAAS,EAAE,yBAAiB,CAAC,MAAM,CAAC,CAAC,QAAQ,CAC9D,MAA2B,CAC5B,EACD;YACA,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,sBAAsB,EACvC,sBAAsB,CACvB,CAAC;YACF,uBAAA,IAAI,6CAAgB,CAAC,IAAI,CACvB,GAAG,sBAAsB,CAAC,EAAE,WAAW,EACvC,sBAAsB,CACvB,CAAC;SACH;IACH,CAAC;IAED;;;;;;;;OAQG;IACH,eAAe,CAAC,EACd,WAAW,EACX,KAAK,EACL,cAAc,GAAG,EAAE,MAOjB,EAAE;QACJ,2EAA2E;QAC3E,yEAAyE;QACzE,0EAA0E;QAC1E,0EAA0E;QAC1E,0EAA0E;QAC1E,qBAAqB;QACrB,MAAM,gBAAgB,GAAG,IAAA,kBAAS,EAAC,cAAc,EAAE,CAAC,SAAS,EAAE,EAAE;YAC/D,OAAO,OAAO,SAAS,KAAK,UAAU;gBACpC,CAAC,CAAC,SAAS;gBACX,CAAC,CAAC,gCAAgC;oBAChC,8DAA8D;oBAC9D,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,KAAK,SAAS,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,MAAM,oBAAoB,GAAG,WAAW,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC;QAEpE,2EAA2E;QAC3E,iDAAiD;QACjD,MAAM,oBAAoB,GAAG,IAAA,eAAM,EACjC,IAAA,eAAM,EAAC,oBAAoB,EAAE,CAAC,WAAW,EAAE,EAAE;YAC3C,qEAAqE;YACrE,6BAA6B;YAC7B,KAAK,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;gBAC/D,qEAAqE;gBACrE,8DAA8D;gBAC9D,qEAAqE;gBACrE,+DAA+D;gBAC/D,0CAA0C;gBAC1C,IAAI,GAAG,IAAI,WAAW,CAAC,QAAQ,EAAE;oBAC/B,gCAAgC;oBAChC,8DAA8D;oBAC9D,IAAI,SAAS,CAAE,WAAW,CAAC,QAAgB,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,EAAE;wBAC3D,OAAO,KAAK,CAAC;qBACd;oBACD,gCAAgC;oBAChC,8DAA8D;iBAC/D;qBAAM,IAAI,SAAS,CAAE,WAAmB,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,EAAE;oBACzD,OAAO,KAAK,CAAC;iBACd;aACF;YAED,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,MAAM,CACP,CAAC;QACF,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,wEAAwE;YACxE,wEAAwE;YACxE,qEAAqE;YACrE,4DAA4D;YAC5D,MAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;YACzB,MAAM,GAAG,GAAG,EAAE,CAAC;YACf,yEAAyE;YACzE,qEAAqE;YACrE,yEAAyE;YACzE,wEAAwE;YACxE,iBAAiB;YACjB,KAAK,IAAI,CAAC,GAAG,oBAAoB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACzD,MAAM,MAAM,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;gBACvC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC;gBAClC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBACtB,IAAI,MAAM,CAAC,IAAI,GAAG,KAAK,EAAE;wBACvB,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;qBACnB;yBAAM;wBACL,SAAS;qBACV;iBACF;gBACD,iEAAiE;gBACjE,+BAA+B;gBAC/B,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aACrB;YACD,OAAO,GAAG,CAAC;SACZ;QACD,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,EACnB,iBAAiB,EACjB,OAAO,EACP,eAAe,EAAE,sBAAsB,GAKxC;QACC,MAAM,EAAE,EAAE,EAAE,eAAe,EAAE,QAAQ,EAAE,GACrC,uBAAA,IAAI,uDAA0B,CAAC,gBAAgB,CAAC;YAC9C,OAAO;YACP,eAAe,EAAE,sBAAsB;SACxC,CAAC,CAAC;QAEL,MAAM,eAAe,GAAG;YACtB,QAAQ,EAAE,iBAAiB;YAC3B,OAAO;YACP,eAAe;SACG,CAAC;QAErB,mEAAmE;QACnE,MAAM,UAAU,GAAG,IAAA,wBAAa,EAC9B,eAAe,EACf,IAAI,CAAC,WAAW,CACH,CAAC;QAEhB,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAC,QAAQ,CAAC,CAAC;QAExC,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC;YACzD,eAAe;SAChB,CAAC,CAAC;QAEH,OAAO,UAAU,CAAC,UAAU,CAAC;YAC3B,QAAQ;YACR,oBAAoB;YACpB,eAAe;SAChB,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,eAAe,CAAC,EACpB,iBAAiB,EACjB,OAAO,EACP,eAAe,GAKhB;QACC,MAAM,QAAQ,GAAG,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc;YACjC,OAAO;YACP,eAAe;SAChB,CAAC,CAAC;QAEH,OAAO,MAAM,IAAA,gDAA0B,EAAC;YACtC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,QAAQ;YACR,eAAe,EAAE;gBACf,QAAQ,EAAE,iBAAiB;gBAC3B,OAAO;aACW;SACrB,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,uBAAuB,CACnC,OAAY,EACZ,iBAAoC;QAEpC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC5C;QAED,MAAM,2BAA2B,GAC/B,IAAA,kCAA0B,EAAC,iBAAiB,CAAC,CAAC;QAChD,MAAM,IAAI,GAAG,IAAA,4BAAoB,EAAC,2BAA2B,CAAC;YAC5D,CAAC,CAAC,+BAAuB,CAAC,SAAS;YACnC,CAAC,CAAC,+BAAuB,CAAC,MAAM,CAAC;QACnC,MAAM,wBAAwB,GAAG;YAC/B,GAAG,2BAA2B;YAC9B,IAAI;YACJ,QAAQ,EAAE,2BAA2B,CAAC,GAAG;YACzC,OAAO;SACR,CAAC;QAEF,MAAM,EAAE,IAAI,EAAE,GAAG,wBAAwB,CAAC;QAE1C,MAAM,mBAAmB,GAAG,IAAA,4BAAkB,EAC5C,OAAO,EACP,wBAAwB,CACzB,CAAC;QAEF,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;QACrE,MAAM,cAAc,GAAG,IAAA,8BAAoB,EAAC,iBAAiB,CAAC,CAAC;QAE/D,OAAO,cAAc,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,2BAA2B;QACzB,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CACjD,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,KAAK,yBAAiB,CAAC,UAAU,CACxD,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,uBAAuB,CAAC,aAAqB;QAC3C,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAE3D,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;SAC1E;QAED,MAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAEjE,IAAI,CAAC,aAAa,EAAE;YAClB,MAAM,IAAI,KAAK,CACb,gEAAgE,CACjE,CAAC;SACH;QAED,aAAa,EAAE,CAAC;QAEhB,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAChD,CAAC;IAEO,WAAW,CAAC,eAAgC;QAClD,IAAA,6BAAgB,EAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBACjD,GAAG,KAAK,CAAC,YAAY;gBACrB,eAAe;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAC/B,eAAgC,EAChC,EAAE,YAAY,KAAsC,EAAE;QAEtD,MAAM,mBAAmB,GACvB,eAAe,CAAC,QAAQ,CAAC,IAAI,KAAK,+BAAuB,CAAC,MAAM;YAChE,CAAC,MAAM,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC,CAAC;QAExE,MAAM,EAAE,eAAe,EAAE,OAAO,EAAE,GAAG,eAAe,CAAC;QAErD,MAAM,eAAe,GACnB,uBAAA,IAAI,uDAA0B,CAAC,gBAAgB,CAAC,EAAE,eAAe,EAAE,CAAC;aACjE,aAAa,CAAC,IAAI,KAAK,sCAAiB,CAAC,MAAM,CAAC;QAErD,MAAM,QAAQ,GAAG,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc,EAAE,eAAe,EAAE,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc,EAAE,eAAe,EAAE,CAAC,CAAC;QAExD,MAAM,uBAAA,IAAI,oCAAO,MAAX,IAAI,EACR,EAAE,IAAI,EAAE,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,EACnD,KAAK,IAAI,EAAE;YACT,MAAM,IAAA,eAAS,EAAC;gBACd,QAAQ;gBACR,OAAO;gBACP,eAAe;gBACf,MAAM,EAAE,eAAe;aACxB,CAAC,CAAC;QACL,CAAC,CACF,CAAC;QAEF,MAAM,uBAAA,IAAI,oCAAO,MAAX,IAAI,EACR,EAAE,IAAI,EAAE,iBAAiB,EAAE,aAAa,EAAE,YAAY,EAAE,EACxD,KAAK,IAAI,EAAE,CACT,MAAM,IAAA,wBAAa,EAAC;YAClB,OAAO,EAAE,mBAAmB;YAC5B,QAAQ;YACR,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;YAChD,MAAM,EAAE,eAAe;SACxB,CAAC,CACL,CAAC;QAEF,MAAM,uBAAA,IAAI,oCAAO,MAAX,IAAI,EACR,EAAE,IAAI,EAAE,yBAAyB,EAAE,aAAa,EAAE,YAAY,EAAE,EAChE,KAAK,IAAI,EAAE,CACT,MAAM,IAAA,mDAA6B,EAAC;YAClC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,QAAQ;YACR,eAAe;SAChB,CAAC,CACL,CAAC;IACJ,CAAC;IAEO,aAAa;QACnB,IAAI,CAAC,2BAA2B,EAAE,CAAC;QACnC,IAAI,CAAC,0BAA0B,EAAE,CAAC;IACpC,CAAC;IAEO,0BAA0B;QAChC,MAAM,sBAAsB,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAC3D,CAAC,WAAW,EAAE,EAAE,CACd,CAAC,yBAAiB,CAAC,QAAQ,EAAE,yBAAiB,CAAC,MAAM,CAAC,CAAC,QAAQ,CAC7D,WAAW,CAAC,MAAM,CACnB,CACJ,CAAC;QAEF,KAAK,MAAM,eAAe,IAAI,sBAAsB,EAAE;YACpD,IAAI,CAAC,eAAe,CAClB,eAAe,EACf,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAC/C,CAAC;SACH;IACH,CAAC;IAEO,KAAK,CAAC,eAAe,CAC3B,eAAgC,EAChC,EACE,UAAU,GAAG,KAAK,EAClB,eAAe,EACf,iBAAiB,GAAG,IAAI,EACxB,QAAQ,EACR,YAAY,GAOb;QAED,MAAM,aAAa,GAAG,eAAe,CAAC,EAAE,CAAC;QACzC,IAAI,eAAkD,CAAC;QACvD,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;QACzE,MAAM,eAAe,GAAG,WAAW;YACjC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;YACvB,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;QAEnD,IAAI,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,WAAW,EAAE;YACvC,IAAI;gBACF,IAAI,eAAe,KAAK,KAAK,EAAE;oBAC7B,MAAM,YAAY,GAAG,MAAM,uBAAA,IAAI,oCAAO,MAAX,IAAI,EAC7B,EAAE,IAAI,EAAE,gBAAgB,EAAE,aAAa,EAAE,YAAY,EAAE,EACvD,CAAC,OAAO,EAAE,EAAE,CACV,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE;wBACpC,iBAAiB;wBACjB,YAAY,EAAE,OAAO;qBACtB,CAAC,CACL,CAAC;oBAEF,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;oBAE/C,MAAM,aAAa,GAAG,YAAY,CAAC,KAItB,CAAC;oBAEd,MAAM,kBAAkB,GAAG,aAAa,EAAE,MAAM,CAAC;oBAEjD,IAAI,kBAAkB,EAAE;wBACtB,IAAA,sBAAG,EAAC,yCAAyC,EAAE;4BAC7C,WAAW,EAAE,kBAAkB,CAAC,gBAAgB;4BAChD,MAAM,EAAE,kBAAkB,CAAC,QAAQ;yBACpC,CAAC,CAAC;wBAEH,IAAI,CAAC,iBAAiB,CACpB,kBAAkB,EAClB,oEAAoE,CACrE,CAAC;qBACH;iBACF;gBAED,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,GAClC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;gBAE7C,IAAI,CAAC,aAAa,EAAE;oBAClB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAClD,aAAa,EACb,YAAY,CACb,CAAC;oBACF,IACE,cAAc,KAAK,aAAa,CAAC,2BAA2B;wBAC5D,eAAe,EACf;wBACA,eAAe,CAAC,OAAO,EAAE,CAAC;qBAC3B;oBACD,MAAM,sBAAsB,GAAG,IAAI,CAAC,cAAc,CAChD,aAAa,CACK,CAAC;oBACrB,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,sBAAsB,EACvC;wBACE,eAAe,EAAE,sBAAsB;wBACvC,QAAQ;qBACT,CACF,CAAC;iBACH;gBACD,gCAAgC;gBAChC,8DAA8D;aAC/D;YAAC,OAAO,KAAU,EAAE;gBACnB,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,GAClC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;gBAC7C,IAAI,CAAC,aAAa,EAAE;oBAClB,IAAI,KAAK,EAAE,IAAI,KAAK,uBAAU,CAAC,QAAQ,CAAC,mBAAmB,EAAE;wBAC3D,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;wBAEhD,MAAM,2BAAc,CAAC,mBAAmB,CACtC,2DAA2D,CAC5D,CAAC;qBACH;yBAAM;wBACL,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;qBAC7C;iBACF;aACF;SACF;QAED,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC;QAExC,QAAQ,SAAS,EAAE,MAAM,EAAE;YACzB,KAAK,yBAAiB,CAAC,MAAM;gBAC3B,eAAe,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACxC,MAAM,sBAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAEpD,KAAK,yBAAiB,CAAC,SAAS;gBAC9B,eAAe,EAAE,OAAO,EAAE,CAAC;gBAC3B,OAAO,SAAS,CAAC,IAAc,CAAC;YAElC;gBACE,MAAM,aAAa,GAAG,sBAAS,CAAC,QAAQ,CACtC,2CAA2C,IAAI,CAAC,SAAS,CACvD,SAAS,IAAI,aAAa,CAC3B,EAAE,CACJ,CAAC;gBAEF,eAAe,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;gBACtC,MAAM,aAAa,CAAC;SACvB;IACH,CAAC;IAED;;;;;;;;OAQG;IACK,KAAK,CAAC,kBAAkB,CAC9B,aAAqB,EACrB,YAAsB;QAEtB,MAAM,YAAY,GAAG,IAAI,KAAK,EAAc,CAAC;QAC7C,YAAY,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAE9C,IAAI,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;QAEhE,IAAI;YACF,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;gBACd,IAAI,CAAC,eAAe,CAClB,eAAe,EACf,IAAI,KAAK,CAAC,yBAAyB,CAAC,CACrC,CAAC;gBACF,OAAO,aAAa,CAAC,WAAW,CAAC;aAClC;iBAAM,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;gBACnC,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBACxE,OAAO,aAAa,CAAC,WAAW,CAAC;aAClC;YAED,IAAI,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;gBACnD,IAAA,sBAAG,EAAC,0CAA0C,EAAE,aAAa,CAAC,CAAC;gBAC/D,OAAO,aAAa,CAAC,WAAW,CAAC;aAClC;YACD,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAChD,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,CACrB,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,aAAa,CAAC,CACnD,CAAC;YAEF,MAAM,CAAC,KAAK,EAAE,YAAY,CAAC,GAAG,MAAM,IAAA,oBAAY,EAC9C,eAAe,EACf,CAAC,OAAe,EAAE,EAAE,CAClB,uBAAA,IAAI,uDAA0B,CAAC,YAAY,CACzC,OAAO,EACP,eAAe,CAAC,eAAe,CAChC,CACJ,CAAC;YAEF,iEAAiE;YACjE,YAAY,IAAI,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAEhD,eAAe,GAAG,uBAAA,IAAI,0FAA2B,MAA/B,IAAI,EACpB;gBACE,aAAa;gBACb,IAAI,EAAE,iEAAiE;aACxE,EACD,CAAC,WAAW,EAAE,EAAE;gBACd,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,WAAW,CAAC;gBAC1C,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC;gBAE/B,WAAW,CAAC,MAAM,GAAG,yBAAiB,CAAC,QAAQ,CAAC;gBAChD,WAAW,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;gBACvC,WAAW,CAAC,QAAQ,CAAC,QAAQ,GAAG,GAAG,CAAC;gBACpC,WAAW,CAAC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;gBAEnC,IAAI,CAAC,IAAI,IAAI,IAAA,4BAAoB,EAAC,QAAQ,CAAC,EAAE;oBAC3C,WAAW,CAAC,QAAQ,CAAC,IAAI,GAAG,+BAAuB,CAAC,SAAS,CAAC;iBAC/D;YACH,CAAC,CACF,CAAC;YAEF,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,CAAC;YAEhD,MAAM,KAAK,GAAG,MAAM,uBAAA,IAAI,oCAAO,MAAX,IAAI,EACtB,EAAE,IAAI,EAAE,MAAM,EAAE,aAAa,EAAE,YAAY,EAAE,EAC7C,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,eAAe,CAAC,QAAQ,CAAC,CACtE,CAAC;YAEF,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,EAAE;gBACxC,IAAA,sBAAG,EAAC,+CAA+C,CAAC,CAAC;gBACrD,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,+BAA+B,EAChD,eAAe,CAChB,CAAC;gBACF,OAAO,aAAa,CAAC,2BAA2B,CAAC;aAClD;YAED,IAAI,CAAC,KAAK,EAAE;gBACV,OAAO,aAAa,CAAC,WAAW,CAAC;aAClC;YAED,MAAM,EAAE,eAAe,EAAE,GAAG,eAAe,CAAC;YAC5C,MAAM,QAAQ,GAAG,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc,EAAE,eAAe,EAAE,CAAC,CAAC;YAExD,IAAI,YAAgC,CAAC;YACrC,MAAM,wBAAwB,GAC5B,eAAe,CAAC,IAAI,KAAK,uBAAe,CAAC,IAAI,CAAC;YAEhD,IAAI,wBAAwB,EAAE;gBAC5B,IAAA,sBAAG,EAAC,qCAAqC,CAAC,CAAC;gBAE3C,YAAY,GAAG,MAAM,IAAA,wBAAK,EAAC,QAAQ,EAAE,YAAY,EAAE;oBACjD,eAAe,CAAC,QAAQ,CAAC,IAAI;iBAC9B,CAAC,CAAC;aACJ;YAED,IAAA,sBAAG,EAAC,wBAAwB,EAAE,eAAe,CAAC,QAAQ,CAAC,CAAC;YAExD,IAAI,IAAwB,CAAC;YAE7B,MAAM,uBAAA,IAAI,oCAAO,MAAX,IAAI,EACR,EAAE,IAAI,EAAE,SAAS,EAAE,aAAa,EAAE,YAAY,EAAE,EAChD,KAAK,IAAI,EAAE;gBACT,CAAC,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAC7C,eAAe,EACf,KAAK,CACN,CAAC,CAAC;gBAEH,IAAI,IAAI,KAAK,SAAS,EAAE;oBACtB,IAAI,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE;wBAC7C,GAAG,eAAe;wBAClB,KAAK;qBACN,CAAC,CAAC;iBACJ;YACH,CAAC,CACF,CAAC;YAEF,IAAA,sBAAG,EAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;YAEhC,eAAe,GAAG,uBAAA,IAAI,0FAA2B,MAA/B,IAAI,EACpB;gBACE,aAAa;gBACb,IAAI,EAAE,kEAAkE;aACzE,EACD,CAAC,WAAW,EAAE,EAAE;gBACd,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC;gBACxB,WAAW,CAAC,MAAM,GAAG,yBAAiB,CAAC,SAAS,CAAC;gBACjD,WAAW,CAAC,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;gBACjD,IAAI,wBAAwB,EAAE;oBAC5B,WAAW,CAAC,YAAY,GAAG,YAAY,CAAC;oBACxC,IAAA,sBAAG,EAAC,iCAAiC,EAAE,YAAY,CAAC,CAAC;iBACtD;YACH,CAAC,CACF,CAAC;YAEF,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,cAAc,uBAAuB,EAAE;gBACrE,eAAe;aAChB,CAAC,CAAC;YAEH,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,sBAAsB,EACvC,eAAe,CAChB,CAAC;YACF,uBAAA,IAAI,6CAAgB,CAAC,IAAI,CAAC,GAAG,aAAa,WAAW,EAAE,eAAe,CAAC,CAAC;YAExE,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,CAAC;YAChD,OAAO,aAAa,CAAC,QAAQ,CAAC;YAC9B,gCAAgC;YAChC,8DAA8D;SAC/D;QAAC,OAAO,KAAU,EAAE;YACnB,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YAC7C,OAAO,aAAa,CAAC,WAAW,CAAC;SAClC;gBAAS;YACR,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;SACxC;IACH,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAC9B,QAAkB,EAClB,eAAgC,EAChC,EAAE,iBAAiB,KAAsC,EAAE;QAE3D,MAAM,eAAe,GAAG,MAAM,IAAA,wBAAK,EAAC,QAAQ,EAAE,oBAAoB,EAAE;YAClE,eAAe,CAAC,KAAK;SACtB,CAAC,CAAC;QAEH,IAAI,iBAAiB,KAAK,IAAI,EAAE;YAC9B,uBAAA,IAAI,oFAAqB,MAAzB,IAAI,EAAsB,eAAe,EAAE,eAAe,CAAC,CAAC;SAC7D;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;;;;;OAMG;IACK,iBAAiB,CAAC,aAAqB,EAAE,QAAiB;QAChE,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAClD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,aAAa,CACjC,CAAC;QACF,IAAI,CAAC,eAAe,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,MAAM,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAC5C,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,aAAa,CACjC,CAAC;YACF,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QACH,MAAM,sBAAsB,GAAG;YAC7B,GAAG,eAAe;YAClB,MAAM,EAAE,yBAAiB,CAAC,QAAiB;SAC5C,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,sBAAsB,EACvC,sBAAsB,CACvB,CAAC;QACF,uBAAA,IAAI,6CAAgB,CAAC,IAAI,CACvB,GAAG,eAAe,CAAC,EAAE,WAAW,EAChC,sBAAsB,CACvB,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,cAAc,sBAAsB,EAAE;YACpE,eAAe,EAAE,sBAAsB;YACvC,QAAQ;SACT,CAAC,CAAC;QACH,IAAI,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;;;;;;;;OAaG;IACK,wBAAwB,CAC9B,YAA+B;QAE/B,MAAM,eAAe,GAAG,IAAI,GAAG,EAAE,CAAC;QAElC,MAAM,SAAS,GAAG,CAAC,GAAG,YAAY,CAAC;aAChC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,wBAAwB;aACnE,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE;YACb,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;YAE/C,IAAI,QAAQ,EAAE;gBACZ,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAA,sCAAmB,EAC1D,OAAO,CACR,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC;gBAErC,IAAI,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;oBAC5B,OAAO,IAAI,CAAC;iBACb;qBAAM,IACL,eAAe,CAAC,IAAI,GAAG,uBAAA,IAAI,sDAAyB;oBACpD,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAC1B;oBACA,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACzB,OAAO,IAAI,CAAC;iBACb;aACF;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QAEL,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,uBAAuB;QAC5C,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;;OAKG;IACK,YAAY,CAAC,MAAyB;QAC5C,OAAO,CACL,MAAM,KAAK,yBAAiB,CAAC,QAAQ;YACrC,MAAM,KAAK,yBAAiB,CAAC,SAAS;YACtC,MAAM,KAAK,yBAAiB,CAAC,MAAM,CACpC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACK,iBAAiB,CAAC,MAAyB;QACjD,OAAO;YACL,yBAAiB,CAAC,SAAS;YAC3B,yBAAiB,CAAC,MAAM;YACxB,yBAAiB,CAAC,QAAQ;YAC1B,yBAAiB,CAAC,SAAS;SAC5B,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC;IAEO,KAAK,CAAC,eAAe,CAC3B,MAAuB,EACvB,EACE,iBAAiB,EACjB,YAAY,GACgD;QAE9D,MAAM,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACtC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;QAC1B,MAAM,IAAI,GAAG,+BAAY,CAAC,WAAW,CAAC;QACtC,MAAM,WAAW,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC;QAExC,MAAM,uBAAA,IAAI,oCAAO,MAAX,IAAI,EAAQ;YAChB,IAAI,EAAE,sBAAsB;YAC5B,EAAE;YACF,aAAa,EAAE,YAAY;SAC5B,CAAC,CAAC;QAEH,OAAO,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CACrC,+BAA+B,EAC/B;YACE,EAAE;YACF,MAAM,EAAE,MAAM,IAAI,kCAAe;YACjC,IAAI;YACJ,WAAW;YACX,aAAa,EAAE,IAAI;SACpB,EACD,iBAAiB,CAClB,CAAuB,CAAC;IAC3B,CAAC;IAEO,cAAc,CACpB,aAAqB;QAErB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACpC,OAAO,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,aAAa,CAAC,CAAC;IAC7D,CAAC;IAEO,qBAAqB,CAC3B,aAAqB,EACrB,kBAAkB,GAAG,uBAAuB;QAE5C,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAClD,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CACb,GAAG,kBAAkB,kCAAkC,aAAa,EAAE,CACvE,CAAC;SACH;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,aAAa,CAAC,MAAuB;QAC3C,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAEO,sBAAsB,CAAC,aAAqB;QAIlD,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAEvD,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;SAChD;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAE/D,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC;IAC5C,CAAC;IA8CO,sBAAsB,CAAC,YAA+B;QAC5D,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YACxB,OAAO;SACR;QAED,MAAM,iBAAiB,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;YAChD,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;YACvB,MAAM,eAAe,GAAG,uBAAA,IAAI,mFAAoB,MAAxB,IAAI,EAAqB,EAAE,OAAO,EAAE,CAAC,CAAC;YAE9D,OAAO;gBACL,GAAG,EAAE;gBACL,eAAe;aAChB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,MAAM,EAAE,YAAY,EAAE,mBAAmB,EAAE,GAAG,KAAK,CAAC;YAEpD,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBACjD,GAAG,iBAAiB;gBACpB,GAAG,mBAAmB;aACvB,CAAC,CAAC;YAEH,IAAA,sBAAG,EACD,sCAAsC,EACtC,iBAAiB,CAAC,MAAM,EACxB,iBAAiB,CAClB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,+BAA+B,EAChD,iBAAiB,CAClB,CAAC;IACJ,CAAC;IAEO,4BAA4B,CAClC,QAA2B,EAC3B,MAAe;QAEf,IAAI,CAAC,MAAM,IAAI,MAAM,KAAK,kCAAe,EAAE;YACzC,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,oBAAoB,EAAE,GAAG,EAAE,GAAG,QAAQ,CAAC;QAEvE,IACE,QAAQ,KAAK,SAAS;YACtB,YAAY,KAAK,SAAS;YAC1B,oBAAoB,KAAK,SAAS;YAClC,GAAG,KAAK,SAAS,EACjB;YACA,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,oBAAoB,GAAyB,EAAE,CAAC;QAEtD,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC1B,oBAAoB,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1C;aAAM,IACL,YAAY,KAAK,SAAS;YAC1B,oBAAoB,KAAK,SAAS,EAClC;YACA,oBAAoB,CAAC,YAAY,GAAG,YAAY,CAAC;YACjD,oBAAoB,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;SAClE;QAED,IAAI,GAAG,KAAK,SAAS,EAAE;YACrB,oBAAoB,CAAC,GAAG,GAAG,GAAG,CAAC;SAChC;QAED,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAED;;;;;OAKG;IACK,sBAAsB,CAAC,eAAgC;QAC7D,MAAM,EAAE,OAAO,EAAE,GAAG,eAAe,CAAC;QACpC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACpC,MAAM,WAAW,GAAG,eAAe,EAAE,QAAQ,EAAE,IAAI,CAAC;QACpD,MAAM,8BAA8B,GAAG,YAAY,CAAC,MAAM,CACxD,CAAC,WAAW,EAAE,EAAE,CACd,WAAW,CAAC,QAAQ,CAAC,IAAI,KAAK,WAAW;YACzC,WAAW,CAAC,OAAO,KAAK,OAAO,CAClC,CAAC;QACF,MAAM,YAAY,GAAG,8BAA8B,CAAC,MAAM,CACxD,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,MAAM,KAAK,yBAAiB,CAAC,SAAS,CACpE,CAAC;QACF,MAAM,UAAU,GAAG,8BAA8B,CAAC,MAAM,CACtD,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,MAAM,KAAK,yBAAiB,CAAC,SAAS,CACpE,CAAC;QAEF,IAAA,4DAAoC,EAClC,eAAe,EACf,YAAY,EACZ,UAAU,CACX,CAAC;QAEF,sEAAsE;QACtE,MAAM,kBAAkB,GACtB,CAAC,eAAe,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB;YACrE,CAAC,CAAC,IAAA,mCAAyB,EAAC,eAAe,CAAC;YAC5C,CAAC,CAAC,eAAe,CAAC;QAEtB,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBACjD,GAAG,KAAK,CAAC,YAAY;gBACrB,kBAAkB;aACnB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACK,0BAA0B,CAAC,aAAqB;QACtD,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAI,CAAC,eAAe,EAAE;YACpB,OAAO;SACR;QACD,MAAM,KAAK,GAAG,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC;QAC9C,MAAM,IAAI,GAAG,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC;QAC5C,MAAM,EAAE,OAAO,EAAE,GAAG,eAAe,CAAC;QAEpC,MAAM,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAC1D,CAAC,WAAW,EAAE,EAAE,CACd,WAAW,CAAC,EAAE,KAAK,aAAa;YAChC,WAAW,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI;YAClC,WAAW,CAAC,QAAQ,CAAC,KAAK,KAAK,KAAK;YACpC,WAAW,CAAC,OAAO,KAAK,OAAO;YAC/B,WAAW,CAAC,IAAI,KAAK,uBAAe,CAAC,QAAQ,CAChD,CAAC;QACF,MAAM,uBAAuB,GAAG,qBAAqB,CAAC,GAAG,CACvD,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,EAAE,CAChC,CAAC;QAEF,IAAI,qBAAqB,CAAC,MAAM,KAAK,CAAC,EAAE;YACtC,OAAO;SACR;QAED,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,MAAM,WAAW,IAAI,KAAK,CAAC,YAAY,EAAE;gBAC5C,IAAI,uBAAuB,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE;oBACpD,WAAW,CAAC,UAAU,GAAG,eAAe,EAAE,IAAI,CAAC;oBAC/C,WAAW,CAAC,YAAY,GAAG,eAAe,EAAE,EAAE,CAAC;iBAChD;aACF;QACH,CAAC,CAAC,CAAC;QAEH,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;YACjD,IACE,uBAAuB,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;gBAChD,WAAW,CAAC,MAAM,KAAK,yBAAiB,CAAC,MAAM,EAC/C;gBACA,IAAI,CAAC,2BAA2B,CAAC,WAAW,CAAC,CAAC;aAC/C;SACF;IACH,CAAC;IAED;;;;OAIG;IACK,2BAA2B,CAAC,eAAgC;QAClE,MAAM,sBAAsB,GAAG;YAC7B,GAAG,eAAe;YAClB,MAAM,EAAE,yBAAiB,CAAC,OAAgB;SAC3C,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,cAAc,qBAAqB,EAAE;YACnE,eAAe,EAAE,sBAAsB;SACxC,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,CACpB,sBAAsB,EACtB,yEAAyE,CAC1E,CAAC;QACF,IAAI,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACK,0BAA0B,CAAC,QAAiB;QAClD,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CACjC,CAAC,WAAW,EAAE,EAAE,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,KAAK,QAAQ,CAC/D,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,0BAA0B,CACtC,aAAqB;QAErB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC7B,uBAAA,IAAI,6CAAgB,CAAC,IAAI,CAAC,GAAG,aAAa,WAAW,EAAE,CAAC,MAAM,EAAE,EAAE;gBAChE,OAAO,CAAC,MAAM,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;OAOG;IACK,wBAAwB,CAC9B,eAAgC,EAChC,QAA0B;QAE1B,MAAM,sBAAsB,GAAG,IAAA,kBAAS,EAAC,eAAe,CAAC,CAAC;QAE1D,KAAK,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAU,EAAE;YAC1C,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAE5B,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;gBACzC,SAAS;aACV;YAED,sBAAsB,CAAC,GAAG,CAAC,GAAG,IAAA,aAAK,EAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;SACzD;QAED,OAAO,sBAAsB,CAAC;IAChC,CAAC;IAEO,KAAK,CAAC,uBAAuB,CAAC,eAAiC;QACrE,MAAM,iCAAiC,GACrC,MAAM,IAAI,CAAC,qCAAqC,CAAC,eAAe,CAAC,CAAC;QAEpE,MAAM,iCAAiC,GACrC,MAAM,IAAI,CAAC,qCAAqC,EAAE,CAAC;QAErD,OAAO,CACL,iCAAiC,IAAI,iCAAiC,CACvE,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,eAAe,CAC3B,eAAgC,EAChC,QAA2B;QAE3B,IAAA,sBAAG,EAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;QAErC,MAAM,EAAE,iBAAiB,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC;QAC7C,MAAM,aAAa,GAAG,EAAE,GAAG,QAAQ,EAAE,CAAC;QAEtC,aAAa,CAAC,iBAAiB,GAAG,MAAM,IAAA,+BAAqB,EAAC;YAC5D,iBAAiB;YACjB,SAAS,EAAE,IAAI,CAAC,eAAe;YAC/B,eAAe;SAChB,CAAC,CAAC;QAEH,MAAM,aAAa,GAAG,IAAA,4BAAkB,EACtC,eAAe,CAAC,OAAO,EACvB,aAAa,CACd,CAAC;QAEF,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAErD,MAAM,QAAQ,GAAG,MAAM,IAAI,OAAO,CAAmB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACvE,IAAI,CAAC,IAAI,EAAE,CACT,aAAa,EACb,IAAI,EACJ,GAAG,IAAI,CAAC,0BAA0B,CAAC,eAAe,CAAC,CACpD,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAExB,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,EAAE,GAAG,EAAE,CACnD,MAAM,CAAC,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAC7C,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAEnD,IAAI,CAAC,QAAQ,EAAE;YACb,IAAA,sBAAG,EAAC,iDAAiD,CAAC,CAAC;YACvD,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,uBAAuB,GAAG,IAAA,kBAAS,EAAC,eAAe,CAAC,CAAC;QAC3D,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,uBAAuB,EAAE,QAAQ,CAAC,EAAE;YACtD,IAAI,CAAC,iBAAiB,CACpB,uBAAuB,EACvB,2DAA2D,CAC5D,CAAC;YAEF,IAAA,sBAAG,EAAC,sCAAsC,CAAC,CAAC;YAE5C,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,sBAAsB,GAAG;YAC7B,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,EAAE,QAAQ,CAAC;YACnE,MAAM,EAAE,yBAAiB,CAAC,MAAe;SAC1C,CAAC;QAEF,IAAI,CAAC,iBAAiB,CACpB,sBAAsB,EACtB,+DAA+D,CAChE,CAAC;QAEF,IAAI,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,CAAC;QAEvD,MAAM,KAAK,GAAG,IAAA,8BAAoB,EAAC,QAAQ,CAAC,CAAC;QAE7C,MAAM,wBAAwB,GAAG,IAAA,cAAK,EAAC,EAAE,EAAE,sBAAsB,EAAE;YACjE,KAAK;SACN,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,CACpB,wBAAwB,EACxB,iEAAiE,CAClE,CAAC;QAEF,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,yBAAyB,CAAC,eAAgC;QAChE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,cAAc,2BAA2B,EAAE;YACzE,eAAe;SAChB,CAAC,CAAC;IACL,CAAC;IAEO,2BAA2B,CACjC,MAAyB,EACzB,OAAe,EACf,OAAe;QAEf,OAAO,IAAA,+CAAuC,EAC5C,OAAO,EACP,OAAO,EACP,MAAM,EACN,IAAI,CAAC,KAAK,CAAC,YAAY,CACxB,CAAC;IACJ,CAAC;IAEO,sBAAsB,CAAC,eAAgC;QAC7D,IAAA,sBAAG,EAAC,kCAAkC,EAAE,eAAe,CAAC,EAAE,CAAC,CAAC;QAE5D,IAAI,CAAC,0BAA0B,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAEpD,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,uBAAuB,EACxC,eAAe,CAChB,CAAC;QAEF,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,CAAC;QAEhD,mDAAmD;QACnD,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACtD,IAAA,sBAAG,EAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YAChD,MAAM,KAAK,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,eAAgC;QAC9D,IAAI;YACF,MAAM,EAAE,eAAe,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC;YAElD,IAAI,IAAI,KAAK,uBAAe,CAAC,IAAI,EAAE;gBACjC,OAAO;aACR;YAED,MAAM,QAAQ,GAAG,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc,EAAE,eAAe,EAAE,CAAC,CAAC;YAExD,MAAM,EAAE,sBAAsB,EAAE,uBAAuB,EAAE,GACvD,MAAM,IAAA,oCAA4B,EAAC,eAAe,EAAE;gBAClD,QAAQ;gBACR,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;gBAC9C,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;aACrD,CAAC,CAAC;YAEL,IAAI,CAAC,eAAe,CAAC,OAAO,CAC1B,GAAG,cAAc,gCAAgC,EACjD;gBACE,eAAe,EAAE,sBAAsB;gBACvC,uBAAuB;aACxB,CACF,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,0BAA0B;YAC1B,IAAA,sBAAG,EAAC,+CAA+C,EAAE,KAAK,CAAC,CAAC;SAC7D;IACH,CAAC;IAqIO,KAAK,CAAC,0BAA0B,CACtC,QAAkB,EAClB,eAAgC;QAEhC,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;SACjE;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,IAAI,CAAC,kCAAkC,CAAC,KAAc,CAAC,EAAE;gBAC3D,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;aAC9D;YACD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;;;;OAKG;IACH,gCAAgC;IAChC,+DAA+D;IAC/D,8DAA8D;IACtD,kCAAkC,CAAC,KAAU;QACnD,OAAO,CACL,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,eAAe,CAAC;YACzC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,eAAe,CAAC,CAChD,CAAC;IACJ,CAAC;CA2UF;AAjnGD,sDAinGC;k5BAj8EC,KAAK,kDAAmB,EACtB,QAAQ,EACR,WAAW,EACX,gBAAgB,EAChB,SAAS,EACT,KAAK,EACL,wBAAwB,EACxB,IAAI,EACJ,aAAa,EACb,eAAe,GAWhB;IACC,+EAA+E;IAC/E,IAAI,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,EAAE;QAC7C,OAAO;KACR;IAED,IAAI,SAAS,EAAE;QACb,wFAAwF;QACxF,SAAS,GAAG,IAAA,6BAAqB,EAAC,SAAS,CAAC,CAAC;QAC7C,IAAA,yBAAiB,EAAC,SAAS,CAAC,CAAC;KAC9B;IAED,IAAA,sBAAG,EAAC,YAAY,KAAK,cAAc,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;IAE/D,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IAC3D,0BAA0B;IAC1B,IAAI,CAAC,eAAe,EAAE;QACpB,OAAO;KACR;IAED,0BAA0B;IAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC5C;IAED,MAAM,WAAW,GACf,IAAA,+CAAuC,EACrC,eAAe,CAAC,QAAQ,EACxB,IAAI,EACJ,SAAS,CACV,CAAC;IAEJ,wBAAwB,EAAE,CAAC,WAAW,CAAC,CAAC;IAExC,MAAM,aAAa,GAAG,IAAA,4BAAkB,EACtC,eAAe,CAAC,OAAO,EACvB,WAAW,CACZ,CAAC;IAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAC9B,aAAa,EACb,eAAe,CAAC,QAAQ,CAAC,IAAI,CAC9B,CAAC;IAEF,MAAM,sBAAsB,GAAG,IAAI,CAAC,wBAAwB,CAC1D,eAAe,EACf,QAAQ,CACT,CAAC;IAEF,MAAM,KAAK,GAAG,IAAA,8BAAoB,EAAC,QAAQ,CAAC,CAAC;IAC7C,MAAM,MAAM,GAAG,WAAW,CAAC,YAAY,IAAI,WAAW,CAAC,QAAQ,CAAC;IAEhE,MAAM,MAAM,GAAG,WAAW,CAAC,YAAY;QACrC,CAAC,CAAC,sBAAsB,CAAC,QAAQ,CAAC,YAAY;QAC9C,CAAC,CAAC,sBAAsB,CAAC,QAAQ,CAAC,QAAQ,CAAC;IAE7C,IAAA,sBAAG,EAAC,cAAc,KAAK,cAAc,EAAE;QACrC,MAAM;QACN,MAAM;QACN,QAAQ,EAAE,WAAW;KACtB,CAAC,CAAC;IAEH,MAAM,EAAE,eAAe,EAAE,GAAG,eAAe,CAAC;IAC5C,MAAM,QAAQ,GAAG,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc,EAAE,eAAe,EAAE,CAAC,CAAC;IAExD,MAAM,kBAAkB,GAAG;QACzB,GAAG,sBAAsB;QACzB,QAAQ;QACR,gBAAgB;QAChB,EAAE,EAAE,IAAA,SAAM,GAAE;QACZ,mBAAmB,EAAE,eAAe,CAAC,QAAQ,CAAC,GAAG;QACjD,YAAY,EAAE,eAAe,CAAC,IAAI;QAClC,KAAK;QACL,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;QAChB,QAAQ,EAAE,WAAW;QACrB,IAAI,EAAE,eAAe;KACtB,CAAC;IAEF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE;QAC3D,GAAG,kBAAkB;QACrB,MAAM,EAAE,KAAK;KACd,CAAC,CAAC;IAEH,kBAAkB,CAAC,IAAI,GAAG,IAAI,CAAC;IAE/B,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;IAErC,yGAAyG;IACzG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,cAAc,sBAAsB,EAAE;QACpE,eAAe,EAAE,kBAAkB;QACnC,QAAQ;KACT,CAAC,CAAC;IAEH,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,cAAc,uBAAuB,EAAE;QACrE,eAAe,EAAE,kBAAkB;QACnC,QAAQ;KACT,CAAC,CAAC;IAEH,WAAW,EAAE,CAAC,kBAAkB,CAAC,CAAC;AACpC,CAAC,iFAw6CW,eAAgC;IAC1C,OAAO,uBAAA,IAAI,uDAA0B,CAAC,gBAAgB,CAAC,EAAE,eAAe,EAAE,CAAC;SACxE,aAAa,CAAC,OAAO,CAAC;AAC3B,CAAC,iGAEmB,EAClB,OAAO,EACP,eAAe,GAIhB;IACC,IAAI,eAAe,EAAE;QACnB,OAAO,eAAe,CAAC;KACxB;IAED,OAAO,uBAAA,IAAI,uDAA0B,CAAC,gBAAgB,CAAC;QACrD,OAAO;KACR,CAAC,CAAC,EAAE,CAAC;AACR,CAAC,mFAEY,EACX,OAAO,EACP,eAAe,GAIhB;IACC,OAAO,IAAI,mBAAQ,CAAC,uBAAA,IAAI,4EAAa,MAAjB,IAAI,EAAc,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC;AACvE,CAAC,mFAEY,EACX,OAAO,EACP,eAAe,GAIhB;IACC,OAAO,uBAAA,IAAI,uDAA0B,CAAC,gBAAgB,CAAC;QACrD,OAAO;QACP,eAAe;KAChB,CAAC,CAAC,QAAQ,CAAC;AACd,CAAC,iGA8YmB,EAClB,QAAQ,EACR,YAAY,EACZ,OAAO,GAKR;IACC,OAAO,IAAI,4BAAY,CAAC;QACtB,kBAAkB;QAClB,8DAA8D;QAC9D,QAAQ,EAAE,QAAe;QACzB,kBAAkB;QAClB,YAAY;QACZ,sBAAsB,EAAE,uBAAA,IAAI,mGAAoC,CAAC,IAAI,CACnE,IAAI,EACJ,OAAO,CACR;QACD,wBAAwB,EAAE,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAC7D,IAAI,EACJ,yBAAiB,CAAC,SAAS,EAC3B,OAAO,CACR;KACF,CAAC,CAAC;AACL,CAAC,2HAEgC,EAC/B,QAAQ,EACR,YAAY,EACZ,OAAO,EACP,eAAe,GAMhB;IACC,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAC,QAAQ,CAAC,CAAC;IAExC,MAAM,yBAAyB,GAAG,IAAI,qDAAyB,CAAC;QAC9D,YAAY;QACZ,UAAU,EAAE,GAAG,EAAE,CAAC,OAAO;QACzB,WAAW,EAAE,GAAG,EAAE,CAAC,QAAQ;QAC3B,kBAAkB,EAAE,GAAG,EAAE,CAAC,eAAe;QACzC,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY;QAC9C,iBAAiB,EAAE,uBAAA,IAAI,wDAA2B,CAAC,iBAAiB;QACpE,aAAa,EAAE,GAAG,EAAE,CAClB,uBAAA,IAAI,uDAA0B,CAAC,6BAA6B,CAAC;YAC3D,OAAO;SACR,CAAC;QACJ,kBAAkB,EAAE,CAAC,SAAS,EAAE,eAAe,EAAE,EAAE,CACjD,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,eAAe,EAAE;YAClD,iBAAiB,EAAE,IAAI;SACxB,CAAC;QACJ,KAAK,EAAE;YACL,6BAA6B,EAC3B,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,CAAC;YAC/C,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;SAC7C;KACF,CAAC,CAAC;IAEH,uBAAA,IAAI,sGAAuC,MAA3C,IAAI,EAAwC,yBAAyB,CAAC,CAAC;IAEvE,OAAO,yBAAyB,CAAC;AACnC,CAAC;IAOC,uBAAA,IAAI,uDAA0B,CAAC,eAAe,EAAE,CAAC;AACnD,CAAC,uIAGC,yBAAoD;IAEpD,yBAAyB,CAAC,GAAG,CAAC,EAAE,CAC9B,cAAc,EACd,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CACvC,CAAC;AACJ,CAAC,6IAGC,yBAAoD;IAEpD,yBAAyB,CAAC,GAAG,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,CAAC;IAC1E,yBAAyB,CAAC,GAAG,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,CAAC;IACxE,yBAAyB,CAAC,GAAG,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;IACvE,yBAAyB,CAAC,GAAG,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,CAAC;AAC1E,CAAC,uIAGC,yBAAoD;IAEpD,yBAAyB,CAAC,GAAG,CAAC,EAAE,CAC9B,uBAAuB,EACvB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CACvC,CAAC;IAEF,yBAAyB,CAAC,GAAG,CAAC,EAAE,CAC9B,qBAAqB,EACrB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAC5C,CAAC;IAEF,yBAAyB,CAAC,GAAG,CAAC,EAAE,CAC9B,oBAAoB,EACpB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAChC,CAAC;IAEF,yBAAyB,CAAC,GAAG,CAAC,EAAE,CAC9B,qBAAqB,EACrB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAClC,CAAC;AACJ,CAAC,iIAEmC,OAAe,EAAE,OAAe;IAClE,MAAM,2BAA2B,GAAG,IAAI,CAAC,2BAA2B,CAClE,yBAAiB,CAAC,SAAS,EAC3B,OAAO,EACP,OAAO,CACR,CAAC;IAEF,MAAM,2BAA2B,GAAG,IAAI,CAAC,8BAA8B,CACrE,OAAO,EACP,OAAO,CACR,CAAC;IACF,OAAO,CAAC,GAAG,2BAA2B,EAAE,GAAG,2BAA2B,CAAC,CAAC;AAC1E,CAAC;IAiCC,IAAI,uBAAA,IAAI,8CAAiB,EAAE;QACzB,OAAO,CAAC,IAAI,+BAAc,EAAE,CAAC,CAAC;KAC/B;IAED,OAAO,CAAC,IAAI,iCAAe,EAAE,EAAE,IAAI,qCAAiB,EAAE,CAAC,CAAC;AAC1D,CAAC;IAGC,OAAO,CAAC,IAAI,mDAAwB,EAAE,EAAE,IAAI,+CAAsB,EAAE,CAAC,CAAC;AACxE,CAAC,+GAGC,EACE,aAAa,EACb,IAAI,EACJ,WAAW,EACX,cAAc,GAMf,EACD,QAAsE;IAEtE,IAAI,wBAAwB,GAAgC,EAAE,CAAC;IAE/D,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;QACpB,MAAM,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC,SAAS,CACxC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,aAAa,CACjC,CAAC;QAEF,IAAI,eAAe,GAAG,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAEhD,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC,IAAI,eAAe,CAAC;QAE/D,IAAI,cAAc,KAAK,IAAI,EAAE;YAC3B,eAAe,CAAC,QAAQ,GAAG,IAAA,kCAA0B,EACnD,eAAe,CAAC,QAAQ,CACzB,CAAC;YAEF,IAAA,6BAAgB,EAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;SAC5C;QAED,wBAAwB;YACtB,uBAAA,IAAI,gGAAiC,MAArC,IAAI,EAAkC,eAAe,CAAC,CAAC;QAEzD,MAAM,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,IAAI,WAAW,CAAC;QAEhE,IAAI,CAAC,iBAAiB,EAAE;YACtB,eAAe,GAAG,IAAA,kCAAwB,EACxC,eAAe,EACf,IAAI,IAAI,qBAAqB,CAC9B,CAAC;SACH;QACD,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,eAAe,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CACzC,aAAa,CACK,CAAC;IAErB,IAAI,wBAAwB,CAAC,MAAM,GAAG,CAAC,EAAE;QACvC,uBAAA,IAAI,2FAA4B,MAAhC,IAAI,EACF,eAAe,EACf,wBAAwB,CACzB,CAAC;KACH;IAED,OAAO,eAAe,CAAC;AACzB,CAAC,sDAED,KAAK,4DACH,eAAgC,EAChC,EACE,YAAY,MAGV,EAAE;IAEN,IAAI,CAAC,uBAAA,IAAI,4DAA+B,MAAnC,IAAI,CAAiC,EAAE;QAC1C,OAAO;KACR;IAED,MAAM,EACJ,OAAO,EACP,EAAE,EAAE,aAAa,EACjB,QAAQ,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,GACvB,GAAG,eAAe,CAAC;IAEpB,MAAM,OAAO,GAAyC;QACpD,OAAO,EAAE,IAAA,mBAAW,EAAC,OAAO,CAAC;QAC7B,EAAE,EAAE,EAAY;QAChB,IAAI;KACL,CAAC;IAEF,IAAA,4BAAe,EAAC,EAAE,CAAC,CAAC;IAEpB,MAAM,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CACtD,CAAC,EAAE,EAAE,EAAE,CACL,EAAE,CAAC,OAAO,KAAK,OAAO;QACtB,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI;QACzB,EAAE,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE;QACrB,EAAE,CAAC,EAAE,KAAK,aAAa,CAC1B,CAAC;IAEF,gFAAgF;IAChF,sEAAsE;IACtE,IAAI,mBAAmB,EAAE;QACvB,OAAO;KACR;IAED,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,uBAAA,IAAI,oCAAO,MAAX,IAAI,EAC1B,EAAE,IAAI,EAAE,8BAA8B,EAAE,aAAa,EAAE,YAAY,EAAE,EACrE,GAAG,EAAE,CAAC,IAAA,4CAA6B,EAAC,OAAO,CAAC,CAC7C,CAAC;QAEF,MAAM,sBAAsB,GAC1B,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC;QAEhD,MAAM,oBAAoB,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAEhE,wBAAwB;QACxB,IAAI,CAAC,oBAAoB,EAAE;YACzB,IAAA,sBAAG,EACD,+DAA+D,EAC/D,aAAa,CACd,CAAC;YACF,OAAO;SACR;QAED,uBAAA,IAAI,0FAA2B,MAA/B,IAAI,EACF;YACE,aAAa;YACb,IAAI,EAAE,8EAA8E;SACrF,EACD,CAAC,MAAM,EAAE,EAAE;YACT,MAAM,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;QACzD,CAAC,CACF,CAAC;QAEF,IAAA,sBAAG,EAAC,gCAAgC,EAAE,aAAa,EAAE;YACnD,sBAAsB;SACvB,CAAC,CAAC;KACJ;IAAC,OAAO,KAAK,EAAE;QACd,IAAA,sBAAG,EACD,qFAAqF,EACrF,KAAK,CACN,CAAC;KACH;AACH,CAAC,2HAEgC,kBAAmC;IAClE,MAAM,EAAE,EAAE,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,kBAAkB,CAAC;IAEtE,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE,QAAQ,CAAC;IAEpE,IAAI,CAAC,cAAc,IAAI,IAAA,gBAAO,EAAC,cAAc,EAAE,SAAS,CAAC,EAAE;QACzD,OAAO,EAAE,CAAC;KACX;IAED,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAgC,CAAC;IAErE,MAAM,iBAAiB,GAAG,MAAM,CAAC,MAAM,CACrC,CAAC,KAAK,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,cAAc,CAAC,KAAK,CAAC,CACtD,CAAC;IAEF,IAAA,sBAAG,EACD,0CAA0C,EAC1C,aAAa,EACb,iBAAiB,EACjB,cAAc,EACd,SAAS,CACV,CAAC;IAEF,OAAO,iBAAiB,CAAC;AAC3B,CAAC,iHAGC,eAAgC,EAChC,aAA0C;IAE1C,IACG,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAW,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAChD,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAC9B,EACD;QACA,IAAA,sBAAG,EAAC,8DAA8D,CAAC,CAAC;QACpE,uBAAA,IAAI,qFAAsB,MAA1B,IAAI,EAAuB,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YAC1D,IAAA,sBAAG,EAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YAC7C,MAAM,KAAK,CAAC;QACd,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,gDAED,KAAK,sDACH,eAAgC,EAChC,EAAE,YAAY,KAAsC,EAAE;IAEtD,MAAM,EAAE,EAAE,EAAE,aAAa,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,eAAe,CAAC;IACjE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC;IAE3C,IAAI,cAAc,GAAmB;QACnC,KAAK,EAAE;YACL,IAAI,EAAE,2BAAmB,CAAC,QAAQ;YAClC,OAAO,EAAE,qBAAqB;SAC/B;QACD,mBAAmB,EAAE,EAAE;KACxB,CAAC;IAEF,IAAI,uBAAA,IAAI,kDAAqB,MAAzB,IAAI,CAAuB,EAAE;QAC/B,uBAAA,IAAI,0FAA2B,MAA/B,IAAI,EACF,EAAE,aAAa,EAAE,WAAW,EAAE,IAAI,EAAE,EACpC,CAAC,MAAM,EAAE,EAAE;YACT,MAAM,CAAC,cAAc,GAAG,SAAS,CAAC;QACpC,CAAC,CACF,CAAC;QAEF,cAAc,GAAG,MAAM,uBAAA,IAAI,oCAAO,MAAX,IAAI,EACzB,EAAE,IAAI,EAAE,UAAU,EAAE,aAAa,EAAE,YAAY,EAAE,EACjD,GAAG,EAAE,CACH,IAAA,8BAAiB,EAAC;YAChB,OAAO;YACP,IAAI,EAAE,IAAW;YACjB,EAAE,EAAE,EAAS;YACb,KAAK,EAAE,KAAY;YACnB,IAAI,EAAE,IAAW;SAClB,CAAC,CACL,CAAC;KACH;IAED,MAAM,oBAAoB,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IAEhE,wBAAwB;IACxB,IAAI,CAAC,oBAAoB,EAAE;QACzB,IAAA,sBAAG,EACD,wDAAwD,EACxD,aAAa,EACb,cAAc,CACf,CAAC;QAEF,OAAO;KACR;IAED,uBAAA,IAAI,0FAA2B,MAA/B,IAAI,EACF;QACE,aAAa;QACb,IAAI,EAAE,qEAAqE;KAC5E,EACD,CAAC,MAAM,EAAE,EAAE;QACT,MAAM,CAAC,cAAc,GAAG,cAAc,CAAC;IACzC,CAAC,CACF,CAAC;IAEF,IAAA,sBAAG,EAAC,yBAAyB,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;AAChE,CAAC,2HAEgC,EAC/B,aAAa,EACb,eAAe,EACf,qBAAqB,EACrB,YAAY,GAMb;IACC,uBAAA,IAAI,0FAA2B,MAA/B,IAAI,EACF,EAAE,aAAa,EAAE,WAAW,EAAE,IAAI,EAAE,EACpC,CAAC,MAAM,EAAE,EAAE;QACT,IAAI,eAAe,EAAE;YACnB,MAAM,CAAC,eAAe,GAAG,eAAe,CAAC;SAC1C;QAED,IAAI,qBAAqB,KAAK,SAAS,EAAE;YACvC,MAAM,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;SACtD;QAED,IAAI,YAAY,EAAE;YAChB,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC;SACpC;IACH,CAAC,CACF,CAAC;AACJ,CAAC;IAGC,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;AAC5E,CAAC,mGAEoB,eAAgC,EAAE,IAAY;IACjE,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GACzD,eAAe,CAAC;IAElB,MAAM,EAAE,8BAA8B,EAAE,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;IAClE,MAAM,oBAAoB,GAAG,8BAA8B,CAAC,OAAc,CAAC,CAAC;IAE5E,MAAM,QAAQ,GAAG,oBAAoB,EAAE,YAAY,CAAC,IAAI,CACtD,CAAC,eAAe,EAAE,EAAE,CAAC,eAAe,CAAC,eAAe,KAAK,eAAe,CACzE,CAAC;IAEF,MAAM,UAAU,GAAG,QAAQ,EAAE,GAAG,CAAC;IACjC,MAAM,WAAW,GAAG,QAAQ,EAAE,IAAI,IAAI,eAAe,CAAC;IAEtD,MAAM,kBAAkB,GAAuB;QAC7C,OAAO;QACP,IAAI;QACJ,WAAW;QACX,UAAU;QACV,MAAM;QACN,cAAc,EAAE,KAAe;QAC/B,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;QAChB,WAAW,EAAE,QAAQ;KACtB,CAAC;IAEF,IAAA,sBAAG,EAAC,yBAAyB,EAAE,kBAAkB,CAAC,CAAC;IAEnD,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;QACpB,MAAM,EAAE,aAAa,EAAE,GAAG,KAAK,CAAC;QAEhC,IAAI,aAAa,CAAC,MAAM,KAAK,oBAAoB,EAAE;YACjD,aAAa,CAAC,GAAG,EAAE,CAAC;SACrB;QAED,aAAa,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type { TypedTransaction } from '@ethereumjs/tx';\nimport type { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  query,\n  ApprovalType,\n  ORIGIN_METAMASK,\n  convertHexToDecimal,\n} from '@metamask/controller-utils';\nimport type { TraceCallback, TraceContext } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  FetchGasFeeEstimateOptions,\n  GasFeeState,\n} from '@metamask/gas-fee-controller';\nimport type {\n  BlockTracker,\n  NetworkClientId,\n  NetworkController,\n  NetworkControllerStateChangeEvent,\n  NetworkState,\n  Provider,\n  NetworkControllerFindNetworkClientIdByChainIdAction,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport { NetworkClientType } from '@metamask/network-controller';\nimport type {\n  NonceLock,\n  Transaction as NonceTrackerTransaction,\n} from '@metamask/nonce-tracker';\nimport { NonceTracker } from '@metamask/nonce-tracker';\nimport { errorCodes, rpcErrors, providerErrors } from '@metamask/rpc-errors';\nimport type { Hex } from '@metamask/utils';\nimport { add0x, hexToNumber } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\n// This package purposefully relies on Node's EventEmitter module.\n// eslint-disable-next-line import-x/no-nodejs-modules\nimport { EventEmitter } from 'events';\nimport { cloneDeep, mapValues, merge, pickBy, sortBy, isEqual } from 'lodash';\nimport { v1 as random } from 'uuid';\n\nimport {\n  getAccountAddressRelationship,\n  type GetAccountAddressRelationshipRequest,\n} from './api/accounts-api';\nimport { DefaultGasFeeFlow } from './gas-flows/DefaultGasFeeFlow';\nimport { LineaGasFeeFlow } from './gas-flows/LineaGasFeeFlow';\nimport { OptimismLayer1GasFeeFlow } from './gas-flows/OptimismLayer1GasFeeFlow';\nimport { ScrollLayer1GasFeeFlow } from './gas-flows/ScrollLayer1GasFeeFlow';\nimport { TestGasFeeFlow } from './gas-flows/TestGasFeeFlow';\nimport { AccountsApiRemoteTransactionSource } from './helpers/AccountsApiRemoteTransactionSource';\nimport { GasFeePoller } from './helpers/GasFeePoller';\nimport type { IncomingTransactionOptions } from './helpers/IncomingTransactionHelper';\nimport { IncomingTransactionHelper } from './helpers/IncomingTransactionHelper';\nimport { MethodDataHelper } from './helpers/MethodDataHelper';\nimport { MultichainTrackingHelper } from './helpers/MultichainTrackingHelper';\nimport { PendingTransactionTracker } from './helpers/PendingTransactionTracker';\nimport { projectLogger as log } from './logger';\nimport type {\n  DappSuggestedGasFees,\n  Layer1GasFeeFlow,\n  SavedGasFees,\n  SecurityProviderRequest,\n  SendFlowHistoryEntry,\n  TransactionParams,\n  TransactionMeta,\n  TransactionReceipt,\n  WalletDevice,\n  SecurityAlertResponse,\n  GasFeeFlow,\n  SimulationData,\n  GasFeeEstimates,\n  GasFeeFlowResponse,\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n  SubmitHistoryEntry,\n} from './types';\nimport {\n  TransactionEnvelopeType,\n  TransactionType,\n  TransactionStatus,\n  SimulationErrorCode,\n} from './types';\nimport type { KeyringControllerSignAuthorization } from './utils/eip7702';\nimport { signAuthorizationList } from './utils/eip7702';\nimport { validateConfirmedExternalTransaction } from './utils/external-transactions';\nimport { addGasBuffer, estimateGas, updateGas } from './utils/gas';\nimport { updateGasFees } from './utils/gas-fees';\nimport { getGasFeeFlow } from './utils/gas-flow';\nimport {\n  addInitialHistorySnapshot,\n  updateTransactionHistory,\n} from './utils/history';\nimport {\n  getTransactionLayer1GasFee,\n  updateTransactionLayer1GasFee,\n} from './utils/layer1-gas-fee-flow';\nimport {\n  getAndFormatTransactionsForNonceTracker,\n  getNextNonce,\n} from './utils/nonce';\nimport { prepareTransaction, serializeTransaction } from './utils/prepare';\nimport { getTransactionParamsWithIncreasedGasFee } from './utils/retry';\nimport { getSimulationData } from './utils/simulation';\nimport {\n  updatePostTransactionBalance,\n  updateSwapsTransaction,\n} from './utils/swaps';\nimport { determineTransactionType } from './utils/transaction-type';\nimport {\n  normalizeTransactionParams,\n  isEIP1559Transaction,\n  validateGasValues,\n  validateIfTransactionUnapproved,\n  normalizeTxError,\n  normalizeGasFeeValues,\n} from './utils/utils';\nimport {\n  validateParamTo,\n  validateTransactionOrigin,\n  validateTxParams,\n} from './utils/validation';\n\n/**\n * Metadata for the TransactionController state, describing how to \"anonymize\"\n * the state and which parts should be persisted.\n */\nconst metadata = {\n  transactions: {\n    persist: true,\n    anonymous: false,\n  },\n  methodData: {\n    persist: true,\n    anonymous: false,\n  },\n  lastFetchedBlockNumbers: {\n    persist: true,\n    anonymous: false,\n  },\n  submitHistory: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\nconst SUBMIT_HISTORY_LIMIT = 100;\n\n/**\n * Object with new transaction's meta and a promise resolving to the\n * transaction hash if successful.\n *\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\n/**\n * Method data registry object\n *\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\nexport type MethodData = {\n  registryMethod: string;\n  parsedRegistryMethod:\n    | {\n        name: string;\n        args: { type: string }[];\n      }\n    | {\n        // We're using `any` instead of `undefined` for compatibility with `Json`\n        // TODO: Correct this type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        name?: any;\n        // We're using `any` instead of `undefined` for compatibility with `Json`\n        // TODO: Correct this type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        args?: any;\n      };\n};\n\n/**\n * Transaction controller state\n *\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n * @property lastFetchedBlockNumbers - Cache to optimise incoming transaction queries\n */\nexport type TransactionControllerState = {\n  transactions: TransactionMeta[];\n  methodData: Record<string, MethodData>;\n  lastFetchedBlockNumbers: { [key: string]: number | string };\n  submitHistory: SubmitHistoryEntry[];\n};\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.1;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * Represents the `TransactionController:getState` action.\n */\nexport type TransactionControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TransactionControllerState\n>;\n\n/**\n * The internal actions available to the TransactionController.\n */\nexport type TransactionControllerActions = TransactionControllerGetStateAction;\n\n/**\n * Configuration options for the PendingTransactionTracker\n *\n * @property isResubmitEnabled - Whether transaction publishing is automatically retried.\n */\nexport type PendingTransactionOptions = {\n  isResubmitEnabled?: () => boolean;\n};\n\n/**\n * TransactionController constructor options.\n *\n * @property disableHistory - Whether to disable storing history in transaction metadata.\n * @property disableSendFlowHistory - Explicitly disable transaction metadata history.\n * @property disableSwaps - Whether to disable additional processing on swaps transactions.\n * @property getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n * @property getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n * @property getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.\n * @property getGasFeeEstimates - Callback to retrieve gas fee estimates.\n * @property getNetworkClientRegistry - Gets the network client registry.\n * @property getNetworkState - Gets the state of the network controller.\n * @property getPermittedAccounts - Get accounts that a given origin has permissions for.\n * @property getSavedGasFees - Gets the saved gas fee config.\n * @property getSelectedAddress - Gets the address of the currently selected account.\n * @property incomingTransactions - Configuration options for incoming transaction support.\n * @property isSimulationEnabled - Whether new transactions will be automatically simulated.\n * @property messenger - The controller messenger.\n * @property pendingTransactions - Configuration options for pending transaction support.\n * @property securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.\n * @property sign - Function used to sign transactions.\n * @property state - Initial state to set on this controller.\n * @property transactionHistoryLimit - Transaction history limit.\n * @property hooks - The controller hooks.\n * @property hooks.afterSign - Additional logic to execute after signing a transaction. Return false to not change the status to signed.\n * @property hooks.beforeApproveOnInit - Additional logic to execute before starting an approval flow for a transaction during initialization. Return false to skip the transaction.\n * @property hooks.beforeCheckPendingTransaction - Additional logic to execute before checking pending transactions. Return false to prevent the broadcast of the transaction.\n * @property hooks.beforePublish - Additional logic to execute before publishing a transaction. Return false to prevent the broadcast of the transaction.\n * @property hooks.getAdditionalSignArguments - Returns additional arguments required to sign a transaction.\n * @property hooks.publish - Alternate logic to publish a transaction.\n */\nexport type TransactionControllerOptions = {\n  disableHistory: boolean;\n  disableSendFlowHistory: boolean;\n  disableSwaps: boolean;\n  getCurrentAccountEIP1559Compatibility?: () => Promise<boolean>;\n  getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n  getExternalPendingTransactions?: (\n    address: string,\n    chainId?: string,\n  ) => NonceTrackerTransaction[];\n  getGasFeeEstimates?: (\n    options: FetchGasFeeEstimateOptions,\n  ) => Promise<GasFeeState>;\n  getNetworkClientRegistry: NetworkController['getNetworkClientRegistry'];\n  getNetworkState: () => NetworkState;\n  getPermittedAccounts?: (origin?: string) => Promise<string[]>;\n  getSavedGasFees?: (chainId: Hex) => SavedGasFees | undefined;\n  incomingTransactions?: IncomingTransactionOptions & {\n    /** API keys to be used for Etherscan requests to prevent rate limiting. */\n    etherscanApiKeysByChainId?: Record<Hex, string>;\n  };\n  isFirstTimeInteractionEnabled?: () => boolean;\n  isSimulationEnabled?: () => boolean;\n  messenger: TransactionControllerMessenger;\n  pendingTransactions?: PendingTransactionOptions;\n  securityProviderRequest?: SecurityProviderRequest;\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n    transactionMeta?: TransactionMeta,\n  ) => Promise<TypedTransaction>;\n  state?: Partial<TransactionControllerState>;\n  testGasFeeFlows?: boolean;\n  trace?: TraceCallback;\n  transactionHistoryLimit: number;\n  hooks: {\n    afterSign?: (\n      transactionMeta: TransactionMeta,\n      signedTx: TypedTransaction,\n    ) => boolean;\n    beforeCheckPendingTransaction?: (\n      transactionMeta: TransactionMeta,\n    ) => boolean;\n    beforePublish?: (transactionMeta: TransactionMeta) => boolean;\n    getAdditionalSignArguments?: (\n      transactionMeta: TransactionMeta,\n    ) => (TransactionMeta | undefined)[];\n    publish?: (\n      transactionMeta: TransactionMeta,\n    ) => Promise<{ transactionHash: string }>;\n  };\n};\n\n/**\n * The name of the {@link TransactionController}.\n */\nconst controllerName = 'TransactionController';\n\n/**\n * The external actions available to the {@link TransactionController}.\n */\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AddApprovalRequest\n  | KeyringControllerSignAuthorization\n  | NetworkControllerFindNetworkClientIdByChainIdAction\n  | NetworkControllerGetNetworkClientByIdAction;\n\n/**\n * The external events available to the {@link TransactionController}.\n */\nexport type AllowedEvents = NetworkControllerStateChangeEvent;\n\n/**\n * Represents the `TransactionController:stateChange` event.\n */\nexport type TransactionControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof controllerName,\n  TransactionControllerState\n>;\n\n/**\n * Represents the `TransactionController:incomingTransactionsReceived` event.\n */\nexport type TransactionControllerIncomingTransactionsReceivedEvent = {\n  type: `${typeof controllerName}:incomingTransactionsReceived`;\n  payload: [incomingTransactions: TransactionMeta[]];\n};\n\n/**\n * Represents the `TransactionController:postTransactionBalanceUpdated` event.\n */\nexport type TransactionControllerPostTransactionBalanceUpdatedEvent = {\n  type: `${typeof controllerName}:postTransactionBalanceUpdated`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      approvalTransactionMeta?: TransactionMeta;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:speedUpTransactionAdded` event.\n */\nexport type TransactionControllerSpeedupTransactionAddedEvent = {\n  type: `${typeof controllerName}:speedupTransactionAdded`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionApproved` event.\n */\nexport type TransactionControllerTransactionApprovedEvent = {\n  type: `${typeof controllerName}:transactionApproved`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      actionId?: string;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionConfirmed` event.\n */\nexport type TransactionControllerTransactionConfirmedEvent = {\n  type: `${typeof controllerName}:transactionConfirmed`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionDropped` event.\n */\nexport type TransactionControllerTransactionDroppedEvent = {\n  type: `${typeof controllerName}:transactionDropped`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionFailed` event.\n */\nexport type TransactionControllerTransactionFailedEvent = {\n  type: `${typeof controllerName}:transactionFailed`;\n  payload: [\n    {\n      actionId?: string;\n      error: string;\n      transactionMeta: TransactionMeta;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionFinished` event.\n */\nexport type TransactionControllerTransactionFinishedEvent = {\n  type: `${typeof controllerName}:transactionFinished`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionNewSwapApproval` event.\n */\nexport type TransactionControllerTransactionNewSwapApprovalEvent = {\n  type: `${typeof controllerName}:transactionNewSwapApproval`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionNewSwap` event.\n */\nexport type TransactionControllerTransactionNewSwapEvent = {\n  type: `${typeof controllerName}:transactionNewSwap`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionNewSwapApproval` event.\n */\nexport type TransactionControllerTransactionNewSwapAndSendEvent = {\n  type: `${typeof controllerName}:transactionNewSwapAndSend`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionPublishingSkipped` event.\n */\nexport type TransactionControllerTransactionPublishingSkipped = {\n  type: `${typeof controllerName}:transactionPublishingSkipped`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionRejected` event.\n */\nexport type TransactionControllerTransactionRejectedEvent = {\n  type: `${typeof controllerName}:transactionRejected`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      actionId?: string;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionStatusUpdated` event.\n */\nexport type TransactionControllerTransactionStatusUpdatedEvent = {\n  type: `${typeof controllerName}:transactionStatusUpdated`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionSubmitted` event.\n */\nexport type TransactionControllerTransactionSubmittedEvent = {\n  type: `${typeof controllerName}:transactionSubmitted`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      actionId?: string;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:unapprovedTransactionAdded` event.\n */\nexport type TransactionControllerUnapprovedTransactionAddedEvent = {\n  type: `${typeof controllerName}:unapprovedTransactionAdded`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * The internal events available to the {@link TransactionController}.\n */\nexport type TransactionControllerEvents =\n  | TransactionControllerIncomingTransactionsReceivedEvent\n  | TransactionControllerPostTransactionBalanceUpdatedEvent\n  | TransactionControllerSpeedupTransactionAddedEvent\n  | TransactionControllerStateChangeEvent\n  | TransactionControllerTransactionApprovedEvent\n  | TransactionControllerTransactionConfirmedEvent\n  | TransactionControllerTransactionDroppedEvent\n  | TransactionControllerTransactionFailedEvent\n  | TransactionControllerTransactionFinishedEvent\n  | TransactionControllerTransactionNewSwapApprovalEvent\n  | TransactionControllerTransactionNewSwapEvent\n  | TransactionControllerTransactionNewSwapAndSendEvent\n  | TransactionControllerTransactionPublishingSkipped\n  | TransactionControllerTransactionRejectedEvent\n  | TransactionControllerTransactionStatusUpdatedEvent\n  | TransactionControllerTransactionSubmittedEvent\n  | TransactionControllerUnapprovedTransactionAddedEvent;\n\n/**\n * The messenger of the {@link TransactionController}.\n */\nexport type TransactionControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  TransactionControllerActions | AllowedActions,\n  TransactionControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Possible states of the approve transaction step.\n */\nexport enum ApprovalState {\n  Approved = 'approved',\n  NotApproved = 'not-approved',\n  SkippedViaBeforePublishHook = 'skipped-via-before-publish-hook',\n}\n\n/**\n * Get the default TransactionsController state.\n *\n * @returns The default TransactionsController state.\n */\nfunction getDefaultTransactionControllerState(): TransactionControllerState {\n  return {\n    methodData: {},\n    transactions: [],\n    lastFetchedBlockNumbers: {},\n    submitHistory: [],\n  };\n}\n\n/**\n * Controller responsible for submitting and managing transactions.\n */\nexport class TransactionController extends BaseController<\n  typeof controllerName,\n  TransactionControllerState,\n  TransactionControllerMessenger\n> {\n  readonly #internalEvents = new EventEmitter();\n\n  private readonly isHistoryDisabled: boolean;\n\n  private readonly isSwapsDisabled: boolean;\n\n  private readonly isSendFlowHistoryDisabled: boolean;\n\n  private readonly approvingTransactionIds: Set<string> = new Set();\n\n  readonly #methodDataHelper: MethodDataHelper;\n\n  private readonly mutex = new Mutex();\n\n  private readonly gasFeeFlows: GasFeeFlow[];\n\n  private readonly getSavedGasFees: (chainId: Hex) => SavedGasFees | undefined;\n\n  private readonly getNetworkState: () => NetworkState;\n\n  private readonly getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;\n\n  private readonly getCurrentNetworkEIP1559Compatibility: (\n    networkClientId?: NetworkClientId,\n  ) => Promise<boolean>;\n\n  private readonly getGasFeeEstimates: (\n    options: FetchGasFeeEstimateOptions,\n  ) => Promise<GasFeeState>;\n\n  private readonly getPermittedAccounts?: (\n    origin?: string,\n  ) => Promise<string[]>;\n\n  private readonly getExternalPendingTransactions: (\n    address: string,\n    chainId?: string,\n  ) => NonceTrackerTransaction[];\n\n  readonly #incomingTransactionChainIds: Set<Hex> = new Set();\n\n  readonly #incomingTransactionHelper: IncomingTransactionHelper;\n\n  private readonly layer1GasFeeFlows: Layer1GasFeeFlow[];\n\n  readonly #incomingTransactionOptions: IncomingTransactionOptions & {\n    etherscanApiKeysByChainId?: Record<Hex, string>;\n  };\n\n  private readonly securityProviderRequest?: SecurityProviderRequest;\n\n  readonly #pendingTransactionOptions: PendingTransactionOptions;\n\n  private readonly signAbortCallbacks: Map<string, () => void> = new Map();\n\n  readonly #trace: TraceCallback;\n\n  readonly #transactionHistoryLimit: number;\n\n  readonly #isFirstTimeInteractionEnabled: () => boolean;\n\n  readonly #isSimulationEnabled: () => boolean;\n\n  readonly #testGasFeeFlows: boolean;\n\n  private readonly afterSign: (\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ) => boolean;\n\n  private readonly beforeCheckPendingTransaction: (\n    transactionMeta: TransactionMeta,\n  ) => boolean;\n\n  private readonly beforePublish: (transactionMeta: TransactionMeta) => boolean;\n\n  private readonly publish: (\n    transactionMeta: TransactionMeta,\n    rawTx: string,\n  ) => Promise<{ transactionHash?: string }>;\n\n  private readonly getAdditionalSignArguments: (\n    transactionMeta: TransactionMeta,\n  ) => (TransactionMeta | undefined)[];\n\n  private failTransaction(\n    transactionMeta: TransactionMeta,\n    error: Error,\n    actionId?: string,\n  ) {\n    let newTransactionMeta: TransactionMeta;\n\n    try {\n      newTransactionMeta = this.#updateTransactionInternal(\n        {\n          transactionId: transactionMeta.id,\n          note: 'TransactionController#failTransaction - Add error message and set status to failed',\n          skipValidation: true,\n        },\n        (draftTransactionMeta) => {\n          draftTransactionMeta.status = TransactionStatus.failed;\n\n          (\n            draftTransactionMeta as TransactionMeta & {\n              status: TransactionStatus.failed;\n            }\n          ).error = normalizeTxError(error);\n        },\n      );\n    } catch (err: unknown) {\n      log('Failed to mark transaction as failed', err);\n\n      newTransactionMeta = {\n        ...transactionMeta,\n        status: TransactionStatus.failed,\n        error: normalizeTxError(error),\n      };\n    }\n\n    this.messagingSystem.publish(`${controllerName}:transactionFailed`, {\n      actionId,\n      error: error.message,\n      transactionMeta: newTransactionMeta,\n    });\n\n    this.onTransactionStatusChange(newTransactionMeta);\n\n    this.messagingSystem.publish(\n      `${controllerName}:transactionFinished`,\n      newTransactionMeta,\n    );\n\n    this.#internalEvents.emit(\n      `${transactionMeta.id}:finished`,\n      newTransactionMeta,\n    );\n  }\n\n  readonly #multichainTrackingHelper: MultichainTrackingHelper;\n\n  /**\n   * Method used to sign transactions\n   */\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n    transactionMeta?: TransactionMeta,\n  ) => Promise<TypedTransaction>;\n\n  /**\n   * Constructs a TransactionController.\n   *\n   * @param options - The controller options.\n   * @param options.disableHistory - Whether to disable storing history in transaction metadata.\n   * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.\n   * @param options.disableSwaps - Whether to disable additional processing on swaps transactions.\n   * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n   * @param options.getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.\n   * @param options.getGasFeeEstimates - Callback to retrieve gas fee estimates.\n   * @param options.getNetworkClientRegistry - Gets the network client registry.\n   * @param options.getNetworkState - Gets the state of the network controller.\n   * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.\n   * @param options.getSavedGasFees - Gets the saved gas fee config.\n   * @param options.incomingTransactions - Configuration options for incoming transaction support.\n   * @param options.isFirstTimeInteractionEnabled - Whether first time interaction checks are enabled.\n   * @param options.isSimulationEnabled - Whether new transactions will be automatically simulated.\n   * @param options.messenger - The controller messenger.\n   * @param options.pendingTransactions - Configuration options for pending transaction support.\n   * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.\n   * @param options.sign - Function used to sign transactions.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.testGasFeeFlows - Whether to use the test gas fee flow.\n   * @param options.trace - Callback to generate trace information.\n   * @param options.transactionHistoryLimit - Transaction history limit.\n   * @param options.hooks - The controller hooks.\n   */\n  constructor({\n    disableHistory,\n    disableSendFlowHistory,\n    disableSwaps,\n    getCurrentAccountEIP1559Compatibility,\n    getCurrentNetworkEIP1559Compatibility,\n    getExternalPendingTransactions,\n    getGasFeeEstimates,\n    getNetworkClientRegistry,\n    getNetworkState,\n    getPermittedAccounts,\n    getSavedGasFees,\n    incomingTransactions = {},\n    isFirstTimeInteractionEnabled,\n    isSimulationEnabled,\n    messenger,\n    pendingTransactions = {},\n    securityProviderRequest,\n    sign,\n    state,\n    testGasFeeFlows,\n    trace,\n    transactionHistoryLimit = 40,\n    hooks,\n  }: TransactionControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTransactionControllerState(),\n        ...state,\n      },\n    });\n\n    this.messagingSystem = messenger;\n    this.getNetworkState = getNetworkState;\n    this.isSendFlowHistoryDisabled = disableSendFlowHistory ?? false;\n    this.isHistoryDisabled = disableHistory ?? false;\n    this.isSwapsDisabled = disableSwaps ?? false;\n    this.#isFirstTimeInteractionEnabled =\n      isFirstTimeInteractionEnabled ?? (() => true);\n    this.#isSimulationEnabled = isSimulationEnabled ?? (() => false);\n    this.getSavedGasFees = getSavedGasFees ?? ((_chainId) => undefined);\n    this.getCurrentAccountEIP1559Compatibility =\n      getCurrentAccountEIP1559Compatibility ?? (() => Promise.resolve(true));\n    this.getCurrentNetworkEIP1559Compatibility =\n      getCurrentNetworkEIP1559Compatibility;\n    this.getGasFeeEstimates =\n      getGasFeeEstimates || (() => Promise.resolve({} as GasFeeState));\n    this.getPermittedAccounts = getPermittedAccounts;\n    this.getExternalPendingTransactions =\n      getExternalPendingTransactions ?? (() => []);\n    this.securityProviderRequest = securityProviderRequest;\n    this.#incomingTransactionOptions = incomingTransactions;\n    this.#pendingTransactionOptions = pendingTransactions;\n    this.#transactionHistoryLimit = transactionHistoryLimit;\n    this.sign = sign;\n    this.#testGasFeeFlows = testGasFeeFlows === true;\n    this.#trace = trace ?? (((_request, fn) => fn?.()) as TraceCallback);\n\n    this.afterSign = hooks?.afterSign ?? (() => true);\n    this.beforeCheckPendingTransaction =\n      hooks?.beforeCheckPendingTransaction ??\n      /* istanbul ignore next */\n      (() => true);\n    this.beforePublish = hooks?.beforePublish ?? (() => true);\n    this.getAdditionalSignArguments =\n      hooks?.getAdditionalSignArguments ?? (() => []);\n    this.publish =\n      hooks?.publish ?? (() => Promise.resolve({ transactionHash: undefined }));\n\n    const findNetworkClientIdByChainId = (chainId: Hex) => {\n      return this.messagingSystem.call(\n        `NetworkController:findNetworkClientIdByChainId`,\n        chainId,\n      );\n    };\n\n    this.#multichainTrackingHelper = new MultichainTrackingHelper({\n      findNetworkClientIdByChainId,\n      getNetworkClientById: ((networkClientId: NetworkClientId) => {\n        return this.messagingSystem.call(\n          `NetworkController:getNetworkClientById`,\n          networkClientId,\n        );\n      }) as NetworkController['getNetworkClientById'],\n      getNetworkClientRegistry,\n      removePendingTransactionTrackerListeners:\n        this.#removePendingTransactionTrackerListeners.bind(this),\n      createNonceTracker: this.#createNonceTracker.bind(this),\n      createPendingTransactionTracker:\n        this.#createPendingTransactionTracker.bind(this),\n      onNetworkStateChange: (listener) => {\n        this.messagingSystem.subscribe(\n          'NetworkController:stateChange',\n          listener,\n        );\n      },\n    });\n    this.#multichainTrackingHelper.initialize();\n\n    this.gasFeeFlows = this.#getGasFeeFlows();\n    this.layer1GasFeeFlows = this.#getLayer1GasFeeFlows();\n\n    const gasFeePoller = new GasFeePoller({\n      findNetworkClientIdByChainId,\n      gasFeeFlows: this.gasFeeFlows,\n      getGasFeeControllerEstimates: this.getGasFeeEstimates,\n      getProvider: (networkClientId) => this.#getProvider({ networkClientId }),\n      getTransactions: () => this.state.transactions,\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      onStateChange: (listener) => {\n        this.messagingSystem.subscribe(\n          'TransactionController:stateChange',\n          listener,\n        );\n      },\n    });\n\n    gasFeePoller.hub.on(\n      'transaction-updated',\n      this.#onGasFeePollerTransactionUpdate.bind(this),\n    );\n\n    this.#methodDataHelper = new MethodDataHelper({\n      getProvider: (networkClientId) => this.#getProvider({ networkClientId }),\n      getState: () => this.state.methodData,\n    });\n\n    this.#methodDataHelper.hub.on(\n      'update',\n      ({ fourBytePrefix, methodData }) => {\n        this.update((_state) => {\n          _state.methodData[fourBytePrefix] = methodData;\n        });\n      },\n    );\n\n    const updateCache = (fn: (cache: Record<string, unknown>) => void) => {\n      this.update((_state) => {\n        fn(_state.lastFetchedBlockNumbers);\n      });\n    };\n\n    this.#incomingTransactionHelper = new IncomingTransactionHelper({\n      getCache: () => this.state.lastFetchedBlockNumbers,\n      getChainIds: () => [...this.#incomingTransactionChainIds],\n      getCurrentAccount: () => this.#getSelectedAccount(),\n      getLocalTransactions: () => this.state.transactions,\n      includeTokenTransfers:\n        this.#incomingTransactionOptions.includeTokenTransfers,\n      isEnabled: this.#incomingTransactionOptions.isEnabled,\n      queryEntireHistory: this.#incomingTransactionOptions.queryEntireHistory,\n      remoteTransactionSource: new AccountsApiRemoteTransactionSource(),\n      trimTransactions: this.trimTransactionsForState.bind(this),\n      updateCache,\n      updateTransactions: this.#incomingTransactionOptions.updateTransactions,\n    });\n\n    this.#addIncomingTransactionHelperListeners(\n      this.#incomingTransactionHelper,\n    );\n\n    // when transactionsController state changes\n    // check for pending transactions and start polling if there are any\n    this.messagingSystem.subscribe(\n      'TransactionController:stateChange',\n      this.#checkForPendingTransactionAndStartPolling,\n    );\n\n    this.onBootCleanup();\n    this.#checkForPendingTransactionAndStartPolling();\n  }\n\n  /**\n   * Stops polling and removes listeners to prepare the controller for garbage collection.\n   */\n  destroy() {\n    this.#stopAllTracking();\n  }\n\n  /**\n   * Handle new method data request.\n   *\n   * @param fourBytePrefix - The method prefix.\n   * @param networkClientId - The ID of the network client used to fetch the method data.\n   * @returns The method data object corresponding to the given signature prefix.\n   */\n  async handleMethodData(\n    fourBytePrefix: string,\n    networkClientId: NetworkClientId,\n  ): Promise<MethodData> {\n    return this.#methodDataHelper.lookup(fourBytePrefix, networkClientId);\n  }\n\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param txParams - Standard parameters for an Ethereum transaction.\n   * @param options - Additional options to control how the transaction is added.\n   * @param options.actionId - Unique ID to prevent duplicate requests.\n   * @param options.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.\n   * @param options.method - RPC method that requested the transaction.\n   * @param options.origin - The origin of the transaction request, such as a dApp hostname.\n   * @param options.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.\n   * @param options.securityAlertResponse - Response from security validator.\n   * @param options.sendFlowHistory - The sendFlowHistory entries to add.\n   * @param options.type - Type of transaction to add, such as 'cancel' or 'swap'.\n   * @param options.swaps - Options for swaps transactions.\n   * @param options.swaps.hasApproveTx - Whether the transaction has an approval transaction.\n   * @param options.swaps.meta - Metadata for swap transaction.\n   * @param options.networkClientId - The id of the network client for this transaction.\n   * @param options.traceContext - The parent context for any new traces.\n   * @returns Object containing a promise resolving to the transaction hash if approved.\n   */\n  async addTransaction(\n    txParams: TransactionParams,\n    options: {\n      actionId?: string;\n      deviceConfirmedOn?: WalletDevice;\n      method?: string;\n      networkClientId: NetworkClientId;\n      origin?: string;\n      requireApproval?: boolean | undefined;\n      securityAlertResponse?: SecurityAlertResponse;\n      sendFlowHistory?: SendFlowHistoryEntry[];\n      swaps?: {\n        hasApproveTx?: boolean;\n        meta?: Partial<TransactionMeta>;\n      };\n      traceContext?: unknown;\n      type?: TransactionType;\n    },\n  ): Promise<Result> {\n    log('Adding transaction', txParams, options);\n\n    const {\n      actionId,\n      deviceConfirmedOn,\n      method,\n      networkClientId,\n      origin,\n      requireApproval,\n      securityAlertResponse,\n      sendFlowHistory,\n      swaps = {},\n      traceContext,\n      type,\n    } = options;\n\n    txParams = normalizeTransactionParams(txParams);\n\n    if (!this.#multichainTrackingHelper.has(networkClientId)) {\n      throw new Error(\n        `Network client not found - ${networkClientId as string}`,\n      );\n    }\n\n    const permittedAddresses =\n      origin === undefined\n        ? undefined\n        : await this.getPermittedAccounts?.(origin);\n\n    const selectedAddress = this.#getSelectedAccount().address;\n\n    await validateTransactionOrigin({\n      from: txParams.from,\n      origin,\n      permittedAddresses,\n      selectedAddress,\n      txParams,\n    });\n\n    const isEIP1559Compatible =\n      await this.getEIP1559Compatibility(networkClientId);\n\n    validateTxParams(txParams, isEIP1559Compatible);\n\n    const dappSuggestedGasFees = this.generateDappSuggestedGasFees(\n      txParams,\n      origin,\n    );\n\n    const chainId = this.#getChainId(networkClientId);\n\n    const ethQuery = this.#getEthQuery({\n      networkClientId,\n    });\n\n    const transactionType =\n      type ?? (await determineTransactionType(txParams, ethQuery)).type;\n\n    const existingTransactionMeta = this.getTransactionWithActionId(actionId);\n\n    // If a request to add a transaction with the same actionId is submitted again, a new transaction will not be created for it.\n    let addedTransactionMeta = existingTransactionMeta\n      ? cloneDeep(existingTransactionMeta)\n      : {\n          // Add actionId to txMeta to check if same actionId is seen again\n          actionId,\n          chainId,\n          dappSuggestedGasFees,\n          deviceConfirmedOn,\n          id: random(),\n          isFirstTimeInteraction: undefined,\n          networkClientId,\n          origin,\n          securityAlertResponse,\n          status: TransactionStatus.unapproved as const,\n          time: Date.now(),\n          txParams,\n          type: transactionType,\n          userEditedGasLimit: false,\n          verifiedOnBlockchain: false,\n        };\n\n    await this.#trace(\n      { name: 'Estimate Gas Properties', parentContext: traceContext },\n      (context) =>\n        this.updateGasProperties(addedTransactionMeta, {\n          traceContext: context,\n        }),\n    );\n\n    // Checks if a transaction already exists with a given actionId\n    if (!existingTransactionMeta) {\n      // Set security provider response\n      if (method && this.securityProviderRequest) {\n        const securityProviderResponse = await this.securityProviderRequest(\n          addedTransactionMeta,\n          method,\n        );\n        addedTransactionMeta.securityProviderResponse =\n          securityProviderResponse;\n      }\n\n      if (!this.isSendFlowHistoryDisabled) {\n        addedTransactionMeta.sendFlowHistory = sendFlowHistory ?? [];\n      }\n      // Initial history push\n      if (!this.isHistoryDisabled) {\n        addedTransactionMeta = addInitialHistorySnapshot(addedTransactionMeta);\n      }\n\n      addedTransactionMeta = updateSwapsTransaction(\n        addedTransactionMeta,\n        transactionType,\n        swaps,\n        {\n          isSwapsDisabled: this.isSwapsDisabled,\n          cancelTransaction: this.cancelTransaction.bind(this),\n          messenger: this.messagingSystem,\n        },\n      );\n\n      this.addMetadata(addedTransactionMeta);\n\n      if (requireApproval !== false) {\n        if (this.#isSimulationEnabled()) {\n          this.#updateSimulationData(addedTransactionMeta, {\n            traceContext,\n          }).catch((error) => {\n            log('Error while updating simulation data', error);\n            throw error;\n          });\n        }\n        this.#updateFirstTimeInteraction(addedTransactionMeta, {\n          traceContext,\n        }).catch((error) => {\n          log('Error while updating first interaction properties', error);\n        });\n      } else {\n        log(\n          'Skipping simulation & first interaction update as approval not required',\n        );\n      }\n\n      this.messagingSystem.publish(\n        `${controllerName}:unapprovedTransactionAdded`,\n        addedTransactionMeta,\n      );\n    }\n\n    return {\n      result: this.processApproval(addedTransactionMeta, {\n        isExisting: Boolean(existingTransactionMeta),\n        requireApproval,\n        actionId,\n        traceContext,\n      }),\n      transactionMeta: addedTransactionMeta,\n    };\n  }\n\n  startIncomingTransactionPolling(chainIds: Hex[]) {\n    chainIds.forEach((chainId) =>\n      this.#incomingTransactionChainIds.add(chainId),\n    );\n\n    this.#incomingTransactionHelper.start();\n  }\n\n  stopIncomingTransactionPolling(chainIds?: Hex[]) {\n    chainIds?.forEach((chainId) =>\n      this.#incomingTransactionChainIds.delete(chainId),\n    );\n\n    if (!chainIds) {\n      this.#incomingTransactionChainIds.clear();\n    }\n\n    if (this.#incomingTransactionChainIds.size === 0) {\n      this.#incomingTransactionHelper.stop();\n    }\n  }\n\n  async updateIncomingTransactions(chainIds: Hex[]) {\n    chainIds.forEach((chainId) =>\n      this.#incomingTransactionChainIds.add(chainId),\n    );\n\n    await this.#incomingTransactionHelper.update();\n  }\n\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param gasValues - The gas values to use for the cancellation transaction.\n   * @param options - The options for the cancellation transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests.\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async stopTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      estimatedBaseFee,\n      actionId,\n    }: { estimatedBaseFee?: string; actionId?: string } = {},\n  ) {\n    return await this.#retryTransaction({\n      actionId,\n      estimatedBaseFee,\n      gasValues,\n      label: 'cancel',\n      rate: CANCEL_RATE,\n      transactionId,\n      transactionType: TransactionType.cancel,\n      prepareTransactionParams: (txParams) => {\n        delete txParams.data;\n        txParams.to = txParams.from;\n        txParams.value = '0x0';\n      },\n      afterSubmit: (newTransactionMeta) => {\n        this.messagingSystem.publish(\n          `${controllerName}:transactionFinished`,\n          newTransactionMeta,\n        );\n\n        this.#internalEvents.emit(\n          `${newTransactionMeta.id}:finished`,\n          newTransactionMeta,\n        );\n      },\n    });\n  }\n\n  /**\n   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.\n   *\n   * @param transactionId - The ID of the transaction to speed up.\n   * @param gasValues - The gas values to use for the speed up transaction.\n   * @param options - The options for the speed up transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async speedUpTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      actionId,\n      estimatedBaseFee,\n    }: { actionId?: string; estimatedBaseFee?: string } = {},\n  ) {\n    return await this.#retryTransaction({\n      actionId,\n      estimatedBaseFee,\n      gasValues,\n      label: 'speed up',\n      rate: SPEED_UP_RATE,\n      transactionId,\n      transactionType: TransactionType.retry,\n      afterSubmit: (newTransactionMeta) => {\n        this.messagingSystem.publish(\n          `${controllerName}:speedupTransactionAdded`,\n          newTransactionMeta,\n        );\n      },\n    });\n  }\n\n  async #retryTransaction({\n    actionId,\n    afterSubmit,\n    estimatedBaseFee,\n    gasValues,\n    label,\n    prepareTransactionParams,\n    rate,\n    transactionId,\n    transactionType,\n  }: {\n    actionId?: string;\n    afterSubmit?: (transactionMeta: TransactionMeta) => void;\n    estimatedBaseFee?: string;\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values;\n    label: string;\n    prepareTransactionParams?: (txParams: TransactionParams) => void;\n    rate: number;\n    transactionId: string;\n    transactionType: TransactionType;\n  }) {\n    // If transaction is found for same action id, do not create a new transaction.\n    if (this.getTransactionWithActionId(actionId)) {\n      return;\n    }\n\n    if (gasValues) {\n      // Not good practice to reassign a parameter but temporarily avoiding a larger refactor.\n      gasValues = normalizeGasFeeValues(gasValues);\n      validateGasValues(gasValues);\n    }\n\n    log(`Creating ${label} transaction`, transactionId, gasValues);\n\n    const transactionMeta = this.getTransaction(transactionId);\n    /* istanbul ignore next */\n    if (!transactionMeta) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const newTxParams: TransactionParams =\n      getTransactionParamsWithIncreasedGasFee(\n        transactionMeta.txParams,\n        rate,\n        gasValues,\n      );\n\n    prepareTransactionParams?.(newTxParams);\n\n    const unsignedEthTx = prepareTransaction(\n      transactionMeta.chainId,\n      newTxParams,\n    );\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from,\n    );\n\n    const transactionMetaWithRsv = this.updateTransactionMetaRSV(\n      transactionMeta,\n      signedTx,\n    );\n\n    const rawTx = serializeTransaction(signedTx);\n    const newFee = newTxParams.maxFeePerGas ?? newTxParams.gasPrice;\n\n    const oldFee = newTxParams.maxFeePerGas\n      ? transactionMetaWithRsv.txParams.maxFeePerGas\n      : transactionMetaWithRsv.txParams.gasPrice;\n\n    log(`Submitting ${label} transaction`, {\n      oldFee,\n      newFee,\n      txParams: newTxParams,\n    });\n\n    const { networkClientId } = transactionMeta;\n    const ethQuery = this.#getEthQuery({ networkClientId });\n\n    const newTransactionMeta = {\n      ...transactionMetaWithRsv,\n      actionId,\n      estimatedBaseFee,\n      id: random(),\n      originalGasEstimate: transactionMeta.txParams.gas,\n      originalType: transactionMeta.type,\n      rawTx,\n      time: Date.now(),\n      txParams: newTxParams,\n      type: transactionType,\n    };\n\n    const hash = await this.publishTransactionForRetry(ethQuery, {\n      ...newTransactionMeta,\n      origin: label,\n    });\n\n    newTransactionMeta.hash = hash;\n\n    this.addMetadata(newTransactionMeta);\n\n    // speedUpTransaction has no approval request, so we assume the user has already approved the transaction\n    this.messagingSystem.publish(`${controllerName}:transactionApproved`, {\n      transactionMeta: newTransactionMeta,\n      actionId,\n    });\n\n    this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {\n      transactionMeta: newTransactionMeta,\n      actionId,\n    });\n\n    afterSubmit?.(newTransactionMeta);\n  }\n\n  /**\n   * Estimates required gas for a given transaction.\n   *\n   * @param transaction - The transaction to estimate gas for.\n   * @param networkClientId - The network client id to use for the estimate.\n   * @returns The gas and gas price.\n   */\n  async estimateGas(\n    transaction: TransactionParams,\n    networkClientId: NetworkClientId,\n  ) {\n    const ethQuery = this.#getEthQuery({\n      networkClientId,\n    });\n\n    const { estimatedGas, simulationFails } = await estimateGas(\n      transaction,\n      ethQuery,\n    );\n\n    return { gas: estimatedGas, simulationFails };\n  }\n\n  /**\n   * Estimates required gas for a given transaction and add additional gas buffer with the given multiplier.\n   *\n   * @param transaction - The transaction params to estimate gas for.\n   * @param multiplier - The multiplier to use for the gas buffer.\n   * @param networkClientId - The network client id to use for the estimate.\n   */\n  async estimateGasBuffered(\n    transaction: TransactionParams,\n    multiplier: number,\n    networkClientId: NetworkClientId,\n  ) {\n    const ethQuery = this.#getEthQuery({\n      networkClientId,\n    });\n\n    const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(\n      transaction,\n      ethQuery,\n    );\n\n    const gas = addGasBuffer(estimatedGas, blockGasLimit, multiplier);\n\n    return {\n      gas,\n      simulationFails,\n    };\n  }\n\n  /**\n   * Updates an existing transaction in state.\n   *\n   * @param transactionMeta - The new transaction to store in state.\n   * @param note - A note or update reason to include in the transaction history.\n   */\n  updateTransaction(transactionMeta: TransactionMeta, note: string) {\n    const { id: transactionId } = transactionMeta;\n\n    this.#updateTransactionInternal({ transactionId, note }, () => ({\n      ...transactionMeta,\n    }));\n  }\n\n  /**\n   * Update the security alert response for a transaction.\n   *\n   * @param transactionId - ID of the transaction.\n   * @param securityAlertResponse - The new security alert response for the transaction.\n   */\n  updateSecurityAlertResponse(\n    transactionId: string,\n    securityAlertResponse: SecurityAlertResponse,\n  ) {\n    if (!securityAlertResponse) {\n      throw new Error(\n        'updateSecurityAlertResponse: securityAlertResponse should not be null',\n      );\n    }\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update security alert response as no transaction metadata found`,\n      );\n    }\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      securityAlertResponse,\n    };\n    this.updateTransaction(\n      updatedTransactionMeta,\n      `${controllerName}:updatesecurityAlertResponse - securityAlertResponse updated`,\n    );\n  }\n\n  /**\n   * Remove transactions from state.\n   *\n   * @param options - The options bag.\n   * @param options.address - Remove transactions from this account only. Defaults to all accounts.\n   * @param options.chainId - Remove transactions for the specified chain only. Defaults to all chains.\n   */\n  wipeTransactions({\n    address,\n    chainId,\n  }: {\n    address?: string;\n    chainId?: string;\n  } = {}) {\n    if (!chainId && !address) {\n      this.update((state) => {\n        state.transactions = [];\n      });\n\n      return;\n    }\n\n    const newTransactions = this.state.transactions.filter(\n      ({ chainId: txChainId, txParams }) => {\n        const isMatchingNetwork = !chainId || chainId === txChainId;\n\n        if (!isMatchingNetwork) {\n          return true;\n        }\n\n        const isMatchingAddress =\n          !address || txParams.from?.toLowerCase() === address.toLowerCase();\n\n        return !isMatchingAddress;\n      },\n    );\n\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState(newTransactions);\n    });\n  }\n\n  /**\n   * Adds external provided transaction to state as confirmed transaction.\n   *\n   * @param transactionMeta - TransactionMeta to add transactions.\n   * @param transactionReceipt - TransactionReceipt of the external transaction.\n   * @param baseFeePerGas - Base fee per gas of the external transaction.\n   */\n  async confirmExternalTransaction(\n    transactionMeta: TransactionMeta,\n    transactionReceipt: TransactionReceipt,\n    baseFeePerGas: Hex,\n  ) {\n    // Run validation and add external transaction to state.\n    const newTransactionMeta = this.addExternalTransaction(transactionMeta);\n\n    try {\n      const transactionId = newTransactionMeta.id;\n\n      // Make sure status is confirmed and define gasUsed as in receipt.\n      const updatedTransactionMeta = {\n        ...newTransactionMeta,\n        status: TransactionStatus.confirmed as const,\n        txReceipt: transactionReceipt,\n      };\n      if (baseFeePerGas) {\n        updatedTransactionMeta.baseFeePerGas = baseFeePerGas;\n      }\n\n      // Update same nonce local transactions as dropped and define replacedBy properties.\n      this.markNonceDuplicatesDropped(transactionId);\n\n      // Update external provided transaction with updated gas values and confirmed status.\n      this.updateTransaction(\n        updatedTransactionMeta,\n        `${controllerName}:confirmExternalTransaction - Add external transaction`,\n      );\n      this.onTransactionStatusChange(updatedTransactionMeta);\n\n      // Intentional given potential duration of process.\n      this.updatePostBalance(updatedTransactionMeta).catch((error) => {\n        log('Error while updating post balance', error);\n        throw error;\n      });\n\n      this.messagingSystem.publish(\n        `${controllerName}:transactionConfirmed`,\n        updatedTransactionMeta,\n      );\n    } catch (error) {\n      console.error('Failed to confirm external transaction', error);\n    }\n  }\n\n  /**\n   * Append new send flow history to a transaction.\n   *\n   * @param transactionID - The ID of the transaction to update.\n   * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.\n   * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionSendFlowHistory(\n    transactionID: string,\n    currentSendFlowHistoryLength: number,\n    sendFlowHistoryToAdd: SendFlowHistoryEntry[],\n  ): TransactionMeta {\n    if (this.isSendFlowHistoryDisabled) {\n      throw new Error(\n        'Send flow history is disabled for the current transaction controller',\n      );\n    }\n\n    const transactionMeta = this.getTransaction(transactionID);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update send flow history as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionSendFlowHistory',\n    );\n\n    const sendFlowHistory = transactionMeta.sendFlowHistory ?? [];\n    if (currentSendFlowHistoryLength === sendFlowHistory.length) {\n      const updatedTransactionMeta = {\n        ...transactionMeta,\n        sendFlowHistory: [...sendFlowHistory, ...sendFlowHistoryToAdd],\n      };\n      this.updateTransaction(\n        updatedTransactionMeta,\n        `${controllerName}:updateTransactionSendFlowHistory - sendFlowHistory updated`,\n      );\n    }\n\n    return this.getTransaction(transactionID) as TransactionMeta;\n  }\n\n  /**\n   * Update the gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param gasValues - Gas values to update.\n   * @param gasValues.gas - Same as transaction.gasLimit.\n   * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param gasValues.gasPrice - Price per gas for legacy transactions.\n   * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param gasValues.estimateUsed - Which estimate level was used.\n   * @param gasValues.estimateSuggested - Which estimate level that the API suggested.\n   * @param gasValues.defaultGasEstimates - The default estimate for gas.\n   * @param gasValues.originalGasEstimate - Original estimate for gas.\n   * @param gasValues.userEditedGasLimit - The gas limit supplied by user.\n   * @param gasValues.userFeeLevel - Estimate level user selected.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionGasFees(\n    transactionId: string,\n    {\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      gas,\n      gasLimit,\n      gasPrice,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n    }: {\n      defaultGasEstimates?: string;\n      estimateUsed?: string;\n      estimateSuggested?: string;\n      gas?: string;\n      gasLimit?: string;\n      gasPrice?: string;\n      maxPriorityFeePerGas?: string;\n      maxFeePerGas?: string;\n      originalGasEstimate?: string;\n      userEditedGasLimit?: boolean;\n      userFeeLevel?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionGasFees',\n    );\n\n    let transactionGasFees = {\n      txParams: {\n        gas,\n        gasLimit,\n        gasPrice,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n      },\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n\n    // only update what is defined\n    transactionGasFees.txParams = pickBy(transactionGasFees.txParams);\n    transactionGasFees = pickBy(transactionGasFees);\n\n    // merge updated gas values with existing transaction meta\n    const updatedMeta = merge({}, transactionMeta, transactionGasFees);\n\n    this.updateTransaction(\n      updatedMeta,\n      `${controllerName}:updateTransactionGasFees - gas values updated`,\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  /**\n   * Update the previous gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param previousGas - Previous gas values to update.\n   * @param previousGas.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param previousGas.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param previousGas.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @returns The updated transactionMeta.\n   */\n  updatePreviousGasParams(\n    transactionId: string,\n    {\n      gasLimit,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    }: {\n      gasLimit?: string;\n      maxFeePerGas?: string;\n      maxPriorityFeePerGas?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(transactionMeta, 'updatePreviousGasParams');\n\n    const transactionPreviousGas = {\n      previousGas: {\n        gasLimit,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n      },\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n\n    // only update what is defined\n    transactionPreviousGas.previousGas = pickBy(\n      transactionPreviousGas.previousGas,\n    );\n\n    // merge updated previous gas values with existing transaction meta\n    const updatedMeta = merge({}, transactionMeta, transactionPreviousGas);\n\n    this.updateTransaction(\n      updatedMeta,\n      `${controllerName}:updatePreviousGasParams - Previous gas values updated`,\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  async getNonceLock(\n    address: string,\n    networkClientId: NetworkClientId,\n  ): Promise<NonceLock> {\n    return this.#multichainTrackingHelper.getNonceLock(\n      address,\n      networkClientId,\n    );\n  }\n\n  /**\n   * Updates the editable parameters of a transaction.\n   *\n   * @param txId - The ID of the transaction to update.\n   * @param params - The editable parameters to update.\n   * @param params.data - Data to pass with the transaction.\n   * @param params.gas - Maximum number of units of gas to use for the transaction.\n   * @param params.gasPrice - Price per gas for legacy transactions.\n   * @param params.from - Address to send the transaction from.\n   * @param params.to - Address to send the transaction to.\n   * @param params.value - Value associated with the transaction.\n   * @returns The updated transaction metadata.\n   */\n  async updateEditableParams(\n    txId: string,\n    {\n      data,\n      gas,\n      gasPrice,\n      from,\n      to,\n      value,\n    }: {\n      data?: string;\n      gas?: string;\n      gasPrice?: string;\n      from?: string;\n      to?: string;\n      value?: string;\n    },\n  ) {\n    const transactionMeta = this.getTransaction(txId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update editable params as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(transactionMeta, 'updateEditableParams');\n\n    const editableParams = {\n      txParams: {\n        data,\n        from,\n        to,\n        value,\n        gas,\n        gasPrice,\n      },\n    } as Partial<TransactionMeta>;\n\n    editableParams.txParams = pickBy(\n      editableParams.txParams,\n    ) as TransactionParams;\n\n    const updatedTransaction = merge({}, transactionMeta, editableParams);\n\n    const { networkClientId } = transactionMeta;\n    const provider = this.#getProvider({ networkClientId });\n    const ethQuery = new EthQuery(provider);\n\n    const { type } = await determineTransactionType(\n      updatedTransaction.txParams,\n      ethQuery,\n    );\n\n    updatedTransaction.type = type;\n\n    await updateTransactionLayer1GasFee({\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      provider,\n      transactionMeta: updatedTransaction,\n    });\n\n    this.updateTransaction(\n      updatedTransaction,\n      `Update Editable Params for ${txId}`,\n    );\n\n    return this.getTransaction(txId);\n  }\n\n  /**\n   * Signs and returns the raw transaction data for provided transaction params list.\n   *\n   * @param listOfTxParams - The list of transaction params to approve.\n   * @param opts - Options bag.\n   * @param opts.hasNonce - Whether the transactions already have a nonce.\n   * @returns The raw transactions.\n   */\n  async approveTransactionsWithSameNonce(\n    listOfTxParams: (TransactionParams & { chainId: Hex })[] = [],\n    { hasNonce }: { hasNonce?: boolean } = {},\n  ): Promise<string | string[]> {\n    log('Approving transactions with same nonce', {\n      transactions: listOfTxParams,\n    });\n\n    if (listOfTxParams.length === 0) {\n      return '';\n    }\n\n    const initialTx = listOfTxParams[0];\n    const { chainId } = initialTx;\n    const networkClientId = this.#getNetworkClientId({ chainId });\n    const initialTxAsEthTx = prepareTransaction(chainId, initialTx);\n    const initialTxAsSerializedHex = serializeTransaction(initialTxAsEthTx);\n\n    if (this.approvingTransactionIds.has(initialTxAsSerializedHex)) {\n      return '';\n    }\n\n    this.approvingTransactionIds.add(initialTxAsSerializedHex);\n\n    let rawTransactions, nonceLock;\n    try {\n      // TODO: we should add a check to verify that all transactions have the same from address\n      const fromAddress = initialTx.from;\n      const requiresNonce = hasNonce !== true;\n\n      nonceLock = requiresNonce\n        ? await this.getNonceLock(fromAddress, networkClientId)\n        : undefined;\n\n      const nonce = nonceLock\n        ? add0x(nonceLock.nextNonce.toString(16))\n        : initialTx.nonce;\n\n      if (nonceLock) {\n        log('Using nonce from nonce tracker', nonce, nonceLock.nonceDetails);\n      }\n\n      rawTransactions = await Promise.all(\n        listOfTxParams.map((txParams) => {\n          txParams.nonce = nonce;\n          return this.signExternalTransaction(txParams.chainId, txParams);\n        }),\n      );\n    } catch (err) {\n      log('Error while signing transactions with same nonce', err);\n      // Must set transaction to submitted/failed before releasing lock\n      // continue with error chain\n      throw err;\n    } finally {\n      nonceLock?.releaseLock();\n      this.approvingTransactionIds.delete(initialTxAsSerializedHex);\n    }\n    return rawTransactions;\n  }\n\n  /**\n   * Update a custodial transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param options - The custodial transaction options to update.\n   * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.\n   * @param options.hash - The new hash value to be assigned.\n   * @param options.status - The new status value to be assigned.\n   */\n  updateCustodialTransaction(\n    transactionId: string,\n    {\n      errorMessage,\n      hash,\n      status,\n    }: {\n      errorMessage?: string;\n      hash?: string;\n      status?: TransactionStatus;\n    },\n  ) {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update custodial transaction as no transaction metadata found`,\n      );\n    }\n\n    if (!transactionMeta.custodyId) {\n      throw new Error('Transaction must be a custodian transaction');\n    }\n\n    if (\n      status &&\n      ![\n        TransactionStatus.submitted,\n        TransactionStatus.signed,\n        TransactionStatus.failed,\n      ].includes(status)\n    ) {\n      throw new Error(\n        `Cannot update custodial transaction with status: ${status}`,\n      );\n    }\n\n    const updatedTransactionMeta = merge(\n      {},\n      transactionMeta,\n      pickBy({ hash, status }),\n    ) as TransactionMeta;\n\n    if (updatedTransactionMeta.status === TransactionStatus.submitted) {\n      updatedTransactionMeta.submittedTime = new Date().getTime();\n    }\n\n    if (updatedTransactionMeta.status === TransactionStatus.failed) {\n      updatedTransactionMeta.error = normalizeTxError(new Error(errorMessage));\n    }\n\n    this.updateTransaction(\n      updatedTransactionMeta,\n      `${controllerName}:updateCustodialTransaction - Custodial transaction updated`,\n    );\n\n    if (\n      [TransactionStatus.submitted, TransactionStatus.failed].includes(\n        status as TransactionStatus,\n      )\n    ) {\n      this.messagingSystem.publish(\n        `${controllerName}:transactionFinished`,\n        updatedTransactionMeta,\n      );\n      this.#internalEvents.emit(\n        `${updatedTransactionMeta.id}:finished`,\n        updatedTransactionMeta,\n      );\n    }\n  }\n\n  /**\n   * Search transaction metadata for matching entries.\n   *\n   * @param opts - Options bag.\n   * @param opts.initialList - The transactions to search. Defaults to the current state.\n   * @param opts.limit - The maximum number of transactions to return. No limit by default.\n   * @param opts.searchCriteria - An object containing values or functions for transaction properties to filter transactions with.\n   * @returns An array of transactions matching the provided options.\n   */\n  getTransactions({\n    initialList,\n    limit,\n    searchCriteria = {},\n  }: {\n    initialList?: TransactionMeta[];\n    limit?: number;\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    searchCriteria?: any;\n  } = {}): TransactionMeta[] {\n    // searchCriteria is an object that might have values that aren't predicate\n    // methods. When providing any other value type (string, number, etc), we\n    // consider this shorthand for \"check the value at key for strict equality\n    // with the provided value\". To conform this object to be only methods, we\n    // mapValues (lodash) such that every value on the object is a method that\n    // returns a boolean.\n    const predicateMethods = mapValues(searchCriteria, (predicate) => {\n      return typeof predicate === 'function'\n        ? predicate\n        : // TODO: Replace `any` with type\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (v: any) => v === predicate;\n    });\n\n    const transactionsToFilter = initialList ?? this.state.transactions;\n\n    // Combine sortBy and pickBy to transform our state object into an array of\n    // matching transactions that are sorted by time.\n    const filteredTransactions = sortBy(\n      pickBy(transactionsToFilter, (transaction) => {\n        // iterate over the predicateMethods keys to check if the transaction\n        // matches the searchCriteria\n        for (const [key, predicate] of Object.entries(predicateMethods)) {\n          // We return false early as soon as we know that one of the specified\n          // search criteria do not match the transaction. This prevents\n          // needlessly checking all criteria when we already know the criteria\n          // are not fully satisfied. We check both txParams and the base\n          // object as predicate keys can be either.\n          if (key in transaction.txParams) {\n            // TODO: Replace `any` with type\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (predicate((transaction.txParams as any)[key]) === false) {\n              return false;\n            }\n            // TODO: Replace `any` with type\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          } else if (predicate((transaction as any)[key]) === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }),\n      'time',\n    );\n    if (limit !== undefined) {\n      // We need to have all transactions of a given nonce in order to display\n      // necessary details in the UI. We use the size of this set to determine\n      // whether we have reached the limit provided, thus ensuring that all\n      // transactions of nonces we include will be sent to the UI.\n      const nonces = new Set();\n      const txs = [];\n      // By default, the transaction list we filter from is sorted by time ASC.\n      // To ensure that filtered results prefers the newest transactions we\n      // iterate from right to left, inserting transactions into front of a new\n      // array. The original order is preserved, but we ensure that newest txs\n      // are preferred.\n      for (let i = filteredTransactions.length - 1; i > -1; i--) {\n        const txMeta = filteredTransactions[i];\n        const { nonce } = txMeta.txParams;\n        if (!nonces.has(nonce)) {\n          if (nonces.size < limit) {\n            nonces.add(nonce);\n          } else {\n            continue;\n          }\n        }\n        // Push transaction into the beginning of our array to ensure the\n        // original order is preserved.\n        txs.unshift(txMeta);\n      }\n      return txs;\n    }\n    return filteredTransactions;\n  }\n\n  async estimateGasFee({\n    transactionParams,\n    chainId,\n    networkClientId: requestNetworkClientId,\n  }: {\n    transactionParams: TransactionParams;\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): Promise<GasFeeFlowResponse> {\n    const { id: networkClientId, provider } =\n      this.#multichainTrackingHelper.getNetworkClient({\n        chainId,\n        networkClientId: requestNetworkClientId,\n      });\n\n    const transactionMeta = {\n      txParams: transactionParams,\n      chainId,\n      networkClientId,\n    } as TransactionMeta;\n\n    // Guaranteed as the default gas fee flow matches all transactions.\n    const gasFeeFlow = getGasFeeFlow(\n      transactionMeta,\n      this.gasFeeFlows,\n    ) as GasFeeFlow;\n\n    const ethQuery = new EthQuery(provider);\n\n    const gasFeeControllerData = await this.getGasFeeEstimates({\n      networkClientId,\n    });\n\n    return gasFeeFlow.getGasFees({\n      ethQuery,\n      gasFeeControllerData,\n      transactionMeta,\n    });\n  }\n\n  /**\n   * Determine the layer 1 gas fee for the given transaction parameters.\n   *\n   * @param request - The request object.\n   * @param request.transactionParams - The transaction parameters to estimate the layer 1 gas fee for.\n   * @param request.chainId - The ID of the chain where the transaction will be executed.\n   * @param request.networkClientId - The ID of a specific network client to process the transaction.\n   */\n  async getLayer1GasFee({\n    transactionParams,\n    chainId,\n    networkClientId,\n  }: {\n    transactionParams: TransactionParams;\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): Promise<Hex | undefined> {\n    const provider = this.#getProvider({\n      chainId,\n      networkClientId,\n    });\n\n    return await getTransactionLayer1GasFee({\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      provider,\n      transactionMeta: {\n        txParams: transactionParams,\n        chainId,\n      } as TransactionMeta,\n    });\n  }\n\n  private async signExternalTransaction(\n    chainId: Hex,\n    transactionParams: TransactionParams,\n  ): Promise<string> {\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const normalizedTransactionParams =\n      normalizeTransactionParams(transactionParams);\n    const type = isEIP1559Transaction(normalizedTransactionParams)\n      ? TransactionEnvelopeType.feeMarket\n      : TransactionEnvelopeType.legacy;\n    const updatedTransactionParams = {\n      ...normalizedTransactionParams,\n      type,\n      gasLimit: normalizedTransactionParams.gas,\n      chainId,\n    };\n\n    const { from } = updatedTransactionParams;\n\n    const unsignedTransaction = prepareTransaction(\n      chainId,\n      updatedTransactionParams,\n    );\n\n    const signedTransaction = await this.sign(unsignedTransaction, from);\n    const rawTransaction = serializeTransaction(signedTransaction);\n\n    return rawTransaction;\n  }\n\n  /**\n   * Removes unapproved transactions from state.\n   */\n  clearUnapprovedTransactions() {\n    const transactions = this.state.transactions.filter(\n      ({ status }) => status !== TransactionStatus.unapproved,\n    );\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState(transactions);\n    });\n  }\n\n  /**\n   * Stop the signing process for a specific transaction.\n   * Throws an error causing the transaction status to be set to failed.\n   *\n   * @param transactionId - The ID of the transaction to stop signing.\n   */\n  abortTransactionSigning(transactionId: string) {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(`Cannot abort signing as no transaction metadata found`);\n    }\n\n    const abortCallback = this.signAbortCallbacks.get(transactionId);\n\n    if (!abortCallback) {\n      throw new Error(\n        `Cannot abort signing as transaction is not waiting for signing`,\n      );\n    }\n\n    abortCallback();\n\n    this.signAbortCallbacks.delete(transactionId);\n  }\n\n  private addMetadata(transactionMeta: TransactionMeta) {\n    validateTxParams(transactionMeta.txParams);\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState([\n        ...state.transactions,\n        transactionMeta,\n      ]);\n    });\n  }\n\n  private async updateGasProperties(\n    transactionMeta: TransactionMeta,\n    { traceContext }: { traceContext?: TraceContext } = {},\n  ) {\n    const isEIP1559Compatible =\n      transactionMeta.txParams.type !== TransactionEnvelopeType.legacy &&\n      (await this.getEIP1559Compatibility(transactionMeta.networkClientId));\n\n    const { networkClientId, chainId } = transactionMeta;\n\n    const isCustomNetwork =\n      this.#multichainTrackingHelper.getNetworkClient({ networkClientId })\n        .configuration.type === NetworkClientType.Custom;\n\n    const ethQuery = this.#getEthQuery({ networkClientId });\n    const provider = this.#getProvider({ networkClientId });\n\n    await this.#trace(\n      { name: 'Update Gas', parentContext: traceContext },\n      async () => {\n        await updateGas({\n          ethQuery,\n          chainId,\n          isCustomNetwork,\n          txMeta: transactionMeta,\n        });\n      },\n    );\n\n    await this.#trace(\n      { name: 'Update Gas Fees', parentContext: traceContext },\n      async () =>\n        await updateGasFees({\n          eip1559: isEIP1559Compatible,\n          ethQuery,\n          gasFeeFlows: this.gasFeeFlows,\n          getGasFeeEstimates: this.getGasFeeEstimates,\n          getSavedGasFees: this.getSavedGasFees.bind(this),\n          txMeta: transactionMeta,\n        }),\n    );\n\n    await this.#trace(\n      { name: 'Update Layer 1 Gas Fees', parentContext: traceContext },\n      async () =>\n        await updateTransactionLayer1GasFee({\n          layer1GasFeeFlows: this.layer1GasFeeFlows,\n          provider,\n          transactionMeta,\n        }),\n    );\n  }\n\n  private onBootCleanup() {\n    this.clearUnapprovedTransactions();\n    this.failIncompleteTransactions();\n  }\n\n  private failIncompleteTransactions() {\n    const incompleteTransactions = this.state.transactions.filter(\n      (transaction) =>\n        [TransactionStatus.approved, TransactionStatus.signed].includes(\n          transaction.status,\n        ),\n    );\n\n    for (const transactionMeta of incompleteTransactions) {\n      this.failTransaction(\n        transactionMeta,\n        new Error('Transaction incomplete at startup'),\n      );\n    }\n  }\n\n  private async processApproval(\n    transactionMeta: TransactionMeta,\n    {\n      isExisting = false,\n      requireApproval,\n      shouldShowRequest = true,\n      actionId,\n      traceContext,\n    }: {\n      isExisting?: boolean;\n      requireApproval?: boolean | undefined;\n      shouldShowRequest?: boolean;\n      actionId?: string;\n      traceContext?: TraceContext;\n    },\n  ): Promise<string> {\n    const transactionId = transactionMeta.id;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n    const { meta, isCompleted } = this.isTransactionCompleted(transactionId);\n    const finishedPromise = isCompleted\n      ? Promise.resolve(meta)\n      : this.waitForTransactionFinished(transactionId);\n\n    if (meta && !isExisting && !isCompleted) {\n      try {\n        if (requireApproval !== false) {\n          const acceptResult = await this.#trace(\n            { name: 'Await Approval', parentContext: traceContext },\n            (context) =>\n              this.requestApproval(transactionMeta, {\n                shouldShowRequest,\n                traceContext: context,\n              }),\n          );\n\n          resultCallbacks = acceptResult.resultCallbacks;\n\n          const approvalValue = acceptResult.value as\n            | {\n                txMeta?: TransactionMeta;\n              }\n            | undefined;\n\n          const updatedTransaction = approvalValue?.txMeta;\n\n          if (updatedTransaction) {\n            log('Updating transaction with approval data', {\n              customNonce: updatedTransaction.customNonceValue,\n              params: updatedTransaction.txParams,\n            });\n\n            this.updateTransaction(\n              updatedTransaction,\n              'TransactionController#processApproval - Updated with approval data',\n            );\n          }\n        }\n\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n\n        if (!isTxCompleted) {\n          const approvalResult = await this.approveTransaction(\n            transactionId,\n            traceContext,\n          );\n          if (\n            approvalResult === ApprovalState.SkippedViaBeforePublishHook &&\n            resultCallbacks\n          ) {\n            resultCallbacks.success();\n          }\n          const updatedTransactionMeta = this.getTransaction(\n            transactionId,\n          ) as TransactionMeta;\n          this.messagingSystem.publish(\n            `${controllerName}:transactionApproved`,\n            {\n              transactionMeta: updatedTransactionMeta,\n              actionId,\n            },\n          );\n        }\n        // TODO: Replace `any` with type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } catch (error: any) {\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n        if (!isTxCompleted) {\n          if (error?.code === errorCodes.provider.userRejectedRequest) {\n            this.cancelTransaction(transactionId, actionId);\n\n            throw providerErrors.userRejectedRequest(\n              'MetaMask Tx Signature: User denied transaction signature.',\n            );\n          } else {\n            this.failTransaction(meta, error, actionId);\n          }\n        }\n      }\n    }\n\n    const finalMeta = await finishedPromise;\n\n    switch (finalMeta?.status) {\n      case TransactionStatus.failed:\n        resultCallbacks?.error(finalMeta.error);\n        throw rpcErrors.internal(finalMeta.error.message);\n\n      case TransactionStatus.submitted:\n        resultCallbacks?.success();\n        return finalMeta.hash as string;\n\n      default:\n        const internalError = rpcErrors.internal(\n          `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n            finalMeta || transactionId,\n          )}`,\n        );\n\n        resultCallbacks?.error(internalError);\n        throw internalError;\n    }\n  }\n\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionId - The ID of the transaction to approve.\n   * @param traceContext - The parent context for any new traces.\n   */\n  private async approveTransaction(\n    transactionId: string,\n    traceContext?: unknown,\n  ) {\n    const cleanupTasks = new Array<() => void>();\n    cleanupTasks.push(await this.mutex.acquire());\n\n    let transactionMeta = this.getTransactionOrThrow(transactionId);\n\n    try {\n      if (!this.sign) {\n        this.failTransaction(\n          transactionMeta,\n          new Error('No sign method defined.'),\n        );\n        return ApprovalState.NotApproved;\n      } else if (!transactionMeta.chainId) {\n        this.failTransaction(transactionMeta, new Error('No chainId defined.'));\n        return ApprovalState.NotApproved;\n      }\n\n      if (this.approvingTransactionIds.has(transactionId)) {\n        log('Skipping approval as signing in progress', transactionId);\n        return ApprovalState.NotApproved;\n      }\n      this.approvingTransactionIds.add(transactionId);\n      cleanupTasks.push(() =>\n        this.approvingTransactionIds.delete(transactionId),\n      );\n\n      const [nonce, releaseNonce] = await getNextNonce(\n        transactionMeta,\n        (address: string) =>\n          this.#multichainTrackingHelper.getNonceLock(\n            address,\n            transactionMeta.networkClientId,\n          ),\n      );\n\n      // must set transaction to submitted/failed before releasing lock\n      releaseNonce && cleanupTasks.push(releaseNonce);\n\n      transactionMeta = this.#updateTransactionInternal(\n        {\n          transactionId,\n          note: 'TransactionController#approveTransaction - Transaction approved',\n        },\n        (draftTxMeta) => {\n          const { chainId, txParams } = draftTxMeta;\n          const { gas, type } = txParams;\n\n          draftTxMeta.status = TransactionStatus.approved;\n          draftTxMeta.txParams.chainId = chainId;\n          draftTxMeta.txParams.gasLimit = gas;\n          draftTxMeta.txParams.nonce = nonce;\n\n          if (!type && isEIP1559Transaction(txParams)) {\n            draftTxMeta.txParams.type = TransactionEnvelopeType.feeMarket;\n          }\n        },\n      );\n\n      this.onTransactionStatusChange(transactionMeta);\n\n      const rawTx = await this.#trace(\n        { name: 'Sign', parentContext: traceContext },\n        () => this.signTransaction(transactionMeta, transactionMeta.txParams),\n      );\n\n      if (!this.beforePublish(transactionMeta)) {\n        log('Skipping publishing transaction based on hook');\n        this.messagingSystem.publish(\n          `${controllerName}:transactionPublishingSkipped`,\n          transactionMeta,\n        );\n        return ApprovalState.SkippedViaBeforePublishHook;\n      }\n\n      if (!rawTx) {\n        return ApprovalState.NotApproved;\n      }\n\n      const { networkClientId } = transactionMeta;\n      const ethQuery = this.#getEthQuery({ networkClientId });\n\n      let preTxBalance: string | undefined;\n      const shouldUpdatePreTxBalance =\n        transactionMeta.type === TransactionType.swap;\n\n      if (shouldUpdatePreTxBalance) {\n        log('Determining pre-transaction balance');\n\n        preTxBalance = await query(ethQuery, 'getBalance', [\n          transactionMeta.txParams.from,\n        ]);\n      }\n\n      log('Publishing transaction', transactionMeta.txParams);\n\n      let hash: string | undefined;\n\n      await this.#trace(\n        { name: 'Publish', parentContext: traceContext },\n        async () => {\n          ({ transactionHash: hash } = await this.publish(\n            transactionMeta,\n            rawTx,\n          ));\n\n          if (hash === undefined) {\n            hash = await this.publishTransaction(ethQuery, {\n              ...transactionMeta,\n              rawTx,\n            });\n          }\n        },\n      );\n\n      log('Publish successful', hash);\n\n      transactionMeta = this.#updateTransactionInternal(\n        {\n          transactionId,\n          note: 'TransactionController#approveTransaction - Transaction submitted',\n        },\n        (draftTxMeta) => {\n          draftTxMeta.hash = hash;\n          draftTxMeta.status = TransactionStatus.submitted;\n          draftTxMeta.submittedTime = new Date().getTime();\n          if (shouldUpdatePreTxBalance) {\n            draftTxMeta.preTxBalance = preTxBalance;\n            log('Updated pre-transaction balance', preTxBalance);\n          }\n        },\n      );\n\n      this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {\n        transactionMeta,\n      });\n\n      this.messagingSystem.publish(\n        `${controllerName}:transactionFinished`,\n        transactionMeta,\n      );\n      this.#internalEvents.emit(`${transactionId}:finished`, transactionMeta);\n\n      this.onTransactionStatusChange(transactionMeta);\n      return ApprovalState.Approved;\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n      return ApprovalState.NotApproved;\n    } finally {\n      cleanupTasks.forEach((task) => task());\n    }\n  }\n\n  private async publishTransaction(\n    ethQuery: EthQuery,\n    transactionMeta: TransactionMeta,\n    { skipSubmitHistory }: { skipSubmitHistory?: boolean } = {},\n  ): Promise<string> {\n    const transactionHash = await query(ethQuery, 'sendRawTransaction', [\n      transactionMeta.rawTx,\n    ]);\n\n    if (skipSubmitHistory !== true) {\n      this.#updateSubmitHistory(transactionMeta, transactionHash);\n    }\n\n    return transactionHash;\n  }\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param actionId - The actionId passed from UI\n   */\n  private cancelTransaction(transactionId: string, actionId?: string) {\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n    this.update((state) => {\n      const transactions = state.transactions.filter(\n        ({ id }) => id !== transactionId,\n      );\n      state.transactions = this.trimTransactionsForState(transactions);\n    });\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      status: TransactionStatus.rejected as const,\n    };\n    this.messagingSystem.publish(\n      `${controllerName}:transactionFinished`,\n      updatedTransactionMeta,\n    );\n    this.#internalEvents.emit(\n      `${transactionMeta.id}:finished`,\n      updatedTransactionMeta,\n    );\n    this.messagingSystem.publish(`${controllerName}:transactionRejected`, {\n      transactionMeta: updatedTransactionMeta,\n      actionId,\n    });\n    this.onTransactionStatusChange(updatedTransactionMeta);\n  }\n\n  /**\n   * Trim the amount of transactions that are set on the state. Checks\n   * if the length of the tx history is longer then desired persistence\n   * limit and then if it is removes the oldest confirmed or rejected tx.\n   * Pending or unapproved transactions will not be removed by this\n   * operation. For safety of presenting a fully functional transaction UI\n   * representation, this function will not break apart transactions with the\n   * same nonce, created on the same day, per network. Not accounting for\n   * transactions of the same nonce, same day and network combo can result in\n   * confusing or broken experiences in the UI.\n   *\n   * @param transactions - The transactions to be applied to the state.\n   * @returns The trimmed list of transactions.\n   */\n  private trimTransactionsForState(\n    transactions: TransactionMeta[],\n  ): TransactionMeta[] {\n    const nonceNetworkSet = new Set();\n\n    const txsToKeep = [...transactions]\n      .sort((a, b) => (a.time > b.time ? -1 : 1)) // Descending time order\n      .filter((tx) => {\n        const { chainId, status, txParams, time } = tx;\n\n        if (txParams) {\n          const key = `${String(txParams.nonce)}-${convertHexToDecimal(\n            chainId,\n          )}-${new Date(time).toDateString()}`;\n\n          if (nonceNetworkSet.has(key)) {\n            return true;\n          } else if (\n            nonceNetworkSet.size < this.#transactionHistoryLimit ||\n            !this.isFinalState(status)\n          ) {\n            nonceNetworkSet.add(key);\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n    txsToKeep.reverse(); // Ascending time order\n    return txsToKeep;\n  }\n\n  /**\n   * Determines if the transaction is in a final state.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isFinalState(status: TransactionStatus): boolean {\n    return (\n      status === TransactionStatus.rejected ||\n      status === TransactionStatus.confirmed ||\n      status === TransactionStatus.failed\n    );\n  }\n\n  /**\n   * Whether the transaction has at least completed all local processing.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isLocalFinalState(status: TransactionStatus): boolean {\n    return [\n      TransactionStatus.confirmed,\n      TransactionStatus.failed,\n      TransactionStatus.rejected,\n      TransactionStatus.submitted,\n    ].includes(status);\n  }\n\n  private async requestApproval(\n    txMeta: TransactionMeta,\n    {\n      shouldShowRequest,\n      traceContext,\n    }: { shouldShowRequest: boolean; traceContext?: TraceContext },\n  ): Promise<AddResult> {\n    const id = this.getApprovalId(txMeta);\n    const { origin } = txMeta;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: txMeta.id };\n\n    await this.#trace({\n      name: 'Notification Display',\n      id,\n      parentContext: traceContext,\n    });\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin: origin || ORIGIN_METAMASK,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      shouldShowRequest,\n    )) as Promise<AddResult>;\n  }\n\n  private getTransaction(\n    transactionId: string,\n  ): Readonly<TransactionMeta> | undefined {\n    const { transactions } = this.state;\n    return transactions.find(({ id }) => id === transactionId);\n  }\n\n  private getTransactionOrThrow(\n    transactionId: string,\n    errorMessagePrefix = 'TransactionController',\n  ): Readonly<TransactionMeta> {\n    const txMeta = this.getTransaction(transactionId);\n    if (!txMeta) {\n      throw new Error(\n        `${errorMessagePrefix}: No transaction found with id ${transactionId}`,\n      );\n    }\n    return txMeta;\n  }\n\n  private getApprovalId(txMeta: TransactionMeta) {\n    return String(txMeta.id);\n  }\n\n  private isTransactionCompleted(transactionId: string): {\n    meta?: TransactionMeta;\n    isCompleted: boolean;\n  } {\n    const transaction = this.getTransaction(transactionId);\n\n    if (!transaction) {\n      return { meta: undefined, isCompleted: false };\n    }\n\n    const isCompleted = this.isLocalFinalState(transaction.status);\n\n    return { meta: transaction, isCompleted };\n  }\n\n  #getChainId(networkClientId: NetworkClientId): Hex {\n    return this.#multichainTrackingHelper.getNetworkClient({ networkClientId })\n      .configuration.chainId;\n  }\n\n  #getNetworkClientId({\n    chainId,\n    networkClientId,\n  }: {\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }) {\n    if (networkClientId) {\n      return networkClientId;\n    }\n\n    return this.#multichainTrackingHelper.getNetworkClient({\n      chainId,\n    }).id;\n  }\n\n  #getEthQuery({\n    chainId,\n    networkClientId,\n  }: {\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): EthQuery {\n    return new EthQuery(this.#getProvider({ chainId, networkClientId }));\n  }\n\n  #getProvider({\n    chainId,\n    networkClientId,\n  }: {\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): Provider {\n    return this.#multichainTrackingHelper.getNetworkClient({\n      chainId,\n      networkClientId,\n    }).provider;\n  }\n\n  private onIncomingTransactions(transactions: TransactionMeta[]) {\n    if (!transactions.length) {\n      return;\n    }\n\n    const finalTransactions = transactions.map((tx) => {\n      const { chainId } = tx;\n      const networkClientId = this.#getNetworkClientId({ chainId });\n\n      return {\n        ...tx,\n        networkClientId,\n      };\n    });\n\n    this.update((state) => {\n      const { transactions: currentTransactions } = state;\n\n      state.transactions = this.trimTransactionsForState([\n        ...finalTransactions,\n        ...currentTransactions,\n      ]);\n\n      log(\n        'Added incoming transactions to state',\n        finalTransactions.length,\n        finalTransactions,\n      );\n    });\n\n    this.messagingSystem.publish(\n      `${controllerName}:incomingTransactionsReceived`,\n      finalTransactions,\n    );\n  }\n\n  private generateDappSuggestedGasFees(\n    txParams: TransactionParams,\n    origin?: string,\n  ): DappSuggestedGasFees | undefined {\n    if (!origin || origin === ORIGIN_METAMASK) {\n      return undefined;\n    }\n\n    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas } = txParams;\n\n    if (\n      gasPrice === undefined &&\n      maxFeePerGas === undefined &&\n      maxPriorityFeePerGas === undefined &&\n      gas === undefined\n    ) {\n      return undefined;\n    }\n\n    const dappSuggestedGasFees: DappSuggestedGasFees = {};\n\n    if (gasPrice !== undefined) {\n      dappSuggestedGasFees.gasPrice = gasPrice;\n    } else if (\n      maxFeePerGas !== undefined ||\n      maxPriorityFeePerGas !== undefined\n    ) {\n      dappSuggestedGasFees.maxFeePerGas = maxFeePerGas;\n      dappSuggestedGasFees.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    }\n\n    if (gas !== undefined) {\n      dappSuggestedGasFees.gas = gas;\n    }\n\n    return dappSuggestedGasFees;\n  }\n\n  /**\n   * Validates and adds external provided transaction to state.\n   *\n   * @param transactionMeta - Nominated external transaction to be added to state.\n   * @returns The new transaction.\n   */\n  private addExternalTransaction(transactionMeta: TransactionMeta) {\n    const { chainId } = transactionMeta;\n    const { transactions } = this.state;\n    const fromAddress = transactionMeta?.txParams?.from;\n    const sameFromAndNetworkTransactions = transactions.filter(\n      (transaction) =>\n        transaction.txParams.from === fromAddress &&\n        transaction.chainId === chainId,\n    );\n    const confirmedTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.confirmed,\n    );\n    const pendingTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.submitted,\n    );\n\n    validateConfirmedExternalTransaction(\n      transactionMeta,\n      confirmedTxs,\n      pendingTxs,\n    );\n\n    // Make sure provided external transaction has non empty history array\n    const newTransactionMeta =\n      (transactionMeta.history ?? []).length === 0 && !this.isHistoryDisabled\n        ? addInitialHistorySnapshot(transactionMeta)\n        : transactionMeta;\n\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState([\n        ...state.transactions,\n        newTransactionMeta,\n      ]);\n    });\n\n    return newTransactionMeta;\n  }\n\n  /**\n   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions\n   * in the transactions have the same nonce.\n   *\n   * @param transactionId - Used to identify original transaction.\n   */\n  private markNonceDuplicatesDropped(transactionId: string) {\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      return;\n    }\n    const nonce = transactionMeta.txParams?.nonce;\n    const from = transactionMeta.txParams?.from;\n    const { chainId } = transactionMeta;\n\n    const sameNonceTransactions = this.state.transactions.filter(\n      (transaction) =>\n        transaction.id !== transactionId &&\n        transaction.txParams.from === from &&\n        transaction.txParams.nonce === nonce &&\n        transaction.chainId === chainId &&\n        transaction.type !== TransactionType.incoming,\n    );\n    const sameNonceTransactionIds = sameNonceTransactions.map(\n      (transaction) => transaction.id,\n    );\n\n    if (sameNonceTransactions.length === 0) {\n      return;\n    }\n\n    this.update((state) => {\n      for (const transaction of state.transactions) {\n        if (sameNonceTransactionIds.includes(transaction.id)) {\n          transaction.replacedBy = transactionMeta?.hash;\n          transaction.replacedById = transactionMeta?.id;\n        }\n      }\n    });\n\n    for (const transaction of this.state.transactions) {\n      if (\n        sameNonceTransactionIds.includes(transaction.id) &&\n        transaction.status !== TransactionStatus.failed\n      ) {\n        this.setTransactionStatusDropped(transaction);\n      }\n    }\n  }\n\n  /**\n   * Method to set transaction status to dropped.\n   *\n   * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.\n   */\n  private setTransactionStatusDropped(transactionMeta: TransactionMeta) {\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      status: TransactionStatus.dropped as const,\n    };\n    this.messagingSystem.publish(`${controllerName}:transactionDropped`, {\n      transactionMeta: updatedTransactionMeta,\n    });\n    this.updateTransaction(\n      updatedTransactionMeta,\n      'TransactionController#setTransactionStatusDropped - Transaction dropped',\n    );\n    this.onTransactionStatusChange(updatedTransactionMeta);\n  }\n\n  /**\n   * Get transaction with provided actionId.\n   *\n   * @param actionId - Unique ID to prevent duplicate requests\n   * @returns the filtered transaction\n   */\n  private getTransactionWithActionId(actionId?: string) {\n    return this.state.transactions.find(\n      (transaction) => actionId && transaction.actionId === actionId,\n    );\n  }\n\n  private async waitForTransactionFinished(\n    transactionId: string,\n  ): Promise<TransactionMeta> {\n    return new Promise((resolve) => {\n      this.#internalEvents.once(`${transactionId}:finished`, (txMeta) => {\n        resolve(txMeta);\n      });\n    });\n  }\n\n  /**\n   * Updates the r, s, and v properties of a TransactionMeta object\n   * with values from a signed transaction.\n   *\n   * @param transactionMeta - The TransactionMeta object to update.\n   * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.\n   * @returns The updated TransactionMeta object.\n   */\n  private updateTransactionMetaRSV(\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ): TransactionMeta {\n    const transactionMetaWithRsv = cloneDeep(transactionMeta);\n\n    for (const key of ['r', 's', 'v'] as const) {\n      const value = signedTx[key];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      transactionMetaWithRsv[key] = add0x(value.toString(16));\n    }\n\n    return transactionMetaWithRsv;\n  }\n\n  private async getEIP1559Compatibility(networkClientId?: NetworkClientId) {\n    const currentNetworkIsEIP1559Compatible =\n      await this.getCurrentNetworkEIP1559Compatibility(networkClientId);\n\n    const currentAccountIsEIP1559Compatible =\n      await this.getCurrentAccountEIP1559Compatibility();\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n\n  private async signTransaction(\n    transactionMeta: TransactionMeta,\n    txParams: TransactionParams,\n  ): Promise<string | undefined> {\n    log('Signing transaction', txParams);\n\n    const { authorizationList, from } = txParams;\n    const finalTxParams = { ...txParams };\n\n    finalTxParams.authorizationList = await signAuthorizationList({\n      authorizationList,\n      messenger: this.messagingSystem,\n      transactionMeta,\n    });\n\n    const unsignedEthTx = prepareTransaction(\n      transactionMeta.chainId,\n      finalTxParams,\n    );\n\n    this.approvingTransactionIds.add(transactionMeta.id);\n\n    const signedTx = await new Promise<TypedTransaction>((resolve, reject) => {\n      this.sign?.(\n        unsignedEthTx,\n        from,\n        ...this.getAdditionalSignArguments(transactionMeta),\n      ).then(resolve, reject);\n\n      this.signAbortCallbacks.set(transactionMeta.id, () =>\n        reject(new Error('Signing aborted by user')),\n      );\n    });\n\n    this.signAbortCallbacks.delete(transactionMeta.id);\n\n    if (!signedTx) {\n      log('Skipping signed status as no signed transaction');\n      return undefined;\n    }\n\n    const transactionMetaFromHook = cloneDeep(transactionMeta);\n    if (!this.afterSign(transactionMetaFromHook, signedTx)) {\n      this.updateTransaction(\n        transactionMetaFromHook,\n        'TransactionController#signTransaction - Update after sign',\n      );\n\n      log('Skipping signed status based on hook');\n\n      return undefined;\n    }\n\n    const transactionMetaWithRsv = {\n      ...this.updateTransactionMetaRSV(transactionMetaFromHook, signedTx),\n      status: TransactionStatus.signed as const,\n    };\n\n    this.updateTransaction(\n      transactionMetaWithRsv,\n      'TransactionController#approveTransaction - Transaction signed',\n    );\n\n    this.onTransactionStatusChange(transactionMetaWithRsv);\n\n    const rawTx = serializeTransaction(signedTx);\n\n    const transactionMetaWithRawTx = merge({}, transactionMetaWithRsv, {\n      rawTx,\n    });\n\n    this.updateTransaction(\n      transactionMetaWithRawTx,\n      'TransactionController#approveTransaction - RawTransaction added',\n    );\n\n    return rawTx;\n  }\n\n  private onTransactionStatusChange(transactionMeta: TransactionMeta) {\n    this.messagingSystem.publish(`${controllerName}:transactionStatusUpdated`, {\n      transactionMeta,\n    });\n  }\n\n  private getNonceTrackerTransactions(\n    status: TransactionStatus,\n    address: string,\n    chainId: string,\n  ) {\n    return getAndFormatTransactionsForNonceTracker(\n      chainId,\n      address,\n      status,\n      this.state.transactions,\n    );\n  }\n\n  private onConfirmedTransaction(transactionMeta: TransactionMeta) {\n    log('Processing confirmed transaction', transactionMeta.id);\n\n    this.markNonceDuplicatesDropped(transactionMeta.id);\n\n    this.messagingSystem.publish(\n      `${controllerName}:transactionConfirmed`,\n      transactionMeta,\n    );\n\n    this.onTransactionStatusChange(transactionMeta);\n\n    // Intentional given potential duration of process.\n    this.updatePostBalance(transactionMeta).catch((error) => {\n      log('Error while updating post balance', error);\n      throw error;\n    });\n  }\n\n  private async updatePostBalance(transactionMeta: TransactionMeta) {\n    try {\n      const { networkClientId, type } = transactionMeta;\n\n      if (type !== TransactionType.swap) {\n        return;\n      }\n\n      const ethQuery = this.#getEthQuery({ networkClientId });\n\n      const { updatedTransactionMeta, approvalTransactionMeta } =\n        await updatePostTransactionBalance(transactionMeta, {\n          ethQuery,\n          getTransaction: this.getTransaction.bind(this),\n          updateTransaction: this.updateTransaction.bind(this),\n        });\n\n      this.messagingSystem.publish(\n        `${controllerName}:postTransactionBalanceUpdated`,\n        {\n          transactionMeta: updatedTransactionMeta,\n          approvalTransactionMeta,\n        },\n      );\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Error while updating post transaction balance', error);\n    }\n  }\n\n  #createNonceTracker({\n    provider,\n    blockTracker,\n    chainId,\n  }: {\n    provider: Provider;\n    blockTracker: BlockTracker;\n    chainId: Hex;\n  }): NonceTracker {\n    return new NonceTracker({\n      // TODO: Fix types\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      provider: provider as any,\n      // TODO: Fix types\n      blockTracker,\n      getPendingTransactions: this.#getNonceTrackerPendingTransactions.bind(\n        this,\n        chainId,\n      ),\n      getConfirmedTransactions: this.getNonceTrackerTransactions.bind(\n        this,\n        TransactionStatus.confirmed,\n        chainId,\n      ),\n    });\n  }\n\n  #createPendingTransactionTracker({\n    provider,\n    blockTracker,\n    chainId,\n    networkClientId,\n  }: {\n    provider: Provider;\n    blockTracker: BlockTracker;\n    chainId: Hex;\n    networkClientId: NetworkClientId;\n  }): PendingTransactionTracker {\n    const ethQuery = new EthQuery(provider);\n\n    const pendingTransactionTracker = new PendingTransactionTracker({\n      blockTracker,\n      getChainId: () => chainId,\n      getEthQuery: () => ethQuery,\n      getNetworkClientId: () => networkClientId,\n      getTransactions: () => this.state.transactions,\n      isResubmitEnabled: this.#pendingTransactionOptions.isResubmitEnabled,\n      getGlobalLock: () =>\n        this.#multichainTrackingHelper.acquireNonceLockForChainIdKey({\n          chainId,\n        }),\n      publishTransaction: (_ethQuery, transactionMeta) =>\n        this.publishTransaction(_ethQuery, transactionMeta, {\n          skipSubmitHistory: true,\n        }),\n      hooks: {\n        beforeCheckPendingTransaction:\n          this.beforeCheckPendingTransaction.bind(this),\n        beforePublish: this.beforePublish.bind(this),\n      },\n    });\n\n    this.#addPendingTransactionTrackerListeners(pendingTransactionTracker);\n\n    return pendingTransactionTracker;\n  }\n\n  readonly #checkForPendingTransactionAndStartPolling = () => {\n    this.#multichainTrackingHelper.checkForPendingTransactionAndStartPolling();\n  };\n\n  #stopAllTracking() {\n    this.#multichainTrackingHelper.stopAllTracking();\n  }\n\n  #addIncomingTransactionHelperListeners(\n    incomingTransactionHelper: IncomingTransactionHelper,\n  ) {\n    incomingTransactionHelper.hub.on(\n      'transactions',\n      this.onIncomingTransactions.bind(this),\n    );\n  }\n\n  #removePendingTransactionTrackerListeners(\n    pendingTransactionTracker: PendingTransactionTracker,\n  ) {\n    pendingTransactionTracker.hub.removeAllListeners('transaction-confirmed');\n    pendingTransactionTracker.hub.removeAllListeners('transaction-dropped');\n    pendingTransactionTracker.hub.removeAllListeners('transaction-failed');\n    pendingTransactionTracker.hub.removeAllListeners('transaction-updated');\n  }\n\n  #addPendingTransactionTrackerListeners(\n    pendingTransactionTracker: PendingTransactionTracker,\n  ) {\n    pendingTransactionTracker.hub.on(\n      'transaction-confirmed',\n      this.onConfirmedTransaction.bind(this),\n    );\n\n    pendingTransactionTracker.hub.on(\n      'transaction-dropped',\n      this.setTransactionStatusDropped.bind(this),\n    );\n\n    pendingTransactionTracker.hub.on(\n      'transaction-failed',\n      this.failTransaction.bind(this),\n    );\n\n    pendingTransactionTracker.hub.on(\n      'transaction-updated',\n      this.updateTransaction.bind(this),\n    );\n  }\n\n  #getNonceTrackerPendingTransactions(chainId: string, address: string) {\n    const standardPendingTransactions = this.getNonceTrackerTransactions(\n      TransactionStatus.submitted,\n      address,\n      chainId,\n    );\n\n    const externalPendingTransactions = this.getExternalPendingTransactions(\n      address,\n      chainId,\n    );\n    return [...standardPendingTransactions, ...externalPendingTransactions];\n  }\n\n  private async publishTransactionForRetry(\n    ethQuery: EthQuery,\n    transactionMeta: TransactionMeta,\n  ): Promise<string> {\n    try {\n      return await this.publishTransaction(ethQuery, transactionMeta);\n    } catch (error: unknown) {\n      if (this.isTransactionAlreadyConfirmedError(error as Error)) {\n        throw new Error('Previous transaction is already confirmed');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Ensures that error is a nonce issue\n   *\n   * @param error - The error to check\n   * @returns Whether or not the error is a nonce issue\n   */\n  // TODO: Replace `any` with type\n  // Some networks are returning original error in the data field\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private isTransactionAlreadyConfirmedError(error: any): boolean {\n    return (\n      error?.message?.includes('nonce too low') ||\n      error?.data?.message?.includes('nonce too low')\n    );\n  }\n\n  #getGasFeeFlows(): GasFeeFlow[] {\n    if (this.#testGasFeeFlows) {\n      return [new TestGasFeeFlow()];\n    }\n\n    return [new LineaGasFeeFlow(), new DefaultGasFeeFlow()];\n  }\n\n  #getLayer1GasFeeFlows(): Layer1GasFeeFlow[] {\n    return [new OptimismLayer1GasFeeFlow(), new ScrollLayer1GasFeeFlow()];\n  }\n\n  #updateTransactionInternal(\n    {\n      transactionId,\n      note,\n      skipHistory,\n      skipValidation,\n    }: {\n      transactionId: string;\n      note?: string;\n      skipHistory?: boolean;\n      skipValidation?: boolean;\n    },\n    callback: (transactionMeta: TransactionMeta) => TransactionMeta | void,\n  ): Readonly<TransactionMeta> {\n    let updatedTransactionParams: (keyof TransactionParams)[] = [];\n\n    this.update((state) => {\n      const index = state.transactions.findIndex(\n        ({ id }) => id === transactionId,\n      );\n\n      let transactionMeta = state.transactions[index];\n\n      transactionMeta = callback(transactionMeta) ?? transactionMeta;\n\n      if (skipValidation !== true) {\n        transactionMeta.txParams = normalizeTransactionParams(\n          transactionMeta.txParams,\n        );\n\n        validateTxParams(transactionMeta.txParams);\n      }\n\n      updatedTransactionParams =\n        this.#checkIfTransactionParamsUpdated(transactionMeta);\n\n      const shouldSkipHistory = this.isHistoryDisabled || skipHistory;\n\n      if (!shouldSkipHistory) {\n        transactionMeta = updateTransactionHistory(\n          transactionMeta,\n          note ?? 'Transaction updated',\n        );\n      }\n      state.transactions[index] = transactionMeta;\n    });\n\n    const transactionMeta = this.getTransaction(\n      transactionId,\n    ) as TransactionMeta;\n\n    if (updatedTransactionParams.length > 0) {\n      this.#onTransactionParamsUpdated(\n        transactionMeta,\n        updatedTransactionParams,\n      );\n    }\n\n    return transactionMeta;\n  }\n\n  async #updateFirstTimeInteraction(\n    transactionMeta: TransactionMeta,\n    {\n      traceContext,\n    }: {\n      traceContext?: TraceContext;\n    } = {},\n  ) {\n    if (!this.#isFirstTimeInteractionEnabled()) {\n      return;\n    }\n\n    const {\n      chainId,\n      id: transactionId,\n      txParams: { to, from },\n    } = transactionMeta;\n\n    const request: GetAccountAddressRelationshipRequest = {\n      chainId: hexToNumber(chainId),\n      to: to as string,\n      from,\n    };\n\n    validateParamTo(to);\n\n    const existingTransaction = this.state.transactions.find(\n      (tx) =>\n        tx.chainId === chainId &&\n        tx.txParams.from === from &&\n        tx.txParams.to === to &&\n        tx.id !== transactionId,\n    );\n\n    // Check if there is an existing transaction with the same from, to, and chainId\n    // else we continue to check the account address relationship from API\n    if (existingTransaction) {\n      return;\n    }\n\n    try {\n      const { count } = await this.#trace(\n        { name: 'Account Address Relationship', parentContext: traceContext },\n        () => getAccountAddressRelationship(request),\n      );\n\n      const isFirstTimeInteraction =\n        count === undefined ? undefined : count === 0;\n\n      const finalTransactionMeta = this.getTransaction(transactionId);\n\n      /* istanbul ignore if */\n      if (!finalTransactionMeta) {\n        log(\n          'Cannot update first time interaction as transaction not found',\n          transactionId,\n        );\n        return;\n      }\n\n      this.#updateTransactionInternal(\n        {\n          transactionId,\n          note: 'TransactionController#updateFirstInteraction - Update first time interaction',\n        },\n        (txMeta) => {\n          txMeta.isFirstTimeInteraction = isFirstTimeInteraction;\n        },\n      );\n\n      log('Updated first time interaction', transactionId, {\n        isFirstTimeInteraction,\n      });\n    } catch (error) {\n      log(\n        'Error fetching account address relationship, skipping first time interaction update',\n        error,\n      );\n    }\n  }\n\n  #checkIfTransactionParamsUpdated(newTransactionMeta: TransactionMeta) {\n    const { id: transactionId, txParams: newParams } = newTransactionMeta;\n\n    const originalParams = this.getTransaction(transactionId)?.txParams;\n\n    if (!originalParams || isEqual(originalParams, newParams)) {\n      return [];\n    }\n\n    const params = Object.keys(newParams) as (keyof TransactionParams)[];\n\n    const updatedProperties = params.filter(\n      (param) => newParams[param] !== originalParams[param],\n    );\n\n    log(\n      'Transaction parameters have been updated',\n      transactionId,\n      updatedProperties,\n      originalParams,\n      newParams,\n    );\n\n    return updatedProperties;\n  }\n\n  #onTransactionParamsUpdated(\n    transactionMeta: TransactionMeta,\n    updatedParams: (keyof TransactionParams)[],\n  ) {\n    if (\n      (['to', 'value', 'data'] as const).some((param) =>\n        updatedParams.includes(param),\n      )\n    ) {\n      log('Updating simulation data due to transaction parameter update');\n      this.#updateSimulationData(transactionMeta).catch((error) => {\n        log('Error updating simulation data', error);\n        throw error;\n      });\n    }\n  }\n\n  async #updateSimulationData(\n    transactionMeta: TransactionMeta,\n    { traceContext }: { traceContext?: TraceContext } = {},\n  ) {\n    const { id: transactionId, chainId, txParams } = transactionMeta;\n    const { from, to, value, data } = txParams;\n\n    let simulationData: SimulationData = {\n      error: {\n        code: SimulationErrorCode.Disabled,\n        message: 'Simulation disabled',\n      },\n      tokenBalanceChanges: [],\n    };\n\n    if (this.#isSimulationEnabled()) {\n      this.#updateTransactionInternal(\n        { transactionId, skipHistory: true },\n        (txMeta) => {\n          txMeta.simulationData = undefined;\n        },\n      );\n\n      simulationData = await this.#trace(\n        { name: 'Simulate', parentContext: traceContext },\n        () =>\n          getSimulationData({\n            chainId,\n            from: from as Hex,\n            to: to as Hex,\n            value: value as Hex,\n            data: data as Hex,\n          }),\n      );\n    }\n\n    const finalTransactionMeta = this.getTransaction(transactionId);\n\n    /* istanbul ignore if */\n    if (!finalTransactionMeta) {\n      log(\n        'Cannot update simulation data as transaction not found',\n        transactionId,\n        simulationData,\n      );\n\n      return;\n    }\n\n    this.#updateTransactionInternal(\n      {\n        transactionId,\n        note: 'TransactionController#updateSimulationData - Update simulation data',\n      },\n      (txMeta) => {\n        txMeta.simulationData = simulationData;\n      },\n    );\n\n    log('Updated simulation data', transactionId, simulationData);\n  }\n\n  #onGasFeePollerTransactionUpdate({\n    transactionId,\n    gasFeeEstimates,\n    gasFeeEstimatesLoaded,\n    layer1GasFee,\n  }: {\n    transactionId: string;\n    gasFeeEstimates?: GasFeeEstimates;\n    gasFeeEstimatesLoaded?: boolean;\n    layer1GasFee?: Hex;\n  }) {\n    this.#updateTransactionInternal(\n      { transactionId, skipHistory: true },\n      (txMeta) => {\n        if (gasFeeEstimates) {\n          txMeta.gasFeeEstimates = gasFeeEstimates;\n        }\n\n        if (gasFeeEstimatesLoaded !== undefined) {\n          txMeta.gasFeeEstimatesLoaded = gasFeeEstimatesLoaded;\n        }\n\n        if (layer1GasFee) {\n          txMeta.layer1GasFee = layer1GasFee;\n        }\n      },\n    );\n  }\n\n  #getSelectedAccount() {\n    return this.messagingSystem.call('AccountsController:getSelectedAccount');\n  }\n\n  #updateSubmitHistory(transactionMeta: TransactionMeta, hash: string): void {\n    const { chainId, networkClientId, origin, rawTx, txParams } =\n      transactionMeta;\n\n    const { networkConfigurationsByChainId } = this.getNetworkState();\n    const networkConfiguration = networkConfigurationsByChainId[chainId as Hex];\n\n    const endpoint = networkConfiguration?.rpcEndpoints.find(\n      (currentEndpoint) => currentEndpoint.networkClientId === networkClientId,\n    );\n\n    const networkUrl = endpoint?.url;\n    const networkType = endpoint?.name ?? networkClientId;\n\n    const submitHistoryEntry: SubmitHistoryEntry = {\n      chainId,\n      hash,\n      networkType,\n      networkUrl,\n      origin,\n      rawTransaction: rawTx as string,\n      time: Date.now(),\n      transaction: txParams,\n    };\n\n    log('Updating submit history', submitHistoryEntry);\n\n    this.update((state) => {\n      const { submitHistory } = state;\n\n      if (submitHistory.length === SUBMIT_HISTORY_LIMIT) {\n        submitHistory.pop();\n      }\n\n      submitHistory.unshift(submitHistoryEntry);\n    });\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/TransactionController.d.cts b/dist/TransactionController.d.cts
index d0c0464713775e9dedccb6190d6c25d3db4a62f1..7d52a63a2c7b78f6660e2d13ee3c45b5756c96a7 100644
--- a/dist/TransactionController.d.cts
+++ b/dist/TransactionController.d.cts
@@ -615,13 +615,6 @@ export declare class TransactionController extends BaseController<typeof control
         to?: string;
         value?: string;
     }): Promise<Readonly<TransactionMeta> | undefined>;
-    /**
-     * Update the isActive state of a transaction.
-     *
-     * @param transactionId - The ID of the transaction to update.
-     * @param isActive - The active state.
-     */
-    setTransactionActive(transactionId: string, isActive: boolean): void;
     /**
      * Signs and returns the raw transaction data for provided transaction params list.
      *
diff --git a/dist/TransactionController.d.cts.map b/dist/TransactionController.d.cts.map
index 766f8c2567a5d54a1ef1c62c4decfc70473937c4..35a72d42fa4f8fcecf3383bf0d7ad25270472954 100644
--- a/dist/TransactionController.d.cts.map
+++ b/dist/TransactionController.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"TransactionController.d.cts","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"TransactionController.d.cts","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/TransactionController.d.mts b/dist/TransactionController.d.mts
index 17f69ceec31e747513a4046774c90c0522751122..cb883aba8538f89fd8757dceaa7176fc7ccc055e 100644
--- a/dist/TransactionController.d.mts
+++ b/dist/TransactionController.d.mts
@@ -615,13 +615,6 @@ export declare class TransactionController extends BaseController<typeof control
         to?: string;
         value?: string;
     }): Promise<Readonly<TransactionMeta> | undefined>;
-    /**
-     * Update the isActive state of a transaction.
-     *
-     * @param transactionId - The ID of the transaction to update.
-     * @param isActive - The active state.
-     */
-    setTransactionActive(transactionId: string, isActive: boolean): void;
     /**
      * Signs and returns the raw transaction data for provided transaction params list.
      *
diff --git a/dist/TransactionController.d.mts.map b/dist/TransactionController.d.mts.map
index ad04e3efa6ddc28edf5ad833f439ac10ce6df942..a9e8c36d16d160f8535a6fe4a25e6c6e55ca24fc 100644
--- a/dist/TransactionController.d.mts.map
+++ b/dist/TransactionController.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"TransactionController.d.mts","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,gBAAgB,EAAE,uBAAuB;AACvD,OAAO,KAAK,EAAE,0CAA0C,EAAE,sCAAsC;AAChG,OAAO,KAAK,EAEV,kBAAkB,EAEnB,sCAAsC;AACvC,OAAO,KAAK,EACV,wBAAwB,EACxB,0BAA0B,EAC1B,mBAAmB,EACpB,kCAAkC;AACnC,OAAO,EAAE,cAAc,EAAE,kCAAkC;AAO3D,OAAO,KAAK,EAAE,aAAa,EAAgB,mCAAmC;AAE9E,OAAO,KAAK,EACV,0BAA0B,EAC1B,WAAW,EACZ,qCAAqC;AACtC,OAAO,KAAK,EAEV,eAAe,EACf,iBAAiB,EACjB,iCAAiC,EACjC,YAAY,EAEZ,mDAAmD,EACnD,2CAA2C,EAC5C,qCAAqC;AAEtC,OAAO,KAAK,EACV,SAAS,EACT,WAAW,IAAI,uBAAuB,EACvC,gCAAgC;AAGjC,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAoB3C,OAAO,KAAK,EAAE,0BAA0B,EAAE,gDAA4C;AAYtF,OAAO,KAAK,EAGV,YAAY,EACZ,uBAAuB,EACvB,oBAAoB,EACpB,iBAAiB,EACjB,eAAe,EACf,kBAAkB,EAClB,YAAY,EACZ,qBAAqB,EAIrB,kBAAkB,EAClB,aAAa,EACb,sBAAsB,EACtB,kBAAkB,EACnB,oBAAgB;AACjB,OAAO,EAEL,eAAe,EACf,iBAAiB,EAElB,oBAAgB;AACjB,OAAO,KAAK,EAAE,kCAAkC,EAAE,4BAAwB;AAiE1E;;;;;;GAMG;AAIH,MAAM,WAAW,MAAM;IACrB,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;IACxB,eAAe,EAAE,eAAe,CAAC;CAClC;AAED;;;;;GAKG;AACH,MAAM,MAAM,UAAU,GAAG;IACvB,cAAc,EAAE,MAAM,CAAC;IACvB,oBAAoB,EAChB;QACE,IAAI,EAAE,MAAM,CAAC;QACb,IAAI,EAAE;YAAE,IAAI,EAAE,MAAM,CAAA;SAAE,EAAE,CAAC;KAC1B,GACD;QAIE,IAAI,CAAC,EAAE,GAAG,CAAC;QAIX,IAAI,CAAC,EAAE,GAAG,CAAC;KACZ,CAAC;CACP,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,MAAM,0BAA0B,GAAG;IACvC,YAAY,EAAE,eAAe,EAAE,CAAC;IAChC,UAAU,EAAE,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACvC,uBAAuB,EAAE;QAAE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAA;KAAE,CAAC;IAC5D,aAAa,EAAE,kBAAkB,EAAE,CAAC;CACrC,CAAC;AAEF;;GAEG;AACH,eAAO,MAAM,WAAW,MAAM,CAAC;AAE/B;;GAEG;AACH,eAAO,MAAM,aAAa,MAAM,CAAC;AAEjC;;GAEG;AACH,MAAM,MAAM,mCAAmC,GAAG,wBAAwB,CACxE,OAAO,cAAc,EACrB,0BAA0B,CAC3B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,4BAA4B,GAAG,mCAAmC,CAAC;AAE/E;;;;GAIG;AACH,MAAM,MAAM,yBAAyB,GAAG;IACtC,iBAAiB,CAAC,EAAE,MAAM,OAAO,CAAC;CACnC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,cAAc,EAAE,OAAO,CAAC;IACxB,sBAAsB,EAAE,OAAO,CAAC;IAChC,YAAY,EAAE,OAAO,CAAC;IACtB,qCAAqC,CAAC,EAAE,MAAM,OAAO,CAAC,OAAO,CAAC,CAAC;IAC/D,qCAAqC,EAAE,MAAM,OAAO,CAAC,OAAO,CAAC,CAAC;IAC9D,8BAA8B,CAAC,EAAE,CAC/B,OAAO,EAAE,MAAM,EACf,OAAO,CAAC,EAAE,MAAM,KACb,uBAAuB,EAAE,CAAC;IAC/B,kBAAkB,CAAC,EAAE,CACnB,OAAO,EAAE,0BAA0B,KAChC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC1B,wBAAwB,EAAE,iBAAiB,CAAC,0BAA0B,CAAC,CAAC;IACxE,eAAe,EAAE,MAAM,YAAY,CAAC;IACpC,oBAAoB,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;IAC9D,eAAe,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,KAAK,YAAY,GAAG,SAAS,CAAC;IAC7D,oBAAoB,CAAC,EAAE,0BAA0B,GAAG;QAClD,2EAA2E;QAC3E,yBAAyB,CAAC,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;KACjD,CAAC;IACF,6BAA6B,CAAC,EAAE,MAAM,OAAO,CAAC;IAC9C,mBAAmB,CAAC,EAAE,MAAM,OAAO,CAAC;IACpC,SAAS,EAAE,8BAA8B,CAAC;IAC1C,mBAAmB,CAAC,EAAE,yBAAyB,CAAC;IAChD,uBAAuB,CAAC,EAAE,uBAAuB,CAAC;IAClD,IAAI,CAAC,EAAE,CACL,WAAW,EAAE,gBAAgB,EAC7B,IAAI,EAAE,MAAM,EACZ,eAAe,CAAC,EAAE,eAAe,KAC9B,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAC/B,KAAK,CAAC,EAAE,OAAO,CAAC,0BAA0B,CAAC,CAAC;IAC5C,eAAe,CAAC,EAAE,OAAO,CAAC;IAC1B,KAAK,CAAC,EAAE,aAAa,CAAC;IACtB,uBAAuB,EAAE,MAAM,CAAC;IAChC,KAAK,EAAE;QACL,SAAS,CAAC,EAAE,CACV,eAAe,EAAE,eAAe,EAChC,QAAQ,EAAE,gBAAgB,KACvB,OAAO,CAAC;QACb,6BAA6B,CAAC,EAAE,CAC9B,eAAe,EAAE,eAAe,KAC7B,OAAO,CAAC;QACb,aAAa,CAAC,EAAE,CAAC,eAAe,EAAE,eAAe,KAAK,OAAO,CAAC;QAC9D,0BAA0B,CAAC,EAAE,CAC3B,eAAe,EAAE,eAAe,KAC7B,CAAC,eAAe,GAAG,SAAS,CAAC,EAAE,CAAC;QACrC,OAAO,CAAC,EAAE,CACR,eAAe,EAAE,eAAe,KAC7B,OAAO,CAAC;YAAE,eAAe,EAAE,MAAM,CAAA;SAAE,CAAC,CAAC;KAC3C,CAAC;CACH,CAAC;AAEF;;GAEG;AACH,QAAA,MAAM,cAAc,0BAA0B,CAAC;AAE/C;;GAEG;AACH,MAAM,MAAM,cAAc,GACtB,0CAA0C,GAC1C,kBAAkB,GAClB,kCAAkC,GAClC,mDAAmD,GACnD,2CAA2C,CAAC;AAEhD;;GAEG;AACH,MAAM,MAAM,aAAa,GAAG,iCAAiC,CAAC;AAE9D;;GAEG;AACH,MAAM,MAAM,qCAAqC,GAAG,0BAA0B,CAC5E,OAAO,cAAc,EACrB,0BAA0B,CAC3B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,sDAAsD,GAAG;IACnE,IAAI,EAAE,GAAG,OAAO,cAAc,+BAA+B,CAAC;IAC9D,OAAO,EAAE,CAAC,oBAAoB,EAAE,eAAe,EAAE,CAAC,CAAC;CACpD,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,uDAAuD,GAAG;IACpE,IAAI,EAAE,GAAG,OAAO,cAAc,gCAAgC,CAAC;IAC/D,OAAO,EAAE;QACP;YACE,eAAe,EAAE,eAAe,CAAC;YACjC,uBAAuB,CAAC,EAAE,eAAe,CAAC;SAC3C;KACF,CAAC;CACH,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,iDAAiD,GAAG;IAC9D,IAAI,EAAE,GAAG,OAAO,cAAc,0BAA0B,CAAC;IACzD,OAAO,EAAE,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,6CAA6C,GAAG;IAC1D,IAAI,EAAE,GAAG,OAAO,cAAc,sBAAsB,CAAC;IACrD,OAAO,EAAE;QACP;YACE,eAAe,EAAE,eAAe,CAAC;YACjC,QAAQ,CAAC,EAAE,MAAM,CAAC;SACnB;KACF,CAAC;CACH,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,8CAA8C,GAAG;IAC3D,IAAI,EAAE,GAAG,OAAO,cAAc,uBAAuB,CAAC;IACtD,OAAO,EAAE,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,4CAA4C,GAAG;IACzD,IAAI,EAAE,GAAG,OAAO,cAAc,qBAAqB,CAAC;IACpD,OAAO,EAAE,CAAC;QAAE,eAAe,EAAE,eAAe,CAAA;KAAE,CAAC,CAAC;CACjD,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,2CAA2C,GAAG;IACxD,IAAI,EAAE,GAAG,OAAO,cAAc,oBAAoB,CAAC;IACnD,OAAO,EAAE;QACP;YACE,QAAQ,CAAC,EAAE,MAAM,CAAC;YAClB,KAAK,EAAE,MAAM,CAAC;YACd,eAAe,EAAE,eAAe,CAAC;SAClC;KACF,CAAC;CACH,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,6CAA6C,GAAG;IAC1D,IAAI,EAAE,GAAG,OAAO,cAAc,sBAAsB,CAAC;IACrD,OAAO,EAAE,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,oDAAoD,GAAG;IACjE,IAAI,EAAE,GAAG,OAAO,cAAc,6BAA6B,CAAC;IAC5D,OAAO,EAAE,CAAC;QAAE,eAAe,EAAE,eAAe,CAAA;KAAE,CAAC,CAAC;CACjD,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,4CAA4C,GAAG;IACzD,IAAI,EAAE,GAAG,OAAO,cAAc,qBAAqB,CAAC;IACpD,OAAO,EAAE,CAAC;QAAE,eAAe,EAAE,eAAe,CAAA;KAAE,CAAC,CAAC;CACjD,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,mDAAmD,GAAG;IAChE,IAAI,EAAE,GAAG,OAAO,cAAc,4BAA4B,CAAC;IAC3D,OAAO,EAAE,CAAC;QAAE,eAAe,EAAE,eAAe,CAAA;KAAE,CAAC,CAAC;CACjD,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,iDAAiD,GAAG;IAC9D,IAAI,EAAE,GAAG,OAAO,cAAc,+BAA+B,CAAC;IAC9D,OAAO,EAAE,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,6CAA6C,GAAG;IAC1D,IAAI,EAAE,GAAG,OAAO,cAAc,sBAAsB,CAAC;IACrD,OAAO,EAAE;QACP;YACE,eAAe,EAAE,eAAe,CAAC;YACjC,QAAQ,CAAC,EAAE,MAAM,CAAC;SACnB;KACF,CAAC;CACH,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,kDAAkD,GAAG;IAC/D,IAAI,EAAE,GAAG,OAAO,cAAc,2BAA2B,CAAC;IAC1D,OAAO,EAAE;QACP;YACE,eAAe,EAAE,eAAe,CAAC;SAClC;KACF,CAAC;CACH,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,8CAA8C,GAAG;IAC3D,IAAI,EAAE,GAAG,OAAO,cAAc,uBAAuB,CAAC;IACtD,OAAO,EAAE;QACP;YACE,eAAe,EAAE,eAAe,CAAC;YACjC,QAAQ,CAAC,EAAE,MAAM,CAAC;SACnB;KACF,CAAC;CACH,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,oDAAoD,GAAG;IACjE,IAAI,EAAE,GAAG,OAAO,cAAc,6BAA6B,CAAC;IAC5D,OAAO,EAAE,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;CAC7C,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,2BAA2B,GACnC,sDAAsD,GACtD,uDAAuD,GACvD,iDAAiD,GACjD,qCAAqC,GACrC,6CAA6C,GAC7C,8CAA8C,GAC9C,4CAA4C,GAC5C,2CAA2C,GAC3C,6CAA6C,GAC7C,oDAAoD,GACpD,4CAA4C,GAC5C,mDAAmD,GACnD,iDAAiD,GACjD,6CAA6C,GAC7C,kDAAkD,GAClD,8CAA8C,GAC9C,oDAAoD,CAAC;AAEzD;;GAEG;AACH,MAAM,MAAM,8BAA8B,GAAG,mBAAmB,CAC9D,OAAO,cAAc,EACrB,4BAA4B,GAAG,cAAc,EAC7C,2BAA2B,GAAG,aAAa,EAC3C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;GAEG;AACH,oBAAY,aAAa;IACvB,QAAQ,aAAa;IACrB,WAAW,iBAAiB;IAC5B,2BAA2B,oCAAoC;CAChE;AAgBD;;GAEG;AACH,qBAAa,qBAAsB,SAAQ,cAAc,CACvD,OAAO,cAAc,EACrB,0BAA0B,EAC1B,8BAA8B,CAC/B;;IAGC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAU;IAE5C,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAU;IAE1C,OAAO,CAAC,QAAQ,CAAC,yBAAyB,CAAU;IAEpD,OAAO,CAAC,QAAQ,CAAC,uBAAuB,CAA0B;IAIlE,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAe;IAErC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAe;IAE3C,OAAO,CAAC,QAAQ,CAAC,eAAe,CAA6C;IAE7E,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAqB;IAErD,OAAO,CAAC,QAAQ,CAAC,qCAAqC,CAAyB;IAE/E,OAAO,CAAC,QAAQ,CAAC,qCAAqC,CAEhC;IAEtB,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAET;IAE1B,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAEf;IAEvB,OAAO,CAAC,QAAQ,CAAC,8BAA8B,CAGhB;IAM/B,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAqB;IAMvD,OAAO,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAA0B;IAInE,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAsC;IAYzE,OAAO,CAAC,QAAQ,CAAC,SAAS,CAGb;IAEb,OAAO,CAAC,QAAQ,CAAC,6BAA6B,CAEjC;IAEb,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAgD;IAE9E,OAAO,CAAC,QAAQ,CAAC,OAAO,CAGmB;IAE3C,OAAO,CAAC,QAAQ,CAAC,0BAA0B,CAEN;IAErC,OAAO,CAAC,eAAe;IAuDvB;;OAEG;IACH,IAAI,CAAC,EAAE,CACL,WAAW,EAAE,gBAAgB,EAC7B,IAAI,EAAE,MAAM,EACZ,eAAe,CAAC,EAAE,eAAe,KAC9B,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAE/B;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;gBACS,EACV,cAAc,EACd,sBAAsB,EACtB,YAAY,EACZ,qCAAqC,EACrC,qCAAqC,EACrC,8BAA8B,EAC9B,kBAAkB,EAClB,wBAAwB,EACxB,eAAe,EACf,oBAAoB,EACpB,eAAe,EACf,oBAAyB,EACzB,6BAA6B,EAC7B,mBAAmB,EACnB,SAAS,EACT,mBAAwB,EACxB,uBAAuB,EACvB,IAAI,EACJ,KAAK,EACL,eAAe,EACf,KAAK,EACL,uBAA4B,EAC5B,KAAK,GACN,EAAE,4BAA4B;IAmK/B;;OAEG;IACH,OAAO;IAIP;;;;;;OAMG;IACG,gBAAgB,CACpB,cAAc,EAAE,MAAM,EACtB,eAAe,EAAE,eAAe,GAC/B,OAAO,CAAC,UAAU,CAAC;IAItB;;;;;;;;;;;;;;;;;;;;;OAqBG;IACG,cAAc,CAClB,QAAQ,EAAE,iBAAiB,EAC3B,OAAO,EAAE;QACP,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,iBAAiB,CAAC,EAAE,YAAY,CAAC;QACjC,MAAM,CAAC,EAAE,MAAM,CAAC;QAChB,eAAe,EAAE,eAAe,CAAC;QACjC,MAAM,CAAC,EAAE,MAAM,CAAC;QAChB,eAAe,CAAC,EAAE,OAAO,GAAG,SAAS,CAAC;QACtC,qBAAqB,CAAC,EAAE,qBAAqB,CAAC;QAC9C,eAAe,CAAC,EAAE,oBAAoB,EAAE,CAAC;QACzC,KAAK,CAAC,EAAE;YACN,YAAY,CAAC,EAAE,OAAO,CAAC;YACvB,IAAI,CAAC,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;SACjC,CAAC;QACF,YAAY,CAAC,EAAE,OAAO,CAAC;QACvB,IAAI,CAAC,EAAE,eAAe,CAAC;KACxB,GACA,OAAO,CAAC,MAAM,CAAC;IAgKlB,+BAA+B,CAAC,QAAQ,EAAE,GAAG,EAAE;IAQ/C,8BAA8B,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE;IAczC,0BAA0B,CAAC,QAAQ,EAAE,GAAG,EAAE;IAQhD;;;;;;;;;OASG;IACG,eAAe,CACnB,aAAa,EAAE,MAAM,EACrB,SAAS,CAAC,EAAE,aAAa,GAAG,sBAAsB,EAClD,EACE,gBAAgB,EAChB,QAAQ,GACT,GAAE;QAAE,gBAAgB,CAAC,EAAE,MAAM,CAAC;QAAC,QAAQ,CAAC,EAAE,MAAM,CAAA;KAAO;IA6B1D;;;;;;;;OAQG;IACG,kBAAkB,CACtB,aAAa,EAAE,MAAM,EACrB,SAAS,CAAC,EAAE,aAAa,GAAG,sBAAsB,EAClD,EACE,QAAQ,EACR,gBAAgB,GACjB,GAAE;QAAE,QAAQ,CAAC,EAAE,MAAM,CAAC;QAAC,gBAAgB,CAAC,EAAE,MAAM,CAAA;KAAO;IA4I1D;;;;;;OAMG;IACG,WAAW,CACf,WAAW,EAAE,iBAAiB,EAC9B,eAAe,EAAE,eAAe;;;;;;;;;;;IAclC;;;;;;OAMG;IACG,mBAAmB,CACvB,WAAW,EAAE,iBAAiB,EAC9B,UAAU,EAAE,MAAM,EAClB,eAAe,EAAE,eAAe;;;;;;;;;;;IAmBlC;;;;;OAKG;IACH,iBAAiB,CAAC,eAAe,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM;IAQhE;;;;;OAKG;IACH,2BAA2B,CACzB,aAAa,EAAE,MAAM,EACrB,qBAAqB,EAAE,qBAAqB;IAuB9C;;;;;;OAMG;IACH,gBAAgB,CAAC,EACf,OAAO,EACP,OAAO,GACR,GAAE;QACD,OAAO,CAAC,EAAE,MAAM,CAAC;QACjB,OAAO,CAAC,EAAE,MAAM,CAAC;KACb;IA6BN;;;;;;OAMG;IACG,0BAA0B,CAC9B,eAAe,EAAE,eAAe,EAChC,kBAAkB,EAAE,kBAAkB,EACtC,aAAa,EAAE,GAAG;IA2CpB;;;;;;;OAOG;IACH,gCAAgC,CAC9B,aAAa,EAAE,MAAM,EACrB,4BAA4B,EAAE,MAAM,EACpC,oBAAoB,EAAE,oBAAoB,EAAE,GAC3C,eAAe;IAmClB;;;;;;;;;;;;;;;;;OAiBG;IACH,wBAAwB,CACtB,aAAa,EAAE,MAAM,EACrB,EACE,mBAAmB,EACnB,YAAY,EACZ,iBAAiB,EACjB,GAAG,EACH,QAAQ,EACR,QAAQ,EACR,oBAAoB,EACpB,YAAY,EACZ,mBAAmB,EACnB,kBAAkB,EAClB,YAAY,GACb,EAAE;QACD,mBAAmB,CAAC,EAAE,MAAM,CAAC;QAC7B,YAAY,CAAC,EAAE,MAAM,CAAC;QACtB,iBAAiB,CAAC,EAAE,MAAM,CAAC;QAC3B,GAAG,CAAC,EAAE,MAAM,CAAC;QACb,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,oBAAoB,CAAC,EAAE,MAAM,CAAC;QAC9B,YAAY,CAAC,EAAE,MAAM,CAAC;QACtB,mBAAmB,CAAC,EAAE,MAAM,CAAC;QAC7B,kBAAkB,CAAC,EAAE,OAAO,CAAC;QAC7B,YAAY,CAAC,EAAE,MAAM,CAAC;KACvB,GACA,eAAe;IA+ClB;;;;;;;;;OASG;IACH,uBAAuB,CACrB,aAAa,EAAE,MAAM,EACrB,EACE,QAAQ,EACR,YAAY,EACZ,oBAAoB,GACrB,EAAE;QACD,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,YAAY,CAAC,EAAE,MAAM,CAAC;QACtB,oBAAoB,CAAC,EAAE,MAAM,CAAC;KAC/B,GACA,eAAe;IAqCZ,YAAY,CAChB,OAAO,EAAE,MAAM,EACf,eAAe,EAAE,eAAe,GAC/B,OAAO,CAAC,SAAS,CAAC;IAOrB;;;;;;;;;;;;OAYG;IACG,oBAAoB,CACxB,IAAI,EAAE,MAAM,EACZ,EACE,IAAI,EACJ,GAAG,EACH,QAAQ,EACR,IAAI,EACJ,EAAE,EACF,KAAK,GACN,EAAE;QACD,IAAI,CAAC,EAAE,MAAM,CAAC;QACd,GAAG,CAAC,EAAE,MAAM,CAAC;QACb,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,IAAI,CAAC,EAAE,MAAM,CAAC;QACd,EAAE,CAAC,EAAE,MAAM,CAAC;QACZ,KAAK,CAAC,EAAE,MAAM,CAAC;KAChB;IAqDH;;;;;OAKG;IACH,oBAAoB,CAAC,aAAa,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO;IAqB7D;;;;;;;OAOG;IACG,gCAAgC,CACpC,cAAc,GAAE,CAAC,iBAAiB,GAAG;QAAE,OAAO,EAAE,GAAG,CAAA;KAAE,CAAC,EAAO,EAC7D,EAAE,QAAQ,EAAE,GAAE;QAAE,QAAQ,CAAC,EAAE,OAAO,CAAA;KAAO,GACxC,OAAO,CAAC,MAAM,GAAG,MAAM,EAAE,CAAC;IAyD7B;;;;;;;;OAQG;IACH,0BAA0B,CACxB,aAAa,EAAE,MAAM,EACrB,EACE,YAAY,EACZ,IAAI,EACJ,MAAM,GACP,EAAE;QACD,YAAY,CAAC,EAAE,MAAM,CAAC;QACtB,IAAI,CAAC,EAAE,MAAM,CAAC;QACd,MAAM,CAAC,EAAE,iBAAiB,CAAC;KAC5B;IA8DH;;;;;;;;OAQG;IACH,eAAe,CAAC,EACd,WAAW,EACX,KAAK,EACL,cAAmB,GACpB,GAAE;QACD,WAAW,CAAC,EAAE,eAAe,EAAE,CAAC;QAChC,KAAK,CAAC,EAAE,MAAM,CAAC;QAGf,cAAc,CAAC,EAAE,GAAG,CAAC;KACjB,GAAG,eAAe,EAAE;IA6EpB,cAAc,CAAC,EACnB,iBAAiB,EACjB,OAAO,EACP,eAAe,EAAE,sBAAsB,GACxC,EAAE;QACD,iBAAiB,EAAE,iBAAiB,CAAC;QACrC,OAAO,CAAC,EAAE,GAAG,CAAC;QACd,eAAe,CAAC,EAAE,eAAe,CAAC;KACnC,GAAG,OAAO,CAAC,kBAAkB,CAAC;IAgC/B;;;;;;;OAOG;IACG,eAAe,CAAC,EACpB,iBAAiB,EACjB,OAAO,EACP,eAAe,GAChB,EAAE;QACD,iBAAiB,EAAE,iBAAiB,CAAC;QACrC,OAAO,CAAC,EAAE,GAAG,CAAC;QACd,eAAe,CAAC,EAAE,eAAe,CAAC;KACnC,GAAG,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC;YAgBd,uBAAuB;IAiCrC;;OAEG;IACH,2BAA2B;IAS3B;;;;;OAKG;IACH,uBAAuB,CAAC,aAAa,EAAE,MAAM;IAoB7C,OAAO,CAAC,WAAW;YAUL,mBAAmB;IAqDjC,OAAO,CAAC,aAAa;IAKrB,OAAO,CAAC,0BAA0B;YAgBpB,eAAe;IA6H7B;;;;;;;;OAQG;YACW,kBAAkB;YA8JlB,kBAAkB;IAgBhC;;;;;;OAMG;IACH,OAAO,CAAC,iBAAiB;IAgCzB;;;;;;;;;;;;;OAaG;IACH,OAAO,CAAC,wBAAwB;IAiChC;;;;;OAKG;IACH,OAAO,CAAC,YAAY;IAQpB;;;;;OAKG;IACH,OAAO,CAAC,iBAAiB;YASX,eAAe;IA+B7B,OAAO,CAAC,cAAc;IAOtB,OAAO,CAAC,qBAAqB;IAa7B,OAAO,CAAC,aAAa;IAIrB,OAAO,CAAC,sBAAsB;IA2D9B,OAAO,CAAC,sBAAsB;IAoC9B,OAAO,CAAC,4BAA4B;IAsCpC;;;;;OAKG;IACH,OAAO,CAAC,sBAAsB;IAsC9B;;;;;OAKG;IACH,OAAO,CAAC,0BAA0B;IA4ClC;;;;OAIG;IACH,OAAO,CAAC,2BAA2B;IAenC;;;;;OAKG;IACH,OAAO,CAAC,0BAA0B;YAMpB,0BAA0B;IAUxC;;;;;;;OAOG;IACH,OAAO,CAAC,wBAAwB;YAmBlB,uBAAuB;YAYvB,eAAe;IA+E7B,OAAO,CAAC,yBAAyB;IAMjC,OAAO,CAAC,2BAA2B;IAanC,OAAO,CAAC,sBAAsB;YAmBhB,iBAAiB;YAiKjB,0BAA0B;IAcxC;;;;;OAKG;IAIH,OAAO,CAAC,kCAAkC;CAqU3C"}
\ No newline at end of file
+{"version":3,"file":"TransactionController.d.mts","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/TransactionController.mjs b/dist/TransactionController.mjs
index e4707fb0521a4f5fba14eafe56b18b7e6fe4d232..6b1a878d00f3b6c51927bdb198695b31102bd069 100644
--- a/dist/TransactionController.mjs
+++ b/dist/TransactionController.mjs
@@ -9,7 +9,7 @@ var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
     return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
 };
-var _TransactionController_instances, _TransactionController_internalEvents, _TransactionController_methodDataHelper, _TransactionController_incomingTransactionChainIds, _TransactionController_incomingTransactionHelper, _TransactionController_incomingTransactionOptions, _TransactionController_pendingTransactionOptions, _TransactionController_trace, _TransactionController_transactionHistoryLimit, _TransactionController_isFirstTimeInteractionEnabled, _TransactionController_isSimulationEnabled, _TransactionController_testGasFeeFlows, _TransactionController_multichainTrackingHelper, _TransactionController_retryTransaction, _TransactionController_getChainId, _TransactionController_getNetworkClientId, _TransactionController_getEthQuery, _TransactionController_getProvider, _TransactionController_createNonceTracker, _TransactionController_createPendingTransactionTracker, _TransactionController_checkForPendingTransactionAndStartPolling, _TransactionController_stopAllTracking, _TransactionController_addIncomingTransactionHelperListeners, _TransactionController_removePendingTransactionTrackerListeners, _TransactionController_addPendingTransactionTrackerListeners, _TransactionController_getNonceTrackerPendingTransactions, _TransactionController_getGasFeeFlows, _TransactionController_getLayer1GasFeeFlows, _TransactionController_updateTransactionInternal, _TransactionController_updateFirstTimeInteraction, _TransactionController_updateSimulationData, _TransactionController_onGasFeePollerTransactionUpdate, _TransactionController_getSelectedAccount, _TransactionController_updateSubmitHistory;
+var _TransactionController_instances, _TransactionController_internalEvents, _TransactionController_methodDataHelper, _TransactionController_incomingTransactionChainIds, _TransactionController_incomingTransactionHelper, _TransactionController_incomingTransactionOptions, _TransactionController_pendingTransactionOptions, _TransactionController_trace, _TransactionController_transactionHistoryLimit, _TransactionController_isFirstTimeInteractionEnabled, _TransactionController_isSimulationEnabled, _TransactionController_testGasFeeFlows, _TransactionController_multichainTrackingHelper, _TransactionController_retryTransaction, _TransactionController_getChainId, _TransactionController_getNetworkClientId, _TransactionController_getEthQuery, _TransactionController_getProvider, _TransactionController_createNonceTracker, _TransactionController_createPendingTransactionTracker, _TransactionController_checkForPendingTransactionAndStartPolling, _TransactionController_stopAllTracking, _TransactionController_addIncomingTransactionHelperListeners, _TransactionController_removePendingTransactionTrackerListeners, _TransactionController_addPendingTransactionTrackerListeners, _TransactionController_getNonceTrackerPendingTransactions, _TransactionController_getGasFeeFlows, _TransactionController_getLayer1GasFeeFlows, _TransactionController_updateTransactionInternal, _TransactionController_updateFirstTimeInteraction, _TransactionController_checkIfTransactionParamsUpdated, _TransactionController_onTransactionParamsUpdated, _TransactionController_updateSimulationData, _TransactionController_onGasFeePollerTransactionUpdate, _TransactionController_getSelectedAccount, _TransactionController_updateSubmitHistory;
 function $importDefault(module) {
     if (module?.__esModule) {
         return module.default;
@@ -29,7 +29,7 @@ import { Mutex } from "async-mutex";
 // eslint-disable-next-line import-x/no-nodejs-modules
 import { EventEmitter } from "events";
 import $lodash from "lodash";
-const { cloneDeep, mapValues, merge, pickBy, sortBy } = $lodash;
+const { cloneDeep, mapValues, merge, pickBy, sortBy, isEqual } = $lodash;
 import { v1 as random } from "uuid";
 import { getAccountAddressRelationship } from "./api/accounts-api.mjs";
 import { DefaultGasFeeFlow } from "./gas-flows/DefaultGasFeeFlow.mjs";
@@ -43,7 +43,6 @@ import { IncomingTransactionHelper } from "./helpers/IncomingTransactionHelper.m
 import { MethodDataHelper } from "./helpers/MethodDataHelper.mjs";
 import { MultichainTrackingHelper } from "./helpers/MultichainTrackingHelper.mjs";
 import { PendingTransactionTracker } from "./helpers/PendingTransactionTracker.mjs";
-import { ResimulateHelper, hasSimulationDataChanged, shouldResimulate } from "./helpers/ResimulateHelper.mjs";
 import { projectLogger as log } from "./logger.mjs";
 import { TransactionEnvelopeType, TransactionType, TransactionStatus, SimulationErrorCode } from "./types.mjs";
 import { signAuthorizationList } from "./utils/eip7702.mjs";
@@ -214,7 +213,7 @@ export class TransactionController extends BaseController {
         this.isHistoryDisabled = disableHistory ?? false;
         this.isSwapsDisabled = disableSwaps ?? false;
         __classPrivateFieldSet(this, _TransactionController_isFirstTimeInteractionEnabled, isFirstTimeInteractionEnabled ?? (() => true), "f");
-        __classPrivateFieldSet(this, _TransactionController_isSimulationEnabled, isSimulationEnabled ?? (() => true), "f");
+        __classPrivateFieldSet(this, _TransactionController_isSimulationEnabled, isSimulationEnabled ?? (() => false), "f");
         this.getSavedGasFees = getSavedGasFees ?? ((_chainId) => undefined);
         this.getCurrentAccountEIP1559Compatibility =
             getCurrentAccountEIP1559Compatibility ?? (() => Promise.resolve(true));
@@ -304,13 +303,6 @@ export class TransactionController extends BaseController {
         // when transactionsController state changes
         // check for pending transactions and start polling if there are any
         this.messagingSystem.subscribe('TransactionController:stateChange', __classPrivateFieldGet(this, _TransactionController_checkForPendingTransactionAndStartPolling, "f"));
-        new ResimulateHelper({
-            simulateTransaction: __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateSimulationData).bind(this),
-            onTransactionsUpdate: (listener) => {
-                this.messagingSystem.subscribe('TransactionController:stateChange', listener, (controllerState) => controllerState.transactions);
-            },
-            getTransactions: () => this.state.transactions,
-        });
         this.onBootCleanup();
         __classPrivateFieldGet(this, _TransactionController_checkForPendingTransactionAndStartPolling, "f").call(this);
     }
@@ -425,12 +417,14 @@ export class TransactionController extends BaseController {
             });
             this.addMetadata(addedTransactionMeta);
             if (requireApproval !== false) {
-                __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateSimulationData).call(this, addedTransactionMeta, {
-                    traceContext,
-                }).catch((error) => {
-                    log('Error while updating simulation data', error);
-                    throw error;
-                });
+                if (__classPrivateFieldGet(this, _TransactionController_isSimulationEnabled, "f").call(this)) {
+                    __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateSimulationData).call(this, addedTransactionMeta, {
+                        traceContext,
+                    }).catch((error) => {
+                        log('Error while updating simulation data', error);
+                        throw error;
+                    });
+                }
                 __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateFirstTimeInteraction).call(this, addedTransactionMeta, {
                     traceContext,
                 }).catch((error) => {
@@ -804,27 +798,6 @@ export class TransactionController extends BaseController {
         this.updateTransaction(updatedTransaction, `Update Editable Params for ${txId}`);
         return this.getTransaction(txId);
     }
-    /**
-     * Update the isActive state of a transaction.
-     *
-     * @param transactionId - The ID of the transaction to update.
-     * @param isActive - The active state.
-     */
-    setTransactionActive(transactionId, isActive) {
-        const transactionMeta = this.getTransaction(transactionId);
-        if (!transactionMeta) {
-            throw new Error(`Transaction with id ${transactionId} not found`);
-        }
-        __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateTransactionInternal).call(this, {
-            transactionId,
-            note: 'TransactionController#setTransactionActive - Transaction isActive updated',
-            skipHistory: true,
-            skipValidation: true,
-            skipResimulateCheck: true,
-        }, (updatedTransactionMeta) => {
-            updatedTransactionMeta.isActive = isActive;
-        });
-    }
     /**
      * Signs and returns the raw transaction data for provided transaction params list.
      *
@@ -1864,20 +1837,18 @@ _TransactionController_internalEvents = new WeakMap(), _TransactionController_me
     return [new LineaGasFeeFlow(), new DefaultGasFeeFlow()];
 }, _TransactionController_getLayer1GasFeeFlows = function _TransactionController_getLayer1GasFeeFlows() {
     return [new OptimismLayer1GasFeeFlow(), new ScrollLayer1GasFeeFlow()];
-}, _TransactionController_updateTransactionInternal = function _TransactionController_updateTransactionInternal({ transactionId, note, skipHistory, skipValidation, skipResimulateCheck, }, callback) {
-    let resimulateResponse;
+}, _TransactionController_updateTransactionInternal = function _TransactionController_updateTransactionInternal({ transactionId, note, skipHistory, skipValidation, }, callback) {
+    let updatedTransactionParams = [];
     this.update((state) => {
         const index = state.transactions.findIndex(({ id }) => id === transactionId);
         let transactionMeta = state.transactions[index];
-        const originalTransactionMeta = cloneDeep(transactionMeta);
         transactionMeta = callback(transactionMeta) ?? transactionMeta;
         if (skipValidation !== true) {
             transactionMeta.txParams = normalizeTransactionParams(transactionMeta.txParams);
             validateTxParams(transactionMeta.txParams);
         }
-        if (!skipResimulateCheck && __classPrivateFieldGet(this, _TransactionController_isSimulationEnabled, "f").call(this)) {
-            resimulateResponse = shouldResimulate(originalTransactionMeta, transactionMeta);
-        }
+        updatedTransactionParams =
+            __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_checkIfTransactionParamsUpdated).call(this, transactionMeta);
         const shouldSkipHistory = this.isHistoryDisabled || skipHistory;
         if (!shouldSkipHistory) {
             transactionMeta = updateTransactionHistory(transactionMeta, note ?? 'Transaction updated');
@@ -1885,13 +1856,8 @@ _TransactionController_internalEvents = new WeakMap(), _TransactionController_me
         state.transactions[index] = transactionMeta;
     });
     const transactionMeta = this.getTransaction(transactionId);
-    if (resimulateResponse?.resimulate) {
-        __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateSimulationData).call(this, transactionMeta, {
-            blockTime: resimulateResponse.blockTime,
-        }).catch((error) => {
-            log('Error during re-simulation', error);
-            throw error;
-        });
+    if (updatedTransactionParams.length > 0) {
+        __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_onTransactionParamsUpdated).call(this, transactionMeta, updatedTransactionParams);
     }
     return transactionMeta;
 }, _TransactionController_updateFirstTimeInteraction = async function _TransactionController_updateFirstTimeInteraction(transactionMeta, { traceContext, } = {}) {
@@ -1936,8 +1902,26 @@ _TransactionController_internalEvents = new WeakMap(), _TransactionController_me
     catch (error) {
         log('Error fetching account address relationship, skipping first time interaction update', error);
     }
-}, _TransactionController_updateSimulationData = async function _TransactionController_updateSimulationData(transactionMeta, { blockTime, traceContext, } = {}) {
-    const { id: transactionId, chainId, txParams, simulationData: prevSimulationData, } = transactionMeta;
+}, _TransactionController_checkIfTransactionParamsUpdated = function _TransactionController_checkIfTransactionParamsUpdated(newTransactionMeta) {
+    const { id: transactionId, txParams: newParams } = newTransactionMeta;
+    const originalParams = this.getTransaction(transactionId)?.txParams;
+    if (!originalParams || isEqual(originalParams, newParams)) {
+        return [];
+    }
+    const params = Object.keys(newParams);
+    const updatedProperties = params.filter((param) => newParams[param] !== originalParams[param]);
+    log('Transaction parameters have been updated', transactionId, updatedProperties, originalParams, newParams);
+    return updatedProperties;
+}, _TransactionController_onTransactionParamsUpdated = function _TransactionController_onTransactionParamsUpdated(transactionMeta, updatedParams) {
+    if (['to', 'value', 'data'].some((param) => updatedParams.includes(param))) {
+        log('Updating simulation data due to transaction parameter update');
+        __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateSimulationData).call(this, transactionMeta).catch((error) => {
+            log('Error updating simulation data', error);
+            throw error;
+        });
+    }
+}, _TransactionController_updateSimulationData = async function _TransactionController_updateSimulationData(transactionMeta, { traceContext } = {}) {
+    const { id: transactionId, chainId, txParams } = transactionMeta;
     const { from, to, value, data } = txParams;
     let simulationData = {
         error: {
@@ -1947,23 +1931,16 @@ _TransactionController_internalEvents = new WeakMap(), _TransactionController_me
         tokenBalanceChanges: [],
     };
     if (__classPrivateFieldGet(this, _TransactionController_isSimulationEnabled, "f").call(this)) {
+        __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateTransactionInternal).call(this, { transactionId, skipHistory: true }, (txMeta) => {
+            txMeta.simulationData = undefined;
+        });
         simulationData = await __classPrivateFieldGet(this, _TransactionController_trace, "f").call(this, { name: 'Simulate', parentContext: traceContext }, () => getSimulationData({
             chainId,
             from: from,
             to: to,
             value: value,
             data: data,
-        }, {
-            blockTime,
         }));
-        if (blockTime &&
-            prevSimulationData &&
-            hasSimulationDataChanged(prevSimulationData, simulationData)) {
-            simulationData = {
-                ...simulationData,
-                isUpdatedAfterSecurityCheck: true,
-            };
-        }
     }
     const finalTransactionMeta = this.getTransaction(transactionId);
     /* istanbul ignore if */
@@ -1974,7 +1951,6 @@ _TransactionController_internalEvents = new WeakMap(), _TransactionController_me
     __classPrivateFieldGet(this, _TransactionController_instances, "m", _TransactionController_updateTransactionInternal).call(this, {
         transactionId,
         note: 'TransactionController#updateSimulationData - Update simulation data',
-        skipResimulateCheck: Boolean(blockTime),
     }, (txMeta) => {
         txMeta.simulationData = simulationData;
     });
diff --git a/dist/TransactionController.mjs.map b/dist/TransactionController.mjs.map
index 83cb75852ad1a3b52b723f9705fcc7c47602c1c8..d852ee248c2d71a87f14faaef2339d7c5223608f 100644
--- a/dist/TransactionController.mjs.map
+++ b/dist/TransactionController.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"TransactionController.mjs","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TypedTransaction } from '@ethereumjs/tx';\nimport type { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  query,\n  ApprovalType,\n  ORIGIN_METAMASK,\n  convertHexToDecimal,\n} from '@metamask/controller-utils';\nimport type { TraceCallback, TraceContext } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  FetchGasFeeEstimateOptions,\n  GasFeeState,\n} from '@metamask/gas-fee-controller';\nimport type {\n  BlockTracker,\n  NetworkClientId,\n  NetworkController,\n  NetworkControllerStateChangeEvent,\n  NetworkState,\n  Provider,\n  NetworkControllerFindNetworkClientIdByChainIdAction,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport { NetworkClientType } from '@metamask/network-controller';\nimport type {\n  NonceLock,\n  Transaction as NonceTrackerTransaction,\n} from '@metamask/nonce-tracker';\nimport { NonceTracker } from '@metamask/nonce-tracker';\nimport { errorCodes, rpcErrors, providerErrors } from '@metamask/rpc-errors';\nimport type { Hex } from '@metamask/utils';\nimport { add0x, hexToNumber } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\n// This package purposefully relies on Node's EventEmitter module.\n// eslint-disable-next-line import-x/no-nodejs-modules\nimport { EventEmitter } from 'events';\nimport { cloneDeep, mapValues, merge, pickBy, sortBy } from 'lodash';\nimport { v1 as random } from 'uuid';\n\nimport {\n  getAccountAddressRelationship,\n  type GetAccountAddressRelationshipRequest,\n} from './api/accounts-api';\nimport { DefaultGasFeeFlow } from './gas-flows/DefaultGasFeeFlow';\nimport { LineaGasFeeFlow } from './gas-flows/LineaGasFeeFlow';\nimport { OptimismLayer1GasFeeFlow } from './gas-flows/OptimismLayer1GasFeeFlow';\nimport { ScrollLayer1GasFeeFlow } from './gas-flows/ScrollLayer1GasFeeFlow';\nimport { TestGasFeeFlow } from './gas-flows/TestGasFeeFlow';\nimport { AccountsApiRemoteTransactionSource } from './helpers/AccountsApiRemoteTransactionSource';\nimport { GasFeePoller } from './helpers/GasFeePoller';\nimport type { IncomingTransactionOptions } from './helpers/IncomingTransactionHelper';\nimport { IncomingTransactionHelper } from './helpers/IncomingTransactionHelper';\nimport { MethodDataHelper } from './helpers/MethodDataHelper';\nimport { MultichainTrackingHelper } from './helpers/MultichainTrackingHelper';\nimport { PendingTransactionTracker } from './helpers/PendingTransactionTracker';\nimport type { ResimulateResponse } from './helpers/ResimulateHelper';\nimport {\n  ResimulateHelper,\n  hasSimulationDataChanged,\n  shouldResimulate,\n} from './helpers/ResimulateHelper';\nimport { projectLogger as log } from './logger';\nimport type {\n  DappSuggestedGasFees,\n  Layer1GasFeeFlow,\n  SavedGasFees,\n  SecurityProviderRequest,\n  SendFlowHistoryEntry,\n  TransactionParams,\n  TransactionMeta,\n  TransactionReceipt,\n  WalletDevice,\n  SecurityAlertResponse,\n  GasFeeFlow,\n  SimulationData,\n  GasFeeEstimates,\n  GasFeeFlowResponse,\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n  SubmitHistoryEntry,\n} from './types';\nimport {\n  TransactionEnvelopeType,\n  TransactionType,\n  TransactionStatus,\n  SimulationErrorCode,\n} from './types';\nimport type { KeyringControllerSignAuthorization } from './utils/eip7702';\nimport { signAuthorizationList } from './utils/eip7702';\nimport { validateConfirmedExternalTransaction } from './utils/external-transactions';\nimport { addGasBuffer, estimateGas, updateGas } from './utils/gas';\nimport { updateGasFees } from './utils/gas-fees';\nimport { getGasFeeFlow } from './utils/gas-flow';\nimport {\n  addInitialHistorySnapshot,\n  updateTransactionHistory,\n} from './utils/history';\nimport {\n  getTransactionLayer1GasFee,\n  updateTransactionLayer1GasFee,\n} from './utils/layer1-gas-fee-flow';\nimport {\n  getAndFormatTransactionsForNonceTracker,\n  getNextNonce,\n} from './utils/nonce';\nimport { prepareTransaction, serializeTransaction } from './utils/prepare';\nimport { getTransactionParamsWithIncreasedGasFee } from './utils/retry';\nimport { getSimulationData } from './utils/simulation';\nimport {\n  updatePostTransactionBalance,\n  updateSwapsTransaction,\n} from './utils/swaps';\nimport { determineTransactionType } from './utils/transaction-type';\nimport {\n  normalizeTransactionParams,\n  isEIP1559Transaction,\n  validateGasValues,\n  validateIfTransactionUnapproved,\n  normalizeTxError,\n  normalizeGasFeeValues,\n} from './utils/utils';\nimport {\n  validateParamTo,\n  validateTransactionOrigin,\n  validateTxParams,\n} from './utils/validation';\n\n/**\n * Metadata for the TransactionController state, describing how to \"anonymize\"\n * the state and which parts should be persisted.\n */\nconst metadata = {\n  transactions: {\n    persist: true,\n    anonymous: false,\n  },\n  methodData: {\n    persist: true,\n    anonymous: false,\n  },\n  lastFetchedBlockNumbers: {\n    persist: true,\n    anonymous: false,\n  },\n  submitHistory: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\nconst SUBMIT_HISTORY_LIMIT = 100;\n\n/**\n * Object with new transaction's meta and a promise resolving to the\n * transaction hash if successful.\n *\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\n/**\n * Method data registry object\n *\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\nexport type MethodData = {\n  registryMethod: string;\n  parsedRegistryMethod:\n    | {\n        name: string;\n        args: { type: string }[];\n      }\n    | {\n        // We're using `any` instead of `undefined` for compatibility with `Json`\n        // TODO: Correct this type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        name?: any;\n        // We're using `any` instead of `undefined` for compatibility with `Json`\n        // TODO: Correct this type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        args?: any;\n      };\n};\n\n/**\n * Transaction controller state\n *\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n * @property lastFetchedBlockNumbers - Cache to optimise incoming transaction queries\n */\nexport type TransactionControllerState = {\n  transactions: TransactionMeta[];\n  methodData: Record<string, MethodData>;\n  lastFetchedBlockNumbers: { [key: string]: number | string };\n  submitHistory: SubmitHistoryEntry[];\n};\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.1;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * Represents the `TransactionController:getState` action.\n */\nexport type TransactionControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TransactionControllerState\n>;\n\n/**\n * The internal actions available to the TransactionController.\n */\nexport type TransactionControllerActions = TransactionControllerGetStateAction;\n\n/**\n * Configuration options for the PendingTransactionTracker\n *\n * @property isResubmitEnabled - Whether transaction publishing is automatically retried.\n */\nexport type PendingTransactionOptions = {\n  isResubmitEnabled?: () => boolean;\n};\n\n/**\n * TransactionController constructor options.\n *\n * @property disableHistory - Whether to disable storing history in transaction metadata.\n * @property disableSendFlowHistory - Explicitly disable transaction metadata history.\n * @property disableSwaps - Whether to disable additional processing on swaps transactions.\n * @property getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n * @property getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n * @property getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.\n * @property getGasFeeEstimates - Callback to retrieve gas fee estimates.\n * @property getNetworkClientRegistry - Gets the network client registry.\n * @property getNetworkState - Gets the state of the network controller.\n * @property getPermittedAccounts - Get accounts that a given origin has permissions for.\n * @property getSavedGasFees - Gets the saved gas fee config.\n * @property getSelectedAddress - Gets the address of the currently selected account.\n * @property incomingTransactions - Configuration options for incoming transaction support.\n * @property isSimulationEnabled - Whether new transactions will be automatically simulated.\n * @property messenger - The controller messenger.\n * @property pendingTransactions - Configuration options for pending transaction support.\n * @property securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.\n * @property sign - Function used to sign transactions.\n * @property state - Initial state to set on this controller.\n * @property transactionHistoryLimit - Transaction history limit.\n * @property hooks - The controller hooks.\n * @property hooks.afterSign - Additional logic to execute after signing a transaction. Return false to not change the status to signed.\n * @property hooks.beforeApproveOnInit - Additional logic to execute before starting an approval flow for a transaction during initialization. Return false to skip the transaction.\n * @property hooks.beforeCheckPendingTransaction - Additional logic to execute before checking pending transactions. Return false to prevent the broadcast of the transaction.\n * @property hooks.beforePublish - Additional logic to execute before publishing a transaction. Return false to prevent the broadcast of the transaction.\n * @property hooks.getAdditionalSignArguments - Returns additional arguments required to sign a transaction.\n * @property hooks.publish - Alternate logic to publish a transaction.\n */\nexport type TransactionControllerOptions = {\n  disableHistory: boolean;\n  disableSendFlowHistory: boolean;\n  disableSwaps: boolean;\n  getCurrentAccountEIP1559Compatibility?: () => Promise<boolean>;\n  getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n  getExternalPendingTransactions?: (\n    address: string,\n    chainId?: string,\n  ) => NonceTrackerTransaction[];\n  getGasFeeEstimates?: (\n    options: FetchGasFeeEstimateOptions,\n  ) => Promise<GasFeeState>;\n  getNetworkClientRegistry: NetworkController['getNetworkClientRegistry'];\n  getNetworkState: () => NetworkState;\n  getPermittedAccounts?: (origin?: string) => Promise<string[]>;\n  getSavedGasFees?: (chainId: Hex) => SavedGasFees | undefined;\n  incomingTransactions?: IncomingTransactionOptions & {\n    /** API keys to be used for Etherscan requests to prevent rate limiting. */\n    etherscanApiKeysByChainId?: Record<Hex, string>;\n  };\n  isFirstTimeInteractionEnabled?: () => boolean;\n  isSimulationEnabled?: () => boolean;\n  messenger: TransactionControllerMessenger;\n  pendingTransactions?: PendingTransactionOptions;\n  securityProviderRequest?: SecurityProviderRequest;\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n    transactionMeta?: TransactionMeta,\n  ) => Promise<TypedTransaction>;\n  state?: Partial<TransactionControllerState>;\n  testGasFeeFlows?: boolean;\n  trace?: TraceCallback;\n  transactionHistoryLimit: number;\n  hooks: {\n    afterSign?: (\n      transactionMeta: TransactionMeta,\n      signedTx: TypedTransaction,\n    ) => boolean;\n    beforeCheckPendingTransaction?: (\n      transactionMeta: TransactionMeta,\n    ) => boolean;\n    beforePublish?: (transactionMeta: TransactionMeta) => boolean;\n    getAdditionalSignArguments?: (\n      transactionMeta: TransactionMeta,\n    ) => (TransactionMeta | undefined)[];\n    publish?: (\n      transactionMeta: TransactionMeta,\n    ) => Promise<{ transactionHash: string }>;\n  };\n};\n\n/**\n * The name of the {@link TransactionController}.\n */\nconst controllerName = 'TransactionController';\n\n/**\n * The external actions available to the {@link TransactionController}.\n */\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AddApprovalRequest\n  | KeyringControllerSignAuthorization\n  | NetworkControllerFindNetworkClientIdByChainIdAction\n  | NetworkControllerGetNetworkClientByIdAction;\n\n/**\n * The external events available to the {@link TransactionController}.\n */\nexport type AllowedEvents = NetworkControllerStateChangeEvent;\n\n/**\n * Represents the `TransactionController:stateChange` event.\n */\nexport type TransactionControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof controllerName,\n  TransactionControllerState\n>;\n\n/**\n * Represents the `TransactionController:incomingTransactionsReceived` event.\n */\nexport type TransactionControllerIncomingTransactionsReceivedEvent = {\n  type: `${typeof controllerName}:incomingTransactionsReceived`;\n  payload: [incomingTransactions: TransactionMeta[]];\n};\n\n/**\n * Represents the `TransactionController:postTransactionBalanceUpdated` event.\n */\nexport type TransactionControllerPostTransactionBalanceUpdatedEvent = {\n  type: `${typeof controllerName}:postTransactionBalanceUpdated`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      approvalTransactionMeta?: TransactionMeta;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:speedUpTransactionAdded` event.\n */\nexport type TransactionControllerSpeedupTransactionAddedEvent = {\n  type: `${typeof controllerName}:speedupTransactionAdded`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionApproved` event.\n */\nexport type TransactionControllerTransactionApprovedEvent = {\n  type: `${typeof controllerName}:transactionApproved`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      actionId?: string;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionConfirmed` event.\n */\nexport type TransactionControllerTransactionConfirmedEvent = {\n  type: `${typeof controllerName}:transactionConfirmed`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionDropped` event.\n */\nexport type TransactionControllerTransactionDroppedEvent = {\n  type: `${typeof controllerName}:transactionDropped`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionFailed` event.\n */\nexport type TransactionControllerTransactionFailedEvent = {\n  type: `${typeof controllerName}:transactionFailed`;\n  payload: [\n    {\n      actionId?: string;\n      error: string;\n      transactionMeta: TransactionMeta;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionFinished` event.\n */\nexport type TransactionControllerTransactionFinishedEvent = {\n  type: `${typeof controllerName}:transactionFinished`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionNewSwapApproval` event.\n */\nexport type TransactionControllerTransactionNewSwapApprovalEvent = {\n  type: `${typeof controllerName}:transactionNewSwapApproval`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionNewSwap` event.\n */\nexport type TransactionControllerTransactionNewSwapEvent = {\n  type: `${typeof controllerName}:transactionNewSwap`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionNewSwapApproval` event.\n */\nexport type TransactionControllerTransactionNewSwapAndSendEvent = {\n  type: `${typeof controllerName}:transactionNewSwapAndSend`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionPublishingSkipped` event.\n */\nexport type TransactionControllerTransactionPublishingSkipped = {\n  type: `${typeof controllerName}:transactionPublishingSkipped`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionRejected` event.\n */\nexport type TransactionControllerTransactionRejectedEvent = {\n  type: `${typeof controllerName}:transactionRejected`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      actionId?: string;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionStatusUpdated` event.\n */\nexport type TransactionControllerTransactionStatusUpdatedEvent = {\n  type: `${typeof controllerName}:transactionStatusUpdated`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionSubmitted` event.\n */\nexport type TransactionControllerTransactionSubmittedEvent = {\n  type: `${typeof controllerName}:transactionSubmitted`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      actionId?: string;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:unapprovedTransactionAdded` event.\n */\nexport type TransactionControllerUnapprovedTransactionAddedEvent = {\n  type: `${typeof controllerName}:unapprovedTransactionAdded`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * The internal events available to the {@link TransactionController}.\n */\nexport type TransactionControllerEvents =\n  | TransactionControllerIncomingTransactionsReceivedEvent\n  | TransactionControllerPostTransactionBalanceUpdatedEvent\n  | TransactionControllerSpeedupTransactionAddedEvent\n  | TransactionControllerStateChangeEvent\n  | TransactionControllerTransactionApprovedEvent\n  | TransactionControllerTransactionConfirmedEvent\n  | TransactionControllerTransactionDroppedEvent\n  | TransactionControllerTransactionFailedEvent\n  | TransactionControllerTransactionFinishedEvent\n  | TransactionControllerTransactionNewSwapApprovalEvent\n  | TransactionControllerTransactionNewSwapEvent\n  | TransactionControllerTransactionNewSwapAndSendEvent\n  | TransactionControllerTransactionPublishingSkipped\n  | TransactionControllerTransactionRejectedEvent\n  | TransactionControllerTransactionStatusUpdatedEvent\n  | TransactionControllerTransactionSubmittedEvent\n  | TransactionControllerUnapprovedTransactionAddedEvent;\n\n/**\n * The messenger of the {@link TransactionController}.\n */\nexport type TransactionControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  TransactionControllerActions | AllowedActions,\n  TransactionControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Possible states of the approve transaction step.\n */\nexport enum ApprovalState {\n  Approved = 'approved',\n  NotApproved = 'not-approved',\n  SkippedViaBeforePublishHook = 'skipped-via-before-publish-hook',\n}\n\n/**\n * Get the default TransactionsController state.\n *\n * @returns The default TransactionsController state.\n */\nfunction getDefaultTransactionControllerState(): TransactionControllerState {\n  return {\n    methodData: {},\n    transactions: [],\n    lastFetchedBlockNumbers: {},\n    submitHistory: [],\n  };\n}\n\n/**\n * Controller responsible for submitting and managing transactions.\n */\nexport class TransactionController extends BaseController<\n  typeof controllerName,\n  TransactionControllerState,\n  TransactionControllerMessenger\n> {\n  readonly #internalEvents = new EventEmitter();\n\n  private readonly isHistoryDisabled: boolean;\n\n  private readonly isSwapsDisabled: boolean;\n\n  private readonly isSendFlowHistoryDisabled: boolean;\n\n  private readonly approvingTransactionIds: Set<string> = new Set();\n\n  readonly #methodDataHelper: MethodDataHelper;\n\n  private readonly mutex = new Mutex();\n\n  private readonly gasFeeFlows: GasFeeFlow[];\n\n  private readonly getSavedGasFees: (chainId: Hex) => SavedGasFees | undefined;\n\n  private readonly getNetworkState: () => NetworkState;\n\n  private readonly getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;\n\n  private readonly getCurrentNetworkEIP1559Compatibility: (\n    networkClientId?: NetworkClientId,\n  ) => Promise<boolean>;\n\n  private readonly getGasFeeEstimates: (\n    options: FetchGasFeeEstimateOptions,\n  ) => Promise<GasFeeState>;\n\n  private readonly getPermittedAccounts?: (\n    origin?: string,\n  ) => Promise<string[]>;\n\n  private readonly getExternalPendingTransactions: (\n    address: string,\n    chainId?: string,\n  ) => NonceTrackerTransaction[];\n\n  readonly #incomingTransactionChainIds: Set<Hex> = new Set();\n\n  readonly #incomingTransactionHelper: IncomingTransactionHelper;\n\n  private readonly layer1GasFeeFlows: Layer1GasFeeFlow[];\n\n  readonly #incomingTransactionOptions: IncomingTransactionOptions & {\n    etherscanApiKeysByChainId?: Record<Hex, string>;\n  };\n\n  private readonly securityProviderRequest?: SecurityProviderRequest;\n\n  readonly #pendingTransactionOptions: PendingTransactionOptions;\n\n  private readonly signAbortCallbacks: Map<string, () => void> = new Map();\n\n  readonly #trace: TraceCallback;\n\n  readonly #transactionHistoryLimit: number;\n\n  readonly #isFirstTimeInteractionEnabled: () => boolean;\n\n  readonly #isSimulationEnabled: () => boolean;\n\n  readonly #testGasFeeFlows: boolean;\n\n  private readonly afterSign: (\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ) => boolean;\n\n  private readonly beforeCheckPendingTransaction: (\n    transactionMeta: TransactionMeta,\n  ) => boolean;\n\n  private readonly beforePublish: (transactionMeta: TransactionMeta) => boolean;\n\n  private readonly publish: (\n    transactionMeta: TransactionMeta,\n    rawTx: string,\n  ) => Promise<{ transactionHash?: string }>;\n\n  private readonly getAdditionalSignArguments: (\n    transactionMeta: TransactionMeta,\n  ) => (TransactionMeta | undefined)[];\n\n  private failTransaction(\n    transactionMeta: TransactionMeta,\n    error: Error,\n    actionId?: string,\n  ) {\n    let newTransactionMeta: TransactionMeta;\n\n    try {\n      newTransactionMeta = this.#updateTransactionInternal(\n        {\n          transactionId: transactionMeta.id,\n          note: 'TransactionController#failTransaction - Add error message and set status to failed',\n          skipValidation: true,\n        },\n        (draftTransactionMeta) => {\n          draftTransactionMeta.status = TransactionStatus.failed;\n\n          (\n            draftTransactionMeta as TransactionMeta & {\n              status: TransactionStatus.failed;\n            }\n          ).error = normalizeTxError(error);\n        },\n      );\n    } catch (err: unknown) {\n      log('Failed to mark transaction as failed', err);\n\n      newTransactionMeta = {\n        ...transactionMeta,\n        status: TransactionStatus.failed,\n        error: normalizeTxError(error),\n      };\n    }\n\n    this.messagingSystem.publish(`${controllerName}:transactionFailed`, {\n      actionId,\n      error: error.message,\n      transactionMeta: newTransactionMeta,\n    });\n\n    this.onTransactionStatusChange(newTransactionMeta);\n\n    this.messagingSystem.publish(\n      `${controllerName}:transactionFinished`,\n      newTransactionMeta,\n    );\n\n    this.#internalEvents.emit(\n      `${transactionMeta.id}:finished`,\n      newTransactionMeta,\n    );\n  }\n\n  readonly #multichainTrackingHelper: MultichainTrackingHelper;\n\n  /**\n   * Method used to sign transactions\n   */\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n    transactionMeta?: TransactionMeta,\n  ) => Promise<TypedTransaction>;\n\n  /**\n   * Constructs a TransactionController.\n   *\n   * @param options - The controller options.\n   * @param options.disableHistory - Whether to disable storing history in transaction metadata.\n   * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.\n   * @param options.disableSwaps - Whether to disable additional processing on swaps transactions.\n   * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n   * @param options.getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.\n   * @param options.getGasFeeEstimates - Callback to retrieve gas fee estimates.\n   * @param options.getNetworkClientRegistry - Gets the network client registry.\n   * @param options.getNetworkState - Gets the state of the network controller.\n   * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.\n   * @param options.getSavedGasFees - Gets the saved gas fee config.\n   * @param options.incomingTransactions - Configuration options for incoming transaction support.\n   * @param options.isFirstTimeInteractionEnabled - Whether first time interaction checks are enabled.\n   * @param options.isSimulationEnabled - Whether new transactions will be automatically simulated.\n   * @param options.messenger - The controller messenger.\n   * @param options.pendingTransactions - Configuration options for pending transaction support.\n   * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.\n   * @param options.sign - Function used to sign transactions.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.testGasFeeFlows - Whether to use the test gas fee flow.\n   * @param options.trace - Callback to generate trace information.\n   * @param options.transactionHistoryLimit - Transaction history limit.\n   * @param options.hooks - The controller hooks.\n   */\n  constructor({\n    disableHistory,\n    disableSendFlowHistory,\n    disableSwaps,\n    getCurrentAccountEIP1559Compatibility,\n    getCurrentNetworkEIP1559Compatibility,\n    getExternalPendingTransactions,\n    getGasFeeEstimates,\n    getNetworkClientRegistry,\n    getNetworkState,\n    getPermittedAccounts,\n    getSavedGasFees,\n    incomingTransactions = {},\n    isFirstTimeInteractionEnabled,\n    isSimulationEnabled,\n    messenger,\n    pendingTransactions = {},\n    securityProviderRequest,\n    sign,\n    state,\n    testGasFeeFlows,\n    trace,\n    transactionHistoryLimit = 40,\n    hooks,\n  }: TransactionControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTransactionControllerState(),\n        ...state,\n      },\n    });\n\n    this.messagingSystem = messenger;\n    this.getNetworkState = getNetworkState;\n    this.isSendFlowHistoryDisabled = disableSendFlowHistory ?? false;\n    this.isHistoryDisabled = disableHistory ?? false;\n    this.isSwapsDisabled = disableSwaps ?? false;\n    this.#isFirstTimeInteractionEnabled =\n      isFirstTimeInteractionEnabled ?? (() => true);\n    this.#isSimulationEnabled = isSimulationEnabled ?? (() => true);\n    this.getSavedGasFees = getSavedGasFees ?? ((_chainId) => undefined);\n    this.getCurrentAccountEIP1559Compatibility =\n      getCurrentAccountEIP1559Compatibility ?? (() => Promise.resolve(true));\n    this.getCurrentNetworkEIP1559Compatibility =\n      getCurrentNetworkEIP1559Compatibility;\n    this.getGasFeeEstimates =\n      getGasFeeEstimates || (() => Promise.resolve({} as GasFeeState));\n    this.getPermittedAccounts = getPermittedAccounts;\n    this.getExternalPendingTransactions =\n      getExternalPendingTransactions ?? (() => []);\n    this.securityProviderRequest = securityProviderRequest;\n    this.#incomingTransactionOptions = incomingTransactions;\n    this.#pendingTransactionOptions = pendingTransactions;\n    this.#transactionHistoryLimit = transactionHistoryLimit;\n    this.sign = sign;\n    this.#testGasFeeFlows = testGasFeeFlows === true;\n    this.#trace = trace ?? (((_request, fn) => fn?.()) as TraceCallback);\n\n    this.afterSign = hooks?.afterSign ?? (() => true);\n    this.beforeCheckPendingTransaction =\n      hooks?.beforeCheckPendingTransaction ??\n      /* istanbul ignore next */\n      (() => true);\n    this.beforePublish = hooks?.beforePublish ?? (() => true);\n    this.getAdditionalSignArguments =\n      hooks?.getAdditionalSignArguments ?? (() => []);\n    this.publish =\n      hooks?.publish ?? (() => Promise.resolve({ transactionHash: undefined }));\n\n    const findNetworkClientIdByChainId = (chainId: Hex) => {\n      return this.messagingSystem.call(\n        `NetworkController:findNetworkClientIdByChainId`,\n        chainId,\n      );\n    };\n\n    this.#multichainTrackingHelper = new MultichainTrackingHelper({\n      findNetworkClientIdByChainId,\n      getNetworkClientById: ((networkClientId: NetworkClientId) => {\n        return this.messagingSystem.call(\n          `NetworkController:getNetworkClientById`,\n          networkClientId,\n        );\n      }) as NetworkController['getNetworkClientById'],\n      getNetworkClientRegistry,\n      removePendingTransactionTrackerListeners:\n        this.#removePendingTransactionTrackerListeners.bind(this),\n      createNonceTracker: this.#createNonceTracker.bind(this),\n      createPendingTransactionTracker:\n        this.#createPendingTransactionTracker.bind(this),\n      onNetworkStateChange: (listener) => {\n        this.messagingSystem.subscribe(\n          'NetworkController:stateChange',\n          listener,\n        );\n      },\n    });\n    this.#multichainTrackingHelper.initialize();\n\n    this.gasFeeFlows = this.#getGasFeeFlows();\n    this.layer1GasFeeFlows = this.#getLayer1GasFeeFlows();\n\n    const gasFeePoller = new GasFeePoller({\n      findNetworkClientIdByChainId,\n      gasFeeFlows: this.gasFeeFlows,\n      getGasFeeControllerEstimates: this.getGasFeeEstimates,\n      getProvider: (networkClientId) => this.#getProvider({ networkClientId }),\n      getTransactions: () => this.state.transactions,\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      onStateChange: (listener) => {\n        this.messagingSystem.subscribe(\n          'TransactionController:stateChange',\n          listener,\n        );\n      },\n    });\n\n    gasFeePoller.hub.on(\n      'transaction-updated',\n      this.#onGasFeePollerTransactionUpdate.bind(this),\n    );\n\n    this.#methodDataHelper = new MethodDataHelper({\n      getProvider: (networkClientId) => this.#getProvider({ networkClientId }),\n      getState: () => this.state.methodData,\n    });\n\n    this.#methodDataHelper.hub.on(\n      'update',\n      ({ fourBytePrefix, methodData }) => {\n        this.update((_state) => {\n          _state.methodData[fourBytePrefix] = methodData;\n        });\n      },\n    );\n\n    const updateCache = (fn: (cache: Record<string, unknown>) => void) => {\n      this.update((_state) => {\n        fn(_state.lastFetchedBlockNumbers);\n      });\n    };\n\n    this.#incomingTransactionHelper = new IncomingTransactionHelper({\n      getCache: () => this.state.lastFetchedBlockNumbers,\n      getChainIds: () => [...this.#incomingTransactionChainIds],\n      getCurrentAccount: () => this.#getSelectedAccount(),\n      getLocalTransactions: () => this.state.transactions,\n      includeTokenTransfers:\n        this.#incomingTransactionOptions.includeTokenTransfers,\n      isEnabled: this.#incomingTransactionOptions.isEnabled,\n      queryEntireHistory: this.#incomingTransactionOptions.queryEntireHistory,\n      remoteTransactionSource: new AccountsApiRemoteTransactionSource(),\n      trimTransactions: this.trimTransactionsForState.bind(this),\n      updateCache,\n      updateTransactions: this.#incomingTransactionOptions.updateTransactions,\n    });\n\n    this.#addIncomingTransactionHelperListeners(\n      this.#incomingTransactionHelper,\n    );\n\n    // when transactionsController state changes\n    // check for pending transactions and start polling if there are any\n    this.messagingSystem.subscribe(\n      'TransactionController:stateChange',\n      this.#checkForPendingTransactionAndStartPolling,\n    );\n\n    new ResimulateHelper({\n      simulateTransaction: this.#updateSimulationData.bind(this),\n      onTransactionsUpdate: (listener) => {\n        this.messagingSystem.subscribe(\n          'TransactionController:stateChange',\n          listener,\n          (controllerState) => controllerState.transactions,\n        );\n      },\n      getTransactions: () => this.state.transactions,\n    });\n\n    this.onBootCleanup();\n    this.#checkForPendingTransactionAndStartPolling();\n  }\n\n  /**\n   * Stops polling and removes listeners to prepare the controller for garbage collection.\n   */\n  destroy() {\n    this.#stopAllTracking();\n  }\n\n  /**\n   * Handle new method data request.\n   *\n   * @param fourBytePrefix - The method prefix.\n   * @param networkClientId - The ID of the network client used to fetch the method data.\n   * @returns The method data object corresponding to the given signature prefix.\n   */\n  async handleMethodData(\n    fourBytePrefix: string,\n    networkClientId: NetworkClientId,\n  ): Promise<MethodData> {\n    return this.#methodDataHelper.lookup(fourBytePrefix, networkClientId);\n  }\n\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param txParams - Standard parameters for an Ethereum transaction.\n   * @param options - Additional options to control how the transaction is added.\n   * @param options.actionId - Unique ID to prevent duplicate requests.\n   * @param options.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.\n   * @param options.method - RPC method that requested the transaction.\n   * @param options.origin - The origin of the transaction request, such as a dApp hostname.\n   * @param options.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.\n   * @param options.securityAlertResponse - Response from security validator.\n   * @param options.sendFlowHistory - The sendFlowHistory entries to add.\n   * @param options.type - Type of transaction to add, such as 'cancel' or 'swap'.\n   * @param options.swaps - Options for swaps transactions.\n   * @param options.swaps.hasApproveTx - Whether the transaction has an approval transaction.\n   * @param options.swaps.meta - Metadata for swap transaction.\n   * @param options.networkClientId - The id of the network client for this transaction.\n   * @param options.traceContext - The parent context for any new traces.\n   * @returns Object containing a promise resolving to the transaction hash if approved.\n   */\n  async addTransaction(\n    txParams: TransactionParams,\n    options: {\n      actionId?: string;\n      deviceConfirmedOn?: WalletDevice;\n      method?: string;\n      networkClientId: NetworkClientId;\n      origin?: string;\n      requireApproval?: boolean | undefined;\n      securityAlertResponse?: SecurityAlertResponse;\n      sendFlowHistory?: SendFlowHistoryEntry[];\n      swaps?: {\n        hasApproveTx?: boolean;\n        meta?: Partial<TransactionMeta>;\n      };\n      traceContext?: unknown;\n      type?: TransactionType;\n    },\n  ): Promise<Result> {\n    log('Adding transaction', txParams, options);\n\n    const {\n      actionId,\n      deviceConfirmedOn,\n      method,\n      networkClientId,\n      origin,\n      requireApproval,\n      securityAlertResponse,\n      sendFlowHistory,\n      swaps = {},\n      traceContext,\n      type,\n    } = options;\n\n    txParams = normalizeTransactionParams(txParams);\n\n    if (!this.#multichainTrackingHelper.has(networkClientId)) {\n      throw new Error(\n        `Network client not found - ${networkClientId as string}`,\n      );\n    }\n\n    const permittedAddresses =\n      origin === undefined\n        ? undefined\n        : await this.getPermittedAccounts?.(origin);\n\n    const selectedAddress = this.#getSelectedAccount().address;\n\n    await validateTransactionOrigin({\n      from: txParams.from,\n      origin,\n      permittedAddresses,\n      selectedAddress,\n      txParams,\n    });\n\n    const isEIP1559Compatible =\n      await this.getEIP1559Compatibility(networkClientId);\n\n    validateTxParams(txParams, isEIP1559Compatible);\n\n    const dappSuggestedGasFees = this.generateDappSuggestedGasFees(\n      txParams,\n      origin,\n    );\n\n    const chainId = this.#getChainId(networkClientId);\n\n    const ethQuery = this.#getEthQuery({\n      networkClientId,\n    });\n\n    const transactionType =\n      type ?? (await determineTransactionType(txParams, ethQuery)).type;\n\n    const existingTransactionMeta = this.getTransactionWithActionId(actionId);\n\n    // If a request to add a transaction with the same actionId is submitted again, a new transaction will not be created for it.\n    let addedTransactionMeta = existingTransactionMeta\n      ? cloneDeep(existingTransactionMeta)\n      : {\n          // Add actionId to txMeta to check if same actionId is seen again\n          actionId,\n          chainId,\n          dappSuggestedGasFees,\n          deviceConfirmedOn,\n          id: random(),\n          isFirstTimeInteraction: undefined,\n          networkClientId,\n          origin,\n          securityAlertResponse,\n          status: TransactionStatus.unapproved as const,\n          time: Date.now(),\n          txParams,\n          type: transactionType,\n          userEditedGasLimit: false,\n          verifiedOnBlockchain: false,\n        };\n\n    await this.#trace(\n      { name: 'Estimate Gas Properties', parentContext: traceContext },\n      (context) =>\n        this.updateGasProperties(addedTransactionMeta, {\n          traceContext: context,\n        }),\n    );\n\n    // Checks if a transaction already exists with a given actionId\n    if (!existingTransactionMeta) {\n      // Set security provider response\n      if (method && this.securityProviderRequest) {\n        const securityProviderResponse = await this.securityProviderRequest(\n          addedTransactionMeta,\n          method,\n        );\n        addedTransactionMeta.securityProviderResponse =\n          securityProviderResponse;\n      }\n\n      if (!this.isSendFlowHistoryDisabled) {\n        addedTransactionMeta.sendFlowHistory = sendFlowHistory ?? [];\n      }\n      // Initial history push\n      if (!this.isHistoryDisabled) {\n        addedTransactionMeta = addInitialHistorySnapshot(addedTransactionMeta);\n      }\n\n      addedTransactionMeta = updateSwapsTransaction(\n        addedTransactionMeta,\n        transactionType,\n        swaps,\n        {\n          isSwapsDisabled: this.isSwapsDisabled,\n          cancelTransaction: this.cancelTransaction.bind(this),\n          messenger: this.messagingSystem,\n        },\n      );\n\n      this.addMetadata(addedTransactionMeta);\n\n      if (requireApproval !== false) {\n        this.#updateSimulationData(addedTransactionMeta, {\n          traceContext,\n        }).catch((error) => {\n          log('Error while updating simulation data', error);\n          throw error;\n        });\n\n        this.#updateFirstTimeInteraction(addedTransactionMeta, {\n          traceContext,\n        }).catch((error) => {\n          log('Error while updating first interaction properties', error);\n        });\n      } else {\n        log(\n          'Skipping simulation & first interaction update as approval not required',\n        );\n      }\n\n      this.messagingSystem.publish(\n        `${controllerName}:unapprovedTransactionAdded`,\n        addedTransactionMeta,\n      );\n    }\n\n    return {\n      result: this.processApproval(addedTransactionMeta, {\n        isExisting: Boolean(existingTransactionMeta),\n        requireApproval,\n        actionId,\n        traceContext,\n      }),\n      transactionMeta: addedTransactionMeta,\n    };\n  }\n\n  startIncomingTransactionPolling(chainIds: Hex[]) {\n    chainIds.forEach((chainId) =>\n      this.#incomingTransactionChainIds.add(chainId),\n    );\n\n    this.#incomingTransactionHelper.start();\n  }\n\n  stopIncomingTransactionPolling(chainIds?: Hex[]) {\n    chainIds?.forEach((chainId) =>\n      this.#incomingTransactionChainIds.delete(chainId),\n    );\n\n    if (!chainIds) {\n      this.#incomingTransactionChainIds.clear();\n    }\n\n    if (this.#incomingTransactionChainIds.size === 0) {\n      this.#incomingTransactionHelper.stop();\n    }\n  }\n\n  async updateIncomingTransactions(chainIds: Hex[]) {\n    chainIds.forEach((chainId) =>\n      this.#incomingTransactionChainIds.add(chainId),\n    );\n\n    await this.#incomingTransactionHelper.update();\n  }\n\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param gasValues - The gas values to use for the cancellation transaction.\n   * @param options - The options for the cancellation transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests.\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async stopTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      estimatedBaseFee,\n      actionId,\n    }: { estimatedBaseFee?: string; actionId?: string } = {},\n  ) {\n    return await this.#retryTransaction({\n      actionId,\n      estimatedBaseFee,\n      gasValues,\n      label: 'cancel',\n      rate: CANCEL_RATE,\n      transactionId,\n      transactionType: TransactionType.cancel,\n      prepareTransactionParams: (txParams) => {\n        delete txParams.data;\n        txParams.to = txParams.from;\n        txParams.value = '0x0';\n      },\n      afterSubmit: (newTransactionMeta) => {\n        this.messagingSystem.publish(\n          `${controllerName}:transactionFinished`,\n          newTransactionMeta,\n        );\n\n        this.#internalEvents.emit(\n          `${newTransactionMeta.id}:finished`,\n          newTransactionMeta,\n        );\n      },\n    });\n  }\n\n  /**\n   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.\n   *\n   * @param transactionId - The ID of the transaction to speed up.\n   * @param gasValues - The gas values to use for the speed up transaction.\n   * @param options - The options for the speed up transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async speedUpTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      actionId,\n      estimatedBaseFee,\n    }: { actionId?: string; estimatedBaseFee?: string } = {},\n  ) {\n    return await this.#retryTransaction({\n      actionId,\n      estimatedBaseFee,\n      gasValues,\n      label: 'speed up',\n      rate: SPEED_UP_RATE,\n      transactionId,\n      transactionType: TransactionType.retry,\n      afterSubmit: (newTransactionMeta) => {\n        this.messagingSystem.publish(\n          `${controllerName}:speedupTransactionAdded`,\n          newTransactionMeta,\n        );\n      },\n    });\n  }\n\n  async #retryTransaction({\n    actionId,\n    afterSubmit,\n    estimatedBaseFee,\n    gasValues,\n    label,\n    prepareTransactionParams,\n    rate,\n    transactionId,\n    transactionType,\n  }: {\n    actionId?: string;\n    afterSubmit?: (transactionMeta: TransactionMeta) => void;\n    estimatedBaseFee?: string;\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values;\n    label: string;\n    prepareTransactionParams?: (txParams: TransactionParams) => void;\n    rate: number;\n    transactionId: string;\n    transactionType: TransactionType;\n  }) {\n    // If transaction is found for same action id, do not create a new transaction.\n    if (this.getTransactionWithActionId(actionId)) {\n      return;\n    }\n\n    if (gasValues) {\n      // Not good practice to reassign a parameter but temporarily avoiding a larger refactor.\n      gasValues = normalizeGasFeeValues(gasValues);\n      validateGasValues(gasValues);\n    }\n\n    log(`Creating ${label} transaction`, transactionId, gasValues);\n\n    const transactionMeta = this.getTransaction(transactionId);\n    /* istanbul ignore next */\n    if (!transactionMeta) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const newTxParams: TransactionParams =\n      getTransactionParamsWithIncreasedGasFee(\n        transactionMeta.txParams,\n        rate,\n        gasValues,\n      );\n\n    prepareTransactionParams?.(newTxParams);\n\n    const unsignedEthTx = prepareTransaction(\n      transactionMeta.chainId,\n      newTxParams,\n    );\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from,\n    );\n\n    const transactionMetaWithRsv = this.updateTransactionMetaRSV(\n      transactionMeta,\n      signedTx,\n    );\n\n    const rawTx = serializeTransaction(signedTx);\n    const newFee = newTxParams.maxFeePerGas ?? newTxParams.gasPrice;\n\n    const oldFee = newTxParams.maxFeePerGas\n      ? transactionMetaWithRsv.txParams.maxFeePerGas\n      : transactionMetaWithRsv.txParams.gasPrice;\n\n    log(`Submitting ${label} transaction`, {\n      oldFee,\n      newFee,\n      txParams: newTxParams,\n    });\n\n    const { networkClientId } = transactionMeta;\n    const ethQuery = this.#getEthQuery({ networkClientId });\n\n    const newTransactionMeta = {\n      ...transactionMetaWithRsv,\n      actionId,\n      estimatedBaseFee,\n      id: random(),\n      originalGasEstimate: transactionMeta.txParams.gas,\n      originalType: transactionMeta.type,\n      rawTx,\n      time: Date.now(),\n      txParams: newTxParams,\n      type: transactionType,\n    };\n\n    const hash = await this.publishTransactionForRetry(ethQuery, {\n      ...newTransactionMeta,\n      origin: label,\n    });\n\n    newTransactionMeta.hash = hash;\n\n    this.addMetadata(newTransactionMeta);\n\n    // speedUpTransaction has no approval request, so we assume the user has already approved the transaction\n    this.messagingSystem.publish(`${controllerName}:transactionApproved`, {\n      transactionMeta: newTransactionMeta,\n      actionId,\n    });\n\n    this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {\n      transactionMeta: newTransactionMeta,\n      actionId,\n    });\n\n    afterSubmit?.(newTransactionMeta);\n  }\n\n  /**\n   * Estimates required gas for a given transaction.\n   *\n   * @param transaction - The transaction to estimate gas for.\n   * @param networkClientId - The network client id to use for the estimate.\n   * @returns The gas and gas price.\n   */\n  async estimateGas(\n    transaction: TransactionParams,\n    networkClientId: NetworkClientId,\n  ) {\n    const ethQuery = this.#getEthQuery({\n      networkClientId,\n    });\n\n    const { estimatedGas, simulationFails } = await estimateGas(\n      transaction,\n      ethQuery,\n    );\n\n    return { gas: estimatedGas, simulationFails };\n  }\n\n  /**\n   * Estimates required gas for a given transaction and add additional gas buffer with the given multiplier.\n   *\n   * @param transaction - The transaction params to estimate gas for.\n   * @param multiplier - The multiplier to use for the gas buffer.\n   * @param networkClientId - The network client id to use for the estimate.\n   */\n  async estimateGasBuffered(\n    transaction: TransactionParams,\n    multiplier: number,\n    networkClientId: NetworkClientId,\n  ) {\n    const ethQuery = this.#getEthQuery({\n      networkClientId,\n    });\n\n    const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(\n      transaction,\n      ethQuery,\n    );\n\n    const gas = addGasBuffer(estimatedGas, blockGasLimit, multiplier);\n\n    return {\n      gas,\n      simulationFails,\n    };\n  }\n\n  /**\n   * Updates an existing transaction in state.\n   *\n   * @param transactionMeta - The new transaction to store in state.\n   * @param note - A note or update reason to include in the transaction history.\n   */\n  updateTransaction(transactionMeta: TransactionMeta, note: string) {\n    const { id: transactionId } = transactionMeta;\n\n    this.#updateTransactionInternal({ transactionId, note }, () => ({\n      ...transactionMeta,\n    }));\n  }\n\n  /**\n   * Update the security alert response for a transaction.\n   *\n   * @param transactionId - ID of the transaction.\n   * @param securityAlertResponse - The new security alert response for the transaction.\n   */\n  updateSecurityAlertResponse(\n    transactionId: string,\n    securityAlertResponse: SecurityAlertResponse,\n  ) {\n    if (!securityAlertResponse) {\n      throw new Error(\n        'updateSecurityAlertResponse: securityAlertResponse should not be null',\n      );\n    }\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update security alert response as no transaction metadata found`,\n      );\n    }\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      securityAlertResponse,\n    };\n    this.updateTransaction(\n      updatedTransactionMeta,\n      `${controllerName}:updatesecurityAlertResponse - securityAlertResponse updated`,\n    );\n  }\n\n  /**\n   * Remove transactions from state.\n   *\n   * @param options - The options bag.\n   * @param options.address - Remove transactions from this account only. Defaults to all accounts.\n   * @param options.chainId - Remove transactions for the specified chain only. Defaults to all chains.\n   */\n  wipeTransactions({\n    address,\n    chainId,\n  }: {\n    address?: string;\n    chainId?: string;\n  } = {}) {\n    if (!chainId && !address) {\n      this.update((state) => {\n        state.transactions = [];\n      });\n\n      return;\n    }\n\n    const newTransactions = this.state.transactions.filter(\n      ({ chainId: txChainId, txParams }) => {\n        const isMatchingNetwork = !chainId || chainId === txChainId;\n\n        if (!isMatchingNetwork) {\n          return true;\n        }\n\n        const isMatchingAddress =\n          !address || txParams.from?.toLowerCase() === address.toLowerCase();\n\n        return !isMatchingAddress;\n      },\n    );\n\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState(newTransactions);\n    });\n  }\n\n  /**\n   * Adds external provided transaction to state as confirmed transaction.\n   *\n   * @param transactionMeta - TransactionMeta to add transactions.\n   * @param transactionReceipt - TransactionReceipt of the external transaction.\n   * @param baseFeePerGas - Base fee per gas of the external transaction.\n   */\n  async confirmExternalTransaction(\n    transactionMeta: TransactionMeta,\n    transactionReceipt: TransactionReceipt,\n    baseFeePerGas: Hex,\n  ) {\n    // Run validation and add external transaction to state.\n    const newTransactionMeta = this.addExternalTransaction(transactionMeta);\n\n    try {\n      const transactionId = newTransactionMeta.id;\n\n      // Make sure status is confirmed and define gasUsed as in receipt.\n      const updatedTransactionMeta = {\n        ...newTransactionMeta,\n        status: TransactionStatus.confirmed as const,\n        txReceipt: transactionReceipt,\n      };\n      if (baseFeePerGas) {\n        updatedTransactionMeta.baseFeePerGas = baseFeePerGas;\n      }\n\n      // Update same nonce local transactions as dropped and define replacedBy properties.\n      this.markNonceDuplicatesDropped(transactionId);\n\n      // Update external provided transaction with updated gas values and confirmed status.\n      this.updateTransaction(\n        updatedTransactionMeta,\n        `${controllerName}:confirmExternalTransaction - Add external transaction`,\n      );\n      this.onTransactionStatusChange(updatedTransactionMeta);\n\n      // Intentional given potential duration of process.\n      this.updatePostBalance(updatedTransactionMeta).catch((error) => {\n        log('Error while updating post balance', error);\n        throw error;\n      });\n\n      this.messagingSystem.publish(\n        `${controllerName}:transactionConfirmed`,\n        updatedTransactionMeta,\n      );\n    } catch (error) {\n      console.error('Failed to confirm external transaction', error);\n    }\n  }\n\n  /**\n   * Append new send flow history to a transaction.\n   *\n   * @param transactionID - The ID of the transaction to update.\n   * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.\n   * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionSendFlowHistory(\n    transactionID: string,\n    currentSendFlowHistoryLength: number,\n    sendFlowHistoryToAdd: SendFlowHistoryEntry[],\n  ): TransactionMeta {\n    if (this.isSendFlowHistoryDisabled) {\n      throw new Error(\n        'Send flow history is disabled for the current transaction controller',\n      );\n    }\n\n    const transactionMeta = this.getTransaction(transactionID);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update send flow history as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionSendFlowHistory',\n    );\n\n    const sendFlowHistory = transactionMeta.sendFlowHistory ?? [];\n    if (currentSendFlowHistoryLength === sendFlowHistory.length) {\n      const updatedTransactionMeta = {\n        ...transactionMeta,\n        sendFlowHistory: [...sendFlowHistory, ...sendFlowHistoryToAdd],\n      };\n      this.updateTransaction(\n        updatedTransactionMeta,\n        `${controllerName}:updateTransactionSendFlowHistory - sendFlowHistory updated`,\n      );\n    }\n\n    return this.getTransaction(transactionID) as TransactionMeta;\n  }\n\n  /**\n   * Update the gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param gasValues - Gas values to update.\n   * @param gasValues.gas - Same as transaction.gasLimit.\n   * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param gasValues.gasPrice - Price per gas for legacy transactions.\n   * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param gasValues.estimateUsed - Which estimate level was used.\n   * @param gasValues.estimateSuggested - Which estimate level that the API suggested.\n   * @param gasValues.defaultGasEstimates - The default estimate for gas.\n   * @param gasValues.originalGasEstimate - Original estimate for gas.\n   * @param gasValues.userEditedGasLimit - The gas limit supplied by user.\n   * @param gasValues.userFeeLevel - Estimate level user selected.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionGasFees(\n    transactionId: string,\n    {\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      gas,\n      gasLimit,\n      gasPrice,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n    }: {\n      defaultGasEstimates?: string;\n      estimateUsed?: string;\n      estimateSuggested?: string;\n      gas?: string;\n      gasLimit?: string;\n      gasPrice?: string;\n      maxPriorityFeePerGas?: string;\n      maxFeePerGas?: string;\n      originalGasEstimate?: string;\n      userEditedGasLimit?: boolean;\n      userFeeLevel?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionGasFees',\n    );\n\n    let transactionGasFees = {\n      txParams: {\n        gas,\n        gasLimit,\n        gasPrice,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n      },\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n\n    // only update what is defined\n    transactionGasFees.txParams = pickBy(transactionGasFees.txParams);\n    transactionGasFees = pickBy(transactionGasFees);\n\n    // merge updated gas values with existing transaction meta\n    const updatedMeta = merge({}, transactionMeta, transactionGasFees);\n\n    this.updateTransaction(\n      updatedMeta,\n      `${controllerName}:updateTransactionGasFees - gas values updated`,\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  /**\n   * Update the previous gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param previousGas - Previous gas values to update.\n   * @param previousGas.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param previousGas.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param previousGas.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @returns The updated transactionMeta.\n   */\n  updatePreviousGasParams(\n    transactionId: string,\n    {\n      gasLimit,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    }: {\n      gasLimit?: string;\n      maxFeePerGas?: string;\n      maxPriorityFeePerGas?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(transactionMeta, 'updatePreviousGasParams');\n\n    const transactionPreviousGas = {\n      previousGas: {\n        gasLimit,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n      },\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n\n    // only update what is defined\n    transactionPreviousGas.previousGas = pickBy(\n      transactionPreviousGas.previousGas,\n    );\n\n    // merge updated previous gas values with existing transaction meta\n    const updatedMeta = merge({}, transactionMeta, transactionPreviousGas);\n\n    this.updateTransaction(\n      updatedMeta,\n      `${controllerName}:updatePreviousGasParams - Previous gas values updated`,\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  async getNonceLock(\n    address: string,\n    networkClientId: NetworkClientId,\n  ): Promise<NonceLock> {\n    return this.#multichainTrackingHelper.getNonceLock(\n      address,\n      networkClientId,\n    );\n  }\n\n  /**\n   * Updates the editable parameters of a transaction.\n   *\n   * @param txId - The ID of the transaction to update.\n   * @param params - The editable parameters to update.\n   * @param params.data - Data to pass with the transaction.\n   * @param params.gas - Maximum number of units of gas to use for the transaction.\n   * @param params.gasPrice - Price per gas for legacy transactions.\n   * @param params.from - Address to send the transaction from.\n   * @param params.to - Address to send the transaction to.\n   * @param params.value - Value associated with the transaction.\n   * @returns The updated transaction metadata.\n   */\n  async updateEditableParams(\n    txId: string,\n    {\n      data,\n      gas,\n      gasPrice,\n      from,\n      to,\n      value,\n    }: {\n      data?: string;\n      gas?: string;\n      gasPrice?: string;\n      from?: string;\n      to?: string;\n      value?: string;\n    },\n  ) {\n    const transactionMeta = this.getTransaction(txId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update editable params as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(transactionMeta, 'updateEditableParams');\n\n    const editableParams = {\n      txParams: {\n        data,\n        from,\n        to,\n        value,\n        gas,\n        gasPrice,\n      },\n    } as Partial<TransactionMeta>;\n\n    editableParams.txParams = pickBy(\n      editableParams.txParams,\n    ) as TransactionParams;\n\n    const updatedTransaction = merge({}, transactionMeta, editableParams);\n\n    const { networkClientId } = transactionMeta;\n    const provider = this.#getProvider({ networkClientId });\n    const ethQuery = new EthQuery(provider);\n\n    const { type } = await determineTransactionType(\n      updatedTransaction.txParams,\n      ethQuery,\n    );\n\n    updatedTransaction.type = type;\n\n    await updateTransactionLayer1GasFee({\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      provider,\n      transactionMeta: updatedTransaction,\n    });\n\n    this.updateTransaction(\n      updatedTransaction,\n      `Update Editable Params for ${txId}`,\n    );\n\n    return this.getTransaction(txId);\n  }\n\n  /**\n   * Update the isActive state of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param isActive - The active state.\n   */\n  setTransactionActive(transactionId: string, isActive: boolean) {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(`Transaction with id ${transactionId} not found`);\n    }\n\n    this.#updateTransactionInternal(\n      {\n        transactionId,\n        note: 'TransactionController#setTransactionActive - Transaction isActive updated',\n        skipHistory: true,\n        skipValidation: true,\n        skipResimulateCheck: true,\n      },\n      (updatedTransactionMeta) => {\n        updatedTransactionMeta.isActive = isActive;\n      },\n    );\n  }\n\n  /**\n   * Signs and returns the raw transaction data for provided transaction params list.\n   *\n   * @param listOfTxParams - The list of transaction params to approve.\n   * @param opts - Options bag.\n   * @param opts.hasNonce - Whether the transactions already have a nonce.\n   * @returns The raw transactions.\n   */\n  async approveTransactionsWithSameNonce(\n    listOfTxParams: (TransactionParams & { chainId: Hex })[] = [],\n    { hasNonce }: { hasNonce?: boolean } = {},\n  ): Promise<string | string[]> {\n    log('Approving transactions with same nonce', {\n      transactions: listOfTxParams,\n    });\n\n    if (listOfTxParams.length === 0) {\n      return '';\n    }\n\n    const initialTx = listOfTxParams[0];\n    const { chainId } = initialTx;\n    const networkClientId = this.#getNetworkClientId({ chainId });\n    const initialTxAsEthTx = prepareTransaction(chainId, initialTx);\n    const initialTxAsSerializedHex = serializeTransaction(initialTxAsEthTx);\n\n    if (this.approvingTransactionIds.has(initialTxAsSerializedHex)) {\n      return '';\n    }\n\n    this.approvingTransactionIds.add(initialTxAsSerializedHex);\n\n    let rawTransactions, nonceLock;\n    try {\n      // TODO: we should add a check to verify that all transactions have the same from address\n      const fromAddress = initialTx.from;\n      const requiresNonce = hasNonce !== true;\n\n      nonceLock = requiresNonce\n        ? await this.getNonceLock(fromAddress, networkClientId)\n        : undefined;\n\n      const nonce = nonceLock\n        ? add0x(nonceLock.nextNonce.toString(16))\n        : initialTx.nonce;\n\n      if (nonceLock) {\n        log('Using nonce from nonce tracker', nonce, nonceLock.nonceDetails);\n      }\n\n      rawTransactions = await Promise.all(\n        listOfTxParams.map((txParams) => {\n          txParams.nonce = nonce;\n          return this.signExternalTransaction(txParams.chainId, txParams);\n        }),\n      );\n    } catch (err) {\n      log('Error while signing transactions with same nonce', err);\n      // Must set transaction to submitted/failed before releasing lock\n      // continue with error chain\n      throw err;\n    } finally {\n      nonceLock?.releaseLock();\n      this.approvingTransactionIds.delete(initialTxAsSerializedHex);\n    }\n    return rawTransactions;\n  }\n\n  /**\n   * Update a custodial transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param options - The custodial transaction options to update.\n   * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.\n   * @param options.hash - The new hash value to be assigned.\n   * @param options.status - The new status value to be assigned.\n   */\n  updateCustodialTransaction(\n    transactionId: string,\n    {\n      errorMessage,\n      hash,\n      status,\n    }: {\n      errorMessage?: string;\n      hash?: string;\n      status?: TransactionStatus;\n    },\n  ) {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update custodial transaction as no transaction metadata found`,\n      );\n    }\n\n    if (!transactionMeta.custodyId) {\n      throw new Error('Transaction must be a custodian transaction');\n    }\n\n    if (\n      status &&\n      ![\n        TransactionStatus.submitted,\n        TransactionStatus.signed,\n        TransactionStatus.failed,\n      ].includes(status)\n    ) {\n      throw new Error(\n        `Cannot update custodial transaction with status: ${status}`,\n      );\n    }\n\n    const updatedTransactionMeta = merge(\n      {},\n      transactionMeta,\n      pickBy({ hash, status }),\n    ) as TransactionMeta;\n\n    if (updatedTransactionMeta.status === TransactionStatus.submitted) {\n      updatedTransactionMeta.submittedTime = new Date().getTime();\n    }\n\n    if (updatedTransactionMeta.status === TransactionStatus.failed) {\n      updatedTransactionMeta.error = normalizeTxError(new Error(errorMessage));\n    }\n\n    this.updateTransaction(\n      updatedTransactionMeta,\n      `${controllerName}:updateCustodialTransaction - Custodial transaction updated`,\n    );\n\n    if (\n      [TransactionStatus.submitted, TransactionStatus.failed].includes(\n        status as TransactionStatus,\n      )\n    ) {\n      this.messagingSystem.publish(\n        `${controllerName}:transactionFinished`,\n        updatedTransactionMeta,\n      );\n      this.#internalEvents.emit(\n        `${updatedTransactionMeta.id}:finished`,\n        updatedTransactionMeta,\n      );\n    }\n  }\n\n  /**\n   * Search transaction metadata for matching entries.\n   *\n   * @param opts - Options bag.\n   * @param opts.initialList - The transactions to search. Defaults to the current state.\n   * @param opts.limit - The maximum number of transactions to return. No limit by default.\n   * @param opts.searchCriteria - An object containing values or functions for transaction properties to filter transactions with.\n   * @returns An array of transactions matching the provided options.\n   */\n  getTransactions({\n    initialList,\n    limit,\n    searchCriteria = {},\n  }: {\n    initialList?: TransactionMeta[];\n    limit?: number;\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    searchCriteria?: any;\n  } = {}): TransactionMeta[] {\n    // searchCriteria is an object that might have values that aren't predicate\n    // methods. When providing any other value type (string, number, etc), we\n    // consider this shorthand for \"check the value at key for strict equality\n    // with the provided value\". To conform this object to be only methods, we\n    // mapValues (lodash) such that every value on the object is a method that\n    // returns a boolean.\n    const predicateMethods = mapValues(searchCriteria, (predicate) => {\n      return typeof predicate === 'function'\n        ? predicate\n        : // TODO: Replace `any` with type\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (v: any) => v === predicate;\n    });\n\n    const transactionsToFilter = initialList ?? this.state.transactions;\n\n    // Combine sortBy and pickBy to transform our state object into an array of\n    // matching transactions that are sorted by time.\n    const filteredTransactions = sortBy(\n      pickBy(transactionsToFilter, (transaction) => {\n        // iterate over the predicateMethods keys to check if the transaction\n        // matches the searchCriteria\n        for (const [key, predicate] of Object.entries(predicateMethods)) {\n          // We return false early as soon as we know that one of the specified\n          // search criteria do not match the transaction. This prevents\n          // needlessly checking all criteria when we already know the criteria\n          // are not fully satisfied. We check both txParams and the base\n          // object as predicate keys can be either.\n          if (key in transaction.txParams) {\n            // TODO: Replace `any` with type\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (predicate((transaction.txParams as any)[key]) === false) {\n              return false;\n            }\n            // TODO: Replace `any` with type\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          } else if (predicate((transaction as any)[key]) === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }),\n      'time',\n    );\n    if (limit !== undefined) {\n      // We need to have all transactions of a given nonce in order to display\n      // necessary details in the UI. We use the size of this set to determine\n      // whether we have reached the limit provided, thus ensuring that all\n      // transactions of nonces we include will be sent to the UI.\n      const nonces = new Set();\n      const txs = [];\n      // By default, the transaction list we filter from is sorted by time ASC.\n      // To ensure that filtered results prefers the newest transactions we\n      // iterate from right to left, inserting transactions into front of a new\n      // array. The original order is preserved, but we ensure that newest txs\n      // are preferred.\n      for (let i = filteredTransactions.length - 1; i > -1; i--) {\n        const txMeta = filteredTransactions[i];\n        const { nonce } = txMeta.txParams;\n        if (!nonces.has(nonce)) {\n          if (nonces.size < limit) {\n            nonces.add(nonce);\n          } else {\n            continue;\n          }\n        }\n        // Push transaction into the beginning of our array to ensure the\n        // original order is preserved.\n        txs.unshift(txMeta);\n      }\n      return txs;\n    }\n    return filteredTransactions;\n  }\n\n  async estimateGasFee({\n    transactionParams,\n    chainId,\n    networkClientId: requestNetworkClientId,\n  }: {\n    transactionParams: TransactionParams;\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): Promise<GasFeeFlowResponse> {\n    const { id: networkClientId, provider } =\n      this.#multichainTrackingHelper.getNetworkClient({\n        chainId,\n        networkClientId: requestNetworkClientId,\n      });\n\n    const transactionMeta = {\n      txParams: transactionParams,\n      chainId,\n      networkClientId,\n    } as TransactionMeta;\n\n    // Guaranteed as the default gas fee flow matches all transactions.\n    const gasFeeFlow = getGasFeeFlow(\n      transactionMeta,\n      this.gasFeeFlows,\n    ) as GasFeeFlow;\n\n    const ethQuery = new EthQuery(provider);\n\n    const gasFeeControllerData = await this.getGasFeeEstimates({\n      networkClientId,\n    });\n\n    return gasFeeFlow.getGasFees({\n      ethQuery,\n      gasFeeControllerData,\n      transactionMeta,\n    });\n  }\n\n  /**\n   * Determine the layer 1 gas fee for the given transaction parameters.\n   *\n   * @param request - The request object.\n   * @param request.transactionParams - The transaction parameters to estimate the layer 1 gas fee for.\n   * @param request.chainId - The ID of the chain where the transaction will be executed.\n   * @param request.networkClientId - The ID of a specific network client to process the transaction.\n   */\n  async getLayer1GasFee({\n    transactionParams,\n    chainId,\n    networkClientId,\n  }: {\n    transactionParams: TransactionParams;\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): Promise<Hex | undefined> {\n    const provider = this.#getProvider({\n      chainId,\n      networkClientId,\n    });\n\n    return await getTransactionLayer1GasFee({\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      provider,\n      transactionMeta: {\n        txParams: transactionParams,\n        chainId,\n      } as TransactionMeta,\n    });\n  }\n\n  private async signExternalTransaction(\n    chainId: Hex,\n    transactionParams: TransactionParams,\n  ): Promise<string> {\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const normalizedTransactionParams =\n      normalizeTransactionParams(transactionParams);\n    const type = isEIP1559Transaction(normalizedTransactionParams)\n      ? TransactionEnvelopeType.feeMarket\n      : TransactionEnvelopeType.legacy;\n    const updatedTransactionParams = {\n      ...normalizedTransactionParams,\n      type,\n      gasLimit: normalizedTransactionParams.gas,\n      chainId,\n    };\n\n    const { from } = updatedTransactionParams;\n\n    const unsignedTransaction = prepareTransaction(\n      chainId,\n      updatedTransactionParams,\n    );\n\n    const signedTransaction = await this.sign(unsignedTransaction, from);\n    const rawTransaction = serializeTransaction(signedTransaction);\n\n    return rawTransaction;\n  }\n\n  /**\n   * Removes unapproved transactions from state.\n   */\n  clearUnapprovedTransactions() {\n    const transactions = this.state.transactions.filter(\n      ({ status }) => status !== TransactionStatus.unapproved,\n    );\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState(transactions);\n    });\n  }\n\n  /**\n   * Stop the signing process for a specific transaction.\n   * Throws an error causing the transaction status to be set to failed.\n   *\n   * @param transactionId - The ID of the transaction to stop signing.\n   */\n  abortTransactionSigning(transactionId: string) {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(`Cannot abort signing as no transaction metadata found`);\n    }\n\n    const abortCallback = this.signAbortCallbacks.get(transactionId);\n\n    if (!abortCallback) {\n      throw new Error(\n        `Cannot abort signing as transaction is not waiting for signing`,\n      );\n    }\n\n    abortCallback();\n\n    this.signAbortCallbacks.delete(transactionId);\n  }\n\n  private addMetadata(transactionMeta: TransactionMeta) {\n    validateTxParams(transactionMeta.txParams);\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState([\n        ...state.transactions,\n        transactionMeta,\n      ]);\n    });\n  }\n\n  private async updateGasProperties(\n    transactionMeta: TransactionMeta,\n    { traceContext }: { traceContext?: TraceContext } = {},\n  ) {\n    const isEIP1559Compatible =\n      transactionMeta.txParams.type !== TransactionEnvelopeType.legacy &&\n      (await this.getEIP1559Compatibility(transactionMeta.networkClientId));\n\n    const { networkClientId, chainId } = transactionMeta;\n\n    const isCustomNetwork =\n      this.#multichainTrackingHelper.getNetworkClient({ networkClientId })\n        .configuration.type === NetworkClientType.Custom;\n\n    const ethQuery = this.#getEthQuery({ networkClientId });\n    const provider = this.#getProvider({ networkClientId });\n\n    await this.#trace(\n      { name: 'Update Gas', parentContext: traceContext },\n      async () => {\n        await updateGas({\n          ethQuery,\n          chainId,\n          isCustomNetwork,\n          txMeta: transactionMeta,\n        });\n      },\n    );\n\n    await this.#trace(\n      { name: 'Update Gas Fees', parentContext: traceContext },\n      async () =>\n        await updateGasFees({\n          eip1559: isEIP1559Compatible,\n          ethQuery,\n          gasFeeFlows: this.gasFeeFlows,\n          getGasFeeEstimates: this.getGasFeeEstimates,\n          getSavedGasFees: this.getSavedGasFees.bind(this),\n          txMeta: transactionMeta,\n        }),\n    );\n\n    await this.#trace(\n      { name: 'Update Layer 1 Gas Fees', parentContext: traceContext },\n      async () =>\n        await updateTransactionLayer1GasFee({\n          layer1GasFeeFlows: this.layer1GasFeeFlows,\n          provider,\n          transactionMeta,\n        }),\n    );\n  }\n\n  private onBootCleanup() {\n    this.clearUnapprovedTransactions();\n    this.failIncompleteTransactions();\n  }\n\n  private failIncompleteTransactions() {\n    const incompleteTransactions = this.state.transactions.filter(\n      (transaction) =>\n        [TransactionStatus.approved, TransactionStatus.signed].includes(\n          transaction.status,\n        ),\n    );\n\n    for (const transactionMeta of incompleteTransactions) {\n      this.failTransaction(\n        transactionMeta,\n        new Error('Transaction incomplete at startup'),\n      );\n    }\n  }\n\n  private async processApproval(\n    transactionMeta: TransactionMeta,\n    {\n      isExisting = false,\n      requireApproval,\n      shouldShowRequest = true,\n      actionId,\n      traceContext,\n    }: {\n      isExisting?: boolean;\n      requireApproval?: boolean | undefined;\n      shouldShowRequest?: boolean;\n      actionId?: string;\n      traceContext?: TraceContext;\n    },\n  ): Promise<string> {\n    const transactionId = transactionMeta.id;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n    const { meta, isCompleted } = this.isTransactionCompleted(transactionId);\n    const finishedPromise = isCompleted\n      ? Promise.resolve(meta)\n      : this.waitForTransactionFinished(transactionId);\n\n    if (meta && !isExisting && !isCompleted) {\n      try {\n        if (requireApproval !== false) {\n          const acceptResult = await this.#trace(\n            { name: 'Await Approval', parentContext: traceContext },\n            (context) =>\n              this.requestApproval(transactionMeta, {\n                shouldShowRequest,\n                traceContext: context,\n              }),\n          );\n\n          resultCallbacks = acceptResult.resultCallbacks;\n\n          const approvalValue = acceptResult.value as\n            | {\n                txMeta?: TransactionMeta;\n              }\n            | undefined;\n\n          const updatedTransaction = approvalValue?.txMeta;\n\n          if (updatedTransaction) {\n            log('Updating transaction with approval data', {\n              customNonce: updatedTransaction.customNonceValue,\n              params: updatedTransaction.txParams,\n            });\n\n            this.updateTransaction(\n              updatedTransaction,\n              'TransactionController#processApproval - Updated with approval data',\n            );\n          }\n        }\n\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n\n        if (!isTxCompleted) {\n          const approvalResult = await this.approveTransaction(\n            transactionId,\n            traceContext,\n          );\n          if (\n            approvalResult === ApprovalState.SkippedViaBeforePublishHook &&\n            resultCallbacks\n          ) {\n            resultCallbacks.success();\n          }\n          const updatedTransactionMeta = this.getTransaction(\n            transactionId,\n          ) as TransactionMeta;\n          this.messagingSystem.publish(\n            `${controllerName}:transactionApproved`,\n            {\n              transactionMeta: updatedTransactionMeta,\n              actionId,\n            },\n          );\n        }\n        // TODO: Replace `any` with type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } catch (error: any) {\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n        if (!isTxCompleted) {\n          if (error?.code === errorCodes.provider.userRejectedRequest) {\n            this.cancelTransaction(transactionId, actionId);\n\n            throw providerErrors.userRejectedRequest(\n              'MetaMask Tx Signature: User denied transaction signature.',\n            );\n          } else {\n            this.failTransaction(meta, error, actionId);\n          }\n        }\n      }\n    }\n\n    const finalMeta = await finishedPromise;\n\n    switch (finalMeta?.status) {\n      case TransactionStatus.failed:\n        resultCallbacks?.error(finalMeta.error);\n        throw rpcErrors.internal(finalMeta.error.message);\n\n      case TransactionStatus.submitted:\n        resultCallbacks?.success();\n        return finalMeta.hash as string;\n\n      default:\n        const internalError = rpcErrors.internal(\n          `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n            finalMeta || transactionId,\n          )}`,\n        );\n\n        resultCallbacks?.error(internalError);\n        throw internalError;\n    }\n  }\n\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionId - The ID of the transaction to approve.\n   * @param traceContext - The parent context for any new traces.\n   */\n  private async approveTransaction(\n    transactionId: string,\n    traceContext?: unknown,\n  ) {\n    const cleanupTasks = new Array<() => void>();\n    cleanupTasks.push(await this.mutex.acquire());\n\n    let transactionMeta = this.getTransactionOrThrow(transactionId);\n\n    try {\n      if (!this.sign) {\n        this.failTransaction(\n          transactionMeta,\n          new Error('No sign method defined.'),\n        );\n        return ApprovalState.NotApproved;\n      } else if (!transactionMeta.chainId) {\n        this.failTransaction(transactionMeta, new Error('No chainId defined.'));\n        return ApprovalState.NotApproved;\n      }\n\n      if (this.approvingTransactionIds.has(transactionId)) {\n        log('Skipping approval as signing in progress', transactionId);\n        return ApprovalState.NotApproved;\n      }\n      this.approvingTransactionIds.add(transactionId);\n      cleanupTasks.push(() =>\n        this.approvingTransactionIds.delete(transactionId),\n      );\n\n      const [nonce, releaseNonce] = await getNextNonce(\n        transactionMeta,\n        (address: string) =>\n          this.#multichainTrackingHelper.getNonceLock(\n            address,\n            transactionMeta.networkClientId,\n          ),\n      );\n\n      // must set transaction to submitted/failed before releasing lock\n      releaseNonce && cleanupTasks.push(releaseNonce);\n\n      transactionMeta = this.#updateTransactionInternal(\n        {\n          transactionId,\n          note: 'TransactionController#approveTransaction - Transaction approved',\n        },\n        (draftTxMeta) => {\n          const { chainId, txParams } = draftTxMeta;\n          const { gas, type } = txParams;\n\n          draftTxMeta.status = TransactionStatus.approved;\n          draftTxMeta.txParams.chainId = chainId;\n          draftTxMeta.txParams.gasLimit = gas;\n          draftTxMeta.txParams.nonce = nonce;\n\n          if (!type && isEIP1559Transaction(txParams)) {\n            draftTxMeta.txParams.type = TransactionEnvelopeType.feeMarket;\n          }\n        },\n      );\n\n      this.onTransactionStatusChange(transactionMeta);\n\n      const rawTx = await this.#trace(\n        { name: 'Sign', parentContext: traceContext },\n        () => this.signTransaction(transactionMeta, transactionMeta.txParams),\n      );\n\n      if (!this.beforePublish(transactionMeta)) {\n        log('Skipping publishing transaction based on hook');\n        this.messagingSystem.publish(\n          `${controllerName}:transactionPublishingSkipped`,\n          transactionMeta,\n        );\n        return ApprovalState.SkippedViaBeforePublishHook;\n      }\n\n      if (!rawTx) {\n        return ApprovalState.NotApproved;\n      }\n\n      const { networkClientId } = transactionMeta;\n      const ethQuery = this.#getEthQuery({ networkClientId });\n\n      let preTxBalance: string | undefined;\n      const shouldUpdatePreTxBalance =\n        transactionMeta.type === TransactionType.swap;\n\n      if (shouldUpdatePreTxBalance) {\n        log('Determining pre-transaction balance');\n\n        preTxBalance = await query(ethQuery, 'getBalance', [\n          transactionMeta.txParams.from,\n        ]);\n      }\n\n      log('Publishing transaction', transactionMeta.txParams);\n\n      let hash: string | undefined;\n\n      await this.#trace(\n        { name: 'Publish', parentContext: traceContext },\n        async () => {\n          ({ transactionHash: hash } = await this.publish(\n            transactionMeta,\n            rawTx,\n          ));\n\n          if (hash === undefined) {\n            hash = await this.publishTransaction(ethQuery, {\n              ...transactionMeta,\n              rawTx,\n            });\n          }\n        },\n      );\n\n      log('Publish successful', hash);\n\n      transactionMeta = this.#updateTransactionInternal(\n        {\n          transactionId,\n          note: 'TransactionController#approveTransaction - Transaction submitted',\n        },\n        (draftTxMeta) => {\n          draftTxMeta.hash = hash;\n          draftTxMeta.status = TransactionStatus.submitted;\n          draftTxMeta.submittedTime = new Date().getTime();\n          if (shouldUpdatePreTxBalance) {\n            draftTxMeta.preTxBalance = preTxBalance;\n            log('Updated pre-transaction balance', preTxBalance);\n          }\n        },\n      );\n\n      this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {\n        transactionMeta,\n      });\n\n      this.messagingSystem.publish(\n        `${controllerName}:transactionFinished`,\n        transactionMeta,\n      );\n      this.#internalEvents.emit(`${transactionId}:finished`, transactionMeta);\n\n      this.onTransactionStatusChange(transactionMeta);\n      return ApprovalState.Approved;\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n      return ApprovalState.NotApproved;\n    } finally {\n      cleanupTasks.forEach((task) => task());\n    }\n  }\n\n  private async publishTransaction(\n    ethQuery: EthQuery,\n    transactionMeta: TransactionMeta,\n    { skipSubmitHistory }: { skipSubmitHistory?: boolean } = {},\n  ): Promise<string> {\n    const transactionHash = await query(ethQuery, 'sendRawTransaction', [\n      transactionMeta.rawTx,\n    ]);\n\n    if (skipSubmitHistory !== true) {\n      this.#updateSubmitHistory(transactionMeta, transactionHash);\n    }\n\n    return transactionHash;\n  }\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param actionId - The actionId passed from UI\n   */\n  private cancelTransaction(transactionId: string, actionId?: string) {\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n    this.update((state) => {\n      const transactions = state.transactions.filter(\n        ({ id }) => id !== transactionId,\n      );\n      state.transactions = this.trimTransactionsForState(transactions);\n    });\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      status: TransactionStatus.rejected as const,\n    };\n    this.messagingSystem.publish(\n      `${controllerName}:transactionFinished`,\n      updatedTransactionMeta,\n    );\n    this.#internalEvents.emit(\n      `${transactionMeta.id}:finished`,\n      updatedTransactionMeta,\n    );\n    this.messagingSystem.publish(`${controllerName}:transactionRejected`, {\n      transactionMeta: updatedTransactionMeta,\n      actionId,\n    });\n    this.onTransactionStatusChange(updatedTransactionMeta);\n  }\n\n  /**\n   * Trim the amount of transactions that are set on the state. Checks\n   * if the length of the tx history is longer then desired persistence\n   * limit and then if it is removes the oldest confirmed or rejected tx.\n   * Pending or unapproved transactions will not be removed by this\n   * operation. For safety of presenting a fully functional transaction UI\n   * representation, this function will not break apart transactions with the\n   * same nonce, created on the same day, per network. Not accounting for\n   * transactions of the same nonce, same day and network combo can result in\n   * confusing or broken experiences in the UI.\n   *\n   * @param transactions - The transactions to be applied to the state.\n   * @returns The trimmed list of transactions.\n   */\n  private trimTransactionsForState(\n    transactions: TransactionMeta[],\n  ): TransactionMeta[] {\n    const nonceNetworkSet = new Set();\n\n    const txsToKeep = [...transactions]\n      .sort((a, b) => (a.time > b.time ? -1 : 1)) // Descending time order\n      .filter((tx) => {\n        const { chainId, status, txParams, time } = tx;\n\n        if (txParams) {\n          const key = `${String(txParams.nonce)}-${convertHexToDecimal(\n            chainId,\n          )}-${new Date(time).toDateString()}`;\n\n          if (nonceNetworkSet.has(key)) {\n            return true;\n          } else if (\n            nonceNetworkSet.size < this.#transactionHistoryLimit ||\n            !this.isFinalState(status)\n          ) {\n            nonceNetworkSet.add(key);\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n    txsToKeep.reverse(); // Ascending time order\n    return txsToKeep;\n  }\n\n  /**\n   * Determines if the transaction is in a final state.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isFinalState(status: TransactionStatus): boolean {\n    return (\n      status === TransactionStatus.rejected ||\n      status === TransactionStatus.confirmed ||\n      status === TransactionStatus.failed\n    );\n  }\n\n  /**\n   * Whether the transaction has at least completed all local processing.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isLocalFinalState(status: TransactionStatus): boolean {\n    return [\n      TransactionStatus.confirmed,\n      TransactionStatus.failed,\n      TransactionStatus.rejected,\n      TransactionStatus.submitted,\n    ].includes(status);\n  }\n\n  private async requestApproval(\n    txMeta: TransactionMeta,\n    {\n      shouldShowRequest,\n      traceContext,\n    }: { shouldShowRequest: boolean; traceContext?: TraceContext },\n  ): Promise<AddResult> {\n    const id = this.getApprovalId(txMeta);\n    const { origin } = txMeta;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: txMeta.id };\n\n    await this.#trace({\n      name: 'Notification Display',\n      id,\n      parentContext: traceContext,\n    });\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin: origin || ORIGIN_METAMASK,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      shouldShowRequest,\n    )) as Promise<AddResult>;\n  }\n\n  private getTransaction(\n    transactionId: string,\n  ): Readonly<TransactionMeta> | undefined {\n    const { transactions } = this.state;\n    return transactions.find(({ id }) => id === transactionId);\n  }\n\n  private getTransactionOrThrow(\n    transactionId: string,\n    errorMessagePrefix = 'TransactionController',\n  ): Readonly<TransactionMeta> {\n    const txMeta = this.getTransaction(transactionId);\n    if (!txMeta) {\n      throw new Error(\n        `${errorMessagePrefix}: No transaction found with id ${transactionId}`,\n      );\n    }\n    return txMeta;\n  }\n\n  private getApprovalId(txMeta: TransactionMeta) {\n    return String(txMeta.id);\n  }\n\n  private isTransactionCompleted(transactionId: string): {\n    meta?: TransactionMeta;\n    isCompleted: boolean;\n  } {\n    const transaction = this.getTransaction(transactionId);\n\n    if (!transaction) {\n      return { meta: undefined, isCompleted: false };\n    }\n\n    const isCompleted = this.isLocalFinalState(transaction.status);\n\n    return { meta: transaction, isCompleted };\n  }\n\n  #getChainId(networkClientId: NetworkClientId): Hex {\n    return this.#multichainTrackingHelper.getNetworkClient({ networkClientId })\n      .configuration.chainId;\n  }\n\n  #getNetworkClientId({\n    chainId,\n    networkClientId,\n  }: {\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }) {\n    if (networkClientId) {\n      return networkClientId;\n    }\n\n    return this.#multichainTrackingHelper.getNetworkClient({\n      chainId,\n    }).id;\n  }\n\n  #getEthQuery({\n    chainId,\n    networkClientId,\n  }: {\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): EthQuery {\n    return new EthQuery(this.#getProvider({ chainId, networkClientId }));\n  }\n\n  #getProvider({\n    chainId,\n    networkClientId,\n  }: {\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): Provider {\n    return this.#multichainTrackingHelper.getNetworkClient({\n      chainId,\n      networkClientId,\n    }).provider;\n  }\n\n  private onIncomingTransactions(transactions: TransactionMeta[]) {\n    if (!transactions.length) {\n      return;\n    }\n\n    const finalTransactions = transactions.map((tx) => {\n      const { chainId } = tx;\n      const networkClientId = this.#getNetworkClientId({ chainId });\n\n      return {\n        ...tx,\n        networkClientId,\n      };\n    });\n\n    this.update((state) => {\n      const { transactions: currentTransactions } = state;\n\n      state.transactions = this.trimTransactionsForState([\n        ...finalTransactions,\n        ...currentTransactions,\n      ]);\n\n      log(\n        'Added incoming transactions to state',\n        finalTransactions.length,\n        finalTransactions,\n      );\n    });\n\n    this.messagingSystem.publish(\n      `${controllerName}:incomingTransactionsReceived`,\n      finalTransactions,\n    );\n  }\n\n  private generateDappSuggestedGasFees(\n    txParams: TransactionParams,\n    origin?: string,\n  ): DappSuggestedGasFees | undefined {\n    if (!origin || origin === ORIGIN_METAMASK) {\n      return undefined;\n    }\n\n    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas } = txParams;\n\n    if (\n      gasPrice === undefined &&\n      maxFeePerGas === undefined &&\n      maxPriorityFeePerGas === undefined &&\n      gas === undefined\n    ) {\n      return undefined;\n    }\n\n    const dappSuggestedGasFees: DappSuggestedGasFees = {};\n\n    if (gasPrice !== undefined) {\n      dappSuggestedGasFees.gasPrice = gasPrice;\n    } else if (\n      maxFeePerGas !== undefined ||\n      maxPriorityFeePerGas !== undefined\n    ) {\n      dappSuggestedGasFees.maxFeePerGas = maxFeePerGas;\n      dappSuggestedGasFees.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    }\n\n    if (gas !== undefined) {\n      dappSuggestedGasFees.gas = gas;\n    }\n\n    return dappSuggestedGasFees;\n  }\n\n  /**\n   * Validates and adds external provided transaction to state.\n   *\n   * @param transactionMeta - Nominated external transaction to be added to state.\n   * @returns The new transaction.\n   */\n  private addExternalTransaction(transactionMeta: TransactionMeta) {\n    const { chainId } = transactionMeta;\n    const { transactions } = this.state;\n    const fromAddress = transactionMeta?.txParams?.from;\n    const sameFromAndNetworkTransactions = transactions.filter(\n      (transaction) =>\n        transaction.txParams.from === fromAddress &&\n        transaction.chainId === chainId,\n    );\n    const confirmedTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.confirmed,\n    );\n    const pendingTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.submitted,\n    );\n\n    validateConfirmedExternalTransaction(\n      transactionMeta,\n      confirmedTxs,\n      pendingTxs,\n    );\n\n    // Make sure provided external transaction has non empty history array\n    const newTransactionMeta =\n      (transactionMeta.history ?? []).length === 0 && !this.isHistoryDisabled\n        ? addInitialHistorySnapshot(transactionMeta)\n        : transactionMeta;\n\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState([\n        ...state.transactions,\n        newTransactionMeta,\n      ]);\n    });\n\n    return newTransactionMeta;\n  }\n\n  /**\n   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions\n   * in the transactions have the same nonce.\n   *\n   * @param transactionId - Used to identify original transaction.\n   */\n  private markNonceDuplicatesDropped(transactionId: string) {\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      return;\n    }\n    const nonce = transactionMeta.txParams?.nonce;\n    const from = transactionMeta.txParams?.from;\n    const { chainId } = transactionMeta;\n\n    const sameNonceTransactions = this.state.transactions.filter(\n      (transaction) =>\n        transaction.id !== transactionId &&\n        transaction.txParams.from === from &&\n        transaction.txParams.nonce === nonce &&\n        transaction.chainId === chainId &&\n        transaction.type !== TransactionType.incoming,\n    );\n    const sameNonceTransactionIds = sameNonceTransactions.map(\n      (transaction) => transaction.id,\n    );\n\n    if (sameNonceTransactions.length === 0) {\n      return;\n    }\n\n    this.update((state) => {\n      for (const transaction of state.transactions) {\n        if (sameNonceTransactionIds.includes(transaction.id)) {\n          transaction.replacedBy = transactionMeta?.hash;\n          transaction.replacedById = transactionMeta?.id;\n        }\n      }\n    });\n\n    for (const transaction of this.state.transactions) {\n      if (\n        sameNonceTransactionIds.includes(transaction.id) &&\n        transaction.status !== TransactionStatus.failed\n      ) {\n        this.setTransactionStatusDropped(transaction);\n      }\n    }\n  }\n\n  /**\n   * Method to set transaction status to dropped.\n   *\n   * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.\n   */\n  private setTransactionStatusDropped(transactionMeta: TransactionMeta) {\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      status: TransactionStatus.dropped as const,\n    };\n    this.messagingSystem.publish(`${controllerName}:transactionDropped`, {\n      transactionMeta: updatedTransactionMeta,\n    });\n    this.updateTransaction(\n      updatedTransactionMeta,\n      'TransactionController#setTransactionStatusDropped - Transaction dropped',\n    );\n    this.onTransactionStatusChange(updatedTransactionMeta);\n  }\n\n  /**\n   * Get transaction with provided actionId.\n   *\n   * @param actionId - Unique ID to prevent duplicate requests\n   * @returns the filtered transaction\n   */\n  private getTransactionWithActionId(actionId?: string) {\n    return this.state.transactions.find(\n      (transaction) => actionId && transaction.actionId === actionId,\n    );\n  }\n\n  private async waitForTransactionFinished(\n    transactionId: string,\n  ): Promise<TransactionMeta> {\n    return new Promise((resolve) => {\n      this.#internalEvents.once(`${transactionId}:finished`, (txMeta) => {\n        resolve(txMeta);\n      });\n    });\n  }\n\n  /**\n   * Updates the r, s, and v properties of a TransactionMeta object\n   * with values from a signed transaction.\n   *\n   * @param transactionMeta - The TransactionMeta object to update.\n   * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.\n   * @returns The updated TransactionMeta object.\n   */\n  private updateTransactionMetaRSV(\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ): TransactionMeta {\n    const transactionMetaWithRsv = cloneDeep(transactionMeta);\n\n    for (const key of ['r', 's', 'v'] as const) {\n      const value = signedTx[key];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      transactionMetaWithRsv[key] = add0x(value.toString(16));\n    }\n\n    return transactionMetaWithRsv;\n  }\n\n  private async getEIP1559Compatibility(networkClientId?: NetworkClientId) {\n    const currentNetworkIsEIP1559Compatible =\n      await this.getCurrentNetworkEIP1559Compatibility(networkClientId);\n\n    const currentAccountIsEIP1559Compatible =\n      await this.getCurrentAccountEIP1559Compatibility();\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n\n  private async signTransaction(\n    transactionMeta: TransactionMeta,\n    txParams: TransactionParams,\n  ): Promise<string | undefined> {\n    log('Signing transaction', txParams);\n\n    const { authorizationList, from } = txParams;\n    const finalTxParams = { ...txParams };\n\n    finalTxParams.authorizationList = await signAuthorizationList({\n      authorizationList,\n      messenger: this.messagingSystem,\n      transactionMeta,\n    });\n\n    const unsignedEthTx = prepareTransaction(\n      transactionMeta.chainId,\n      finalTxParams,\n    );\n\n    this.approvingTransactionIds.add(transactionMeta.id);\n\n    const signedTx = await new Promise<TypedTransaction>((resolve, reject) => {\n      this.sign?.(\n        unsignedEthTx,\n        from,\n        ...this.getAdditionalSignArguments(transactionMeta),\n      ).then(resolve, reject);\n\n      this.signAbortCallbacks.set(transactionMeta.id, () =>\n        reject(new Error('Signing aborted by user')),\n      );\n    });\n\n    this.signAbortCallbacks.delete(transactionMeta.id);\n\n    if (!signedTx) {\n      log('Skipping signed status as no signed transaction');\n      return undefined;\n    }\n\n    const transactionMetaFromHook = cloneDeep(transactionMeta);\n    if (!this.afterSign(transactionMetaFromHook, signedTx)) {\n      this.updateTransaction(\n        transactionMetaFromHook,\n        'TransactionController#signTransaction - Update after sign',\n      );\n\n      log('Skipping signed status based on hook');\n\n      return undefined;\n    }\n\n    const transactionMetaWithRsv = {\n      ...this.updateTransactionMetaRSV(transactionMetaFromHook, signedTx),\n      status: TransactionStatus.signed as const,\n    };\n\n    this.updateTransaction(\n      transactionMetaWithRsv,\n      'TransactionController#approveTransaction - Transaction signed',\n    );\n\n    this.onTransactionStatusChange(transactionMetaWithRsv);\n\n    const rawTx = serializeTransaction(signedTx);\n\n    const transactionMetaWithRawTx = merge({}, transactionMetaWithRsv, {\n      rawTx,\n    });\n\n    this.updateTransaction(\n      transactionMetaWithRawTx,\n      'TransactionController#approveTransaction - RawTransaction added',\n    );\n\n    return rawTx;\n  }\n\n  private onTransactionStatusChange(transactionMeta: TransactionMeta) {\n    this.messagingSystem.publish(`${controllerName}:transactionStatusUpdated`, {\n      transactionMeta,\n    });\n  }\n\n  private getNonceTrackerTransactions(\n    status: TransactionStatus,\n    address: string,\n    chainId: string,\n  ) {\n    return getAndFormatTransactionsForNonceTracker(\n      chainId,\n      address,\n      status,\n      this.state.transactions,\n    );\n  }\n\n  private onConfirmedTransaction(transactionMeta: TransactionMeta) {\n    log('Processing confirmed transaction', transactionMeta.id);\n\n    this.markNonceDuplicatesDropped(transactionMeta.id);\n\n    this.messagingSystem.publish(\n      `${controllerName}:transactionConfirmed`,\n      transactionMeta,\n    );\n\n    this.onTransactionStatusChange(transactionMeta);\n\n    // Intentional given potential duration of process.\n    this.updatePostBalance(transactionMeta).catch((error) => {\n      log('Error while updating post balance', error);\n      throw error;\n    });\n  }\n\n  private async updatePostBalance(transactionMeta: TransactionMeta) {\n    try {\n      const { networkClientId, type } = transactionMeta;\n\n      if (type !== TransactionType.swap) {\n        return;\n      }\n\n      const ethQuery = this.#getEthQuery({ networkClientId });\n\n      const { updatedTransactionMeta, approvalTransactionMeta } =\n        await updatePostTransactionBalance(transactionMeta, {\n          ethQuery,\n          getTransaction: this.getTransaction.bind(this),\n          updateTransaction: this.updateTransaction.bind(this),\n        });\n\n      this.messagingSystem.publish(\n        `${controllerName}:postTransactionBalanceUpdated`,\n        {\n          transactionMeta: updatedTransactionMeta,\n          approvalTransactionMeta,\n        },\n      );\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Error while updating post transaction balance', error);\n    }\n  }\n\n  #createNonceTracker({\n    provider,\n    blockTracker,\n    chainId,\n  }: {\n    provider: Provider;\n    blockTracker: BlockTracker;\n    chainId: Hex;\n  }): NonceTracker {\n    return new NonceTracker({\n      // TODO: Fix types\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      provider: provider as any,\n      // TODO: Fix types\n      blockTracker,\n      getPendingTransactions: this.#getNonceTrackerPendingTransactions.bind(\n        this,\n        chainId,\n      ),\n      getConfirmedTransactions: this.getNonceTrackerTransactions.bind(\n        this,\n        TransactionStatus.confirmed,\n        chainId,\n      ),\n    });\n  }\n\n  #createPendingTransactionTracker({\n    provider,\n    blockTracker,\n    chainId,\n    networkClientId,\n  }: {\n    provider: Provider;\n    blockTracker: BlockTracker;\n    chainId: Hex;\n    networkClientId: NetworkClientId;\n  }): PendingTransactionTracker {\n    const ethQuery = new EthQuery(provider);\n\n    const pendingTransactionTracker = new PendingTransactionTracker({\n      blockTracker,\n      getChainId: () => chainId,\n      getEthQuery: () => ethQuery,\n      getNetworkClientId: () => networkClientId,\n      getTransactions: () => this.state.transactions,\n      isResubmitEnabled: this.#pendingTransactionOptions.isResubmitEnabled,\n      getGlobalLock: () =>\n        this.#multichainTrackingHelper.acquireNonceLockForChainIdKey({\n          chainId,\n        }),\n      publishTransaction: (_ethQuery, transactionMeta) =>\n        this.publishTransaction(_ethQuery, transactionMeta, {\n          skipSubmitHistory: true,\n        }),\n      hooks: {\n        beforeCheckPendingTransaction:\n          this.beforeCheckPendingTransaction.bind(this),\n        beforePublish: this.beforePublish.bind(this),\n      },\n    });\n\n    this.#addPendingTransactionTrackerListeners(pendingTransactionTracker);\n\n    return pendingTransactionTracker;\n  }\n\n  readonly #checkForPendingTransactionAndStartPolling = () => {\n    this.#multichainTrackingHelper.checkForPendingTransactionAndStartPolling();\n  };\n\n  #stopAllTracking() {\n    this.#multichainTrackingHelper.stopAllTracking();\n  }\n\n  #addIncomingTransactionHelperListeners(\n    incomingTransactionHelper: IncomingTransactionHelper,\n  ) {\n    incomingTransactionHelper.hub.on(\n      'transactions',\n      this.onIncomingTransactions.bind(this),\n    );\n  }\n\n  #removePendingTransactionTrackerListeners(\n    pendingTransactionTracker: PendingTransactionTracker,\n  ) {\n    pendingTransactionTracker.hub.removeAllListeners('transaction-confirmed');\n    pendingTransactionTracker.hub.removeAllListeners('transaction-dropped');\n    pendingTransactionTracker.hub.removeAllListeners('transaction-failed');\n    pendingTransactionTracker.hub.removeAllListeners('transaction-updated');\n  }\n\n  #addPendingTransactionTrackerListeners(\n    pendingTransactionTracker: PendingTransactionTracker,\n  ) {\n    pendingTransactionTracker.hub.on(\n      'transaction-confirmed',\n      this.onConfirmedTransaction.bind(this),\n    );\n\n    pendingTransactionTracker.hub.on(\n      'transaction-dropped',\n      this.setTransactionStatusDropped.bind(this),\n    );\n\n    pendingTransactionTracker.hub.on(\n      'transaction-failed',\n      this.failTransaction.bind(this),\n    );\n\n    pendingTransactionTracker.hub.on(\n      'transaction-updated',\n      this.updateTransaction.bind(this),\n    );\n  }\n\n  #getNonceTrackerPendingTransactions(chainId: string, address: string) {\n    const standardPendingTransactions = this.getNonceTrackerTransactions(\n      TransactionStatus.submitted,\n      address,\n      chainId,\n    );\n\n    const externalPendingTransactions = this.getExternalPendingTransactions(\n      address,\n      chainId,\n    );\n    return [...standardPendingTransactions, ...externalPendingTransactions];\n  }\n\n  private async publishTransactionForRetry(\n    ethQuery: EthQuery,\n    transactionMeta: TransactionMeta,\n  ): Promise<string> {\n    try {\n      return await this.publishTransaction(ethQuery, transactionMeta);\n    } catch (error: unknown) {\n      if (this.isTransactionAlreadyConfirmedError(error as Error)) {\n        throw new Error('Previous transaction is already confirmed');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Ensures that error is a nonce issue\n   *\n   * @param error - The error to check\n   * @returns Whether or not the error is a nonce issue\n   */\n  // TODO: Replace `any` with type\n  // Some networks are returning original error in the data field\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private isTransactionAlreadyConfirmedError(error: any): boolean {\n    return (\n      error?.message?.includes('nonce too low') ||\n      error?.data?.message?.includes('nonce too low')\n    );\n  }\n\n  #getGasFeeFlows(): GasFeeFlow[] {\n    if (this.#testGasFeeFlows) {\n      return [new TestGasFeeFlow()];\n    }\n\n    return [new LineaGasFeeFlow(), new DefaultGasFeeFlow()];\n  }\n\n  #getLayer1GasFeeFlows(): Layer1GasFeeFlow[] {\n    return [new OptimismLayer1GasFeeFlow(), new ScrollLayer1GasFeeFlow()];\n  }\n\n  #updateTransactionInternal(\n    {\n      transactionId,\n      note,\n      skipHistory,\n      skipValidation,\n      skipResimulateCheck,\n    }: {\n      transactionId: string;\n      note?: string;\n      skipHistory?: boolean;\n      skipValidation?: boolean;\n      skipResimulateCheck?: boolean;\n    },\n    callback: (transactionMeta: TransactionMeta) => TransactionMeta | void,\n  ): Readonly<TransactionMeta> {\n    let resimulateResponse: ResimulateResponse | undefined;\n\n    this.update((state) => {\n      const index = state.transactions.findIndex(\n        ({ id }) => id === transactionId,\n      );\n\n      let transactionMeta = state.transactions[index];\n\n      const originalTransactionMeta = cloneDeep(transactionMeta);\n\n      transactionMeta = callback(transactionMeta) ?? transactionMeta;\n\n      if (skipValidation !== true) {\n        transactionMeta.txParams = normalizeTransactionParams(\n          transactionMeta.txParams,\n        );\n\n        validateTxParams(transactionMeta.txParams);\n      }\n\n      if (!skipResimulateCheck && this.#isSimulationEnabled()) {\n        resimulateResponse = shouldResimulate(\n          originalTransactionMeta,\n          transactionMeta,\n        );\n      }\n\n      const shouldSkipHistory = this.isHistoryDisabled || skipHistory;\n\n      if (!shouldSkipHistory) {\n        transactionMeta = updateTransactionHistory(\n          transactionMeta,\n          note ?? 'Transaction updated',\n        );\n      }\n      state.transactions[index] = transactionMeta;\n    });\n\n    const transactionMeta = this.getTransaction(\n      transactionId,\n    ) as TransactionMeta;\n\n    if (resimulateResponse?.resimulate) {\n      this.#updateSimulationData(transactionMeta, {\n        blockTime: resimulateResponse.blockTime,\n      }).catch((error) => {\n        log('Error during re-simulation', error);\n        throw error;\n      });\n    }\n\n    return transactionMeta;\n  }\n\n  async #updateFirstTimeInteraction(\n    transactionMeta: TransactionMeta,\n    {\n      traceContext,\n    }: {\n      traceContext?: TraceContext;\n    } = {},\n  ) {\n    if (!this.#isFirstTimeInteractionEnabled()) {\n      return;\n    }\n\n    const {\n      chainId,\n      id: transactionId,\n      txParams: { to, from },\n    } = transactionMeta;\n\n    const request: GetAccountAddressRelationshipRequest = {\n      chainId: hexToNumber(chainId),\n      to: to as string,\n      from,\n    };\n\n    validateParamTo(to);\n\n    const existingTransaction = this.state.transactions.find(\n      (tx) =>\n        tx.chainId === chainId &&\n        tx.txParams.from === from &&\n        tx.txParams.to === to &&\n        tx.id !== transactionId,\n    );\n\n    // Check if there is an existing transaction with the same from, to, and chainId\n    // else we continue to check the account address relationship from API\n    if (existingTransaction) {\n      return;\n    }\n\n    try {\n      const { count } = await this.#trace(\n        { name: 'Account Address Relationship', parentContext: traceContext },\n        () => getAccountAddressRelationship(request),\n      );\n\n      const isFirstTimeInteraction =\n        count === undefined ? undefined : count === 0;\n\n      const finalTransactionMeta = this.getTransaction(transactionId);\n\n      /* istanbul ignore if */\n      if (!finalTransactionMeta) {\n        log(\n          'Cannot update first time interaction as transaction not found',\n          transactionId,\n        );\n        return;\n      }\n\n      this.#updateTransactionInternal(\n        {\n          transactionId,\n          note: 'TransactionController#updateFirstInteraction - Update first time interaction',\n        },\n        (txMeta) => {\n          txMeta.isFirstTimeInteraction = isFirstTimeInteraction;\n        },\n      );\n\n      log('Updated first time interaction', transactionId, {\n        isFirstTimeInteraction,\n      });\n    } catch (error) {\n      log(\n        'Error fetching account address relationship, skipping first time interaction update',\n        error,\n      );\n    }\n  }\n\n  async #updateSimulationData(\n    transactionMeta: TransactionMeta,\n    {\n      blockTime,\n      traceContext,\n    }: {\n      blockTime?: number;\n      traceContext?: TraceContext;\n    } = {},\n  ) {\n    const {\n      id: transactionId,\n      chainId,\n      txParams,\n      simulationData: prevSimulationData,\n    } = transactionMeta;\n\n    const { from, to, value, data } = txParams;\n\n    let simulationData: SimulationData = {\n      error: {\n        code: SimulationErrorCode.Disabled,\n        message: 'Simulation disabled',\n      },\n      tokenBalanceChanges: [],\n    };\n\n    if (this.#isSimulationEnabled()) {\n      simulationData = await this.#trace(\n        { name: 'Simulate', parentContext: traceContext },\n        () =>\n          getSimulationData(\n            {\n              chainId,\n              from: from as Hex,\n              to: to as Hex,\n              value: value as Hex,\n              data: data as Hex,\n            },\n            {\n              blockTime,\n            },\n          ),\n      );\n\n      if (\n        blockTime &&\n        prevSimulationData &&\n        hasSimulationDataChanged(prevSimulationData, simulationData)\n      ) {\n        simulationData = {\n          ...simulationData,\n          isUpdatedAfterSecurityCheck: true,\n        };\n      }\n    }\n\n    const finalTransactionMeta = this.getTransaction(transactionId);\n\n    /* istanbul ignore if */\n    if (!finalTransactionMeta) {\n      log(\n        'Cannot update simulation data as transaction not found',\n        transactionId,\n        simulationData,\n      );\n\n      return;\n    }\n\n    this.#updateTransactionInternal(\n      {\n        transactionId,\n        note: 'TransactionController#updateSimulationData - Update simulation data',\n        skipResimulateCheck: Boolean(blockTime),\n      },\n      (txMeta) => {\n        txMeta.simulationData = simulationData;\n      },\n    );\n\n    log('Updated simulation data', transactionId, simulationData);\n  }\n\n  #onGasFeePollerTransactionUpdate({\n    transactionId,\n    gasFeeEstimates,\n    gasFeeEstimatesLoaded,\n    layer1GasFee,\n  }: {\n    transactionId: string;\n    gasFeeEstimates?: GasFeeEstimates;\n    gasFeeEstimatesLoaded?: boolean;\n    layer1GasFee?: Hex;\n  }) {\n    this.#updateTransactionInternal(\n      { transactionId, skipHistory: true },\n      (txMeta) => {\n        if (gasFeeEstimates) {\n          txMeta.gasFeeEstimates = gasFeeEstimates;\n        }\n\n        if (gasFeeEstimatesLoaded !== undefined) {\n          txMeta.gasFeeEstimatesLoaded = gasFeeEstimatesLoaded;\n        }\n\n        if (layer1GasFee) {\n          txMeta.layer1GasFee = layer1GasFee;\n        }\n      },\n    );\n  }\n\n  #getSelectedAccount() {\n    return this.messagingSystem.call('AccountsController:getSelectedAccount');\n  }\n\n  #updateSubmitHistory(transactionMeta: TransactionMeta, hash: string): void {\n    const { chainId, networkClientId, origin, rawTx, txParams } =\n      transactionMeta;\n\n    const { networkConfigurationsByChainId } = this.getNetworkState();\n    const networkConfiguration = networkConfigurationsByChainId[chainId as Hex];\n\n    const endpoint = networkConfiguration?.rpcEndpoints.find(\n      (currentEndpoint) => currentEndpoint.networkClientId === networkClientId,\n    );\n\n    const networkUrl = endpoint?.url;\n    const networkType = endpoint?.name ?? networkClientId;\n\n    const submitHistoryEntry: SubmitHistoryEntry = {\n      chainId,\n      hash,\n      networkType,\n      networkUrl,\n      origin,\n      rawTransaction: rawTx as string,\n      time: Date.now(),\n      transaction: txParams,\n    };\n\n    log('Updating submit history', submitHistoryEntry);\n\n    this.update((state) => {\n      const { submitHistory } = state;\n\n      if (submitHistory.length === SUBMIT_HISTORY_LIMIT) {\n        submitHistory.pop();\n      }\n\n      submitHistory.unshift(submitHistoryEntry);\n    });\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"TransactionController.mjs","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TypedTransaction } from '@ethereumjs/tx';\nimport type { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  query,\n  ApprovalType,\n  ORIGIN_METAMASK,\n  convertHexToDecimal,\n} from '@metamask/controller-utils';\nimport type { TraceCallback, TraceContext } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  FetchGasFeeEstimateOptions,\n  GasFeeState,\n} from '@metamask/gas-fee-controller';\nimport type {\n  BlockTracker,\n  NetworkClientId,\n  NetworkController,\n  NetworkControllerStateChangeEvent,\n  NetworkState,\n  Provider,\n  NetworkControllerFindNetworkClientIdByChainIdAction,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport { NetworkClientType } from '@metamask/network-controller';\nimport type {\n  NonceLock,\n  Transaction as NonceTrackerTransaction,\n} from '@metamask/nonce-tracker';\nimport { NonceTracker } from '@metamask/nonce-tracker';\nimport { errorCodes, rpcErrors, providerErrors } from '@metamask/rpc-errors';\nimport type { Hex } from '@metamask/utils';\nimport { add0x, hexToNumber } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\n// This package purposefully relies on Node's EventEmitter module.\n// eslint-disable-next-line import-x/no-nodejs-modules\nimport { EventEmitter } from 'events';\nimport { cloneDeep, mapValues, merge, pickBy, sortBy, isEqual } from 'lodash';\nimport { v1 as random } from 'uuid';\n\nimport {\n  getAccountAddressRelationship,\n  type GetAccountAddressRelationshipRequest,\n} from './api/accounts-api';\nimport { DefaultGasFeeFlow } from './gas-flows/DefaultGasFeeFlow';\nimport { LineaGasFeeFlow } from './gas-flows/LineaGasFeeFlow';\nimport { OptimismLayer1GasFeeFlow } from './gas-flows/OptimismLayer1GasFeeFlow';\nimport { ScrollLayer1GasFeeFlow } from './gas-flows/ScrollLayer1GasFeeFlow';\nimport { TestGasFeeFlow } from './gas-flows/TestGasFeeFlow';\nimport { AccountsApiRemoteTransactionSource } from './helpers/AccountsApiRemoteTransactionSource';\nimport { GasFeePoller } from './helpers/GasFeePoller';\nimport type { IncomingTransactionOptions } from './helpers/IncomingTransactionHelper';\nimport { IncomingTransactionHelper } from './helpers/IncomingTransactionHelper';\nimport { MethodDataHelper } from './helpers/MethodDataHelper';\nimport { MultichainTrackingHelper } from './helpers/MultichainTrackingHelper';\nimport { PendingTransactionTracker } from './helpers/PendingTransactionTracker';\nimport { projectLogger as log } from './logger';\nimport type {\n  DappSuggestedGasFees,\n  Layer1GasFeeFlow,\n  SavedGasFees,\n  SecurityProviderRequest,\n  SendFlowHistoryEntry,\n  TransactionParams,\n  TransactionMeta,\n  TransactionReceipt,\n  WalletDevice,\n  SecurityAlertResponse,\n  GasFeeFlow,\n  SimulationData,\n  GasFeeEstimates,\n  GasFeeFlowResponse,\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n  SubmitHistoryEntry,\n} from './types';\nimport {\n  TransactionEnvelopeType,\n  TransactionType,\n  TransactionStatus,\n  SimulationErrorCode,\n} from './types';\nimport type { KeyringControllerSignAuthorization } from './utils/eip7702';\nimport { signAuthorizationList } from './utils/eip7702';\nimport { validateConfirmedExternalTransaction } from './utils/external-transactions';\nimport { addGasBuffer, estimateGas, updateGas } from './utils/gas';\nimport { updateGasFees } from './utils/gas-fees';\nimport { getGasFeeFlow } from './utils/gas-flow';\nimport {\n  addInitialHistorySnapshot,\n  updateTransactionHistory,\n} from './utils/history';\nimport {\n  getTransactionLayer1GasFee,\n  updateTransactionLayer1GasFee,\n} from './utils/layer1-gas-fee-flow';\nimport {\n  getAndFormatTransactionsForNonceTracker,\n  getNextNonce,\n} from './utils/nonce';\nimport { prepareTransaction, serializeTransaction } from './utils/prepare';\nimport { getTransactionParamsWithIncreasedGasFee } from './utils/retry';\nimport { getSimulationData } from './utils/simulation';\nimport {\n  updatePostTransactionBalance,\n  updateSwapsTransaction,\n} from './utils/swaps';\nimport { determineTransactionType } from './utils/transaction-type';\nimport {\n  normalizeTransactionParams,\n  isEIP1559Transaction,\n  validateGasValues,\n  validateIfTransactionUnapproved,\n  normalizeTxError,\n  normalizeGasFeeValues,\n} from './utils/utils';\nimport {\n  validateParamTo,\n  validateTransactionOrigin,\n  validateTxParams,\n} from './utils/validation';\n\n/**\n * Metadata for the TransactionController state, describing how to \"anonymize\"\n * the state and which parts should be persisted.\n */\nconst metadata = {\n  transactions: {\n    persist: true,\n    anonymous: false,\n  },\n  methodData: {\n    persist: true,\n    anonymous: false,\n  },\n  lastFetchedBlockNumbers: {\n    persist: true,\n    anonymous: false,\n  },\n  submitHistory: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\nconst SUBMIT_HISTORY_LIMIT = 100;\n\n/**\n * Object with new transaction's meta and a promise resolving to the\n * transaction hash if successful.\n *\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\n/**\n * Method data registry object\n *\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\nexport type MethodData = {\n  registryMethod: string;\n  parsedRegistryMethod:\n    | {\n        name: string;\n        args: { type: string }[];\n      }\n    | {\n        // We're using `any` instead of `undefined` for compatibility with `Json`\n        // TODO: Correct this type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        name?: any;\n        // We're using `any` instead of `undefined` for compatibility with `Json`\n        // TODO: Correct this type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        args?: any;\n      };\n};\n\n/**\n * Transaction controller state\n *\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n * @property lastFetchedBlockNumbers - Cache to optimise incoming transaction queries\n */\nexport type TransactionControllerState = {\n  transactions: TransactionMeta[];\n  methodData: Record<string, MethodData>;\n  lastFetchedBlockNumbers: { [key: string]: number | string };\n  submitHistory: SubmitHistoryEntry[];\n};\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.1;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * Represents the `TransactionController:getState` action.\n */\nexport type TransactionControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TransactionControllerState\n>;\n\n/**\n * The internal actions available to the TransactionController.\n */\nexport type TransactionControllerActions = TransactionControllerGetStateAction;\n\n/**\n * Configuration options for the PendingTransactionTracker\n *\n * @property isResubmitEnabled - Whether transaction publishing is automatically retried.\n */\nexport type PendingTransactionOptions = {\n  isResubmitEnabled?: () => boolean;\n};\n\n/**\n * TransactionController constructor options.\n *\n * @property disableHistory - Whether to disable storing history in transaction metadata.\n * @property disableSendFlowHistory - Explicitly disable transaction metadata history.\n * @property disableSwaps - Whether to disable additional processing on swaps transactions.\n * @property getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n * @property getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n * @property getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.\n * @property getGasFeeEstimates - Callback to retrieve gas fee estimates.\n * @property getNetworkClientRegistry - Gets the network client registry.\n * @property getNetworkState - Gets the state of the network controller.\n * @property getPermittedAccounts - Get accounts that a given origin has permissions for.\n * @property getSavedGasFees - Gets the saved gas fee config.\n * @property getSelectedAddress - Gets the address of the currently selected account.\n * @property incomingTransactions - Configuration options for incoming transaction support.\n * @property isSimulationEnabled - Whether new transactions will be automatically simulated.\n * @property messenger - The controller messenger.\n * @property pendingTransactions - Configuration options for pending transaction support.\n * @property securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.\n * @property sign - Function used to sign transactions.\n * @property state - Initial state to set on this controller.\n * @property transactionHistoryLimit - Transaction history limit.\n * @property hooks - The controller hooks.\n * @property hooks.afterSign - Additional logic to execute after signing a transaction. Return false to not change the status to signed.\n * @property hooks.beforeApproveOnInit - Additional logic to execute before starting an approval flow for a transaction during initialization. Return false to skip the transaction.\n * @property hooks.beforeCheckPendingTransaction - Additional logic to execute before checking pending transactions. Return false to prevent the broadcast of the transaction.\n * @property hooks.beforePublish - Additional logic to execute before publishing a transaction. Return false to prevent the broadcast of the transaction.\n * @property hooks.getAdditionalSignArguments - Returns additional arguments required to sign a transaction.\n * @property hooks.publish - Alternate logic to publish a transaction.\n */\nexport type TransactionControllerOptions = {\n  disableHistory: boolean;\n  disableSendFlowHistory: boolean;\n  disableSwaps: boolean;\n  getCurrentAccountEIP1559Compatibility?: () => Promise<boolean>;\n  getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n  getExternalPendingTransactions?: (\n    address: string,\n    chainId?: string,\n  ) => NonceTrackerTransaction[];\n  getGasFeeEstimates?: (\n    options: FetchGasFeeEstimateOptions,\n  ) => Promise<GasFeeState>;\n  getNetworkClientRegistry: NetworkController['getNetworkClientRegistry'];\n  getNetworkState: () => NetworkState;\n  getPermittedAccounts?: (origin?: string) => Promise<string[]>;\n  getSavedGasFees?: (chainId: Hex) => SavedGasFees | undefined;\n  incomingTransactions?: IncomingTransactionOptions & {\n    /** API keys to be used for Etherscan requests to prevent rate limiting. */\n    etherscanApiKeysByChainId?: Record<Hex, string>;\n  };\n  isFirstTimeInteractionEnabled?: () => boolean;\n  isSimulationEnabled?: () => boolean;\n  messenger: TransactionControllerMessenger;\n  pendingTransactions?: PendingTransactionOptions;\n  securityProviderRequest?: SecurityProviderRequest;\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n    transactionMeta?: TransactionMeta,\n  ) => Promise<TypedTransaction>;\n  state?: Partial<TransactionControllerState>;\n  testGasFeeFlows?: boolean;\n  trace?: TraceCallback;\n  transactionHistoryLimit: number;\n  hooks: {\n    afterSign?: (\n      transactionMeta: TransactionMeta,\n      signedTx: TypedTransaction,\n    ) => boolean;\n    beforeCheckPendingTransaction?: (\n      transactionMeta: TransactionMeta,\n    ) => boolean;\n    beforePublish?: (transactionMeta: TransactionMeta) => boolean;\n    getAdditionalSignArguments?: (\n      transactionMeta: TransactionMeta,\n    ) => (TransactionMeta | undefined)[];\n    publish?: (\n      transactionMeta: TransactionMeta,\n    ) => Promise<{ transactionHash: string }>;\n  };\n};\n\n/**\n * The name of the {@link TransactionController}.\n */\nconst controllerName = 'TransactionController';\n\n/**\n * The external actions available to the {@link TransactionController}.\n */\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AddApprovalRequest\n  | KeyringControllerSignAuthorization\n  | NetworkControllerFindNetworkClientIdByChainIdAction\n  | NetworkControllerGetNetworkClientByIdAction;\n\n/**\n * The external events available to the {@link TransactionController}.\n */\nexport type AllowedEvents = NetworkControllerStateChangeEvent;\n\n/**\n * Represents the `TransactionController:stateChange` event.\n */\nexport type TransactionControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof controllerName,\n  TransactionControllerState\n>;\n\n/**\n * Represents the `TransactionController:incomingTransactionsReceived` event.\n */\nexport type TransactionControllerIncomingTransactionsReceivedEvent = {\n  type: `${typeof controllerName}:incomingTransactionsReceived`;\n  payload: [incomingTransactions: TransactionMeta[]];\n};\n\n/**\n * Represents the `TransactionController:postTransactionBalanceUpdated` event.\n */\nexport type TransactionControllerPostTransactionBalanceUpdatedEvent = {\n  type: `${typeof controllerName}:postTransactionBalanceUpdated`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      approvalTransactionMeta?: TransactionMeta;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:speedUpTransactionAdded` event.\n */\nexport type TransactionControllerSpeedupTransactionAddedEvent = {\n  type: `${typeof controllerName}:speedupTransactionAdded`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionApproved` event.\n */\nexport type TransactionControllerTransactionApprovedEvent = {\n  type: `${typeof controllerName}:transactionApproved`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      actionId?: string;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionConfirmed` event.\n */\nexport type TransactionControllerTransactionConfirmedEvent = {\n  type: `${typeof controllerName}:transactionConfirmed`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionDropped` event.\n */\nexport type TransactionControllerTransactionDroppedEvent = {\n  type: `${typeof controllerName}:transactionDropped`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionFailed` event.\n */\nexport type TransactionControllerTransactionFailedEvent = {\n  type: `${typeof controllerName}:transactionFailed`;\n  payload: [\n    {\n      actionId?: string;\n      error: string;\n      transactionMeta: TransactionMeta;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionFinished` event.\n */\nexport type TransactionControllerTransactionFinishedEvent = {\n  type: `${typeof controllerName}:transactionFinished`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionNewSwapApproval` event.\n */\nexport type TransactionControllerTransactionNewSwapApprovalEvent = {\n  type: `${typeof controllerName}:transactionNewSwapApproval`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionNewSwap` event.\n */\nexport type TransactionControllerTransactionNewSwapEvent = {\n  type: `${typeof controllerName}:transactionNewSwap`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionNewSwapApproval` event.\n */\nexport type TransactionControllerTransactionNewSwapAndSendEvent = {\n  type: `${typeof controllerName}:transactionNewSwapAndSend`;\n  payload: [{ transactionMeta: TransactionMeta }];\n};\n\n/**\n * Represents the `TransactionController:transactionPublishingSkipped` event.\n */\nexport type TransactionControllerTransactionPublishingSkipped = {\n  type: `${typeof controllerName}:transactionPublishingSkipped`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * Represents the `TransactionController:transactionRejected` event.\n */\nexport type TransactionControllerTransactionRejectedEvent = {\n  type: `${typeof controllerName}:transactionRejected`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      actionId?: string;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionStatusUpdated` event.\n */\nexport type TransactionControllerTransactionStatusUpdatedEvent = {\n  type: `${typeof controllerName}:transactionStatusUpdated`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:transactionSubmitted` event.\n */\nexport type TransactionControllerTransactionSubmittedEvent = {\n  type: `${typeof controllerName}:transactionSubmitted`;\n  payload: [\n    {\n      transactionMeta: TransactionMeta;\n      actionId?: string;\n    },\n  ];\n};\n\n/**\n * Represents the `TransactionController:unapprovedTransactionAdded` event.\n */\nexport type TransactionControllerUnapprovedTransactionAddedEvent = {\n  type: `${typeof controllerName}:unapprovedTransactionAdded`;\n  payload: [transactionMeta: TransactionMeta];\n};\n\n/**\n * The internal events available to the {@link TransactionController}.\n */\nexport type TransactionControllerEvents =\n  | TransactionControllerIncomingTransactionsReceivedEvent\n  | TransactionControllerPostTransactionBalanceUpdatedEvent\n  | TransactionControllerSpeedupTransactionAddedEvent\n  | TransactionControllerStateChangeEvent\n  | TransactionControllerTransactionApprovedEvent\n  | TransactionControllerTransactionConfirmedEvent\n  | TransactionControllerTransactionDroppedEvent\n  | TransactionControllerTransactionFailedEvent\n  | TransactionControllerTransactionFinishedEvent\n  | TransactionControllerTransactionNewSwapApprovalEvent\n  | TransactionControllerTransactionNewSwapEvent\n  | TransactionControllerTransactionNewSwapAndSendEvent\n  | TransactionControllerTransactionPublishingSkipped\n  | TransactionControllerTransactionRejectedEvent\n  | TransactionControllerTransactionStatusUpdatedEvent\n  | TransactionControllerTransactionSubmittedEvent\n  | TransactionControllerUnapprovedTransactionAddedEvent;\n\n/**\n * The messenger of the {@link TransactionController}.\n */\nexport type TransactionControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  TransactionControllerActions | AllowedActions,\n  TransactionControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Possible states of the approve transaction step.\n */\nexport enum ApprovalState {\n  Approved = 'approved',\n  NotApproved = 'not-approved',\n  SkippedViaBeforePublishHook = 'skipped-via-before-publish-hook',\n}\n\n/**\n * Get the default TransactionsController state.\n *\n * @returns The default TransactionsController state.\n */\nfunction getDefaultTransactionControllerState(): TransactionControllerState {\n  return {\n    methodData: {},\n    transactions: [],\n    lastFetchedBlockNumbers: {},\n    submitHistory: [],\n  };\n}\n\n/**\n * Controller responsible for submitting and managing transactions.\n */\nexport class TransactionController extends BaseController<\n  typeof controllerName,\n  TransactionControllerState,\n  TransactionControllerMessenger\n> {\n  readonly #internalEvents = new EventEmitter();\n\n  private readonly isHistoryDisabled: boolean;\n\n  private readonly isSwapsDisabled: boolean;\n\n  private readonly isSendFlowHistoryDisabled: boolean;\n\n  private readonly approvingTransactionIds: Set<string> = new Set();\n\n  readonly #methodDataHelper: MethodDataHelper;\n\n  private readonly mutex = new Mutex();\n\n  private readonly gasFeeFlows: GasFeeFlow[];\n\n  private readonly getSavedGasFees: (chainId: Hex) => SavedGasFees | undefined;\n\n  private readonly getNetworkState: () => NetworkState;\n\n  private readonly getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;\n\n  private readonly getCurrentNetworkEIP1559Compatibility: (\n    networkClientId?: NetworkClientId,\n  ) => Promise<boolean>;\n\n  private readonly getGasFeeEstimates: (\n    options: FetchGasFeeEstimateOptions,\n  ) => Promise<GasFeeState>;\n\n  private readonly getPermittedAccounts?: (\n    origin?: string,\n  ) => Promise<string[]>;\n\n  private readonly getExternalPendingTransactions: (\n    address: string,\n    chainId?: string,\n  ) => NonceTrackerTransaction[];\n\n  readonly #incomingTransactionChainIds: Set<Hex> = new Set();\n\n  readonly #incomingTransactionHelper: IncomingTransactionHelper;\n\n  private readonly layer1GasFeeFlows: Layer1GasFeeFlow[];\n\n  readonly #incomingTransactionOptions: IncomingTransactionOptions & {\n    etherscanApiKeysByChainId?: Record<Hex, string>;\n  };\n\n  private readonly securityProviderRequest?: SecurityProviderRequest;\n\n  readonly #pendingTransactionOptions: PendingTransactionOptions;\n\n  private readonly signAbortCallbacks: Map<string, () => void> = new Map();\n\n  readonly #trace: TraceCallback;\n\n  readonly #transactionHistoryLimit: number;\n\n  readonly #isFirstTimeInteractionEnabled: () => boolean;\n\n  readonly #isSimulationEnabled: () => boolean;\n\n  readonly #testGasFeeFlows: boolean;\n\n  private readonly afterSign: (\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ) => boolean;\n\n  private readonly beforeCheckPendingTransaction: (\n    transactionMeta: TransactionMeta,\n  ) => boolean;\n\n  private readonly beforePublish: (transactionMeta: TransactionMeta) => boolean;\n\n  private readonly publish: (\n    transactionMeta: TransactionMeta,\n    rawTx: string,\n  ) => Promise<{ transactionHash?: string }>;\n\n  private readonly getAdditionalSignArguments: (\n    transactionMeta: TransactionMeta,\n  ) => (TransactionMeta | undefined)[];\n\n  private failTransaction(\n    transactionMeta: TransactionMeta,\n    error: Error,\n    actionId?: string,\n  ) {\n    let newTransactionMeta: TransactionMeta;\n\n    try {\n      newTransactionMeta = this.#updateTransactionInternal(\n        {\n          transactionId: transactionMeta.id,\n          note: 'TransactionController#failTransaction - Add error message and set status to failed',\n          skipValidation: true,\n        },\n        (draftTransactionMeta) => {\n          draftTransactionMeta.status = TransactionStatus.failed;\n\n          (\n            draftTransactionMeta as TransactionMeta & {\n              status: TransactionStatus.failed;\n            }\n          ).error = normalizeTxError(error);\n        },\n      );\n    } catch (err: unknown) {\n      log('Failed to mark transaction as failed', err);\n\n      newTransactionMeta = {\n        ...transactionMeta,\n        status: TransactionStatus.failed,\n        error: normalizeTxError(error),\n      };\n    }\n\n    this.messagingSystem.publish(`${controllerName}:transactionFailed`, {\n      actionId,\n      error: error.message,\n      transactionMeta: newTransactionMeta,\n    });\n\n    this.onTransactionStatusChange(newTransactionMeta);\n\n    this.messagingSystem.publish(\n      `${controllerName}:transactionFinished`,\n      newTransactionMeta,\n    );\n\n    this.#internalEvents.emit(\n      `${transactionMeta.id}:finished`,\n      newTransactionMeta,\n    );\n  }\n\n  readonly #multichainTrackingHelper: MultichainTrackingHelper;\n\n  /**\n   * Method used to sign transactions\n   */\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n    transactionMeta?: TransactionMeta,\n  ) => Promise<TypedTransaction>;\n\n  /**\n   * Constructs a TransactionController.\n   *\n   * @param options - The controller options.\n   * @param options.disableHistory - Whether to disable storing history in transaction metadata.\n   * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.\n   * @param options.disableSwaps - Whether to disable additional processing on swaps transactions.\n   * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n   * @param options.getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.\n   * @param options.getGasFeeEstimates - Callback to retrieve gas fee estimates.\n   * @param options.getNetworkClientRegistry - Gets the network client registry.\n   * @param options.getNetworkState - Gets the state of the network controller.\n   * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.\n   * @param options.getSavedGasFees - Gets the saved gas fee config.\n   * @param options.incomingTransactions - Configuration options for incoming transaction support.\n   * @param options.isFirstTimeInteractionEnabled - Whether first time interaction checks are enabled.\n   * @param options.isSimulationEnabled - Whether new transactions will be automatically simulated.\n   * @param options.messenger - The controller messenger.\n   * @param options.pendingTransactions - Configuration options for pending transaction support.\n   * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.\n   * @param options.sign - Function used to sign transactions.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.testGasFeeFlows - Whether to use the test gas fee flow.\n   * @param options.trace - Callback to generate trace information.\n   * @param options.transactionHistoryLimit - Transaction history limit.\n   * @param options.hooks - The controller hooks.\n   */\n  constructor({\n    disableHistory,\n    disableSendFlowHistory,\n    disableSwaps,\n    getCurrentAccountEIP1559Compatibility,\n    getCurrentNetworkEIP1559Compatibility,\n    getExternalPendingTransactions,\n    getGasFeeEstimates,\n    getNetworkClientRegistry,\n    getNetworkState,\n    getPermittedAccounts,\n    getSavedGasFees,\n    incomingTransactions = {},\n    isFirstTimeInteractionEnabled,\n    isSimulationEnabled,\n    messenger,\n    pendingTransactions = {},\n    securityProviderRequest,\n    sign,\n    state,\n    testGasFeeFlows,\n    trace,\n    transactionHistoryLimit = 40,\n    hooks,\n  }: TransactionControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTransactionControllerState(),\n        ...state,\n      },\n    });\n\n    this.messagingSystem = messenger;\n    this.getNetworkState = getNetworkState;\n    this.isSendFlowHistoryDisabled = disableSendFlowHistory ?? false;\n    this.isHistoryDisabled = disableHistory ?? false;\n    this.isSwapsDisabled = disableSwaps ?? false;\n    this.#isFirstTimeInteractionEnabled =\n      isFirstTimeInteractionEnabled ?? (() => true);\n    this.#isSimulationEnabled = isSimulationEnabled ?? (() => false);\n    this.getSavedGasFees = getSavedGasFees ?? ((_chainId) => undefined);\n    this.getCurrentAccountEIP1559Compatibility =\n      getCurrentAccountEIP1559Compatibility ?? (() => Promise.resolve(true));\n    this.getCurrentNetworkEIP1559Compatibility =\n      getCurrentNetworkEIP1559Compatibility;\n    this.getGasFeeEstimates =\n      getGasFeeEstimates || (() => Promise.resolve({} as GasFeeState));\n    this.getPermittedAccounts = getPermittedAccounts;\n    this.getExternalPendingTransactions =\n      getExternalPendingTransactions ?? (() => []);\n    this.securityProviderRequest = securityProviderRequest;\n    this.#incomingTransactionOptions = incomingTransactions;\n    this.#pendingTransactionOptions = pendingTransactions;\n    this.#transactionHistoryLimit = transactionHistoryLimit;\n    this.sign = sign;\n    this.#testGasFeeFlows = testGasFeeFlows === true;\n    this.#trace = trace ?? (((_request, fn) => fn?.()) as TraceCallback);\n\n    this.afterSign = hooks?.afterSign ?? (() => true);\n    this.beforeCheckPendingTransaction =\n      hooks?.beforeCheckPendingTransaction ??\n      /* istanbul ignore next */\n      (() => true);\n    this.beforePublish = hooks?.beforePublish ?? (() => true);\n    this.getAdditionalSignArguments =\n      hooks?.getAdditionalSignArguments ?? (() => []);\n    this.publish =\n      hooks?.publish ?? (() => Promise.resolve({ transactionHash: undefined }));\n\n    const findNetworkClientIdByChainId = (chainId: Hex) => {\n      return this.messagingSystem.call(\n        `NetworkController:findNetworkClientIdByChainId`,\n        chainId,\n      );\n    };\n\n    this.#multichainTrackingHelper = new MultichainTrackingHelper({\n      findNetworkClientIdByChainId,\n      getNetworkClientById: ((networkClientId: NetworkClientId) => {\n        return this.messagingSystem.call(\n          `NetworkController:getNetworkClientById`,\n          networkClientId,\n        );\n      }) as NetworkController['getNetworkClientById'],\n      getNetworkClientRegistry,\n      removePendingTransactionTrackerListeners:\n        this.#removePendingTransactionTrackerListeners.bind(this),\n      createNonceTracker: this.#createNonceTracker.bind(this),\n      createPendingTransactionTracker:\n        this.#createPendingTransactionTracker.bind(this),\n      onNetworkStateChange: (listener) => {\n        this.messagingSystem.subscribe(\n          'NetworkController:stateChange',\n          listener,\n        );\n      },\n    });\n    this.#multichainTrackingHelper.initialize();\n\n    this.gasFeeFlows = this.#getGasFeeFlows();\n    this.layer1GasFeeFlows = this.#getLayer1GasFeeFlows();\n\n    const gasFeePoller = new GasFeePoller({\n      findNetworkClientIdByChainId,\n      gasFeeFlows: this.gasFeeFlows,\n      getGasFeeControllerEstimates: this.getGasFeeEstimates,\n      getProvider: (networkClientId) => this.#getProvider({ networkClientId }),\n      getTransactions: () => this.state.transactions,\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      onStateChange: (listener) => {\n        this.messagingSystem.subscribe(\n          'TransactionController:stateChange',\n          listener,\n        );\n      },\n    });\n\n    gasFeePoller.hub.on(\n      'transaction-updated',\n      this.#onGasFeePollerTransactionUpdate.bind(this),\n    );\n\n    this.#methodDataHelper = new MethodDataHelper({\n      getProvider: (networkClientId) => this.#getProvider({ networkClientId }),\n      getState: () => this.state.methodData,\n    });\n\n    this.#methodDataHelper.hub.on(\n      'update',\n      ({ fourBytePrefix, methodData }) => {\n        this.update((_state) => {\n          _state.methodData[fourBytePrefix] = methodData;\n        });\n      },\n    );\n\n    const updateCache = (fn: (cache: Record<string, unknown>) => void) => {\n      this.update((_state) => {\n        fn(_state.lastFetchedBlockNumbers);\n      });\n    };\n\n    this.#incomingTransactionHelper = new IncomingTransactionHelper({\n      getCache: () => this.state.lastFetchedBlockNumbers,\n      getChainIds: () => [...this.#incomingTransactionChainIds],\n      getCurrentAccount: () => this.#getSelectedAccount(),\n      getLocalTransactions: () => this.state.transactions,\n      includeTokenTransfers:\n        this.#incomingTransactionOptions.includeTokenTransfers,\n      isEnabled: this.#incomingTransactionOptions.isEnabled,\n      queryEntireHistory: this.#incomingTransactionOptions.queryEntireHistory,\n      remoteTransactionSource: new AccountsApiRemoteTransactionSource(),\n      trimTransactions: this.trimTransactionsForState.bind(this),\n      updateCache,\n      updateTransactions: this.#incomingTransactionOptions.updateTransactions,\n    });\n\n    this.#addIncomingTransactionHelperListeners(\n      this.#incomingTransactionHelper,\n    );\n\n    // when transactionsController state changes\n    // check for pending transactions and start polling if there are any\n    this.messagingSystem.subscribe(\n      'TransactionController:stateChange',\n      this.#checkForPendingTransactionAndStartPolling,\n    );\n\n    this.onBootCleanup();\n    this.#checkForPendingTransactionAndStartPolling();\n  }\n\n  /**\n   * Stops polling and removes listeners to prepare the controller for garbage collection.\n   */\n  destroy() {\n    this.#stopAllTracking();\n  }\n\n  /**\n   * Handle new method data request.\n   *\n   * @param fourBytePrefix - The method prefix.\n   * @param networkClientId - The ID of the network client used to fetch the method data.\n   * @returns The method data object corresponding to the given signature prefix.\n   */\n  async handleMethodData(\n    fourBytePrefix: string,\n    networkClientId: NetworkClientId,\n  ): Promise<MethodData> {\n    return this.#methodDataHelper.lookup(fourBytePrefix, networkClientId);\n  }\n\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param txParams - Standard parameters for an Ethereum transaction.\n   * @param options - Additional options to control how the transaction is added.\n   * @param options.actionId - Unique ID to prevent duplicate requests.\n   * @param options.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.\n   * @param options.method - RPC method that requested the transaction.\n   * @param options.origin - The origin of the transaction request, such as a dApp hostname.\n   * @param options.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.\n   * @param options.securityAlertResponse - Response from security validator.\n   * @param options.sendFlowHistory - The sendFlowHistory entries to add.\n   * @param options.type - Type of transaction to add, such as 'cancel' or 'swap'.\n   * @param options.swaps - Options for swaps transactions.\n   * @param options.swaps.hasApproveTx - Whether the transaction has an approval transaction.\n   * @param options.swaps.meta - Metadata for swap transaction.\n   * @param options.networkClientId - The id of the network client for this transaction.\n   * @param options.traceContext - The parent context for any new traces.\n   * @returns Object containing a promise resolving to the transaction hash if approved.\n   */\n  async addTransaction(\n    txParams: TransactionParams,\n    options: {\n      actionId?: string;\n      deviceConfirmedOn?: WalletDevice;\n      method?: string;\n      networkClientId: NetworkClientId;\n      origin?: string;\n      requireApproval?: boolean | undefined;\n      securityAlertResponse?: SecurityAlertResponse;\n      sendFlowHistory?: SendFlowHistoryEntry[];\n      swaps?: {\n        hasApproveTx?: boolean;\n        meta?: Partial<TransactionMeta>;\n      };\n      traceContext?: unknown;\n      type?: TransactionType;\n    },\n  ): Promise<Result> {\n    log('Adding transaction', txParams, options);\n\n    const {\n      actionId,\n      deviceConfirmedOn,\n      method,\n      networkClientId,\n      origin,\n      requireApproval,\n      securityAlertResponse,\n      sendFlowHistory,\n      swaps = {},\n      traceContext,\n      type,\n    } = options;\n\n    txParams = normalizeTransactionParams(txParams);\n\n    if (!this.#multichainTrackingHelper.has(networkClientId)) {\n      throw new Error(\n        `Network client not found - ${networkClientId as string}`,\n      );\n    }\n\n    const permittedAddresses =\n      origin === undefined\n        ? undefined\n        : await this.getPermittedAccounts?.(origin);\n\n    const selectedAddress = this.#getSelectedAccount().address;\n\n    await validateTransactionOrigin({\n      from: txParams.from,\n      origin,\n      permittedAddresses,\n      selectedAddress,\n      txParams,\n    });\n\n    const isEIP1559Compatible =\n      await this.getEIP1559Compatibility(networkClientId);\n\n    validateTxParams(txParams, isEIP1559Compatible);\n\n    const dappSuggestedGasFees = this.generateDappSuggestedGasFees(\n      txParams,\n      origin,\n    );\n\n    const chainId = this.#getChainId(networkClientId);\n\n    const ethQuery = this.#getEthQuery({\n      networkClientId,\n    });\n\n    const transactionType =\n      type ?? (await determineTransactionType(txParams, ethQuery)).type;\n\n    const existingTransactionMeta = this.getTransactionWithActionId(actionId);\n\n    // If a request to add a transaction with the same actionId is submitted again, a new transaction will not be created for it.\n    let addedTransactionMeta = existingTransactionMeta\n      ? cloneDeep(existingTransactionMeta)\n      : {\n          // Add actionId to txMeta to check if same actionId is seen again\n          actionId,\n          chainId,\n          dappSuggestedGasFees,\n          deviceConfirmedOn,\n          id: random(),\n          isFirstTimeInteraction: undefined,\n          networkClientId,\n          origin,\n          securityAlertResponse,\n          status: TransactionStatus.unapproved as const,\n          time: Date.now(),\n          txParams,\n          type: transactionType,\n          userEditedGasLimit: false,\n          verifiedOnBlockchain: false,\n        };\n\n    await this.#trace(\n      { name: 'Estimate Gas Properties', parentContext: traceContext },\n      (context) =>\n        this.updateGasProperties(addedTransactionMeta, {\n          traceContext: context,\n        }),\n    );\n\n    // Checks if a transaction already exists with a given actionId\n    if (!existingTransactionMeta) {\n      // Set security provider response\n      if (method && this.securityProviderRequest) {\n        const securityProviderResponse = await this.securityProviderRequest(\n          addedTransactionMeta,\n          method,\n        );\n        addedTransactionMeta.securityProviderResponse =\n          securityProviderResponse;\n      }\n\n      if (!this.isSendFlowHistoryDisabled) {\n        addedTransactionMeta.sendFlowHistory = sendFlowHistory ?? [];\n      }\n      // Initial history push\n      if (!this.isHistoryDisabled) {\n        addedTransactionMeta = addInitialHistorySnapshot(addedTransactionMeta);\n      }\n\n      addedTransactionMeta = updateSwapsTransaction(\n        addedTransactionMeta,\n        transactionType,\n        swaps,\n        {\n          isSwapsDisabled: this.isSwapsDisabled,\n          cancelTransaction: this.cancelTransaction.bind(this),\n          messenger: this.messagingSystem,\n        },\n      );\n\n      this.addMetadata(addedTransactionMeta);\n\n      if (requireApproval !== false) {\n        if (this.#isSimulationEnabled()) {\n          this.#updateSimulationData(addedTransactionMeta, {\n            traceContext,\n          }).catch((error) => {\n            log('Error while updating simulation data', error);\n            throw error;\n          });\n        }\n        this.#updateFirstTimeInteraction(addedTransactionMeta, {\n          traceContext,\n        }).catch((error) => {\n          log('Error while updating first interaction properties', error);\n        });\n      } else {\n        log(\n          'Skipping simulation & first interaction update as approval not required',\n        );\n      }\n\n      this.messagingSystem.publish(\n        `${controllerName}:unapprovedTransactionAdded`,\n        addedTransactionMeta,\n      );\n    }\n\n    return {\n      result: this.processApproval(addedTransactionMeta, {\n        isExisting: Boolean(existingTransactionMeta),\n        requireApproval,\n        actionId,\n        traceContext,\n      }),\n      transactionMeta: addedTransactionMeta,\n    };\n  }\n\n  startIncomingTransactionPolling(chainIds: Hex[]) {\n    chainIds.forEach((chainId) =>\n      this.#incomingTransactionChainIds.add(chainId),\n    );\n\n    this.#incomingTransactionHelper.start();\n  }\n\n  stopIncomingTransactionPolling(chainIds?: Hex[]) {\n    chainIds?.forEach((chainId) =>\n      this.#incomingTransactionChainIds.delete(chainId),\n    );\n\n    if (!chainIds) {\n      this.#incomingTransactionChainIds.clear();\n    }\n\n    if (this.#incomingTransactionChainIds.size === 0) {\n      this.#incomingTransactionHelper.stop();\n    }\n  }\n\n  async updateIncomingTransactions(chainIds: Hex[]) {\n    chainIds.forEach((chainId) =>\n      this.#incomingTransactionChainIds.add(chainId),\n    );\n\n    await this.#incomingTransactionHelper.update();\n  }\n\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param gasValues - The gas values to use for the cancellation transaction.\n   * @param options - The options for the cancellation transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests.\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async stopTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      estimatedBaseFee,\n      actionId,\n    }: { estimatedBaseFee?: string; actionId?: string } = {},\n  ) {\n    return await this.#retryTransaction({\n      actionId,\n      estimatedBaseFee,\n      gasValues,\n      label: 'cancel',\n      rate: CANCEL_RATE,\n      transactionId,\n      transactionType: TransactionType.cancel,\n      prepareTransactionParams: (txParams) => {\n        delete txParams.data;\n        txParams.to = txParams.from;\n        txParams.value = '0x0';\n      },\n      afterSubmit: (newTransactionMeta) => {\n        this.messagingSystem.publish(\n          `${controllerName}:transactionFinished`,\n          newTransactionMeta,\n        );\n\n        this.#internalEvents.emit(\n          `${newTransactionMeta.id}:finished`,\n          newTransactionMeta,\n        );\n      },\n    });\n  }\n\n  /**\n   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.\n   *\n   * @param transactionId - The ID of the transaction to speed up.\n   * @param gasValues - The gas values to use for the speed up transaction.\n   * @param options - The options for the speed up transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async speedUpTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      actionId,\n      estimatedBaseFee,\n    }: { actionId?: string; estimatedBaseFee?: string } = {},\n  ) {\n    return await this.#retryTransaction({\n      actionId,\n      estimatedBaseFee,\n      gasValues,\n      label: 'speed up',\n      rate: SPEED_UP_RATE,\n      transactionId,\n      transactionType: TransactionType.retry,\n      afterSubmit: (newTransactionMeta) => {\n        this.messagingSystem.publish(\n          `${controllerName}:speedupTransactionAdded`,\n          newTransactionMeta,\n        );\n      },\n    });\n  }\n\n  async #retryTransaction({\n    actionId,\n    afterSubmit,\n    estimatedBaseFee,\n    gasValues,\n    label,\n    prepareTransactionParams,\n    rate,\n    transactionId,\n    transactionType,\n  }: {\n    actionId?: string;\n    afterSubmit?: (transactionMeta: TransactionMeta) => void;\n    estimatedBaseFee?: string;\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values;\n    label: string;\n    prepareTransactionParams?: (txParams: TransactionParams) => void;\n    rate: number;\n    transactionId: string;\n    transactionType: TransactionType;\n  }) {\n    // If transaction is found for same action id, do not create a new transaction.\n    if (this.getTransactionWithActionId(actionId)) {\n      return;\n    }\n\n    if (gasValues) {\n      // Not good practice to reassign a parameter but temporarily avoiding a larger refactor.\n      gasValues = normalizeGasFeeValues(gasValues);\n      validateGasValues(gasValues);\n    }\n\n    log(`Creating ${label} transaction`, transactionId, gasValues);\n\n    const transactionMeta = this.getTransaction(transactionId);\n    /* istanbul ignore next */\n    if (!transactionMeta) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const newTxParams: TransactionParams =\n      getTransactionParamsWithIncreasedGasFee(\n        transactionMeta.txParams,\n        rate,\n        gasValues,\n      );\n\n    prepareTransactionParams?.(newTxParams);\n\n    const unsignedEthTx = prepareTransaction(\n      transactionMeta.chainId,\n      newTxParams,\n    );\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from,\n    );\n\n    const transactionMetaWithRsv = this.updateTransactionMetaRSV(\n      transactionMeta,\n      signedTx,\n    );\n\n    const rawTx = serializeTransaction(signedTx);\n    const newFee = newTxParams.maxFeePerGas ?? newTxParams.gasPrice;\n\n    const oldFee = newTxParams.maxFeePerGas\n      ? transactionMetaWithRsv.txParams.maxFeePerGas\n      : transactionMetaWithRsv.txParams.gasPrice;\n\n    log(`Submitting ${label} transaction`, {\n      oldFee,\n      newFee,\n      txParams: newTxParams,\n    });\n\n    const { networkClientId } = transactionMeta;\n    const ethQuery = this.#getEthQuery({ networkClientId });\n\n    const newTransactionMeta = {\n      ...transactionMetaWithRsv,\n      actionId,\n      estimatedBaseFee,\n      id: random(),\n      originalGasEstimate: transactionMeta.txParams.gas,\n      originalType: transactionMeta.type,\n      rawTx,\n      time: Date.now(),\n      txParams: newTxParams,\n      type: transactionType,\n    };\n\n    const hash = await this.publishTransactionForRetry(ethQuery, {\n      ...newTransactionMeta,\n      origin: label,\n    });\n\n    newTransactionMeta.hash = hash;\n\n    this.addMetadata(newTransactionMeta);\n\n    // speedUpTransaction has no approval request, so we assume the user has already approved the transaction\n    this.messagingSystem.publish(`${controllerName}:transactionApproved`, {\n      transactionMeta: newTransactionMeta,\n      actionId,\n    });\n\n    this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {\n      transactionMeta: newTransactionMeta,\n      actionId,\n    });\n\n    afterSubmit?.(newTransactionMeta);\n  }\n\n  /**\n   * Estimates required gas for a given transaction.\n   *\n   * @param transaction - The transaction to estimate gas for.\n   * @param networkClientId - The network client id to use for the estimate.\n   * @returns The gas and gas price.\n   */\n  async estimateGas(\n    transaction: TransactionParams,\n    networkClientId: NetworkClientId,\n  ) {\n    const ethQuery = this.#getEthQuery({\n      networkClientId,\n    });\n\n    const { estimatedGas, simulationFails } = await estimateGas(\n      transaction,\n      ethQuery,\n    );\n\n    return { gas: estimatedGas, simulationFails };\n  }\n\n  /**\n   * Estimates required gas for a given transaction and add additional gas buffer with the given multiplier.\n   *\n   * @param transaction - The transaction params to estimate gas for.\n   * @param multiplier - The multiplier to use for the gas buffer.\n   * @param networkClientId - The network client id to use for the estimate.\n   */\n  async estimateGasBuffered(\n    transaction: TransactionParams,\n    multiplier: number,\n    networkClientId: NetworkClientId,\n  ) {\n    const ethQuery = this.#getEthQuery({\n      networkClientId,\n    });\n\n    const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(\n      transaction,\n      ethQuery,\n    );\n\n    const gas = addGasBuffer(estimatedGas, blockGasLimit, multiplier);\n\n    return {\n      gas,\n      simulationFails,\n    };\n  }\n\n  /**\n   * Updates an existing transaction in state.\n   *\n   * @param transactionMeta - The new transaction to store in state.\n   * @param note - A note or update reason to include in the transaction history.\n   */\n  updateTransaction(transactionMeta: TransactionMeta, note: string) {\n    const { id: transactionId } = transactionMeta;\n\n    this.#updateTransactionInternal({ transactionId, note }, () => ({\n      ...transactionMeta,\n    }));\n  }\n\n  /**\n   * Update the security alert response for a transaction.\n   *\n   * @param transactionId - ID of the transaction.\n   * @param securityAlertResponse - The new security alert response for the transaction.\n   */\n  updateSecurityAlertResponse(\n    transactionId: string,\n    securityAlertResponse: SecurityAlertResponse,\n  ) {\n    if (!securityAlertResponse) {\n      throw new Error(\n        'updateSecurityAlertResponse: securityAlertResponse should not be null',\n      );\n    }\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update security alert response as no transaction metadata found`,\n      );\n    }\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      securityAlertResponse,\n    };\n    this.updateTransaction(\n      updatedTransactionMeta,\n      `${controllerName}:updatesecurityAlertResponse - securityAlertResponse updated`,\n    );\n  }\n\n  /**\n   * Remove transactions from state.\n   *\n   * @param options - The options bag.\n   * @param options.address - Remove transactions from this account only. Defaults to all accounts.\n   * @param options.chainId - Remove transactions for the specified chain only. Defaults to all chains.\n   */\n  wipeTransactions({\n    address,\n    chainId,\n  }: {\n    address?: string;\n    chainId?: string;\n  } = {}) {\n    if (!chainId && !address) {\n      this.update((state) => {\n        state.transactions = [];\n      });\n\n      return;\n    }\n\n    const newTransactions = this.state.transactions.filter(\n      ({ chainId: txChainId, txParams }) => {\n        const isMatchingNetwork = !chainId || chainId === txChainId;\n\n        if (!isMatchingNetwork) {\n          return true;\n        }\n\n        const isMatchingAddress =\n          !address || txParams.from?.toLowerCase() === address.toLowerCase();\n\n        return !isMatchingAddress;\n      },\n    );\n\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState(newTransactions);\n    });\n  }\n\n  /**\n   * Adds external provided transaction to state as confirmed transaction.\n   *\n   * @param transactionMeta - TransactionMeta to add transactions.\n   * @param transactionReceipt - TransactionReceipt of the external transaction.\n   * @param baseFeePerGas - Base fee per gas of the external transaction.\n   */\n  async confirmExternalTransaction(\n    transactionMeta: TransactionMeta,\n    transactionReceipt: TransactionReceipt,\n    baseFeePerGas: Hex,\n  ) {\n    // Run validation and add external transaction to state.\n    const newTransactionMeta = this.addExternalTransaction(transactionMeta);\n\n    try {\n      const transactionId = newTransactionMeta.id;\n\n      // Make sure status is confirmed and define gasUsed as in receipt.\n      const updatedTransactionMeta = {\n        ...newTransactionMeta,\n        status: TransactionStatus.confirmed as const,\n        txReceipt: transactionReceipt,\n      };\n      if (baseFeePerGas) {\n        updatedTransactionMeta.baseFeePerGas = baseFeePerGas;\n      }\n\n      // Update same nonce local transactions as dropped and define replacedBy properties.\n      this.markNonceDuplicatesDropped(transactionId);\n\n      // Update external provided transaction with updated gas values and confirmed status.\n      this.updateTransaction(\n        updatedTransactionMeta,\n        `${controllerName}:confirmExternalTransaction - Add external transaction`,\n      );\n      this.onTransactionStatusChange(updatedTransactionMeta);\n\n      // Intentional given potential duration of process.\n      this.updatePostBalance(updatedTransactionMeta).catch((error) => {\n        log('Error while updating post balance', error);\n        throw error;\n      });\n\n      this.messagingSystem.publish(\n        `${controllerName}:transactionConfirmed`,\n        updatedTransactionMeta,\n      );\n    } catch (error) {\n      console.error('Failed to confirm external transaction', error);\n    }\n  }\n\n  /**\n   * Append new send flow history to a transaction.\n   *\n   * @param transactionID - The ID of the transaction to update.\n   * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.\n   * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionSendFlowHistory(\n    transactionID: string,\n    currentSendFlowHistoryLength: number,\n    sendFlowHistoryToAdd: SendFlowHistoryEntry[],\n  ): TransactionMeta {\n    if (this.isSendFlowHistoryDisabled) {\n      throw new Error(\n        'Send flow history is disabled for the current transaction controller',\n      );\n    }\n\n    const transactionMeta = this.getTransaction(transactionID);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update send flow history as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionSendFlowHistory',\n    );\n\n    const sendFlowHistory = transactionMeta.sendFlowHistory ?? [];\n    if (currentSendFlowHistoryLength === sendFlowHistory.length) {\n      const updatedTransactionMeta = {\n        ...transactionMeta,\n        sendFlowHistory: [...sendFlowHistory, ...sendFlowHistoryToAdd],\n      };\n      this.updateTransaction(\n        updatedTransactionMeta,\n        `${controllerName}:updateTransactionSendFlowHistory - sendFlowHistory updated`,\n      );\n    }\n\n    return this.getTransaction(transactionID) as TransactionMeta;\n  }\n\n  /**\n   * Update the gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param gasValues - Gas values to update.\n   * @param gasValues.gas - Same as transaction.gasLimit.\n   * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param gasValues.gasPrice - Price per gas for legacy transactions.\n   * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param gasValues.estimateUsed - Which estimate level was used.\n   * @param gasValues.estimateSuggested - Which estimate level that the API suggested.\n   * @param gasValues.defaultGasEstimates - The default estimate for gas.\n   * @param gasValues.originalGasEstimate - Original estimate for gas.\n   * @param gasValues.userEditedGasLimit - The gas limit supplied by user.\n   * @param gasValues.userFeeLevel - Estimate level user selected.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionGasFees(\n    transactionId: string,\n    {\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      gas,\n      gasLimit,\n      gasPrice,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n    }: {\n      defaultGasEstimates?: string;\n      estimateUsed?: string;\n      estimateSuggested?: string;\n      gas?: string;\n      gasLimit?: string;\n      gasPrice?: string;\n      maxPriorityFeePerGas?: string;\n      maxFeePerGas?: string;\n      originalGasEstimate?: string;\n      userEditedGasLimit?: boolean;\n      userFeeLevel?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionGasFees',\n    );\n\n    let transactionGasFees = {\n      txParams: {\n        gas,\n        gasLimit,\n        gasPrice,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n      },\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n\n    // only update what is defined\n    transactionGasFees.txParams = pickBy(transactionGasFees.txParams);\n    transactionGasFees = pickBy(transactionGasFees);\n\n    // merge updated gas values with existing transaction meta\n    const updatedMeta = merge({}, transactionMeta, transactionGasFees);\n\n    this.updateTransaction(\n      updatedMeta,\n      `${controllerName}:updateTransactionGasFees - gas values updated`,\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  /**\n   * Update the previous gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param previousGas - Previous gas values to update.\n   * @param previousGas.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param previousGas.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param previousGas.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @returns The updated transactionMeta.\n   */\n  updatePreviousGasParams(\n    transactionId: string,\n    {\n      gasLimit,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    }: {\n      gasLimit?: string;\n      maxFeePerGas?: string;\n      maxPriorityFeePerGas?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(transactionMeta, 'updatePreviousGasParams');\n\n    const transactionPreviousGas = {\n      previousGas: {\n        gasLimit,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n      },\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n\n    // only update what is defined\n    transactionPreviousGas.previousGas = pickBy(\n      transactionPreviousGas.previousGas,\n    );\n\n    // merge updated previous gas values with existing transaction meta\n    const updatedMeta = merge({}, transactionMeta, transactionPreviousGas);\n\n    this.updateTransaction(\n      updatedMeta,\n      `${controllerName}:updatePreviousGasParams - Previous gas values updated`,\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  async getNonceLock(\n    address: string,\n    networkClientId: NetworkClientId,\n  ): Promise<NonceLock> {\n    return this.#multichainTrackingHelper.getNonceLock(\n      address,\n      networkClientId,\n    );\n  }\n\n  /**\n   * Updates the editable parameters of a transaction.\n   *\n   * @param txId - The ID of the transaction to update.\n   * @param params - The editable parameters to update.\n   * @param params.data - Data to pass with the transaction.\n   * @param params.gas - Maximum number of units of gas to use for the transaction.\n   * @param params.gasPrice - Price per gas for legacy transactions.\n   * @param params.from - Address to send the transaction from.\n   * @param params.to - Address to send the transaction to.\n   * @param params.value - Value associated with the transaction.\n   * @returns The updated transaction metadata.\n   */\n  async updateEditableParams(\n    txId: string,\n    {\n      data,\n      gas,\n      gasPrice,\n      from,\n      to,\n      value,\n    }: {\n      data?: string;\n      gas?: string;\n      gasPrice?: string;\n      from?: string;\n      to?: string;\n      value?: string;\n    },\n  ) {\n    const transactionMeta = this.getTransaction(txId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update editable params as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(transactionMeta, 'updateEditableParams');\n\n    const editableParams = {\n      txParams: {\n        data,\n        from,\n        to,\n        value,\n        gas,\n        gasPrice,\n      },\n    } as Partial<TransactionMeta>;\n\n    editableParams.txParams = pickBy(\n      editableParams.txParams,\n    ) as TransactionParams;\n\n    const updatedTransaction = merge({}, transactionMeta, editableParams);\n\n    const { networkClientId } = transactionMeta;\n    const provider = this.#getProvider({ networkClientId });\n    const ethQuery = new EthQuery(provider);\n\n    const { type } = await determineTransactionType(\n      updatedTransaction.txParams,\n      ethQuery,\n    );\n\n    updatedTransaction.type = type;\n\n    await updateTransactionLayer1GasFee({\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      provider,\n      transactionMeta: updatedTransaction,\n    });\n\n    this.updateTransaction(\n      updatedTransaction,\n      `Update Editable Params for ${txId}`,\n    );\n\n    return this.getTransaction(txId);\n  }\n\n  /**\n   * Signs and returns the raw transaction data for provided transaction params list.\n   *\n   * @param listOfTxParams - The list of transaction params to approve.\n   * @param opts - Options bag.\n   * @param opts.hasNonce - Whether the transactions already have a nonce.\n   * @returns The raw transactions.\n   */\n  async approveTransactionsWithSameNonce(\n    listOfTxParams: (TransactionParams & { chainId: Hex })[] = [],\n    { hasNonce }: { hasNonce?: boolean } = {},\n  ): Promise<string | string[]> {\n    log('Approving transactions with same nonce', {\n      transactions: listOfTxParams,\n    });\n\n    if (listOfTxParams.length === 0) {\n      return '';\n    }\n\n    const initialTx = listOfTxParams[0];\n    const { chainId } = initialTx;\n    const networkClientId = this.#getNetworkClientId({ chainId });\n    const initialTxAsEthTx = prepareTransaction(chainId, initialTx);\n    const initialTxAsSerializedHex = serializeTransaction(initialTxAsEthTx);\n\n    if (this.approvingTransactionIds.has(initialTxAsSerializedHex)) {\n      return '';\n    }\n\n    this.approvingTransactionIds.add(initialTxAsSerializedHex);\n\n    let rawTransactions, nonceLock;\n    try {\n      // TODO: we should add a check to verify that all transactions have the same from address\n      const fromAddress = initialTx.from;\n      const requiresNonce = hasNonce !== true;\n\n      nonceLock = requiresNonce\n        ? await this.getNonceLock(fromAddress, networkClientId)\n        : undefined;\n\n      const nonce = nonceLock\n        ? add0x(nonceLock.nextNonce.toString(16))\n        : initialTx.nonce;\n\n      if (nonceLock) {\n        log('Using nonce from nonce tracker', nonce, nonceLock.nonceDetails);\n      }\n\n      rawTransactions = await Promise.all(\n        listOfTxParams.map((txParams) => {\n          txParams.nonce = nonce;\n          return this.signExternalTransaction(txParams.chainId, txParams);\n        }),\n      );\n    } catch (err) {\n      log('Error while signing transactions with same nonce', err);\n      // Must set transaction to submitted/failed before releasing lock\n      // continue with error chain\n      throw err;\n    } finally {\n      nonceLock?.releaseLock();\n      this.approvingTransactionIds.delete(initialTxAsSerializedHex);\n    }\n    return rawTransactions;\n  }\n\n  /**\n   * Update a custodial transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param options - The custodial transaction options to update.\n   * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.\n   * @param options.hash - The new hash value to be assigned.\n   * @param options.status - The new status value to be assigned.\n   */\n  updateCustodialTransaction(\n    transactionId: string,\n    {\n      errorMessage,\n      hash,\n      status,\n    }: {\n      errorMessage?: string;\n      hash?: string;\n      status?: TransactionStatus;\n    },\n  ) {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update custodial transaction as no transaction metadata found`,\n      );\n    }\n\n    if (!transactionMeta.custodyId) {\n      throw new Error('Transaction must be a custodian transaction');\n    }\n\n    if (\n      status &&\n      ![\n        TransactionStatus.submitted,\n        TransactionStatus.signed,\n        TransactionStatus.failed,\n      ].includes(status)\n    ) {\n      throw new Error(\n        `Cannot update custodial transaction with status: ${status}`,\n      );\n    }\n\n    const updatedTransactionMeta = merge(\n      {},\n      transactionMeta,\n      pickBy({ hash, status }),\n    ) as TransactionMeta;\n\n    if (updatedTransactionMeta.status === TransactionStatus.submitted) {\n      updatedTransactionMeta.submittedTime = new Date().getTime();\n    }\n\n    if (updatedTransactionMeta.status === TransactionStatus.failed) {\n      updatedTransactionMeta.error = normalizeTxError(new Error(errorMessage));\n    }\n\n    this.updateTransaction(\n      updatedTransactionMeta,\n      `${controllerName}:updateCustodialTransaction - Custodial transaction updated`,\n    );\n\n    if (\n      [TransactionStatus.submitted, TransactionStatus.failed].includes(\n        status as TransactionStatus,\n      )\n    ) {\n      this.messagingSystem.publish(\n        `${controllerName}:transactionFinished`,\n        updatedTransactionMeta,\n      );\n      this.#internalEvents.emit(\n        `${updatedTransactionMeta.id}:finished`,\n        updatedTransactionMeta,\n      );\n    }\n  }\n\n  /**\n   * Search transaction metadata for matching entries.\n   *\n   * @param opts - Options bag.\n   * @param opts.initialList - The transactions to search. Defaults to the current state.\n   * @param opts.limit - The maximum number of transactions to return. No limit by default.\n   * @param opts.searchCriteria - An object containing values or functions for transaction properties to filter transactions with.\n   * @returns An array of transactions matching the provided options.\n   */\n  getTransactions({\n    initialList,\n    limit,\n    searchCriteria = {},\n  }: {\n    initialList?: TransactionMeta[];\n    limit?: number;\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    searchCriteria?: any;\n  } = {}): TransactionMeta[] {\n    // searchCriteria is an object that might have values that aren't predicate\n    // methods. When providing any other value type (string, number, etc), we\n    // consider this shorthand for \"check the value at key for strict equality\n    // with the provided value\". To conform this object to be only methods, we\n    // mapValues (lodash) such that every value on the object is a method that\n    // returns a boolean.\n    const predicateMethods = mapValues(searchCriteria, (predicate) => {\n      return typeof predicate === 'function'\n        ? predicate\n        : // TODO: Replace `any` with type\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (v: any) => v === predicate;\n    });\n\n    const transactionsToFilter = initialList ?? this.state.transactions;\n\n    // Combine sortBy and pickBy to transform our state object into an array of\n    // matching transactions that are sorted by time.\n    const filteredTransactions = sortBy(\n      pickBy(transactionsToFilter, (transaction) => {\n        // iterate over the predicateMethods keys to check if the transaction\n        // matches the searchCriteria\n        for (const [key, predicate] of Object.entries(predicateMethods)) {\n          // We return false early as soon as we know that one of the specified\n          // search criteria do not match the transaction. This prevents\n          // needlessly checking all criteria when we already know the criteria\n          // are not fully satisfied. We check both txParams and the base\n          // object as predicate keys can be either.\n          if (key in transaction.txParams) {\n            // TODO: Replace `any` with type\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (predicate((transaction.txParams as any)[key]) === false) {\n              return false;\n            }\n            // TODO: Replace `any` with type\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          } else if (predicate((transaction as any)[key]) === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }),\n      'time',\n    );\n    if (limit !== undefined) {\n      // We need to have all transactions of a given nonce in order to display\n      // necessary details in the UI. We use the size of this set to determine\n      // whether we have reached the limit provided, thus ensuring that all\n      // transactions of nonces we include will be sent to the UI.\n      const nonces = new Set();\n      const txs = [];\n      // By default, the transaction list we filter from is sorted by time ASC.\n      // To ensure that filtered results prefers the newest transactions we\n      // iterate from right to left, inserting transactions into front of a new\n      // array. The original order is preserved, but we ensure that newest txs\n      // are preferred.\n      for (let i = filteredTransactions.length - 1; i > -1; i--) {\n        const txMeta = filteredTransactions[i];\n        const { nonce } = txMeta.txParams;\n        if (!nonces.has(nonce)) {\n          if (nonces.size < limit) {\n            nonces.add(nonce);\n          } else {\n            continue;\n          }\n        }\n        // Push transaction into the beginning of our array to ensure the\n        // original order is preserved.\n        txs.unshift(txMeta);\n      }\n      return txs;\n    }\n    return filteredTransactions;\n  }\n\n  async estimateGasFee({\n    transactionParams,\n    chainId,\n    networkClientId: requestNetworkClientId,\n  }: {\n    transactionParams: TransactionParams;\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): Promise<GasFeeFlowResponse> {\n    const { id: networkClientId, provider } =\n      this.#multichainTrackingHelper.getNetworkClient({\n        chainId,\n        networkClientId: requestNetworkClientId,\n      });\n\n    const transactionMeta = {\n      txParams: transactionParams,\n      chainId,\n      networkClientId,\n    } as TransactionMeta;\n\n    // Guaranteed as the default gas fee flow matches all transactions.\n    const gasFeeFlow = getGasFeeFlow(\n      transactionMeta,\n      this.gasFeeFlows,\n    ) as GasFeeFlow;\n\n    const ethQuery = new EthQuery(provider);\n\n    const gasFeeControllerData = await this.getGasFeeEstimates({\n      networkClientId,\n    });\n\n    return gasFeeFlow.getGasFees({\n      ethQuery,\n      gasFeeControllerData,\n      transactionMeta,\n    });\n  }\n\n  /**\n   * Determine the layer 1 gas fee for the given transaction parameters.\n   *\n   * @param request - The request object.\n   * @param request.transactionParams - The transaction parameters to estimate the layer 1 gas fee for.\n   * @param request.chainId - The ID of the chain where the transaction will be executed.\n   * @param request.networkClientId - The ID of a specific network client to process the transaction.\n   */\n  async getLayer1GasFee({\n    transactionParams,\n    chainId,\n    networkClientId,\n  }: {\n    transactionParams: TransactionParams;\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): Promise<Hex | undefined> {\n    const provider = this.#getProvider({\n      chainId,\n      networkClientId,\n    });\n\n    return await getTransactionLayer1GasFee({\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      provider,\n      transactionMeta: {\n        txParams: transactionParams,\n        chainId,\n      } as TransactionMeta,\n    });\n  }\n\n  private async signExternalTransaction(\n    chainId: Hex,\n    transactionParams: TransactionParams,\n  ): Promise<string> {\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const normalizedTransactionParams =\n      normalizeTransactionParams(transactionParams);\n    const type = isEIP1559Transaction(normalizedTransactionParams)\n      ? TransactionEnvelopeType.feeMarket\n      : TransactionEnvelopeType.legacy;\n    const updatedTransactionParams = {\n      ...normalizedTransactionParams,\n      type,\n      gasLimit: normalizedTransactionParams.gas,\n      chainId,\n    };\n\n    const { from } = updatedTransactionParams;\n\n    const unsignedTransaction = prepareTransaction(\n      chainId,\n      updatedTransactionParams,\n    );\n\n    const signedTransaction = await this.sign(unsignedTransaction, from);\n    const rawTransaction = serializeTransaction(signedTransaction);\n\n    return rawTransaction;\n  }\n\n  /**\n   * Removes unapproved transactions from state.\n   */\n  clearUnapprovedTransactions() {\n    const transactions = this.state.transactions.filter(\n      ({ status }) => status !== TransactionStatus.unapproved,\n    );\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState(transactions);\n    });\n  }\n\n  /**\n   * Stop the signing process for a specific transaction.\n   * Throws an error causing the transaction status to be set to failed.\n   *\n   * @param transactionId - The ID of the transaction to stop signing.\n   */\n  abortTransactionSigning(transactionId: string) {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(`Cannot abort signing as no transaction metadata found`);\n    }\n\n    const abortCallback = this.signAbortCallbacks.get(transactionId);\n\n    if (!abortCallback) {\n      throw new Error(\n        `Cannot abort signing as transaction is not waiting for signing`,\n      );\n    }\n\n    abortCallback();\n\n    this.signAbortCallbacks.delete(transactionId);\n  }\n\n  private addMetadata(transactionMeta: TransactionMeta) {\n    validateTxParams(transactionMeta.txParams);\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState([\n        ...state.transactions,\n        transactionMeta,\n      ]);\n    });\n  }\n\n  private async updateGasProperties(\n    transactionMeta: TransactionMeta,\n    { traceContext }: { traceContext?: TraceContext } = {},\n  ) {\n    const isEIP1559Compatible =\n      transactionMeta.txParams.type !== TransactionEnvelopeType.legacy &&\n      (await this.getEIP1559Compatibility(transactionMeta.networkClientId));\n\n    const { networkClientId, chainId } = transactionMeta;\n\n    const isCustomNetwork =\n      this.#multichainTrackingHelper.getNetworkClient({ networkClientId })\n        .configuration.type === NetworkClientType.Custom;\n\n    const ethQuery = this.#getEthQuery({ networkClientId });\n    const provider = this.#getProvider({ networkClientId });\n\n    await this.#trace(\n      { name: 'Update Gas', parentContext: traceContext },\n      async () => {\n        await updateGas({\n          ethQuery,\n          chainId,\n          isCustomNetwork,\n          txMeta: transactionMeta,\n        });\n      },\n    );\n\n    await this.#trace(\n      { name: 'Update Gas Fees', parentContext: traceContext },\n      async () =>\n        await updateGasFees({\n          eip1559: isEIP1559Compatible,\n          ethQuery,\n          gasFeeFlows: this.gasFeeFlows,\n          getGasFeeEstimates: this.getGasFeeEstimates,\n          getSavedGasFees: this.getSavedGasFees.bind(this),\n          txMeta: transactionMeta,\n        }),\n    );\n\n    await this.#trace(\n      { name: 'Update Layer 1 Gas Fees', parentContext: traceContext },\n      async () =>\n        await updateTransactionLayer1GasFee({\n          layer1GasFeeFlows: this.layer1GasFeeFlows,\n          provider,\n          transactionMeta,\n        }),\n    );\n  }\n\n  private onBootCleanup() {\n    this.clearUnapprovedTransactions();\n    this.failIncompleteTransactions();\n  }\n\n  private failIncompleteTransactions() {\n    const incompleteTransactions = this.state.transactions.filter(\n      (transaction) =>\n        [TransactionStatus.approved, TransactionStatus.signed].includes(\n          transaction.status,\n        ),\n    );\n\n    for (const transactionMeta of incompleteTransactions) {\n      this.failTransaction(\n        transactionMeta,\n        new Error('Transaction incomplete at startup'),\n      );\n    }\n  }\n\n  private async processApproval(\n    transactionMeta: TransactionMeta,\n    {\n      isExisting = false,\n      requireApproval,\n      shouldShowRequest = true,\n      actionId,\n      traceContext,\n    }: {\n      isExisting?: boolean;\n      requireApproval?: boolean | undefined;\n      shouldShowRequest?: boolean;\n      actionId?: string;\n      traceContext?: TraceContext;\n    },\n  ): Promise<string> {\n    const transactionId = transactionMeta.id;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n    const { meta, isCompleted } = this.isTransactionCompleted(transactionId);\n    const finishedPromise = isCompleted\n      ? Promise.resolve(meta)\n      : this.waitForTransactionFinished(transactionId);\n\n    if (meta && !isExisting && !isCompleted) {\n      try {\n        if (requireApproval !== false) {\n          const acceptResult = await this.#trace(\n            { name: 'Await Approval', parentContext: traceContext },\n            (context) =>\n              this.requestApproval(transactionMeta, {\n                shouldShowRequest,\n                traceContext: context,\n              }),\n          );\n\n          resultCallbacks = acceptResult.resultCallbacks;\n\n          const approvalValue = acceptResult.value as\n            | {\n                txMeta?: TransactionMeta;\n              }\n            | undefined;\n\n          const updatedTransaction = approvalValue?.txMeta;\n\n          if (updatedTransaction) {\n            log('Updating transaction with approval data', {\n              customNonce: updatedTransaction.customNonceValue,\n              params: updatedTransaction.txParams,\n            });\n\n            this.updateTransaction(\n              updatedTransaction,\n              'TransactionController#processApproval - Updated with approval data',\n            );\n          }\n        }\n\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n\n        if (!isTxCompleted) {\n          const approvalResult = await this.approveTransaction(\n            transactionId,\n            traceContext,\n          );\n          if (\n            approvalResult === ApprovalState.SkippedViaBeforePublishHook &&\n            resultCallbacks\n          ) {\n            resultCallbacks.success();\n          }\n          const updatedTransactionMeta = this.getTransaction(\n            transactionId,\n          ) as TransactionMeta;\n          this.messagingSystem.publish(\n            `${controllerName}:transactionApproved`,\n            {\n              transactionMeta: updatedTransactionMeta,\n              actionId,\n            },\n          );\n        }\n        // TODO: Replace `any` with type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } catch (error: any) {\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n        if (!isTxCompleted) {\n          if (error?.code === errorCodes.provider.userRejectedRequest) {\n            this.cancelTransaction(transactionId, actionId);\n\n            throw providerErrors.userRejectedRequest(\n              'MetaMask Tx Signature: User denied transaction signature.',\n            );\n          } else {\n            this.failTransaction(meta, error, actionId);\n          }\n        }\n      }\n    }\n\n    const finalMeta = await finishedPromise;\n\n    switch (finalMeta?.status) {\n      case TransactionStatus.failed:\n        resultCallbacks?.error(finalMeta.error);\n        throw rpcErrors.internal(finalMeta.error.message);\n\n      case TransactionStatus.submitted:\n        resultCallbacks?.success();\n        return finalMeta.hash as string;\n\n      default:\n        const internalError = rpcErrors.internal(\n          `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n            finalMeta || transactionId,\n          )}`,\n        );\n\n        resultCallbacks?.error(internalError);\n        throw internalError;\n    }\n  }\n\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionId - The ID of the transaction to approve.\n   * @param traceContext - The parent context for any new traces.\n   */\n  private async approveTransaction(\n    transactionId: string,\n    traceContext?: unknown,\n  ) {\n    const cleanupTasks = new Array<() => void>();\n    cleanupTasks.push(await this.mutex.acquire());\n\n    let transactionMeta = this.getTransactionOrThrow(transactionId);\n\n    try {\n      if (!this.sign) {\n        this.failTransaction(\n          transactionMeta,\n          new Error('No sign method defined.'),\n        );\n        return ApprovalState.NotApproved;\n      } else if (!transactionMeta.chainId) {\n        this.failTransaction(transactionMeta, new Error('No chainId defined.'));\n        return ApprovalState.NotApproved;\n      }\n\n      if (this.approvingTransactionIds.has(transactionId)) {\n        log('Skipping approval as signing in progress', transactionId);\n        return ApprovalState.NotApproved;\n      }\n      this.approvingTransactionIds.add(transactionId);\n      cleanupTasks.push(() =>\n        this.approvingTransactionIds.delete(transactionId),\n      );\n\n      const [nonce, releaseNonce] = await getNextNonce(\n        transactionMeta,\n        (address: string) =>\n          this.#multichainTrackingHelper.getNonceLock(\n            address,\n            transactionMeta.networkClientId,\n          ),\n      );\n\n      // must set transaction to submitted/failed before releasing lock\n      releaseNonce && cleanupTasks.push(releaseNonce);\n\n      transactionMeta = this.#updateTransactionInternal(\n        {\n          transactionId,\n          note: 'TransactionController#approveTransaction - Transaction approved',\n        },\n        (draftTxMeta) => {\n          const { chainId, txParams } = draftTxMeta;\n          const { gas, type } = txParams;\n\n          draftTxMeta.status = TransactionStatus.approved;\n          draftTxMeta.txParams.chainId = chainId;\n          draftTxMeta.txParams.gasLimit = gas;\n          draftTxMeta.txParams.nonce = nonce;\n\n          if (!type && isEIP1559Transaction(txParams)) {\n            draftTxMeta.txParams.type = TransactionEnvelopeType.feeMarket;\n          }\n        },\n      );\n\n      this.onTransactionStatusChange(transactionMeta);\n\n      const rawTx = await this.#trace(\n        { name: 'Sign', parentContext: traceContext },\n        () => this.signTransaction(transactionMeta, transactionMeta.txParams),\n      );\n\n      if (!this.beforePublish(transactionMeta)) {\n        log('Skipping publishing transaction based on hook');\n        this.messagingSystem.publish(\n          `${controllerName}:transactionPublishingSkipped`,\n          transactionMeta,\n        );\n        return ApprovalState.SkippedViaBeforePublishHook;\n      }\n\n      if (!rawTx) {\n        return ApprovalState.NotApproved;\n      }\n\n      const { networkClientId } = transactionMeta;\n      const ethQuery = this.#getEthQuery({ networkClientId });\n\n      let preTxBalance: string | undefined;\n      const shouldUpdatePreTxBalance =\n        transactionMeta.type === TransactionType.swap;\n\n      if (shouldUpdatePreTxBalance) {\n        log('Determining pre-transaction balance');\n\n        preTxBalance = await query(ethQuery, 'getBalance', [\n          transactionMeta.txParams.from,\n        ]);\n      }\n\n      log('Publishing transaction', transactionMeta.txParams);\n\n      let hash: string | undefined;\n\n      await this.#trace(\n        { name: 'Publish', parentContext: traceContext },\n        async () => {\n          ({ transactionHash: hash } = await this.publish(\n            transactionMeta,\n            rawTx,\n          ));\n\n          if (hash === undefined) {\n            hash = await this.publishTransaction(ethQuery, {\n              ...transactionMeta,\n              rawTx,\n            });\n          }\n        },\n      );\n\n      log('Publish successful', hash);\n\n      transactionMeta = this.#updateTransactionInternal(\n        {\n          transactionId,\n          note: 'TransactionController#approveTransaction - Transaction submitted',\n        },\n        (draftTxMeta) => {\n          draftTxMeta.hash = hash;\n          draftTxMeta.status = TransactionStatus.submitted;\n          draftTxMeta.submittedTime = new Date().getTime();\n          if (shouldUpdatePreTxBalance) {\n            draftTxMeta.preTxBalance = preTxBalance;\n            log('Updated pre-transaction balance', preTxBalance);\n          }\n        },\n      );\n\n      this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {\n        transactionMeta,\n      });\n\n      this.messagingSystem.publish(\n        `${controllerName}:transactionFinished`,\n        transactionMeta,\n      );\n      this.#internalEvents.emit(`${transactionId}:finished`, transactionMeta);\n\n      this.onTransactionStatusChange(transactionMeta);\n      return ApprovalState.Approved;\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n      return ApprovalState.NotApproved;\n    } finally {\n      cleanupTasks.forEach((task) => task());\n    }\n  }\n\n  private async publishTransaction(\n    ethQuery: EthQuery,\n    transactionMeta: TransactionMeta,\n    { skipSubmitHistory }: { skipSubmitHistory?: boolean } = {},\n  ): Promise<string> {\n    const transactionHash = await query(ethQuery, 'sendRawTransaction', [\n      transactionMeta.rawTx,\n    ]);\n\n    if (skipSubmitHistory !== true) {\n      this.#updateSubmitHistory(transactionMeta, transactionHash);\n    }\n\n    return transactionHash;\n  }\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param actionId - The actionId passed from UI\n   */\n  private cancelTransaction(transactionId: string, actionId?: string) {\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n    this.update((state) => {\n      const transactions = state.transactions.filter(\n        ({ id }) => id !== transactionId,\n      );\n      state.transactions = this.trimTransactionsForState(transactions);\n    });\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      status: TransactionStatus.rejected as const,\n    };\n    this.messagingSystem.publish(\n      `${controllerName}:transactionFinished`,\n      updatedTransactionMeta,\n    );\n    this.#internalEvents.emit(\n      `${transactionMeta.id}:finished`,\n      updatedTransactionMeta,\n    );\n    this.messagingSystem.publish(`${controllerName}:transactionRejected`, {\n      transactionMeta: updatedTransactionMeta,\n      actionId,\n    });\n    this.onTransactionStatusChange(updatedTransactionMeta);\n  }\n\n  /**\n   * Trim the amount of transactions that are set on the state. Checks\n   * if the length of the tx history is longer then desired persistence\n   * limit and then if it is removes the oldest confirmed or rejected tx.\n   * Pending or unapproved transactions will not be removed by this\n   * operation. For safety of presenting a fully functional transaction UI\n   * representation, this function will not break apart transactions with the\n   * same nonce, created on the same day, per network. Not accounting for\n   * transactions of the same nonce, same day and network combo can result in\n   * confusing or broken experiences in the UI.\n   *\n   * @param transactions - The transactions to be applied to the state.\n   * @returns The trimmed list of transactions.\n   */\n  private trimTransactionsForState(\n    transactions: TransactionMeta[],\n  ): TransactionMeta[] {\n    const nonceNetworkSet = new Set();\n\n    const txsToKeep = [...transactions]\n      .sort((a, b) => (a.time > b.time ? -1 : 1)) // Descending time order\n      .filter((tx) => {\n        const { chainId, status, txParams, time } = tx;\n\n        if (txParams) {\n          const key = `${String(txParams.nonce)}-${convertHexToDecimal(\n            chainId,\n          )}-${new Date(time).toDateString()}`;\n\n          if (nonceNetworkSet.has(key)) {\n            return true;\n          } else if (\n            nonceNetworkSet.size < this.#transactionHistoryLimit ||\n            !this.isFinalState(status)\n          ) {\n            nonceNetworkSet.add(key);\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n    txsToKeep.reverse(); // Ascending time order\n    return txsToKeep;\n  }\n\n  /**\n   * Determines if the transaction is in a final state.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isFinalState(status: TransactionStatus): boolean {\n    return (\n      status === TransactionStatus.rejected ||\n      status === TransactionStatus.confirmed ||\n      status === TransactionStatus.failed\n    );\n  }\n\n  /**\n   * Whether the transaction has at least completed all local processing.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isLocalFinalState(status: TransactionStatus): boolean {\n    return [\n      TransactionStatus.confirmed,\n      TransactionStatus.failed,\n      TransactionStatus.rejected,\n      TransactionStatus.submitted,\n    ].includes(status);\n  }\n\n  private async requestApproval(\n    txMeta: TransactionMeta,\n    {\n      shouldShowRequest,\n      traceContext,\n    }: { shouldShowRequest: boolean; traceContext?: TraceContext },\n  ): Promise<AddResult> {\n    const id = this.getApprovalId(txMeta);\n    const { origin } = txMeta;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: txMeta.id };\n\n    await this.#trace({\n      name: 'Notification Display',\n      id,\n      parentContext: traceContext,\n    });\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin: origin || ORIGIN_METAMASK,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      shouldShowRequest,\n    )) as Promise<AddResult>;\n  }\n\n  private getTransaction(\n    transactionId: string,\n  ): Readonly<TransactionMeta> | undefined {\n    const { transactions } = this.state;\n    return transactions.find(({ id }) => id === transactionId);\n  }\n\n  private getTransactionOrThrow(\n    transactionId: string,\n    errorMessagePrefix = 'TransactionController',\n  ): Readonly<TransactionMeta> {\n    const txMeta = this.getTransaction(transactionId);\n    if (!txMeta) {\n      throw new Error(\n        `${errorMessagePrefix}: No transaction found with id ${transactionId}`,\n      );\n    }\n    return txMeta;\n  }\n\n  private getApprovalId(txMeta: TransactionMeta) {\n    return String(txMeta.id);\n  }\n\n  private isTransactionCompleted(transactionId: string): {\n    meta?: TransactionMeta;\n    isCompleted: boolean;\n  } {\n    const transaction = this.getTransaction(transactionId);\n\n    if (!transaction) {\n      return { meta: undefined, isCompleted: false };\n    }\n\n    const isCompleted = this.isLocalFinalState(transaction.status);\n\n    return { meta: transaction, isCompleted };\n  }\n\n  #getChainId(networkClientId: NetworkClientId): Hex {\n    return this.#multichainTrackingHelper.getNetworkClient({ networkClientId })\n      .configuration.chainId;\n  }\n\n  #getNetworkClientId({\n    chainId,\n    networkClientId,\n  }: {\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }) {\n    if (networkClientId) {\n      return networkClientId;\n    }\n\n    return this.#multichainTrackingHelper.getNetworkClient({\n      chainId,\n    }).id;\n  }\n\n  #getEthQuery({\n    chainId,\n    networkClientId,\n  }: {\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): EthQuery {\n    return new EthQuery(this.#getProvider({ chainId, networkClientId }));\n  }\n\n  #getProvider({\n    chainId,\n    networkClientId,\n  }: {\n    chainId?: Hex;\n    networkClientId?: NetworkClientId;\n  }): Provider {\n    return this.#multichainTrackingHelper.getNetworkClient({\n      chainId,\n      networkClientId,\n    }).provider;\n  }\n\n  private onIncomingTransactions(transactions: TransactionMeta[]) {\n    if (!transactions.length) {\n      return;\n    }\n\n    const finalTransactions = transactions.map((tx) => {\n      const { chainId } = tx;\n      const networkClientId = this.#getNetworkClientId({ chainId });\n\n      return {\n        ...tx,\n        networkClientId,\n      };\n    });\n\n    this.update((state) => {\n      const { transactions: currentTransactions } = state;\n\n      state.transactions = this.trimTransactionsForState([\n        ...finalTransactions,\n        ...currentTransactions,\n      ]);\n\n      log(\n        'Added incoming transactions to state',\n        finalTransactions.length,\n        finalTransactions,\n      );\n    });\n\n    this.messagingSystem.publish(\n      `${controllerName}:incomingTransactionsReceived`,\n      finalTransactions,\n    );\n  }\n\n  private generateDappSuggestedGasFees(\n    txParams: TransactionParams,\n    origin?: string,\n  ): DappSuggestedGasFees | undefined {\n    if (!origin || origin === ORIGIN_METAMASK) {\n      return undefined;\n    }\n\n    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas } = txParams;\n\n    if (\n      gasPrice === undefined &&\n      maxFeePerGas === undefined &&\n      maxPriorityFeePerGas === undefined &&\n      gas === undefined\n    ) {\n      return undefined;\n    }\n\n    const dappSuggestedGasFees: DappSuggestedGasFees = {};\n\n    if (gasPrice !== undefined) {\n      dappSuggestedGasFees.gasPrice = gasPrice;\n    } else if (\n      maxFeePerGas !== undefined ||\n      maxPriorityFeePerGas !== undefined\n    ) {\n      dappSuggestedGasFees.maxFeePerGas = maxFeePerGas;\n      dappSuggestedGasFees.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    }\n\n    if (gas !== undefined) {\n      dappSuggestedGasFees.gas = gas;\n    }\n\n    return dappSuggestedGasFees;\n  }\n\n  /**\n   * Validates and adds external provided transaction to state.\n   *\n   * @param transactionMeta - Nominated external transaction to be added to state.\n   * @returns The new transaction.\n   */\n  private addExternalTransaction(transactionMeta: TransactionMeta) {\n    const { chainId } = transactionMeta;\n    const { transactions } = this.state;\n    const fromAddress = transactionMeta?.txParams?.from;\n    const sameFromAndNetworkTransactions = transactions.filter(\n      (transaction) =>\n        transaction.txParams.from === fromAddress &&\n        transaction.chainId === chainId,\n    );\n    const confirmedTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.confirmed,\n    );\n    const pendingTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.submitted,\n    );\n\n    validateConfirmedExternalTransaction(\n      transactionMeta,\n      confirmedTxs,\n      pendingTxs,\n    );\n\n    // Make sure provided external transaction has non empty history array\n    const newTransactionMeta =\n      (transactionMeta.history ?? []).length === 0 && !this.isHistoryDisabled\n        ? addInitialHistorySnapshot(transactionMeta)\n        : transactionMeta;\n\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState([\n        ...state.transactions,\n        newTransactionMeta,\n      ]);\n    });\n\n    return newTransactionMeta;\n  }\n\n  /**\n   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions\n   * in the transactions have the same nonce.\n   *\n   * @param transactionId - Used to identify original transaction.\n   */\n  private markNonceDuplicatesDropped(transactionId: string) {\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      return;\n    }\n    const nonce = transactionMeta.txParams?.nonce;\n    const from = transactionMeta.txParams?.from;\n    const { chainId } = transactionMeta;\n\n    const sameNonceTransactions = this.state.transactions.filter(\n      (transaction) =>\n        transaction.id !== transactionId &&\n        transaction.txParams.from === from &&\n        transaction.txParams.nonce === nonce &&\n        transaction.chainId === chainId &&\n        transaction.type !== TransactionType.incoming,\n    );\n    const sameNonceTransactionIds = sameNonceTransactions.map(\n      (transaction) => transaction.id,\n    );\n\n    if (sameNonceTransactions.length === 0) {\n      return;\n    }\n\n    this.update((state) => {\n      for (const transaction of state.transactions) {\n        if (sameNonceTransactionIds.includes(transaction.id)) {\n          transaction.replacedBy = transactionMeta?.hash;\n          transaction.replacedById = transactionMeta?.id;\n        }\n      }\n    });\n\n    for (const transaction of this.state.transactions) {\n      if (\n        sameNonceTransactionIds.includes(transaction.id) &&\n        transaction.status !== TransactionStatus.failed\n      ) {\n        this.setTransactionStatusDropped(transaction);\n      }\n    }\n  }\n\n  /**\n   * Method to set transaction status to dropped.\n   *\n   * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.\n   */\n  private setTransactionStatusDropped(transactionMeta: TransactionMeta) {\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      status: TransactionStatus.dropped as const,\n    };\n    this.messagingSystem.publish(`${controllerName}:transactionDropped`, {\n      transactionMeta: updatedTransactionMeta,\n    });\n    this.updateTransaction(\n      updatedTransactionMeta,\n      'TransactionController#setTransactionStatusDropped - Transaction dropped',\n    );\n    this.onTransactionStatusChange(updatedTransactionMeta);\n  }\n\n  /**\n   * Get transaction with provided actionId.\n   *\n   * @param actionId - Unique ID to prevent duplicate requests\n   * @returns the filtered transaction\n   */\n  private getTransactionWithActionId(actionId?: string) {\n    return this.state.transactions.find(\n      (transaction) => actionId && transaction.actionId === actionId,\n    );\n  }\n\n  private async waitForTransactionFinished(\n    transactionId: string,\n  ): Promise<TransactionMeta> {\n    return new Promise((resolve) => {\n      this.#internalEvents.once(`${transactionId}:finished`, (txMeta) => {\n        resolve(txMeta);\n      });\n    });\n  }\n\n  /**\n   * Updates the r, s, and v properties of a TransactionMeta object\n   * with values from a signed transaction.\n   *\n   * @param transactionMeta - The TransactionMeta object to update.\n   * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.\n   * @returns The updated TransactionMeta object.\n   */\n  private updateTransactionMetaRSV(\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ): TransactionMeta {\n    const transactionMetaWithRsv = cloneDeep(transactionMeta);\n\n    for (const key of ['r', 's', 'v'] as const) {\n      const value = signedTx[key];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      transactionMetaWithRsv[key] = add0x(value.toString(16));\n    }\n\n    return transactionMetaWithRsv;\n  }\n\n  private async getEIP1559Compatibility(networkClientId?: NetworkClientId) {\n    const currentNetworkIsEIP1559Compatible =\n      await this.getCurrentNetworkEIP1559Compatibility(networkClientId);\n\n    const currentAccountIsEIP1559Compatible =\n      await this.getCurrentAccountEIP1559Compatibility();\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n\n  private async signTransaction(\n    transactionMeta: TransactionMeta,\n    txParams: TransactionParams,\n  ): Promise<string | undefined> {\n    log('Signing transaction', txParams);\n\n    const { authorizationList, from } = txParams;\n    const finalTxParams = { ...txParams };\n\n    finalTxParams.authorizationList = await signAuthorizationList({\n      authorizationList,\n      messenger: this.messagingSystem,\n      transactionMeta,\n    });\n\n    const unsignedEthTx = prepareTransaction(\n      transactionMeta.chainId,\n      finalTxParams,\n    );\n\n    this.approvingTransactionIds.add(transactionMeta.id);\n\n    const signedTx = await new Promise<TypedTransaction>((resolve, reject) => {\n      this.sign?.(\n        unsignedEthTx,\n        from,\n        ...this.getAdditionalSignArguments(transactionMeta),\n      ).then(resolve, reject);\n\n      this.signAbortCallbacks.set(transactionMeta.id, () =>\n        reject(new Error('Signing aborted by user')),\n      );\n    });\n\n    this.signAbortCallbacks.delete(transactionMeta.id);\n\n    if (!signedTx) {\n      log('Skipping signed status as no signed transaction');\n      return undefined;\n    }\n\n    const transactionMetaFromHook = cloneDeep(transactionMeta);\n    if (!this.afterSign(transactionMetaFromHook, signedTx)) {\n      this.updateTransaction(\n        transactionMetaFromHook,\n        'TransactionController#signTransaction - Update after sign',\n      );\n\n      log('Skipping signed status based on hook');\n\n      return undefined;\n    }\n\n    const transactionMetaWithRsv = {\n      ...this.updateTransactionMetaRSV(transactionMetaFromHook, signedTx),\n      status: TransactionStatus.signed as const,\n    };\n\n    this.updateTransaction(\n      transactionMetaWithRsv,\n      'TransactionController#approveTransaction - Transaction signed',\n    );\n\n    this.onTransactionStatusChange(transactionMetaWithRsv);\n\n    const rawTx = serializeTransaction(signedTx);\n\n    const transactionMetaWithRawTx = merge({}, transactionMetaWithRsv, {\n      rawTx,\n    });\n\n    this.updateTransaction(\n      transactionMetaWithRawTx,\n      'TransactionController#approveTransaction - RawTransaction added',\n    );\n\n    return rawTx;\n  }\n\n  private onTransactionStatusChange(transactionMeta: TransactionMeta) {\n    this.messagingSystem.publish(`${controllerName}:transactionStatusUpdated`, {\n      transactionMeta,\n    });\n  }\n\n  private getNonceTrackerTransactions(\n    status: TransactionStatus,\n    address: string,\n    chainId: string,\n  ) {\n    return getAndFormatTransactionsForNonceTracker(\n      chainId,\n      address,\n      status,\n      this.state.transactions,\n    );\n  }\n\n  private onConfirmedTransaction(transactionMeta: TransactionMeta) {\n    log('Processing confirmed transaction', transactionMeta.id);\n\n    this.markNonceDuplicatesDropped(transactionMeta.id);\n\n    this.messagingSystem.publish(\n      `${controllerName}:transactionConfirmed`,\n      transactionMeta,\n    );\n\n    this.onTransactionStatusChange(transactionMeta);\n\n    // Intentional given potential duration of process.\n    this.updatePostBalance(transactionMeta).catch((error) => {\n      log('Error while updating post balance', error);\n      throw error;\n    });\n  }\n\n  private async updatePostBalance(transactionMeta: TransactionMeta) {\n    try {\n      const { networkClientId, type } = transactionMeta;\n\n      if (type !== TransactionType.swap) {\n        return;\n      }\n\n      const ethQuery = this.#getEthQuery({ networkClientId });\n\n      const { updatedTransactionMeta, approvalTransactionMeta } =\n        await updatePostTransactionBalance(transactionMeta, {\n          ethQuery,\n          getTransaction: this.getTransaction.bind(this),\n          updateTransaction: this.updateTransaction.bind(this),\n        });\n\n      this.messagingSystem.publish(\n        `${controllerName}:postTransactionBalanceUpdated`,\n        {\n          transactionMeta: updatedTransactionMeta,\n          approvalTransactionMeta,\n        },\n      );\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Error while updating post transaction balance', error);\n    }\n  }\n\n  #createNonceTracker({\n    provider,\n    blockTracker,\n    chainId,\n  }: {\n    provider: Provider;\n    blockTracker: BlockTracker;\n    chainId: Hex;\n  }): NonceTracker {\n    return new NonceTracker({\n      // TODO: Fix types\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      provider: provider as any,\n      // TODO: Fix types\n      blockTracker,\n      getPendingTransactions: this.#getNonceTrackerPendingTransactions.bind(\n        this,\n        chainId,\n      ),\n      getConfirmedTransactions: this.getNonceTrackerTransactions.bind(\n        this,\n        TransactionStatus.confirmed,\n        chainId,\n      ),\n    });\n  }\n\n  #createPendingTransactionTracker({\n    provider,\n    blockTracker,\n    chainId,\n    networkClientId,\n  }: {\n    provider: Provider;\n    blockTracker: BlockTracker;\n    chainId: Hex;\n    networkClientId: NetworkClientId;\n  }): PendingTransactionTracker {\n    const ethQuery = new EthQuery(provider);\n\n    const pendingTransactionTracker = new PendingTransactionTracker({\n      blockTracker,\n      getChainId: () => chainId,\n      getEthQuery: () => ethQuery,\n      getNetworkClientId: () => networkClientId,\n      getTransactions: () => this.state.transactions,\n      isResubmitEnabled: this.#pendingTransactionOptions.isResubmitEnabled,\n      getGlobalLock: () =>\n        this.#multichainTrackingHelper.acquireNonceLockForChainIdKey({\n          chainId,\n        }),\n      publishTransaction: (_ethQuery, transactionMeta) =>\n        this.publishTransaction(_ethQuery, transactionMeta, {\n          skipSubmitHistory: true,\n        }),\n      hooks: {\n        beforeCheckPendingTransaction:\n          this.beforeCheckPendingTransaction.bind(this),\n        beforePublish: this.beforePublish.bind(this),\n      },\n    });\n\n    this.#addPendingTransactionTrackerListeners(pendingTransactionTracker);\n\n    return pendingTransactionTracker;\n  }\n\n  readonly #checkForPendingTransactionAndStartPolling = () => {\n    this.#multichainTrackingHelper.checkForPendingTransactionAndStartPolling();\n  };\n\n  #stopAllTracking() {\n    this.#multichainTrackingHelper.stopAllTracking();\n  }\n\n  #addIncomingTransactionHelperListeners(\n    incomingTransactionHelper: IncomingTransactionHelper,\n  ) {\n    incomingTransactionHelper.hub.on(\n      'transactions',\n      this.onIncomingTransactions.bind(this),\n    );\n  }\n\n  #removePendingTransactionTrackerListeners(\n    pendingTransactionTracker: PendingTransactionTracker,\n  ) {\n    pendingTransactionTracker.hub.removeAllListeners('transaction-confirmed');\n    pendingTransactionTracker.hub.removeAllListeners('transaction-dropped');\n    pendingTransactionTracker.hub.removeAllListeners('transaction-failed');\n    pendingTransactionTracker.hub.removeAllListeners('transaction-updated');\n  }\n\n  #addPendingTransactionTrackerListeners(\n    pendingTransactionTracker: PendingTransactionTracker,\n  ) {\n    pendingTransactionTracker.hub.on(\n      'transaction-confirmed',\n      this.onConfirmedTransaction.bind(this),\n    );\n\n    pendingTransactionTracker.hub.on(\n      'transaction-dropped',\n      this.setTransactionStatusDropped.bind(this),\n    );\n\n    pendingTransactionTracker.hub.on(\n      'transaction-failed',\n      this.failTransaction.bind(this),\n    );\n\n    pendingTransactionTracker.hub.on(\n      'transaction-updated',\n      this.updateTransaction.bind(this),\n    );\n  }\n\n  #getNonceTrackerPendingTransactions(chainId: string, address: string) {\n    const standardPendingTransactions = this.getNonceTrackerTransactions(\n      TransactionStatus.submitted,\n      address,\n      chainId,\n    );\n\n    const externalPendingTransactions = this.getExternalPendingTransactions(\n      address,\n      chainId,\n    );\n    return [...standardPendingTransactions, ...externalPendingTransactions];\n  }\n\n  private async publishTransactionForRetry(\n    ethQuery: EthQuery,\n    transactionMeta: TransactionMeta,\n  ): Promise<string> {\n    try {\n      return await this.publishTransaction(ethQuery, transactionMeta);\n    } catch (error: unknown) {\n      if (this.isTransactionAlreadyConfirmedError(error as Error)) {\n        throw new Error('Previous transaction is already confirmed');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Ensures that error is a nonce issue\n   *\n   * @param error - The error to check\n   * @returns Whether or not the error is a nonce issue\n   */\n  // TODO: Replace `any` with type\n  // Some networks are returning original error in the data field\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private isTransactionAlreadyConfirmedError(error: any): boolean {\n    return (\n      error?.message?.includes('nonce too low') ||\n      error?.data?.message?.includes('nonce too low')\n    );\n  }\n\n  #getGasFeeFlows(): GasFeeFlow[] {\n    if (this.#testGasFeeFlows) {\n      return [new TestGasFeeFlow()];\n    }\n\n    return [new LineaGasFeeFlow(), new DefaultGasFeeFlow()];\n  }\n\n  #getLayer1GasFeeFlows(): Layer1GasFeeFlow[] {\n    return [new OptimismLayer1GasFeeFlow(), new ScrollLayer1GasFeeFlow()];\n  }\n\n  #updateTransactionInternal(\n    {\n      transactionId,\n      note,\n      skipHistory,\n      skipValidation,\n    }: {\n      transactionId: string;\n      note?: string;\n      skipHistory?: boolean;\n      skipValidation?: boolean;\n    },\n    callback: (transactionMeta: TransactionMeta) => TransactionMeta | void,\n  ): Readonly<TransactionMeta> {\n    let updatedTransactionParams: (keyof TransactionParams)[] = [];\n\n    this.update((state) => {\n      const index = state.transactions.findIndex(\n        ({ id }) => id === transactionId,\n      );\n\n      let transactionMeta = state.transactions[index];\n\n      transactionMeta = callback(transactionMeta) ?? transactionMeta;\n\n      if (skipValidation !== true) {\n        transactionMeta.txParams = normalizeTransactionParams(\n          transactionMeta.txParams,\n        );\n\n        validateTxParams(transactionMeta.txParams);\n      }\n\n      updatedTransactionParams =\n        this.#checkIfTransactionParamsUpdated(transactionMeta);\n\n      const shouldSkipHistory = this.isHistoryDisabled || skipHistory;\n\n      if (!shouldSkipHistory) {\n        transactionMeta = updateTransactionHistory(\n          transactionMeta,\n          note ?? 'Transaction updated',\n        );\n      }\n      state.transactions[index] = transactionMeta;\n    });\n\n    const transactionMeta = this.getTransaction(\n      transactionId,\n    ) as TransactionMeta;\n\n    if (updatedTransactionParams.length > 0) {\n      this.#onTransactionParamsUpdated(\n        transactionMeta,\n        updatedTransactionParams,\n      );\n    }\n\n    return transactionMeta;\n  }\n\n  async #updateFirstTimeInteraction(\n    transactionMeta: TransactionMeta,\n    {\n      traceContext,\n    }: {\n      traceContext?: TraceContext;\n    } = {},\n  ) {\n    if (!this.#isFirstTimeInteractionEnabled()) {\n      return;\n    }\n\n    const {\n      chainId,\n      id: transactionId,\n      txParams: { to, from },\n    } = transactionMeta;\n\n    const request: GetAccountAddressRelationshipRequest = {\n      chainId: hexToNumber(chainId),\n      to: to as string,\n      from,\n    };\n\n    validateParamTo(to);\n\n    const existingTransaction = this.state.transactions.find(\n      (tx) =>\n        tx.chainId === chainId &&\n        tx.txParams.from === from &&\n        tx.txParams.to === to &&\n        tx.id !== transactionId,\n    );\n\n    // Check if there is an existing transaction with the same from, to, and chainId\n    // else we continue to check the account address relationship from API\n    if (existingTransaction) {\n      return;\n    }\n\n    try {\n      const { count } = await this.#trace(\n        { name: 'Account Address Relationship', parentContext: traceContext },\n        () => getAccountAddressRelationship(request),\n      );\n\n      const isFirstTimeInteraction =\n        count === undefined ? undefined : count === 0;\n\n      const finalTransactionMeta = this.getTransaction(transactionId);\n\n      /* istanbul ignore if */\n      if (!finalTransactionMeta) {\n        log(\n          'Cannot update first time interaction as transaction not found',\n          transactionId,\n        );\n        return;\n      }\n\n      this.#updateTransactionInternal(\n        {\n          transactionId,\n          note: 'TransactionController#updateFirstInteraction - Update first time interaction',\n        },\n        (txMeta) => {\n          txMeta.isFirstTimeInteraction = isFirstTimeInteraction;\n        },\n      );\n\n      log('Updated first time interaction', transactionId, {\n        isFirstTimeInteraction,\n      });\n    } catch (error) {\n      log(\n        'Error fetching account address relationship, skipping first time interaction update',\n        error,\n      );\n    }\n  }\n\n  #checkIfTransactionParamsUpdated(newTransactionMeta: TransactionMeta) {\n    const { id: transactionId, txParams: newParams } = newTransactionMeta;\n\n    const originalParams = this.getTransaction(transactionId)?.txParams;\n\n    if (!originalParams || isEqual(originalParams, newParams)) {\n      return [];\n    }\n\n    const params = Object.keys(newParams) as (keyof TransactionParams)[];\n\n    const updatedProperties = params.filter(\n      (param) => newParams[param] !== originalParams[param],\n    );\n\n    log(\n      'Transaction parameters have been updated',\n      transactionId,\n      updatedProperties,\n      originalParams,\n      newParams,\n    );\n\n    return updatedProperties;\n  }\n\n  #onTransactionParamsUpdated(\n    transactionMeta: TransactionMeta,\n    updatedParams: (keyof TransactionParams)[],\n  ) {\n    if (\n      (['to', 'value', 'data'] as const).some((param) =>\n        updatedParams.includes(param),\n      )\n    ) {\n      log('Updating simulation data due to transaction parameter update');\n      this.#updateSimulationData(transactionMeta).catch((error) => {\n        log('Error updating simulation data', error);\n        throw error;\n      });\n    }\n  }\n\n  async #updateSimulationData(\n    transactionMeta: TransactionMeta,\n    { traceContext }: { traceContext?: TraceContext } = {},\n  ) {\n    const { id: transactionId, chainId, txParams } = transactionMeta;\n    const { from, to, value, data } = txParams;\n\n    let simulationData: SimulationData = {\n      error: {\n        code: SimulationErrorCode.Disabled,\n        message: 'Simulation disabled',\n      },\n      tokenBalanceChanges: [],\n    };\n\n    if (this.#isSimulationEnabled()) {\n      this.#updateTransactionInternal(\n        { transactionId, skipHistory: true },\n        (txMeta) => {\n          txMeta.simulationData = undefined;\n        },\n      );\n\n      simulationData = await this.#trace(\n        { name: 'Simulate', parentContext: traceContext },\n        () =>\n          getSimulationData({\n            chainId,\n            from: from as Hex,\n            to: to as Hex,\n            value: value as Hex,\n            data: data as Hex,\n          }),\n      );\n    }\n\n    const finalTransactionMeta = this.getTransaction(transactionId);\n\n    /* istanbul ignore if */\n    if (!finalTransactionMeta) {\n      log(\n        'Cannot update simulation data as transaction not found',\n        transactionId,\n        simulationData,\n      );\n\n      return;\n    }\n\n    this.#updateTransactionInternal(\n      {\n        transactionId,\n        note: 'TransactionController#updateSimulationData - Update simulation data',\n      },\n      (txMeta) => {\n        txMeta.simulationData = simulationData;\n      },\n    );\n\n    log('Updated simulation data', transactionId, simulationData);\n  }\n\n  #onGasFeePollerTransactionUpdate({\n    transactionId,\n    gasFeeEstimates,\n    gasFeeEstimatesLoaded,\n    layer1GasFee,\n  }: {\n    transactionId: string;\n    gasFeeEstimates?: GasFeeEstimates;\n    gasFeeEstimatesLoaded?: boolean;\n    layer1GasFee?: Hex;\n  }) {\n    this.#updateTransactionInternal(\n      { transactionId, skipHistory: true },\n      (txMeta) => {\n        if (gasFeeEstimates) {\n          txMeta.gasFeeEstimates = gasFeeEstimates;\n        }\n\n        if (gasFeeEstimatesLoaded !== undefined) {\n          txMeta.gasFeeEstimatesLoaded = gasFeeEstimatesLoaded;\n        }\n\n        if (layer1GasFee) {\n          txMeta.layer1GasFee = layer1GasFee;\n        }\n      },\n    );\n  }\n\n  #getSelectedAccount() {\n    return this.messagingSystem.call('AccountsController:getSelectedAccount');\n  }\n\n  #updateSubmitHistory(transactionMeta: TransactionMeta, hash: string): void {\n    const { chainId, networkClientId, origin, rawTx, txParams } =\n      transactionMeta;\n\n    const { networkConfigurationsByChainId } = this.getNetworkState();\n    const networkConfiguration = networkConfigurationsByChainId[chainId as Hex];\n\n    const endpoint = networkConfiguration?.rpcEndpoints.find(\n      (currentEndpoint) => currentEndpoint.networkClientId === networkClientId,\n    );\n\n    const networkUrl = endpoint?.url;\n    const networkType = endpoint?.name ?? networkClientId;\n\n    const submitHistoryEntry: SubmitHistoryEntry = {\n      chainId,\n      hash,\n      networkType,\n      networkUrl,\n      origin,\n      rawTransaction: rawTx as string,\n      time: Date.now(),\n      transaction: txParams,\n    };\n\n    log('Updating submit history', submitHistoryEntry);\n\n    this.update((state) => {\n      const { submitHistory } = state;\n\n      if (submitHistory.length === SUBMIT_HISTORY_LIMIT) {\n        submitHistory.pop();\n      }\n\n      submitHistory.unshift(submitHistoryEntry);\n    });\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/helpers/ResimulateHelper.cjs b/dist/helpers/ResimulateHelper.cjs
deleted file mode 100644
index 9a271ff8f2e599dfdc051e56fcc16fa463ebf0d4..0000000000000000000000000000000000000000
--- a/dist/helpers/ResimulateHelper.cjs
+++ /dev/null
@@ -1,261 +0,0 @@
-"use strict";
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _ResimulateHelper_instances, _ResimulateHelper_timeoutIds, _ResimulateHelper_getTransactions, _ResimulateHelper_simulateTransaction, _ResimulateHelper_onTransactionsUpdate, _ResimulateHelper_start, _ResimulateHelper_queueUpdate, _ResimulateHelper_stop, _ResimulateHelper_removeListener;
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.hasSimulationDataChanged = exports.shouldResimulate = exports.ResimulateHelper = exports.RESIMULATE_INTERVAL_MS = exports.BLOCK_TIME_ADDITIONAL_SECONDS = exports.VALUE_COMPARISON_PERCENT_THRESHOLD = exports.BLOCKAID_RESULT_TYPE_MALICIOUS = exports.RESIMULATE_PARAMS = void 0;
-const utils_1 = require("@metamask/utils");
-const bn_js_1 = require("bn.js");
-const lodash_1 = require("lodash");
-const logger_1 = require("../logger.cjs");
-const types_1 = require("../types.cjs");
-const utils_2 = require("../utils/utils.cjs");
-const log = (0, logger_1.createModuleLogger)(logger_1.projectLogger, 'resimulate-helper');
-exports.RESIMULATE_PARAMS = ['to', 'value', 'data'];
-exports.BLOCKAID_RESULT_TYPE_MALICIOUS = 'Malicious';
-exports.VALUE_COMPARISON_PERCENT_THRESHOLD = 5;
-exports.BLOCK_TIME_ADDITIONAL_SECONDS = 60;
-exports.RESIMULATE_INTERVAL_MS = 3000;
-class ResimulateHelper {
-    constructor({ getTransactions, simulateTransaction, onTransactionsUpdate, }) {
-        _ResimulateHelper_instances.add(this);
-        // Map of transactionId <=> timeoutId
-        _ResimulateHelper_timeoutIds.set(this, new Map());
-        _ResimulateHelper_getTransactions.set(this, void 0);
-        _ResimulateHelper_simulateTransaction.set(this, void 0);
-        __classPrivateFieldSet(this, _ResimulateHelper_getTransactions, getTransactions, "f");
-        __classPrivateFieldSet(this, _ResimulateHelper_simulateTransaction, simulateTransaction, "f");
-        onTransactionsUpdate(__classPrivateFieldGet(this, _ResimulateHelper_instances, "m", _ResimulateHelper_onTransactionsUpdate).bind(this));
-    }
-}
-exports.ResimulateHelper = ResimulateHelper;
-_ResimulateHelper_timeoutIds = new WeakMap(), _ResimulateHelper_getTransactions = new WeakMap(), _ResimulateHelper_simulateTransaction = new WeakMap(), _ResimulateHelper_instances = new WeakSet(), _ResimulateHelper_onTransactionsUpdate = function _ResimulateHelper_onTransactionsUpdate() {
-    const unapprovedTransactions = __classPrivateFieldGet(this, _ResimulateHelper_getTransactions, "f").call(this).filter((tx) => tx.status === types_1.TransactionStatus.unapproved);
-    const unapprovedTransactionIds = new Set(unapprovedTransactions.map((tx) => tx.id));
-    // Combine unapproved transaction IDs and currently active resimulations
-    const allTransactionIds = new Set([
-        ...unapprovedTransactionIds,
-        ...__classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").keys(),
-    ]);
-    allTransactionIds.forEach((transactionId) => {
-        const transactionMeta = unapprovedTransactions.find((tx) => tx.id === transactionId);
-        if (transactionMeta?.isActive) {
-            __classPrivateFieldGet(this, _ResimulateHelper_instances, "m", _ResimulateHelper_start).call(this, transactionMeta);
-        }
-        else {
-            __classPrivateFieldGet(this, _ResimulateHelper_instances, "m", _ResimulateHelper_stop).call(this, transactionId);
-        }
-    });
-}, _ResimulateHelper_start = function _ResimulateHelper_start(transactionMeta) {
-    const { id: transactionId } = transactionMeta;
-    if (__classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").has(transactionId)) {
-        return;
-    }
-    const listener = () => {
-        // eslint-disable-next-line promise/catch-or-return
-        __classPrivateFieldGet(this, _ResimulateHelper_simulateTransaction, "f").call(this, transactionMeta)
-            .catch((error) => {
-            /* istanbul ignore next */
-            log('Error during transaction resimulation', error);
-        })
-            .finally(() => {
-            // Schedule the next execution
-            if (__classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").has(transactionId)) {
-                __classPrivateFieldGet(this, _ResimulateHelper_instances, "m", _ResimulateHelper_queueUpdate).call(this, transactionId, listener);
-            }
-        });
-    };
-    // Start the first execution
-    __classPrivateFieldGet(this, _ResimulateHelper_instances, "m", _ResimulateHelper_queueUpdate).call(this, transactionId, listener);
-    log(`Started resimulating transaction ${transactionId} every ${exports.RESIMULATE_INTERVAL_MS} milliseconds`);
-}, _ResimulateHelper_queueUpdate = function _ResimulateHelper_queueUpdate(transactionId, listener) {
-    const timeoutId = setTimeout(listener, exports.RESIMULATE_INTERVAL_MS);
-    __classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").set(transactionId, timeoutId);
-}, _ResimulateHelper_stop = function _ResimulateHelper_stop(transactionId) {
-    if (!__classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").has(transactionId)) {
-        return;
-    }
-    __classPrivateFieldGet(this, _ResimulateHelper_instances, "m", _ResimulateHelper_removeListener).call(this, transactionId);
-    log(`Stopped resimulating transaction ${transactionId} every ${exports.RESIMULATE_INTERVAL_MS} milliseconds`);
-}, _ResimulateHelper_removeListener = function _ResimulateHelper_removeListener(id) {
-    const timeoutId = __classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").get(id);
-    if (timeoutId) {
-        clearTimeout(timeoutId);
-        __classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").delete(id);
-    }
-};
-/**
- * Determine if a transaction should be resimulated.
- *
- * @param originalTransactionMeta - The original transaction metadata.
- * @param newTransactionMeta - The new transaction metadata.
- * @returns Whether the transaction should be resimulated.
- */
-function shouldResimulate(originalTransactionMeta, newTransactionMeta) {
-    const { id: transactionId } = newTransactionMeta;
-    const parametersUpdated = isParametersUpdated(originalTransactionMeta, newTransactionMeta);
-    const securityAlert = hasNewSecurityAlert(originalTransactionMeta, newTransactionMeta);
-    const valueAndNativeBalanceMismatch = hasValueAndNativeBalanceMismatch(originalTransactionMeta, newTransactionMeta);
-    const resimulate = parametersUpdated || securityAlert || valueAndNativeBalanceMismatch;
-    let blockTime;
-    if (securityAlert || valueAndNativeBalanceMismatch) {
-        const nowSeconds = Math.floor(Date.now() / 1000);
-        blockTime = nowSeconds + exports.BLOCK_TIME_ADDITIONAL_SECONDS;
-    }
-    if (resimulate) {
-        log('Transaction should be resimulated', {
-            transactionId,
-            blockTime,
-            parametersUpdated,
-            securityAlert,
-            valueAndNativeBalanceMismatch,
-        });
-    }
-    return {
-        blockTime,
-        resimulate,
-    };
-}
-exports.shouldResimulate = shouldResimulate;
-/**
- * Determine if the simulation data has changed.
- *
- * @param originalSimulationData - The original simulation data.
- * @param newSimulationData - The new simulation data.
- * @returns Whether the simulation data has changed.
- */
-function hasSimulationDataChanged(originalSimulationData, newSimulationData) {
-    if ((0, lodash_1.isEqual)(originalSimulationData, newSimulationData)) {
-        return false;
-    }
-    if (isBalanceChangeUpdated(originalSimulationData?.nativeBalanceChange, newSimulationData?.nativeBalanceChange)) {
-        log('Simulation data native balance changed');
-        return true;
-    }
-    if (originalSimulationData.tokenBalanceChanges.length !==
-        newSimulationData.tokenBalanceChanges.length) {
-        return true;
-    }
-    for (const originalTokenBalanceChange of originalSimulationData.tokenBalanceChanges) {
-        const newTokenBalanceChange = newSimulationData.tokenBalanceChanges.find(({ address, id }) => address === originalTokenBalanceChange.address &&
-            id === originalTokenBalanceChange.id);
-        if (!newTokenBalanceChange) {
-            log('Missing new token balance', {
-                address: originalTokenBalanceChange.address,
-                id: originalTokenBalanceChange.id,
-            });
-            return true;
-        }
-        if (isBalanceChangeUpdated(originalTokenBalanceChange, newTokenBalanceChange)) {
-            log('Simulation data token balance changed', {
-                originalTokenBalanceChange,
-                newTokenBalanceChange,
-            });
-            return true;
-        }
-    }
-    return false;
-}
-exports.hasSimulationDataChanged = hasSimulationDataChanged;
-/**
- * Determine if the transaction parameters have been updated.
- *
- * @param originalTransactionMeta - The original transaction metadata.
- * @param newTransactionMeta - The new transaction metadata.
- * @returns Whether the transaction parameters have been updated.
- */
-function isParametersUpdated(originalTransactionMeta, newTransactionMeta) {
-    const { id: transactionId, txParams: newParams } = newTransactionMeta;
-    const { txParams: originalParams } = originalTransactionMeta;
-    if (!originalParams || (0, lodash_1.isEqual)(originalParams, newParams)) {
-        return false;
-    }
-    const params = Object.keys(newParams);
-    const updatedProperties = params.filter((param) => newParams[param] !== originalParams[param]);
-    log('Transaction parameters updated', {
-        transactionId,
-        updatedProperties,
-        originalParams,
-        newParams,
-    });
-    return exports.RESIMULATE_PARAMS.some((param) => updatedProperties.includes(param));
-}
-/**
- * Determine if a transaction has a new security alert.
- *
- * @param originalTransactionMeta - The original transaction metadata.
- * @param newTransactionMeta - The new transaction metadata.
- * @returns Whether the transaction has a new security alert.
- */
-function hasNewSecurityAlert(originalTransactionMeta, newTransactionMeta) {
-    const { securityAlertResponse: originalSecurityAlertResponse } = originalTransactionMeta;
-    const { id: transactionId, securityAlertResponse: newSecurityAlertResponse } = newTransactionMeta;
-    if ((0, lodash_1.isEqual)(originalSecurityAlertResponse, newSecurityAlertResponse)) {
-        return false;
-    }
-    log('Security alert updated', {
-        transactionId,
-        originalSecurityAlertResponse,
-        newSecurityAlertResponse,
-    });
-    return (newSecurityAlertResponse?.result_type === exports.BLOCKAID_RESULT_TYPE_MALICIOUS);
-}
-/**
- * Determine if a transaction has a value and simulation native balance mismatch.
- *
- * @param originalTransactionMeta - The original transaction metadata.
- * @param newTransactionMeta - The new transaction metadata.
- * @returns Whether the transaction has a value and simulation native balance mismatch.
- */
-function hasValueAndNativeBalanceMismatch(originalTransactionMeta, newTransactionMeta) {
-    const { simulationData: originalSimulationData } = originalTransactionMeta;
-    const { simulationData: newSimulationData, txParams: newTxParams } = newTransactionMeta;
-    if (!newSimulationData ||
-        (0, lodash_1.isEqual)(originalSimulationData, newSimulationData)) {
-        return false;
-    }
-    const newValue = newTxParams?.value ?? '0x0';
-    const newNativeBalanceDifference = newSimulationData?.nativeBalanceChange?.difference ?? '0x0';
-    return !percentageChangeWithinThreshold(newValue, newNativeBalanceDifference, false, newSimulationData?.nativeBalanceChange?.isDecrease === false);
-}
-/**
- * Determine if a balance change has been updated.
- *
- * @param originalBalanceChange - The original balance change.
- * @param newBalanceChange - The new balance change.
- * @returns Whether the balance change has been updated.
- */
-function isBalanceChangeUpdated(originalBalanceChange, newBalanceChange) {
-    return !percentageChangeWithinThreshold(originalBalanceChange?.difference ?? '0x0', newBalanceChange?.difference ?? '0x0', originalBalanceChange?.isDecrease === false, newBalanceChange?.isDecrease === false);
-}
-/**
- * Determine if the percentage change between two values is within a threshold.
- *
- * @param originalValue - The original value.
- * @param newValue - The new value.
- * @param originalNegative - Whether the original value is negative.
- * @param newNegative - Whether the new value is negative.
- * @returns Whether the percentage change between the two values is within a threshold.
- */
-function percentageChangeWithinThreshold(originalValue, newValue, originalNegative, newNegative) {
-    let originalValueBN = new bn_js_1.BN((0, utils_1.remove0x)(originalValue), 'hex');
-    let newValueBN = new bn_js_1.BN((0, utils_1.remove0x)(newValue), 'hex');
-    if (originalNegative) {
-        originalValueBN = originalValueBN.neg();
-    }
-    if (newNegative) {
-        newValueBN = newValueBN.neg();
-    }
-    return ((0, utils_2.getPercentageChange)(originalValueBN, newValueBN) <=
-        exports.VALUE_COMPARISON_PERCENT_THRESHOLD);
-}
-//# sourceMappingURL=ResimulateHelper.cjs.map
\ No newline at end of file
diff --git a/dist/helpers/ResimulateHelper.cjs.map b/dist/helpers/ResimulateHelper.cjs.map
deleted file mode 100644
index fee37e0b895d791ca4dae59075314b6bde561ca9..0000000000000000000000000000000000000000
--- a/dist/helpers/ResimulateHelper.cjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"ResimulateHelper.cjs","sourceRoot":"","sources":["../../src/helpers/ResimulateHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Hex } from '@metamask/utils';\nimport { remove0x } from '@metamask/utils';\nimport { BN } from 'bn.js';\nimport { isEqual } from 'lodash';\n\nimport { createModuleLogger, projectLogger } from '../logger';\nimport { TransactionStatus } from '../types';\nimport type {\n  SimulationBalanceChange,\n  SimulationData,\n  TransactionMeta,\n  TransactionParams,\n} from '../types';\nimport { getPercentageChange } from '../utils/utils';\n\nconst log = createModuleLogger(projectLogger, 'resimulate-helper');\n\nexport const RESIMULATE_PARAMS = ['to', 'value', 'data'] as const;\nexport const BLOCKAID_RESULT_TYPE_MALICIOUS = 'Malicious';\nexport const VALUE_COMPARISON_PERCENT_THRESHOLD = 5;\nexport const BLOCK_TIME_ADDITIONAL_SECONDS = 60;\nexport const RESIMULATE_INTERVAL_MS = 3000;\n\nexport type ResimulateResponse = {\n  blockTime?: number;\n  resimulate: boolean;\n};\n\nexport type ResimulateHelperOptions = {\n  getTransactions: () => TransactionMeta[];\n  onTransactionsUpdate: (listener: () => void) => void;\n  simulateTransaction: (transactionMeta: TransactionMeta) => Promise<void>;\n};\n\nexport class ResimulateHelper {\n  // Map of transactionId <=> timeoutId\n  readonly #timeoutIds: Map<string, NodeJS.Timeout> = new Map();\n\n  readonly #getTransactions: () => TransactionMeta[];\n\n  readonly #simulateTransaction: (\n    transactionMeta: TransactionMeta,\n  ) => Promise<void>;\n\n  constructor({\n    getTransactions,\n    simulateTransaction,\n    onTransactionsUpdate,\n  }: ResimulateHelperOptions) {\n    this.#getTransactions = getTransactions;\n    this.#simulateTransaction = simulateTransaction;\n\n    onTransactionsUpdate(this.#onTransactionsUpdate.bind(this));\n  }\n\n  #onTransactionsUpdate() {\n    const unapprovedTransactions = this.#getTransactions().filter(\n      (tx) => tx.status === TransactionStatus.unapproved,\n    );\n\n    const unapprovedTransactionIds = new Set(\n      unapprovedTransactions.map((tx) => tx.id),\n    );\n\n    // Combine unapproved transaction IDs and currently active resimulations\n    const allTransactionIds = new Set([\n      ...unapprovedTransactionIds,\n      ...this.#timeoutIds.keys(),\n    ]);\n\n    allTransactionIds.forEach((transactionId) => {\n      const transactionMeta = unapprovedTransactions.find(\n        (tx) => tx.id === transactionId,\n      ) as TransactionMeta;\n\n      if (transactionMeta?.isActive) {\n        this.#start(transactionMeta);\n      } else {\n        this.#stop(transactionId);\n      }\n    });\n  }\n\n  #start(transactionMeta: TransactionMeta) {\n    const { id: transactionId } = transactionMeta;\n    if (this.#timeoutIds.has(transactionId)) {\n      return;\n    }\n\n    const listener = () => {\n      // eslint-disable-next-line promise/catch-or-return\n      this.#simulateTransaction(transactionMeta)\n        .catch((error) => {\n          /* istanbul ignore next */\n          log('Error during transaction resimulation', error);\n        })\n        .finally(() => {\n          // Schedule the next execution\n          if (this.#timeoutIds.has(transactionId)) {\n            this.#queueUpdate(transactionId, listener);\n          }\n        });\n    };\n\n    // Start the first execution\n    this.#queueUpdate(transactionId, listener);\n    log(\n      `Started resimulating transaction ${transactionId} every ${RESIMULATE_INTERVAL_MS} milliseconds`,\n    );\n  }\n\n  #queueUpdate(transactionId: string, listener: () => void) {\n    const timeoutId = setTimeout(listener, RESIMULATE_INTERVAL_MS);\n    this.#timeoutIds.set(transactionId, timeoutId);\n  }\n\n  #stop(transactionId: string) {\n    if (!this.#timeoutIds.has(transactionId)) {\n      return;\n    }\n\n    this.#removeListener(transactionId);\n    log(\n      `Stopped resimulating transaction ${transactionId} every ${RESIMULATE_INTERVAL_MS} milliseconds`,\n    );\n  }\n\n  #removeListener(id: string) {\n    const timeoutId = this.#timeoutIds.get(id);\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      this.#timeoutIds.delete(id);\n    }\n  }\n}\n\n/**\n * Determine if a transaction should be resimulated.\n *\n * @param originalTransactionMeta - The original transaction metadata.\n * @param newTransactionMeta - The new transaction metadata.\n * @returns Whether the transaction should be resimulated.\n */\nexport function shouldResimulate(\n  originalTransactionMeta: TransactionMeta,\n  newTransactionMeta: TransactionMeta,\n) {\n  const { id: transactionId } = newTransactionMeta;\n\n  const parametersUpdated = isParametersUpdated(\n    originalTransactionMeta,\n    newTransactionMeta,\n  );\n\n  const securityAlert = hasNewSecurityAlert(\n    originalTransactionMeta,\n    newTransactionMeta,\n  );\n\n  const valueAndNativeBalanceMismatch = hasValueAndNativeBalanceMismatch(\n    originalTransactionMeta,\n    newTransactionMeta,\n  );\n\n  const resimulate =\n    parametersUpdated || securityAlert || valueAndNativeBalanceMismatch;\n\n  let blockTime: number | undefined;\n\n  if (securityAlert || valueAndNativeBalanceMismatch) {\n    const nowSeconds = Math.floor(Date.now() / 1000);\n    blockTime = nowSeconds + BLOCK_TIME_ADDITIONAL_SECONDS;\n  }\n\n  if (resimulate) {\n    log('Transaction should be resimulated', {\n      transactionId,\n      blockTime,\n      parametersUpdated,\n      securityAlert,\n      valueAndNativeBalanceMismatch,\n    });\n  }\n\n  return {\n    blockTime,\n    resimulate,\n  };\n}\n\n/**\n * Determine if the simulation data has changed.\n *\n * @param originalSimulationData - The original simulation data.\n * @param newSimulationData - The new simulation data.\n * @returns Whether the simulation data has changed.\n */\nexport function hasSimulationDataChanged(\n  originalSimulationData: SimulationData,\n  newSimulationData: SimulationData,\n): boolean {\n  if (isEqual(originalSimulationData, newSimulationData)) {\n    return false;\n  }\n\n  if (\n    isBalanceChangeUpdated(\n      originalSimulationData?.nativeBalanceChange,\n      newSimulationData?.nativeBalanceChange,\n    )\n  ) {\n    log('Simulation data native balance changed');\n    return true;\n  }\n\n  if (\n    originalSimulationData.tokenBalanceChanges.length !==\n    newSimulationData.tokenBalanceChanges.length\n  ) {\n    return true;\n  }\n\n  for (const originalTokenBalanceChange of originalSimulationData.tokenBalanceChanges) {\n    const newTokenBalanceChange = newSimulationData.tokenBalanceChanges.find(\n      ({ address, id }) =>\n        address === originalTokenBalanceChange.address &&\n        id === originalTokenBalanceChange.id,\n    );\n\n    if (!newTokenBalanceChange) {\n      log('Missing new token balance', {\n        address: originalTokenBalanceChange.address,\n        id: originalTokenBalanceChange.id,\n      });\n\n      return true;\n    }\n\n    if (\n      isBalanceChangeUpdated(originalTokenBalanceChange, newTokenBalanceChange)\n    ) {\n      log('Simulation data token balance changed', {\n        originalTokenBalanceChange,\n        newTokenBalanceChange,\n      });\n\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Determine if the transaction parameters have been updated.\n *\n * @param originalTransactionMeta - The original transaction metadata.\n * @param newTransactionMeta - The new transaction metadata.\n * @returns Whether the transaction parameters have been updated.\n */\nfunction isParametersUpdated(\n  originalTransactionMeta: TransactionMeta,\n  newTransactionMeta: TransactionMeta,\n): boolean {\n  const { id: transactionId, txParams: newParams } = newTransactionMeta;\n  const { txParams: originalParams } = originalTransactionMeta;\n\n  if (!originalParams || isEqual(originalParams, newParams)) {\n    return false;\n  }\n\n  const params = Object.keys(newParams) as (keyof TransactionParams)[];\n\n  const updatedProperties = params.filter(\n    (param) => newParams[param] !== originalParams[param],\n  );\n\n  log('Transaction parameters updated', {\n    transactionId,\n    updatedProperties,\n    originalParams,\n    newParams,\n  });\n\n  return RESIMULATE_PARAMS.some((param) => updatedProperties.includes(param));\n}\n\n/**\n * Determine if a transaction has a new security alert.\n *\n * @param originalTransactionMeta - The original transaction metadata.\n * @param newTransactionMeta - The new transaction metadata.\n * @returns Whether the transaction has a new security alert.\n */\nfunction hasNewSecurityAlert(\n  originalTransactionMeta: TransactionMeta,\n  newTransactionMeta: TransactionMeta,\n): boolean {\n  const { securityAlertResponse: originalSecurityAlertResponse } =\n    originalTransactionMeta;\n\n  const { id: transactionId, securityAlertResponse: newSecurityAlertResponse } =\n    newTransactionMeta;\n\n  if (isEqual(originalSecurityAlertResponse, newSecurityAlertResponse)) {\n    return false;\n  }\n\n  log('Security alert updated', {\n    transactionId,\n    originalSecurityAlertResponse,\n    newSecurityAlertResponse,\n  });\n\n  return (\n    newSecurityAlertResponse?.result_type === BLOCKAID_RESULT_TYPE_MALICIOUS\n  );\n}\n\n/**\n * Determine if a transaction has a value and simulation native balance mismatch.\n *\n * @param originalTransactionMeta - The original transaction metadata.\n * @param newTransactionMeta - The new transaction metadata.\n * @returns Whether the transaction has a value and simulation native balance mismatch.\n */\nfunction hasValueAndNativeBalanceMismatch(\n  originalTransactionMeta: TransactionMeta,\n  newTransactionMeta: TransactionMeta,\n): boolean {\n  const { simulationData: originalSimulationData } = originalTransactionMeta;\n\n  const { simulationData: newSimulationData, txParams: newTxParams } =\n    newTransactionMeta;\n\n  if (\n    !newSimulationData ||\n    isEqual(originalSimulationData, newSimulationData)\n  ) {\n    return false;\n  }\n\n  const newValue = newTxParams?.value ?? '0x0';\n\n  const newNativeBalanceDifference =\n    newSimulationData?.nativeBalanceChange?.difference ?? '0x0';\n\n  return !percentageChangeWithinThreshold(\n    newValue as Hex,\n    newNativeBalanceDifference,\n    false,\n    newSimulationData?.nativeBalanceChange?.isDecrease === false,\n  );\n}\n\n/**\n * Determine if a balance change has been updated.\n *\n * @param originalBalanceChange - The original balance change.\n * @param newBalanceChange - The new balance change.\n * @returns Whether the balance change has been updated.\n */\nfunction isBalanceChangeUpdated(\n  originalBalanceChange?: SimulationBalanceChange,\n  newBalanceChange?: SimulationBalanceChange,\n): boolean {\n  return !percentageChangeWithinThreshold(\n    originalBalanceChange?.difference ?? '0x0',\n    newBalanceChange?.difference ?? '0x0',\n    originalBalanceChange?.isDecrease === false,\n    newBalanceChange?.isDecrease === false,\n  );\n}\n\n/**\n * Determine if the percentage change between two values is within a threshold.\n *\n * @param originalValue - The original value.\n * @param newValue - The new value.\n * @param originalNegative - Whether the original value is negative.\n * @param newNegative - Whether the new value is negative.\n * @returns Whether the percentage change between the two values is within a threshold.\n */\nfunction percentageChangeWithinThreshold(\n  originalValue: Hex,\n  newValue: Hex,\n  originalNegative?: boolean,\n  newNegative?: boolean,\n): boolean {\n  let originalValueBN = new BN(remove0x(originalValue), 'hex');\n  let newValueBN = new BN(remove0x(newValue), 'hex');\n\n  if (originalNegative) {\n    originalValueBN = originalValueBN.neg();\n  }\n\n  if (newNegative) {\n    newValueBN = newValueBN.neg();\n  }\n\n  return (\n    getPercentageChange(originalValueBN, newValueBN) <=\n    VALUE_COMPARISON_PERCENT_THRESHOLD\n  );\n}\n"]}
\ No newline at end of file
diff --git a/dist/helpers/ResimulateHelper.d.cts b/dist/helpers/ResimulateHelper.d.cts
deleted file mode 100644
index c01189024d6af4316afa1fd80ca83421268c6d41..0000000000000000000000000000000000000000
--- a/dist/helpers/ResimulateHelper.d.cts
+++ /dev/null
@@ -1,39 +0,0 @@
-import type { SimulationData, TransactionMeta } from "../types.cjs";
-export declare const RESIMULATE_PARAMS: readonly ["to", "value", "data"];
-export declare const BLOCKAID_RESULT_TYPE_MALICIOUS = "Malicious";
-export declare const VALUE_COMPARISON_PERCENT_THRESHOLD = 5;
-export declare const BLOCK_TIME_ADDITIONAL_SECONDS = 60;
-export declare const RESIMULATE_INTERVAL_MS = 3000;
-export type ResimulateResponse = {
-    blockTime?: number;
-    resimulate: boolean;
-};
-export type ResimulateHelperOptions = {
-    getTransactions: () => TransactionMeta[];
-    onTransactionsUpdate: (listener: () => void) => void;
-    simulateTransaction: (transactionMeta: TransactionMeta) => Promise<void>;
-};
-export declare class ResimulateHelper {
-    #private;
-    constructor({ getTransactions, simulateTransaction, onTransactionsUpdate, }: ResimulateHelperOptions);
-}
-/**
- * Determine if a transaction should be resimulated.
- *
- * @param originalTransactionMeta - The original transaction metadata.
- * @param newTransactionMeta - The new transaction metadata.
- * @returns Whether the transaction should be resimulated.
- */
-export declare function shouldResimulate(originalTransactionMeta: TransactionMeta, newTransactionMeta: TransactionMeta): {
-    blockTime: number | undefined;
-    resimulate: boolean;
-};
-/**
- * Determine if the simulation data has changed.
- *
- * @param originalSimulationData - The original simulation data.
- * @param newSimulationData - The new simulation data.
- * @returns Whether the simulation data has changed.
- */
-export declare function hasSimulationDataChanged(originalSimulationData: SimulationData, newSimulationData: SimulationData): boolean;
-//# sourceMappingURL=ResimulateHelper.d.cts.map
\ No newline at end of file
diff --git a/dist/helpers/ResimulateHelper.d.cts.map b/dist/helpers/ResimulateHelper.d.cts.map
deleted file mode 100644
index c244e888cf7d9c78bba05674c2051eb88a6261dc..0000000000000000000000000000000000000000
--- a/dist/helpers/ResimulateHelper.d.cts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"ResimulateHelper.d.cts","sourceRoot":"","sources":["../../src/helpers/ResimulateHelper.ts"],"names":[],"mappings":"AAOA,OAAO,KAAK,EAEV,cAAc,EACd,eAAe,EAEhB,qBAAiB;AAKlB,eAAO,MAAM,iBAAiB,kCAAmC,CAAC;AAClE,eAAO,MAAM,8BAA8B,cAAc,CAAC;AAC1D,eAAO,MAAM,kCAAkC,IAAI,CAAC;AACpD,eAAO,MAAM,6BAA6B,KAAK,CAAC;AAChD,eAAO,MAAM,sBAAsB,OAAO,CAAC;AAE3C,MAAM,MAAM,kBAAkB,GAAG;IAC/B,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,UAAU,EAAE,OAAO,CAAC;CACrB,CAAC;AAEF,MAAM,MAAM,uBAAuB,GAAG;IACpC,eAAe,EAAE,MAAM,eAAe,EAAE,CAAC;IACzC,oBAAoB,EAAE,CAAC,QAAQ,EAAE,MAAM,IAAI,KAAK,IAAI,CAAC;IACrD,mBAAmB,EAAE,CAAC,eAAe,EAAE,eAAe,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC;CAC1E,CAAC;AAEF,qBAAa,gBAAgB;;gBAUf,EACV,eAAe,EACf,mBAAmB,EACnB,oBAAoB,GACrB,EAAE,uBAAuB;CAsF3B;AAED;;;;;;GAMG;AACH,wBAAgB,gBAAgB,CAC9B,uBAAuB,EAAE,eAAe,EACxC,kBAAkB,EAAE,eAAe;;;EA2CpC;AAED;;;;;;GAMG;AACH,wBAAgB,wBAAwB,CACtC,sBAAsB,EAAE,cAAc,EACtC,iBAAiB,EAAE,cAAc,GAChC,OAAO,CAmDT"}
\ No newline at end of file
diff --git a/dist/helpers/ResimulateHelper.d.mts b/dist/helpers/ResimulateHelper.d.mts
deleted file mode 100644
index 97bd9c1fd9990beab12deb1adb5a99e79b12bc0d..0000000000000000000000000000000000000000
--- a/dist/helpers/ResimulateHelper.d.mts
+++ /dev/null
@@ -1,39 +0,0 @@
-import type { SimulationData, TransactionMeta } from "../types.mjs";
-export declare const RESIMULATE_PARAMS: readonly ["to", "value", "data"];
-export declare const BLOCKAID_RESULT_TYPE_MALICIOUS = "Malicious";
-export declare const VALUE_COMPARISON_PERCENT_THRESHOLD = 5;
-export declare const BLOCK_TIME_ADDITIONAL_SECONDS = 60;
-export declare const RESIMULATE_INTERVAL_MS = 3000;
-export type ResimulateResponse = {
-    blockTime?: number;
-    resimulate: boolean;
-};
-export type ResimulateHelperOptions = {
-    getTransactions: () => TransactionMeta[];
-    onTransactionsUpdate: (listener: () => void) => void;
-    simulateTransaction: (transactionMeta: TransactionMeta) => Promise<void>;
-};
-export declare class ResimulateHelper {
-    #private;
-    constructor({ getTransactions, simulateTransaction, onTransactionsUpdate, }: ResimulateHelperOptions);
-}
-/**
- * Determine if a transaction should be resimulated.
- *
- * @param originalTransactionMeta - The original transaction metadata.
- * @param newTransactionMeta - The new transaction metadata.
- * @returns Whether the transaction should be resimulated.
- */
-export declare function shouldResimulate(originalTransactionMeta: TransactionMeta, newTransactionMeta: TransactionMeta): {
-    blockTime: number | undefined;
-    resimulate: boolean;
-};
-/**
- * Determine if the simulation data has changed.
- *
- * @param originalSimulationData - The original simulation data.
- * @param newSimulationData - The new simulation data.
- * @returns Whether the simulation data has changed.
- */
-export declare function hasSimulationDataChanged(originalSimulationData: SimulationData, newSimulationData: SimulationData): boolean;
-//# sourceMappingURL=ResimulateHelper.d.mts.map
\ No newline at end of file
diff --git a/dist/helpers/ResimulateHelper.d.mts.map b/dist/helpers/ResimulateHelper.d.mts.map
deleted file mode 100644
index ef82323581617432fb5f0a3f3235a88a6e95ad55..0000000000000000000000000000000000000000
--- a/dist/helpers/ResimulateHelper.d.mts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"ResimulateHelper.d.mts","sourceRoot":"","sources":["../../src/helpers/ResimulateHelper.ts"],"names":[],"mappings":"AAOA,OAAO,KAAK,EAEV,cAAc,EACd,eAAe,EAEhB,qBAAiB;AAKlB,eAAO,MAAM,iBAAiB,kCAAmC,CAAC;AAClE,eAAO,MAAM,8BAA8B,cAAc,CAAC;AAC1D,eAAO,MAAM,kCAAkC,IAAI,CAAC;AACpD,eAAO,MAAM,6BAA6B,KAAK,CAAC;AAChD,eAAO,MAAM,sBAAsB,OAAO,CAAC;AAE3C,MAAM,MAAM,kBAAkB,GAAG;IAC/B,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,UAAU,EAAE,OAAO,CAAC;CACrB,CAAC;AAEF,MAAM,MAAM,uBAAuB,GAAG;IACpC,eAAe,EAAE,MAAM,eAAe,EAAE,CAAC;IACzC,oBAAoB,EAAE,CAAC,QAAQ,EAAE,MAAM,IAAI,KAAK,IAAI,CAAC;IACrD,mBAAmB,EAAE,CAAC,eAAe,EAAE,eAAe,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC;CAC1E,CAAC;AAEF,qBAAa,gBAAgB;;gBAUf,EACV,eAAe,EACf,mBAAmB,EACnB,oBAAoB,GACrB,EAAE,uBAAuB;CAsF3B;AAED;;;;;;GAMG;AACH,wBAAgB,gBAAgB,CAC9B,uBAAuB,EAAE,eAAe,EACxC,kBAAkB,EAAE,eAAe;;;EA2CpC;AAED;;;;;;GAMG;AACH,wBAAgB,wBAAwB,CACtC,sBAAsB,EAAE,cAAc,EACtC,iBAAiB,EAAE,cAAc,GAChC,OAAO,CAmDT"}
\ No newline at end of file
diff --git a/dist/helpers/ResimulateHelper.mjs b/dist/helpers/ResimulateHelper.mjs
deleted file mode 100644
index d641c680930df78fc74fff8a8f9308030fa94889..0000000000000000000000000000000000000000
--- a/dist/helpers/ResimulateHelper.mjs
+++ /dev/null
@@ -1,256 +0,0 @@
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _ResimulateHelper_instances, _ResimulateHelper_timeoutIds, _ResimulateHelper_getTransactions, _ResimulateHelper_simulateTransaction, _ResimulateHelper_onTransactionsUpdate, _ResimulateHelper_start, _ResimulateHelper_queueUpdate, _ResimulateHelper_stop, _ResimulateHelper_removeListener;
-import { remove0x } from "@metamask/utils";
-import { BN } from "bn.js";
-import $lodash from "lodash";
-const { isEqual } = $lodash;
-import { createModuleLogger, projectLogger } from "../logger.mjs";
-import { TransactionStatus } from "../types.mjs";
-import { getPercentageChange } from "../utils/utils.mjs";
-const log = createModuleLogger(projectLogger, 'resimulate-helper');
-export const RESIMULATE_PARAMS = ['to', 'value', 'data'];
-export const BLOCKAID_RESULT_TYPE_MALICIOUS = 'Malicious';
-export const VALUE_COMPARISON_PERCENT_THRESHOLD = 5;
-export const BLOCK_TIME_ADDITIONAL_SECONDS = 60;
-export const RESIMULATE_INTERVAL_MS = 3000;
-export class ResimulateHelper {
-    constructor({ getTransactions, simulateTransaction, onTransactionsUpdate, }) {
-        _ResimulateHelper_instances.add(this);
-        // Map of transactionId <=> timeoutId
-        _ResimulateHelper_timeoutIds.set(this, new Map());
-        _ResimulateHelper_getTransactions.set(this, void 0);
-        _ResimulateHelper_simulateTransaction.set(this, void 0);
-        __classPrivateFieldSet(this, _ResimulateHelper_getTransactions, getTransactions, "f");
-        __classPrivateFieldSet(this, _ResimulateHelper_simulateTransaction, simulateTransaction, "f");
-        onTransactionsUpdate(__classPrivateFieldGet(this, _ResimulateHelper_instances, "m", _ResimulateHelper_onTransactionsUpdate).bind(this));
-    }
-}
-_ResimulateHelper_timeoutIds = new WeakMap(), _ResimulateHelper_getTransactions = new WeakMap(), _ResimulateHelper_simulateTransaction = new WeakMap(), _ResimulateHelper_instances = new WeakSet(), _ResimulateHelper_onTransactionsUpdate = function _ResimulateHelper_onTransactionsUpdate() {
-    const unapprovedTransactions = __classPrivateFieldGet(this, _ResimulateHelper_getTransactions, "f").call(this).filter((tx) => tx.status === TransactionStatus.unapproved);
-    const unapprovedTransactionIds = new Set(unapprovedTransactions.map((tx) => tx.id));
-    // Combine unapproved transaction IDs and currently active resimulations
-    const allTransactionIds = new Set([
-        ...unapprovedTransactionIds,
-        ...__classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").keys(),
-    ]);
-    allTransactionIds.forEach((transactionId) => {
-        const transactionMeta = unapprovedTransactions.find((tx) => tx.id === transactionId);
-        if (transactionMeta?.isActive) {
-            __classPrivateFieldGet(this, _ResimulateHelper_instances, "m", _ResimulateHelper_start).call(this, transactionMeta);
-        }
-        else {
-            __classPrivateFieldGet(this, _ResimulateHelper_instances, "m", _ResimulateHelper_stop).call(this, transactionId);
-        }
-    });
-}, _ResimulateHelper_start = function _ResimulateHelper_start(transactionMeta) {
-    const { id: transactionId } = transactionMeta;
-    if (__classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").has(transactionId)) {
-        return;
-    }
-    const listener = () => {
-        // eslint-disable-next-line promise/catch-or-return
-        __classPrivateFieldGet(this, _ResimulateHelper_simulateTransaction, "f").call(this, transactionMeta)
-            .catch((error) => {
-            /* istanbul ignore next */
-            log('Error during transaction resimulation', error);
-        })
-            .finally(() => {
-            // Schedule the next execution
-            if (__classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").has(transactionId)) {
-                __classPrivateFieldGet(this, _ResimulateHelper_instances, "m", _ResimulateHelper_queueUpdate).call(this, transactionId, listener);
-            }
-        });
-    };
-    // Start the first execution
-    __classPrivateFieldGet(this, _ResimulateHelper_instances, "m", _ResimulateHelper_queueUpdate).call(this, transactionId, listener);
-    log(`Started resimulating transaction ${transactionId} every ${RESIMULATE_INTERVAL_MS} milliseconds`);
-}, _ResimulateHelper_queueUpdate = function _ResimulateHelper_queueUpdate(transactionId, listener) {
-    const timeoutId = setTimeout(listener, RESIMULATE_INTERVAL_MS);
-    __classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").set(transactionId, timeoutId);
-}, _ResimulateHelper_stop = function _ResimulateHelper_stop(transactionId) {
-    if (!__classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").has(transactionId)) {
-        return;
-    }
-    __classPrivateFieldGet(this, _ResimulateHelper_instances, "m", _ResimulateHelper_removeListener).call(this, transactionId);
-    log(`Stopped resimulating transaction ${transactionId} every ${RESIMULATE_INTERVAL_MS} milliseconds`);
-}, _ResimulateHelper_removeListener = function _ResimulateHelper_removeListener(id) {
-    const timeoutId = __classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").get(id);
-    if (timeoutId) {
-        clearTimeout(timeoutId);
-        __classPrivateFieldGet(this, _ResimulateHelper_timeoutIds, "f").delete(id);
-    }
-};
-/**
- * Determine if a transaction should be resimulated.
- *
- * @param originalTransactionMeta - The original transaction metadata.
- * @param newTransactionMeta - The new transaction metadata.
- * @returns Whether the transaction should be resimulated.
- */
-export function shouldResimulate(originalTransactionMeta, newTransactionMeta) {
-    const { id: transactionId } = newTransactionMeta;
-    const parametersUpdated = isParametersUpdated(originalTransactionMeta, newTransactionMeta);
-    const securityAlert = hasNewSecurityAlert(originalTransactionMeta, newTransactionMeta);
-    const valueAndNativeBalanceMismatch = hasValueAndNativeBalanceMismatch(originalTransactionMeta, newTransactionMeta);
-    const resimulate = parametersUpdated || securityAlert || valueAndNativeBalanceMismatch;
-    let blockTime;
-    if (securityAlert || valueAndNativeBalanceMismatch) {
-        const nowSeconds = Math.floor(Date.now() / 1000);
-        blockTime = nowSeconds + BLOCK_TIME_ADDITIONAL_SECONDS;
-    }
-    if (resimulate) {
-        log('Transaction should be resimulated', {
-            transactionId,
-            blockTime,
-            parametersUpdated,
-            securityAlert,
-            valueAndNativeBalanceMismatch,
-        });
-    }
-    return {
-        blockTime,
-        resimulate,
-    };
-}
-/**
- * Determine if the simulation data has changed.
- *
- * @param originalSimulationData - The original simulation data.
- * @param newSimulationData - The new simulation data.
- * @returns Whether the simulation data has changed.
- */
-export function hasSimulationDataChanged(originalSimulationData, newSimulationData) {
-    if (isEqual(originalSimulationData, newSimulationData)) {
-        return false;
-    }
-    if (isBalanceChangeUpdated(originalSimulationData?.nativeBalanceChange, newSimulationData?.nativeBalanceChange)) {
-        log('Simulation data native balance changed');
-        return true;
-    }
-    if (originalSimulationData.tokenBalanceChanges.length !==
-        newSimulationData.tokenBalanceChanges.length) {
-        return true;
-    }
-    for (const originalTokenBalanceChange of originalSimulationData.tokenBalanceChanges) {
-        const newTokenBalanceChange = newSimulationData.tokenBalanceChanges.find(({ address, id }) => address === originalTokenBalanceChange.address &&
-            id === originalTokenBalanceChange.id);
-        if (!newTokenBalanceChange) {
-            log('Missing new token balance', {
-                address: originalTokenBalanceChange.address,
-                id: originalTokenBalanceChange.id,
-            });
-            return true;
-        }
-        if (isBalanceChangeUpdated(originalTokenBalanceChange, newTokenBalanceChange)) {
-            log('Simulation data token balance changed', {
-                originalTokenBalanceChange,
-                newTokenBalanceChange,
-            });
-            return true;
-        }
-    }
-    return false;
-}
-/**
- * Determine if the transaction parameters have been updated.
- *
- * @param originalTransactionMeta - The original transaction metadata.
- * @param newTransactionMeta - The new transaction metadata.
- * @returns Whether the transaction parameters have been updated.
- */
-function isParametersUpdated(originalTransactionMeta, newTransactionMeta) {
-    const { id: transactionId, txParams: newParams } = newTransactionMeta;
-    const { txParams: originalParams } = originalTransactionMeta;
-    if (!originalParams || isEqual(originalParams, newParams)) {
-        return false;
-    }
-    const params = Object.keys(newParams);
-    const updatedProperties = params.filter((param) => newParams[param] !== originalParams[param]);
-    log('Transaction parameters updated', {
-        transactionId,
-        updatedProperties,
-        originalParams,
-        newParams,
-    });
-    return RESIMULATE_PARAMS.some((param) => updatedProperties.includes(param));
-}
-/**
- * Determine if a transaction has a new security alert.
- *
- * @param originalTransactionMeta - The original transaction metadata.
- * @param newTransactionMeta - The new transaction metadata.
- * @returns Whether the transaction has a new security alert.
- */
-function hasNewSecurityAlert(originalTransactionMeta, newTransactionMeta) {
-    const { securityAlertResponse: originalSecurityAlertResponse } = originalTransactionMeta;
-    const { id: transactionId, securityAlertResponse: newSecurityAlertResponse } = newTransactionMeta;
-    if (isEqual(originalSecurityAlertResponse, newSecurityAlertResponse)) {
-        return false;
-    }
-    log('Security alert updated', {
-        transactionId,
-        originalSecurityAlertResponse,
-        newSecurityAlertResponse,
-    });
-    return (newSecurityAlertResponse?.result_type === BLOCKAID_RESULT_TYPE_MALICIOUS);
-}
-/**
- * Determine if a transaction has a value and simulation native balance mismatch.
- *
- * @param originalTransactionMeta - The original transaction metadata.
- * @param newTransactionMeta - The new transaction metadata.
- * @returns Whether the transaction has a value and simulation native balance mismatch.
- */
-function hasValueAndNativeBalanceMismatch(originalTransactionMeta, newTransactionMeta) {
-    const { simulationData: originalSimulationData } = originalTransactionMeta;
-    const { simulationData: newSimulationData, txParams: newTxParams } = newTransactionMeta;
-    if (!newSimulationData ||
-        isEqual(originalSimulationData, newSimulationData)) {
-        return false;
-    }
-    const newValue = newTxParams?.value ?? '0x0';
-    const newNativeBalanceDifference = newSimulationData?.nativeBalanceChange?.difference ?? '0x0';
-    return !percentageChangeWithinThreshold(newValue, newNativeBalanceDifference, false, newSimulationData?.nativeBalanceChange?.isDecrease === false);
-}
-/**
- * Determine if a balance change has been updated.
- *
- * @param originalBalanceChange - The original balance change.
- * @param newBalanceChange - The new balance change.
- * @returns Whether the balance change has been updated.
- */
-function isBalanceChangeUpdated(originalBalanceChange, newBalanceChange) {
-    return !percentageChangeWithinThreshold(originalBalanceChange?.difference ?? '0x0', newBalanceChange?.difference ?? '0x0', originalBalanceChange?.isDecrease === false, newBalanceChange?.isDecrease === false);
-}
-/**
- * Determine if the percentage change between two values is within a threshold.
- *
- * @param originalValue - The original value.
- * @param newValue - The new value.
- * @param originalNegative - Whether the original value is negative.
- * @param newNegative - Whether the new value is negative.
- * @returns Whether the percentage change between the two values is within a threshold.
- */
-function percentageChangeWithinThreshold(originalValue, newValue, originalNegative, newNegative) {
-    let originalValueBN = new BN(remove0x(originalValue), 'hex');
-    let newValueBN = new BN(remove0x(newValue), 'hex');
-    if (originalNegative) {
-        originalValueBN = originalValueBN.neg();
-    }
-    if (newNegative) {
-        newValueBN = newValueBN.neg();
-    }
-    return (getPercentageChange(originalValueBN, newValueBN) <=
-        VALUE_COMPARISON_PERCENT_THRESHOLD);
-}
-//# sourceMappingURL=ResimulateHelper.mjs.map
\ No newline at end of file
diff --git a/dist/helpers/ResimulateHelper.mjs.map b/dist/helpers/ResimulateHelper.mjs.map
deleted file mode 100644
index 3c3110154046af2d7ceab2fcb653c6c6cfe07961..0000000000000000000000000000000000000000
--- a/dist/helpers/ResimulateHelper.mjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"ResimulateHelper.mjs","sourceRoot":"","sources":["../../src/helpers/ResimulateHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Hex } from '@metamask/utils';\nimport { remove0x } from '@metamask/utils';\nimport { BN } from 'bn.js';\nimport { isEqual } from 'lodash';\n\nimport { createModuleLogger, projectLogger } from '../logger';\nimport { TransactionStatus } from '../types';\nimport type {\n  SimulationBalanceChange,\n  SimulationData,\n  TransactionMeta,\n  TransactionParams,\n} from '../types';\nimport { getPercentageChange } from '../utils/utils';\n\nconst log = createModuleLogger(projectLogger, 'resimulate-helper');\n\nexport const RESIMULATE_PARAMS = ['to', 'value', 'data'] as const;\nexport const BLOCKAID_RESULT_TYPE_MALICIOUS = 'Malicious';\nexport const VALUE_COMPARISON_PERCENT_THRESHOLD = 5;\nexport const BLOCK_TIME_ADDITIONAL_SECONDS = 60;\nexport const RESIMULATE_INTERVAL_MS = 3000;\n\nexport type ResimulateResponse = {\n  blockTime?: number;\n  resimulate: boolean;\n};\n\nexport type ResimulateHelperOptions = {\n  getTransactions: () => TransactionMeta[];\n  onTransactionsUpdate: (listener: () => void) => void;\n  simulateTransaction: (transactionMeta: TransactionMeta) => Promise<void>;\n};\n\nexport class ResimulateHelper {\n  // Map of transactionId <=> timeoutId\n  readonly #timeoutIds: Map<string, NodeJS.Timeout> = new Map();\n\n  readonly #getTransactions: () => TransactionMeta[];\n\n  readonly #simulateTransaction: (\n    transactionMeta: TransactionMeta,\n  ) => Promise<void>;\n\n  constructor({\n    getTransactions,\n    simulateTransaction,\n    onTransactionsUpdate,\n  }: ResimulateHelperOptions) {\n    this.#getTransactions = getTransactions;\n    this.#simulateTransaction = simulateTransaction;\n\n    onTransactionsUpdate(this.#onTransactionsUpdate.bind(this));\n  }\n\n  #onTransactionsUpdate() {\n    const unapprovedTransactions = this.#getTransactions().filter(\n      (tx) => tx.status === TransactionStatus.unapproved,\n    );\n\n    const unapprovedTransactionIds = new Set(\n      unapprovedTransactions.map((tx) => tx.id),\n    );\n\n    // Combine unapproved transaction IDs and currently active resimulations\n    const allTransactionIds = new Set([\n      ...unapprovedTransactionIds,\n      ...this.#timeoutIds.keys(),\n    ]);\n\n    allTransactionIds.forEach((transactionId) => {\n      const transactionMeta = unapprovedTransactions.find(\n        (tx) => tx.id === transactionId,\n      ) as TransactionMeta;\n\n      if (transactionMeta?.isActive) {\n        this.#start(transactionMeta);\n      } else {\n        this.#stop(transactionId);\n      }\n    });\n  }\n\n  #start(transactionMeta: TransactionMeta) {\n    const { id: transactionId } = transactionMeta;\n    if (this.#timeoutIds.has(transactionId)) {\n      return;\n    }\n\n    const listener = () => {\n      // eslint-disable-next-line promise/catch-or-return\n      this.#simulateTransaction(transactionMeta)\n        .catch((error) => {\n          /* istanbul ignore next */\n          log('Error during transaction resimulation', error);\n        })\n        .finally(() => {\n          // Schedule the next execution\n          if (this.#timeoutIds.has(transactionId)) {\n            this.#queueUpdate(transactionId, listener);\n          }\n        });\n    };\n\n    // Start the first execution\n    this.#queueUpdate(transactionId, listener);\n    log(\n      `Started resimulating transaction ${transactionId} every ${RESIMULATE_INTERVAL_MS} milliseconds`,\n    );\n  }\n\n  #queueUpdate(transactionId: string, listener: () => void) {\n    const timeoutId = setTimeout(listener, RESIMULATE_INTERVAL_MS);\n    this.#timeoutIds.set(transactionId, timeoutId);\n  }\n\n  #stop(transactionId: string) {\n    if (!this.#timeoutIds.has(transactionId)) {\n      return;\n    }\n\n    this.#removeListener(transactionId);\n    log(\n      `Stopped resimulating transaction ${transactionId} every ${RESIMULATE_INTERVAL_MS} milliseconds`,\n    );\n  }\n\n  #removeListener(id: string) {\n    const timeoutId = this.#timeoutIds.get(id);\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      this.#timeoutIds.delete(id);\n    }\n  }\n}\n\n/**\n * Determine if a transaction should be resimulated.\n *\n * @param originalTransactionMeta - The original transaction metadata.\n * @param newTransactionMeta - The new transaction metadata.\n * @returns Whether the transaction should be resimulated.\n */\nexport function shouldResimulate(\n  originalTransactionMeta: TransactionMeta,\n  newTransactionMeta: TransactionMeta,\n) {\n  const { id: transactionId } = newTransactionMeta;\n\n  const parametersUpdated = isParametersUpdated(\n    originalTransactionMeta,\n    newTransactionMeta,\n  );\n\n  const securityAlert = hasNewSecurityAlert(\n    originalTransactionMeta,\n    newTransactionMeta,\n  );\n\n  const valueAndNativeBalanceMismatch = hasValueAndNativeBalanceMismatch(\n    originalTransactionMeta,\n    newTransactionMeta,\n  );\n\n  const resimulate =\n    parametersUpdated || securityAlert || valueAndNativeBalanceMismatch;\n\n  let blockTime: number | undefined;\n\n  if (securityAlert || valueAndNativeBalanceMismatch) {\n    const nowSeconds = Math.floor(Date.now() / 1000);\n    blockTime = nowSeconds + BLOCK_TIME_ADDITIONAL_SECONDS;\n  }\n\n  if (resimulate) {\n    log('Transaction should be resimulated', {\n      transactionId,\n      blockTime,\n      parametersUpdated,\n      securityAlert,\n      valueAndNativeBalanceMismatch,\n    });\n  }\n\n  return {\n    blockTime,\n    resimulate,\n  };\n}\n\n/**\n * Determine if the simulation data has changed.\n *\n * @param originalSimulationData - The original simulation data.\n * @param newSimulationData - The new simulation data.\n * @returns Whether the simulation data has changed.\n */\nexport function hasSimulationDataChanged(\n  originalSimulationData: SimulationData,\n  newSimulationData: SimulationData,\n): boolean {\n  if (isEqual(originalSimulationData, newSimulationData)) {\n    return false;\n  }\n\n  if (\n    isBalanceChangeUpdated(\n      originalSimulationData?.nativeBalanceChange,\n      newSimulationData?.nativeBalanceChange,\n    )\n  ) {\n    log('Simulation data native balance changed');\n    return true;\n  }\n\n  if (\n    originalSimulationData.tokenBalanceChanges.length !==\n    newSimulationData.tokenBalanceChanges.length\n  ) {\n    return true;\n  }\n\n  for (const originalTokenBalanceChange of originalSimulationData.tokenBalanceChanges) {\n    const newTokenBalanceChange = newSimulationData.tokenBalanceChanges.find(\n      ({ address, id }) =>\n        address === originalTokenBalanceChange.address &&\n        id === originalTokenBalanceChange.id,\n    );\n\n    if (!newTokenBalanceChange) {\n      log('Missing new token balance', {\n        address: originalTokenBalanceChange.address,\n        id: originalTokenBalanceChange.id,\n      });\n\n      return true;\n    }\n\n    if (\n      isBalanceChangeUpdated(originalTokenBalanceChange, newTokenBalanceChange)\n    ) {\n      log('Simulation data token balance changed', {\n        originalTokenBalanceChange,\n        newTokenBalanceChange,\n      });\n\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Determine if the transaction parameters have been updated.\n *\n * @param originalTransactionMeta - The original transaction metadata.\n * @param newTransactionMeta - The new transaction metadata.\n * @returns Whether the transaction parameters have been updated.\n */\nfunction isParametersUpdated(\n  originalTransactionMeta: TransactionMeta,\n  newTransactionMeta: TransactionMeta,\n): boolean {\n  const { id: transactionId, txParams: newParams } = newTransactionMeta;\n  const { txParams: originalParams } = originalTransactionMeta;\n\n  if (!originalParams || isEqual(originalParams, newParams)) {\n    return false;\n  }\n\n  const params = Object.keys(newParams) as (keyof TransactionParams)[];\n\n  const updatedProperties = params.filter(\n    (param) => newParams[param] !== originalParams[param],\n  );\n\n  log('Transaction parameters updated', {\n    transactionId,\n    updatedProperties,\n    originalParams,\n    newParams,\n  });\n\n  return RESIMULATE_PARAMS.some((param) => updatedProperties.includes(param));\n}\n\n/**\n * Determine if a transaction has a new security alert.\n *\n * @param originalTransactionMeta - The original transaction metadata.\n * @param newTransactionMeta - The new transaction metadata.\n * @returns Whether the transaction has a new security alert.\n */\nfunction hasNewSecurityAlert(\n  originalTransactionMeta: TransactionMeta,\n  newTransactionMeta: TransactionMeta,\n): boolean {\n  const { securityAlertResponse: originalSecurityAlertResponse } =\n    originalTransactionMeta;\n\n  const { id: transactionId, securityAlertResponse: newSecurityAlertResponse } =\n    newTransactionMeta;\n\n  if (isEqual(originalSecurityAlertResponse, newSecurityAlertResponse)) {\n    return false;\n  }\n\n  log('Security alert updated', {\n    transactionId,\n    originalSecurityAlertResponse,\n    newSecurityAlertResponse,\n  });\n\n  return (\n    newSecurityAlertResponse?.result_type === BLOCKAID_RESULT_TYPE_MALICIOUS\n  );\n}\n\n/**\n * Determine if a transaction has a value and simulation native balance mismatch.\n *\n * @param originalTransactionMeta - The original transaction metadata.\n * @param newTransactionMeta - The new transaction metadata.\n * @returns Whether the transaction has a value and simulation native balance mismatch.\n */\nfunction hasValueAndNativeBalanceMismatch(\n  originalTransactionMeta: TransactionMeta,\n  newTransactionMeta: TransactionMeta,\n): boolean {\n  const { simulationData: originalSimulationData } = originalTransactionMeta;\n\n  const { simulationData: newSimulationData, txParams: newTxParams } =\n    newTransactionMeta;\n\n  if (\n    !newSimulationData ||\n    isEqual(originalSimulationData, newSimulationData)\n  ) {\n    return false;\n  }\n\n  const newValue = newTxParams?.value ?? '0x0';\n\n  const newNativeBalanceDifference =\n    newSimulationData?.nativeBalanceChange?.difference ?? '0x0';\n\n  return !percentageChangeWithinThreshold(\n    newValue as Hex,\n    newNativeBalanceDifference,\n    false,\n    newSimulationData?.nativeBalanceChange?.isDecrease === false,\n  );\n}\n\n/**\n * Determine if a balance change has been updated.\n *\n * @param originalBalanceChange - The original balance change.\n * @param newBalanceChange - The new balance change.\n * @returns Whether the balance change has been updated.\n */\nfunction isBalanceChangeUpdated(\n  originalBalanceChange?: SimulationBalanceChange,\n  newBalanceChange?: SimulationBalanceChange,\n): boolean {\n  return !percentageChangeWithinThreshold(\n    originalBalanceChange?.difference ?? '0x0',\n    newBalanceChange?.difference ?? '0x0',\n    originalBalanceChange?.isDecrease === false,\n    newBalanceChange?.isDecrease === false,\n  );\n}\n\n/**\n * Determine if the percentage change between two values is within a threshold.\n *\n * @param originalValue - The original value.\n * @param newValue - The new value.\n * @param originalNegative - Whether the original value is negative.\n * @param newNegative - Whether the new value is negative.\n * @returns Whether the percentage change between the two values is within a threshold.\n */\nfunction percentageChangeWithinThreshold(\n  originalValue: Hex,\n  newValue: Hex,\n  originalNegative?: boolean,\n  newNegative?: boolean,\n): boolean {\n  let originalValueBN = new BN(remove0x(originalValue), 'hex');\n  let newValueBN = new BN(remove0x(newValue), 'hex');\n\n  if (originalNegative) {\n    originalValueBN = originalValueBN.neg();\n  }\n\n  if (newNegative) {\n    newValueBN = newValueBN.neg();\n  }\n\n  return (\n    getPercentageChange(originalValueBN, newValueBN) <=\n    VALUE_COMPARISON_PERCENT_THRESHOLD\n  );\n}\n"]}
\ No newline at end of file
diff --git a/dist/types.cjs.map b/dist/types.cjs.map
index 715e27abfa644ea41f4cab4233c8f9ee518a33c7..63cbe97e0650af75abf8efe4822def4491a9bd7a 100644
--- a/dist/types.cjs.map
+++ b/dist/types.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"types.cjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccessList } from '@ethereumjs/tx';\nimport type { AccountsController } from '@metamask/accounts-controller';\nimport type EthQuery from '@metamask/eth-query';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport type { NetworkClientId, Provider } from '@metamask/network-controller';\nimport type { Hex, Json } from '@metamask/utils';\nimport type { Operation } from 'fast-json-patch';\n\n/**\n * Given a record, ensures that each property matches the `Json` type.\n */\ntype MakeJsonCompatible<T> = T extends Json\n  ? T\n  : {\n      [K in keyof T]: T[K] extends Json ? T[K] : never;\n    };\n\n/**\n * `Json` from `@metamask/utils` is defined as a recursive type alias, but\n * `Operation` is defined as an interface, and the two are not compatible with\n * each other. Therefore, this is a variant of Operation from `fast-json-patch`\n * which is guaranteed to be type-compatible with `Json`.\n */\ntype JsonCompatibleOperation = MakeJsonCompatible<Operation>;\n\n/**\n * Representation of transaction metadata.\n */\nexport type TransactionMeta = TransactionMetaBase &\n  (\n    | {\n        status: Exclude<TransactionStatus, TransactionStatus.failed>;\n      }\n    | {\n        status: TransactionStatus.failed;\n        error: TransactionError;\n      }\n  );\n\n/**\n * Information about a single transaction such as status and block number.\n */\ntype TransactionMetaBase = {\n  /**\n   * ID of the transaction that approved the swap token transfer.\n   */\n  approvalTxId?: string;\n\n  /**\n   * Unique ID to prevent duplicate requests.\n   */\n  actionId?: string;\n\n  /**\n   * Base fee of the block as a hex value, introduced in EIP-1559.\n   */\n  baseFeePerGas?: Hex;\n\n  /**\n   * Number of the block where the transaction has been included.\n   */\n  blockNumber?: string;\n\n  /**\n   * The timestamp for when the block was collated.\n   */\n  blockTimestamp?: string;\n\n  /**\n   * Network code as per EIP-155 for this transaction.\n   */\n  chainId: Hex;\n\n  /**\n   * A string representing a name of transaction contract method.\n   */\n  contractMethodName?: string;\n\n  /**\n   * The balance of the token that is being sent.\n   */\n  currentTokenBalance?: string;\n\n  /**\n   * Unique ID for custodian transaction.\n   */\n  custodyId?: string;\n\n  /**\n   * Custodian transaction status.\n   */\n  custodyStatus?: string;\n\n  /** The optional custom nonce override as a decimal string. */\n  customNonceValue?: string;\n\n  /**\n   * The custom token amount is the amount set by the user.\n   */\n  customTokenAmount?: string;\n\n  /**\n   * The dapp proposed token amount.\n   */\n  dappProposedTokenAmount?: string;\n\n  /**\n   * Gas values provided by the dApp.\n   */\n  dappSuggestedGasFees?: DappSuggestedGasFees;\n\n  /**\n   * The initial gas values set when the transaction was first created.\n   */\n  defaultGasEstimates?: DefaultGasEstimates;\n\n  /**\n   * String to indicate what device the transaction was confirmed on.\n   */\n  deviceConfirmedOn?: WalletDevice;\n\n  /**\n   * The Network ID as per EIP-155 of the destination chain of a bridge transaction.\n   */\n  destinationChainId?: Hex;\n\n  /**\n   * The address of the token being received of swap transaction.\n   */\n  destinationTokenAddress?: string;\n\n  /**\n   * The raw amount of the destination token\n   */\n  destinationTokenAmount?: string;\n\n  /**\n   * The decimals of the token being received of swap transaction.\n   */\n  destinationTokenDecimals?: number;\n\n  /**\n   * The symbol of the token being received with swap.\n   */\n  destinationTokenSymbol?: string;\n\n  /**\n   * The estimated base fee of the transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * The chosen amount which will be the same as the originally proposed token\n   * amount if the user does not edit the  amount or will be a custom token\n   * amount set by the user.\n   */\n  finalApprovalAmount?: string;\n\n  /**\n   * The number of the latest block when the transaction submit was first retried.\n   */\n  firstRetryBlockNumber?: string;\n\n  /**\n   * Whether the transaction is active.\n   */\n  isActive?: boolean;\n\n  /**\n   * Whether the transaction is the first time interaction.\n   */\n  isFirstTimeInteraction?: boolean;\n\n  /** Alternate EIP-1559 gas fee estimates for multiple priority levels. */\n  gasFeeEstimates?: GasFeeEstimates;\n\n  /** Whether the gas fee estimates have been checked at least once. */\n  gasFeeEstimatesLoaded?: boolean;\n\n  /**\n   * The estimated gas for the transaction without any buffer applied.\n   */\n  gasLimitNoBuffer?: string;\n\n  /**\n   * A hex string of the transaction hash, used to identify the transaction on the network.\n   */\n  hash?: string;\n\n  /**\n   * A history of mutations to TransactionMeta.\n   */\n  history?: TransactionHistory;\n\n  /**\n   * Generated UUID associated with this transaction.\n   */\n  id: string;\n\n  /**\n   * Whether the transaction is a transfer.\n   */\n  isTransfer?: boolean;\n\n  /**\n   * Whether the transaction entry is generated from a user operation.\n   */\n  isUserOperation?: boolean;\n\n  /**\n   * Additional gas fees to cover the cost of persisting data on layer 1 for layer 2 networks.\n   */\n  layer1GasFee?: Hex;\n\n  /**\n   * The ID of the network client used by the transaction.\n   */\n  networkClientId: NetworkClientId;\n\n  /**\n   * Network code as per EIP-155 for this transaction\n   *\n   * @deprecated Use `chainId` instead.\n   */\n  readonly networkID?: string;\n\n  /**\n   * Origin this transaction was sent from.\n   */\n  origin?: string;\n\n  /**\n   * The original dapp proposed token approval amount before edit by user.\n   */\n  originalApprovalAmount?: string;\n\n  /**\n   * The original gas estimation of the transaction.\n   */\n  originalGasEstimate?: string;\n\n  /**\n   * When we speed up a transaction, we set the type as Retry and we lose\n   * information about type of transaction that is being set up, so we use\n   * original type to track that information.\n   */\n  originalType?: TransactionType;\n\n  /**\n   * Account transaction balance after swap.\n   */\n  postTxBalance?: string;\n\n  /**\n   * Account transaction balance before swap.\n   */\n  preTxBalance?: string;\n\n  /**\n   * The previous gas properties before they were updated.\n   */\n  previousGas?: {\n    /**\n     * Maxmimum number of units of gas to use for this transaction.\n     */\n    gasLimit?: string;\n\n    /**\n     * Maximum amount per gas to pay for the transaction, including the priority fee.\n     */\n    maxFeePerGas?: string;\n\n    /**\n     * Maximum amount per gas to give to validator as incentive.\n     */\n    maxPriorityFeePerGas?: string;\n  };\n\n  /**\n   * The transaction's 'r' value as a hex string.\n   */\n  r?: string;\n\n  /**\n   * Hex representation of the underlying transaction.\n   */\n  rawTx?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction hash.\n   */\n  replacedBy?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction ID.\n   */\n  replacedById?: string;\n\n  /**\n   * The number of times that the transaction submit has been retried.\n   */\n  retryCount?: number;\n\n  /**\n   * The transaction's 's' value as a hex string.\n   */\n  s?: string;\n\n  /**\n   * Response from security validator.\n   */\n  securityAlertResponse?: SecurityAlertResponse;\n\n  /**\n   * Response from security provider.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  securityProviderResponse?: Record<string, any>;\n\n  /**\n   * An array of entries that describe the user's journey through the send flow.\n   * This is purely attached to state logs for troubleshooting and support.\n   */\n  sendFlowHistory?: SendFlowHistoryEntry[];\n\n  /**\n   * Simulation data for the transaction used to predict its outcome.\n   */\n  simulationData?: SimulationData;\n\n  /**\n   * If the gas estimation fails, an object containing error and block information.\n   */\n  simulationFails?: {\n    reason?: string;\n    errorKey?: string;\n    debug: {\n      blockNumber?: string;\n      blockGasLimit?: string;\n    };\n  };\n\n  /**\n   * The time the transaction was submitted to the network, in Unix epoch time (ms).\n   */\n  submittedTime?: number;\n\n  /**\n   * The address of the token being swapped\n   */\n  sourceTokenAddress?: string;\n\n  /**\n   * The raw amount of the source swap token\n   */\n  sourceTokenAmount?: string;\n\n  /**\n   * The decimals of the token being swapped.\n   */\n  sourceTokenDecimals?: number;\n\n  /**\n   * The symbol of the token being swapped.\n   */\n  sourceTokenSymbol?: string;\n\n  /**\n   * The address of the swap recipient.\n   */\n  swapAndSendRecipient?: string;\n\n  /**\n   * The metadata of the swap transaction.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  swapMetaData?: Record<string, any>;\n\n  /**\n   * The value of the token being swapped.\n   */\n  swapTokenValue?: string;\n\n  /**\n   * Timestamp associated with this transaction.\n   */\n  time: number;\n\n  /**\n   * Whether transaction recipient is a smart contract.\n   */\n  toSmartContract?: boolean;\n\n  /**\n   * Additional transfer information.\n   */\n  transferInformation?: {\n    contractAddress: string;\n    decimals: number;\n    symbol: string;\n  };\n\n  /**\n   * Underlying Transaction object.\n   */\n  txParams: TransactionParams;\n\n  /**\n   * Transaction receipt.\n   */\n  txReceipt?: TransactionReceipt;\n\n  /**\n   * The type of transaction such as `cancel` or `swap`.\n   */\n  type?: TransactionType;\n\n  /**\n   * The gas limit supplied by user.\n   */\n  userEditedGasLimit?: boolean;\n\n  /**\n   * Estimate level user selected.\n   */\n  userFeeLevel?: string;\n\n  /**\n   * The transaction's 'v' value as a hex string.\n   */\n  v?: string;\n\n  /**\n   * Whether the transaction is verified on the blockchain.\n   */\n  verifiedOnBlockchain?: boolean;\n\n  /**\n   * Warning information for the transaction.\n   */\n  warning?: {\n    error: string;\n    message: string;\n  };\n};\n\nexport type SendFlowHistoryEntry = {\n  /**\n   * String to indicate user interaction information.\n   */\n  entry: string;\n\n  /**\n   * Timestamp associated with this entry.\n   */\n  timestamp: number;\n};\n\n/**\n * Represents the status of a transaction within the wallet.\n * Each status reflects the state of the transaction internally,\n * with some statuses corresponding to the transaction's state on the network.\n *\n * The typical transaction lifecycle follows this state machine:\n * unapproved -> approved -> signed -> submitted -> FINAL_STATE\n * where FINAL_STATE is one of: confirmed, failed, dropped, or rejected.\n */\nexport enum TransactionStatus {\n  /**\n   * The initial state of a transaction before user approval.\n   */\n  unapproved = 'unapproved',\n\n  /**\n   * The transaction has been approved by the user but is not yet signed.\n   * This status is usually brief but may be longer for scenarios like hardware wallet usage.\n   */\n  approved = 'approved',\n\n  /**\n   * The transaction is signed and in the process of being submitted to the network.\n   * This status is typically short-lived but can be longer for certain cases, such as smart transactions.\n   */\n  signed = 'signed',\n\n  /**\n   * The transaction has been submitted to the network and is awaiting confirmation.\n   */\n  submitted = 'submitted',\n\n  /**\n   * The transaction has been successfully executed and confirmed on the blockchain.\n   * This is a final state.\n   */\n  confirmed = 'confirmed',\n\n  /**\n   * The transaction encountered an error during execution on the blockchain and failed.\n   * This is a final state.\n   */\n  failed = 'failed',\n\n  /**\n   * The transaction was superseded by another transaction, resulting in its dismissal.\n   * This is a final state.\n   */\n  dropped = 'dropped',\n\n  /**\n   * The transaction was rejected by the user and not processed further.\n   * This is a final state.\n   */\n  rejected = 'rejected',\n\n  /**\n   * @deprecated This status is no longer used.\n   */\n  cancelled = 'cancelled',\n}\n\n/**\n * Options for wallet device.\n */\nexport enum WalletDevice {\n  MM_MOBILE = 'metamask_mobile',\n  MM_EXTENSION = 'metamask_extension',\n  OTHER = 'other_device',\n}\n\n/**\n * The type of the transaction.\n */\nexport enum TransactionType {\n  /**\n   * A transaction that bridges tokens to a different chain through Metamask Bridge.\n   */\n  bridge = 'bridge',\n\n  /**\n   * Similar to the approve type, a bridge approval is a special case of ERC20\n   * approve method that requests an allowance of the token to spend on behalf\n   * of the user for the MetaMask Bridge contract. The first bridge for any token\n   * will have an accompanying bridgeApproval transaction.\n   */\n  bridgeApproval = 'bridgeApproval',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  cancel = 'cancel',\n\n  /**\n   * A transaction that is interacting with a smart contract's methods that we\n   * have not treated as a special case, such as approve, transfer, and\n   * transferfrom.\n   */\n  contractInteraction = 'contractInteraction',\n\n  /**\n   * A transaction that deployed a smart contract.\n   */\n  deployContract = 'contractDeployment',\n\n  /**\n   * A transaction for Ethereum decryption.\n   */\n  ethDecrypt = 'eth_decrypt',\n\n  /**\n   * A transaction for getting an encryption public key.\n   */\n  ethGetEncryptionPublicKey = 'eth_getEncryptionPublicKey',\n\n  /**\n   * An incoming (deposit) transaction.\n   */\n  incoming = 'incoming',\n\n  /**\n   * A transaction for personal sign.\n   */\n  personalSign = 'personal_sign',\n\n  /**\n   * When a transaction is failed it can be retried by\n   * resubmitting the same transaction with a higher gas fee. This type is also used\n   * to speed up pending transactions. This is accomplished by creating a new tx with\n   * the same nonce and higher gas fees.\n   */\n  retry = 'retry',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  simpleSend = 'simpleSend',\n\n  /**\n   * A transaction that is signing typed data.\n   */\n  signTypedData = 'eth_signTypedData',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  smart = 'smart',\n\n  /**\n   * A transaction that claims staking rewards.\n   */\n  stakingClaim = 'stakingClaim',\n\n  /**\n   * A transaction that deposits tokens into a staking contract.\n   */\n  stakingDeposit = 'stakingDeposit',\n\n  /**\n   * A transaction that unstakes tokens from a staking contract.\n   */\n  stakingUnstake = 'stakingUnstake',\n\n  /**\n   * A transaction swapping one token for another through MetaMask Swaps.\n   */\n  swap = 'swap',\n\n  /**\n   * A transaction swapping one token for another through MetaMask Swaps, then sending the swapped token to a recipient.\n   */\n  swapAndSend = 'swapAndSend',\n\n  /**\n   * Similar to the approve type, a swap approval is a special case of ERC20\n   * approve method that requests an allowance of the token to spend on behalf\n   * of the user for the MetaMask Swaps contract. The first swap for any token\n   * will have an accompanying swapApproval transaction.\n   */\n  swapApproval = 'swapApproval',\n\n  /**\n   * A token transaction requesting an allowance of the token to spend on\n   * behalf of the user.\n   */\n  tokenMethodApprove = 'approve',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. The method is prefixed with safe because when calling\n   * this method the contract checks to ensure that the receiver is an address\n   * capable of handling the token being sent.\n   */\n  tokenMethodSafeTransferFrom = 'safetransferfrom',\n\n  /**\n   * A token transaction where the user is sending tokens that they own to\n   * another address.\n   */\n  tokenMethodTransfer = 'transfer',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. For more information on allowances, see the approve\n   * type.\n   */\n  tokenMethodTransferFrom = 'transferfrom',\n\n  /**\n   * A token transaction requesting an allowance of all of a user's tokens to\n   * spend on behalf of the user.\n   */\n  tokenMethodSetApprovalForAll = 'setapprovalforall',\n\n  /**\n   * Increase the allowance by a given increment\n   */\n  tokenMethodIncreaseAllowance = 'increaseAllowance',\n}\n\n/**\n * Standard data concerning a transaction to be processed by the blockchain.\n */\nexport type TransactionParams = {\n  /**\n   * A list of addresses and storage keys that the transaction plans to access.\n   */\n  accessList?: AccessList;\n\n  /**\n   * Array of authorizations to set code on EOA accounts.\n   * Only supported in `setCode` transactions.\n   * Introduced in EIP-7702.\n   */\n  authorizationList?: AuthorizationList;\n\n  /**\n   * Network ID as per EIP-155.\n   */\n  chainId?: Hex;\n\n  /**\n   * Data to pass with this transaction.\n   */\n  data?: string;\n\n  /**\n   * Error message for gas estimation failure.\n   */\n  estimateGasError?: string;\n\n  /**\n   * Estimated base fee for this transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * Address to send this transaction from.\n   */\n  from: string;\n\n  /**\n   * same as gasLimit?\n   */\n  gas?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gasLimit?: string;\n\n  /**\n   * Price per gas for legacy txs\n   */\n  gasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority\n   * fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n\n  /**\n   * Unique number to prevent replay attacks.\n   */\n  nonce?: string;\n\n  /**\n   * Address to send this transaction to.\n   */\n  to?: string;\n\n  /**\n   * Value associated with this transaction.\n   */\n  value?: string;\n\n  /**\n   * Type of transaction.\n   * 0x0 indicates a legacy transaction.\n   */\n  type?: string;\n};\n\n/**\n * Standard data concerning a transaction processed by the blockchain.\n */\nexport type TransactionReceipt = {\n  /**\n   * The block hash of the block that this transaction was included in.\n   */\n  blockHash?: string;\n\n  /**\n   * The block number of the block that this transaction was included in.\n   */\n  blockNumber?: string;\n\n  /**\n   * Effective gas price the transaction was charged at.\n   */\n  effectiveGasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Total used gas in hex.\n   */\n  l1Fee?: string;\n\n  /**\n   * All the logs emitted by this transaction.\n   */\n  logs?: Log[];\n\n  /**\n   * The status of the transaction.\n   */\n  status?: string;\n\n  /**\n   * The hexadecimal index of this transaction in the list of transactions included in the block this transaction was mined in.\n   */\n  transactionIndex?: string;\n};\n\n/**\n * Represents an event that has been included in a transaction using the EVM `LOG` opcode.\n */\nexport type Log = {\n  /**\n   * Address of the contract that generated log.\n   */\n  address?: string;\n  /**\n   * List of topics for log.\n   */\n  topics?: string;\n};\n\n/**\n * The configuration required to fetch transaction data from a RemoteTransactionSource.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface RemoteTransactionSourceRequest {\n  /**\n   * The address of the account to fetch transactions for.\n   */\n  address: Hex;\n\n  /**\n   * Numerical cache to optimize fetching transactions.\n   */\n  cache: Record<string, unknown>;\n\n  /**\n   * The IDs of the chains to query.\n   */\n  chainIds: Hex[];\n\n  /**\n   * Whether to also include incoming token transfers.\n   */\n  includeTokenTransfers: boolean;\n\n  /**\n   * Whether to initially query the entire transaction history.\n   */\n  queryEntireHistory: boolean;\n\n  /**\n   * Callback to update the cache.\n   */\n  updateCache(fn: (cache: Record<string, unknown>) => void): void;\n\n  /**\n   * Whether to also retrieve outgoing transactions.\n   */\n  updateTransactions: boolean;\n}\n\n/**\n * An object capable of fetching transaction data from a remote source.\n * Used by the IncomingTransactionHelper to retrieve remote transaction data.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface RemoteTransactionSource {\n  /**\n   * @returns Array of chain IDs supported by the remote source.\n   */\n  getSupportedChains: () => Hex[];\n\n  /**\n   * @param request - A request object containing data such as the address and chain ID.\n   * @returns An array of transaction metadata for the retrieved transactions.\n   */\n  fetchTransactions: (\n    request: RemoteTransactionSourceRequest,\n  ) => Promise<TransactionMeta[]>;\n}\n\n/**\n * Gas values initially suggested by the dApp.\n */\nexport type DappSuggestedGasFees = {\n  gas?: string;\n  gasPrice?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n};\n\n/**\n * Gas values saved by the user for a specific chain.\n */\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface SavedGasFees {\n  maxBaseFee: string;\n  priorityFee: string;\n}\n\n/**\n * A transaction history operation that includes a note and timestamp.\n */\ntype ExtendedHistoryOperation = JsonCompatibleOperation & {\n  note?: string;\n  timestamp?: number;\n};\n\n/**\n * A transaction history entry that includes the ExtendedHistoryOperation as the first element.\n */\nexport type TransactionHistoryEntry = [\n  ExtendedHistoryOperation,\n  ...JsonCompatibleOperation[],\n];\n\n/**\n * A transaction history that includes the transaction meta as the first element.\n * And the rest of the elements are the operation arrays that were applied to the transaction meta.\n */\nexport type TransactionHistory = [\n  TransactionMeta,\n  ...TransactionHistoryEntry[],\n];\n\n/**\n * Result of inferring the transaction type.\n */\nexport type InferTransactionTypeResult = {\n  /**\n   * The contract code, in hex format if it exists. '0x0' or\n   * '0x' are also indicators of non-existent contract code.\n   */\n  getCodeResponse?: string | null;\n\n  /**\n   * The type of transaction\n   */\n  type: TransactionType;\n};\n\n/**\n * A function for verifying a transaction, whether it is malicious or not.\n */\nexport type SecurityProviderRequest = (\n  requestData: TransactionMeta,\n  messageType: string,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n\n/**\n * Specifies the shape of the base transaction parameters.\n * Added in EIP-2718.\n */\nexport enum TransactionEnvelopeType {\n  /**\n   * A legacy transaction, the very first type.\n   */\n  legacy = '0x0',\n\n  /**\n   * EIP-2930 defined the access list transaction type that allowed for\n   * specifying the state that a transaction would act upon in advance and\n   * theoretically save on gas fees.\n   */\n  accessList = '0x1',\n\n  /**\n   * The type introduced comes from EIP-1559, Fee Market describes the addition\n   * of a baseFee to blocks that will be burned instead of distributed to\n   * miners. Transactions of this type have both a maxFeePerGas (maximum total\n   * amount in gwei per gas to spend on the transaction) which is inclusive of\n   * the maxPriorityFeePerGas (maximum amount of gwei per gas from the\n   * transaction fee to distribute to miner).\n   */\n  feeMarket = '0x2',\n\n  /**\n   * Adds code to externally owned accounts according to the signed authorizations\n   * in the new `authorizationList` parameter.\n   * Introduced in EIP-7702.\n   */\n  setCode = '0x4',\n}\n\n/**\n * The source of the gas fee parameters on a transaction.\n */\nexport enum UserFeeLevel {\n  CUSTOM = 'custom',\n  DAPP_SUGGESTED = 'dappSuggested',\n  MEDIUM = 'medium',\n}\n\n/**\n * Initial gas values set when the transaction was first created.\n */\nexport type DefaultGasEstimates = {\n  /**\n   * Source of the gas fee values, such as `dappSuggested` or `medium`.\n   */\n  estimateType?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gas?: string;\n\n  /**\n   * Price per gas for legacy transactions.\n   */\n  gasPrice?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n};\n\n/**\n * Data concerning an error while processing a transaction.\n */\nexport type TransactionError = {\n  /**\n   * A descriptive error name.\n   */\n  name: string;\n\n  /**\n   * A descriptive error message providing details about the encountered error.\n   */\n  message: string;\n\n  /**\n   * The stack trace associated with the error, if available.\n   */\n  stack?: string;\n\n  /**\n   * An optional error code associated with the error.\n   */\n  code?: string;\n\n  /**\n   * The rpc property holds additional information related to the error.\n   */\n  // We are intentionally using `any` here instead of `Json` because it causes\n  // `WritableDraft<TransactionMeta>` from Immer to cause TypeScript to error\n  // with \"Type instantiation is excessively deep and possibly infinite\". See:\n  // <https://github.com/immerjs/immer/issues/839>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  rpc?: any;\n};\n\n/**\n * Type for security alert response from transaction validator.\n */\nexport type SecurityAlertResponse = {\n  reason: string;\n  features?: string[];\n  result_type: string;\n  providerRequestsCount?: Record<string, number>;\n};\n\n/** Alternate priority levels for which values are provided in gas fee estimates. */\nexport enum GasFeeEstimateLevel {\n  Low = 'low',\n  Medium = 'medium',\n  High = 'high',\n}\n\n/** Type of gas fee estimate generated by a GasFeeFlow. */\nexport enum GasFeeEstimateType {\n  FeeMarket = 'fee-market',\n  Legacy = 'legacy',\n  GasPrice = 'eth_gasPrice',\n}\n\n/** Gas fee estimates for a specific priority level. */\nexport type FeeMarketGasFeeEstimateForLevel = {\n  /** Maximum amount to pay per gas. */\n  maxFeePerGas: Hex;\n\n  /** Maximum amount per gas to give to the validator as an incentive. */\n  maxPriorityFeePerGas: Hex;\n};\n\n/** Gas fee estimates for a EIP-1559 transaction. */\nexport type FeeMarketGasFeeEstimates = {\n  type: GasFeeEstimateType.FeeMarket;\n  [GasFeeEstimateLevel.Low]: FeeMarketGasFeeEstimateForLevel;\n  [GasFeeEstimateLevel.Medium]: FeeMarketGasFeeEstimateForLevel;\n  [GasFeeEstimateLevel.High]: FeeMarketGasFeeEstimateForLevel;\n};\n\n/** Gas fee estimates for a legacy transaction. */\nexport type LegacyGasFeeEstimates = {\n  type: GasFeeEstimateType.Legacy;\n  [GasFeeEstimateLevel.Low]: Hex;\n  [GasFeeEstimateLevel.Medium]: Hex;\n  [GasFeeEstimateLevel.High]: Hex;\n};\n\n/** Gas fee estimates for a transaction retrieved with the eth_gasPrice method. */\nexport type GasPriceGasFeeEstimates = {\n  type: GasFeeEstimateType.GasPrice;\n  gasPrice: Hex;\n};\n\n/** Gas fee estimates for a transaction. */\nexport type GasFeeEstimates =\n  | FeeMarketGasFeeEstimates\n  | LegacyGasFeeEstimates\n  | GasPriceGasFeeEstimates;\n\n/** Request to a gas fee flow to obtain gas fee estimates. */\nexport type GasFeeFlowRequest = {\n  /** An EthQuery instance to enable queries to the associated RPC provider. */\n  ethQuery: EthQuery;\n\n  /** Gas fee controller data matching the chain ID of the transaction. */\n  gasFeeControllerData: GasFeeState;\n\n  /** The metadata of the transaction to obtain estimates for. */\n  transactionMeta: TransactionMeta;\n};\n\n/** Response from a gas fee flow containing gas fee estimates. */\nexport type GasFeeFlowResponse = {\n  /** The gas fee estimates for the transaction. */\n  estimates: GasFeeEstimates;\n};\n\n/** A method of obtaining gas fee estimates for a specific transaction. */\nexport type GasFeeFlow = {\n  /**\n   * Determine if the gas fee flow supports the specified transaction.\n   *\n   * @param transactionMeta - The transaction metadata.\n   * @returns Whether the gas fee flow supports the transaction.\n   */\n  matchesTransaction(transactionMeta: TransactionMeta): boolean;\n\n  /**\n   * Get gas fee estimates for a specific transaction.\n   *\n   * @param request - The gas fee flow request.\n   * @returns The gas fee flow response containing the gas fee estimates.\n   */\n  getGasFees: (request: GasFeeFlowRequest) => Promise<GasFeeFlowResponse>;\n};\n\n/** Request to a layer 1 gas fee flow to obtain layer 1 fee estimate. */\nexport type Layer1GasFeeFlowRequest = {\n  /** RPC Provider instance. */\n  provider: Provider;\n\n  /** The metadata of the transaction to obtain estimates for. */\n  transactionMeta: TransactionMeta;\n};\n\n/** Response from a layer 1 gas fee flow containing layer 1 fee estimate. */\nexport type Layer1GasFeeFlowResponse = {\n  /** The gas fee estimates for the transaction. */\n  layer1Fee: Hex;\n};\n\n/** A method of obtaining layer 1 gas fee estimates for a specific transaction. */\nexport type Layer1GasFeeFlow = {\n  /**\n   * Determine if the gas fee flow supports the specified transaction.\n   *\n   * @param transactionMeta - The transaction metadata.\n   * @returns Whether the layer1 gas fee flow supports the transaction.\n   */\n  matchesTransaction(transactionMeta: TransactionMeta): boolean;\n\n  /**\n   * Get layer 1 gas fee estimates for a specific transaction.\n   *\n   * @param request - The gas fee flow request.\n   * @returns The gas fee flow response containing the layer 1 gas fee estimate.\n   */\n  getLayer1Fee: (\n    request: Layer1GasFeeFlowRequest,\n  ) => Promise<Layer1GasFeeFlowResponse>;\n};\n\n/** Simulation data concerning an update to a native or token balance. */\nexport type SimulationBalanceChange = {\n  /** The balance before the transaction. */\n  previousBalance: Hex;\n\n  /** The balance after the transaction. */\n  newBalance: Hex;\n\n  /** The difference in balance. */\n  difference: Hex;\n\n  /** Whether the balance is increasing or decreasing. */\n  isDecrease: boolean;\n};\n\n/** Token standards supported by simulation. */\nexport enum SimulationTokenStandard {\n  erc20 = 'erc20',\n  erc721 = 'erc721',\n  erc1155 = 'erc1155',\n}\n\n/** Simulation data concerning an updated token. */\nexport type SimulationToken = {\n  /** The token's contract address. */\n  address: Hex;\n\n  /** The standard of the token. */\n  standard: SimulationTokenStandard;\n\n  /** The ID of the token if supported by the standard. */\n  id?: Hex;\n};\n\n/** Simulation data concerning a change to the a token balance. */\nexport type SimulationTokenBalanceChange = SimulationToken &\n  SimulationBalanceChange;\n\nexport enum SimulationErrorCode {\n  ChainNotSupported = 'chain-not-supported',\n  Disabled = 'disabled',\n  InvalidResponse = 'invalid-response',\n  Reverted = 'reverted',\n}\n\n/** Error data for a failed simulation. */\nexport type SimulationError = {\n  /** Error code to identify the error type. */\n  code?: string | number;\n\n  /** Error message to describe the error. */\n  message?: string;\n};\n\n/** Simulation data for a transaction. */\nexport type SimulationData = {\n  /** Error data if the simulation failed or the transaction reverted. */\n  error?: SimulationError;\n\n  /** Whether the simulation response changed after a security check triggered a re-simulation. */\n  isUpdatedAfterSecurityCheck?: boolean;\n\n  /** Data concerning a change to the user's native balance. */\n  nativeBalanceChange?: SimulationBalanceChange;\n\n  /** Data concerning a change to the user's token balances. */\n  tokenBalanceChanges: SimulationTokenBalanceChange[];\n};\n\n/** Gas fee properties for a legacy transaction. */\nexport type GasPriceValue = {\n  /** Price per gas for legacy transactions. */\n  gasPrice: string;\n};\n\n/** Gas fee properties for an EIP-1559 transaction. */\nexport type FeeMarketEIP1559Values = {\n  /** Maximum amount to pay per gas. */\n  maxFeePerGas: string;\n\n  /** Maximum amount per gas to give to the validator as an incentive. */\n  maxPriorityFeePerGas: string;\n};\n\n/**\n * Data concerning a successfully submitted transaction.\n * Used for debugging purposes.\n */\nexport type SubmitHistoryEntry = {\n  /** The chain ID of the transaction as a hexadecimal string. */\n  chainId?: Hex;\n\n  /** The hash of the transaction returned from the RPC provider. */\n  hash: string;\n\n  /** True if the entry was generated using the migration and existing transaction metadata. */\n  migration?: boolean;\n\n  /** The type of the network where the transaction was submitted. */\n  networkType?: string;\n\n  /**\n   * The URL of the network the transaction was submitted to.\n   * A single network URL if it was recorded when submitted.\n   * An array of potential network URLs if it cannot be confirmed since the migration was used.\n   */\n  networkUrl?: string | string[];\n\n  /** The origin of the transaction. */\n  origin?: string;\n\n  /** The raw transaction data that was submitted. */\n  rawTransaction: string;\n\n  /** When the transaction was submitted. */\n  time: number;\n\n  /** The transaction parameters that were submitted. */\n  transaction: TransactionParams;\n};\n\nexport type InternalAccount = ReturnType<\n  AccountsController['getSelectedAccount']\n>;\n\n/**\n * An authorization to be included in a `setCode` transaction.\n * Specifies code to be added to the authorization signer's EOA account.\n * Introduced in EIP-7702.\n */\nexport type Authorization = {\n  /** Address of a smart contract that contains the code to be set. */\n  address: Hex;\n\n  /**\n   * Specific chain the authorization applies to.\n   * If not provided, defaults to the chain ID of the transaction.\n   */\n  chainId?: Hex;\n\n  /**\n   * Nonce at which the authorization will be valid.\n   * If not provided, defaults to the nonce following the transaction's nonce.\n   */\n  nonce?: Hex;\n\n  /** R component of the signature. */\n  r?: Hex;\n\n  /** S component of the signature. */\n  s?: Hex;\n\n  /** Y parity generated from the signature. */\n  yParity?: Hex;\n};\n\n/**\n * An array of authorizations to be included in a `setCode` transaction.\n * Introduced in EIP-7702.\n */\nexport type AuthorizationList = Authorization[];\n"]}
\ No newline at end of file
+{"version":3,"file":"types.cjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAidA;;;;;;;;GAQG;AACH,IAAY,iBAmDX;AAnDD,WAAY,iBAAiB;IAC3B;;OAEG;IACH,8CAAyB,CAAA;IAEzB;;;OAGG;IACH,0CAAqB,CAAA;IAErB;;;OAGG;IACH,sCAAiB,CAAA;IAEjB;;OAEG;IACH,4CAAuB,CAAA;IAEvB;;;OAGG;IACH,4CAAuB,CAAA;IAEvB;;;OAGG;IACH,sCAAiB,CAAA;IAEjB;;;OAGG;IACH,wCAAmB,CAAA;IAEnB;;;OAGG;IACH,0CAAqB,CAAA;IAErB;;OAEG;IACH,4CAAuB,CAAA;AACzB,CAAC,EAnDW,iBAAiB,iCAAjB,iBAAiB,QAmD5B;AAED;;GAEG;AACH,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,6CAA6B,CAAA;IAC7B,mDAAmC,CAAA;IACnC,sCAAsB,CAAA;AACxB,CAAC,EAJW,YAAY,4BAAZ,YAAY,QAIvB;AAED;;GAEG;AACH,IAAY,eAgJX;AAhJD,WAAY,eAAe;IACzB;;OAEG;IACH,oCAAiB,CAAA;IAEjB;;;;;OAKG;IACH,oDAAiC,CAAA;IAEjC;;OAEG;IACH,oCAAiB,CAAA;IAEjB;;;;OAIG;IACH,8DAA2C,CAAA;IAE3C;;OAEG;IACH,wDAAqC,CAAA;IAErC;;OAEG;IACH,6CAA0B,CAAA;IAE1B;;OAEG;IACH,2EAAwD,CAAA;IAExD;;OAEG;IACH,wCAAqB,CAAA;IAErB;;OAEG;IACH,iDAA8B,CAAA;IAE9B;;;;;OAKG;IACH,kCAAe,CAAA;IAEf;;OAEG;IACH,4CAAyB,CAAA;IAEzB;;OAEG;IACH,sDAAmC,CAAA;IAEnC;;OAEG;IACH,kCAAe,CAAA;IAEf;;OAEG;IACH,gDAA6B,CAAA;IAE7B;;OAEG;IACH,oDAAiC,CAAA;IAEjC;;OAEG;IACH,oDAAiC,CAAA;IAEjC;;OAEG;IACH,gCAAa,CAAA;IAEb;;OAEG;IACH,8CAA2B,CAAA;IAE3B;;;;;OAKG;IACH,gDAA6B,CAAA;IAE7B;;;OAGG;IACH,iDAA8B,CAAA;IAE9B;;;;;OAKG;IACH,mEAAgD,CAAA;IAEhD;;;OAGG;IACH,mDAAgC,CAAA;IAEhC;;;;OAIG;IACH,2DAAwC,CAAA;IAExC;;;OAGG;IACH,qEAAkD,CAAA;IAElD;;OAEG;IACH,qEAAkD,CAAA;AACpD,CAAC,EAhJW,eAAe,+BAAf,eAAe,QAgJ1B;AA6SD;;;GAGG;AACH,IAAY,uBA6BX;AA7BD,WAAY,uBAAuB;IACjC;;OAEG;IACH,yCAAc,CAAA;IAEd;;;;OAIG;IACH,6CAAkB,CAAA;IAElB;;;;;;;OAOG;IACH,4CAAiB,CAAA;IAEjB;;;;OAIG;IACH,0CAAe,CAAA;AACjB,CAAC,EA7BW,uBAAuB,uCAAvB,uBAAuB,QA6BlC;AAED;;GAEG;AACH,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,iCAAiB,CAAA;IACjB,gDAAgC,CAAA;IAChC,iCAAiB,CAAA;AACnB,CAAC,EAJW,YAAY,4BAAZ,YAAY,QAIvB;AA6ED,oFAAoF;AACpF,IAAY,mBAIX;AAJD,WAAY,mBAAmB;IAC7B,kCAAW,CAAA;IACX,wCAAiB,CAAA;IACjB,oCAAa,CAAA;AACf,CAAC,EAJW,mBAAmB,mCAAnB,mBAAmB,QAI9B;AAED,0DAA0D;AAC1D,IAAY,kBAIX;AAJD,WAAY,kBAAkB;IAC5B,8CAAwB,CAAA;IACxB,uCAAiB,CAAA;IACjB,+CAAyB,CAAA;AAC3B,CAAC,EAJW,kBAAkB,kCAAlB,kBAAkB,QAI7B;AA+HD,+CAA+C;AAC/C,IAAY,uBAIX;AAJD,WAAY,uBAAuB;IACjC,0CAAe,CAAA;IACf,4CAAiB,CAAA;IACjB,8CAAmB,CAAA;AACrB,CAAC,EAJW,uBAAuB,uCAAvB,uBAAuB,QAIlC;AAkBD,IAAY,mBAKX;AALD,WAAY,mBAAmB;IAC7B,gEAAyC,CAAA;IACzC,4CAAqB,CAAA;IACrB,2DAAoC,CAAA;IACpC,4CAAqB,CAAA;AACvB,CAAC,EALW,mBAAmB,mCAAnB,mBAAmB,QAK9B","sourcesContent":["import type { AccessList } from '@ethereumjs/tx';\nimport type { AccountsController } from '@metamask/accounts-controller';\nimport type EthQuery from '@metamask/eth-query';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport type { NetworkClientId, Provider } from '@metamask/network-controller';\nimport type { Hex, Json } from '@metamask/utils';\nimport type { Operation } from 'fast-json-patch';\n\n/**\n * Given a record, ensures that each property matches the `Json` type.\n */\ntype MakeJsonCompatible<T> = T extends Json\n  ? T\n  : {\n      [K in keyof T]: T[K] extends Json ? T[K] : never;\n    };\n\n/**\n * `Json` from `@metamask/utils` is defined as a recursive type alias, but\n * `Operation` is defined as an interface, and the two are not compatible with\n * each other. Therefore, this is a variant of Operation from `fast-json-patch`\n * which is guaranteed to be type-compatible with `Json`.\n */\ntype JsonCompatibleOperation = MakeJsonCompatible<Operation>;\n\n/**\n * Representation of transaction metadata.\n */\nexport type TransactionMeta = TransactionMetaBase &\n  (\n    | {\n        status: Exclude<TransactionStatus, TransactionStatus.failed>;\n      }\n    | {\n        status: TransactionStatus.failed;\n        error: TransactionError;\n      }\n  );\n\n/**\n * Information about a single transaction such as status and block number.\n */\ntype TransactionMetaBase = {\n  /**\n   * ID of the transaction that approved the swap token transfer.\n   */\n  approvalTxId?: string;\n\n  /**\n   * Unique ID to prevent duplicate requests.\n   */\n  actionId?: string;\n\n  /**\n   * Base fee of the block as a hex value, introduced in EIP-1559.\n   */\n  baseFeePerGas?: Hex;\n\n  /**\n   * Number of the block where the transaction has been included.\n   */\n  blockNumber?: string;\n\n  /**\n   * The timestamp for when the block was collated.\n   */\n  blockTimestamp?: string;\n\n  /**\n   * Network code as per EIP-155 for this transaction.\n   */\n  chainId: Hex;\n\n  /**\n   * A string representing a name of transaction contract method.\n   */\n  contractMethodName?: string;\n\n  /**\n   * The balance of the token that is being sent.\n   */\n  currentTokenBalance?: string;\n\n  /**\n   * Unique ID for custodian transaction.\n   */\n  custodyId?: string;\n\n  /**\n   * Custodian transaction status.\n   */\n  custodyStatus?: string;\n\n  /** The optional custom nonce override as a decimal string. */\n  customNonceValue?: string;\n\n  /**\n   * The custom token amount is the amount set by the user.\n   */\n  customTokenAmount?: string;\n\n  /**\n   * The dapp proposed token amount.\n   */\n  dappProposedTokenAmount?: string;\n\n  /**\n   * Gas values provided by the dApp.\n   */\n  dappSuggestedGasFees?: DappSuggestedGasFees;\n\n  /**\n   * The initial gas values set when the transaction was first created.\n   */\n  defaultGasEstimates?: DefaultGasEstimates;\n\n  /**\n   * String to indicate what device the transaction was confirmed on.\n   */\n  deviceConfirmedOn?: WalletDevice;\n\n  /**\n   * The Network ID as per EIP-155 of the destination chain of a bridge transaction.\n   */\n  destinationChainId?: Hex;\n\n  /**\n   * The address of the token being received of swap transaction.\n   */\n  destinationTokenAddress?: string;\n\n  /**\n   * The raw amount of the destination token\n   */\n  destinationTokenAmount?: string;\n\n  /**\n   * The decimals of the token being received of swap transaction.\n   */\n  destinationTokenDecimals?: number;\n\n  /**\n   * The symbol of the token being received with swap.\n   */\n  destinationTokenSymbol?: string;\n\n  /**\n   * The estimated base fee of the transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * The chosen amount which will be the same as the originally proposed token\n   * amount if the user does not edit the  amount or will be a custom token\n   * amount set by the user.\n   */\n  finalApprovalAmount?: string;\n\n  /**\n   * The number of the latest block when the transaction submit was first retried.\n   */\n  firstRetryBlockNumber?: string;\n\n  /**\n   * Whether the transaction is the first time interaction.\n   */\n  isFirstTimeInteraction?: boolean;\n\n  /** Alternate EIP-1559 gas fee estimates for multiple priority levels. */\n  gasFeeEstimates?: GasFeeEstimates;\n\n  /** Whether the gas fee estimates have been checked at least once. */\n  gasFeeEstimatesLoaded?: boolean;\n\n  /**\n   * The estimated gas for the transaction without any buffer applied.\n   */\n  gasLimitNoBuffer?: string;\n\n  /**\n   * A hex string of the transaction hash, used to identify the transaction on the network.\n   */\n  hash?: string;\n\n  /**\n   * A history of mutations to TransactionMeta.\n   */\n  history?: TransactionHistory;\n\n  /**\n   * Generated UUID associated with this transaction.\n   */\n  id: string;\n\n  /**\n   * Whether the transaction is a transfer.\n   */\n  isTransfer?: boolean;\n\n  /**\n   * Whether the transaction entry is generated from a user operation.\n   */\n  isUserOperation?: boolean;\n\n  /**\n   * Additional gas fees to cover the cost of persisting data on layer 1 for layer 2 networks.\n   */\n  layer1GasFee?: Hex;\n\n  /**\n   * The ID of the network client used by the transaction.\n   */\n  networkClientId: NetworkClientId;\n\n  /**\n   * Network code as per EIP-155 for this transaction\n   *\n   * @deprecated Use `chainId` instead.\n   */\n  readonly networkID?: string;\n\n  /**\n   * Origin this transaction was sent from.\n   */\n  origin?: string;\n\n  /**\n   * The original dapp proposed token approval amount before edit by user.\n   */\n  originalApprovalAmount?: string;\n\n  /**\n   * The original gas estimation of the transaction.\n   */\n  originalGasEstimate?: string;\n\n  /**\n   * When we speed up a transaction, we set the type as Retry and we lose\n   * information about type of transaction that is being set up, so we use\n   * original type to track that information.\n   */\n  originalType?: TransactionType;\n\n  /**\n   * Account transaction balance after swap.\n   */\n  postTxBalance?: string;\n\n  /**\n   * Account transaction balance before swap.\n   */\n  preTxBalance?: string;\n\n  /**\n   * The previous gas properties before they were updated.\n   */\n  previousGas?: {\n    /**\n     * Maxmimum number of units of gas to use for this transaction.\n     */\n    gasLimit?: string;\n\n    /**\n     * Maximum amount per gas to pay for the transaction, including the priority fee.\n     */\n    maxFeePerGas?: string;\n\n    /**\n     * Maximum amount per gas to give to validator as incentive.\n     */\n    maxPriorityFeePerGas?: string;\n  };\n\n  /**\n   * The transaction's 'r' value as a hex string.\n   */\n  r?: string;\n\n  /**\n   * Hex representation of the underlying transaction.\n   */\n  rawTx?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction hash.\n   */\n  replacedBy?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction ID.\n   */\n  replacedById?: string;\n\n  /**\n   * The number of times that the transaction submit has been retried.\n   */\n  retryCount?: number;\n\n  /**\n   * The transaction's 's' value as a hex string.\n   */\n  s?: string;\n\n  /**\n   * Response from security validator.\n   */\n  securityAlertResponse?: SecurityAlertResponse;\n\n  /**\n   * Response from security provider.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  securityProviderResponse?: Record<string, any>;\n\n  /**\n   * An array of entries that describe the user's journey through the send flow.\n   * This is purely attached to state logs for troubleshooting and support.\n   */\n  sendFlowHistory?: SendFlowHistoryEntry[];\n\n  /**\n   * Simulation data for the transaction used to predict its outcome.\n   */\n  simulationData?: SimulationData;\n\n  /**\n   * If the gas estimation fails, an object containing error and block information.\n   */\n  simulationFails?: {\n    reason?: string;\n    errorKey?: string;\n    debug: {\n      blockNumber?: string;\n      blockGasLimit?: string;\n    };\n  };\n\n  /**\n   * The time the transaction was submitted to the network, in Unix epoch time (ms).\n   */\n  submittedTime?: number;\n\n  /**\n   * The address of the token being swapped\n   */\n  sourceTokenAddress?: string;\n\n  /**\n   * The raw amount of the source swap token\n   */\n  sourceTokenAmount?: string;\n\n  /**\n   * The decimals of the token being swapped.\n   */\n  sourceTokenDecimals?: number;\n\n  /**\n   * The symbol of the token being swapped.\n   */\n  sourceTokenSymbol?: string;\n\n  /**\n   * The address of the swap recipient.\n   */\n  swapAndSendRecipient?: string;\n\n  /**\n   * The metadata of the swap transaction.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  swapMetaData?: Record<string, any>;\n\n  /**\n   * The value of the token being swapped.\n   */\n  swapTokenValue?: string;\n\n  /**\n   * Timestamp associated with this transaction.\n   */\n  time: number;\n\n  /**\n   * Whether transaction recipient is a smart contract.\n   */\n  toSmartContract?: boolean;\n\n  /**\n   * Additional transfer information.\n   */\n  transferInformation?: {\n    contractAddress: string;\n    decimals: number;\n    symbol: string;\n  };\n\n  /**\n   * Underlying Transaction object.\n   */\n  txParams: TransactionParams;\n\n  /**\n   * Transaction receipt.\n   */\n  txReceipt?: TransactionReceipt;\n\n  /**\n   * The type of transaction such as `cancel` or `swap`.\n   */\n  type?: TransactionType;\n\n  /**\n   * The gas limit supplied by user.\n   */\n  userEditedGasLimit?: boolean;\n\n  /**\n   * Estimate level user selected.\n   */\n  userFeeLevel?: string;\n\n  /**\n   * The transaction's 'v' value as a hex string.\n   */\n  v?: string;\n\n  /**\n   * Whether the transaction is verified on the blockchain.\n   */\n  verifiedOnBlockchain?: boolean;\n\n  /**\n   * Warning information for the transaction.\n   */\n  warning?: {\n    error: string;\n    message: string;\n  };\n};\n\nexport type SendFlowHistoryEntry = {\n  /**\n   * String to indicate user interaction information.\n   */\n  entry: string;\n\n  /**\n   * Timestamp associated with this entry.\n   */\n  timestamp: number;\n};\n\n/**\n * Represents the status of a transaction within the wallet.\n * Each status reflects the state of the transaction internally,\n * with some statuses corresponding to the transaction's state on the network.\n *\n * The typical transaction lifecycle follows this state machine:\n * unapproved -> approved -> signed -> submitted -> FINAL_STATE\n * where FINAL_STATE is one of: confirmed, failed, dropped, or rejected.\n */\nexport enum TransactionStatus {\n  /**\n   * The initial state of a transaction before user approval.\n   */\n  unapproved = 'unapproved',\n\n  /**\n   * The transaction has been approved by the user but is not yet signed.\n   * This status is usually brief but may be longer for scenarios like hardware wallet usage.\n   */\n  approved = 'approved',\n\n  /**\n   * The transaction is signed and in the process of being submitted to the network.\n   * This status is typically short-lived but can be longer for certain cases, such as smart transactions.\n   */\n  signed = 'signed',\n\n  /**\n   * The transaction has been submitted to the network and is awaiting confirmation.\n   */\n  submitted = 'submitted',\n\n  /**\n   * The transaction has been successfully executed and confirmed on the blockchain.\n   * This is a final state.\n   */\n  confirmed = 'confirmed',\n\n  /**\n   * The transaction encountered an error during execution on the blockchain and failed.\n   * This is a final state.\n   */\n  failed = 'failed',\n\n  /**\n   * The transaction was superseded by another transaction, resulting in its dismissal.\n   * This is a final state.\n   */\n  dropped = 'dropped',\n\n  /**\n   * The transaction was rejected by the user and not processed further.\n   * This is a final state.\n   */\n  rejected = 'rejected',\n\n  /**\n   * @deprecated This status is no longer used.\n   */\n  cancelled = 'cancelled',\n}\n\n/**\n * Options for wallet device.\n */\nexport enum WalletDevice {\n  MM_MOBILE = 'metamask_mobile',\n  MM_EXTENSION = 'metamask_extension',\n  OTHER = 'other_device',\n}\n\n/**\n * The type of the transaction.\n */\nexport enum TransactionType {\n  /**\n   * A transaction that bridges tokens to a different chain through Metamask Bridge.\n   */\n  bridge = 'bridge',\n\n  /**\n   * Similar to the approve type, a bridge approval is a special case of ERC20\n   * approve method that requests an allowance of the token to spend on behalf\n   * of the user for the MetaMask Bridge contract. The first bridge for any token\n   * will have an accompanying bridgeApproval transaction.\n   */\n  bridgeApproval = 'bridgeApproval',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  cancel = 'cancel',\n\n  /**\n   * A transaction that is interacting with a smart contract's methods that we\n   * have not treated as a special case, such as approve, transfer, and\n   * transferfrom.\n   */\n  contractInteraction = 'contractInteraction',\n\n  /**\n   * A transaction that deployed a smart contract.\n   */\n  deployContract = 'contractDeployment',\n\n  /**\n   * A transaction for Ethereum decryption.\n   */\n  ethDecrypt = 'eth_decrypt',\n\n  /**\n   * A transaction for getting an encryption public key.\n   */\n  ethGetEncryptionPublicKey = 'eth_getEncryptionPublicKey',\n\n  /**\n   * An incoming (deposit) transaction.\n   */\n  incoming = 'incoming',\n\n  /**\n   * A transaction for personal sign.\n   */\n  personalSign = 'personal_sign',\n\n  /**\n   * When a transaction is failed it can be retried by\n   * resubmitting the same transaction with a higher gas fee. This type is also used\n   * to speed up pending transactions. This is accomplished by creating a new tx with\n   * the same nonce and higher gas fees.\n   */\n  retry = 'retry',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  simpleSend = 'simpleSend',\n\n  /**\n   * A transaction that is signing typed data.\n   */\n  signTypedData = 'eth_signTypedData',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  smart = 'smart',\n\n  /**\n   * A transaction that claims staking rewards.\n   */\n  stakingClaim = 'stakingClaim',\n\n  /**\n   * A transaction that deposits tokens into a staking contract.\n   */\n  stakingDeposit = 'stakingDeposit',\n\n  /**\n   * A transaction that unstakes tokens from a staking contract.\n   */\n  stakingUnstake = 'stakingUnstake',\n\n  /**\n   * A transaction swapping one token for another through MetaMask Swaps.\n   */\n  swap = 'swap',\n\n  /**\n   * A transaction swapping one token for another through MetaMask Swaps, then sending the swapped token to a recipient.\n   */\n  swapAndSend = 'swapAndSend',\n\n  /**\n   * Similar to the approve type, a swap approval is a special case of ERC20\n   * approve method that requests an allowance of the token to spend on behalf\n   * of the user for the MetaMask Swaps contract. The first swap for any token\n   * will have an accompanying swapApproval transaction.\n   */\n  swapApproval = 'swapApproval',\n\n  /**\n   * A token transaction requesting an allowance of the token to spend on\n   * behalf of the user.\n   */\n  tokenMethodApprove = 'approve',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. The method is prefixed with safe because when calling\n   * this method the contract checks to ensure that the receiver is an address\n   * capable of handling the token being sent.\n   */\n  tokenMethodSafeTransferFrom = 'safetransferfrom',\n\n  /**\n   * A token transaction where the user is sending tokens that they own to\n   * another address.\n   */\n  tokenMethodTransfer = 'transfer',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. For more information on allowances, see the approve\n   * type.\n   */\n  tokenMethodTransferFrom = 'transferfrom',\n\n  /**\n   * A token transaction requesting an allowance of all of a user's tokens to\n   * spend on behalf of the user.\n   */\n  tokenMethodSetApprovalForAll = 'setapprovalforall',\n\n  /**\n   * Increase the allowance by a given increment\n   */\n  tokenMethodIncreaseAllowance = 'increaseAllowance',\n}\n\n/**\n * Standard data concerning a transaction to be processed by the blockchain.\n */\nexport type TransactionParams = {\n  /**\n   * A list of addresses and storage keys that the transaction plans to access.\n   */\n  accessList?: AccessList;\n\n  /**\n   * Array of authorizations to set code on EOA accounts.\n   * Only supported in `setCode` transactions.\n   * Introduced in EIP-7702.\n   */\n  authorizationList?: AuthorizationList;\n\n  /**\n   * Network ID as per EIP-155.\n   */\n  chainId?: Hex;\n\n  /**\n   * Data to pass with this transaction.\n   */\n  data?: string;\n\n  /**\n   * Error message for gas estimation failure.\n   */\n  estimateGasError?: string;\n\n  /**\n   * Estimated base fee for this transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * Address to send this transaction from.\n   */\n  from: string;\n\n  /**\n   * same as gasLimit?\n   */\n  gas?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gasLimit?: string;\n\n  /**\n   * Price per gas for legacy txs\n   */\n  gasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority\n   * fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n\n  /**\n   * Unique number to prevent replay attacks.\n   */\n  nonce?: string;\n\n  /**\n   * Address to send this transaction to.\n   */\n  to?: string;\n\n  /**\n   * Value associated with this transaction.\n   */\n  value?: string;\n\n  /**\n   * Type of transaction.\n   * 0x0 indicates a legacy transaction.\n   */\n  type?: string;\n};\n\n/**\n * Standard data concerning a transaction processed by the blockchain.\n */\nexport type TransactionReceipt = {\n  /**\n   * The block hash of the block that this transaction was included in.\n   */\n  blockHash?: string;\n\n  /**\n   * The block number of the block that this transaction was included in.\n   */\n  blockNumber?: string;\n\n  /**\n   * Effective gas price the transaction was charged at.\n   */\n  effectiveGasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Total used gas in hex.\n   */\n  l1Fee?: string;\n\n  /**\n   * All the logs emitted by this transaction.\n   */\n  logs?: Log[];\n\n  /**\n   * The status of the transaction.\n   */\n  status?: string;\n\n  /**\n   * The hexadecimal index of this transaction in the list of transactions included in the block this transaction was mined in.\n   */\n  transactionIndex?: string;\n};\n\n/**\n * Represents an event that has been included in a transaction using the EVM `LOG` opcode.\n */\nexport type Log = {\n  /**\n   * Address of the contract that generated log.\n   */\n  address?: string;\n  /**\n   * List of topics for log.\n   */\n  topics?: string;\n};\n\n/**\n * The configuration required to fetch transaction data from a RemoteTransactionSource.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface RemoteTransactionSourceRequest {\n  /**\n   * The address of the account to fetch transactions for.\n   */\n  address: Hex;\n\n  /**\n   * Numerical cache to optimize fetching transactions.\n   */\n  cache: Record<string, unknown>;\n\n  /**\n   * The IDs of the chains to query.\n   */\n  chainIds: Hex[];\n\n  /**\n   * Whether to also include incoming token transfers.\n   */\n  includeTokenTransfers: boolean;\n\n  /**\n   * Whether to initially query the entire transaction history.\n   */\n  queryEntireHistory: boolean;\n\n  /**\n   * Callback to update the cache.\n   */\n  updateCache(fn: (cache: Record<string, unknown>) => void): void;\n\n  /**\n   * Whether to also retrieve outgoing transactions.\n   */\n  updateTransactions: boolean;\n}\n\n/**\n * An object capable of fetching transaction data from a remote source.\n * Used by the IncomingTransactionHelper to retrieve remote transaction data.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface RemoteTransactionSource {\n  /**\n   * @returns Array of chain IDs supported by the remote source.\n   */\n  getSupportedChains: () => Hex[];\n\n  /**\n   * @param request - A request object containing data such as the address and chain ID.\n   * @returns An array of transaction metadata for the retrieved transactions.\n   */\n  fetchTransactions: (\n    request: RemoteTransactionSourceRequest,\n  ) => Promise<TransactionMeta[]>;\n}\n\n/**\n * Gas values initially suggested by the dApp.\n */\nexport type DappSuggestedGasFees = {\n  gas?: string;\n  gasPrice?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n};\n\n/**\n * Gas values saved by the user for a specific chain.\n */\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface SavedGasFees {\n  maxBaseFee: string;\n  priorityFee: string;\n}\n\n/**\n * A transaction history operation that includes a note and timestamp.\n */\ntype ExtendedHistoryOperation = JsonCompatibleOperation & {\n  note?: string;\n  timestamp?: number;\n};\n\n/**\n * A transaction history entry that includes the ExtendedHistoryOperation as the first element.\n */\nexport type TransactionHistoryEntry = [\n  ExtendedHistoryOperation,\n  ...JsonCompatibleOperation[],\n];\n\n/**\n * A transaction history that includes the transaction meta as the first element.\n * And the rest of the elements are the operation arrays that were applied to the transaction meta.\n */\nexport type TransactionHistory = [\n  TransactionMeta,\n  ...TransactionHistoryEntry[],\n];\n\n/**\n * Result of inferring the transaction type.\n */\nexport type InferTransactionTypeResult = {\n  /**\n   * The contract code, in hex format if it exists. '0x0' or\n   * '0x' are also indicators of non-existent contract code.\n   */\n  getCodeResponse?: string | null;\n\n  /**\n   * The type of transaction\n   */\n  type: TransactionType;\n};\n\n/**\n * A function for verifying a transaction, whether it is malicious or not.\n */\nexport type SecurityProviderRequest = (\n  requestData: TransactionMeta,\n  messageType: string,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n\n/**\n * Specifies the shape of the base transaction parameters.\n * Added in EIP-2718.\n */\nexport enum TransactionEnvelopeType {\n  /**\n   * A legacy transaction, the very first type.\n   */\n  legacy = '0x0',\n\n  /**\n   * EIP-2930 defined the access list transaction type that allowed for\n   * specifying the state that a transaction would act upon in advance and\n   * theoretically save on gas fees.\n   */\n  accessList = '0x1',\n\n  /**\n   * The type introduced comes from EIP-1559, Fee Market describes the addition\n   * of a baseFee to blocks that will be burned instead of distributed to\n   * miners. Transactions of this type have both a maxFeePerGas (maximum total\n   * amount in gwei per gas to spend on the transaction) which is inclusive of\n   * the maxPriorityFeePerGas (maximum amount of gwei per gas from the\n   * transaction fee to distribute to miner).\n   */\n  feeMarket = '0x2',\n\n  /**\n   * Adds code to externally owned accounts according to the signed authorizations\n   * in the new `authorizationList` parameter.\n   * Introduced in EIP-7702.\n   */\n  setCode = '0x4',\n}\n\n/**\n * The source of the gas fee parameters on a transaction.\n */\nexport enum UserFeeLevel {\n  CUSTOM = 'custom',\n  DAPP_SUGGESTED = 'dappSuggested',\n  MEDIUM = 'medium',\n}\n\n/**\n * Initial gas values set when the transaction was first created.\n */\nexport type DefaultGasEstimates = {\n  /**\n   * Source of the gas fee values, such as `dappSuggested` or `medium`.\n   */\n  estimateType?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gas?: string;\n\n  /**\n   * Price per gas for legacy transactions.\n   */\n  gasPrice?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n};\n\n/**\n * Data concerning an error while processing a transaction.\n */\nexport type TransactionError = {\n  /**\n   * A descriptive error name.\n   */\n  name: string;\n\n  /**\n   * A descriptive error message providing details about the encountered error.\n   */\n  message: string;\n\n  /**\n   * The stack trace associated with the error, if available.\n   */\n  stack?: string;\n\n  /**\n   * An optional error code associated with the error.\n   */\n  code?: string;\n\n  /**\n   * The rpc property holds additional information related to the error.\n   */\n  // We are intentionally using `any` here instead of `Json` because it causes\n  // `WritableDraft<TransactionMeta>` from Immer to cause TypeScript to error\n  // with \"Type instantiation is excessively deep and possibly infinite\". See:\n  // <https://github.com/immerjs/immer/issues/839>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  rpc?: any;\n};\n\n/**\n * Type for security alert response from transaction validator.\n */\nexport type SecurityAlertResponse = {\n  reason: string;\n  features?: string[];\n  result_type: string;\n  providerRequestsCount?: Record<string, number>;\n};\n\n/** Alternate priority levels for which values are provided in gas fee estimates. */\nexport enum GasFeeEstimateLevel {\n  Low = 'low',\n  Medium = 'medium',\n  High = 'high',\n}\n\n/** Type of gas fee estimate generated by a GasFeeFlow. */\nexport enum GasFeeEstimateType {\n  FeeMarket = 'fee-market',\n  Legacy = 'legacy',\n  GasPrice = 'eth_gasPrice',\n}\n\n/** Gas fee estimates for a specific priority level. */\nexport type FeeMarketGasFeeEstimateForLevel = {\n  /** Maximum amount to pay per gas. */\n  maxFeePerGas: Hex;\n\n  /** Maximum amount per gas to give to the validator as an incentive. */\n  maxPriorityFeePerGas: Hex;\n};\n\n/** Gas fee estimates for a EIP-1559 transaction. */\nexport type FeeMarketGasFeeEstimates = {\n  type: GasFeeEstimateType.FeeMarket;\n  [GasFeeEstimateLevel.Low]: FeeMarketGasFeeEstimateForLevel;\n  [GasFeeEstimateLevel.Medium]: FeeMarketGasFeeEstimateForLevel;\n  [GasFeeEstimateLevel.High]: FeeMarketGasFeeEstimateForLevel;\n};\n\n/** Gas fee estimates for a legacy transaction. */\nexport type LegacyGasFeeEstimates = {\n  type: GasFeeEstimateType.Legacy;\n  [GasFeeEstimateLevel.Low]: Hex;\n  [GasFeeEstimateLevel.Medium]: Hex;\n  [GasFeeEstimateLevel.High]: Hex;\n};\n\n/** Gas fee estimates for a transaction retrieved with the eth_gasPrice method. */\nexport type GasPriceGasFeeEstimates = {\n  type: GasFeeEstimateType.GasPrice;\n  gasPrice: Hex;\n};\n\n/** Gas fee estimates for a transaction. */\nexport type GasFeeEstimates =\n  | FeeMarketGasFeeEstimates\n  | LegacyGasFeeEstimates\n  | GasPriceGasFeeEstimates;\n\n/** Request to a gas fee flow to obtain gas fee estimates. */\nexport type GasFeeFlowRequest = {\n  /** An EthQuery instance to enable queries to the associated RPC provider. */\n  ethQuery: EthQuery;\n\n  /** Gas fee controller data matching the chain ID of the transaction. */\n  gasFeeControllerData: GasFeeState;\n\n  /** The metadata of the transaction to obtain estimates for. */\n  transactionMeta: TransactionMeta;\n};\n\n/** Response from a gas fee flow containing gas fee estimates. */\nexport type GasFeeFlowResponse = {\n  /** The gas fee estimates for the transaction. */\n  estimates: GasFeeEstimates;\n};\n\n/** A method of obtaining gas fee estimates for a specific transaction. */\nexport type GasFeeFlow = {\n  /**\n   * Determine if the gas fee flow supports the specified transaction.\n   *\n   * @param transactionMeta - The transaction metadata.\n   * @returns Whether the gas fee flow supports the transaction.\n   */\n  matchesTransaction(transactionMeta: TransactionMeta): boolean;\n\n  /**\n   * Get gas fee estimates for a specific transaction.\n   *\n   * @param request - The gas fee flow request.\n   * @returns The gas fee flow response containing the gas fee estimates.\n   */\n  getGasFees: (request: GasFeeFlowRequest) => Promise<GasFeeFlowResponse>;\n};\n\n/** Request to a layer 1 gas fee flow to obtain layer 1 fee estimate. */\nexport type Layer1GasFeeFlowRequest = {\n  /** RPC Provider instance. */\n  provider: Provider;\n\n  /** The metadata of the transaction to obtain estimates for. */\n  transactionMeta: TransactionMeta;\n};\n\n/** Response from a layer 1 gas fee flow containing layer 1 fee estimate. */\nexport type Layer1GasFeeFlowResponse = {\n  /** The gas fee estimates for the transaction. */\n  layer1Fee: Hex;\n};\n\n/** A method of obtaining layer 1 gas fee estimates for a specific transaction. */\nexport type Layer1GasFeeFlow = {\n  /**\n   * Determine if the gas fee flow supports the specified transaction.\n   *\n   * @param transactionMeta - The transaction metadata.\n   * @returns Whether the layer1 gas fee flow supports the transaction.\n   */\n  matchesTransaction(transactionMeta: TransactionMeta): boolean;\n\n  /**\n   * Get layer 1 gas fee estimates for a specific transaction.\n   *\n   * @param request - The gas fee flow request.\n   * @returns The gas fee flow response containing the layer 1 gas fee estimate.\n   */\n  getLayer1Fee: (\n    request: Layer1GasFeeFlowRequest,\n  ) => Promise<Layer1GasFeeFlowResponse>;\n};\n\n/** Simulation data concerning an update to a native or token balance. */\nexport type SimulationBalanceChange = {\n  /** The balance before the transaction. */\n  previousBalance: Hex;\n\n  /** The balance after the transaction. */\n  newBalance: Hex;\n\n  /** The difference in balance. */\n  difference: Hex;\n\n  /** Whether the balance is increasing or decreasing. */\n  isDecrease: boolean;\n};\n\n/** Token standards supported by simulation. */\nexport enum SimulationTokenStandard {\n  erc20 = 'erc20',\n  erc721 = 'erc721',\n  erc1155 = 'erc1155',\n}\n\n/** Simulation data concerning an updated token. */\nexport type SimulationToken = {\n  /** The token's contract address. */\n  address: Hex;\n\n  /** The standard of the token. */\n  standard: SimulationTokenStandard;\n\n  /** The ID of the token if supported by the standard. */\n  id?: Hex;\n};\n\n/** Simulation data concerning a change to the a token balance. */\nexport type SimulationTokenBalanceChange = SimulationToken &\n  SimulationBalanceChange;\n\nexport enum SimulationErrorCode {\n  ChainNotSupported = 'chain-not-supported',\n  Disabled = 'disabled',\n  InvalidResponse = 'invalid-response',\n  Reverted = 'reverted',\n}\n\n/** Error data for a failed simulation. */\nexport type SimulationError = {\n  /** Error code to identify the error type. */\n  code?: string | number;\n\n  /** Error message to describe the error. */\n  message?: string;\n};\n\n/** Simulation data for a transaction. */\nexport type SimulationData = {\n  /** Error data if the simulation failed or the transaction reverted. */\n  error?: SimulationError;\n\n  /** Data concerning a change to the user's native balance. */\n  nativeBalanceChange?: SimulationBalanceChange;\n\n  /** Data concerning a change to the user's token balances. */\n  tokenBalanceChanges: SimulationTokenBalanceChange[];\n};\n\n/** Gas fee properties for a legacy transaction. */\nexport type GasPriceValue = {\n  /** Price per gas for legacy transactions. */\n  gasPrice: string;\n};\n\n/** Gas fee properties for an EIP-1559 transaction. */\nexport type FeeMarketEIP1559Values = {\n  /** Maximum amount to pay per gas. */\n  maxFeePerGas: string;\n\n  /** Maximum amount per gas to give to the validator as an incentive. */\n  maxPriorityFeePerGas: string;\n};\n\n/**\n * Data concerning a successfully submitted transaction.\n * Used for debugging purposes.\n */\nexport type SubmitHistoryEntry = {\n  /** The chain ID of the transaction as a hexadecimal string. */\n  chainId?: Hex;\n\n  /** The hash of the transaction returned from the RPC provider. */\n  hash: string;\n\n  /** True if the entry was generated using the migration and existing transaction metadata. */\n  migration?: boolean;\n\n  /** The type of the network where the transaction was submitted. */\n  networkType?: string;\n\n  /**\n   * The URL of the network the transaction was submitted to.\n   * A single network URL if it was recorded when submitted.\n   * An array of potential network URLs if it cannot be confirmed since the migration was used.\n   */\n  networkUrl?: string | string[];\n\n  /** The origin of the transaction. */\n  origin?: string;\n\n  /** The raw transaction data that was submitted. */\n  rawTransaction: string;\n\n  /** When the transaction was submitted. */\n  time: number;\n\n  /** The transaction parameters that were submitted. */\n  transaction: TransactionParams;\n};\n\nexport type InternalAccount = ReturnType<\n  AccountsController['getSelectedAccount']\n>;\n\n/**\n * An authorization to be included in a `setCode` transaction.\n * Specifies code to be added to the authorization signer's EOA account.\n * Introduced in EIP-7702.\n */\nexport type Authorization = {\n  /** Address of a smart contract that contains the code to be set. */\n  address: Hex;\n\n  /**\n   * Specific chain the authorization applies to.\n   * If not provided, defaults to the chain ID of the transaction.\n   */\n  chainId?: Hex;\n\n  /**\n   * Nonce at which the authorization will be valid.\n   * If not provided, defaults to the nonce following the transaction's nonce.\n   */\n  nonce?: Hex;\n\n  /** R component of the signature. */\n  r?: Hex;\n\n  /** S component of the signature. */\n  s?: Hex;\n\n  /** Y parity generated from the signature. */\n  yParity?: Hex;\n};\n\n/**\n * An array of authorizations to be included in a `setCode` transaction.\n * Introduced in EIP-7702.\n */\nexport type AuthorizationList = Authorization[];\n"]}
\ No newline at end of file
diff --git a/dist/types.d.cts b/dist/types.d.cts
index db2cdf02216fae9093ed295306f71c5848ddb677..a1d4f6798df46ff490ae04fbadd1d6b3065f6bf9 100644
--- a/dist/types.d.cts
+++ b/dist/types.d.cts
@@ -135,10 +135,6 @@ type TransactionMetaBase = {
      * The number of the latest block when the transaction submit was first retried.
      */
     firstRetryBlockNumber?: string;
-    /**
-     * Whether the transaction is active.
-     */
-    isActive?: boolean;
     /**
      * Whether the transaction is the first time interaction.
      */
@@ -1041,8 +1037,6 @@ export type SimulationError = {
 export type SimulationData = {
     /** Error data if the simulation failed or the transaction reverted. */
     error?: SimulationError;
-    /** Whether the simulation response changed after a security check triggered a re-simulation. */
-    isUpdatedAfterSecurityCheck?: boolean;
     /** Data concerning a change to the user's native balance. */
     nativeBalanceChange?: SimulationBalanceChange;
     /** Data concerning a change to the user's token balances. */
diff --git a/dist/types.d.cts.map b/dist/types.d.cts.map
index 07029a6643947896772bdef7e1f6e1dceed10682..7b4c27c251cbca40e36482f06e47c611798a1270 100644
--- a/dist/types.d.cts.map
+++ b/dist/types.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"types.d.cts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"types.d.cts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types.d.mts b/dist/types.d.mts
index be02360f5cf47cf64ee1f4c1d4efbe17d9d243b2..c1b952315fef65e40345f422d62d931a4324a021 100644
--- a/dist/types.d.mts
+++ b/dist/types.d.mts
@@ -135,10 +135,6 @@ type TransactionMetaBase = {
      * The number of the latest block when the transaction submit was first retried.
      */
     firstRetryBlockNumber?: string;
-    /**
-     * Whether the transaction is active.
-     */
-    isActive?: boolean;
     /**
      * Whether the transaction is the first time interaction.
      */
@@ -1041,8 +1037,6 @@ export type SimulationError = {
 export type SimulationData = {
     /** Error data if the simulation failed or the transaction reverted. */
     error?: SimulationError;
-    /** Whether the simulation response changed after a security check triggered a re-simulation. */
-    isUpdatedAfterSecurityCheck?: boolean;
     /** Data concerning a change to the user's native balance. */
     nativeBalanceChange?: SimulationBalanceChange;
     /** Data concerning a change to the user's token balances. */
diff --git a/dist/types.d.mts.map b/dist/types.d.mts.map
index c2781e6eda29fe65836688de16a5e51bdae05f98..cdc8d95d09da3ad2dc37b4807db2f887667cde0d 100644
--- a/dist/types.d.mts.map
+++ b/dist/types.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"types.d.mts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"types.d.mts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types.mjs.map b/dist/types.mjs.map
index f5057eac6ff5cce5e1bee884090e4959fa33e801..e0eefa6619ee1425010e2ce8d76107761b906974 100644
--- a/dist/types.mjs.map
+++ b/dist/types.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"types.mjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccessList } from '@ethereumjs/tx';\nimport type { AccountsController } from '@metamask/accounts-controller';\nimport type EthQuery from '@metamask/eth-query';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport type { NetworkClientId, Provider } from '@metamask/network-controller';\nimport type { Hex, Json } from '@metamask/utils';\nimport type { Operation } from 'fast-json-patch';\n\n/**\n * Given a record, ensures that each property matches the `Json` type.\n */\ntype MakeJsonCompatible<T> = T extends Json\n  ? T\n  : {\n      [K in keyof T]: T[K] extends Json ? T[K] : never;\n    };\n\n/**\n * `Json` from `@metamask/utils` is defined as a recursive type alias, but\n * `Operation` is defined as an interface, and the two are not compatible with\n * each other. Therefore, this is a variant of Operation from `fast-json-patch`\n * which is guaranteed to be type-compatible with `Json`.\n */\ntype JsonCompatibleOperation = MakeJsonCompatible<Operation>;\n\n/**\n * Representation of transaction metadata.\n */\nexport type TransactionMeta = TransactionMetaBase &\n  (\n    | {\n        status: Exclude<TransactionStatus, TransactionStatus.failed>;\n      }\n    | {\n        status: TransactionStatus.failed;\n        error: TransactionError;\n      }\n  );\n\n/**\n * Information about a single transaction such as status and block number.\n */\ntype TransactionMetaBase = {\n  /**\n   * ID of the transaction that approved the swap token transfer.\n   */\n  approvalTxId?: string;\n\n  /**\n   * Unique ID to prevent duplicate requests.\n   */\n  actionId?: string;\n\n  /**\n   * Base fee of the block as a hex value, introduced in EIP-1559.\n   */\n  baseFeePerGas?: Hex;\n\n  /**\n   * Number of the block where the transaction has been included.\n   */\n  blockNumber?: string;\n\n  /**\n   * The timestamp for when the block was collated.\n   */\n  blockTimestamp?: string;\n\n  /**\n   * Network code as per EIP-155 for this transaction.\n   */\n  chainId: Hex;\n\n  /**\n   * A string representing a name of transaction contract method.\n   */\n  contractMethodName?: string;\n\n  /**\n   * The balance of the token that is being sent.\n   */\n  currentTokenBalance?: string;\n\n  /**\n   * Unique ID for custodian transaction.\n   */\n  custodyId?: string;\n\n  /**\n   * Custodian transaction status.\n   */\n  custodyStatus?: string;\n\n  /** The optional custom nonce override as a decimal string. */\n  customNonceValue?: string;\n\n  /**\n   * The custom token amount is the amount set by the user.\n   */\n  customTokenAmount?: string;\n\n  /**\n   * The dapp proposed token amount.\n   */\n  dappProposedTokenAmount?: string;\n\n  /**\n   * Gas values provided by the dApp.\n   */\n  dappSuggestedGasFees?: DappSuggestedGasFees;\n\n  /**\n   * The initial gas values set when the transaction was first created.\n   */\n  defaultGasEstimates?: DefaultGasEstimates;\n\n  /**\n   * String to indicate what device the transaction was confirmed on.\n   */\n  deviceConfirmedOn?: WalletDevice;\n\n  /**\n   * The Network ID as per EIP-155 of the destination chain of a bridge transaction.\n   */\n  destinationChainId?: Hex;\n\n  /**\n   * The address of the token being received of swap transaction.\n   */\n  destinationTokenAddress?: string;\n\n  /**\n   * The raw amount of the destination token\n   */\n  destinationTokenAmount?: string;\n\n  /**\n   * The decimals of the token being received of swap transaction.\n   */\n  destinationTokenDecimals?: number;\n\n  /**\n   * The symbol of the token being received with swap.\n   */\n  destinationTokenSymbol?: string;\n\n  /**\n   * The estimated base fee of the transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * The chosen amount which will be the same as the originally proposed token\n   * amount if the user does not edit the  amount or will be a custom token\n   * amount set by the user.\n   */\n  finalApprovalAmount?: string;\n\n  /**\n   * The number of the latest block when the transaction submit was first retried.\n   */\n  firstRetryBlockNumber?: string;\n\n  /**\n   * Whether the transaction is active.\n   */\n  isActive?: boolean;\n\n  /**\n   * Whether the transaction is the first time interaction.\n   */\n  isFirstTimeInteraction?: boolean;\n\n  /** Alternate EIP-1559 gas fee estimates for multiple priority levels. */\n  gasFeeEstimates?: GasFeeEstimates;\n\n  /** Whether the gas fee estimates have been checked at least once. */\n  gasFeeEstimatesLoaded?: boolean;\n\n  /**\n   * The estimated gas for the transaction without any buffer applied.\n   */\n  gasLimitNoBuffer?: string;\n\n  /**\n   * A hex string of the transaction hash, used to identify the transaction on the network.\n   */\n  hash?: string;\n\n  /**\n   * A history of mutations to TransactionMeta.\n   */\n  history?: TransactionHistory;\n\n  /**\n   * Generated UUID associated with this transaction.\n   */\n  id: string;\n\n  /**\n   * Whether the transaction is a transfer.\n   */\n  isTransfer?: boolean;\n\n  /**\n   * Whether the transaction entry is generated from a user operation.\n   */\n  isUserOperation?: boolean;\n\n  /**\n   * Additional gas fees to cover the cost of persisting data on layer 1 for layer 2 networks.\n   */\n  layer1GasFee?: Hex;\n\n  /**\n   * The ID of the network client used by the transaction.\n   */\n  networkClientId: NetworkClientId;\n\n  /**\n   * Network code as per EIP-155 for this transaction\n   *\n   * @deprecated Use `chainId` instead.\n   */\n  readonly networkID?: string;\n\n  /**\n   * Origin this transaction was sent from.\n   */\n  origin?: string;\n\n  /**\n   * The original dapp proposed token approval amount before edit by user.\n   */\n  originalApprovalAmount?: string;\n\n  /**\n   * The original gas estimation of the transaction.\n   */\n  originalGasEstimate?: string;\n\n  /**\n   * When we speed up a transaction, we set the type as Retry and we lose\n   * information about type of transaction that is being set up, so we use\n   * original type to track that information.\n   */\n  originalType?: TransactionType;\n\n  /**\n   * Account transaction balance after swap.\n   */\n  postTxBalance?: string;\n\n  /**\n   * Account transaction balance before swap.\n   */\n  preTxBalance?: string;\n\n  /**\n   * The previous gas properties before they were updated.\n   */\n  previousGas?: {\n    /**\n     * Maxmimum number of units of gas to use for this transaction.\n     */\n    gasLimit?: string;\n\n    /**\n     * Maximum amount per gas to pay for the transaction, including the priority fee.\n     */\n    maxFeePerGas?: string;\n\n    /**\n     * Maximum amount per gas to give to validator as incentive.\n     */\n    maxPriorityFeePerGas?: string;\n  };\n\n  /**\n   * The transaction's 'r' value as a hex string.\n   */\n  r?: string;\n\n  /**\n   * Hex representation of the underlying transaction.\n   */\n  rawTx?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction hash.\n   */\n  replacedBy?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction ID.\n   */\n  replacedById?: string;\n\n  /**\n   * The number of times that the transaction submit has been retried.\n   */\n  retryCount?: number;\n\n  /**\n   * The transaction's 's' value as a hex string.\n   */\n  s?: string;\n\n  /**\n   * Response from security validator.\n   */\n  securityAlertResponse?: SecurityAlertResponse;\n\n  /**\n   * Response from security provider.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  securityProviderResponse?: Record<string, any>;\n\n  /**\n   * An array of entries that describe the user's journey through the send flow.\n   * This is purely attached to state logs for troubleshooting and support.\n   */\n  sendFlowHistory?: SendFlowHistoryEntry[];\n\n  /**\n   * Simulation data for the transaction used to predict its outcome.\n   */\n  simulationData?: SimulationData;\n\n  /**\n   * If the gas estimation fails, an object containing error and block information.\n   */\n  simulationFails?: {\n    reason?: string;\n    errorKey?: string;\n    debug: {\n      blockNumber?: string;\n      blockGasLimit?: string;\n    };\n  };\n\n  /**\n   * The time the transaction was submitted to the network, in Unix epoch time (ms).\n   */\n  submittedTime?: number;\n\n  /**\n   * The address of the token being swapped\n   */\n  sourceTokenAddress?: string;\n\n  /**\n   * The raw amount of the source swap token\n   */\n  sourceTokenAmount?: string;\n\n  /**\n   * The decimals of the token being swapped.\n   */\n  sourceTokenDecimals?: number;\n\n  /**\n   * The symbol of the token being swapped.\n   */\n  sourceTokenSymbol?: string;\n\n  /**\n   * The address of the swap recipient.\n   */\n  swapAndSendRecipient?: string;\n\n  /**\n   * The metadata of the swap transaction.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  swapMetaData?: Record<string, any>;\n\n  /**\n   * The value of the token being swapped.\n   */\n  swapTokenValue?: string;\n\n  /**\n   * Timestamp associated with this transaction.\n   */\n  time: number;\n\n  /**\n   * Whether transaction recipient is a smart contract.\n   */\n  toSmartContract?: boolean;\n\n  /**\n   * Additional transfer information.\n   */\n  transferInformation?: {\n    contractAddress: string;\n    decimals: number;\n    symbol: string;\n  };\n\n  /**\n   * Underlying Transaction object.\n   */\n  txParams: TransactionParams;\n\n  /**\n   * Transaction receipt.\n   */\n  txReceipt?: TransactionReceipt;\n\n  /**\n   * The type of transaction such as `cancel` or `swap`.\n   */\n  type?: TransactionType;\n\n  /**\n   * The gas limit supplied by user.\n   */\n  userEditedGasLimit?: boolean;\n\n  /**\n   * Estimate level user selected.\n   */\n  userFeeLevel?: string;\n\n  /**\n   * The transaction's 'v' value as a hex string.\n   */\n  v?: string;\n\n  /**\n   * Whether the transaction is verified on the blockchain.\n   */\n  verifiedOnBlockchain?: boolean;\n\n  /**\n   * Warning information for the transaction.\n   */\n  warning?: {\n    error: string;\n    message: string;\n  };\n};\n\nexport type SendFlowHistoryEntry = {\n  /**\n   * String to indicate user interaction information.\n   */\n  entry: string;\n\n  /**\n   * Timestamp associated with this entry.\n   */\n  timestamp: number;\n};\n\n/**\n * Represents the status of a transaction within the wallet.\n * Each status reflects the state of the transaction internally,\n * with some statuses corresponding to the transaction's state on the network.\n *\n * The typical transaction lifecycle follows this state machine:\n * unapproved -> approved -> signed -> submitted -> FINAL_STATE\n * where FINAL_STATE is one of: confirmed, failed, dropped, or rejected.\n */\nexport enum TransactionStatus {\n  /**\n   * The initial state of a transaction before user approval.\n   */\n  unapproved = 'unapproved',\n\n  /**\n   * The transaction has been approved by the user but is not yet signed.\n   * This status is usually brief but may be longer for scenarios like hardware wallet usage.\n   */\n  approved = 'approved',\n\n  /**\n   * The transaction is signed and in the process of being submitted to the network.\n   * This status is typically short-lived but can be longer for certain cases, such as smart transactions.\n   */\n  signed = 'signed',\n\n  /**\n   * The transaction has been submitted to the network and is awaiting confirmation.\n   */\n  submitted = 'submitted',\n\n  /**\n   * The transaction has been successfully executed and confirmed on the blockchain.\n   * This is a final state.\n   */\n  confirmed = 'confirmed',\n\n  /**\n   * The transaction encountered an error during execution on the blockchain and failed.\n   * This is a final state.\n   */\n  failed = 'failed',\n\n  /**\n   * The transaction was superseded by another transaction, resulting in its dismissal.\n   * This is a final state.\n   */\n  dropped = 'dropped',\n\n  /**\n   * The transaction was rejected by the user and not processed further.\n   * This is a final state.\n   */\n  rejected = 'rejected',\n\n  /**\n   * @deprecated This status is no longer used.\n   */\n  cancelled = 'cancelled',\n}\n\n/**\n * Options for wallet device.\n */\nexport enum WalletDevice {\n  MM_MOBILE = 'metamask_mobile',\n  MM_EXTENSION = 'metamask_extension',\n  OTHER = 'other_device',\n}\n\n/**\n * The type of the transaction.\n */\nexport enum TransactionType {\n  /**\n   * A transaction that bridges tokens to a different chain through Metamask Bridge.\n   */\n  bridge = 'bridge',\n\n  /**\n   * Similar to the approve type, a bridge approval is a special case of ERC20\n   * approve method that requests an allowance of the token to spend on behalf\n   * of the user for the MetaMask Bridge contract. The first bridge for any token\n   * will have an accompanying bridgeApproval transaction.\n   */\n  bridgeApproval = 'bridgeApproval',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  cancel = 'cancel',\n\n  /**\n   * A transaction that is interacting with a smart contract's methods that we\n   * have not treated as a special case, such as approve, transfer, and\n   * transferfrom.\n   */\n  contractInteraction = 'contractInteraction',\n\n  /**\n   * A transaction that deployed a smart contract.\n   */\n  deployContract = 'contractDeployment',\n\n  /**\n   * A transaction for Ethereum decryption.\n   */\n  ethDecrypt = 'eth_decrypt',\n\n  /**\n   * A transaction for getting an encryption public key.\n   */\n  ethGetEncryptionPublicKey = 'eth_getEncryptionPublicKey',\n\n  /**\n   * An incoming (deposit) transaction.\n   */\n  incoming = 'incoming',\n\n  /**\n   * A transaction for personal sign.\n   */\n  personalSign = 'personal_sign',\n\n  /**\n   * When a transaction is failed it can be retried by\n   * resubmitting the same transaction with a higher gas fee. This type is also used\n   * to speed up pending transactions. This is accomplished by creating a new tx with\n   * the same nonce and higher gas fees.\n   */\n  retry = 'retry',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  simpleSend = 'simpleSend',\n\n  /**\n   * A transaction that is signing typed data.\n   */\n  signTypedData = 'eth_signTypedData',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  smart = 'smart',\n\n  /**\n   * A transaction that claims staking rewards.\n   */\n  stakingClaim = 'stakingClaim',\n\n  /**\n   * A transaction that deposits tokens into a staking contract.\n   */\n  stakingDeposit = 'stakingDeposit',\n\n  /**\n   * A transaction that unstakes tokens from a staking contract.\n   */\n  stakingUnstake = 'stakingUnstake',\n\n  /**\n   * A transaction swapping one token for another through MetaMask Swaps.\n   */\n  swap = 'swap',\n\n  /**\n   * A transaction swapping one token for another through MetaMask Swaps, then sending the swapped token to a recipient.\n   */\n  swapAndSend = 'swapAndSend',\n\n  /**\n   * Similar to the approve type, a swap approval is a special case of ERC20\n   * approve method that requests an allowance of the token to spend on behalf\n   * of the user for the MetaMask Swaps contract. The first swap for any token\n   * will have an accompanying swapApproval transaction.\n   */\n  swapApproval = 'swapApproval',\n\n  /**\n   * A token transaction requesting an allowance of the token to spend on\n   * behalf of the user.\n   */\n  tokenMethodApprove = 'approve',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. The method is prefixed with safe because when calling\n   * this method the contract checks to ensure that the receiver is an address\n   * capable of handling the token being sent.\n   */\n  tokenMethodSafeTransferFrom = 'safetransferfrom',\n\n  /**\n   * A token transaction where the user is sending tokens that they own to\n   * another address.\n   */\n  tokenMethodTransfer = 'transfer',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. For more information on allowances, see the approve\n   * type.\n   */\n  tokenMethodTransferFrom = 'transferfrom',\n\n  /**\n   * A token transaction requesting an allowance of all of a user's tokens to\n   * spend on behalf of the user.\n   */\n  tokenMethodSetApprovalForAll = 'setapprovalforall',\n\n  /**\n   * Increase the allowance by a given increment\n   */\n  tokenMethodIncreaseAllowance = 'increaseAllowance',\n}\n\n/**\n * Standard data concerning a transaction to be processed by the blockchain.\n */\nexport type TransactionParams = {\n  /**\n   * A list of addresses and storage keys that the transaction plans to access.\n   */\n  accessList?: AccessList;\n\n  /**\n   * Array of authorizations to set code on EOA accounts.\n   * Only supported in `setCode` transactions.\n   * Introduced in EIP-7702.\n   */\n  authorizationList?: AuthorizationList;\n\n  /**\n   * Network ID as per EIP-155.\n   */\n  chainId?: Hex;\n\n  /**\n   * Data to pass with this transaction.\n   */\n  data?: string;\n\n  /**\n   * Error message for gas estimation failure.\n   */\n  estimateGasError?: string;\n\n  /**\n   * Estimated base fee for this transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * Address to send this transaction from.\n   */\n  from: string;\n\n  /**\n   * same as gasLimit?\n   */\n  gas?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gasLimit?: string;\n\n  /**\n   * Price per gas for legacy txs\n   */\n  gasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority\n   * fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n\n  /**\n   * Unique number to prevent replay attacks.\n   */\n  nonce?: string;\n\n  /**\n   * Address to send this transaction to.\n   */\n  to?: string;\n\n  /**\n   * Value associated with this transaction.\n   */\n  value?: string;\n\n  /**\n   * Type of transaction.\n   * 0x0 indicates a legacy transaction.\n   */\n  type?: string;\n};\n\n/**\n * Standard data concerning a transaction processed by the blockchain.\n */\nexport type TransactionReceipt = {\n  /**\n   * The block hash of the block that this transaction was included in.\n   */\n  blockHash?: string;\n\n  /**\n   * The block number of the block that this transaction was included in.\n   */\n  blockNumber?: string;\n\n  /**\n   * Effective gas price the transaction was charged at.\n   */\n  effectiveGasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Total used gas in hex.\n   */\n  l1Fee?: string;\n\n  /**\n   * All the logs emitted by this transaction.\n   */\n  logs?: Log[];\n\n  /**\n   * The status of the transaction.\n   */\n  status?: string;\n\n  /**\n   * The hexadecimal index of this transaction in the list of transactions included in the block this transaction was mined in.\n   */\n  transactionIndex?: string;\n};\n\n/**\n * Represents an event that has been included in a transaction using the EVM `LOG` opcode.\n */\nexport type Log = {\n  /**\n   * Address of the contract that generated log.\n   */\n  address?: string;\n  /**\n   * List of topics for log.\n   */\n  topics?: string;\n};\n\n/**\n * The configuration required to fetch transaction data from a RemoteTransactionSource.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface RemoteTransactionSourceRequest {\n  /**\n   * The address of the account to fetch transactions for.\n   */\n  address: Hex;\n\n  /**\n   * Numerical cache to optimize fetching transactions.\n   */\n  cache: Record<string, unknown>;\n\n  /**\n   * The IDs of the chains to query.\n   */\n  chainIds: Hex[];\n\n  /**\n   * Whether to also include incoming token transfers.\n   */\n  includeTokenTransfers: boolean;\n\n  /**\n   * Whether to initially query the entire transaction history.\n   */\n  queryEntireHistory: boolean;\n\n  /**\n   * Callback to update the cache.\n   */\n  updateCache(fn: (cache: Record<string, unknown>) => void): void;\n\n  /**\n   * Whether to also retrieve outgoing transactions.\n   */\n  updateTransactions: boolean;\n}\n\n/**\n * An object capable of fetching transaction data from a remote source.\n * Used by the IncomingTransactionHelper to retrieve remote transaction data.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface RemoteTransactionSource {\n  /**\n   * @returns Array of chain IDs supported by the remote source.\n   */\n  getSupportedChains: () => Hex[];\n\n  /**\n   * @param request - A request object containing data such as the address and chain ID.\n   * @returns An array of transaction metadata for the retrieved transactions.\n   */\n  fetchTransactions: (\n    request: RemoteTransactionSourceRequest,\n  ) => Promise<TransactionMeta[]>;\n}\n\n/**\n * Gas values initially suggested by the dApp.\n */\nexport type DappSuggestedGasFees = {\n  gas?: string;\n  gasPrice?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n};\n\n/**\n * Gas values saved by the user for a specific chain.\n */\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface SavedGasFees {\n  maxBaseFee: string;\n  priorityFee: string;\n}\n\n/**\n * A transaction history operation that includes a note and timestamp.\n */\ntype ExtendedHistoryOperation = JsonCompatibleOperation & {\n  note?: string;\n  timestamp?: number;\n};\n\n/**\n * A transaction history entry that includes the ExtendedHistoryOperation as the first element.\n */\nexport type TransactionHistoryEntry = [\n  ExtendedHistoryOperation,\n  ...JsonCompatibleOperation[],\n];\n\n/**\n * A transaction history that includes the transaction meta as the first element.\n * And the rest of the elements are the operation arrays that were applied to the transaction meta.\n */\nexport type TransactionHistory = [\n  TransactionMeta,\n  ...TransactionHistoryEntry[],\n];\n\n/**\n * Result of inferring the transaction type.\n */\nexport type InferTransactionTypeResult = {\n  /**\n   * The contract code, in hex format if it exists. '0x0' or\n   * '0x' are also indicators of non-existent contract code.\n   */\n  getCodeResponse?: string | null;\n\n  /**\n   * The type of transaction\n   */\n  type: TransactionType;\n};\n\n/**\n * A function for verifying a transaction, whether it is malicious or not.\n */\nexport type SecurityProviderRequest = (\n  requestData: TransactionMeta,\n  messageType: string,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n\n/**\n * Specifies the shape of the base transaction parameters.\n * Added in EIP-2718.\n */\nexport enum TransactionEnvelopeType {\n  /**\n   * A legacy transaction, the very first type.\n   */\n  legacy = '0x0',\n\n  /**\n   * EIP-2930 defined the access list transaction type that allowed for\n   * specifying the state that a transaction would act upon in advance and\n   * theoretically save on gas fees.\n   */\n  accessList = '0x1',\n\n  /**\n   * The type introduced comes from EIP-1559, Fee Market describes the addition\n   * of a baseFee to blocks that will be burned instead of distributed to\n   * miners. Transactions of this type have both a maxFeePerGas (maximum total\n   * amount in gwei per gas to spend on the transaction) which is inclusive of\n   * the maxPriorityFeePerGas (maximum amount of gwei per gas from the\n   * transaction fee to distribute to miner).\n   */\n  feeMarket = '0x2',\n\n  /**\n   * Adds code to externally owned accounts according to the signed authorizations\n   * in the new `authorizationList` parameter.\n   * Introduced in EIP-7702.\n   */\n  setCode = '0x4',\n}\n\n/**\n * The source of the gas fee parameters on a transaction.\n */\nexport enum UserFeeLevel {\n  CUSTOM = 'custom',\n  DAPP_SUGGESTED = 'dappSuggested',\n  MEDIUM = 'medium',\n}\n\n/**\n * Initial gas values set when the transaction was first created.\n */\nexport type DefaultGasEstimates = {\n  /**\n   * Source of the gas fee values, such as `dappSuggested` or `medium`.\n   */\n  estimateType?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gas?: string;\n\n  /**\n   * Price per gas for legacy transactions.\n   */\n  gasPrice?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n};\n\n/**\n * Data concerning an error while processing a transaction.\n */\nexport type TransactionError = {\n  /**\n   * A descriptive error name.\n   */\n  name: string;\n\n  /**\n   * A descriptive error message providing details about the encountered error.\n   */\n  message: string;\n\n  /**\n   * The stack trace associated with the error, if available.\n   */\n  stack?: string;\n\n  /**\n   * An optional error code associated with the error.\n   */\n  code?: string;\n\n  /**\n   * The rpc property holds additional information related to the error.\n   */\n  // We are intentionally using `any` here instead of `Json` because it causes\n  // `WritableDraft<TransactionMeta>` from Immer to cause TypeScript to error\n  // with \"Type instantiation is excessively deep and possibly infinite\". See:\n  // <https://github.com/immerjs/immer/issues/839>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  rpc?: any;\n};\n\n/**\n * Type for security alert response from transaction validator.\n */\nexport type SecurityAlertResponse = {\n  reason: string;\n  features?: string[];\n  result_type: string;\n  providerRequestsCount?: Record<string, number>;\n};\n\n/** Alternate priority levels for which values are provided in gas fee estimates. */\nexport enum GasFeeEstimateLevel {\n  Low = 'low',\n  Medium = 'medium',\n  High = 'high',\n}\n\n/** Type of gas fee estimate generated by a GasFeeFlow. */\nexport enum GasFeeEstimateType {\n  FeeMarket = 'fee-market',\n  Legacy = 'legacy',\n  GasPrice = 'eth_gasPrice',\n}\n\n/** Gas fee estimates for a specific priority level. */\nexport type FeeMarketGasFeeEstimateForLevel = {\n  /** Maximum amount to pay per gas. */\n  maxFeePerGas: Hex;\n\n  /** Maximum amount per gas to give to the validator as an incentive. */\n  maxPriorityFeePerGas: Hex;\n};\n\n/** Gas fee estimates for a EIP-1559 transaction. */\nexport type FeeMarketGasFeeEstimates = {\n  type: GasFeeEstimateType.FeeMarket;\n  [GasFeeEstimateLevel.Low]: FeeMarketGasFeeEstimateForLevel;\n  [GasFeeEstimateLevel.Medium]: FeeMarketGasFeeEstimateForLevel;\n  [GasFeeEstimateLevel.High]: FeeMarketGasFeeEstimateForLevel;\n};\n\n/** Gas fee estimates for a legacy transaction. */\nexport type LegacyGasFeeEstimates = {\n  type: GasFeeEstimateType.Legacy;\n  [GasFeeEstimateLevel.Low]: Hex;\n  [GasFeeEstimateLevel.Medium]: Hex;\n  [GasFeeEstimateLevel.High]: Hex;\n};\n\n/** Gas fee estimates for a transaction retrieved with the eth_gasPrice method. */\nexport type GasPriceGasFeeEstimates = {\n  type: GasFeeEstimateType.GasPrice;\n  gasPrice: Hex;\n};\n\n/** Gas fee estimates for a transaction. */\nexport type GasFeeEstimates =\n  | FeeMarketGasFeeEstimates\n  | LegacyGasFeeEstimates\n  | GasPriceGasFeeEstimates;\n\n/** Request to a gas fee flow to obtain gas fee estimates. */\nexport type GasFeeFlowRequest = {\n  /** An EthQuery instance to enable queries to the associated RPC provider. */\n  ethQuery: EthQuery;\n\n  /** Gas fee controller data matching the chain ID of the transaction. */\n  gasFeeControllerData: GasFeeState;\n\n  /** The metadata of the transaction to obtain estimates for. */\n  transactionMeta: TransactionMeta;\n};\n\n/** Response from a gas fee flow containing gas fee estimates. */\nexport type GasFeeFlowResponse = {\n  /** The gas fee estimates for the transaction. */\n  estimates: GasFeeEstimates;\n};\n\n/** A method of obtaining gas fee estimates for a specific transaction. */\nexport type GasFeeFlow = {\n  /**\n   * Determine if the gas fee flow supports the specified transaction.\n   *\n   * @param transactionMeta - The transaction metadata.\n   * @returns Whether the gas fee flow supports the transaction.\n   */\n  matchesTransaction(transactionMeta: TransactionMeta): boolean;\n\n  /**\n   * Get gas fee estimates for a specific transaction.\n   *\n   * @param request - The gas fee flow request.\n   * @returns The gas fee flow response containing the gas fee estimates.\n   */\n  getGasFees: (request: GasFeeFlowRequest) => Promise<GasFeeFlowResponse>;\n};\n\n/** Request to a layer 1 gas fee flow to obtain layer 1 fee estimate. */\nexport type Layer1GasFeeFlowRequest = {\n  /** RPC Provider instance. */\n  provider: Provider;\n\n  /** The metadata of the transaction to obtain estimates for. */\n  transactionMeta: TransactionMeta;\n};\n\n/** Response from a layer 1 gas fee flow containing layer 1 fee estimate. */\nexport type Layer1GasFeeFlowResponse = {\n  /** The gas fee estimates for the transaction. */\n  layer1Fee: Hex;\n};\n\n/** A method of obtaining layer 1 gas fee estimates for a specific transaction. */\nexport type Layer1GasFeeFlow = {\n  /**\n   * Determine if the gas fee flow supports the specified transaction.\n   *\n   * @param transactionMeta - The transaction metadata.\n   * @returns Whether the layer1 gas fee flow supports the transaction.\n   */\n  matchesTransaction(transactionMeta: TransactionMeta): boolean;\n\n  /**\n   * Get layer 1 gas fee estimates for a specific transaction.\n   *\n   * @param request - The gas fee flow request.\n   * @returns The gas fee flow response containing the layer 1 gas fee estimate.\n   */\n  getLayer1Fee: (\n    request: Layer1GasFeeFlowRequest,\n  ) => Promise<Layer1GasFeeFlowResponse>;\n};\n\n/** Simulation data concerning an update to a native or token balance. */\nexport type SimulationBalanceChange = {\n  /** The balance before the transaction. */\n  previousBalance: Hex;\n\n  /** The balance after the transaction. */\n  newBalance: Hex;\n\n  /** The difference in balance. */\n  difference: Hex;\n\n  /** Whether the balance is increasing or decreasing. */\n  isDecrease: boolean;\n};\n\n/** Token standards supported by simulation. */\nexport enum SimulationTokenStandard {\n  erc20 = 'erc20',\n  erc721 = 'erc721',\n  erc1155 = 'erc1155',\n}\n\n/** Simulation data concerning an updated token. */\nexport type SimulationToken = {\n  /** The token's contract address. */\n  address: Hex;\n\n  /** The standard of the token. */\n  standard: SimulationTokenStandard;\n\n  /** The ID of the token if supported by the standard. */\n  id?: Hex;\n};\n\n/** Simulation data concerning a change to the a token balance. */\nexport type SimulationTokenBalanceChange = SimulationToken &\n  SimulationBalanceChange;\n\nexport enum SimulationErrorCode {\n  ChainNotSupported = 'chain-not-supported',\n  Disabled = 'disabled',\n  InvalidResponse = 'invalid-response',\n  Reverted = 'reverted',\n}\n\n/** Error data for a failed simulation. */\nexport type SimulationError = {\n  /** Error code to identify the error type. */\n  code?: string | number;\n\n  /** Error message to describe the error. */\n  message?: string;\n};\n\n/** Simulation data for a transaction. */\nexport type SimulationData = {\n  /** Error data if the simulation failed or the transaction reverted. */\n  error?: SimulationError;\n\n  /** Whether the simulation response changed after a security check triggered a re-simulation. */\n  isUpdatedAfterSecurityCheck?: boolean;\n\n  /** Data concerning a change to the user's native balance. */\n  nativeBalanceChange?: SimulationBalanceChange;\n\n  /** Data concerning a change to the user's token balances. */\n  tokenBalanceChanges: SimulationTokenBalanceChange[];\n};\n\n/** Gas fee properties for a legacy transaction. */\nexport type GasPriceValue = {\n  /** Price per gas for legacy transactions. */\n  gasPrice: string;\n};\n\n/** Gas fee properties for an EIP-1559 transaction. */\nexport type FeeMarketEIP1559Values = {\n  /** Maximum amount to pay per gas. */\n  maxFeePerGas: string;\n\n  /** Maximum amount per gas to give to the validator as an incentive. */\n  maxPriorityFeePerGas: string;\n};\n\n/**\n * Data concerning a successfully submitted transaction.\n * Used for debugging purposes.\n */\nexport type SubmitHistoryEntry = {\n  /** The chain ID of the transaction as a hexadecimal string. */\n  chainId?: Hex;\n\n  /** The hash of the transaction returned from the RPC provider. */\n  hash: string;\n\n  /** True if the entry was generated using the migration and existing transaction metadata. */\n  migration?: boolean;\n\n  /** The type of the network where the transaction was submitted. */\n  networkType?: string;\n\n  /**\n   * The URL of the network the transaction was submitted to.\n   * A single network URL if it was recorded when submitted.\n   * An array of potential network URLs if it cannot be confirmed since the migration was used.\n   */\n  networkUrl?: string | string[];\n\n  /** The origin of the transaction. */\n  origin?: string;\n\n  /** The raw transaction data that was submitted. */\n  rawTransaction: string;\n\n  /** When the transaction was submitted. */\n  time: number;\n\n  /** The transaction parameters that were submitted. */\n  transaction: TransactionParams;\n};\n\nexport type InternalAccount = ReturnType<\n  AccountsController['getSelectedAccount']\n>;\n\n/**\n * An authorization to be included in a `setCode` transaction.\n * Specifies code to be added to the authorization signer's EOA account.\n * Introduced in EIP-7702.\n */\nexport type Authorization = {\n  /** Address of a smart contract that contains the code to be set. */\n  address: Hex;\n\n  /**\n   * Specific chain the authorization applies to.\n   * If not provided, defaults to the chain ID of the transaction.\n   */\n  chainId?: Hex;\n\n  /**\n   * Nonce at which the authorization will be valid.\n   * If not provided, defaults to the nonce following the transaction's nonce.\n   */\n  nonce?: Hex;\n\n  /** R component of the signature. */\n  r?: Hex;\n\n  /** S component of the signature. */\n  s?: Hex;\n\n  /** Y parity generated from the signature. */\n  yParity?: Hex;\n};\n\n/**\n * An array of authorizations to be included in a `setCode` transaction.\n * Introduced in EIP-7702.\n */\nexport type AuthorizationList = Authorization[];\n"]}
\ No newline at end of file
+{"version":3,"file":"types.mjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccessList } from '@ethereumjs/tx';\nimport type { AccountsController } from '@metamask/accounts-controller';\nimport type EthQuery from '@metamask/eth-query';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport type { NetworkClientId, Provider } from '@metamask/network-controller';\nimport type { Hex, Json } from '@metamask/utils';\nimport type { Operation } from 'fast-json-patch';\n\n/**\n * Given a record, ensures that each property matches the `Json` type.\n */\ntype MakeJsonCompatible<T> = T extends Json\n  ? T\n  : {\n      [K in keyof T]: T[K] extends Json ? T[K] : never;\n    };\n\n/**\n * `Json` from `@metamask/utils` is defined as a recursive type alias, but\n * `Operation` is defined as an interface, and the two are not compatible with\n * each other. Therefore, this is a variant of Operation from `fast-json-patch`\n * which is guaranteed to be type-compatible with `Json`.\n */\ntype JsonCompatibleOperation = MakeJsonCompatible<Operation>;\n\n/**\n * Representation of transaction metadata.\n */\nexport type TransactionMeta = TransactionMetaBase &\n  (\n    | {\n        status: Exclude<TransactionStatus, TransactionStatus.failed>;\n      }\n    | {\n        status: TransactionStatus.failed;\n        error: TransactionError;\n      }\n  );\n\n/**\n * Information about a single transaction such as status and block number.\n */\ntype TransactionMetaBase = {\n  /**\n   * ID of the transaction that approved the swap token transfer.\n   */\n  approvalTxId?: string;\n\n  /**\n   * Unique ID to prevent duplicate requests.\n   */\n  actionId?: string;\n\n  /**\n   * Base fee of the block as a hex value, introduced in EIP-1559.\n   */\n  baseFeePerGas?: Hex;\n\n  /**\n   * Number of the block where the transaction has been included.\n   */\n  blockNumber?: string;\n\n  /**\n   * The timestamp for when the block was collated.\n   */\n  blockTimestamp?: string;\n\n  /**\n   * Network code as per EIP-155 for this transaction.\n   */\n  chainId: Hex;\n\n  /**\n   * A string representing a name of transaction contract method.\n   */\n  contractMethodName?: string;\n\n  /**\n   * The balance of the token that is being sent.\n   */\n  currentTokenBalance?: string;\n\n  /**\n   * Unique ID for custodian transaction.\n   */\n  custodyId?: string;\n\n  /**\n   * Custodian transaction status.\n   */\n  custodyStatus?: string;\n\n  /** The optional custom nonce override as a decimal string. */\n  customNonceValue?: string;\n\n  /**\n   * The custom token amount is the amount set by the user.\n   */\n  customTokenAmount?: string;\n\n  /**\n   * The dapp proposed token amount.\n   */\n  dappProposedTokenAmount?: string;\n\n  /**\n   * Gas values provided by the dApp.\n   */\n  dappSuggestedGasFees?: DappSuggestedGasFees;\n\n  /**\n   * The initial gas values set when the transaction was first created.\n   */\n  defaultGasEstimates?: DefaultGasEstimates;\n\n  /**\n   * String to indicate what device the transaction was confirmed on.\n   */\n  deviceConfirmedOn?: WalletDevice;\n\n  /**\n   * The Network ID as per EIP-155 of the destination chain of a bridge transaction.\n   */\n  destinationChainId?: Hex;\n\n  /**\n   * The address of the token being received of swap transaction.\n   */\n  destinationTokenAddress?: string;\n\n  /**\n   * The raw amount of the destination token\n   */\n  destinationTokenAmount?: string;\n\n  /**\n   * The decimals of the token being received of swap transaction.\n   */\n  destinationTokenDecimals?: number;\n\n  /**\n   * The symbol of the token being received with swap.\n   */\n  destinationTokenSymbol?: string;\n\n  /**\n   * The estimated base fee of the transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * The chosen amount which will be the same as the originally proposed token\n   * amount if the user does not edit the  amount or will be a custom token\n   * amount set by the user.\n   */\n  finalApprovalAmount?: string;\n\n  /**\n   * The number of the latest block when the transaction submit was first retried.\n   */\n  firstRetryBlockNumber?: string;\n\n  /**\n   * Whether the transaction is the first time interaction.\n   */\n  isFirstTimeInteraction?: boolean;\n\n  /** Alternate EIP-1559 gas fee estimates for multiple priority levels. */\n  gasFeeEstimates?: GasFeeEstimates;\n\n  /** Whether the gas fee estimates have been checked at least once. */\n  gasFeeEstimatesLoaded?: boolean;\n\n  /**\n   * The estimated gas for the transaction without any buffer applied.\n   */\n  gasLimitNoBuffer?: string;\n\n  /**\n   * A hex string of the transaction hash, used to identify the transaction on the network.\n   */\n  hash?: string;\n\n  /**\n   * A history of mutations to TransactionMeta.\n   */\n  history?: TransactionHistory;\n\n  /**\n   * Generated UUID associated with this transaction.\n   */\n  id: string;\n\n  /**\n   * Whether the transaction is a transfer.\n   */\n  isTransfer?: boolean;\n\n  /**\n   * Whether the transaction entry is generated from a user operation.\n   */\n  isUserOperation?: boolean;\n\n  /**\n   * Additional gas fees to cover the cost of persisting data on layer 1 for layer 2 networks.\n   */\n  layer1GasFee?: Hex;\n\n  /**\n   * The ID of the network client used by the transaction.\n   */\n  networkClientId: NetworkClientId;\n\n  /**\n   * Network code as per EIP-155 for this transaction\n   *\n   * @deprecated Use `chainId` instead.\n   */\n  readonly networkID?: string;\n\n  /**\n   * Origin this transaction was sent from.\n   */\n  origin?: string;\n\n  /**\n   * The original dapp proposed token approval amount before edit by user.\n   */\n  originalApprovalAmount?: string;\n\n  /**\n   * The original gas estimation of the transaction.\n   */\n  originalGasEstimate?: string;\n\n  /**\n   * When we speed up a transaction, we set the type as Retry and we lose\n   * information about type of transaction that is being set up, so we use\n   * original type to track that information.\n   */\n  originalType?: TransactionType;\n\n  /**\n   * Account transaction balance after swap.\n   */\n  postTxBalance?: string;\n\n  /**\n   * Account transaction balance before swap.\n   */\n  preTxBalance?: string;\n\n  /**\n   * The previous gas properties before they were updated.\n   */\n  previousGas?: {\n    /**\n     * Maxmimum number of units of gas to use for this transaction.\n     */\n    gasLimit?: string;\n\n    /**\n     * Maximum amount per gas to pay for the transaction, including the priority fee.\n     */\n    maxFeePerGas?: string;\n\n    /**\n     * Maximum amount per gas to give to validator as incentive.\n     */\n    maxPriorityFeePerGas?: string;\n  };\n\n  /**\n   * The transaction's 'r' value as a hex string.\n   */\n  r?: string;\n\n  /**\n   * Hex representation of the underlying transaction.\n   */\n  rawTx?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction hash.\n   */\n  replacedBy?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction ID.\n   */\n  replacedById?: string;\n\n  /**\n   * The number of times that the transaction submit has been retried.\n   */\n  retryCount?: number;\n\n  /**\n   * The transaction's 's' value as a hex string.\n   */\n  s?: string;\n\n  /**\n   * Response from security validator.\n   */\n  securityAlertResponse?: SecurityAlertResponse;\n\n  /**\n   * Response from security provider.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  securityProviderResponse?: Record<string, any>;\n\n  /**\n   * An array of entries that describe the user's journey through the send flow.\n   * This is purely attached to state logs for troubleshooting and support.\n   */\n  sendFlowHistory?: SendFlowHistoryEntry[];\n\n  /**\n   * Simulation data for the transaction used to predict its outcome.\n   */\n  simulationData?: SimulationData;\n\n  /**\n   * If the gas estimation fails, an object containing error and block information.\n   */\n  simulationFails?: {\n    reason?: string;\n    errorKey?: string;\n    debug: {\n      blockNumber?: string;\n      blockGasLimit?: string;\n    };\n  };\n\n  /**\n   * The time the transaction was submitted to the network, in Unix epoch time (ms).\n   */\n  submittedTime?: number;\n\n  /**\n   * The address of the token being swapped\n   */\n  sourceTokenAddress?: string;\n\n  /**\n   * The raw amount of the source swap token\n   */\n  sourceTokenAmount?: string;\n\n  /**\n   * The decimals of the token being swapped.\n   */\n  sourceTokenDecimals?: number;\n\n  /**\n   * The symbol of the token being swapped.\n   */\n  sourceTokenSymbol?: string;\n\n  /**\n   * The address of the swap recipient.\n   */\n  swapAndSendRecipient?: string;\n\n  /**\n   * The metadata of the swap transaction.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  swapMetaData?: Record<string, any>;\n\n  /**\n   * The value of the token being swapped.\n   */\n  swapTokenValue?: string;\n\n  /**\n   * Timestamp associated with this transaction.\n   */\n  time: number;\n\n  /**\n   * Whether transaction recipient is a smart contract.\n   */\n  toSmartContract?: boolean;\n\n  /**\n   * Additional transfer information.\n   */\n  transferInformation?: {\n    contractAddress: string;\n    decimals: number;\n    symbol: string;\n  };\n\n  /**\n   * Underlying Transaction object.\n   */\n  txParams: TransactionParams;\n\n  /**\n   * Transaction receipt.\n   */\n  txReceipt?: TransactionReceipt;\n\n  /**\n   * The type of transaction such as `cancel` or `swap`.\n   */\n  type?: TransactionType;\n\n  /**\n   * The gas limit supplied by user.\n   */\n  userEditedGasLimit?: boolean;\n\n  /**\n   * Estimate level user selected.\n   */\n  userFeeLevel?: string;\n\n  /**\n   * The transaction's 'v' value as a hex string.\n   */\n  v?: string;\n\n  /**\n   * Whether the transaction is verified on the blockchain.\n   */\n  verifiedOnBlockchain?: boolean;\n\n  /**\n   * Warning information for the transaction.\n   */\n  warning?: {\n    error: string;\n    message: string;\n  };\n};\n\nexport type SendFlowHistoryEntry = {\n  /**\n   * String to indicate user interaction information.\n   */\n  entry: string;\n\n  /**\n   * Timestamp associated with this entry.\n   */\n  timestamp: number;\n};\n\n/**\n * Represents the status of a transaction within the wallet.\n * Each status reflects the state of the transaction internally,\n * with some statuses corresponding to the transaction's state on the network.\n *\n * The typical transaction lifecycle follows this state machine:\n * unapproved -> approved -> signed -> submitted -> FINAL_STATE\n * where FINAL_STATE is one of: confirmed, failed, dropped, or rejected.\n */\nexport enum TransactionStatus {\n  /**\n   * The initial state of a transaction before user approval.\n   */\n  unapproved = 'unapproved',\n\n  /**\n   * The transaction has been approved by the user but is not yet signed.\n   * This status is usually brief but may be longer for scenarios like hardware wallet usage.\n   */\n  approved = 'approved',\n\n  /**\n   * The transaction is signed and in the process of being submitted to the network.\n   * This status is typically short-lived but can be longer for certain cases, such as smart transactions.\n   */\n  signed = 'signed',\n\n  /**\n   * The transaction has been submitted to the network and is awaiting confirmation.\n   */\n  submitted = 'submitted',\n\n  /**\n   * The transaction has been successfully executed and confirmed on the blockchain.\n   * This is a final state.\n   */\n  confirmed = 'confirmed',\n\n  /**\n   * The transaction encountered an error during execution on the blockchain and failed.\n   * This is a final state.\n   */\n  failed = 'failed',\n\n  /**\n   * The transaction was superseded by another transaction, resulting in its dismissal.\n   * This is a final state.\n   */\n  dropped = 'dropped',\n\n  /**\n   * The transaction was rejected by the user and not processed further.\n   * This is a final state.\n   */\n  rejected = 'rejected',\n\n  /**\n   * @deprecated This status is no longer used.\n   */\n  cancelled = 'cancelled',\n}\n\n/**\n * Options for wallet device.\n */\nexport enum WalletDevice {\n  MM_MOBILE = 'metamask_mobile',\n  MM_EXTENSION = 'metamask_extension',\n  OTHER = 'other_device',\n}\n\n/**\n * The type of the transaction.\n */\nexport enum TransactionType {\n  /**\n   * A transaction that bridges tokens to a different chain through Metamask Bridge.\n   */\n  bridge = 'bridge',\n\n  /**\n   * Similar to the approve type, a bridge approval is a special case of ERC20\n   * approve method that requests an allowance of the token to spend on behalf\n   * of the user for the MetaMask Bridge contract. The first bridge for any token\n   * will have an accompanying bridgeApproval transaction.\n   */\n  bridgeApproval = 'bridgeApproval',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  cancel = 'cancel',\n\n  /**\n   * A transaction that is interacting with a smart contract's methods that we\n   * have not treated as a special case, such as approve, transfer, and\n   * transferfrom.\n   */\n  contractInteraction = 'contractInteraction',\n\n  /**\n   * A transaction that deployed a smart contract.\n   */\n  deployContract = 'contractDeployment',\n\n  /**\n   * A transaction for Ethereum decryption.\n   */\n  ethDecrypt = 'eth_decrypt',\n\n  /**\n   * A transaction for getting an encryption public key.\n   */\n  ethGetEncryptionPublicKey = 'eth_getEncryptionPublicKey',\n\n  /**\n   * An incoming (deposit) transaction.\n   */\n  incoming = 'incoming',\n\n  /**\n   * A transaction for personal sign.\n   */\n  personalSign = 'personal_sign',\n\n  /**\n   * When a transaction is failed it can be retried by\n   * resubmitting the same transaction with a higher gas fee. This type is also used\n   * to speed up pending transactions. This is accomplished by creating a new tx with\n   * the same nonce and higher gas fees.\n   */\n  retry = 'retry',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  simpleSend = 'simpleSend',\n\n  /**\n   * A transaction that is signing typed data.\n   */\n  signTypedData = 'eth_signTypedData',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  smart = 'smart',\n\n  /**\n   * A transaction that claims staking rewards.\n   */\n  stakingClaim = 'stakingClaim',\n\n  /**\n   * A transaction that deposits tokens into a staking contract.\n   */\n  stakingDeposit = 'stakingDeposit',\n\n  /**\n   * A transaction that unstakes tokens from a staking contract.\n   */\n  stakingUnstake = 'stakingUnstake',\n\n  /**\n   * A transaction swapping one token for another through MetaMask Swaps.\n   */\n  swap = 'swap',\n\n  /**\n   * A transaction swapping one token for another through MetaMask Swaps, then sending the swapped token to a recipient.\n   */\n  swapAndSend = 'swapAndSend',\n\n  /**\n   * Similar to the approve type, a swap approval is a special case of ERC20\n   * approve method that requests an allowance of the token to spend on behalf\n   * of the user for the MetaMask Swaps contract. The first swap for any token\n   * will have an accompanying swapApproval transaction.\n   */\n  swapApproval = 'swapApproval',\n\n  /**\n   * A token transaction requesting an allowance of the token to spend on\n   * behalf of the user.\n   */\n  tokenMethodApprove = 'approve',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. The method is prefixed with safe because when calling\n   * this method the contract checks to ensure that the receiver is an address\n   * capable of handling the token being sent.\n   */\n  tokenMethodSafeTransferFrom = 'safetransferfrom',\n\n  /**\n   * A token transaction where the user is sending tokens that they own to\n   * another address.\n   */\n  tokenMethodTransfer = 'transfer',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. For more information on allowances, see the approve\n   * type.\n   */\n  tokenMethodTransferFrom = 'transferfrom',\n\n  /**\n   * A token transaction requesting an allowance of all of a user's tokens to\n   * spend on behalf of the user.\n   */\n  tokenMethodSetApprovalForAll = 'setapprovalforall',\n\n  /**\n   * Increase the allowance by a given increment\n   */\n  tokenMethodIncreaseAllowance = 'increaseAllowance',\n}\n\n/**\n * Standard data concerning a transaction to be processed by the blockchain.\n */\nexport type TransactionParams = {\n  /**\n   * A list of addresses and storage keys that the transaction plans to access.\n   */\n  accessList?: AccessList;\n\n  /**\n   * Array of authorizations to set code on EOA accounts.\n   * Only supported in `setCode` transactions.\n   * Introduced in EIP-7702.\n   */\n  authorizationList?: AuthorizationList;\n\n  /**\n   * Network ID as per EIP-155.\n   */\n  chainId?: Hex;\n\n  /**\n   * Data to pass with this transaction.\n   */\n  data?: string;\n\n  /**\n   * Error message for gas estimation failure.\n   */\n  estimateGasError?: string;\n\n  /**\n   * Estimated base fee for this transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * Address to send this transaction from.\n   */\n  from: string;\n\n  /**\n   * same as gasLimit?\n   */\n  gas?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gasLimit?: string;\n\n  /**\n   * Price per gas for legacy txs\n   */\n  gasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority\n   * fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n\n  /**\n   * Unique number to prevent replay attacks.\n   */\n  nonce?: string;\n\n  /**\n   * Address to send this transaction to.\n   */\n  to?: string;\n\n  /**\n   * Value associated with this transaction.\n   */\n  value?: string;\n\n  /**\n   * Type of transaction.\n   * 0x0 indicates a legacy transaction.\n   */\n  type?: string;\n};\n\n/**\n * Standard data concerning a transaction processed by the blockchain.\n */\nexport type TransactionReceipt = {\n  /**\n   * The block hash of the block that this transaction was included in.\n   */\n  blockHash?: string;\n\n  /**\n   * The block number of the block that this transaction was included in.\n   */\n  blockNumber?: string;\n\n  /**\n   * Effective gas price the transaction was charged at.\n   */\n  effectiveGasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Total used gas in hex.\n   */\n  l1Fee?: string;\n\n  /**\n   * All the logs emitted by this transaction.\n   */\n  logs?: Log[];\n\n  /**\n   * The status of the transaction.\n   */\n  status?: string;\n\n  /**\n   * The hexadecimal index of this transaction in the list of transactions included in the block this transaction was mined in.\n   */\n  transactionIndex?: string;\n};\n\n/**\n * Represents an event that has been included in a transaction using the EVM `LOG` opcode.\n */\nexport type Log = {\n  /**\n   * Address of the contract that generated log.\n   */\n  address?: string;\n  /**\n   * List of topics for log.\n   */\n  topics?: string;\n};\n\n/**\n * The configuration required to fetch transaction data from a RemoteTransactionSource.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface RemoteTransactionSourceRequest {\n  /**\n   * The address of the account to fetch transactions for.\n   */\n  address: Hex;\n\n  /**\n   * Numerical cache to optimize fetching transactions.\n   */\n  cache: Record<string, unknown>;\n\n  /**\n   * The IDs of the chains to query.\n   */\n  chainIds: Hex[];\n\n  /**\n   * Whether to also include incoming token transfers.\n   */\n  includeTokenTransfers: boolean;\n\n  /**\n   * Whether to initially query the entire transaction history.\n   */\n  queryEntireHistory: boolean;\n\n  /**\n   * Callback to update the cache.\n   */\n  updateCache(fn: (cache: Record<string, unknown>) => void): void;\n\n  /**\n   * Whether to also retrieve outgoing transactions.\n   */\n  updateTransactions: boolean;\n}\n\n/**\n * An object capable of fetching transaction data from a remote source.\n * Used by the IncomingTransactionHelper to retrieve remote transaction data.\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface RemoteTransactionSource {\n  /**\n   * @returns Array of chain IDs supported by the remote source.\n   */\n  getSupportedChains: () => Hex[];\n\n  /**\n   * @param request - A request object containing data such as the address and chain ID.\n   * @returns An array of transaction metadata for the retrieved transactions.\n   */\n  fetchTransactions: (\n    request: RemoteTransactionSourceRequest,\n  ) => Promise<TransactionMeta[]>;\n}\n\n/**\n * Gas values initially suggested by the dApp.\n */\nexport type DappSuggestedGasFees = {\n  gas?: string;\n  gasPrice?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n};\n\n/**\n * Gas values saved by the user for a specific chain.\n */\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface SavedGasFees {\n  maxBaseFee: string;\n  priorityFee: string;\n}\n\n/**\n * A transaction history operation that includes a note and timestamp.\n */\ntype ExtendedHistoryOperation = JsonCompatibleOperation & {\n  note?: string;\n  timestamp?: number;\n};\n\n/**\n * A transaction history entry that includes the ExtendedHistoryOperation as the first element.\n */\nexport type TransactionHistoryEntry = [\n  ExtendedHistoryOperation,\n  ...JsonCompatibleOperation[],\n];\n\n/**\n * A transaction history that includes the transaction meta as the first element.\n * And the rest of the elements are the operation arrays that were applied to the transaction meta.\n */\nexport type TransactionHistory = [\n  TransactionMeta,\n  ...TransactionHistoryEntry[],\n];\n\n/**\n * Result of inferring the transaction type.\n */\nexport type InferTransactionTypeResult = {\n  /**\n   * The contract code, in hex format if it exists. '0x0' or\n   * '0x' are also indicators of non-existent contract code.\n   */\n  getCodeResponse?: string | null;\n\n  /**\n   * The type of transaction\n   */\n  type: TransactionType;\n};\n\n/**\n * A function for verifying a transaction, whether it is malicious or not.\n */\nexport type SecurityProviderRequest = (\n  requestData: TransactionMeta,\n  messageType: string,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any>;\n\n/**\n * Specifies the shape of the base transaction parameters.\n * Added in EIP-2718.\n */\nexport enum TransactionEnvelopeType {\n  /**\n   * A legacy transaction, the very first type.\n   */\n  legacy = '0x0',\n\n  /**\n   * EIP-2930 defined the access list transaction type that allowed for\n   * specifying the state that a transaction would act upon in advance and\n   * theoretically save on gas fees.\n   */\n  accessList = '0x1',\n\n  /**\n   * The type introduced comes from EIP-1559, Fee Market describes the addition\n   * of a baseFee to blocks that will be burned instead of distributed to\n   * miners. Transactions of this type have both a maxFeePerGas (maximum total\n   * amount in gwei per gas to spend on the transaction) which is inclusive of\n   * the maxPriorityFeePerGas (maximum amount of gwei per gas from the\n   * transaction fee to distribute to miner).\n   */\n  feeMarket = '0x2',\n\n  /**\n   * Adds code to externally owned accounts according to the signed authorizations\n   * in the new `authorizationList` parameter.\n   * Introduced in EIP-7702.\n   */\n  setCode = '0x4',\n}\n\n/**\n * The source of the gas fee parameters on a transaction.\n */\nexport enum UserFeeLevel {\n  CUSTOM = 'custom',\n  DAPP_SUGGESTED = 'dappSuggested',\n  MEDIUM = 'medium',\n}\n\n/**\n * Initial gas values set when the transaction was first created.\n */\nexport type DefaultGasEstimates = {\n  /**\n   * Source of the gas fee values, such as `dappSuggested` or `medium`.\n   */\n  estimateType?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gas?: string;\n\n  /**\n   * Price per gas for legacy transactions.\n   */\n  gasPrice?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n};\n\n/**\n * Data concerning an error while processing a transaction.\n */\nexport type TransactionError = {\n  /**\n   * A descriptive error name.\n   */\n  name: string;\n\n  /**\n   * A descriptive error message providing details about the encountered error.\n   */\n  message: string;\n\n  /**\n   * The stack trace associated with the error, if available.\n   */\n  stack?: string;\n\n  /**\n   * An optional error code associated with the error.\n   */\n  code?: string;\n\n  /**\n   * The rpc property holds additional information related to the error.\n   */\n  // We are intentionally using `any` here instead of `Json` because it causes\n  // `WritableDraft<TransactionMeta>` from Immer to cause TypeScript to error\n  // with \"Type instantiation is excessively deep and possibly infinite\". See:\n  // <https://github.com/immerjs/immer/issues/839>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  rpc?: any;\n};\n\n/**\n * Type for security alert response from transaction validator.\n */\nexport type SecurityAlertResponse = {\n  reason: string;\n  features?: string[];\n  result_type: string;\n  providerRequestsCount?: Record<string, number>;\n};\n\n/** Alternate priority levels for which values are provided in gas fee estimates. */\nexport enum GasFeeEstimateLevel {\n  Low = 'low',\n  Medium = 'medium',\n  High = 'high',\n}\n\n/** Type of gas fee estimate generated by a GasFeeFlow. */\nexport enum GasFeeEstimateType {\n  FeeMarket = 'fee-market',\n  Legacy = 'legacy',\n  GasPrice = 'eth_gasPrice',\n}\n\n/** Gas fee estimates for a specific priority level. */\nexport type FeeMarketGasFeeEstimateForLevel = {\n  /** Maximum amount to pay per gas. */\n  maxFeePerGas: Hex;\n\n  /** Maximum amount per gas to give to the validator as an incentive. */\n  maxPriorityFeePerGas: Hex;\n};\n\n/** Gas fee estimates for a EIP-1559 transaction. */\nexport type FeeMarketGasFeeEstimates = {\n  type: GasFeeEstimateType.FeeMarket;\n  [GasFeeEstimateLevel.Low]: FeeMarketGasFeeEstimateForLevel;\n  [GasFeeEstimateLevel.Medium]: FeeMarketGasFeeEstimateForLevel;\n  [GasFeeEstimateLevel.High]: FeeMarketGasFeeEstimateForLevel;\n};\n\n/** Gas fee estimates for a legacy transaction. */\nexport type LegacyGasFeeEstimates = {\n  type: GasFeeEstimateType.Legacy;\n  [GasFeeEstimateLevel.Low]: Hex;\n  [GasFeeEstimateLevel.Medium]: Hex;\n  [GasFeeEstimateLevel.High]: Hex;\n};\n\n/** Gas fee estimates for a transaction retrieved with the eth_gasPrice method. */\nexport type GasPriceGasFeeEstimates = {\n  type: GasFeeEstimateType.GasPrice;\n  gasPrice: Hex;\n};\n\n/** Gas fee estimates for a transaction. */\nexport type GasFeeEstimates =\n  | FeeMarketGasFeeEstimates\n  | LegacyGasFeeEstimates\n  | GasPriceGasFeeEstimates;\n\n/** Request to a gas fee flow to obtain gas fee estimates. */\nexport type GasFeeFlowRequest = {\n  /** An EthQuery instance to enable queries to the associated RPC provider. */\n  ethQuery: EthQuery;\n\n  /** Gas fee controller data matching the chain ID of the transaction. */\n  gasFeeControllerData: GasFeeState;\n\n  /** The metadata of the transaction to obtain estimates for. */\n  transactionMeta: TransactionMeta;\n};\n\n/** Response from a gas fee flow containing gas fee estimates. */\nexport type GasFeeFlowResponse = {\n  /** The gas fee estimates for the transaction. */\n  estimates: GasFeeEstimates;\n};\n\n/** A method of obtaining gas fee estimates for a specific transaction. */\nexport type GasFeeFlow = {\n  /**\n   * Determine if the gas fee flow supports the specified transaction.\n   *\n   * @param transactionMeta - The transaction metadata.\n   * @returns Whether the gas fee flow supports the transaction.\n   */\n  matchesTransaction(transactionMeta: TransactionMeta): boolean;\n\n  /**\n   * Get gas fee estimates for a specific transaction.\n   *\n   * @param request - The gas fee flow request.\n   * @returns The gas fee flow response containing the gas fee estimates.\n   */\n  getGasFees: (request: GasFeeFlowRequest) => Promise<GasFeeFlowResponse>;\n};\n\n/** Request to a layer 1 gas fee flow to obtain layer 1 fee estimate. */\nexport type Layer1GasFeeFlowRequest = {\n  /** RPC Provider instance. */\n  provider: Provider;\n\n  /** The metadata of the transaction to obtain estimates for. */\n  transactionMeta: TransactionMeta;\n};\n\n/** Response from a layer 1 gas fee flow containing layer 1 fee estimate. */\nexport type Layer1GasFeeFlowResponse = {\n  /** The gas fee estimates for the transaction. */\n  layer1Fee: Hex;\n};\n\n/** A method of obtaining layer 1 gas fee estimates for a specific transaction. */\nexport type Layer1GasFeeFlow = {\n  /**\n   * Determine if the gas fee flow supports the specified transaction.\n   *\n   * @param transactionMeta - The transaction metadata.\n   * @returns Whether the layer1 gas fee flow supports the transaction.\n   */\n  matchesTransaction(transactionMeta: TransactionMeta): boolean;\n\n  /**\n   * Get layer 1 gas fee estimates for a specific transaction.\n   *\n   * @param request - The gas fee flow request.\n   * @returns The gas fee flow response containing the layer 1 gas fee estimate.\n   */\n  getLayer1Fee: (\n    request: Layer1GasFeeFlowRequest,\n  ) => Promise<Layer1GasFeeFlowResponse>;\n};\n\n/** Simulation data concerning an update to a native or token balance. */\nexport type SimulationBalanceChange = {\n  /** The balance before the transaction. */\n  previousBalance: Hex;\n\n  /** The balance after the transaction. */\n  newBalance: Hex;\n\n  /** The difference in balance. */\n  difference: Hex;\n\n  /** Whether the balance is increasing or decreasing. */\n  isDecrease: boolean;\n};\n\n/** Token standards supported by simulation. */\nexport enum SimulationTokenStandard {\n  erc20 = 'erc20',\n  erc721 = 'erc721',\n  erc1155 = 'erc1155',\n}\n\n/** Simulation data concerning an updated token. */\nexport type SimulationToken = {\n  /** The token's contract address. */\n  address: Hex;\n\n  /** The standard of the token. */\n  standard: SimulationTokenStandard;\n\n  /** The ID of the token if supported by the standard. */\n  id?: Hex;\n};\n\n/** Simulation data concerning a change to the a token balance. */\nexport type SimulationTokenBalanceChange = SimulationToken &\n  SimulationBalanceChange;\n\nexport enum SimulationErrorCode {\n  ChainNotSupported = 'chain-not-supported',\n  Disabled = 'disabled',\n  InvalidResponse = 'invalid-response',\n  Reverted = 'reverted',\n}\n\n/** Error data for a failed simulation. */\nexport type SimulationError = {\n  /** Error code to identify the error type. */\n  code?: string | number;\n\n  /** Error message to describe the error. */\n  message?: string;\n};\n\n/** Simulation data for a transaction. */\nexport type SimulationData = {\n  /** Error data if the simulation failed or the transaction reverted. */\n  error?: SimulationError;\n\n  /** Data concerning a change to the user's native balance. */\n  nativeBalanceChange?: SimulationBalanceChange;\n\n  /** Data concerning a change to the user's token balances. */\n  tokenBalanceChanges: SimulationTokenBalanceChange[];\n};\n\n/** Gas fee properties for a legacy transaction. */\nexport type GasPriceValue = {\n  /** Price per gas for legacy transactions. */\n  gasPrice: string;\n};\n\n/** Gas fee properties for an EIP-1559 transaction. */\nexport type FeeMarketEIP1559Values = {\n  /** Maximum amount to pay per gas. */\n  maxFeePerGas: string;\n\n  /** Maximum amount per gas to give to the validator as an incentive. */\n  maxPriorityFeePerGas: string;\n};\n\n/**\n * Data concerning a successfully submitted transaction.\n * Used for debugging purposes.\n */\nexport type SubmitHistoryEntry = {\n  /** The chain ID of the transaction as a hexadecimal string. */\n  chainId?: Hex;\n\n  /** The hash of the transaction returned from the RPC provider. */\n  hash: string;\n\n  /** True if the entry was generated using the migration and existing transaction metadata. */\n  migration?: boolean;\n\n  /** The type of the network where the transaction was submitted. */\n  networkType?: string;\n\n  /**\n   * The URL of the network the transaction was submitted to.\n   * A single network URL if it was recorded when submitted.\n   * An array of potential network URLs if it cannot be confirmed since the migration was used.\n   */\n  networkUrl?: string | string[];\n\n  /** The origin of the transaction. */\n  origin?: string;\n\n  /** The raw transaction data that was submitted. */\n  rawTransaction: string;\n\n  /** When the transaction was submitted. */\n  time: number;\n\n  /** The transaction parameters that were submitted. */\n  transaction: TransactionParams;\n};\n\nexport type InternalAccount = ReturnType<\n  AccountsController['getSelectedAccount']\n>;\n\n/**\n * An authorization to be included in a `setCode` transaction.\n * Specifies code to be added to the authorization signer's EOA account.\n * Introduced in EIP-7702.\n */\nexport type Authorization = {\n  /** Address of a smart contract that contains the code to be set. */\n  address: Hex;\n\n  /**\n   * Specific chain the authorization applies to.\n   * If not provided, defaults to the chain ID of the transaction.\n   */\n  chainId?: Hex;\n\n  /**\n   * Nonce at which the authorization will be valid.\n   * If not provided, defaults to the nonce following the transaction's nonce.\n   */\n  nonce?: Hex;\n\n  /** R component of the signature. */\n  r?: Hex;\n\n  /** S component of the signature. */\n  s?: Hex;\n\n  /** Y parity generated from the signature. */\n  yParity?: Hex;\n};\n\n/**\n * An array of authorizations to be included in a `setCode` transaction.\n * Introduced in EIP-7702.\n */\nexport type AuthorizationList = Authorization[];\n"]}
\ No newline at end of file
diff --git a/dist/utils/simulation-api.cjs.map b/dist/utils/simulation-api.cjs.map
index 7957bfea7ca6b49aa0cff43dbe7ed104af9e9f19..e2af7e1185a2399f2b7f96c630c750d0b064063f 100644
--- a/dist/utils/simulation-api.cjs.map
+++ b/dist/utils/simulation-api.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"simulation-api.cjs","sourceRoot":"","sources":["../../src/utils/simulation-api.ts"],"names":[],"mappings":";;;AAAA,iEAAiE;AACjE,2CAA+D;AAE/D,0CAA8E;AAC9E,0CAA0C;AAE1C,MAAM,GAAG,GAAG,IAAA,0BAAkB,EAAC,sBAAa,EAAE,gBAAgB,CAAC,CAAC;AAEhE,MAAM,UAAU,GAAG,6BAA6B,CAAC;AACjD,MAAM,QAAQ,GAAG,6CAA6C,CAAC;AAC/D,MAAM,iBAAiB,GAAG,UAAU,CAAC;AAgJrC,IAAI,gBAAgB,GAAG,CAAC,CAAC;AAEzB;;;;GAIG;AACI,KAAK,UAAU,oBAAoB,CACxC,OAAY,EACZ,OAA0B;IAE1B,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAE5C,GAAG,CAAC,iBAAiB,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAErC,MAAM,SAAS,GAAG,gBAAgB,CAAC;IACnC,gBAAgB,IAAI,CAAC,CAAC;IAEtB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;QAChC,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;YACnB,EAAE,EAAE,MAAM,CAAC,SAAS,CAAC;YACrB,OAAO,EAAE,KAAK;YACd,MAAM,EAAE,UAAU;YAClB,MAAM,EAAE,CAAC,OAAO,CAAC;SAClB,CAAC;KACH,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAE3C,GAAG,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;IAEvC,IAAI,YAAY,CAAC,KAAK,EAAE;QACtB,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,YAAY,CAAC,KAAK,CAAC;QAC7C,MAAM,IAAI,wBAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAC1C;IAED,OAAO,YAAY,EAAE,MAAM,CAAC;AAC9B,CAAC;AA/BD,oDA+BC;AAED;;;;GAIG;AACH,KAAK,UAAU,gBAAgB,CAAC,OAAY;IAC1C,MAAM,WAAW,GAAG,MAAM,cAAc,EAAE,CAAC;IAC3C,MAAM,cAAc,GAAG,IAAA,sCAAmB,EAAC,OAAO,CAAC,CAAC;IACpD,MAAM,OAAO,GAAG,WAAW,CAAC,cAAc,CAAC,CAAC;IAE5C,IAAI,CAAC,OAAO,EAAE,aAAa,EAAE;QAC3B,GAAG,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC;QACvC,MAAM,IAAI,yCAAgC,CAAC,OAAO,CAAC,CAAC;KACrD;IAED,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACjC,CAAC;AAED;;GAEG;AACH,KAAK,UAAU,cAAc;IAC3B,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC,kBAAkB,CAAC,GAAG,iBAAiB,EAAE,CAAC;IAChE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;IAClC,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;AACzB,CAAC;AAED;;;;GAIG;AACH,SAAS,MAAM,CAAC,SAAiB;IAC/B,OAAO,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["import { convertHexToDecimal } from '@metamask/controller-utils';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\n\nimport { SimulationChainNotSupportedError, SimulationError } from '../errors';\nimport { projectLogger } from '../logger';\n\nconst log = createModuleLogger(projectLogger, 'simulation-api');\n\nconst RPC_METHOD = 'infura_simulateTransactions';\nconst BASE_URL = 'https://tx-sentinel-{0}.api.cx.metamask.io/';\nconst ENDPOINT_NETWORKS = 'networks';\n\n/** Single transaction to simulate in a simulation API request.  */\nexport type SimulationRequestTransaction = {\n  /** Data to send with the transaction. */\n  data?: Hex;\n\n  /** Sender of the transaction. */\n  from: Hex;\n\n  /** Gas limit for the transaction. */\n  gas?: Hex;\n\n  /** Maximum fee per gas for the transaction. */\n  maxFeePerGas?: Hex;\n\n  /** Maximum priority fee per gas for the transaction. */\n  maxPriorityFeePerGas?: Hex;\n\n  /** Recipient of the transaction. */\n  to?: Hex;\n\n  /** Value to send with the transaction. */\n  value?: Hex;\n};\n\n/** Request to the simulation API to simulate transactions. */\nexport type SimulationRequest = {\n  /**\n   * Transactions to be sequentially simulated.\n   * State changes impact subsequent transactions in the list.\n   */\n  transactions: SimulationRequestTransaction[];\n\n  blockOverrides?: {\n    time?: Hex;\n  };\n\n  /**\n   * Overrides to the state of the blockchain, keyed by smart contract address.\n   */\n  overrides?: {\n    [address: Hex]: {\n      /** Overrides to the storage slots for a smart contract account. */\n      stateDiff: {\n        [slot: Hex]: Hex;\n      };\n    };\n  };\n\n  /**\n   * Whether to include call traces in the response.\n   * Defaults to false.\n   */\n  withCallTrace?: boolean;\n\n  /**\n   * Whether to include event logs in the response.\n   * Defaults to false.\n   */\n  withLogs?: boolean;\n};\n\n/** Raw event log emitted by a simulated transaction. */\nexport type SimulationResponseLog = {\n  /** Address of the account that created the event. */\n  address: Hex;\n\n  /** Raw data in the event that is not indexed. */\n  data: Hex;\n\n  /** Raw indexed data from the event. */\n  topics: Hex[];\n};\n\n/** Call trace of a single simulated transaction. */\nexport type SimulationResponseCallTrace = {\n  /** Nested calls. */\n  calls: SimulationResponseCallTrace[];\n\n  /** Raw event logs created by the call. */\n  logs: SimulationResponseLog[];\n};\n\n/**\n * Changes to the blockchain state.\n * Keyed by account address.\n */\nexport type SimulationResponseStateDiff = {\n  [address: Hex]: {\n    /** Native balance of the account. */\n    balance?: Hex;\n\n    /** Nonce of the account. */\n    nonce?: Hex;\n\n    /** Storage values per slot. */\n    storage?: {\n      [slot: Hex]: Hex;\n    };\n  };\n};\n\n/** Response from the simulation API for a single transaction. */\nexport type SimulationResponseTransaction = {\n  /** An error message indicating the transaction could not be simulated. */\n  error?: string;\n\n  /** Return value of the transaction, such as the balance if calling balanceOf. */\n  return: Hex;\n\n  /** Hierarchy of call data including nested calls and logs. */\n  callTrace?: SimulationResponseCallTrace;\n\n  /** Changes to the blockchain state. */\n  stateDiff?: {\n    /** Initial blockchain state before the transaction. */\n    pre?: SimulationResponseStateDiff;\n\n    /** Updated blockchain state after the transaction. */\n    post?: SimulationResponseStateDiff;\n  };\n};\n\n/** Response from the simulation API. */\nexport type SimulationResponse = {\n  /** Simulation data for each transaction in the request. */\n  transactions: SimulationResponseTransaction[];\n};\n\n/** Data for a network supported by the Simulation API. */\ntype SimulationNetwork = {\n  /** Subdomain of the API for the network.  */\n  network: string;\n\n  /** Whether the network supports confirmation simulations. */\n  confirmations: boolean;\n};\n\n/** Response from the simulation API containing supported networks. */\ntype SimulationNetworkResponse = {\n  [chainIdDecimal: string]: SimulationNetwork;\n};\n\nlet requestIdCounter = 0;\n\n/**\n * Simulate transactions using the transaction simulation API.\n * @param chainId - The chain ID to simulate transactions on.\n * @param request - The request to simulate transactions.\n */\nexport async function simulateTransactions(\n  chainId: Hex,\n  request: SimulationRequest,\n): Promise<SimulationResponse> {\n  const url = await getSimulationUrl(chainId);\n\n  log('Sending request', url, request);\n\n  const requestId = requestIdCounter;\n  requestIdCounter += 1;\n\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({\n      id: String(requestId),\n      jsonrpc: '2.0',\n      method: RPC_METHOD,\n      params: [request],\n    }),\n  });\n\n  const responseJson = await response.json();\n\n  log('Received response', responseJson);\n\n  if (responseJson.error) {\n    const { code, message } = responseJson.error;\n    throw new SimulationError(message, code);\n  }\n\n  return responseJson?.result;\n}\n\n/**\n * Get the URL for the transaction simulation API.\n * @param chainId - The chain ID to get the URL for.\n * @returns The URL for the transaction simulation API.\n */\nasync function getSimulationUrl(chainId: Hex): Promise<string> {\n  const networkData = await getNetworkData();\n  const chainIdDecimal = convertHexToDecimal(chainId);\n  const network = networkData[chainIdDecimal];\n\n  if (!network?.confirmations) {\n    log('Chain is not supported', chainId);\n    throw new SimulationChainNotSupportedError(chainId);\n  }\n\n  return getUrl(network.network);\n}\n\n/**\n * Retrieve the supported network data from the simulation API.\n */\nasync function getNetworkData(): Promise<SimulationNetworkResponse> {\n  const url = `${getUrl('ethereum-mainnet')}${ENDPOINT_NETWORKS}`;\n  const response = await fetch(url);\n  return response.json();\n}\n\n/**\n * Generate the URL for the specified subdomain in the simulation API.\n * @param subdomain - The subdomain to generate the URL for.\n * @returns The URL for the transaction simulation API.\n */\nfunction getUrl(subdomain: string): string {\n  return BASE_URL.replace('{0}', subdomain);\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"simulation-api.cjs","sourceRoot":"","sources":["../../src/utils/simulation-api.ts"],"names":[],"mappings":";;;AAAA,iEAAiE;AACjE,2CAA+D;AAE/D,0CAA8E;AAC9E,0CAA0C;AAE1C,MAAM,GAAG,GAAG,IAAA,0BAAkB,EAAC,sBAAa,EAAE,gBAAgB,CAAC,CAAC;AAEhE,MAAM,UAAU,GAAG,6BAA6B,CAAC;AACjD,MAAM,QAAQ,GAAG,6CAA6C,CAAC;AAC/D,MAAM,iBAAiB,GAAG,UAAU,CAAC;AA4IrC,IAAI,gBAAgB,GAAG,CAAC,CAAC;AAEzB;;;;GAIG;AACI,KAAK,UAAU,oBAAoB,CACxC,OAAY,EACZ,OAA0B;IAE1B,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAE5C,GAAG,CAAC,iBAAiB,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAErC,MAAM,SAAS,GAAG,gBAAgB,CAAC;IACnC,gBAAgB,IAAI,CAAC,CAAC;IAEtB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;QAChC,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;YACnB,EAAE,EAAE,MAAM,CAAC,SAAS,CAAC;YACrB,OAAO,EAAE,KAAK;YACd,MAAM,EAAE,UAAU;YAClB,MAAM,EAAE,CAAC,OAAO,CAAC;SAClB,CAAC;KACH,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAE3C,GAAG,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;IAEvC,IAAI,YAAY,CAAC,KAAK,EAAE;QACtB,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,YAAY,CAAC,KAAK,CAAC;QAC7C,MAAM,IAAI,wBAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAC1C;IAED,OAAO,YAAY,EAAE,MAAM,CAAC;AAC9B,CAAC;AA/BD,oDA+BC;AAED;;;;GAIG;AACH,KAAK,UAAU,gBAAgB,CAAC,OAAY;IAC1C,MAAM,WAAW,GAAG,MAAM,cAAc,EAAE,CAAC;IAC3C,MAAM,cAAc,GAAG,IAAA,sCAAmB,EAAC,OAAO,CAAC,CAAC;IACpD,MAAM,OAAO,GAAG,WAAW,CAAC,cAAc,CAAC,CAAC;IAE5C,IAAI,CAAC,OAAO,EAAE,aAAa,EAAE;QAC3B,GAAG,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC;QACvC,MAAM,IAAI,yCAAgC,CAAC,OAAO,CAAC,CAAC;KACrD;IAED,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACjC,CAAC;AAED;;GAEG;AACH,KAAK,UAAU,cAAc;IAC3B,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC,kBAAkB,CAAC,GAAG,iBAAiB,EAAE,CAAC;IAChE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;IAClC,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;AACzB,CAAC;AAED;;;;GAIG;AACH,SAAS,MAAM,CAAC,SAAiB;IAC/B,OAAO,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["import { convertHexToDecimal } from '@metamask/controller-utils';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\n\nimport { SimulationChainNotSupportedError, SimulationError } from '../errors';\nimport { projectLogger } from '../logger';\n\nconst log = createModuleLogger(projectLogger, 'simulation-api');\n\nconst RPC_METHOD = 'infura_simulateTransactions';\nconst BASE_URL = 'https://tx-sentinel-{0}.api.cx.metamask.io/';\nconst ENDPOINT_NETWORKS = 'networks';\n\n/** Single transaction to simulate in a simulation API request.  */\nexport type SimulationRequestTransaction = {\n  /** Data to send with the transaction. */\n  data?: Hex;\n\n  /** Sender of the transaction. */\n  from: Hex;\n\n  /** Gas limit for the transaction. */\n  gas?: Hex;\n\n  /** Maximum fee per gas for the transaction. */\n  maxFeePerGas?: Hex;\n\n  /** Maximum priority fee per gas for the transaction. */\n  maxPriorityFeePerGas?: Hex;\n\n  /** Recipient of the transaction. */\n  to?: Hex;\n\n  /** Value to send with the transaction. */\n  value?: Hex;\n};\n\n/** Request to the simulation API to simulate transactions. */\nexport type SimulationRequest = {\n  /**\n   * Transactions to be sequentially simulated.\n   * State changes impact subsequent transactions in the list.\n   */\n  transactions: SimulationRequestTransaction[];\n\n  /**\n   * Overrides to the state of the blockchain, keyed by smart contract address.\n   */\n  overrides?: {\n    [address: Hex]: {\n      /** Overrides to the storage slots for a smart contract account. */\n      stateDiff: {\n        [slot: Hex]: Hex;\n      };\n    };\n  };\n\n  /**\n   * Whether to include call traces in the response.\n   * Defaults to false.\n   */\n  withCallTrace?: boolean;\n\n  /**\n   * Whether to include event logs in the response.\n   * Defaults to false.\n   */\n  withLogs?: boolean;\n};\n\n/** Raw event log emitted by a simulated transaction. */\nexport type SimulationResponseLog = {\n  /** Address of the account that created the event. */\n  address: Hex;\n\n  /** Raw data in the event that is not indexed. */\n  data: Hex;\n\n  /** Raw indexed data from the event. */\n  topics: Hex[];\n};\n\n/** Call trace of a single simulated transaction. */\nexport type SimulationResponseCallTrace = {\n  /** Nested calls. */\n  calls: SimulationResponseCallTrace[];\n\n  /** Raw event logs created by the call. */\n  logs: SimulationResponseLog[];\n};\n\n/**\n * Changes to the blockchain state.\n * Keyed by account address.\n */\nexport type SimulationResponseStateDiff = {\n  [address: Hex]: {\n    /** Native balance of the account. */\n    balance?: Hex;\n\n    /** Nonce of the account. */\n    nonce?: Hex;\n\n    /** Storage values per slot. */\n    storage?: {\n      [slot: Hex]: Hex;\n    };\n  };\n};\n\n/** Response from the simulation API for a single transaction. */\nexport type SimulationResponseTransaction = {\n  /** An error message indicating the transaction could not be simulated. */\n  error?: string;\n\n  /** Return value of the transaction, such as the balance if calling balanceOf. */\n  return: Hex;\n\n  /** Hierarchy of call data including nested calls and logs. */\n  callTrace?: SimulationResponseCallTrace;\n\n  /** Changes to the blockchain state. */\n  stateDiff?: {\n    /** Initial blockchain state before the transaction. */\n    pre?: SimulationResponseStateDiff;\n\n    /** Updated blockchain state after the transaction. */\n    post?: SimulationResponseStateDiff;\n  };\n};\n\n/** Response from the simulation API. */\nexport type SimulationResponse = {\n  /** Simulation data for each transaction in the request. */\n  transactions: SimulationResponseTransaction[];\n};\n\n/** Data for a network supported by the Simulation API. */\ntype SimulationNetwork = {\n  /** Subdomain of the API for the network.  */\n  network: string;\n\n  /** Whether the network supports confirmation simulations. */\n  confirmations: boolean;\n};\n\n/** Response from the simulation API containing supported networks. */\ntype SimulationNetworkResponse = {\n  [chainIdDecimal: string]: SimulationNetwork;\n};\n\nlet requestIdCounter = 0;\n\n/**\n * Simulate transactions using the transaction simulation API.\n * @param chainId - The chain ID to simulate transactions on.\n * @param request - The request to simulate transactions.\n */\nexport async function simulateTransactions(\n  chainId: Hex,\n  request: SimulationRequest,\n): Promise<SimulationResponse> {\n  const url = await getSimulationUrl(chainId);\n\n  log('Sending request', url, request);\n\n  const requestId = requestIdCounter;\n  requestIdCounter += 1;\n\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({\n      id: String(requestId),\n      jsonrpc: '2.0',\n      method: RPC_METHOD,\n      params: [request],\n    }),\n  });\n\n  const responseJson = await response.json();\n\n  log('Received response', responseJson);\n\n  if (responseJson.error) {\n    const { code, message } = responseJson.error;\n    throw new SimulationError(message, code);\n  }\n\n  return responseJson?.result;\n}\n\n/**\n * Get the URL for the transaction simulation API.\n * @param chainId - The chain ID to get the URL for.\n * @returns The URL for the transaction simulation API.\n */\nasync function getSimulationUrl(chainId: Hex): Promise<string> {\n  const networkData = await getNetworkData();\n  const chainIdDecimal = convertHexToDecimal(chainId);\n  const network = networkData[chainIdDecimal];\n\n  if (!network?.confirmations) {\n    log('Chain is not supported', chainId);\n    throw new SimulationChainNotSupportedError(chainId);\n  }\n\n  return getUrl(network.network);\n}\n\n/**\n * Retrieve the supported network data from the simulation API.\n */\nasync function getNetworkData(): Promise<SimulationNetworkResponse> {\n  const url = `${getUrl('ethereum-mainnet')}${ENDPOINT_NETWORKS}`;\n  const response = await fetch(url);\n  return response.json();\n}\n\n/**\n * Generate the URL for the specified subdomain in the simulation API.\n * @param subdomain - The subdomain to generate the URL for.\n * @returns The URL for the transaction simulation API.\n */\nfunction getUrl(subdomain: string): string {\n  return BASE_URL.replace('{0}', subdomain);\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/simulation-api.d.cts b/dist/utils/simulation-api.d.cts
index 62dffee57cb133a64dbb9bcae8805ee1c2250266..9040b70c4e569d21009920511095f903695d5d16 100644
--- a/dist/utils/simulation-api.d.cts
+++ b/dist/utils/simulation-api.d.cts
@@ -23,9 +23,6 @@ export type SimulationRequest = {
      * State changes impact subsequent transactions in the list.
      */
     transactions: SimulationRequestTransaction[];
-    blockOverrides?: {
-        time?: Hex;
-    };
     /**
      * Overrides to the state of the blockchain, keyed by smart contract address.
      */
diff --git a/dist/utils/simulation-api.d.cts.map b/dist/utils/simulation-api.d.cts.map
index 3a1da6308444d095ef84316f495fd59311820abe..d95368ab734da833bfa4ba5e9721d9ec8d4a6d70 100644
--- a/dist/utils/simulation-api.d.cts.map
+++ b/dist/utils/simulation-api.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"simulation-api.d.cts","sourceRoot":"","sources":["../../src/utils/simulation-api.ts"],"names":[],"mappings":"AACA,OAAO,EAAsB,KAAK,GAAG,EAAE,wBAAwB;AAW/D,mEAAmE;AACnE,MAAM,MAAM,4BAA4B,GAAG;IACzC,yCAAyC;IACzC,IAAI,CAAC,EAAE,GAAG,CAAC;IAEX,iCAAiC;IACjC,IAAI,EAAE,GAAG,CAAC;IAEV,qCAAqC;IACrC,GAAG,CAAC,EAAE,GAAG,CAAC;IAEV,+CAA+C;IAC/C,YAAY,CAAC,EAAE,GAAG,CAAC;IAEnB,wDAAwD;IACxD,oBAAoB,CAAC,EAAE,GAAG,CAAC;IAE3B,oCAAoC;IACpC,EAAE,CAAC,EAAE,GAAG,CAAC;IAET,0CAA0C;IAC1C,KAAK,CAAC,EAAE,GAAG,CAAC;CACb,CAAC;AAEF,8DAA8D;AAC9D,MAAM,MAAM,iBAAiB,GAAG;IAC9B;;;OAGG;IACH,YAAY,EAAE,4BAA4B,EAAE,CAAC;IAE7C,cAAc,CAAC,EAAE;QACf,IAAI,CAAC,EAAE,GAAG,CAAC;KACZ,CAAC;IAEF;;OAEG;IACH,SAAS,CAAC,EAAE;QACV,CAAC,OAAO,EAAE,GAAG,GAAG;YACd,mEAAmE;YACnE,SAAS,EAAE;gBACT,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC;aAClB,CAAC;SACH,CAAC;KACH,CAAC;IAEF;;;OAGG;IACH,aAAa,CAAC,EAAE,OAAO,CAAC;IAExB;;;OAGG;IACH,QAAQ,CAAC,EAAE,OAAO,CAAC;CACpB,CAAC;AAEF,wDAAwD;AACxD,MAAM,MAAM,qBAAqB,GAAG;IAClC,qDAAqD;IACrD,OAAO,EAAE,GAAG,CAAC;IAEb,iDAAiD;IACjD,IAAI,EAAE,GAAG,CAAC;IAEV,uCAAuC;IACvC,MAAM,EAAE,GAAG,EAAE,CAAC;CACf,CAAC;AAEF,oDAAoD;AACpD,MAAM,MAAM,2BAA2B,GAAG;IACxC,oBAAoB;IACpB,KAAK,EAAE,2BAA2B,EAAE,CAAC;IAErC,0CAA0C;IAC1C,IAAI,EAAE,qBAAqB,EAAE,CAAC;CAC/B,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,2BAA2B,GAAG;IACxC,CAAC,OAAO,EAAE,GAAG,GAAG;QACd,qCAAqC;QACrC,OAAO,CAAC,EAAE,GAAG,CAAC;QAEd,4BAA4B;QAC5B,KAAK,CAAC,EAAE,GAAG,CAAC;QAEZ,+BAA+B;QAC/B,OAAO,CAAC,EAAE;YACR,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC;SAClB,CAAC;KACH,CAAC;CACH,CAAC;AAEF,iEAAiE;AACjE,MAAM,MAAM,6BAA6B,GAAG;IAC1C,0EAA0E;IAC1E,KAAK,CAAC,EAAE,MAAM,CAAC;IAEf,iFAAiF;IACjF,MAAM,EAAE,GAAG,CAAC;IAEZ,8DAA8D;IAC9D,SAAS,CAAC,EAAE,2BAA2B,CAAC;IAExC,uCAAuC;IACvC,SAAS,CAAC,EAAE;QACV,uDAAuD;QACvD,GAAG,CAAC,EAAE,2BAA2B,CAAC;QAElC,sDAAsD;QACtD,IAAI,CAAC,EAAE,2BAA2B,CAAC;KACpC,CAAC;CACH,CAAC;AAEF,wCAAwC;AACxC,MAAM,MAAM,kBAAkB,GAAG;IAC/B,2DAA2D;IAC3D,YAAY,EAAE,6BAA6B,EAAE,CAAC;CAC/C,CAAC;AAkBF;;;;GAIG;AACH,wBAAsB,oBAAoB,CACxC,OAAO,EAAE,GAAG,EACZ,OAAO,EAAE,iBAAiB,GACzB,OAAO,CAAC,kBAAkB,CAAC,CA4B7B"}
\ No newline at end of file
+{"version":3,"file":"simulation-api.d.cts","sourceRoot":"","sources":["../../src/utils/simulation-api.ts"],"names":[],"mappings":"AACA,OAAO,EAAsB,KAAK,GAAG,EAAE,wBAAwB;AAW/D,mEAAmE;AACnE,MAAM,MAAM,4BAA4B,GAAG;IACzC,yCAAyC;IACzC,IAAI,CAAC,EAAE,GAAG,CAAC;IAEX,iCAAiC;IACjC,IAAI,EAAE,GAAG,CAAC;IAEV,qCAAqC;IACrC,GAAG,CAAC,EAAE,GAAG,CAAC;IAEV,+CAA+C;IAC/C,YAAY,CAAC,EAAE,GAAG,CAAC;IAEnB,wDAAwD;IACxD,oBAAoB,CAAC,EAAE,GAAG,CAAC;IAE3B,oCAAoC;IACpC,EAAE,CAAC,EAAE,GAAG,CAAC;IAET,0CAA0C;IAC1C,KAAK,CAAC,EAAE,GAAG,CAAC;CACb,CAAC;AAEF,8DAA8D;AAC9D,MAAM,MAAM,iBAAiB,GAAG;IAC9B;;;OAGG;IACH,YAAY,EAAE,4BAA4B,EAAE,CAAC;IAE7C;;OAEG;IACH,SAAS,CAAC,EAAE;QACV,CAAC,OAAO,EAAE,GAAG,GAAG;YACd,mEAAmE;YACnE,SAAS,EAAE;gBACT,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC;aAClB,CAAC;SACH,CAAC;KACH,CAAC;IAEF;;;OAGG;IACH,aAAa,CAAC,EAAE,OAAO,CAAC;IAExB;;;OAGG;IACH,QAAQ,CAAC,EAAE,OAAO,CAAC;CACpB,CAAC;AAEF,wDAAwD;AACxD,MAAM,MAAM,qBAAqB,GAAG;IAClC,qDAAqD;IACrD,OAAO,EAAE,GAAG,CAAC;IAEb,iDAAiD;IACjD,IAAI,EAAE,GAAG,CAAC;IAEV,uCAAuC;IACvC,MAAM,EAAE,GAAG,EAAE,CAAC;CACf,CAAC;AAEF,oDAAoD;AACpD,MAAM,MAAM,2BAA2B,GAAG;IACxC,oBAAoB;IACpB,KAAK,EAAE,2BAA2B,EAAE,CAAC;IAErC,0CAA0C;IAC1C,IAAI,EAAE,qBAAqB,EAAE,CAAC;CAC/B,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,2BAA2B,GAAG;IACxC,CAAC,OAAO,EAAE,GAAG,GAAG;QACd,qCAAqC;QACrC,OAAO,CAAC,EAAE,GAAG,CAAC;QAEd,4BAA4B;QAC5B,KAAK,CAAC,EAAE,GAAG,CAAC;QAEZ,+BAA+B;QAC/B,OAAO,CAAC,EAAE;YACR,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC;SAClB,CAAC;KACH,CAAC;CACH,CAAC;AAEF,iEAAiE;AACjE,MAAM,MAAM,6BAA6B,GAAG;IAC1C,0EAA0E;IAC1E,KAAK,CAAC,EAAE,MAAM,CAAC;IAEf,iFAAiF;IACjF,MAAM,EAAE,GAAG,CAAC;IAEZ,8DAA8D;IAC9D,SAAS,CAAC,EAAE,2BAA2B,CAAC;IAExC,uCAAuC;IACvC,SAAS,CAAC,EAAE;QACV,uDAAuD;QACvD,GAAG,CAAC,EAAE,2BAA2B,CAAC;QAElC,sDAAsD;QACtD,IAAI,CAAC,EAAE,2BAA2B,CAAC;KACpC,CAAC;CACH,CAAC;AAEF,wCAAwC;AACxC,MAAM,MAAM,kBAAkB,GAAG;IAC/B,2DAA2D;IAC3D,YAAY,EAAE,6BAA6B,EAAE,CAAC;CAC/C,CAAC;AAkBF;;;;GAIG;AACH,wBAAsB,oBAAoB,CACxC,OAAO,EAAE,GAAG,EACZ,OAAO,EAAE,iBAAiB,GACzB,OAAO,CAAC,kBAAkB,CAAC,CA4B7B"}
\ No newline at end of file
diff --git a/dist/utils/simulation-api.d.mts b/dist/utils/simulation-api.d.mts
index b547d2f2fa14d8b5c5802b5fae632264d4b9b2f0..a0318b954b30aee0e92dd856df7d81c660f92bcc 100644
--- a/dist/utils/simulation-api.d.mts
+++ b/dist/utils/simulation-api.d.mts
@@ -23,9 +23,6 @@ export type SimulationRequest = {
      * State changes impact subsequent transactions in the list.
      */
     transactions: SimulationRequestTransaction[];
-    blockOverrides?: {
-        time?: Hex;
-    };
     /**
      * Overrides to the state of the blockchain, keyed by smart contract address.
      */
diff --git a/dist/utils/simulation-api.d.mts.map b/dist/utils/simulation-api.d.mts.map
index 1d4eecbb9ae155f0c5c4e245fe11bdf345b6e0d8..316cdbd3f6c85e6b283c102ce56a97efa8d02529 100644
--- a/dist/utils/simulation-api.d.mts.map
+++ b/dist/utils/simulation-api.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"simulation-api.d.mts","sourceRoot":"","sources":["../../src/utils/simulation-api.ts"],"names":[],"mappings":"AACA,OAAO,EAAsB,KAAK,GAAG,EAAE,wBAAwB;AAW/D,mEAAmE;AACnE,MAAM,MAAM,4BAA4B,GAAG;IACzC,yCAAyC;IACzC,IAAI,CAAC,EAAE,GAAG,CAAC;IAEX,iCAAiC;IACjC,IAAI,EAAE,GAAG,CAAC;IAEV,qCAAqC;IACrC,GAAG,CAAC,EAAE,GAAG,CAAC;IAEV,+CAA+C;IAC/C,YAAY,CAAC,EAAE,GAAG,CAAC;IAEnB,wDAAwD;IACxD,oBAAoB,CAAC,EAAE,GAAG,CAAC;IAE3B,oCAAoC;IACpC,EAAE,CAAC,EAAE,GAAG,CAAC;IAET,0CAA0C;IAC1C,KAAK,CAAC,EAAE,GAAG,CAAC;CACb,CAAC;AAEF,8DAA8D;AAC9D,MAAM,MAAM,iBAAiB,GAAG;IAC9B;;;OAGG;IACH,YAAY,EAAE,4BAA4B,EAAE,CAAC;IAE7C,cAAc,CAAC,EAAE;QACf,IAAI,CAAC,EAAE,GAAG,CAAC;KACZ,CAAC;IAEF;;OAEG;IACH,SAAS,CAAC,EAAE;QACV,CAAC,OAAO,EAAE,GAAG,GAAG;YACd,mEAAmE;YACnE,SAAS,EAAE;gBACT,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC;aAClB,CAAC;SACH,CAAC;KACH,CAAC;IAEF;;;OAGG;IACH,aAAa,CAAC,EAAE,OAAO,CAAC;IAExB;;;OAGG;IACH,QAAQ,CAAC,EAAE,OAAO,CAAC;CACpB,CAAC;AAEF,wDAAwD;AACxD,MAAM,MAAM,qBAAqB,GAAG;IAClC,qDAAqD;IACrD,OAAO,EAAE,GAAG,CAAC;IAEb,iDAAiD;IACjD,IAAI,EAAE,GAAG,CAAC;IAEV,uCAAuC;IACvC,MAAM,EAAE,GAAG,EAAE,CAAC;CACf,CAAC;AAEF,oDAAoD;AACpD,MAAM,MAAM,2BAA2B,GAAG;IACxC,oBAAoB;IACpB,KAAK,EAAE,2BAA2B,EAAE,CAAC;IAErC,0CAA0C;IAC1C,IAAI,EAAE,qBAAqB,EAAE,CAAC;CAC/B,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,2BAA2B,GAAG;IACxC,CAAC,OAAO,EAAE,GAAG,GAAG;QACd,qCAAqC;QACrC,OAAO,CAAC,EAAE,GAAG,CAAC;QAEd,4BAA4B;QAC5B,KAAK,CAAC,EAAE,GAAG,CAAC;QAEZ,+BAA+B;QAC/B,OAAO,CAAC,EAAE;YACR,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC;SAClB,CAAC;KACH,CAAC;CACH,CAAC;AAEF,iEAAiE;AACjE,MAAM,MAAM,6BAA6B,GAAG;IAC1C,0EAA0E;IAC1E,KAAK,CAAC,EAAE,MAAM,CAAC;IAEf,iFAAiF;IACjF,MAAM,EAAE,GAAG,CAAC;IAEZ,8DAA8D;IAC9D,SAAS,CAAC,EAAE,2BAA2B,CAAC;IAExC,uCAAuC;IACvC,SAAS,CAAC,EAAE;QACV,uDAAuD;QACvD,GAAG,CAAC,EAAE,2BAA2B,CAAC;QAElC,sDAAsD;QACtD,IAAI,CAAC,EAAE,2BAA2B,CAAC;KACpC,CAAC;CACH,CAAC;AAEF,wCAAwC;AACxC,MAAM,MAAM,kBAAkB,GAAG;IAC/B,2DAA2D;IAC3D,YAAY,EAAE,6BAA6B,EAAE,CAAC;CAC/C,CAAC;AAkBF;;;;GAIG;AACH,wBAAsB,oBAAoB,CACxC,OAAO,EAAE,GAAG,EACZ,OAAO,EAAE,iBAAiB,GACzB,OAAO,CAAC,kBAAkB,CAAC,CA4B7B"}
\ No newline at end of file
+{"version":3,"file":"simulation-api.d.mts","sourceRoot":"","sources":["../../src/utils/simulation-api.ts"],"names":[],"mappings":"AACA,OAAO,EAAsB,KAAK,GAAG,EAAE,wBAAwB;AAW/D,mEAAmE;AACnE,MAAM,MAAM,4BAA4B,GAAG;IACzC,yCAAyC;IACzC,IAAI,CAAC,EAAE,GAAG,CAAC;IAEX,iCAAiC;IACjC,IAAI,EAAE,GAAG,CAAC;IAEV,qCAAqC;IACrC,GAAG,CAAC,EAAE,GAAG,CAAC;IAEV,+CAA+C;IAC/C,YAAY,CAAC,EAAE,GAAG,CAAC;IAEnB,wDAAwD;IACxD,oBAAoB,CAAC,EAAE,GAAG,CAAC;IAE3B,oCAAoC;IACpC,EAAE,CAAC,EAAE,GAAG,CAAC;IAET,0CAA0C;IAC1C,KAAK,CAAC,EAAE,GAAG,CAAC;CACb,CAAC;AAEF,8DAA8D;AAC9D,MAAM,MAAM,iBAAiB,GAAG;IAC9B;;;OAGG;IACH,YAAY,EAAE,4BAA4B,EAAE,CAAC;IAE7C;;OAEG;IACH,SAAS,CAAC,EAAE;QACV,CAAC,OAAO,EAAE,GAAG,GAAG;YACd,mEAAmE;YACnE,SAAS,EAAE;gBACT,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC;aAClB,CAAC;SACH,CAAC;KACH,CAAC;IAEF;;;OAGG;IACH,aAAa,CAAC,EAAE,OAAO,CAAC;IAExB;;;OAGG;IACH,QAAQ,CAAC,EAAE,OAAO,CAAC;CACpB,CAAC;AAEF,wDAAwD;AACxD,MAAM,MAAM,qBAAqB,GAAG;IAClC,qDAAqD;IACrD,OAAO,EAAE,GAAG,CAAC;IAEb,iDAAiD;IACjD,IAAI,EAAE,GAAG,CAAC;IAEV,uCAAuC;IACvC,MAAM,EAAE,GAAG,EAAE,CAAC;CACf,CAAC;AAEF,oDAAoD;AACpD,MAAM,MAAM,2BAA2B,GAAG;IACxC,oBAAoB;IACpB,KAAK,EAAE,2BAA2B,EAAE,CAAC;IAErC,0CAA0C;IAC1C,IAAI,EAAE,qBAAqB,EAAE,CAAC;CAC/B,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,2BAA2B,GAAG;IACxC,CAAC,OAAO,EAAE,GAAG,GAAG;QACd,qCAAqC;QACrC,OAAO,CAAC,EAAE,GAAG,CAAC;QAEd,4BAA4B;QAC5B,KAAK,CAAC,EAAE,GAAG,CAAC;QAEZ,+BAA+B;QAC/B,OAAO,CAAC,EAAE;YACR,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC;SAClB,CAAC;KACH,CAAC;CACH,CAAC;AAEF,iEAAiE;AACjE,MAAM,MAAM,6BAA6B,GAAG;IAC1C,0EAA0E;IAC1E,KAAK,CAAC,EAAE,MAAM,CAAC;IAEf,iFAAiF;IACjF,MAAM,EAAE,GAAG,CAAC;IAEZ,8DAA8D;IAC9D,SAAS,CAAC,EAAE,2BAA2B,CAAC;IAExC,uCAAuC;IACvC,SAAS,CAAC,EAAE;QACV,uDAAuD;QACvD,GAAG,CAAC,EAAE,2BAA2B,CAAC;QAElC,sDAAsD;QACtD,IAAI,CAAC,EAAE,2BAA2B,CAAC;KACpC,CAAC;CACH,CAAC;AAEF,wCAAwC;AACxC,MAAM,MAAM,kBAAkB,GAAG;IAC/B,2DAA2D;IAC3D,YAAY,EAAE,6BAA6B,EAAE,CAAC;CAC/C,CAAC;AAkBF;;;;GAIG;AACH,wBAAsB,oBAAoB,CACxC,OAAO,EAAE,GAAG,EACZ,OAAO,EAAE,iBAAiB,GACzB,OAAO,CAAC,kBAAkB,CAAC,CA4B7B"}
\ No newline at end of file
diff --git a/dist/utils/simulation-api.mjs.map b/dist/utils/simulation-api.mjs.map
index 5eed134499b3747d28621015983d73b3bba46587..4aba7c081fe3386ecd3f0141592b422879633f1d 100644
--- a/dist/utils/simulation-api.mjs.map
+++ b/dist/utils/simulation-api.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"simulation-api.mjs","sourceRoot":"","sources":["../../src/utils/simulation-api.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,mCAAmC;AACjE,OAAO,EAAE,kBAAkB,EAAY,wBAAwB;AAE/D,OAAO,EAAE,gCAAgC,EAAE,eAAe,EAAE,sBAAkB;AAC9E,OAAO,EAAE,aAAa,EAAE,sBAAkB;AAE1C,MAAM,GAAG,GAAG,kBAAkB,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;AAEhE,MAAM,UAAU,GAAG,6BAA6B,CAAC;AACjD,MAAM,QAAQ,GAAG,6CAA6C,CAAC;AAC/D,MAAM,iBAAiB,GAAG,UAAU,CAAC;AAgJrC,IAAI,gBAAgB,GAAG,CAAC,CAAC;AAEzB;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,OAAY,EACZ,OAA0B;IAE1B,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAE5C,GAAG,CAAC,iBAAiB,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAErC,MAAM,SAAS,GAAG,gBAAgB,CAAC;IACnC,gBAAgB,IAAI,CAAC,CAAC;IAEtB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;QAChC,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;YACnB,EAAE,EAAE,MAAM,CAAC,SAAS,CAAC;YACrB,OAAO,EAAE,KAAK;YACd,MAAM,EAAE,UAAU;YAClB,MAAM,EAAE,CAAC,OAAO,CAAC;SAClB,CAAC;KACH,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAE3C,GAAG,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;IAEvC,IAAI,YAAY,CAAC,KAAK,EAAE;QACtB,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,YAAY,CAAC,KAAK,CAAC;QAC7C,MAAM,IAAI,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAC1C;IAED,OAAO,YAAY,EAAE,MAAM,CAAC;AAC9B,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,gBAAgB,CAAC,OAAY;IAC1C,MAAM,WAAW,GAAG,MAAM,cAAc,EAAE,CAAC;IAC3C,MAAM,cAAc,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC;IACpD,MAAM,OAAO,GAAG,WAAW,CAAC,cAAc,CAAC,CAAC;IAE5C,IAAI,CAAC,OAAO,EAAE,aAAa,EAAE;QAC3B,GAAG,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC;QACvC,MAAM,IAAI,gCAAgC,CAAC,OAAO,CAAC,CAAC;KACrD;IAED,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACjC,CAAC;AAED;;GAEG;AACH,KAAK,UAAU,cAAc;IAC3B,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC,kBAAkB,CAAC,GAAG,iBAAiB,EAAE,CAAC;IAChE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;IAClC,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;AACzB,CAAC;AAED;;;;GAIG;AACH,SAAS,MAAM,CAAC,SAAiB;IAC/B,OAAO,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["import { convertHexToDecimal } from '@metamask/controller-utils';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\n\nimport { SimulationChainNotSupportedError, SimulationError } from '../errors';\nimport { projectLogger } from '../logger';\n\nconst log = createModuleLogger(projectLogger, 'simulation-api');\n\nconst RPC_METHOD = 'infura_simulateTransactions';\nconst BASE_URL = 'https://tx-sentinel-{0}.api.cx.metamask.io/';\nconst ENDPOINT_NETWORKS = 'networks';\n\n/** Single transaction to simulate in a simulation API request.  */\nexport type SimulationRequestTransaction = {\n  /** Data to send with the transaction. */\n  data?: Hex;\n\n  /** Sender of the transaction. */\n  from: Hex;\n\n  /** Gas limit for the transaction. */\n  gas?: Hex;\n\n  /** Maximum fee per gas for the transaction. */\n  maxFeePerGas?: Hex;\n\n  /** Maximum priority fee per gas for the transaction. */\n  maxPriorityFeePerGas?: Hex;\n\n  /** Recipient of the transaction. */\n  to?: Hex;\n\n  /** Value to send with the transaction. */\n  value?: Hex;\n};\n\n/** Request to the simulation API to simulate transactions. */\nexport type SimulationRequest = {\n  /**\n   * Transactions to be sequentially simulated.\n   * State changes impact subsequent transactions in the list.\n   */\n  transactions: SimulationRequestTransaction[];\n\n  blockOverrides?: {\n    time?: Hex;\n  };\n\n  /**\n   * Overrides to the state of the blockchain, keyed by smart contract address.\n   */\n  overrides?: {\n    [address: Hex]: {\n      /** Overrides to the storage slots for a smart contract account. */\n      stateDiff: {\n        [slot: Hex]: Hex;\n      };\n    };\n  };\n\n  /**\n   * Whether to include call traces in the response.\n   * Defaults to false.\n   */\n  withCallTrace?: boolean;\n\n  /**\n   * Whether to include event logs in the response.\n   * Defaults to false.\n   */\n  withLogs?: boolean;\n};\n\n/** Raw event log emitted by a simulated transaction. */\nexport type SimulationResponseLog = {\n  /** Address of the account that created the event. */\n  address: Hex;\n\n  /** Raw data in the event that is not indexed. */\n  data: Hex;\n\n  /** Raw indexed data from the event. */\n  topics: Hex[];\n};\n\n/** Call trace of a single simulated transaction. */\nexport type SimulationResponseCallTrace = {\n  /** Nested calls. */\n  calls: SimulationResponseCallTrace[];\n\n  /** Raw event logs created by the call. */\n  logs: SimulationResponseLog[];\n};\n\n/**\n * Changes to the blockchain state.\n * Keyed by account address.\n */\nexport type SimulationResponseStateDiff = {\n  [address: Hex]: {\n    /** Native balance of the account. */\n    balance?: Hex;\n\n    /** Nonce of the account. */\n    nonce?: Hex;\n\n    /** Storage values per slot. */\n    storage?: {\n      [slot: Hex]: Hex;\n    };\n  };\n};\n\n/** Response from the simulation API for a single transaction. */\nexport type SimulationResponseTransaction = {\n  /** An error message indicating the transaction could not be simulated. */\n  error?: string;\n\n  /** Return value of the transaction, such as the balance if calling balanceOf. */\n  return: Hex;\n\n  /** Hierarchy of call data including nested calls and logs. */\n  callTrace?: SimulationResponseCallTrace;\n\n  /** Changes to the blockchain state. */\n  stateDiff?: {\n    /** Initial blockchain state before the transaction. */\n    pre?: SimulationResponseStateDiff;\n\n    /** Updated blockchain state after the transaction. */\n    post?: SimulationResponseStateDiff;\n  };\n};\n\n/** Response from the simulation API. */\nexport type SimulationResponse = {\n  /** Simulation data for each transaction in the request. */\n  transactions: SimulationResponseTransaction[];\n};\n\n/** Data for a network supported by the Simulation API. */\ntype SimulationNetwork = {\n  /** Subdomain of the API for the network.  */\n  network: string;\n\n  /** Whether the network supports confirmation simulations. */\n  confirmations: boolean;\n};\n\n/** Response from the simulation API containing supported networks. */\ntype SimulationNetworkResponse = {\n  [chainIdDecimal: string]: SimulationNetwork;\n};\n\nlet requestIdCounter = 0;\n\n/**\n * Simulate transactions using the transaction simulation API.\n * @param chainId - The chain ID to simulate transactions on.\n * @param request - The request to simulate transactions.\n */\nexport async function simulateTransactions(\n  chainId: Hex,\n  request: SimulationRequest,\n): Promise<SimulationResponse> {\n  const url = await getSimulationUrl(chainId);\n\n  log('Sending request', url, request);\n\n  const requestId = requestIdCounter;\n  requestIdCounter += 1;\n\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({\n      id: String(requestId),\n      jsonrpc: '2.0',\n      method: RPC_METHOD,\n      params: [request],\n    }),\n  });\n\n  const responseJson = await response.json();\n\n  log('Received response', responseJson);\n\n  if (responseJson.error) {\n    const { code, message } = responseJson.error;\n    throw new SimulationError(message, code);\n  }\n\n  return responseJson?.result;\n}\n\n/**\n * Get the URL for the transaction simulation API.\n * @param chainId - The chain ID to get the URL for.\n * @returns The URL for the transaction simulation API.\n */\nasync function getSimulationUrl(chainId: Hex): Promise<string> {\n  const networkData = await getNetworkData();\n  const chainIdDecimal = convertHexToDecimal(chainId);\n  const network = networkData[chainIdDecimal];\n\n  if (!network?.confirmations) {\n    log('Chain is not supported', chainId);\n    throw new SimulationChainNotSupportedError(chainId);\n  }\n\n  return getUrl(network.network);\n}\n\n/**\n * Retrieve the supported network data from the simulation API.\n */\nasync function getNetworkData(): Promise<SimulationNetworkResponse> {\n  const url = `${getUrl('ethereum-mainnet')}${ENDPOINT_NETWORKS}`;\n  const response = await fetch(url);\n  return response.json();\n}\n\n/**\n * Generate the URL for the specified subdomain in the simulation API.\n * @param subdomain - The subdomain to generate the URL for.\n * @returns The URL for the transaction simulation API.\n */\nfunction getUrl(subdomain: string): string {\n  return BASE_URL.replace('{0}', subdomain);\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"simulation-api.mjs","sourceRoot":"","sources":["../../src/utils/simulation-api.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,mCAAmC;AACjE,OAAO,EAAE,kBAAkB,EAAY,wBAAwB;AAE/D,OAAO,EAAE,gCAAgC,EAAE,eAAe,EAAE,sBAAkB;AAC9E,OAAO,EAAE,aAAa,EAAE,sBAAkB;AAE1C,MAAM,GAAG,GAAG,kBAAkB,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;AAEhE,MAAM,UAAU,GAAG,6BAA6B,CAAC;AACjD,MAAM,QAAQ,GAAG,6CAA6C,CAAC;AAC/D,MAAM,iBAAiB,GAAG,UAAU,CAAC;AA4IrC,IAAI,gBAAgB,GAAG,CAAC,CAAC;AAEzB;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,OAAY,EACZ,OAA0B;IAE1B,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAE5C,GAAG,CAAC,iBAAiB,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAErC,MAAM,SAAS,GAAG,gBAAgB,CAAC;IACnC,gBAAgB,IAAI,CAAC,CAAC;IAEtB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;QAChC,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;YACnB,EAAE,EAAE,MAAM,CAAC,SAAS,CAAC;YACrB,OAAO,EAAE,KAAK;YACd,MAAM,EAAE,UAAU;YAClB,MAAM,EAAE,CAAC,OAAO,CAAC;SAClB,CAAC;KACH,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAE3C,GAAG,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;IAEvC,IAAI,YAAY,CAAC,KAAK,EAAE;QACtB,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,YAAY,CAAC,KAAK,CAAC;QAC7C,MAAM,IAAI,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAC1C;IAED,OAAO,YAAY,EAAE,MAAM,CAAC;AAC9B,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,gBAAgB,CAAC,OAAY;IAC1C,MAAM,WAAW,GAAG,MAAM,cAAc,EAAE,CAAC;IAC3C,MAAM,cAAc,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC;IACpD,MAAM,OAAO,GAAG,WAAW,CAAC,cAAc,CAAC,CAAC;IAE5C,IAAI,CAAC,OAAO,EAAE,aAAa,EAAE;QAC3B,GAAG,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC;QACvC,MAAM,IAAI,gCAAgC,CAAC,OAAO,CAAC,CAAC;KACrD;IAED,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACjC,CAAC;AAED;;GAEG;AACH,KAAK,UAAU,cAAc;IAC3B,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC,kBAAkB,CAAC,GAAG,iBAAiB,EAAE,CAAC;IAChE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;IAClC,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;AACzB,CAAC;AAED;;;;GAIG;AACH,SAAS,MAAM,CAAC,SAAiB;IAC/B,OAAO,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["import { convertHexToDecimal } from '@metamask/controller-utils';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\n\nimport { SimulationChainNotSupportedError, SimulationError } from '../errors';\nimport { projectLogger } from '../logger';\n\nconst log = createModuleLogger(projectLogger, 'simulation-api');\n\nconst RPC_METHOD = 'infura_simulateTransactions';\nconst BASE_URL = 'https://tx-sentinel-{0}.api.cx.metamask.io/';\nconst ENDPOINT_NETWORKS = 'networks';\n\n/** Single transaction to simulate in a simulation API request.  */\nexport type SimulationRequestTransaction = {\n  /** Data to send with the transaction. */\n  data?: Hex;\n\n  /** Sender of the transaction. */\n  from: Hex;\n\n  /** Gas limit for the transaction. */\n  gas?: Hex;\n\n  /** Maximum fee per gas for the transaction. */\n  maxFeePerGas?: Hex;\n\n  /** Maximum priority fee per gas for the transaction. */\n  maxPriorityFeePerGas?: Hex;\n\n  /** Recipient of the transaction. */\n  to?: Hex;\n\n  /** Value to send with the transaction. */\n  value?: Hex;\n};\n\n/** Request to the simulation API to simulate transactions. */\nexport type SimulationRequest = {\n  /**\n   * Transactions to be sequentially simulated.\n   * State changes impact subsequent transactions in the list.\n   */\n  transactions: SimulationRequestTransaction[];\n\n  /**\n   * Overrides to the state of the blockchain, keyed by smart contract address.\n   */\n  overrides?: {\n    [address: Hex]: {\n      /** Overrides to the storage slots for a smart contract account. */\n      stateDiff: {\n        [slot: Hex]: Hex;\n      };\n    };\n  };\n\n  /**\n   * Whether to include call traces in the response.\n   * Defaults to false.\n   */\n  withCallTrace?: boolean;\n\n  /**\n   * Whether to include event logs in the response.\n   * Defaults to false.\n   */\n  withLogs?: boolean;\n};\n\n/** Raw event log emitted by a simulated transaction. */\nexport type SimulationResponseLog = {\n  /** Address of the account that created the event. */\n  address: Hex;\n\n  /** Raw data in the event that is not indexed. */\n  data: Hex;\n\n  /** Raw indexed data from the event. */\n  topics: Hex[];\n};\n\n/** Call trace of a single simulated transaction. */\nexport type SimulationResponseCallTrace = {\n  /** Nested calls. */\n  calls: SimulationResponseCallTrace[];\n\n  /** Raw event logs created by the call. */\n  logs: SimulationResponseLog[];\n};\n\n/**\n * Changes to the blockchain state.\n * Keyed by account address.\n */\nexport type SimulationResponseStateDiff = {\n  [address: Hex]: {\n    /** Native balance of the account. */\n    balance?: Hex;\n\n    /** Nonce of the account. */\n    nonce?: Hex;\n\n    /** Storage values per slot. */\n    storage?: {\n      [slot: Hex]: Hex;\n    };\n  };\n};\n\n/** Response from the simulation API for a single transaction. */\nexport type SimulationResponseTransaction = {\n  /** An error message indicating the transaction could not be simulated. */\n  error?: string;\n\n  /** Return value of the transaction, such as the balance if calling balanceOf. */\n  return: Hex;\n\n  /** Hierarchy of call data including nested calls and logs. */\n  callTrace?: SimulationResponseCallTrace;\n\n  /** Changes to the blockchain state. */\n  stateDiff?: {\n    /** Initial blockchain state before the transaction. */\n    pre?: SimulationResponseStateDiff;\n\n    /** Updated blockchain state after the transaction. */\n    post?: SimulationResponseStateDiff;\n  };\n};\n\n/** Response from the simulation API. */\nexport type SimulationResponse = {\n  /** Simulation data for each transaction in the request. */\n  transactions: SimulationResponseTransaction[];\n};\n\n/** Data for a network supported by the Simulation API. */\ntype SimulationNetwork = {\n  /** Subdomain of the API for the network.  */\n  network: string;\n\n  /** Whether the network supports confirmation simulations. */\n  confirmations: boolean;\n};\n\n/** Response from the simulation API containing supported networks. */\ntype SimulationNetworkResponse = {\n  [chainIdDecimal: string]: SimulationNetwork;\n};\n\nlet requestIdCounter = 0;\n\n/**\n * Simulate transactions using the transaction simulation API.\n * @param chainId - The chain ID to simulate transactions on.\n * @param request - The request to simulate transactions.\n */\nexport async function simulateTransactions(\n  chainId: Hex,\n  request: SimulationRequest,\n): Promise<SimulationResponse> {\n  const url = await getSimulationUrl(chainId);\n\n  log('Sending request', url, request);\n\n  const requestId = requestIdCounter;\n  requestIdCounter += 1;\n\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({\n      id: String(requestId),\n      jsonrpc: '2.0',\n      method: RPC_METHOD,\n      params: [request],\n    }),\n  });\n\n  const responseJson = await response.json();\n\n  log('Received response', responseJson);\n\n  if (responseJson.error) {\n    const { code, message } = responseJson.error;\n    throw new SimulationError(message, code);\n  }\n\n  return responseJson?.result;\n}\n\n/**\n * Get the URL for the transaction simulation API.\n * @param chainId - The chain ID to get the URL for.\n * @returns The URL for the transaction simulation API.\n */\nasync function getSimulationUrl(chainId: Hex): Promise<string> {\n  const networkData = await getNetworkData();\n  const chainIdDecimal = convertHexToDecimal(chainId);\n  const network = networkData[chainIdDecimal];\n\n  if (!network?.confirmations) {\n    log('Chain is not supported', chainId);\n    throw new SimulationChainNotSupportedError(chainId);\n  }\n\n  return getUrl(network.network);\n}\n\n/**\n * Retrieve the supported network data from the simulation API.\n */\nasync function getNetworkData(): Promise<SimulationNetworkResponse> {\n  const url = `${getUrl('ethereum-mainnet')}${ENDPOINT_NETWORKS}`;\n  const response = await fetch(url);\n  return response.json();\n}\n\n/**\n * Generate the URL for the specified subdomain in the simulation API.\n * @param subdomain - The subdomain to generate the URL for.\n * @returns The URL for the transaction simulation API.\n */\nfunction getUrl(subdomain: string): string {\n  return BASE_URL.replace('{0}', subdomain);\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/simulation.cjs b/dist/utils/simulation.cjs
index f7935d965f8994de78bf4bdb92e01c3cad1c1a11..d68ec06d0121ac608db41c6405ee8c4ed42df484 100644
--- a/dist/utils/simulation.cjs
+++ b/dist/utils/simulation.cjs
@@ -61,13 +61,10 @@ const REVERTED_ERRORS = ['execution reverted', 'insufficient funds for gas'];
  * @param request.to - The recipient of the transaction.
  * @param request.value - The value of the transaction.
  * @param request.data - The data of the transaction.
- * @param options - Additional options.
- * @param options.blockTime - An optional block time to simulate the transaction at.
  * @returns The simulation data.
  */
-async function getSimulationData(request, options = {}) {
+async function getSimulationData(request) {
     const { chainId, from, to, value, data } = request;
-    const { blockTime } = options;
     log('Getting simulation data', request);
     try {
         const response = await (0, simulation_api_1.simulateTransactions)(chainId, {
@@ -83,11 +80,6 @@ async function getSimulationData(request, options = {}) {
             ],
             withCallTrace: true,
             withLogs: true,
-            ...(blockTime && {
-                blockOverrides: {
-                    time: (0, controller_utils_1.toHex)(blockTime),
-                },
-            }),
         });
         const transactionError = response.transactions?.[0]?.error;
         if (transactionError) {
@@ -96,7 +88,7 @@ async function getSimulationData(request, options = {}) {
         const nativeBalanceChange = getNativeBalanceChange(request.from, response);
         const events = getEvents(response);
         log('Parsed events', events);
-        const tokenBalanceChanges = await getTokenBalanceChanges(request, events, options);
+        const tokenBalanceChanges = await getTokenBalanceChanges(request, events);
         return {
             nativeBalanceChange,
             tokenBalanceChanges,
@@ -213,12 +205,9 @@ function normalizeEventArgValue(value) {
  * Generate token balance changes from parsed events.
  * @param request - The transaction that was simulated.
  * @param events - The parsed events.
- * @param options - Additional options.
- * @param options.blockTime - An optional block time to simulate the transaction at.
  * @returns An array of token balance changes.
  */
-async function getTokenBalanceChanges(request, events, options) {
-    const { blockTime } = options;
+async function getTokenBalanceChanges(request, events) {
     const balanceTxs = getTokenBalanceTransactions(request, events);
     log('Generated balance transactions', [...balanceTxs.after.values()]);
     const transactions = [
@@ -231,11 +220,6 @@ async function getTokenBalanceChanges(request, events, options) {
     }
     const response = await (0, simulation_api_1.simulateTransactions)(request.chainId, {
         transactions,
-        ...(blockTime && {
-            blockOverrides: {
-                time: (0, controller_utils_1.toHex)(blockTime),
-            },
-        }),
     });
     log('Balance simulation response', response);
     if (response.transactions.length !== transactions.length) {
diff --git a/dist/utils/simulation.cjs.map b/dist/utils/simulation.cjs.map
index 34b97da854c87d4b47cdfacfdf36c1583962fd1a..d1d7c80f08fd45d35d29159b440f32386f5b9de6 100644
--- a/dist/utils/simulation.cjs.map
+++ b/dist/utils/simulation.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"simulation.cjs","sourceRoot":"","sources":["../../src/utils/simulation.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Fragment, LogDescription, Result } from '@ethersproject/abi';\nimport { Interface } from '@ethersproject/abi';\nimport { hexToBN, toHex } from '@metamask/controller-utils';\nimport { abiERC20, abiERC721, abiERC1155 } from '@metamask/metamask-eth-abis';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\n\nimport {\n  ABI_SIMULATION_ERC20_WRAPPED,\n  ABI_SIMULATION_ERC721_LEGACY,\n} from '../constants';\nimport {\n  SimulationError,\n  SimulationInvalidResponseError,\n  SimulationRevertedError,\n} from '../errors';\nimport { projectLogger } from '../logger';\nimport type {\n  SimulationBalanceChange,\n  SimulationData,\n  SimulationTokenBalanceChange,\n  SimulationToken,\n} from '../types';\nimport { SimulationTokenStandard } from '../types';\nimport { simulateTransactions } from './simulation-api';\nimport type {\n  SimulationResponseLog,\n  SimulationRequestTransaction,\n  SimulationResponse,\n  SimulationResponseCallTrace,\n  SimulationResponseTransaction,\n} from './simulation-api';\n\nexport enum SupportedToken {\n  ERC20 = 'erc20',\n  ERC721 = 'erc721',\n  ERC1155 = 'erc1155',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ERC20_WRAPPED = 'erc20Wrapped',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ERC721_LEGACY = 'erc721Legacy',\n}\n\ntype ABI = Fragment[];\n\nexport type GetSimulationDataRequest = {\n  chainId: Hex;\n  data?: Hex;\n  from: Hex;\n  to?: Hex;\n  value?: Hex;\n};\n\ntype ParsedEvent = {\n  contractAddress: Hex;\n  tokenStandard: SimulationTokenStandard;\n  name: string;\n  args: Record<string, Hex | Hex[]>;\n  abi: ABI;\n};\n\ntype GetSimulationDataOptions = {\n  blockTime?: number;\n};\n\nconst log = createModuleLogger(projectLogger, 'simulation');\n\nconst SUPPORTED_EVENTS = [\n  'Transfer',\n  'TransferSingle',\n  'TransferBatch',\n  'Deposit',\n  'Withdrawal',\n];\n\nconst SUPPORTED_TOKEN_ABIS = {\n  [SupportedToken.ERC20]: {\n    abi: abiERC20,\n    standard: SimulationTokenStandard.erc20,\n  },\n  [SupportedToken.ERC721]: {\n    abi: abiERC721,\n    standard: SimulationTokenStandard.erc721,\n  },\n  [SupportedToken.ERC1155]: {\n    abi: abiERC1155,\n    standard: SimulationTokenStandard.erc1155,\n  },\n  [SupportedToken.ERC20_WRAPPED]: {\n    abi: ABI_SIMULATION_ERC20_WRAPPED,\n    standard: SimulationTokenStandard.erc20,\n  },\n  [SupportedToken.ERC721_LEGACY]: {\n    abi: ABI_SIMULATION_ERC721_LEGACY,\n    standard: SimulationTokenStandard.erc721,\n  },\n};\n\nconst REVERTED_ERRORS = ['execution reverted', 'insufficient funds for gas'];\n\ntype BalanceTransactionMap = Map<SimulationToken, SimulationRequestTransaction>;\n\n/**\n * Generate simulation data for a transaction.\n * @param request - The transaction to simulate.\n * @param request.chainId - The chain ID of the transaction.\n * @param request.from - The sender of the transaction.\n * @param request.to - The recipient of the transaction.\n * @param request.value - The value of the transaction.\n * @param request.data - The data of the transaction.\n * @param options - Additional options.\n * @param options.blockTime - An optional block time to simulate the transaction at.\n * @returns The simulation data.\n */\nexport async function getSimulationData(\n  request: GetSimulationDataRequest,\n  options: GetSimulationDataOptions = {},\n): Promise<SimulationData> {\n  const { chainId, from, to, value, data } = request;\n  const { blockTime } = options;\n\n  log('Getting simulation data', request);\n\n  try {\n    const response = await simulateTransactions(chainId, {\n      transactions: [\n        {\n          data,\n          from,\n          maxFeePerGas: '0x0',\n          maxPriorityFeePerGas: '0x0',\n          to,\n          value,\n        },\n      ],\n      withCallTrace: true,\n      withLogs: true,\n      ...(blockTime && {\n        blockOverrides: {\n          time: toHex(blockTime),\n        },\n      }),\n    });\n\n    const transactionError = response.transactions?.[0]?.error;\n\n    if (transactionError) {\n      throw new SimulationError(transactionError);\n    }\n\n    const nativeBalanceChange = getNativeBalanceChange(request.from, response);\n    const events = getEvents(response);\n\n    log('Parsed events', events);\n\n    const tokenBalanceChanges = await getTokenBalanceChanges(\n      request,\n      events,\n      options,\n    );\n\n    return {\n      nativeBalanceChange,\n      tokenBalanceChanges,\n    };\n  } catch (error) {\n    log('Failed to get simulation data', error, request);\n\n    let simulationError = error as SimulationError;\n\n    if (\n      REVERTED_ERRORS.some((revertErrorMessage) =>\n        simulationError.message?.includes(revertErrorMessage),\n      )\n    ) {\n      simulationError = new SimulationRevertedError();\n    }\n\n    const { code, message } = simulationError;\n\n    return {\n      tokenBalanceChanges: [],\n      error: {\n        code,\n        message,\n      },\n    };\n  }\n}\n\n/**\n * Extract the native balance change from a simulation response.\n * @param userAddress - The user's account address.\n * @param response - The simulation response.\n * @returns The native balance change or undefined if unchanged.\n */\nfunction getNativeBalanceChange(\n  userAddress: Hex,\n  response: SimulationResponse,\n): SimulationBalanceChange | undefined {\n  const transactionResponse = response.transactions[0];\n\n  /* istanbul ignore next */\n  if (!transactionResponse) {\n    return undefined;\n  }\n\n  const { stateDiff } = transactionResponse;\n  const previousBalance = stateDiff?.pre?.[userAddress]?.balance;\n  const newBalance = stateDiff?.post?.[userAddress]?.balance;\n\n  if (!previousBalance || !newBalance) {\n    return undefined;\n  }\n\n  return getSimulationBalanceChange(previousBalance, newBalance);\n}\n\n/**\n * Extract events from a simulation response.\n * @param response - The simulation response.\n * @returns The parsed events.\n */\nexport function getEvents(response: SimulationResponse): ParsedEvent[] {\n  /* istanbul ignore next */\n  const logs = extractLogs(\n    response.transactions[0]?.callTrace ?? ({} as SimulationResponseCallTrace),\n  );\n\n  log('Extracted logs', logs);\n\n  const interfaces = getContractInterfaces();\n\n  return logs\n    .map((currentLog) => {\n      const event = parseLog(currentLog, interfaces);\n\n      if (!event) {\n        log('Failed to parse log', currentLog);\n        return undefined;\n      }\n\n      /* istanbul ignore next */\n      const inputs = event.abi.find((e) => e.name === event.name)?.inputs;\n\n      /* istanbul ignore if */\n      if (!inputs) {\n        log('Failed to find inputs for event', event);\n        return undefined;\n      }\n\n      if (!SUPPORTED_EVENTS.includes(event.name)) {\n        log('Ignoring unsupported event', event.name, event);\n        return undefined;\n      }\n\n      log('Normalizing event args', event.name, event);\n\n      const args = normalizeEventArgs(event.args, inputs);\n\n      return {\n        contractAddress: currentLog.address,\n        tokenStandard: event.standard,\n        name: event.name,\n        args,\n        abi: event.abi,\n      };\n    })\n    .filter((e) => e !== undefined) as ParsedEvent[];\n}\n\n/**\n * Normalize event arguments using ABI input definitions.\n * @param args - The raw event arguments.\n * @param abiInputs - The ABI input definitions.\n * @returns The normalized event arguments.\n */\nfunction normalizeEventArgs(\n  args: Result,\n  abiInputs: { name: string }[],\n): Record<string, Hex | Hex[]> {\n  return args.reduce((result, arg, index) => {\n    const name = abiInputs[index].name.replace('_', '');\n    const value = normalizeEventArgValue(arg);\n\n    result[name] = value;\n\n    return result;\n  }, {});\n}\n\n/**\n * Normalize an event argument value.\n * @param value - The event argument value.\n * @returns The normalized event argument value.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalizeEventArgValue(value: any): any {\n  if (Array.isArray(value)) {\n    return value.map(normalizeEventArgValue);\n  }\n\n  let normalizedValue = value;\n\n  normalizedValue = normalizedValue.toHexString?.() ?? normalizedValue;\n  normalizedValue = normalizedValue.toLowerCase?.() ?? normalizedValue;\n\n  return normalizedValue;\n}\n\n/**\n * Generate token balance changes from parsed events.\n * @param request - The transaction that was simulated.\n * @param events - The parsed events.\n * @param options - Additional options.\n * @param options.blockTime - An optional block time to simulate the transaction at.\n * @returns An array of token balance changes.\n */\nasync function getTokenBalanceChanges(\n  request: GetSimulationDataRequest,\n  events: ParsedEvent[],\n  options: GetSimulationDataOptions,\n): Promise<SimulationTokenBalanceChange[]> {\n  const { blockTime } = options;\n  const balanceTxs = getTokenBalanceTransactions(request, events);\n\n  log('Generated balance transactions', [...balanceTxs.after.values()]);\n\n  const transactions = [\n    ...balanceTxs.before.values(),\n    request,\n    ...balanceTxs.after.values(),\n  ];\n\n  if (transactions.length === 1) {\n    return [];\n  }\n\n  const response = await simulateTransactions(request.chainId as Hex, {\n    transactions,\n    ...(blockTime && {\n      blockOverrides: {\n        time: toHex(blockTime),\n      },\n    }),\n  });\n\n  log('Balance simulation response', response);\n\n  if (response.transactions.length !== transactions.length) {\n    throw new SimulationInvalidResponseError();\n  }\n\n  let prevBalanceTxIndex = 0;\n  return [...balanceTxs.after.keys()]\n    .map((token, index) => {\n      const previousBalanceCheckSkipped = !balanceTxs.before.get(token);\n      const previousBalance = previousBalanceCheckSkipped\n        ? '0x0'\n        : getAmountFromBalanceTransactionResult(\n            request.from,\n            token,\n            // eslint-disable-next-line no-plusplus\n            response.transactions[prevBalanceTxIndex++],\n          );\n\n      const newBalance = getAmountFromBalanceTransactionResult(\n        request.from,\n        token,\n        response.transactions[index + balanceTxs.before.size + 1],\n      );\n\n      const balanceChange = getSimulationBalanceChange(\n        previousBalance,\n        newBalance,\n      );\n\n      if (!balanceChange) {\n        return undefined;\n      }\n\n      return {\n        ...token,\n        ...balanceChange,\n      };\n    })\n    .filter((change) => change !== undefined) as SimulationTokenBalanceChange[];\n}\n\n/**\n * Generate transactions to check token balances.\n * @param request - The transaction that was simulated.\n * @param events - The parsed events.\n * @returns A map of token balance transactions keyed by token.\n */\nfunction getTokenBalanceTransactions(\n  request: GetSimulationDataRequest,\n  events: ParsedEvent[],\n): {\n  before: BalanceTransactionMap;\n  after: BalanceTransactionMap;\n} {\n  const tokenKeys = new Set();\n  const before = new Map();\n  const after = new Map();\n\n  const userEvents = events.filter((event) =>\n    [event.args.from, event.args.to].includes(request.from),\n  );\n\n  log('Filtered user events', userEvents);\n\n  for (const event of userEvents) {\n    const tokenIds = getEventTokenIds(event);\n\n    log('Extracted token IDs', tokenIds);\n\n    for (const tokenId of tokenIds) {\n      const simulationToken: SimulationToken = {\n        address: event.contractAddress,\n        standard: event.tokenStandard,\n        id: tokenId,\n      };\n\n      const tokenKey = JSON.stringify(simulationToken);\n\n      if (tokenKeys.has(tokenKey)) {\n        log(\n          'Ignoring additional event with same contract and token ID',\n          simulationToken,\n        );\n        continue;\n      }\n\n      tokenKeys.add(tokenKey);\n\n      const data = getBalanceTransactionData(\n        event.tokenStandard,\n        request.from,\n        tokenId,\n      );\n\n      const transaction: SimulationRequestTransaction = {\n        from: request.from,\n        to: event.contractAddress,\n        data,\n      };\n\n      if (skipPriorBalanceCheck(event)) {\n        after.set(simulationToken, transaction);\n      } else {\n        before.set(simulationToken, transaction);\n        after.set(simulationToken, transaction);\n      }\n    }\n  }\n\n  return { before, after };\n}\n\n/**\n * Check if an event needs to check the previous balance.\n * @param event - The parsed event.\n * @returns True if the prior balance check should be skipped.\n */\nfunction skipPriorBalanceCheck(event: ParsedEvent): boolean {\n  // In the case of an NFT mint, we cannot check the NFT owner before the mint\n  // as the balance check transaction would revert.\n  return (\n    event.name === 'Transfer' &&\n    event.tokenStandard === SimulationTokenStandard.erc721 &&\n    parseInt(event.args.from as string, 16) === 0\n  );\n}\n\n/**\n * Extract token IDs from a parsed event.\n * @param event - The parsed event.\n * @returns An array of token IDs.\n */\nfunction getEventTokenIds(event: ParsedEvent): (Hex | undefined)[] {\n  if (event.tokenStandard === SimulationTokenStandard.erc721) {\n    return [event.args.tokenId as Hex];\n  }\n\n  if (\n    event.tokenStandard === SimulationTokenStandard.erc1155 &&\n    event.name === 'TransferSingle'\n  ) {\n    return [event.args.id as Hex];\n  }\n\n  if (\n    event.tokenStandard === SimulationTokenStandard.erc1155 &&\n    event.name === 'TransferBatch'\n  ) {\n    return event.args.ids as Hex[];\n  }\n\n  // ERC-20 does not have a token ID so default to undefined.\n  return [undefined];\n}\n\n/**\n * Get the interface for a token standard.\n * @param tokenStandard - The token standard.\n * @returns The interface for the token standard.\n */\nfunction getContractInterface(\n  tokenStandard: SimulationTokenStandard,\n): Interface {\n  switch (tokenStandard) {\n    case SimulationTokenStandard.erc721:\n      return new Interface(abiERC721);\n    case SimulationTokenStandard.erc1155:\n      return new Interface(abiERC1155);\n    default:\n      return new Interface(abiERC20);\n  }\n}\n\n/**\n * Extract the value from a balance transaction response using the correct ABI.\n * @param from - The address to check the balance of.\n * @param token - The token to check the balance of.\n * @param response - The balance transaction response.\n * @returns The value of the balance transaction as Hex.\n */\nfunction getAmountFromBalanceTransactionResult(\n  from: Hex,\n  token: SimulationToken,\n  response: SimulationResponseTransaction,\n): Hex {\n  const contract = getContractInterface(token.standard);\n\n  try {\n    if (token.standard === SimulationTokenStandard.erc721) {\n      const result = contract.decodeFunctionResult('ownerOf', response.return);\n      const owner = result[0];\n      return owner.toLowerCase() === from.toLowerCase() ? '0x1' : '0x0';\n    }\n\n    const result = contract.decodeFunctionResult('balanceOf', response.return);\n    return toHex(result[0]);\n  } catch (error) {\n    log('Failed to decode balance transaction', error, { token, response });\n    throw new SimulationError(\n      `Failed to decode balance transaction for token ${\n        token.address\n      }: ${String(error)}`,\n    );\n  }\n}\n\n/**\n * Generate the balance transaction data for a token.\n * @param tokenStandard - The token standard.\n * @param from - The address to check the balance of.\n * @param tokenId - The token ID to check the balance of.\n * @returns The balance transaction data.\n */\nfunction getBalanceTransactionData(\n  tokenStandard: SimulationTokenStandard,\n  from: Hex,\n  tokenId?: Hex,\n): Hex {\n  const contract = getContractInterface(tokenStandard);\n  switch (tokenStandard) {\n    case SimulationTokenStandard.erc721:\n      return contract.encodeFunctionData('ownerOf', [tokenId]) as Hex;\n\n    case SimulationTokenStandard.erc1155:\n      return contract.encodeFunctionData('balanceOf', [from, tokenId]) as Hex;\n\n    default:\n      return contract.encodeFunctionData('balanceOf', [from]) as Hex;\n  }\n}\n\n/**\n * Parse a raw event log using known ABIs.\n * @param eventLog - The raw event log.\n * @param interfaces - The contract interfaces.\n * @returns The parsed event log or undefined if it could not be parsed.\n */\nfunction parseLog(\n  eventLog: SimulationResponseLog,\n  interfaces: Map<SupportedToken, Interface>,\n):\n  | (LogDescription & { abi: ABI; standard: SimulationTokenStandard })\n  | undefined {\n  const supportedTokens = Object.values(SupportedToken);\n\n  for (const token of supportedTokens) {\n    try {\n      const contractInterface = interfaces.get(token) as Interface;\n      const { abi, standard } = SUPPORTED_TOKEN_ABIS[token];\n\n      return {\n        ...contractInterface.parseLog(eventLog),\n        abi,\n        standard,\n      };\n    } catch (e) {\n      continue;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Extract all logs from a call trace tree.\n * @param call - The root call trace.\n * @returns An array of logs.\n */\nfunction extractLogs(\n  call: SimulationResponseCallTrace,\n): SimulationResponseLog[] {\n  /* istanbul ignore next */\n  const logs = call.logs ?? [];\n\n  /* istanbul ignore next */\n  const nestedCalls = call.calls ?? [];\n\n  return [\n    ...logs,\n    ...nestedCalls.map((nestedCall) => extractLogs(nestedCall)).flat(),\n  ];\n}\n\n/**\n * Generate balance change data from previous and new balances.\n * @param previousBalance - The previous balance.\n * @param newBalance - The new balance.\n * @returns The balance change data or undefined if unchanged.\n */\nfunction getSimulationBalanceChange(\n  previousBalance: Hex,\n  newBalance: Hex,\n): SimulationBalanceChange | undefined {\n  const differenceBN = hexToBN(newBalance).sub(hexToBN(previousBalance));\n  const isDecrease = differenceBN.isNeg();\n  const difference = toHex(differenceBN.abs());\n\n  if (differenceBN.isZero()) {\n    log('Balance change is zero');\n    return undefined;\n  }\n\n  return {\n    previousBalance,\n    newBalance,\n    difference,\n    isDecrease,\n  };\n}\n\n/**\n * Get the contract interfaces for all supported tokens.\n * @returns A map of supported tokens to their contract interfaces.\n */\nfunction getContractInterfaces(): Map<SupportedToken, Interface> {\n  const supportedTokens = Object.values(SupportedToken);\n\n  return new Map(\n    supportedTokens.map((tokenType) => {\n      const { abi } = SUPPORTED_TOKEN_ABIS[tokenType];\n      const contractInterface = new Interface(abi);\n      return [tokenType, contractInterface];\n    }),\n  );\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"simulation.cjs","sourceRoot":"","sources":["../../src/utils/simulation.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Fragment, LogDescription, Result } from '@ethersproject/abi';\nimport { Interface } from '@ethersproject/abi';\nimport { hexToBN, toHex } from '@metamask/controller-utils';\nimport { abiERC20, abiERC721, abiERC1155 } from '@metamask/metamask-eth-abis';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\n\nimport {\n  ABI_SIMULATION_ERC20_WRAPPED,\n  ABI_SIMULATION_ERC721_LEGACY,\n} from '../constants';\nimport {\n  SimulationError,\n  SimulationInvalidResponseError,\n  SimulationRevertedError,\n} from '../errors';\nimport { projectLogger } from '../logger';\nimport type {\n  SimulationBalanceChange,\n  SimulationData,\n  SimulationTokenBalanceChange,\n  SimulationToken,\n} from '../types';\nimport { SimulationTokenStandard } from '../types';\nimport { simulateTransactions } from './simulation-api';\nimport type {\n  SimulationResponseLog,\n  SimulationRequestTransaction,\n  SimulationResponse,\n  SimulationResponseCallTrace,\n  SimulationResponseTransaction,\n} from './simulation-api';\n\nexport enum SupportedToken {\n  ERC20 = 'erc20',\n  ERC721 = 'erc721',\n  ERC1155 = 'erc1155',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ERC20_WRAPPED = 'erc20Wrapped',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ERC721_LEGACY = 'erc721Legacy',\n}\n\ntype ABI = Fragment[];\n\nexport type GetSimulationDataRequest = {\n  chainId: Hex;\n  from: Hex;\n  to?: Hex;\n  value?: Hex;\n  data?: Hex;\n};\n\ntype ParsedEvent = {\n  contractAddress: Hex;\n  tokenStandard: SimulationTokenStandard;\n  name: string;\n  args: Record<string, Hex | Hex[]>;\n  abi: ABI;\n};\n\nconst log = createModuleLogger(projectLogger, 'simulation');\n\nconst SUPPORTED_EVENTS = [\n  'Transfer',\n  'TransferSingle',\n  'TransferBatch',\n  'Deposit',\n  'Withdrawal',\n];\n\nconst SUPPORTED_TOKEN_ABIS = {\n  [SupportedToken.ERC20]: {\n    abi: abiERC20,\n    standard: SimulationTokenStandard.erc20,\n  },\n  [SupportedToken.ERC721]: {\n    abi: abiERC721,\n    standard: SimulationTokenStandard.erc721,\n  },\n  [SupportedToken.ERC1155]: {\n    abi: abiERC1155,\n    standard: SimulationTokenStandard.erc1155,\n  },\n  [SupportedToken.ERC20_WRAPPED]: {\n    abi: ABI_SIMULATION_ERC20_WRAPPED,\n    standard: SimulationTokenStandard.erc20,\n  },\n  [SupportedToken.ERC721_LEGACY]: {\n    abi: ABI_SIMULATION_ERC721_LEGACY,\n    standard: SimulationTokenStandard.erc721,\n  },\n};\n\nconst REVERTED_ERRORS = ['execution reverted', 'insufficient funds for gas'];\n\ntype BalanceTransactionMap = Map<SimulationToken, SimulationRequestTransaction>;\n\n/**\n * Generate simulation data for a transaction.\n * @param request - The transaction to simulate.\n * @param request.chainId - The chain ID of the transaction.\n * @param request.from - The sender of the transaction.\n * @param request.to - The recipient of the transaction.\n * @param request.value - The value of the transaction.\n * @param request.data - The data of the transaction.\n * @returns The simulation data.\n */\nexport async function getSimulationData(\n  request: GetSimulationDataRequest,\n): Promise<SimulationData> {\n  const { chainId, from, to, value, data } = request;\n\n  log('Getting simulation data', request);\n\n  try {\n    const response = await simulateTransactions(chainId, {\n      transactions: [\n        {\n          data,\n          from,\n          maxFeePerGas: '0x0',\n          maxPriorityFeePerGas: '0x0',\n          to,\n          value,\n        },\n      ],\n      withCallTrace: true,\n      withLogs: true,\n    });\n\n    const transactionError = response.transactions?.[0]?.error;\n\n    if (transactionError) {\n      throw new SimulationError(transactionError);\n    }\n\n    const nativeBalanceChange = getNativeBalanceChange(request.from, response);\n    const events = getEvents(response);\n\n    log('Parsed events', events);\n\n    const tokenBalanceChanges = await getTokenBalanceChanges(request, events);\n\n    return {\n      nativeBalanceChange,\n      tokenBalanceChanges,\n    };\n  } catch (error) {\n    log('Failed to get simulation data', error, request);\n\n    let simulationError = error as SimulationError;\n\n    if (\n      REVERTED_ERRORS.some((revertErrorMessage) =>\n        simulationError.message?.includes(revertErrorMessage),\n      )\n    ) {\n      simulationError = new SimulationRevertedError();\n    }\n\n    const { code, message } = simulationError;\n\n    return {\n      tokenBalanceChanges: [],\n      error: {\n        code,\n        message,\n      },\n    };\n  }\n}\n\n/**\n * Extract the native balance change from a simulation response.\n * @param userAddress - The user's account address.\n * @param response - The simulation response.\n * @returns The native balance change or undefined if unchanged.\n */\nfunction getNativeBalanceChange(\n  userAddress: Hex,\n  response: SimulationResponse,\n): SimulationBalanceChange | undefined {\n  const transactionResponse = response.transactions[0];\n\n  /* istanbul ignore next */\n  if (!transactionResponse) {\n    return undefined;\n  }\n\n  const { stateDiff } = transactionResponse;\n  const previousBalance = stateDiff?.pre?.[userAddress]?.balance;\n  const newBalance = stateDiff?.post?.[userAddress]?.balance;\n\n  if (!previousBalance || !newBalance) {\n    return undefined;\n  }\n\n  return getSimulationBalanceChange(previousBalance, newBalance);\n}\n\n/**\n * Extract events from a simulation response.\n * @param response - The simulation response.\n * @returns The parsed events.\n */\nexport function getEvents(response: SimulationResponse): ParsedEvent[] {\n  /* istanbul ignore next */\n  const logs = extractLogs(\n    response.transactions[0]?.callTrace ?? ({} as SimulationResponseCallTrace),\n  );\n\n  log('Extracted logs', logs);\n\n  const interfaces = getContractInterfaces();\n\n  return logs\n    .map((currentLog) => {\n      const event = parseLog(currentLog, interfaces);\n\n      if (!event) {\n        log('Failed to parse log', currentLog);\n        return undefined;\n      }\n\n      /* istanbul ignore next */\n      const inputs = event.abi.find((e) => e.name === event.name)?.inputs;\n\n      /* istanbul ignore if */\n      if (!inputs) {\n        log('Failed to find inputs for event', event);\n        return undefined;\n      }\n\n      if (!SUPPORTED_EVENTS.includes(event.name)) {\n        log('Ignoring unsupported event', event.name, event);\n        return undefined;\n      }\n\n      log('Normalizing event args', event.name, event);\n\n      const args = normalizeEventArgs(event.args, inputs);\n\n      return {\n        contractAddress: currentLog.address,\n        tokenStandard: event.standard,\n        name: event.name,\n        args,\n        abi: event.abi,\n      };\n    })\n    .filter((e) => e !== undefined) as ParsedEvent[];\n}\n\n/**\n * Normalize event arguments using ABI input definitions.\n * @param args - The raw event arguments.\n * @param abiInputs - The ABI input definitions.\n * @returns The normalized event arguments.\n */\nfunction normalizeEventArgs(\n  args: Result,\n  abiInputs: { name: string }[],\n): Record<string, Hex | Hex[]> {\n  return args.reduce((result, arg, index) => {\n    const name = abiInputs[index].name.replace('_', '');\n    const value = normalizeEventArgValue(arg);\n\n    result[name] = value;\n\n    return result;\n  }, {});\n}\n\n/**\n * Normalize an event argument value.\n * @param value - The event argument value.\n * @returns The normalized event argument value.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalizeEventArgValue(value: any): any {\n  if (Array.isArray(value)) {\n    return value.map(normalizeEventArgValue);\n  }\n\n  let normalizedValue = value;\n\n  normalizedValue = normalizedValue.toHexString?.() ?? normalizedValue;\n  normalizedValue = normalizedValue.toLowerCase?.() ?? normalizedValue;\n\n  return normalizedValue;\n}\n\n/**\n * Generate token balance changes from parsed events.\n * @param request - The transaction that was simulated.\n * @param events - The parsed events.\n * @returns An array of token balance changes.\n */\nasync function getTokenBalanceChanges(\n  request: GetSimulationDataRequest,\n  events: ParsedEvent[],\n): Promise<SimulationTokenBalanceChange[]> {\n  const balanceTxs = getTokenBalanceTransactions(request, events);\n\n  log('Generated balance transactions', [...balanceTxs.after.values()]);\n\n  const transactions = [\n    ...balanceTxs.before.values(),\n    request,\n    ...balanceTxs.after.values(),\n  ];\n\n  if (transactions.length === 1) {\n    return [];\n  }\n\n  const response = await simulateTransactions(request.chainId as Hex, {\n    transactions,\n  });\n\n  log('Balance simulation response', response);\n\n  if (response.transactions.length !== transactions.length) {\n    throw new SimulationInvalidResponseError();\n  }\n\n  let prevBalanceTxIndex = 0;\n  return [...balanceTxs.after.keys()]\n    .map((token, index) => {\n      const previousBalanceCheckSkipped = !balanceTxs.before.get(token);\n      const previousBalance = previousBalanceCheckSkipped\n        ? '0x0'\n        : getAmountFromBalanceTransactionResult(\n            request.from,\n            token,\n            // eslint-disable-next-line no-plusplus\n            response.transactions[prevBalanceTxIndex++],\n          );\n\n      const newBalance = getAmountFromBalanceTransactionResult(\n        request.from,\n        token,\n        response.transactions[index + balanceTxs.before.size + 1],\n      );\n\n      const balanceChange = getSimulationBalanceChange(\n        previousBalance,\n        newBalance,\n      );\n\n      if (!balanceChange) {\n        return undefined;\n      }\n\n      return {\n        ...token,\n        ...balanceChange,\n      };\n    })\n    .filter((change) => change !== undefined) as SimulationTokenBalanceChange[];\n}\n\n/**\n * Generate transactions to check token balances.\n * @param request - The transaction that was simulated.\n * @param events - The parsed events.\n * @returns A map of token balance transactions keyed by token.\n */\nfunction getTokenBalanceTransactions(\n  request: GetSimulationDataRequest,\n  events: ParsedEvent[],\n): {\n  before: BalanceTransactionMap;\n  after: BalanceTransactionMap;\n} {\n  const tokenKeys = new Set();\n  const before = new Map();\n  const after = new Map();\n\n  const userEvents = events.filter((event) =>\n    [event.args.from, event.args.to].includes(request.from),\n  );\n\n  log('Filtered user events', userEvents);\n\n  for (const event of userEvents) {\n    const tokenIds = getEventTokenIds(event);\n\n    log('Extracted token IDs', tokenIds);\n\n    for (const tokenId of tokenIds) {\n      const simulationToken: SimulationToken = {\n        address: event.contractAddress,\n        standard: event.tokenStandard,\n        id: tokenId,\n      };\n\n      const tokenKey = JSON.stringify(simulationToken);\n\n      if (tokenKeys.has(tokenKey)) {\n        log(\n          'Ignoring additional event with same contract and token ID',\n          simulationToken,\n        );\n        continue;\n      }\n\n      tokenKeys.add(tokenKey);\n\n      const data = getBalanceTransactionData(\n        event.tokenStandard,\n        request.from,\n        tokenId,\n      );\n\n      const transaction: SimulationRequestTransaction = {\n        from: request.from,\n        to: event.contractAddress,\n        data,\n      };\n\n      if (skipPriorBalanceCheck(event)) {\n        after.set(simulationToken, transaction);\n      } else {\n        before.set(simulationToken, transaction);\n        after.set(simulationToken, transaction);\n      }\n    }\n  }\n\n  return { before, after };\n}\n\n/**\n * Check if an event needs to check the previous balance.\n * @param event - The parsed event.\n * @returns True if the prior balance check should be skipped.\n */\nfunction skipPriorBalanceCheck(event: ParsedEvent): boolean {\n  // In the case of an NFT mint, we cannot check the NFT owner before the mint\n  // as the balance check transaction would revert.\n  return (\n    event.name === 'Transfer' &&\n    event.tokenStandard === SimulationTokenStandard.erc721 &&\n    parseInt(event.args.from as string, 16) === 0\n  );\n}\n\n/**\n * Extract token IDs from a parsed event.\n * @param event - The parsed event.\n * @returns An array of token IDs.\n */\nfunction getEventTokenIds(event: ParsedEvent): (Hex | undefined)[] {\n  if (event.tokenStandard === SimulationTokenStandard.erc721) {\n    return [event.args.tokenId as Hex];\n  }\n\n  if (\n    event.tokenStandard === SimulationTokenStandard.erc1155 &&\n    event.name === 'TransferSingle'\n  ) {\n    return [event.args.id as Hex];\n  }\n\n  if (\n    event.tokenStandard === SimulationTokenStandard.erc1155 &&\n    event.name === 'TransferBatch'\n  ) {\n    return event.args.ids as Hex[];\n  }\n\n  // ERC-20 does not have a token ID so default to undefined.\n  return [undefined];\n}\n\n/**\n * Get the interface for a token standard.\n * @param tokenStandard - The token standard.\n * @returns The interface for the token standard.\n */\nfunction getContractInterface(\n  tokenStandard: SimulationTokenStandard,\n): Interface {\n  switch (tokenStandard) {\n    case SimulationTokenStandard.erc721:\n      return new Interface(abiERC721);\n    case SimulationTokenStandard.erc1155:\n      return new Interface(abiERC1155);\n    default:\n      return new Interface(abiERC20);\n  }\n}\n\n/**\n * Extract the value from a balance transaction response using the correct ABI.\n * @param from - The address to check the balance of.\n * @param token - The token to check the balance of.\n * @param response - The balance transaction response.\n * @returns The value of the balance transaction as Hex.\n */\nfunction getAmountFromBalanceTransactionResult(\n  from: Hex,\n  token: SimulationToken,\n  response: SimulationResponseTransaction,\n): Hex {\n  const contract = getContractInterface(token.standard);\n\n  try {\n    if (token.standard === SimulationTokenStandard.erc721) {\n      const result = contract.decodeFunctionResult('ownerOf', response.return);\n      const owner = result[0];\n      return owner.toLowerCase() === from.toLowerCase() ? '0x1' : '0x0';\n    }\n\n    const result = contract.decodeFunctionResult('balanceOf', response.return);\n    return toHex(result[0]);\n  } catch (error) {\n    log('Failed to decode balance transaction', error, { token, response });\n    throw new SimulationError(\n      `Failed to decode balance transaction for token ${\n        token.address\n      }: ${String(error)}`,\n    );\n  }\n}\n\n/**\n * Generate the balance transaction data for a token.\n * @param tokenStandard - The token standard.\n * @param from - The address to check the balance of.\n * @param tokenId - The token ID to check the balance of.\n * @returns The balance transaction data.\n */\nfunction getBalanceTransactionData(\n  tokenStandard: SimulationTokenStandard,\n  from: Hex,\n  tokenId?: Hex,\n): Hex {\n  const contract = getContractInterface(tokenStandard);\n  switch (tokenStandard) {\n    case SimulationTokenStandard.erc721:\n      return contract.encodeFunctionData('ownerOf', [tokenId]) as Hex;\n\n    case SimulationTokenStandard.erc1155:\n      return contract.encodeFunctionData('balanceOf', [from, tokenId]) as Hex;\n\n    default:\n      return contract.encodeFunctionData('balanceOf', [from]) as Hex;\n  }\n}\n\n/**\n * Parse a raw event log using known ABIs.\n * @param eventLog - The raw event log.\n * @param interfaces - The contract interfaces.\n * @returns The parsed event log or undefined if it could not be parsed.\n */\nfunction parseLog(\n  eventLog: SimulationResponseLog,\n  interfaces: Map<SupportedToken, Interface>,\n):\n  | (LogDescription & { abi: ABI; standard: SimulationTokenStandard })\n  | undefined {\n  const supportedTokens = Object.values(SupportedToken);\n\n  for (const token of supportedTokens) {\n    try {\n      const contractInterface = interfaces.get(token) as Interface;\n      const { abi, standard } = SUPPORTED_TOKEN_ABIS[token];\n\n      return {\n        ...contractInterface.parseLog(eventLog),\n        abi,\n        standard,\n      };\n    } catch (e) {\n      continue;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Extract all logs from a call trace tree.\n * @param call - The root call trace.\n * @returns An array of logs.\n */\nfunction extractLogs(\n  call: SimulationResponseCallTrace,\n): SimulationResponseLog[] {\n  /* istanbul ignore next */\n  const logs = call.logs ?? [];\n\n  /* istanbul ignore next */\n  const nestedCalls = call.calls ?? [];\n\n  return [\n    ...logs,\n    ...nestedCalls.map((nestedCall) => extractLogs(nestedCall)).flat(),\n  ];\n}\n\n/**\n * Generate balance change data from previous and new balances.\n * @param previousBalance - The previous balance.\n * @param newBalance - The new balance.\n * @returns The balance change data or undefined if unchanged.\n */\nfunction getSimulationBalanceChange(\n  previousBalance: Hex,\n  newBalance: Hex,\n): SimulationBalanceChange | undefined {\n  const differenceBN = hexToBN(newBalance).sub(hexToBN(previousBalance));\n  const isDecrease = differenceBN.isNeg();\n  const difference = toHex(differenceBN.abs());\n\n  if (differenceBN.isZero()) {\n    log('Balance change is zero');\n    return undefined;\n  }\n\n  return {\n    previousBalance,\n    newBalance,\n    difference,\n    isDecrease,\n  };\n}\n\n/**\n * Get the contract interfaces for all supported tokens.\n * @returns A map of supported tokens to their contract interfaces.\n */\nfunction getContractInterfaces(): Map<SupportedToken, Interface> {\n  const supportedTokens = Object.values(SupportedToken);\n\n  return new Map(\n    supportedTokens.map((tokenType) => {\n      const { abi } = SUPPORTED_TOKEN_ABIS[tokenType];\n      const contractInterface = new Interface(abi);\n      return [tokenType, contractInterface];\n    }),\n  );\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/simulation.d.cts b/dist/utils/simulation.d.cts
index 4d1c6714095aa4d6c87b113514f097d82cbe621c..dd1685763ad77e9e6ebd67f3419aa948859feaa9 100644
--- a/dist/utils/simulation.d.cts
+++ b/dist/utils/simulation.d.cts
@@ -13,10 +13,10 @@ export declare enum SupportedToken {
 type ABI = Fragment[];
 export type GetSimulationDataRequest = {
     chainId: Hex;
-    data?: Hex;
     from: Hex;
     to?: Hex;
     value?: Hex;
+    data?: Hex;
 };
 type ParsedEvent = {
     contractAddress: Hex;
@@ -25,9 +25,6 @@ type ParsedEvent = {
     args: Record<string, Hex | Hex[]>;
     abi: ABI;
 };
-type GetSimulationDataOptions = {
-    blockTime?: number;
-};
 /**
  * Generate simulation data for a transaction.
  * @param request - The transaction to simulate.
@@ -36,11 +33,9 @@ type GetSimulationDataOptions = {
  * @param request.to - The recipient of the transaction.
  * @param request.value - The value of the transaction.
  * @param request.data - The data of the transaction.
- * @param options - Additional options.
- * @param options.blockTime - An optional block time to simulate the transaction at.
  * @returns The simulation data.
  */
-export declare function getSimulationData(request: GetSimulationDataRequest, options?: GetSimulationDataOptions): Promise<SimulationData>;
+export declare function getSimulationData(request: GetSimulationDataRequest): Promise<SimulationData>;
 /**
  * Extract events from a simulation response.
  * @param response - The simulation response.
diff --git a/dist/utils/simulation.d.cts.map b/dist/utils/simulation.d.cts.map
index 0766b6f964cd54649012e7f04c1827b256ac58ca..3b9e36f172d00c59af318bb28c53207d131dfdb8 100644
--- a/dist/utils/simulation.d.cts.map
+++ b/dist/utils/simulation.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"simulation.d.cts","sourceRoot":"","sources":["../../src/utils/simulation.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,QAAQ,EAA0B,2BAA2B;AAI3E,OAAO,EAAsB,KAAK,GAAG,EAAE,wBAAwB;AAY/D,OAAO,KAAK,EAEV,cAAc,EAGf,qBAAiB;AAClB,OAAO,EAAE,uBAAuB,EAAE,qBAAiB;AAEnD,OAAO,KAAK,EAGV,kBAAkB,EAGnB,6BAAyB;AAE1B,oBAAY,cAAc;IACxB,KAAK,UAAU;IACf,MAAM,WAAW;IACjB,OAAO,YAAY;IAGnB,aAAa,iBAAiB;IAG9B,aAAa,iBAAiB;CAC/B;AAED,KAAK,GAAG,GAAG,QAAQ,EAAE,CAAC;AAEtB,MAAM,MAAM,wBAAwB,GAAG;IACrC,OAAO,EAAE,GAAG,CAAC;IACb,IAAI,CAAC,EAAE,GAAG,CAAC;IACX,IAAI,EAAE,GAAG,CAAC;IACV,EAAE,CAAC,EAAE,GAAG,CAAC;IACT,KAAK,CAAC,EAAE,GAAG,CAAC;CACb,CAAC;AAEF,KAAK,WAAW,GAAG;IACjB,eAAe,EAAE,GAAG,CAAC;IACrB,aAAa,EAAE,uBAAuB,CAAC;IACvC,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;IAClC,GAAG,EAAE,GAAG,CAAC;CACV,CAAC;AAEF,KAAK,wBAAwB,GAAG;IAC9B,SAAS,CAAC,EAAE,MAAM,CAAC;CACpB,CAAC;AAuCF;;;;;;;;;;;GAWG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,wBAAwB,EACjC,OAAO,GAAE,wBAA6B,GACrC,OAAO,CAAC,cAAc,CAAC,CAuEzB;AA8BD;;;;GAIG;AACH,wBAAgB,SAAS,CAAC,QAAQ,EAAE,kBAAkB,GAAG,WAAW,EAAE,CA8CrE"}
\ No newline at end of file
+{"version":3,"file":"simulation.d.cts","sourceRoot":"","sources":["../../src/utils/simulation.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,QAAQ,EAA0B,2BAA2B;AAI3E,OAAO,EAAsB,KAAK,GAAG,EAAE,wBAAwB;AAY/D,OAAO,KAAK,EAEV,cAAc,EAGf,qBAAiB;AAClB,OAAO,EAAE,uBAAuB,EAAE,qBAAiB;AAEnD,OAAO,KAAK,EAGV,kBAAkB,EAGnB,6BAAyB;AAE1B,oBAAY,cAAc;IACxB,KAAK,UAAU;IACf,MAAM,WAAW;IACjB,OAAO,YAAY;IAGnB,aAAa,iBAAiB;IAG9B,aAAa,iBAAiB;CAC/B;AAED,KAAK,GAAG,GAAG,QAAQ,EAAE,CAAC;AAEtB,MAAM,MAAM,wBAAwB,GAAG;IACrC,OAAO,EAAE,GAAG,CAAC;IACb,IAAI,EAAE,GAAG,CAAC;IACV,EAAE,CAAC,EAAE,GAAG,CAAC;IACT,KAAK,CAAC,EAAE,GAAG,CAAC;IACZ,IAAI,CAAC,EAAE,GAAG,CAAC;CACZ,CAAC;AAEF,KAAK,WAAW,GAAG;IACjB,eAAe,EAAE,GAAG,CAAC;IACrB,aAAa,EAAE,uBAAuB,CAAC;IACvC,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;IAClC,GAAG,EAAE,GAAG,CAAC;CACV,CAAC;AAuCF;;;;;;;;;GASG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,wBAAwB,GAChC,OAAO,CAAC,cAAc,CAAC,CA6DzB;AA8BD;;;;GAIG;AACH,wBAAgB,SAAS,CAAC,QAAQ,EAAE,kBAAkB,GAAG,WAAW,EAAE,CA8CrE"}
\ No newline at end of file
diff --git a/dist/utils/simulation.d.mts b/dist/utils/simulation.d.mts
index 2254b8899ae50c074a32810fa722d81ed68504a8..ad4e4a2883b59503199fabbf92ee7d645328a2c7 100644
--- a/dist/utils/simulation.d.mts
+++ b/dist/utils/simulation.d.mts
@@ -13,10 +13,10 @@ export declare enum SupportedToken {
 type ABI = Fragment[];
 export type GetSimulationDataRequest = {
     chainId: Hex;
-    data?: Hex;
     from: Hex;
     to?: Hex;
     value?: Hex;
+    data?: Hex;
 };
 type ParsedEvent = {
     contractAddress: Hex;
@@ -25,9 +25,6 @@ type ParsedEvent = {
     args: Record<string, Hex | Hex[]>;
     abi: ABI;
 };
-type GetSimulationDataOptions = {
-    blockTime?: number;
-};
 /**
  * Generate simulation data for a transaction.
  * @param request - The transaction to simulate.
@@ -36,11 +33,9 @@ type GetSimulationDataOptions = {
  * @param request.to - The recipient of the transaction.
  * @param request.value - The value of the transaction.
  * @param request.data - The data of the transaction.
- * @param options - Additional options.
- * @param options.blockTime - An optional block time to simulate the transaction at.
  * @returns The simulation data.
  */
-export declare function getSimulationData(request: GetSimulationDataRequest, options?: GetSimulationDataOptions): Promise<SimulationData>;
+export declare function getSimulationData(request: GetSimulationDataRequest): Promise<SimulationData>;
 /**
  * Extract events from a simulation response.
  * @param response - The simulation response.
diff --git a/dist/utils/simulation.d.mts.map b/dist/utils/simulation.d.mts.map
index 6c08ee96643decc8e717d6d99787db1aa9e25a36..2834be2760625913dd2092f9c5e61b309326a1ba 100644
--- a/dist/utils/simulation.d.mts.map
+++ b/dist/utils/simulation.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"simulation.d.mts","sourceRoot":"","sources":["../../src/utils/simulation.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,QAAQ,EAA0B,2BAA2B;AAI3E,OAAO,EAAsB,KAAK,GAAG,EAAE,wBAAwB;AAY/D,OAAO,KAAK,EAEV,cAAc,EAGf,qBAAiB;AAClB,OAAO,EAAE,uBAAuB,EAAE,qBAAiB;AAEnD,OAAO,KAAK,EAGV,kBAAkB,EAGnB,6BAAyB;AAE1B,oBAAY,cAAc;IACxB,KAAK,UAAU;IACf,MAAM,WAAW;IACjB,OAAO,YAAY;IAGnB,aAAa,iBAAiB;IAG9B,aAAa,iBAAiB;CAC/B;AAED,KAAK,GAAG,GAAG,QAAQ,EAAE,CAAC;AAEtB,MAAM,MAAM,wBAAwB,GAAG;IACrC,OAAO,EAAE,GAAG,CAAC;IACb,IAAI,CAAC,EAAE,GAAG,CAAC;IACX,IAAI,EAAE,GAAG,CAAC;IACV,EAAE,CAAC,EAAE,GAAG,CAAC;IACT,KAAK,CAAC,EAAE,GAAG,CAAC;CACb,CAAC;AAEF,KAAK,WAAW,GAAG;IACjB,eAAe,EAAE,GAAG,CAAC;IACrB,aAAa,EAAE,uBAAuB,CAAC;IACvC,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;IAClC,GAAG,EAAE,GAAG,CAAC;CACV,CAAC;AAEF,KAAK,wBAAwB,GAAG;IAC9B,SAAS,CAAC,EAAE,MAAM,CAAC;CACpB,CAAC;AAuCF;;;;;;;;;;;GAWG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,wBAAwB,EACjC,OAAO,GAAE,wBAA6B,GACrC,OAAO,CAAC,cAAc,CAAC,CAuEzB;AA8BD;;;;GAIG;AACH,wBAAgB,SAAS,CAAC,QAAQ,EAAE,kBAAkB,GAAG,WAAW,EAAE,CA8CrE"}
\ No newline at end of file
+{"version":3,"file":"simulation.d.mts","sourceRoot":"","sources":["../../src/utils/simulation.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,QAAQ,EAA0B,2BAA2B;AAI3E,OAAO,EAAsB,KAAK,GAAG,EAAE,wBAAwB;AAY/D,OAAO,KAAK,EAEV,cAAc,EAGf,qBAAiB;AAClB,OAAO,EAAE,uBAAuB,EAAE,qBAAiB;AAEnD,OAAO,KAAK,EAGV,kBAAkB,EAGnB,6BAAyB;AAE1B,oBAAY,cAAc;IACxB,KAAK,UAAU;IACf,MAAM,WAAW;IACjB,OAAO,YAAY;IAGnB,aAAa,iBAAiB;IAG9B,aAAa,iBAAiB;CAC/B;AAED,KAAK,GAAG,GAAG,QAAQ,EAAE,CAAC;AAEtB,MAAM,MAAM,wBAAwB,GAAG;IACrC,OAAO,EAAE,GAAG,CAAC;IACb,IAAI,EAAE,GAAG,CAAC;IACV,EAAE,CAAC,EAAE,GAAG,CAAC;IACT,KAAK,CAAC,EAAE,GAAG,CAAC;IACZ,IAAI,CAAC,EAAE,GAAG,CAAC;CACZ,CAAC;AAEF,KAAK,WAAW,GAAG;IACjB,eAAe,EAAE,GAAG,CAAC;IACrB,aAAa,EAAE,uBAAuB,CAAC;IACvC,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;IAClC,GAAG,EAAE,GAAG,CAAC;CACV,CAAC;AAuCF;;;;;;;;;GASG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,EAAE,wBAAwB,GAChC,OAAO,CAAC,cAAc,CAAC,CA6DzB;AA8BD;;;;GAIG;AACH,wBAAgB,SAAS,CAAC,QAAQ,EAAE,kBAAkB,GAAG,WAAW,EAAE,CA8CrE"}
\ No newline at end of file
diff --git a/dist/utils/simulation.mjs b/dist/utils/simulation.mjs
index 0a8a75d981bbf47f977ac39876b2f24ae14f779e..206995530fbbc5167b22aeebcb5bb5b37dec0a92 100644
--- a/dist/utils/simulation.mjs
+++ b/dist/utils/simulation.mjs
@@ -58,13 +58,10 @@ const REVERTED_ERRORS = ['execution reverted', 'insufficient funds for gas'];
  * @param request.to - The recipient of the transaction.
  * @param request.value - The value of the transaction.
  * @param request.data - The data of the transaction.
- * @param options - Additional options.
- * @param options.blockTime - An optional block time to simulate the transaction at.
  * @returns The simulation data.
  */
-export async function getSimulationData(request, options = {}) {
+export async function getSimulationData(request) {
     const { chainId, from, to, value, data } = request;
-    const { blockTime } = options;
     log('Getting simulation data', request);
     try {
         const response = await simulateTransactions(chainId, {
@@ -80,11 +77,6 @@ export async function getSimulationData(request, options = {}) {
             ],
             withCallTrace: true,
             withLogs: true,
-            ...(blockTime && {
-                blockOverrides: {
-                    time: toHex(blockTime),
-                },
-            }),
         });
         const transactionError = response.transactions?.[0]?.error;
         if (transactionError) {
@@ -93,7 +85,7 @@ export async function getSimulationData(request, options = {}) {
         const nativeBalanceChange = getNativeBalanceChange(request.from, response);
         const events = getEvents(response);
         log('Parsed events', events);
-        const tokenBalanceChanges = await getTokenBalanceChanges(request, events, options);
+        const tokenBalanceChanges = await getTokenBalanceChanges(request, events);
         return {
             nativeBalanceChange,
             tokenBalanceChanges,
@@ -208,12 +200,9 @@ function normalizeEventArgValue(value) {
  * Generate token balance changes from parsed events.
  * @param request - The transaction that was simulated.
  * @param events - The parsed events.
- * @param options - Additional options.
- * @param options.blockTime - An optional block time to simulate the transaction at.
  * @returns An array of token balance changes.
  */
-async function getTokenBalanceChanges(request, events, options) {
-    const { blockTime } = options;
+async function getTokenBalanceChanges(request, events) {
     const balanceTxs = getTokenBalanceTransactions(request, events);
     log('Generated balance transactions', [...balanceTxs.after.values()]);
     const transactions = [
@@ -226,11 +215,6 @@ async function getTokenBalanceChanges(request, events, options) {
     }
     const response = await simulateTransactions(request.chainId, {
         transactions,
-        ...(blockTime && {
-            blockOverrides: {
-                time: toHex(blockTime),
-            },
-        }),
     });
     log('Balance simulation response', response);
     if (response.transactions.length !== transactions.length) {
diff --git a/dist/utils/simulation.mjs.map b/dist/utils/simulation.mjs.map
index 7505c2787edefdbd354258967ed38eec29873e1c..bbce6ce1626c56844adb7d3edc828b61c1e2a3ec 100644
--- a/dist/utils/simulation.mjs.map
+++ b/dist/utils/simulation.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"simulation.mjs","sourceRoot":"","sources":["../../src/utils/simulation.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Fragment, LogDescription, Result } from '@ethersproject/abi';\nimport { Interface } from '@ethersproject/abi';\nimport { hexToBN, toHex } from '@metamask/controller-utils';\nimport { abiERC20, abiERC721, abiERC1155 } from '@metamask/metamask-eth-abis';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\n\nimport {\n  ABI_SIMULATION_ERC20_WRAPPED,\n  ABI_SIMULATION_ERC721_LEGACY,\n} from '../constants';\nimport {\n  SimulationError,\n  SimulationInvalidResponseError,\n  SimulationRevertedError,\n} from '../errors';\nimport { projectLogger } from '../logger';\nimport type {\n  SimulationBalanceChange,\n  SimulationData,\n  SimulationTokenBalanceChange,\n  SimulationToken,\n} from '../types';\nimport { SimulationTokenStandard } from '../types';\nimport { simulateTransactions } from './simulation-api';\nimport type {\n  SimulationResponseLog,\n  SimulationRequestTransaction,\n  SimulationResponse,\n  SimulationResponseCallTrace,\n  SimulationResponseTransaction,\n} from './simulation-api';\n\nexport enum SupportedToken {\n  ERC20 = 'erc20',\n  ERC721 = 'erc721',\n  ERC1155 = 'erc1155',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ERC20_WRAPPED = 'erc20Wrapped',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ERC721_LEGACY = 'erc721Legacy',\n}\n\ntype ABI = Fragment[];\n\nexport type GetSimulationDataRequest = {\n  chainId: Hex;\n  data?: Hex;\n  from: Hex;\n  to?: Hex;\n  value?: Hex;\n};\n\ntype ParsedEvent = {\n  contractAddress: Hex;\n  tokenStandard: SimulationTokenStandard;\n  name: string;\n  args: Record<string, Hex | Hex[]>;\n  abi: ABI;\n};\n\ntype GetSimulationDataOptions = {\n  blockTime?: number;\n};\n\nconst log = createModuleLogger(projectLogger, 'simulation');\n\nconst SUPPORTED_EVENTS = [\n  'Transfer',\n  'TransferSingle',\n  'TransferBatch',\n  'Deposit',\n  'Withdrawal',\n];\n\nconst SUPPORTED_TOKEN_ABIS = {\n  [SupportedToken.ERC20]: {\n    abi: abiERC20,\n    standard: SimulationTokenStandard.erc20,\n  },\n  [SupportedToken.ERC721]: {\n    abi: abiERC721,\n    standard: SimulationTokenStandard.erc721,\n  },\n  [SupportedToken.ERC1155]: {\n    abi: abiERC1155,\n    standard: SimulationTokenStandard.erc1155,\n  },\n  [SupportedToken.ERC20_WRAPPED]: {\n    abi: ABI_SIMULATION_ERC20_WRAPPED,\n    standard: SimulationTokenStandard.erc20,\n  },\n  [SupportedToken.ERC721_LEGACY]: {\n    abi: ABI_SIMULATION_ERC721_LEGACY,\n    standard: SimulationTokenStandard.erc721,\n  },\n};\n\nconst REVERTED_ERRORS = ['execution reverted', 'insufficient funds for gas'];\n\ntype BalanceTransactionMap = Map<SimulationToken, SimulationRequestTransaction>;\n\n/**\n * Generate simulation data for a transaction.\n * @param request - The transaction to simulate.\n * @param request.chainId - The chain ID of the transaction.\n * @param request.from - The sender of the transaction.\n * @param request.to - The recipient of the transaction.\n * @param request.value - The value of the transaction.\n * @param request.data - The data of the transaction.\n * @param options - Additional options.\n * @param options.blockTime - An optional block time to simulate the transaction at.\n * @returns The simulation data.\n */\nexport async function getSimulationData(\n  request: GetSimulationDataRequest,\n  options: GetSimulationDataOptions = {},\n): Promise<SimulationData> {\n  const { chainId, from, to, value, data } = request;\n  const { blockTime } = options;\n\n  log('Getting simulation data', request);\n\n  try {\n    const response = await simulateTransactions(chainId, {\n      transactions: [\n        {\n          data,\n          from,\n          maxFeePerGas: '0x0',\n          maxPriorityFeePerGas: '0x0',\n          to,\n          value,\n        },\n      ],\n      withCallTrace: true,\n      withLogs: true,\n      ...(blockTime && {\n        blockOverrides: {\n          time: toHex(blockTime),\n        },\n      }),\n    });\n\n    const transactionError = response.transactions?.[0]?.error;\n\n    if (transactionError) {\n      throw new SimulationError(transactionError);\n    }\n\n    const nativeBalanceChange = getNativeBalanceChange(request.from, response);\n    const events = getEvents(response);\n\n    log('Parsed events', events);\n\n    const tokenBalanceChanges = await getTokenBalanceChanges(\n      request,\n      events,\n      options,\n    );\n\n    return {\n      nativeBalanceChange,\n      tokenBalanceChanges,\n    };\n  } catch (error) {\n    log('Failed to get simulation data', error, request);\n\n    let simulationError = error as SimulationError;\n\n    if (\n      REVERTED_ERRORS.some((revertErrorMessage) =>\n        simulationError.message?.includes(revertErrorMessage),\n      )\n    ) {\n      simulationError = new SimulationRevertedError();\n    }\n\n    const { code, message } = simulationError;\n\n    return {\n      tokenBalanceChanges: [],\n      error: {\n        code,\n        message,\n      },\n    };\n  }\n}\n\n/**\n * Extract the native balance change from a simulation response.\n * @param userAddress - The user's account address.\n * @param response - The simulation response.\n * @returns The native balance change or undefined if unchanged.\n */\nfunction getNativeBalanceChange(\n  userAddress: Hex,\n  response: SimulationResponse,\n): SimulationBalanceChange | undefined {\n  const transactionResponse = response.transactions[0];\n\n  /* istanbul ignore next */\n  if (!transactionResponse) {\n    return undefined;\n  }\n\n  const { stateDiff } = transactionResponse;\n  const previousBalance = stateDiff?.pre?.[userAddress]?.balance;\n  const newBalance = stateDiff?.post?.[userAddress]?.balance;\n\n  if (!previousBalance || !newBalance) {\n    return undefined;\n  }\n\n  return getSimulationBalanceChange(previousBalance, newBalance);\n}\n\n/**\n * Extract events from a simulation response.\n * @param response - The simulation response.\n * @returns The parsed events.\n */\nexport function getEvents(response: SimulationResponse): ParsedEvent[] {\n  /* istanbul ignore next */\n  const logs = extractLogs(\n    response.transactions[0]?.callTrace ?? ({} as SimulationResponseCallTrace),\n  );\n\n  log('Extracted logs', logs);\n\n  const interfaces = getContractInterfaces();\n\n  return logs\n    .map((currentLog) => {\n      const event = parseLog(currentLog, interfaces);\n\n      if (!event) {\n        log('Failed to parse log', currentLog);\n        return undefined;\n      }\n\n      /* istanbul ignore next */\n      const inputs = event.abi.find((e) => e.name === event.name)?.inputs;\n\n      /* istanbul ignore if */\n      if (!inputs) {\n        log('Failed to find inputs for event', event);\n        return undefined;\n      }\n\n      if (!SUPPORTED_EVENTS.includes(event.name)) {\n        log('Ignoring unsupported event', event.name, event);\n        return undefined;\n      }\n\n      log('Normalizing event args', event.name, event);\n\n      const args = normalizeEventArgs(event.args, inputs);\n\n      return {\n        contractAddress: currentLog.address,\n        tokenStandard: event.standard,\n        name: event.name,\n        args,\n        abi: event.abi,\n      };\n    })\n    .filter((e) => e !== undefined) as ParsedEvent[];\n}\n\n/**\n * Normalize event arguments using ABI input definitions.\n * @param args - The raw event arguments.\n * @param abiInputs - The ABI input definitions.\n * @returns The normalized event arguments.\n */\nfunction normalizeEventArgs(\n  args: Result,\n  abiInputs: { name: string }[],\n): Record<string, Hex | Hex[]> {\n  return args.reduce((result, arg, index) => {\n    const name = abiInputs[index].name.replace('_', '');\n    const value = normalizeEventArgValue(arg);\n\n    result[name] = value;\n\n    return result;\n  }, {});\n}\n\n/**\n * Normalize an event argument value.\n * @param value - The event argument value.\n * @returns The normalized event argument value.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalizeEventArgValue(value: any): any {\n  if (Array.isArray(value)) {\n    return value.map(normalizeEventArgValue);\n  }\n\n  let normalizedValue = value;\n\n  normalizedValue = normalizedValue.toHexString?.() ?? normalizedValue;\n  normalizedValue = normalizedValue.toLowerCase?.() ?? normalizedValue;\n\n  return normalizedValue;\n}\n\n/**\n * Generate token balance changes from parsed events.\n * @param request - The transaction that was simulated.\n * @param events - The parsed events.\n * @param options - Additional options.\n * @param options.blockTime - An optional block time to simulate the transaction at.\n * @returns An array of token balance changes.\n */\nasync function getTokenBalanceChanges(\n  request: GetSimulationDataRequest,\n  events: ParsedEvent[],\n  options: GetSimulationDataOptions,\n): Promise<SimulationTokenBalanceChange[]> {\n  const { blockTime } = options;\n  const balanceTxs = getTokenBalanceTransactions(request, events);\n\n  log('Generated balance transactions', [...balanceTxs.after.values()]);\n\n  const transactions = [\n    ...balanceTxs.before.values(),\n    request,\n    ...balanceTxs.after.values(),\n  ];\n\n  if (transactions.length === 1) {\n    return [];\n  }\n\n  const response = await simulateTransactions(request.chainId as Hex, {\n    transactions,\n    ...(blockTime && {\n      blockOverrides: {\n        time: toHex(blockTime),\n      },\n    }),\n  });\n\n  log('Balance simulation response', response);\n\n  if (response.transactions.length !== transactions.length) {\n    throw new SimulationInvalidResponseError();\n  }\n\n  let prevBalanceTxIndex = 0;\n  return [...balanceTxs.after.keys()]\n    .map((token, index) => {\n      const previousBalanceCheckSkipped = !balanceTxs.before.get(token);\n      const previousBalance = previousBalanceCheckSkipped\n        ? '0x0'\n        : getAmountFromBalanceTransactionResult(\n            request.from,\n            token,\n            // eslint-disable-next-line no-plusplus\n            response.transactions[prevBalanceTxIndex++],\n          );\n\n      const newBalance = getAmountFromBalanceTransactionResult(\n        request.from,\n        token,\n        response.transactions[index + balanceTxs.before.size + 1],\n      );\n\n      const balanceChange = getSimulationBalanceChange(\n        previousBalance,\n        newBalance,\n      );\n\n      if (!balanceChange) {\n        return undefined;\n      }\n\n      return {\n        ...token,\n        ...balanceChange,\n      };\n    })\n    .filter((change) => change !== undefined) as SimulationTokenBalanceChange[];\n}\n\n/**\n * Generate transactions to check token balances.\n * @param request - The transaction that was simulated.\n * @param events - The parsed events.\n * @returns A map of token balance transactions keyed by token.\n */\nfunction getTokenBalanceTransactions(\n  request: GetSimulationDataRequest,\n  events: ParsedEvent[],\n): {\n  before: BalanceTransactionMap;\n  after: BalanceTransactionMap;\n} {\n  const tokenKeys = new Set();\n  const before = new Map();\n  const after = new Map();\n\n  const userEvents = events.filter((event) =>\n    [event.args.from, event.args.to].includes(request.from),\n  );\n\n  log('Filtered user events', userEvents);\n\n  for (const event of userEvents) {\n    const tokenIds = getEventTokenIds(event);\n\n    log('Extracted token IDs', tokenIds);\n\n    for (const tokenId of tokenIds) {\n      const simulationToken: SimulationToken = {\n        address: event.contractAddress,\n        standard: event.tokenStandard,\n        id: tokenId,\n      };\n\n      const tokenKey = JSON.stringify(simulationToken);\n\n      if (tokenKeys.has(tokenKey)) {\n        log(\n          'Ignoring additional event with same contract and token ID',\n          simulationToken,\n        );\n        continue;\n      }\n\n      tokenKeys.add(tokenKey);\n\n      const data = getBalanceTransactionData(\n        event.tokenStandard,\n        request.from,\n        tokenId,\n      );\n\n      const transaction: SimulationRequestTransaction = {\n        from: request.from,\n        to: event.contractAddress,\n        data,\n      };\n\n      if (skipPriorBalanceCheck(event)) {\n        after.set(simulationToken, transaction);\n      } else {\n        before.set(simulationToken, transaction);\n        after.set(simulationToken, transaction);\n      }\n    }\n  }\n\n  return { before, after };\n}\n\n/**\n * Check if an event needs to check the previous balance.\n * @param event - The parsed event.\n * @returns True if the prior balance check should be skipped.\n */\nfunction skipPriorBalanceCheck(event: ParsedEvent): boolean {\n  // In the case of an NFT mint, we cannot check the NFT owner before the mint\n  // as the balance check transaction would revert.\n  return (\n    event.name === 'Transfer' &&\n    event.tokenStandard === SimulationTokenStandard.erc721 &&\n    parseInt(event.args.from as string, 16) === 0\n  );\n}\n\n/**\n * Extract token IDs from a parsed event.\n * @param event - The parsed event.\n * @returns An array of token IDs.\n */\nfunction getEventTokenIds(event: ParsedEvent): (Hex | undefined)[] {\n  if (event.tokenStandard === SimulationTokenStandard.erc721) {\n    return [event.args.tokenId as Hex];\n  }\n\n  if (\n    event.tokenStandard === SimulationTokenStandard.erc1155 &&\n    event.name === 'TransferSingle'\n  ) {\n    return [event.args.id as Hex];\n  }\n\n  if (\n    event.tokenStandard === SimulationTokenStandard.erc1155 &&\n    event.name === 'TransferBatch'\n  ) {\n    return event.args.ids as Hex[];\n  }\n\n  // ERC-20 does not have a token ID so default to undefined.\n  return [undefined];\n}\n\n/**\n * Get the interface for a token standard.\n * @param tokenStandard - The token standard.\n * @returns The interface for the token standard.\n */\nfunction getContractInterface(\n  tokenStandard: SimulationTokenStandard,\n): Interface {\n  switch (tokenStandard) {\n    case SimulationTokenStandard.erc721:\n      return new Interface(abiERC721);\n    case SimulationTokenStandard.erc1155:\n      return new Interface(abiERC1155);\n    default:\n      return new Interface(abiERC20);\n  }\n}\n\n/**\n * Extract the value from a balance transaction response using the correct ABI.\n * @param from - The address to check the balance of.\n * @param token - The token to check the balance of.\n * @param response - The balance transaction response.\n * @returns The value of the balance transaction as Hex.\n */\nfunction getAmountFromBalanceTransactionResult(\n  from: Hex,\n  token: SimulationToken,\n  response: SimulationResponseTransaction,\n): Hex {\n  const contract = getContractInterface(token.standard);\n\n  try {\n    if (token.standard === SimulationTokenStandard.erc721) {\n      const result = contract.decodeFunctionResult('ownerOf', response.return);\n      const owner = result[0];\n      return owner.toLowerCase() === from.toLowerCase() ? '0x1' : '0x0';\n    }\n\n    const result = contract.decodeFunctionResult('balanceOf', response.return);\n    return toHex(result[0]);\n  } catch (error) {\n    log('Failed to decode balance transaction', error, { token, response });\n    throw new SimulationError(\n      `Failed to decode balance transaction for token ${\n        token.address\n      }: ${String(error)}`,\n    );\n  }\n}\n\n/**\n * Generate the balance transaction data for a token.\n * @param tokenStandard - The token standard.\n * @param from - The address to check the balance of.\n * @param tokenId - The token ID to check the balance of.\n * @returns The balance transaction data.\n */\nfunction getBalanceTransactionData(\n  tokenStandard: SimulationTokenStandard,\n  from: Hex,\n  tokenId?: Hex,\n): Hex {\n  const contract = getContractInterface(tokenStandard);\n  switch (tokenStandard) {\n    case SimulationTokenStandard.erc721:\n      return contract.encodeFunctionData('ownerOf', [tokenId]) as Hex;\n\n    case SimulationTokenStandard.erc1155:\n      return contract.encodeFunctionData('balanceOf', [from, tokenId]) as Hex;\n\n    default:\n      return contract.encodeFunctionData('balanceOf', [from]) as Hex;\n  }\n}\n\n/**\n * Parse a raw event log using known ABIs.\n * @param eventLog - The raw event log.\n * @param interfaces - The contract interfaces.\n * @returns The parsed event log or undefined if it could not be parsed.\n */\nfunction parseLog(\n  eventLog: SimulationResponseLog,\n  interfaces: Map<SupportedToken, Interface>,\n):\n  | (LogDescription & { abi: ABI; standard: SimulationTokenStandard })\n  | undefined {\n  const supportedTokens = Object.values(SupportedToken);\n\n  for (const token of supportedTokens) {\n    try {\n      const contractInterface = interfaces.get(token) as Interface;\n      const { abi, standard } = SUPPORTED_TOKEN_ABIS[token];\n\n      return {\n        ...contractInterface.parseLog(eventLog),\n        abi,\n        standard,\n      };\n    } catch (e) {\n      continue;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Extract all logs from a call trace tree.\n * @param call - The root call trace.\n * @returns An array of logs.\n */\nfunction extractLogs(\n  call: SimulationResponseCallTrace,\n): SimulationResponseLog[] {\n  /* istanbul ignore next */\n  const logs = call.logs ?? [];\n\n  /* istanbul ignore next */\n  const nestedCalls = call.calls ?? [];\n\n  return [\n    ...logs,\n    ...nestedCalls.map((nestedCall) => extractLogs(nestedCall)).flat(),\n  ];\n}\n\n/**\n * Generate balance change data from previous and new balances.\n * @param previousBalance - The previous balance.\n * @param newBalance - The new balance.\n * @returns The balance change data or undefined if unchanged.\n */\nfunction getSimulationBalanceChange(\n  previousBalance: Hex,\n  newBalance: Hex,\n): SimulationBalanceChange | undefined {\n  const differenceBN = hexToBN(newBalance).sub(hexToBN(previousBalance));\n  const isDecrease = differenceBN.isNeg();\n  const difference = toHex(differenceBN.abs());\n\n  if (differenceBN.isZero()) {\n    log('Balance change is zero');\n    return undefined;\n  }\n\n  return {\n    previousBalance,\n    newBalance,\n    difference,\n    isDecrease,\n  };\n}\n\n/**\n * Get the contract interfaces for all supported tokens.\n * @returns A map of supported tokens to their contract interfaces.\n */\nfunction getContractInterfaces(): Map<SupportedToken, Interface> {\n  const supportedTokens = Object.values(SupportedToken);\n\n  return new Map(\n    supportedTokens.map((tokenType) => {\n      const { abi } = SUPPORTED_TOKEN_ABIS[tokenType];\n      const contractInterface = new Interface(abi);\n      return [tokenType, contractInterface];\n    }),\n  );\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"simulation.mjs","sourceRoot":"","sources":["../../src/utils/simulation.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Fragment, LogDescription, Result } from '@ethersproject/abi';\nimport { Interface } from '@ethersproject/abi';\nimport { hexToBN, toHex } from '@metamask/controller-utils';\nimport { abiERC20, abiERC721, abiERC1155 } from '@metamask/metamask-eth-abis';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\n\nimport {\n  ABI_SIMULATION_ERC20_WRAPPED,\n  ABI_SIMULATION_ERC721_LEGACY,\n} from '../constants';\nimport {\n  SimulationError,\n  SimulationInvalidResponseError,\n  SimulationRevertedError,\n} from '../errors';\nimport { projectLogger } from '../logger';\nimport type {\n  SimulationBalanceChange,\n  SimulationData,\n  SimulationTokenBalanceChange,\n  SimulationToken,\n} from '../types';\nimport { SimulationTokenStandard } from '../types';\nimport { simulateTransactions } from './simulation-api';\nimport type {\n  SimulationResponseLog,\n  SimulationRequestTransaction,\n  SimulationResponse,\n  SimulationResponseCallTrace,\n  SimulationResponseTransaction,\n} from './simulation-api';\n\nexport enum SupportedToken {\n  ERC20 = 'erc20',\n  ERC721 = 'erc721',\n  ERC1155 = 'erc1155',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ERC20_WRAPPED = 'erc20Wrapped',\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ERC721_LEGACY = 'erc721Legacy',\n}\n\ntype ABI = Fragment[];\n\nexport type GetSimulationDataRequest = {\n  chainId: Hex;\n  from: Hex;\n  to?: Hex;\n  value?: Hex;\n  data?: Hex;\n};\n\ntype ParsedEvent = {\n  contractAddress: Hex;\n  tokenStandard: SimulationTokenStandard;\n  name: string;\n  args: Record<string, Hex | Hex[]>;\n  abi: ABI;\n};\n\nconst log = createModuleLogger(projectLogger, 'simulation');\n\nconst SUPPORTED_EVENTS = [\n  'Transfer',\n  'TransferSingle',\n  'TransferBatch',\n  'Deposit',\n  'Withdrawal',\n];\n\nconst SUPPORTED_TOKEN_ABIS = {\n  [SupportedToken.ERC20]: {\n    abi: abiERC20,\n    standard: SimulationTokenStandard.erc20,\n  },\n  [SupportedToken.ERC721]: {\n    abi: abiERC721,\n    standard: SimulationTokenStandard.erc721,\n  },\n  [SupportedToken.ERC1155]: {\n    abi: abiERC1155,\n    standard: SimulationTokenStandard.erc1155,\n  },\n  [SupportedToken.ERC20_WRAPPED]: {\n    abi: ABI_SIMULATION_ERC20_WRAPPED,\n    standard: SimulationTokenStandard.erc20,\n  },\n  [SupportedToken.ERC721_LEGACY]: {\n    abi: ABI_SIMULATION_ERC721_LEGACY,\n    standard: SimulationTokenStandard.erc721,\n  },\n};\n\nconst REVERTED_ERRORS = ['execution reverted', 'insufficient funds for gas'];\n\ntype BalanceTransactionMap = Map<SimulationToken, SimulationRequestTransaction>;\n\n/**\n * Generate simulation data for a transaction.\n * @param request - The transaction to simulate.\n * @param request.chainId - The chain ID of the transaction.\n * @param request.from - The sender of the transaction.\n * @param request.to - The recipient of the transaction.\n * @param request.value - The value of the transaction.\n * @param request.data - The data of the transaction.\n * @returns The simulation data.\n */\nexport async function getSimulationData(\n  request: GetSimulationDataRequest,\n): Promise<SimulationData> {\n  const { chainId, from, to, value, data } = request;\n\n  log('Getting simulation data', request);\n\n  try {\n    const response = await simulateTransactions(chainId, {\n      transactions: [\n        {\n          data,\n          from,\n          maxFeePerGas: '0x0',\n          maxPriorityFeePerGas: '0x0',\n          to,\n          value,\n        },\n      ],\n      withCallTrace: true,\n      withLogs: true,\n    });\n\n    const transactionError = response.transactions?.[0]?.error;\n\n    if (transactionError) {\n      throw new SimulationError(transactionError);\n    }\n\n    const nativeBalanceChange = getNativeBalanceChange(request.from, response);\n    const events = getEvents(response);\n\n    log('Parsed events', events);\n\n    const tokenBalanceChanges = await getTokenBalanceChanges(request, events);\n\n    return {\n      nativeBalanceChange,\n      tokenBalanceChanges,\n    };\n  } catch (error) {\n    log('Failed to get simulation data', error, request);\n\n    let simulationError = error as SimulationError;\n\n    if (\n      REVERTED_ERRORS.some((revertErrorMessage) =>\n        simulationError.message?.includes(revertErrorMessage),\n      )\n    ) {\n      simulationError = new SimulationRevertedError();\n    }\n\n    const { code, message } = simulationError;\n\n    return {\n      tokenBalanceChanges: [],\n      error: {\n        code,\n        message,\n      },\n    };\n  }\n}\n\n/**\n * Extract the native balance change from a simulation response.\n * @param userAddress - The user's account address.\n * @param response - The simulation response.\n * @returns The native balance change or undefined if unchanged.\n */\nfunction getNativeBalanceChange(\n  userAddress: Hex,\n  response: SimulationResponse,\n): SimulationBalanceChange | undefined {\n  const transactionResponse = response.transactions[0];\n\n  /* istanbul ignore next */\n  if (!transactionResponse) {\n    return undefined;\n  }\n\n  const { stateDiff } = transactionResponse;\n  const previousBalance = stateDiff?.pre?.[userAddress]?.balance;\n  const newBalance = stateDiff?.post?.[userAddress]?.balance;\n\n  if (!previousBalance || !newBalance) {\n    return undefined;\n  }\n\n  return getSimulationBalanceChange(previousBalance, newBalance);\n}\n\n/**\n * Extract events from a simulation response.\n * @param response - The simulation response.\n * @returns The parsed events.\n */\nexport function getEvents(response: SimulationResponse): ParsedEvent[] {\n  /* istanbul ignore next */\n  const logs = extractLogs(\n    response.transactions[0]?.callTrace ?? ({} as SimulationResponseCallTrace),\n  );\n\n  log('Extracted logs', logs);\n\n  const interfaces = getContractInterfaces();\n\n  return logs\n    .map((currentLog) => {\n      const event = parseLog(currentLog, interfaces);\n\n      if (!event) {\n        log('Failed to parse log', currentLog);\n        return undefined;\n      }\n\n      /* istanbul ignore next */\n      const inputs = event.abi.find((e) => e.name === event.name)?.inputs;\n\n      /* istanbul ignore if */\n      if (!inputs) {\n        log('Failed to find inputs for event', event);\n        return undefined;\n      }\n\n      if (!SUPPORTED_EVENTS.includes(event.name)) {\n        log('Ignoring unsupported event', event.name, event);\n        return undefined;\n      }\n\n      log('Normalizing event args', event.name, event);\n\n      const args = normalizeEventArgs(event.args, inputs);\n\n      return {\n        contractAddress: currentLog.address,\n        tokenStandard: event.standard,\n        name: event.name,\n        args,\n        abi: event.abi,\n      };\n    })\n    .filter((e) => e !== undefined) as ParsedEvent[];\n}\n\n/**\n * Normalize event arguments using ABI input definitions.\n * @param args - The raw event arguments.\n * @param abiInputs - The ABI input definitions.\n * @returns The normalized event arguments.\n */\nfunction normalizeEventArgs(\n  args: Result,\n  abiInputs: { name: string }[],\n): Record<string, Hex | Hex[]> {\n  return args.reduce((result, arg, index) => {\n    const name = abiInputs[index].name.replace('_', '');\n    const value = normalizeEventArgValue(arg);\n\n    result[name] = value;\n\n    return result;\n  }, {});\n}\n\n/**\n * Normalize an event argument value.\n * @param value - The event argument value.\n * @returns The normalized event argument value.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalizeEventArgValue(value: any): any {\n  if (Array.isArray(value)) {\n    return value.map(normalizeEventArgValue);\n  }\n\n  let normalizedValue = value;\n\n  normalizedValue = normalizedValue.toHexString?.() ?? normalizedValue;\n  normalizedValue = normalizedValue.toLowerCase?.() ?? normalizedValue;\n\n  return normalizedValue;\n}\n\n/**\n * Generate token balance changes from parsed events.\n * @param request - The transaction that was simulated.\n * @param events - The parsed events.\n * @returns An array of token balance changes.\n */\nasync function getTokenBalanceChanges(\n  request: GetSimulationDataRequest,\n  events: ParsedEvent[],\n): Promise<SimulationTokenBalanceChange[]> {\n  const balanceTxs = getTokenBalanceTransactions(request, events);\n\n  log('Generated balance transactions', [...balanceTxs.after.values()]);\n\n  const transactions = [\n    ...balanceTxs.before.values(),\n    request,\n    ...balanceTxs.after.values(),\n  ];\n\n  if (transactions.length === 1) {\n    return [];\n  }\n\n  const response = await simulateTransactions(request.chainId as Hex, {\n    transactions,\n  });\n\n  log('Balance simulation response', response);\n\n  if (response.transactions.length !== transactions.length) {\n    throw new SimulationInvalidResponseError();\n  }\n\n  let prevBalanceTxIndex = 0;\n  return [...balanceTxs.after.keys()]\n    .map((token, index) => {\n      const previousBalanceCheckSkipped = !balanceTxs.before.get(token);\n      const previousBalance = previousBalanceCheckSkipped\n        ? '0x0'\n        : getAmountFromBalanceTransactionResult(\n            request.from,\n            token,\n            // eslint-disable-next-line no-plusplus\n            response.transactions[prevBalanceTxIndex++],\n          );\n\n      const newBalance = getAmountFromBalanceTransactionResult(\n        request.from,\n        token,\n        response.transactions[index + balanceTxs.before.size + 1],\n      );\n\n      const balanceChange = getSimulationBalanceChange(\n        previousBalance,\n        newBalance,\n      );\n\n      if (!balanceChange) {\n        return undefined;\n      }\n\n      return {\n        ...token,\n        ...balanceChange,\n      };\n    })\n    .filter((change) => change !== undefined) as SimulationTokenBalanceChange[];\n}\n\n/**\n * Generate transactions to check token balances.\n * @param request - The transaction that was simulated.\n * @param events - The parsed events.\n * @returns A map of token balance transactions keyed by token.\n */\nfunction getTokenBalanceTransactions(\n  request: GetSimulationDataRequest,\n  events: ParsedEvent[],\n): {\n  before: BalanceTransactionMap;\n  after: BalanceTransactionMap;\n} {\n  const tokenKeys = new Set();\n  const before = new Map();\n  const after = new Map();\n\n  const userEvents = events.filter((event) =>\n    [event.args.from, event.args.to].includes(request.from),\n  );\n\n  log('Filtered user events', userEvents);\n\n  for (const event of userEvents) {\n    const tokenIds = getEventTokenIds(event);\n\n    log('Extracted token IDs', tokenIds);\n\n    for (const tokenId of tokenIds) {\n      const simulationToken: SimulationToken = {\n        address: event.contractAddress,\n        standard: event.tokenStandard,\n        id: tokenId,\n      };\n\n      const tokenKey = JSON.stringify(simulationToken);\n\n      if (tokenKeys.has(tokenKey)) {\n        log(\n          'Ignoring additional event with same contract and token ID',\n          simulationToken,\n        );\n        continue;\n      }\n\n      tokenKeys.add(tokenKey);\n\n      const data = getBalanceTransactionData(\n        event.tokenStandard,\n        request.from,\n        tokenId,\n      );\n\n      const transaction: SimulationRequestTransaction = {\n        from: request.from,\n        to: event.contractAddress,\n        data,\n      };\n\n      if (skipPriorBalanceCheck(event)) {\n        after.set(simulationToken, transaction);\n      } else {\n        before.set(simulationToken, transaction);\n        after.set(simulationToken, transaction);\n      }\n    }\n  }\n\n  return { before, after };\n}\n\n/**\n * Check if an event needs to check the previous balance.\n * @param event - The parsed event.\n * @returns True if the prior balance check should be skipped.\n */\nfunction skipPriorBalanceCheck(event: ParsedEvent): boolean {\n  // In the case of an NFT mint, we cannot check the NFT owner before the mint\n  // as the balance check transaction would revert.\n  return (\n    event.name === 'Transfer' &&\n    event.tokenStandard === SimulationTokenStandard.erc721 &&\n    parseInt(event.args.from as string, 16) === 0\n  );\n}\n\n/**\n * Extract token IDs from a parsed event.\n * @param event - The parsed event.\n * @returns An array of token IDs.\n */\nfunction getEventTokenIds(event: ParsedEvent): (Hex | undefined)[] {\n  if (event.tokenStandard === SimulationTokenStandard.erc721) {\n    return [event.args.tokenId as Hex];\n  }\n\n  if (\n    event.tokenStandard === SimulationTokenStandard.erc1155 &&\n    event.name === 'TransferSingle'\n  ) {\n    return [event.args.id as Hex];\n  }\n\n  if (\n    event.tokenStandard === SimulationTokenStandard.erc1155 &&\n    event.name === 'TransferBatch'\n  ) {\n    return event.args.ids as Hex[];\n  }\n\n  // ERC-20 does not have a token ID so default to undefined.\n  return [undefined];\n}\n\n/**\n * Get the interface for a token standard.\n * @param tokenStandard - The token standard.\n * @returns The interface for the token standard.\n */\nfunction getContractInterface(\n  tokenStandard: SimulationTokenStandard,\n): Interface {\n  switch (tokenStandard) {\n    case SimulationTokenStandard.erc721:\n      return new Interface(abiERC721);\n    case SimulationTokenStandard.erc1155:\n      return new Interface(abiERC1155);\n    default:\n      return new Interface(abiERC20);\n  }\n}\n\n/**\n * Extract the value from a balance transaction response using the correct ABI.\n * @param from - The address to check the balance of.\n * @param token - The token to check the balance of.\n * @param response - The balance transaction response.\n * @returns The value of the balance transaction as Hex.\n */\nfunction getAmountFromBalanceTransactionResult(\n  from: Hex,\n  token: SimulationToken,\n  response: SimulationResponseTransaction,\n): Hex {\n  const contract = getContractInterface(token.standard);\n\n  try {\n    if (token.standard === SimulationTokenStandard.erc721) {\n      const result = contract.decodeFunctionResult('ownerOf', response.return);\n      const owner = result[0];\n      return owner.toLowerCase() === from.toLowerCase() ? '0x1' : '0x0';\n    }\n\n    const result = contract.decodeFunctionResult('balanceOf', response.return);\n    return toHex(result[0]);\n  } catch (error) {\n    log('Failed to decode balance transaction', error, { token, response });\n    throw new SimulationError(\n      `Failed to decode balance transaction for token ${\n        token.address\n      }: ${String(error)}`,\n    );\n  }\n}\n\n/**\n * Generate the balance transaction data for a token.\n * @param tokenStandard - The token standard.\n * @param from - The address to check the balance of.\n * @param tokenId - The token ID to check the balance of.\n * @returns The balance transaction data.\n */\nfunction getBalanceTransactionData(\n  tokenStandard: SimulationTokenStandard,\n  from: Hex,\n  tokenId?: Hex,\n): Hex {\n  const contract = getContractInterface(tokenStandard);\n  switch (tokenStandard) {\n    case SimulationTokenStandard.erc721:\n      return contract.encodeFunctionData('ownerOf', [tokenId]) as Hex;\n\n    case SimulationTokenStandard.erc1155:\n      return contract.encodeFunctionData('balanceOf', [from, tokenId]) as Hex;\n\n    default:\n      return contract.encodeFunctionData('balanceOf', [from]) as Hex;\n  }\n}\n\n/**\n * Parse a raw event log using known ABIs.\n * @param eventLog - The raw event log.\n * @param interfaces - The contract interfaces.\n * @returns The parsed event log or undefined if it could not be parsed.\n */\nfunction parseLog(\n  eventLog: SimulationResponseLog,\n  interfaces: Map<SupportedToken, Interface>,\n):\n  | (LogDescription & { abi: ABI; standard: SimulationTokenStandard })\n  | undefined {\n  const supportedTokens = Object.values(SupportedToken);\n\n  for (const token of supportedTokens) {\n    try {\n      const contractInterface = interfaces.get(token) as Interface;\n      const { abi, standard } = SUPPORTED_TOKEN_ABIS[token];\n\n      return {\n        ...contractInterface.parseLog(eventLog),\n        abi,\n        standard,\n      };\n    } catch (e) {\n      continue;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Extract all logs from a call trace tree.\n * @param call - The root call trace.\n * @returns An array of logs.\n */\nfunction extractLogs(\n  call: SimulationResponseCallTrace,\n): SimulationResponseLog[] {\n  /* istanbul ignore next */\n  const logs = call.logs ?? [];\n\n  /* istanbul ignore next */\n  const nestedCalls = call.calls ?? [];\n\n  return [\n    ...logs,\n    ...nestedCalls.map((nestedCall) => extractLogs(nestedCall)).flat(),\n  ];\n}\n\n/**\n * Generate balance change data from previous and new balances.\n * @param previousBalance - The previous balance.\n * @param newBalance - The new balance.\n * @returns The balance change data or undefined if unchanged.\n */\nfunction getSimulationBalanceChange(\n  previousBalance: Hex,\n  newBalance: Hex,\n): SimulationBalanceChange | undefined {\n  const differenceBN = hexToBN(newBalance).sub(hexToBN(previousBalance));\n  const isDecrease = differenceBN.isNeg();\n  const difference = toHex(differenceBN.abs());\n\n  if (differenceBN.isZero()) {\n    log('Balance change is zero');\n    return undefined;\n  }\n\n  return {\n    previousBalance,\n    newBalance,\n    difference,\n    isDecrease,\n  };\n}\n\n/**\n * Get the contract interfaces for all supported tokens.\n * @returns A map of supported tokens to their contract interfaces.\n */\nfunction getContractInterfaces(): Map<SupportedToken, Interface> {\n  const supportedTokens = Object.values(SupportedToken);\n\n  return new Map(\n    supportedTokens.map((tokenType) => {\n      const { abi } = SUPPORTED_TOKEN_ABIS[tokenType];\n      const contractInterface = new Interface(abi);\n      return [tokenType, contractInterface];\n    }),\n  );\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/utils.cjs b/dist/utils/utils.cjs
index fdff8c79859a0c3206cc29c166c873280c6dffa3..890f75f3856c28f63472c13202302df45f30672d 100644
--- a/dist/utils/utils.cjs
+++ b/dist/utils/utils.cjs
@@ -1,11 +1,7 @@
 "use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.getPercentageChange = exports.padHexToEvenLength = exports.normalizeGasFeeValues = exports.normalizeTxError = exports.validateIfTransactionUnapproved = exports.validateGasValues = exports.isEIP1559Transaction = exports.normalizeTransactionParams = exports.ESTIMATE_GAS_ERROR = void 0;
+exports.padHexToEvenLength = exports.normalizeGasFeeValues = exports.normalizeTxError = exports.validateIfTransactionUnapproved = exports.validateGasValues = exports.isEIP1559Transaction = exports.normalizeTransactionParams = exports.ESTIMATE_GAS_ERROR = void 0;
 const utils_1 = require("@metamask/utils");
-const bn_js_1 = __importDefault(require("bn.js"));
 const types_1 = require("../types.cjs");
 exports.ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';
 // TODO: Replace `any` with type
@@ -147,26 +143,4 @@ function padHexToEvenLength(hex) {
     return prefix + evenData;
 }
 exports.padHexToEvenLength = padHexToEvenLength;
-/**
- * Calculate the absolute percentage change between two values.
- *
- * @param originalValue - The first value.
- * @param newValue - The second value.
- * @returns The percentage change from the first value to the second value.
- * If the original value is zero and the new value is not, returns 100.
- */
-function getPercentageChange(originalValue, newValue) {
-    const precisionFactor = new bn_js_1.default(10).pow(new bn_js_1.default(18));
-    const originalValuePrecision = originalValue.mul(precisionFactor);
-    const newValuePrecision = newValue.mul(precisionFactor);
-    const difference = newValuePrecision.sub(originalValuePrecision);
-    if (difference.isZero()) {
-        return 0;
-    }
-    if (originalValuePrecision.isZero() && !newValuePrecision.isZero()) {
-        return 100;
-    }
-    return difference.muln(100).div(originalValuePrecision).abs().toNumber();
-}
-exports.getPercentageChange = getPercentageChange;
 //# sourceMappingURL=utils.cjs.map
\ No newline at end of file
diff --git a/dist/utils/utils.cjs.map b/dist/utils/utils.cjs.map
index 6a52b4d0f3d6895a491e887947497526790660ba..851d956835d02572d068550e0ad2da761d3f8e50 100644
--- a/dist/utils/utils.cjs.map
+++ b/dist/utils/utils.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"utils.cjs","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AuthorizationList } from '@ethereumjs/common';\nimport {\n  add0x,\n  getKnownPropertyNames,\n  isStrictHexString,\n} from '@metamask/utils';\nimport type { Json } from '@metamask/utils';\nimport BN from 'bn.js';\n\nimport { TransactionStatus } from '../types';\nimport type {\n  TransactionParams,\n  TransactionMeta,\n  TransactionError,\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n} from '../types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst NORMALIZERS: { [param in keyof TransactionParams]: any } = {\n  authorizationList: (authorizationList?: AuthorizationList) =>\n    authorizationList,\n  data: (data: string) => add0x(padHexToEvenLength(data)),\n  from: (from: string) => add0x(from).toLowerCase(),\n  gas: (gas: string) => add0x(gas),\n  gasLimit: (gas: string) => add0x(gas),\n  gasPrice: (gasPrice: string) => add0x(gasPrice),\n  nonce: (nonce: string) => add0x(nonce),\n  to: (to: string) => add0x(to).toLowerCase(),\n  value: (value: string) => add0x(value),\n  maxFeePerGas: (maxFeePerGas: string) => add0x(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    add0x(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    add0x(maxPriorityFeePerGas),\n  type: (type: string) => add0x(type),\n};\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param txParams - The transaction params to normalize.\n * @returns Normalized transaction params.\n */\nexport function normalizeTransactionParams(txParams: TransactionParams) {\n  const normalizedTxParams: TransactionParams = { from: '' };\n\n  for (const key of getKnownPropertyNames(NORMALIZERS)) {\n    if (txParams[key]) {\n      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);\n    }\n  }\n\n  if (!normalizedTxParams.value) {\n    normalizedTxParams.value = '0x0';\n  }\n\n  return normalizedTxParams;\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param txParams - Transaction params object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport function isEIP1559Transaction(txParams: TransactionParams): boolean {\n  const hasOwnProp = (obj: TransactionParams, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(txParams, 'maxFeePerGas') &&\n    hasOwnProp(txParams, 'maxPriorityFeePerGas')\n  );\n}\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isStrictHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\n/**\n * Validates that a transaction is unapproved.\n * Throws if the transaction is not unapproved.\n *\n * @param transactionMeta - The transaction metadata to check.\n * @param fnName - The name of the function calling this helper.\n */\nexport function validateIfTransactionUnapproved(\n  transactionMeta: TransactionMeta | undefined,\n  fnName: string,\n) {\n  if (transactionMeta?.status !== TransactionStatus.unapproved) {\n    throw new Error(\n      `TransactionsController: Can only call ${fnName} on an unapproved transaction.\\n      Current tx status: ${transactionMeta?.status}`,\n    );\n  }\n}\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param error - The error to be normalize.\n * @returns Normalized transaction error.\n */\nexport function normalizeTxError(\n  error: Error & { code?: string; value?: unknown },\n): TransactionError {\n  return {\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    code: error.code,\n    rpc: isJsonCompatible(error.value) ? error.value : undefined,\n  };\n}\n\n/**\n * Normalize an object containing gas fee values.\n *\n * @param gasFeeValues - An object containing gas fee values.\n * @returns An object containing normalized gas fee values.\n */\nexport function normalizeGasFeeValues(\n  gasFeeValues: GasPriceValue | FeeMarketEIP1559Values,\n): GasPriceValue | FeeMarketEIP1559Values {\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const normalize = (value: any) =>\n    typeof value === 'string' ? add0x(value) : value;\n\n  if ('gasPrice' in gasFeeValues) {\n    return {\n      gasPrice: normalize(gasFeeValues.gasPrice),\n    };\n  }\n\n  return {\n    maxFeePerGas: normalize(gasFeeValues.maxFeePerGas),\n    maxPriorityFeePerGas: normalize(gasFeeValues.maxPriorityFeePerGas),\n  };\n}\n\n/**\n * Determines whether the given value can be encoded as JSON.\n *\n * @param value - The value.\n * @returns True if the value is JSON-encodable, false if not.\n */\nfunction isJsonCompatible(value: unknown): value is Json {\n  try {\n    JSON.parse(JSON.stringify(value));\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Ensure a hex string is of even length by adding a leading 0 if necessary.\n * Any existing `0x` prefix is preserved but is not added if missing.\n *\n * @param hex - The hex string to ensure is even.\n * @returns The hex string with an even length.\n */\nexport function padHexToEvenLength(hex: string) {\n  const prefix = hex.toLowerCase().startsWith('0x') ? hex.slice(0, 2) : '';\n  const data = prefix ? hex.slice(2) : hex;\n  const evenData = data.length % 2 === 0 ? data : `0${data}`;\n\n  return prefix + evenData;\n}\n\n/**\n * Calculate the absolute percentage change between two values.\n *\n * @param originalValue - The first value.\n * @param newValue - The second value.\n * @returns The percentage change from the first value to the second value.\n * If the original value is zero and the new value is not, returns 100.\n */\nexport function getPercentageChange(originalValue: BN, newValue: BN): number {\n  const precisionFactor = new BN(10).pow(new BN(18));\n  const originalValuePrecision = originalValue.mul(precisionFactor);\n  const newValuePrecision = newValue.mul(precisionFactor);\n\n  const difference = newValuePrecision.sub(originalValuePrecision);\n\n  if (difference.isZero()) {\n    return 0;\n  }\n\n  if (originalValuePrecision.isZero() && !newValuePrecision.isZero()) {\n    return 100;\n  }\n\n  return difference.muln(100).div(originalValuePrecision).abs().toNumber();\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"utils.cjs","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AuthorizationList } from '@ethereumjs/common';\nimport {\n  add0x,\n  getKnownPropertyNames,\n  isStrictHexString,\n} from '@metamask/utils';\nimport type { Json } from '@metamask/utils';\n\nimport { TransactionStatus } from '../types';\nimport type {\n  TransactionParams,\n  TransactionMeta,\n  TransactionError,\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n} from '../types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst NORMALIZERS: { [param in keyof TransactionParams]: any } = {\n  authorizationList: (authorizationList?: AuthorizationList) =>\n    authorizationList,\n  data: (data: string) => add0x(padHexToEvenLength(data)),\n  from: (from: string) => add0x(from).toLowerCase(),\n  gas: (gas: string) => add0x(gas),\n  gasLimit: (gas: string) => add0x(gas),\n  gasPrice: (gasPrice: string) => add0x(gasPrice),\n  nonce: (nonce: string) => add0x(nonce),\n  to: (to: string) => add0x(to).toLowerCase(),\n  value: (value: string) => add0x(value),\n  maxFeePerGas: (maxFeePerGas: string) => add0x(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    add0x(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    add0x(maxPriorityFeePerGas),\n  type: (type: string) => add0x(type),\n};\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param txParams - The transaction params to normalize.\n * @returns Normalized transaction params.\n */\nexport function normalizeTransactionParams(txParams: TransactionParams) {\n  const normalizedTxParams: TransactionParams = { from: '' };\n\n  for (const key of getKnownPropertyNames(NORMALIZERS)) {\n    if (txParams[key]) {\n      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);\n    }\n  }\n\n  if (!normalizedTxParams.value) {\n    normalizedTxParams.value = '0x0';\n  }\n\n  return normalizedTxParams;\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param txParams - Transaction params object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport function isEIP1559Transaction(txParams: TransactionParams): boolean {\n  const hasOwnProp = (obj: TransactionParams, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(txParams, 'maxFeePerGas') &&\n    hasOwnProp(txParams, 'maxPriorityFeePerGas')\n  );\n}\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isStrictHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\n/**\n * Validates that a transaction is unapproved.\n * Throws if the transaction is not unapproved.\n *\n * @param transactionMeta - The transaction metadata to check.\n * @param fnName - The name of the function calling this helper.\n */\nexport function validateIfTransactionUnapproved(\n  transactionMeta: TransactionMeta | undefined,\n  fnName: string,\n) {\n  if (transactionMeta?.status !== TransactionStatus.unapproved) {\n    throw new Error(\n      `TransactionsController: Can only call ${fnName} on an unapproved transaction.\\n      Current tx status: ${transactionMeta?.status}`,\n    );\n  }\n}\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param error - The error to be normalize.\n * @returns Normalized transaction error.\n */\nexport function normalizeTxError(\n  error: Error & { code?: string; value?: unknown },\n): TransactionError {\n  return {\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    code: error.code,\n    rpc: isJsonCompatible(error.value) ? error.value : undefined,\n  };\n}\n\n/**\n * Normalize an object containing gas fee values.\n *\n * @param gasFeeValues - An object containing gas fee values.\n * @returns An object containing normalized gas fee values.\n */\nexport function normalizeGasFeeValues(\n  gasFeeValues: GasPriceValue | FeeMarketEIP1559Values,\n): GasPriceValue | FeeMarketEIP1559Values {\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const normalize = (value: any) =>\n    typeof value === 'string' ? add0x(value) : value;\n\n  if ('gasPrice' in gasFeeValues) {\n    return {\n      gasPrice: normalize(gasFeeValues.gasPrice),\n    };\n  }\n\n  return {\n    maxFeePerGas: normalize(gasFeeValues.maxFeePerGas),\n    maxPriorityFeePerGas: normalize(gasFeeValues.maxPriorityFeePerGas),\n  };\n}\n\n/**\n * Determines whether the given value can be encoded as JSON.\n *\n * @param value - The value.\n * @returns True if the value is JSON-encodable, false if not.\n */\nfunction isJsonCompatible(value: unknown): value is Json {\n  try {\n    JSON.parse(JSON.stringify(value));\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Ensure a hex string is of even length by adding a leading 0 if necessary.\n * Any existing `0x` prefix is preserved but is not added if missing.\n *\n * @param hex - The hex string to ensure is even.\n * @returns The hex string with an even length.\n */\nexport function padHexToEvenLength(hex: string) {\n  const prefix = hex.toLowerCase().startsWith('0x') ? hex.slice(0, 2) : '';\n  const data = prefix ? hex.slice(2) : hex;\n  const evenData = data.length % 2 === 0 ? data : `0${data}`;\n\n  return prefix + evenData;\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/utils.d.cts b/dist/utils/utils.d.cts
index 4a84d7f2240e45245c311c305a756c6addcb273f..6608355d90c84b651ff78cd0893f37ded746a315 100644
--- a/dist/utils/utils.d.cts
+++ b/dist/utils/utils.d.cts
@@ -1,4 +1,3 @@
-import BN from "bn.js";
 import type { TransactionParams, TransactionMeta, TransactionError, GasPriceValue, FeeMarketEIP1559Values } from "../types.cjs";
 export declare const ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
 /**
@@ -50,13 +49,4 @@ export declare function normalizeGasFeeValues(gasFeeValues: GasPriceValue | FeeM
  * @returns The hex string with an even length.
  */
 export declare function padHexToEvenLength(hex: string): string;
-/**
- * Calculate the absolute percentage change between two values.
- *
- * @param originalValue - The first value.
- * @param newValue - The second value.
- * @returns The percentage change from the first value to the second value.
- * If the original value is zero and the new value is not, returns 100.
- */
-export declare function getPercentageChange(originalValue: BN, newValue: BN): number;
 //# sourceMappingURL=utils.d.cts.map
\ No newline at end of file
diff --git a/dist/utils/utils.d.cts.map b/dist/utils/utils.d.cts.map
index 89888474e1b1fb8df40562e64f07a70a3c366879..1a6c5fe7ce918e7376d5b4afa444bef356030975 100644
--- a/dist/utils/utils.d.cts.map
+++ b/dist/utils/utils.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"utils.d.cts","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,cAAc;AAGvB,OAAO,KAAK,EACV,iBAAiB,EACjB,eAAe,EACf,gBAAgB,EAChB,aAAa,EACb,sBAAsB,EACvB,qBAAiB;AAElB,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAuBrE;;;;;GAKG;AACH,wBAAgB,0BAA0B,CAAC,QAAQ,EAAE,iBAAiB,qBAcrE;AAED;;;;;;GAMG;AACH,wBAAgB,oBAAoB,CAAC,QAAQ,EAAE,iBAAiB,GAAG,OAAO,CAOzE;AAED,eAAO,MAAM,iBAAiB,cACjB,aAAa,GAAG,sBAAsB,SAYlD,CAAC;AAEF;;;;;;GAMG;AACH,wBAAgB,+BAA+B,CAC7C,eAAe,EAAE,eAAe,GAAG,SAAS,EAC5C,MAAM,EAAE,MAAM,QAOf;AAED;;;;;GAKG;AACH,wBAAgB,gBAAgB,CAC9B,KAAK,EAAE,KAAK,GAAG;IAAE,IAAI,CAAC,EAAE,MAAM,CAAC;IAAC,KAAK,CAAC,EAAE,OAAO,CAAA;CAAE,GAChD,gBAAgB,CAQlB;AAED;;;;;GAKG;AACH,wBAAgB,qBAAqB,CACnC,YAAY,EAAE,aAAa,GAAG,sBAAsB,GACnD,aAAa,GAAG,sBAAsB,CAgBxC;AAiBD;;;;;;GAMG;AACH,wBAAgB,kBAAkB,CAAC,GAAG,EAAE,MAAM,UAM7C;AAED;;;;;;;GAOG;AACH,wBAAgB,mBAAmB,CAAC,aAAa,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,GAAG,MAAM,CAgB3E"}
\ No newline at end of file
+{"version":3,"file":"utils.d.cts","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"AASA,OAAO,KAAK,EACV,iBAAiB,EACjB,eAAe,EACf,gBAAgB,EAChB,aAAa,EACb,sBAAsB,EACvB,qBAAiB;AAElB,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAuBrE;;;;;GAKG;AACH,wBAAgB,0BAA0B,CAAC,QAAQ,EAAE,iBAAiB,qBAcrE;AAED;;;;;;GAMG;AACH,wBAAgB,oBAAoB,CAAC,QAAQ,EAAE,iBAAiB,GAAG,OAAO,CAOzE;AAED,eAAO,MAAM,iBAAiB,cACjB,aAAa,GAAG,sBAAsB,SAYlD,CAAC;AAEF;;;;;;GAMG;AACH,wBAAgB,+BAA+B,CAC7C,eAAe,EAAE,eAAe,GAAG,SAAS,EAC5C,MAAM,EAAE,MAAM,QAOf;AAED;;;;;GAKG;AACH,wBAAgB,gBAAgB,CAC9B,KAAK,EAAE,KAAK,GAAG;IAAE,IAAI,CAAC,EAAE,MAAM,CAAC;IAAC,KAAK,CAAC,EAAE,OAAO,CAAA;CAAE,GAChD,gBAAgB,CAQlB;AAED;;;;;GAKG;AACH,wBAAgB,qBAAqB,CACnC,YAAY,EAAE,aAAa,GAAG,sBAAsB,GACnD,aAAa,GAAG,sBAAsB,CAgBxC;AAiBD;;;;;;GAMG;AACH,wBAAgB,kBAAkB,CAAC,GAAG,EAAE,MAAM,UAM7C"}
\ No newline at end of file
diff --git a/dist/utils/utils.d.mts b/dist/utils/utils.d.mts
index 876daf21e0aded34675969cf8ef03c037d9053a8..1c07b760a5f956f51d0df7a9061a62ac444f2fac 100644
--- a/dist/utils/utils.d.mts
+++ b/dist/utils/utils.d.mts
@@ -1,4 +1,3 @@
-import BN from "bn.js";
 import type { TransactionParams, TransactionMeta, TransactionError, GasPriceValue, FeeMarketEIP1559Values } from "../types.mjs";
 export declare const ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
 /**
@@ -50,13 +49,4 @@ export declare function normalizeGasFeeValues(gasFeeValues: GasPriceValue | FeeM
  * @returns The hex string with an even length.
  */
 export declare function padHexToEvenLength(hex: string): string;
-/**
- * Calculate the absolute percentage change between two values.
- *
- * @param originalValue - The first value.
- * @param newValue - The second value.
- * @returns The percentage change from the first value to the second value.
- * If the original value is zero and the new value is not, returns 100.
- */
-export declare function getPercentageChange(originalValue: BN, newValue: BN): number;
 //# sourceMappingURL=utils.d.mts.map
\ No newline at end of file
diff --git a/dist/utils/utils.d.mts.map b/dist/utils/utils.d.mts.map
index 446b05513b1d204a96fa7fb33ef40f879e9a2557..0a927f7623c288d2a80b4afcc626f5b15d98a9bf 100644
--- a/dist/utils/utils.d.mts.map
+++ b/dist/utils/utils.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"utils.d.mts","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,cAAc;AAGvB,OAAO,KAAK,EACV,iBAAiB,EACjB,eAAe,EACf,gBAAgB,EAChB,aAAa,EACb,sBAAsB,EACvB,qBAAiB;AAElB,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAuBrE;;;;;GAKG;AACH,wBAAgB,0BAA0B,CAAC,QAAQ,EAAE,iBAAiB,qBAcrE;AAED;;;;;;GAMG;AACH,wBAAgB,oBAAoB,CAAC,QAAQ,EAAE,iBAAiB,GAAG,OAAO,CAOzE;AAED,eAAO,MAAM,iBAAiB,cACjB,aAAa,GAAG,sBAAsB,SAYlD,CAAC;AAEF;;;;;;GAMG;AACH,wBAAgB,+BAA+B,CAC7C,eAAe,EAAE,eAAe,GAAG,SAAS,EAC5C,MAAM,EAAE,MAAM,QAOf;AAED;;;;;GAKG;AACH,wBAAgB,gBAAgB,CAC9B,KAAK,EAAE,KAAK,GAAG;IAAE,IAAI,CAAC,EAAE,MAAM,CAAC;IAAC,KAAK,CAAC,EAAE,OAAO,CAAA;CAAE,GAChD,gBAAgB,CAQlB;AAED;;;;;GAKG;AACH,wBAAgB,qBAAqB,CACnC,YAAY,EAAE,aAAa,GAAG,sBAAsB,GACnD,aAAa,GAAG,sBAAsB,CAgBxC;AAiBD;;;;;;GAMG;AACH,wBAAgB,kBAAkB,CAAC,GAAG,EAAE,MAAM,UAM7C;AAED;;;;;;;GAOG;AACH,wBAAgB,mBAAmB,CAAC,aAAa,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,GAAG,MAAM,CAgB3E"}
\ No newline at end of file
+{"version":3,"file":"utils.d.mts","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"AASA,OAAO,KAAK,EACV,iBAAiB,EACjB,eAAe,EACf,gBAAgB,EAChB,aAAa,EACb,sBAAsB,EACvB,qBAAiB;AAElB,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAuBrE;;;;;GAKG;AACH,wBAAgB,0BAA0B,CAAC,QAAQ,EAAE,iBAAiB,qBAcrE;AAED;;;;;;GAMG;AACH,wBAAgB,oBAAoB,CAAC,QAAQ,EAAE,iBAAiB,GAAG,OAAO,CAOzE;AAED,eAAO,MAAM,iBAAiB,cACjB,aAAa,GAAG,sBAAsB,SAYlD,CAAC;AAEF;;;;;;GAMG;AACH,wBAAgB,+BAA+B,CAC7C,eAAe,EAAE,eAAe,GAAG,SAAS,EAC5C,MAAM,EAAE,MAAM,QAOf;AAED;;;;;GAKG;AACH,wBAAgB,gBAAgB,CAC9B,KAAK,EAAE,KAAK,GAAG;IAAE,IAAI,CAAC,EAAE,MAAM,CAAC;IAAC,KAAK,CAAC,EAAE,OAAO,CAAA;CAAE,GAChD,gBAAgB,CAQlB;AAED;;;;;GAKG;AACH,wBAAgB,qBAAqB,CACnC,YAAY,EAAE,aAAa,GAAG,sBAAsB,GACnD,aAAa,GAAG,sBAAsB,CAgBxC;AAiBD;;;;;;GAMG;AACH,wBAAgB,kBAAkB,CAAC,GAAG,EAAE,MAAM,UAM7C"}
\ No newline at end of file
diff --git a/dist/utils/utils.mjs b/dist/utils/utils.mjs
index 383affeb873cf8bafad44e5806323849ca7d955a..d75a8e8f6dce89a6a336cb1985ae94916db8684a 100644
--- a/dist/utils/utils.mjs
+++ b/dist/utils/utils.mjs
@@ -1,12 +1,4 @@
-function $importDefault(module) {
-    if (module?.__esModule) {
-        return module.default;
-    }
-    return module;
-}
 import { add0x, getKnownPropertyNames, isStrictHexString } from "@metamask/utils";
-import $BN from "bn.js";
-const BN = $importDefault($BN);
 import { TransactionStatus } from "../types.mjs";
 export const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';
 // TODO: Replace `any` with type
@@ -141,25 +133,4 @@ export function padHexToEvenLength(hex) {
     const evenData = data.length % 2 === 0 ? data : `0${data}`;
     return prefix + evenData;
 }
-/**
- * Calculate the absolute percentage change between two values.
- *
- * @param originalValue - The first value.
- * @param newValue - The second value.
- * @returns The percentage change from the first value to the second value.
- * If the original value is zero and the new value is not, returns 100.
- */
-export function getPercentageChange(originalValue, newValue) {
-    const precisionFactor = new BN(10).pow(new BN(18));
-    const originalValuePrecision = originalValue.mul(precisionFactor);
-    const newValuePrecision = newValue.mul(precisionFactor);
-    const difference = newValuePrecision.sub(originalValuePrecision);
-    if (difference.isZero()) {
-        return 0;
-    }
-    if (originalValuePrecision.isZero() && !newValuePrecision.isZero()) {
-        return 100;
-    }
-    return difference.muln(100).div(originalValuePrecision).abs().toNumber();
-}
 //# sourceMappingURL=utils.mjs.map
\ No newline at end of file
diff --git a/dist/utils/utils.mjs.map b/dist/utils/utils.mjs.map
index 6b976703dd560a90bf959660ae9e8625455591ca..220969c69599c17da122c5e995e4ef918d66cb5e 100644
--- a/dist/utils/utils.mjs.map
+++ b/dist/utils/utils.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"utils.mjs","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AuthorizationList } from '@ethereumjs/common';\nimport {\n  add0x,\n  getKnownPropertyNames,\n  isStrictHexString,\n} from '@metamask/utils';\nimport type { Json } from '@metamask/utils';\nimport BN from 'bn.js';\n\nimport { TransactionStatus } from '../types';\nimport type {\n  TransactionParams,\n  TransactionMeta,\n  TransactionError,\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n} from '../types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst NORMALIZERS: { [param in keyof TransactionParams]: any } = {\n  authorizationList: (authorizationList?: AuthorizationList) =>\n    authorizationList,\n  data: (data: string) => add0x(padHexToEvenLength(data)),\n  from: (from: string) => add0x(from).toLowerCase(),\n  gas: (gas: string) => add0x(gas),\n  gasLimit: (gas: string) => add0x(gas),\n  gasPrice: (gasPrice: string) => add0x(gasPrice),\n  nonce: (nonce: string) => add0x(nonce),\n  to: (to: string) => add0x(to).toLowerCase(),\n  value: (value: string) => add0x(value),\n  maxFeePerGas: (maxFeePerGas: string) => add0x(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    add0x(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    add0x(maxPriorityFeePerGas),\n  type: (type: string) => add0x(type),\n};\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param txParams - The transaction params to normalize.\n * @returns Normalized transaction params.\n */\nexport function normalizeTransactionParams(txParams: TransactionParams) {\n  const normalizedTxParams: TransactionParams = { from: '' };\n\n  for (const key of getKnownPropertyNames(NORMALIZERS)) {\n    if (txParams[key]) {\n      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);\n    }\n  }\n\n  if (!normalizedTxParams.value) {\n    normalizedTxParams.value = '0x0';\n  }\n\n  return normalizedTxParams;\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param txParams - Transaction params object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport function isEIP1559Transaction(txParams: TransactionParams): boolean {\n  const hasOwnProp = (obj: TransactionParams, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(txParams, 'maxFeePerGas') &&\n    hasOwnProp(txParams, 'maxPriorityFeePerGas')\n  );\n}\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isStrictHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\n/**\n * Validates that a transaction is unapproved.\n * Throws if the transaction is not unapproved.\n *\n * @param transactionMeta - The transaction metadata to check.\n * @param fnName - The name of the function calling this helper.\n */\nexport function validateIfTransactionUnapproved(\n  transactionMeta: TransactionMeta | undefined,\n  fnName: string,\n) {\n  if (transactionMeta?.status !== TransactionStatus.unapproved) {\n    throw new Error(\n      `TransactionsController: Can only call ${fnName} on an unapproved transaction.\\n      Current tx status: ${transactionMeta?.status}`,\n    );\n  }\n}\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param error - The error to be normalize.\n * @returns Normalized transaction error.\n */\nexport function normalizeTxError(\n  error: Error & { code?: string; value?: unknown },\n): TransactionError {\n  return {\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    code: error.code,\n    rpc: isJsonCompatible(error.value) ? error.value : undefined,\n  };\n}\n\n/**\n * Normalize an object containing gas fee values.\n *\n * @param gasFeeValues - An object containing gas fee values.\n * @returns An object containing normalized gas fee values.\n */\nexport function normalizeGasFeeValues(\n  gasFeeValues: GasPriceValue | FeeMarketEIP1559Values,\n): GasPriceValue | FeeMarketEIP1559Values {\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const normalize = (value: any) =>\n    typeof value === 'string' ? add0x(value) : value;\n\n  if ('gasPrice' in gasFeeValues) {\n    return {\n      gasPrice: normalize(gasFeeValues.gasPrice),\n    };\n  }\n\n  return {\n    maxFeePerGas: normalize(gasFeeValues.maxFeePerGas),\n    maxPriorityFeePerGas: normalize(gasFeeValues.maxPriorityFeePerGas),\n  };\n}\n\n/**\n * Determines whether the given value can be encoded as JSON.\n *\n * @param value - The value.\n * @returns True if the value is JSON-encodable, false if not.\n */\nfunction isJsonCompatible(value: unknown): value is Json {\n  try {\n    JSON.parse(JSON.stringify(value));\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Ensure a hex string is of even length by adding a leading 0 if necessary.\n * Any existing `0x` prefix is preserved but is not added if missing.\n *\n * @param hex - The hex string to ensure is even.\n * @returns The hex string with an even length.\n */\nexport function padHexToEvenLength(hex: string) {\n  const prefix = hex.toLowerCase().startsWith('0x') ? hex.slice(0, 2) : '';\n  const data = prefix ? hex.slice(2) : hex;\n  const evenData = data.length % 2 === 0 ? data : `0${data}`;\n\n  return prefix + evenData;\n}\n\n/**\n * Calculate the absolute percentage change between two values.\n *\n * @param originalValue - The first value.\n * @param newValue - The second value.\n * @returns The percentage change from the first value to the second value.\n * If the original value is zero and the new value is not, returns 100.\n */\nexport function getPercentageChange(originalValue: BN, newValue: BN): number {\n  const precisionFactor = new BN(10).pow(new BN(18));\n  const originalValuePrecision = originalValue.mul(precisionFactor);\n  const newValuePrecision = newValue.mul(precisionFactor);\n\n  const difference = newValuePrecision.sub(originalValuePrecision);\n\n  if (difference.isZero()) {\n    return 0;\n  }\n\n  if (originalValuePrecision.isZero() && !newValuePrecision.isZero()) {\n    return 100;\n  }\n\n  return difference.muln(100).div(originalValuePrecision).abs().toNumber();\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"utils.mjs","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AuthorizationList } from '@ethereumjs/common';\nimport {\n  add0x,\n  getKnownPropertyNames,\n  isStrictHexString,\n} from '@metamask/utils';\nimport type { Json } from '@metamask/utils';\n\nimport { TransactionStatus } from '../types';\nimport type {\n  TransactionParams,\n  TransactionMeta,\n  TransactionError,\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n} from '../types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst NORMALIZERS: { [param in keyof TransactionParams]: any } = {\n  authorizationList: (authorizationList?: AuthorizationList) =>\n    authorizationList,\n  data: (data: string) => add0x(padHexToEvenLength(data)),\n  from: (from: string) => add0x(from).toLowerCase(),\n  gas: (gas: string) => add0x(gas),\n  gasLimit: (gas: string) => add0x(gas),\n  gasPrice: (gasPrice: string) => add0x(gasPrice),\n  nonce: (nonce: string) => add0x(nonce),\n  to: (to: string) => add0x(to).toLowerCase(),\n  value: (value: string) => add0x(value),\n  maxFeePerGas: (maxFeePerGas: string) => add0x(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    add0x(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    add0x(maxPriorityFeePerGas),\n  type: (type: string) => add0x(type),\n};\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param txParams - The transaction params to normalize.\n * @returns Normalized transaction params.\n */\nexport function normalizeTransactionParams(txParams: TransactionParams) {\n  const normalizedTxParams: TransactionParams = { from: '' };\n\n  for (const key of getKnownPropertyNames(NORMALIZERS)) {\n    if (txParams[key]) {\n      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);\n    }\n  }\n\n  if (!normalizedTxParams.value) {\n    normalizedTxParams.value = '0x0';\n  }\n\n  return normalizedTxParams;\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param txParams - Transaction params object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport function isEIP1559Transaction(txParams: TransactionParams): boolean {\n  const hasOwnProp = (obj: TransactionParams, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(txParams, 'maxFeePerGas') &&\n    hasOwnProp(txParams, 'maxPriorityFeePerGas')\n  );\n}\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isStrictHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\n/**\n * Validates that a transaction is unapproved.\n * Throws if the transaction is not unapproved.\n *\n * @param transactionMeta - The transaction metadata to check.\n * @param fnName - The name of the function calling this helper.\n */\nexport function validateIfTransactionUnapproved(\n  transactionMeta: TransactionMeta | undefined,\n  fnName: string,\n) {\n  if (transactionMeta?.status !== TransactionStatus.unapproved) {\n    throw new Error(\n      `TransactionsController: Can only call ${fnName} on an unapproved transaction.\\n      Current tx status: ${transactionMeta?.status}`,\n    );\n  }\n}\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param error - The error to be normalize.\n * @returns Normalized transaction error.\n */\nexport function normalizeTxError(\n  error: Error & { code?: string; value?: unknown },\n): TransactionError {\n  return {\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    code: error.code,\n    rpc: isJsonCompatible(error.value) ? error.value : undefined,\n  };\n}\n\n/**\n * Normalize an object containing gas fee values.\n *\n * @param gasFeeValues - An object containing gas fee values.\n * @returns An object containing normalized gas fee values.\n */\nexport function normalizeGasFeeValues(\n  gasFeeValues: GasPriceValue | FeeMarketEIP1559Values,\n): GasPriceValue | FeeMarketEIP1559Values {\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const normalize = (value: any) =>\n    typeof value === 'string' ? add0x(value) : value;\n\n  if ('gasPrice' in gasFeeValues) {\n    return {\n      gasPrice: normalize(gasFeeValues.gasPrice),\n    };\n  }\n\n  return {\n    maxFeePerGas: normalize(gasFeeValues.maxFeePerGas),\n    maxPriorityFeePerGas: normalize(gasFeeValues.maxPriorityFeePerGas),\n  };\n}\n\n/**\n * Determines whether the given value can be encoded as JSON.\n *\n * @param value - The value.\n * @returns True if the value is JSON-encodable, false if not.\n */\nfunction isJsonCompatible(value: unknown): value is Json {\n  try {\n    JSON.parse(JSON.stringify(value));\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Ensure a hex string is of even length by adding a leading 0 if necessary.\n * Any existing `0x` prefix is preserved but is not added if missing.\n *\n * @param hex - The hex string to ensure is even.\n * @returns The hex string with an even length.\n */\nexport function padHexToEvenLength(hex: string) {\n  const prefix = hex.toLowerCase().startsWith('0x') ? hex.slice(0, 2) : '';\n  const data = prefix ? hex.slice(2) : hex;\n  const evenData = data.length % 2 === 0 ? data : `0${data}`;\n\n  return prefix + evenData;\n}\n"]}
\ No newline at end of file
