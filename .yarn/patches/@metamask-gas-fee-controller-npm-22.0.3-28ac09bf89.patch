diff --git a/dist/GasFeeController.cjs b/dist/GasFeeController.cjs
index 0a5d688b277d6d1d5b207b66dfa51defd50c07eb..0dffe01040dd9ffd055bda902a698fcd0892b936 100644
--- a/dist/GasFeeController.cjs
+++ b/dist/GasFeeController.cjs
@@ -15,14 +15,13 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 };
 var _GasFeeController_instances, _GasFeeController_getProvider, _GasFeeController_onNetworkControllerDidChange;
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.GasFeeController = exports.GAS_ESTIMATE_TYPES = exports.LEGACY_GAS_PRICES_API_URL = void 0;
+exports.GasFeeController = exports.GAS_ESTIMATE_TYPES = void 0;
 const controller_utils_1 = require("@metamask/controller-utils");
 const eth_query_1 = __importDefault(require("@metamask/eth-query"));
 const polling_controller_1 = require("@metamask/polling-controller");
 const uuid_1 = require("uuid");
 const determineGasFeeCalculations_1 = __importDefault(require("./determineGasFeeCalculations.cjs"));
 const gas_util_1 = require("./gas-util.cjs");
-exports.LEGACY_GAS_PRICES_API_URL = `https://api.metaswap.codefi.network/gasPrices`;
 /**
  * Indicates which type of gasEstimate the controller is currently returning.
  * This is useful as a way of asserting that the shape of gasEstimates matches
@@ -74,13 +73,8 @@ class GasFeeController extends (0, polling_controller_1.StaticIntervalPollingCon
      * @param options.getProvider - Returns a network provider for the current network.
      * @param options.onNetworkDidChange - A function for registering an event handler for the
      * network state change event.
-     * @param options.legacyAPIEndpoint - The legacy gas price API URL. This option is primarily for
-     * testing purposes.
-     * @param options.EIP1559APIEndpoint - The EIP-1559 gas price API URL.
-     * @param options.clientId - The client ID used to identify to the gas estimation API who is
-     * asking for estimates.
      */
-    constructor({ interval = 15000, messenger, state, getCurrentNetworkEIP1559Compatibility, getCurrentAccountEIP1559Compatibility, getChainId, getCurrentNetworkLegacyGasAPICompatibility, getProvider, onNetworkDidChange, legacyAPIEndpoint = exports.LEGACY_GAS_PRICES_API_URL, EIP1559APIEndpoint, clientId, }) {
+    constructor({ interval = 15000, messenger, state, getCurrentNetworkEIP1559Compatibility, getCurrentAccountEIP1559Compatibility, getChainId, getCurrentNetworkLegacyGasAPICompatibility, getProvider, onNetworkDidChange, }) {
         super({
             name,
             metadata,
@@ -99,9 +93,6 @@ class GasFeeController extends (0, polling_controller_1.StaticIntervalPollingCon
         this.getCurrentAccountEIP1559Compatibility =
             getCurrentAccountEIP1559Compatibility;
         __classPrivateFieldSet(this, _GasFeeController_getProvider, getProvider, "f");
-        this.EIP1559APIEndpoint = EIP1559APIEndpoint;
-        this.legacyAPIEndpoint = legacyAPIEndpoint;
-        this.clientId = clientId;
         this.ethQuery = new eth_query_1.default(__classPrivateFieldGet(this, _GasFeeController_getProvider, "f").call(this));
         if (onNetworkDidChange && getChainId) {
             this.currentChainId = getChainId();
@@ -169,7 +160,7 @@ class GasFeeController extends (0, polling_controller_1.StaticIntervalPollingCon
             ethQuery = new eth_query_1.default(networkClient.provider);
         }
         ethQuery ?? (ethQuery = this.ethQuery);
-        isLegacyGasAPICompatible ?? (isLegacyGasAPICompatible = this.getCurrentNetworkLegacyGasAPICompatibility());
+        isLegacyGasAPICompatible ?? (isLegacyGasAPICompatible = this.getCurrentNetworkLegacyGasAPICompatibility?.() ?? true);
         decimalChainId ?? (decimalChainId = (0, controller_utils_1.convertHexToDecimal)(this.currentChainId));
         try {
             isEIP1559Compatible ?? (isEIP1559Compatible = await this.getEIP1559Compatibility());
@@ -181,15 +172,9 @@ class GasFeeController extends (0, polling_controller_1.StaticIntervalPollingCon
         const gasFeeCalculations = await (0, determineGasFeeCalculations_1.default)({
             isEIP1559Compatible,
             isLegacyGasAPICompatible,
-            fetchGasEstimates: gas_util_1.fetchGasEstimates,
-            fetchGasEstimatesUrl: this.EIP1559APIEndpoint.replace('<chain_id>', `${decimalChainId}`),
-            fetchLegacyGasPriceEstimates: gas_util_1.fetchLegacyGasPriceEstimates,
-            fetchLegacyGasPriceEstimatesUrl: this.legacyAPIEndpoint.replace('<chain_id>', `${decimalChainId}`),
             fetchEthGasPriceEstimate: gas_util_1.fetchEthGasPriceEstimate,
             calculateTimeEstimate: gas_util_1.calculateTimeEstimate,
-            clientId: this.clientId,
             ethQuery,
-            nonRPCGasFeeApisDisabled: this.state.nonRPCGasFeeApisDisabled,
         });
         if (shouldUpdateState) {
             const chainId = (0, controller_utils_1.toHex)(decimalChainId);
@@ -264,7 +249,7 @@ class GasFeeController extends (0, polling_controller_1.StaticIntervalPollingCon
         });
     }
     async getEIP1559Compatibility() {
-        const currentNetworkIsEIP1559Compatible = await this.getCurrentNetworkEIP1559Compatibility();
+        const currentNetworkIsEIP1559Compatible = (await this.getCurrentNetworkEIP1559Compatibility?.()) ?? true;
         const currentAccountIsEIP1559Compatible = this.getCurrentAccountEIP1559Compatibility?.() ?? true;
         return (currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible);
     }
@@ -275,6 +260,7 @@ class GasFeeController extends (0, polling_controller_1.StaticIntervalPollingCon
         }
         return (0, gas_util_1.calculateTimeEstimate)(maxPriorityFeePerGas, maxFeePerGas, this.state.gasFeeEstimates);
     }
+    // Note: This seems to never have been working as intended
     enableNonRPCGasFeeApis() {
         this.update((state) => {
             state.nonRPCGasFeeApisDisabled = false;
diff --git a/dist/GasFeeController.cjs.map b/dist/GasFeeController.cjs.map
index f2032c1f1f1c6dc99f9d4c95651df3a6ff8ab7fb..14bdff36c0f1eab165943da065888597bed1c243 100644
--- a/dist/GasFeeController.cjs.map
+++ b/dist/GasFeeController.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"GasFeeController.cjs","sourceRoot":"","sources":["../src/GasFeeController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAKA,iEAIoC;AACpC,oEAA2C;AAU3C,qEAA+E;AAE/E,+BAAoC;AAEpC,oGAAwE;AACxE,6CAKoB;AAEP,QAAA,yBAAyB,GAAG,+CAA+C,CAAC;AAsBzF;;;;;GAKG;AACU,QAAA,kBAAkB,GAAG;IAChC,UAAU,EAAE,YAAqC;IACjD,MAAM,EAAE,QAA8B;IACtC,YAAY,EAAE,cAAyC;IACvD,IAAI,EAAE,MAAwB;CAC/B,CAAC;AAiGF,MAAM,QAAQ,GAAG;IACf,wBAAwB,EAAE;QACxB,OAAO,EAAE,IAAI;QACb,SAAS,EAAE,KAAK;KACjB;IACD,eAAe,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;IACpD,yBAAyB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;IAC9D,eAAe,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;IACpD,wBAAwB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;CAC9D,CAAC;AAqDF,MAAM,IAAI,GAAG,kBAAkB,CAAC;AA0BhC,MAAM,YAAY,GAAgB;IAChC,wBAAwB,EAAE,EAAE;IAC5B,eAAe,EAAE,EAAE;IACnB,yBAAyB,EAAE,EAAE;IAC7B,eAAe,EAAE,0BAAkB,CAAC,IAAI;IACxC,wBAAwB,EAAE,KAAK;CAChC,CAAC;AAOF;;GAEG;AACH,MAAa,gBAAiB,SAAQ,IAAA,oDAA+B,GAIpE;IA2BC;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,YAAY,EACV,QAAQ,GAAG,KAAK,EAChB,SAAS,EACT,KAAK,EACL,qCAAqC,EACrC,qCAAqC,EACrC,UAAU,EACV,0CAA0C,EAC1C,WAAW,EACX,kBAAkB,EAClB,iBAAiB,GAAG,iCAAyB,EAC7C,kBAAkB,EAClB,QAAQ,GAeT;QACC,KAAK,CAAC;YACJ,IAAI;YACJ,QAAQ;YACR,SAAS;YACT,KAAK,EAAE,EAAE,GAAG,YAAY,EAAE,GAAG,KAAK,EAAE;SACrC,CAAC,CAAC;;QA1DL,gDAAkC;QA2DhC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,qCAAqC;YACxC,qCAAqC,CAAC;QACxC,IAAI,CAAC,0CAA0C;YAC7C,0CAA0C,CAAC;QAC7C,IAAI,CAAC,qCAAqC;YACxC,qCAAqC,CAAC;QACxC,uBAAA,IAAI,iCAAgB,WAAW,MAAA,CAAC;QAChC,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,CAAC,uBAAA,IAAI,qCAAa,MAAjB,IAAI,CAAe,CAAC,CAAC;QAElD,IAAI,kBAAkB,IAAI,UAAU,EAAE;YACpC,IAAI,CAAC,cAAc,GAAG,UAAU,EAAE,CAAC;YACnC,gFAAgF;YAChF,kEAAkE;YAClE,kBAAkB,CAAC,KAAK,EAAE,sBAAsB,EAAE,EAAE;gBAClD,MAAM,uBAAA,IAAI,mFAA8B,MAAlC,IAAI,EAA+B,sBAAsB,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,MAAM,EAAE,uBAAuB,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAC3D,4BAA4B,CAC7B,CAAC;YACF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAC7C,wCAAwC,EACxC,uBAAuB,CACxB,CAAC,aAAa,CAAC,OAAO,CAAC;YACxB,IAAI,CAAC,eAAe,CAAC,SAAS,CAC5B,oCAAoC;YACpC,gFAAgF;YAChF,kEAAkE;YAClE,KAAK,EAAE,sBAAsB,EAAE,EAAE;gBAC/B,MAAM,uBAAA,IAAI,mFAA8B,MAAlC,IAAI,EAA+B,sBAAsB,CAAC,CAAC;YACnE,CAAC,CACF,CAAC;SACH;IACH,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,EAAE;YAC9B,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC3C,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,MAAM,IAAI,CAAC,iCAAiC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAChC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,OAAoC;QAC7D,OAAO,MAAM,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;IACtD,CAAC;IAED,KAAK,CAAC,iCAAiC,CACrC,SAA6B;QAE7B,MAAM,UAAU,GAAG,SAAS,IAAI,IAAA,SAAM,GAAE,CAAC;QAEzC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAEhC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,EAAE;YAC9B,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;YACtC,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,wBAAwB,CAC5B,UAAsC,EAAE;QAExC,MAAM,EAAE,iBAAiB,GAAG,IAAI,EAAE,eAAe,EAAE,GAAG,OAAO,CAAC;QAE9D,IAAI,QAAQ,EACV,mBAAmB,EACnB,wBAAwB,EACxB,cAAsB,CAAC;QAEzB,IAAI,eAAe,KAAK,SAAS,EAAE;YACjC,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAC7C,wCAAwC,EACxC,eAAe,CAChB,CAAC;YACF,wBAAwB,GAAG,aAAa,CAAC,aAAa,CAAC,OAAO,KAAK,MAAM,CAAC;YAE1E,cAAc,GAAG,IAAA,sCAAmB,EAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAE1E,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAC5C,2CAA2C,EAC3C,eAAe,CAChB,CAAC;gBACF,mBAAmB,GAAG,MAAM,IAAI,KAAK,CAAC;aACvC;YAAC,MAAM;gBACN,mBAAmB,GAAG,KAAK,CAAC;aAC7B;YACD,QAAQ,GAAG,IAAI,mBAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SACjD;QAED,QAAQ,KAAR,QAAQ,GAAK,IAAI,CAAC,QAAQ,EAAC;QAE3B,wBAAwB,KAAxB,wBAAwB,GACtB,IAAI,CAAC,0CAA0C,EAAE,EAAC;QAEpD,cAAc,KAAd,cAAc,GAAK,IAAA,sCAAmB,EAAC,IAAI,CAAC,cAAc,CAAC,EAAC;QAE5D,IAAI;YACF,mBAAmB,KAAnB,mBAAmB,GAAK,MAAM,IAAI,CAAC,uBAAuB,EAAE,EAAC;SAC9D;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,mBAAmB,KAAnB,mBAAmB,GAAK,KAAK,EAAC;SAC/B;QAED,MAAM,kBAAkB,GAAG,MAAM,IAAA,qCAA2B,EAAC;YAC3D,mBAAmB;YACnB,wBAAwB;YACxB,iBAAiB,EAAjB,4BAAiB;YACjB,oBAAoB,EAAE,IAAI,CAAC,kBAAkB,CAAC,OAAO,CACnD,YAAY,EACZ,GAAG,cAAc,EAAE,CACpB;YACD,4BAA4B,EAA5B,uCAA4B;YAC5B,+BAA+B,EAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAC7D,YAAY,EACZ,GAAG,cAAc,EAAE,CACpB;YACD,wBAAwB,EAAxB,mCAAwB;YACxB,qBAAqB,EAArB,gCAAqB;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ;YACR,wBAAwB,EAAE,IAAI,CAAC,KAAK,CAAC,wBAAwB;SAC9D,CAAC,CAAC;QAEH,IAAI,iBAAiB,EAAE;YACrB,MAAM,OAAO,GAAG,IAAA,wBAAK,EAAC,cAAc,CAAC,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;gBACpB,IAAI,IAAI,CAAC,cAAc,KAAK,OAAO,EAAE;oBACnC,KAAK,CAAC,eAAe,GAAG,kBAAkB,CAAC,eAAe,CAAC;oBAC3D,KAAK,CAAC,yBAAyB;wBAC7B,kBAAkB,CAAC,yBAAyB,CAAC;oBAC/C,KAAK,CAAC,eAAe,GAAG,kBAAkB,CAAC,eAAe,CAAC;iBAC5D;gBACD,KAAK,CAAC,wBAAwB,KAA9B,KAAK,CAAC,wBAAwB,GAAK,EAAE,EAAC;gBACtC,KAAK,CAAC,wBAAwB,CAAC,OAAO,CAAC,GAAG;oBACxC,eAAe,EAAE,kBAAkB,CAAC,eAAe;oBACnD,yBAAyB,EACvB,kBAAkB,CAAC,yBAAyB;oBAC9C,eAAe,EAAE,kBAAkB,CAAC,eAAe;iBAC1B,CAAC;YAC9B,CAAC,CAAC,CAAC;SACJ;QAED,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,gBAAgB,CAAC,SAAiB;QAChC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAClC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,EAAE;YAC9B,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;IACH,CAAC;IAED,WAAW;QACT,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAChC;QACD,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QACxB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED;;;;OAIG;IACM,OAAO;QACd,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEO,KAAK;QACX,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAChC;QAED,gFAAgF;QAChF,kEAAkE;QAClE,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;YACvC,MAAM,IAAA,gCAAa,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC;QAC7D,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACzB,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,YAAY,CAAC,EAAE,eAAe,EAAsB;QACxD,MAAM,IAAI,CAAC,wBAAwB,CAAC,EAAE,eAAe,EAAE,CAAC,CAAC;IAC3D,CAAC;IAEO,UAAU;QAChB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YACf,OAAO,YAAY,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,uBAAuB;QACnC,MAAM,iCAAiC,GACrC,MAAM,IAAI,CAAC,qCAAqC,EAAE,CAAC;QACrD,MAAM,iCAAiC,GACrC,IAAI,CAAC,qCAAqC,EAAE,EAAE,IAAI,IAAI,CAAC;QAEzD,OAAO,CACL,iCAAiC,IAAI,iCAAiC,CACvE,CAAC;IACJ,CAAC;IAED,eAAe,CACb,oBAA4B,EAC5B,YAAoB;QAEpB,IACE,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe;YAC3B,IAAI,CAAC,KAAK,CAAC,eAAe,KAAK,0BAAkB,CAAC,UAAU,EAC5D;YACA,OAAO,EAAE,CAAC;SACX;QACD,OAAO,IAAA,gCAAqB,EAC1B,oBAAoB,EACpB,YAAY,EACZ,IAAI,CAAC,KAAK,CAAC,eAAe,CAC3B,CAAC;IACJ,CAAC;IAkBD,sBAAsB;QACpB,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,wBAAwB,GAAG,KAAK,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,uBAAuB;QACrB,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,wBAAwB,GAAG,IAAI,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAlXD,4CAkXC;6IA3BC,KAAK,yDAA+B,EAClC,uBAAuB,GACV;IACb,MAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAC1C,wCAAwC,EACxC,uBAAuB,CACxB,CAAC,aAAa,CAAC,OAAO,CAAC;IAExB,IAAI,UAAU,KAAK,IAAI,CAAC,cAAc,EAAE;QACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,CAAC,uBAAA,IAAI,qCAAa,MAAjB,IAAI,CAAe,CAAC,CAAC;QAClD,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAE1B,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;KAClC;AACH,CAAC;AAeH,kBAAe,gBAAgB,CAAC","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport {\n  convertHexToDecimal,\n  safelyExecute,\n  toHex,\n} from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetEIP1559CompatibilityAction,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerNetworkDidChangeEvent,\n  NetworkState,\n  ProviderProxy,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { Hex } from '@metamask/utils';\nimport { v1 as random } from 'uuid';\n\nimport determineGasFeeCalculations from './determineGasFeeCalculations';\nimport {\n  fetchGasEstimates,\n  fetchLegacyGasPriceEstimates,\n  fetchEthGasPriceEstimate,\n  calculateTimeEstimate,\n} from './gas-util';\n\nexport const LEGACY_GAS_PRICES_API_URL = `https://api.metaswap.codefi.network/gasPrices`;\n\n// TODO: Either fix this lint violation or explain why it's necessary to ignore.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport type unknownString = 'unknown';\n\n// Fee Market describes the way gas is set after the london hardfork, and was\n// defined by EIP-1559.\nexport type FeeMarketEstimateType = 'fee-market';\n// Legacy describes gasPrice estimates from before london hardfork, when the\n// user is connected to mainnet and are presented with fast/average/slow\n// estimate levels to choose from.\nexport type LegacyEstimateType = 'legacy';\n// EthGasPrice describes a gasPrice estimate received from eth_gasPrice. Post\n// london this value should only be used for legacy type transactions when on\n// networks that support EIP-1559. This type of estimate is the most accurate\n// to display on custom networks that don't support EIP-1559.\nexport type EthGasPriceEstimateType = 'eth_gasPrice';\n// NoEstimate describes the state of the controller before receiving its first\n// estimate.\nexport type NoEstimateType = 'none';\n\n/**\n * Indicates which type of gasEstimate the controller is currently returning.\n * This is useful as a way of asserting that the shape of gasEstimates matches\n * expectations. NONE is a special case indicating that no previous gasEstimate\n * has been fetched.\n */\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: 'fee-market' as FeeMarketEstimateType,\n  LEGACY: 'legacy' as LegacyEstimateType,\n  ETH_GASPRICE: 'eth_gasPrice' as EthGasPriceEstimateType,\n  NONE: 'none' as NoEstimateType,\n};\n\nexport type GasEstimateType =\n  | FeeMarketEstimateType\n  | EthGasPriceEstimateType\n  | LegacyEstimateType\n  | NoEstimateType;\n\nexport type EstimatedGasFeeTimeBounds = {\n  lowerTimeBound: number | null;\n  upperTimeBound: number | unknownString;\n};\n\n/**\n * @type EthGasPriceEstimate\n *\n * A single gas price estimate for networks and accounts that don't support EIP-1559\n * This estimate comes from eth_gasPrice but is converted to dec gwei to match other\n * return values\n * @property gasPrice - A GWEI dec string\n */\n\nexport type EthGasPriceEstimate = {\n  gasPrice: string;\n};\n\n/**\n * @type LegacyGasPriceEstimate\n *\n * A set of gas price estimates for networks and accounts that don't support EIP-1559\n * These estimates include low, medium and high all as strings representing gwei in\n * decimal format.\n * @property high - gasPrice, in decimal gwei string format, suggested for fast inclusion\n * @property medium - gasPrice, in decimal gwei string format, suggested for avg inclusion\n * @property low - gasPrice, in decimal gwei string format, suggested for slow inclusion\n */\nexport type LegacyGasPriceEstimate = {\n  high: string;\n  medium: string;\n  low: string;\n};\n\n/**\n * @type Eip1559GasFee\n *\n * Data necessary to provide an estimate of a gas fee with a specific tip\n * @property minWaitTimeEstimate - The fastest the transaction will take, in milliseconds\n * @property maxWaitTimeEstimate - The slowest the transaction will take, in milliseconds\n * @property suggestedMaxPriorityFeePerGas - A suggested \"tip\", a GWEI hex number\n * @property suggestedMaxFeePerGas - A suggested max fee, the most a user will pay. a GWEI hex number\n */\nexport type Eip1559GasFee = {\n  minWaitTimeEstimate: number; // a time duration in milliseconds\n  maxWaitTimeEstimate: number; // a time duration in milliseconds\n  suggestedMaxPriorityFeePerGas: string; // a GWEI decimal number\n  suggestedMaxFeePerGas: string; // a GWEI decimal number\n};\n\n/**\n * @type GasFeeEstimates\n *\n * Data necessary to provide multiple GasFee estimates, and supporting information, to the user\n * @property low - A GasFee for a minimum necessary combination of tip and maxFee\n * @property medium - A GasFee for a recommended combination of tip and maxFee\n * @property high - A GasFee for a high combination of tip and maxFee\n * @property estimatedBaseFee - An estimate of what the base fee will be for the pending/next block. A GWEI dec number\n * @property networkCongestion - A normalized number that can be used to gauge the congestion\n * level of the network, with 0 meaning not congested and 1 meaning extremely congested\n */\nexport type GasFeeEstimates = SourcedGasFeeEstimates | FallbackGasFeeEstimates;\n\ntype SourcedGasFeeEstimates = {\n  low: Eip1559GasFee;\n  medium: Eip1559GasFee;\n  high: Eip1559GasFee;\n  estimatedBaseFee: string;\n  historicalBaseFeeRange: [string, string];\n  baseFeeTrend: 'up' | 'down' | 'level';\n  latestPriorityFeeRange: [string, string];\n  historicalPriorityFeeRange: [string, string];\n  priorityFeeTrend: 'up' | 'down' | 'level';\n  networkCongestion: number;\n};\n\ntype FallbackGasFeeEstimates = {\n  low: Eip1559GasFee;\n  medium: Eip1559GasFee;\n  high: Eip1559GasFee;\n  estimatedBaseFee: string;\n  historicalBaseFeeRange: null;\n  baseFeeTrend: null;\n  latestPriorityFeeRange: null;\n  historicalPriorityFeeRange: null;\n  priorityFeeTrend: null;\n  networkCongestion: null;\n};\n\nconst metadata = {\n  gasFeeEstimatesByChainId: {\n    persist: true,\n    anonymous: false,\n  },\n  gasFeeEstimates: { persist: true, anonymous: false },\n  estimatedGasFeeTimeBounds: { persist: true, anonymous: false },\n  gasEstimateType: { persist: true, anonymous: false },\n  nonRPCGasFeeApisDisabled: { persist: true, anonymous: false },\n};\n\nexport type GasFeeStateEthGasPrice = {\n  gasFeeEstimates: EthGasPriceEstimate;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: EthGasPriceEstimateType;\n};\n\nexport type GasFeeStateFeeMarket = {\n  gasFeeEstimates: GasFeeEstimates;\n  estimatedGasFeeTimeBounds: EstimatedGasFeeTimeBounds | Record<string, never>;\n  gasEstimateType: FeeMarketEstimateType;\n};\n\nexport type GasFeeStateLegacy = {\n  gasFeeEstimates: LegacyGasPriceEstimate;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: LegacyEstimateType;\n};\n\nexport type GasFeeStateNoEstimates = {\n  gasFeeEstimates: Record<string, never>;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: NoEstimateType;\n};\n\nexport type FetchGasFeeEstimateOptions = {\n  shouldUpdateState?: boolean;\n  networkClientId?: NetworkClientId;\n};\n\n/**\n * @type GasFeeState\n *\n * Gas Fee controller state\n * @property gasFeeEstimates - Gas fee estimate data based on new EIP-1559 properties\n * @property estimatedGasFeeTimeBounds - Estimates representing the minimum and maximum\n */\nexport type SingleChainGasFeeState =\n  | GasFeeStateEthGasPrice\n  | GasFeeStateFeeMarket\n  | GasFeeStateLegacy\n  | GasFeeStateNoEstimates;\n\nexport type GasFeeEstimatesByChainId = {\n  gasFeeEstimatesByChainId?: Record<string, SingleChainGasFeeState>;\n};\n\nexport type GasFeeState = GasFeeEstimatesByChainId &\n  SingleChainGasFeeState & {\n    nonRPCGasFeeApisDisabled?: boolean;\n  };\n\nconst name = 'GasFeeController';\n\nexport type GasFeeStateChange = ControllerStateChangeEvent<\n  typeof name,\n  GasFeeState\n>;\n\nexport type GetGasFeeState = ControllerGetStateAction<typeof name, GasFeeState>;\n\nexport type GasFeeControllerActions = GetGasFeeState;\n\nexport type GasFeeControllerEvents = GasFeeStateChange;\n\ntype AllowedActions =\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetEIP1559CompatibilityAction;\n\ntype GasFeeMessenger = RestrictedMessenger<\n  typeof name,\n  GasFeeControllerActions | AllowedActions,\n  GasFeeControllerEvents | NetworkControllerNetworkDidChangeEvent,\n  AllowedActions['type'],\n  NetworkControllerNetworkDidChangeEvent['type']\n>;\n\nconst defaultState: GasFeeState = {\n  gasFeeEstimatesByChainId: {},\n  gasFeeEstimates: {},\n  estimatedGasFeeTimeBounds: {},\n  gasEstimateType: GAS_ESTIMATE_TYPES.NONE,\n  nonRPCGasFeeApisDisabled: false,\n};\n\n/** The input to start polling for the {@link GasFeeController} */\ntype GasFeePollingInput = {\n  networkClientId: NetworkClientId;\n};\n\n/**\n * Controller that retrieves gas fee estimate data and polls for updated data on a set interval\n */\nexport class GasFeeController extends StaticIntervalPollingController<GasFeePollingInput>()<\n  typeof name,\n  GasFeeState,\n  GasFeeMessenger\n> {\n  private intervalId?: ReturnType<typeof setTimeout>;\n\n  private readonly intervalDelay;\n\n  private readonly pollTokens: Set<string>;\n\n  private readonly legacyAPIEndpoint: string;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private readonly EIP1559APIEndpoint: string;\n\n  private readonly getCurrentNetworkEIP1559Compatibility;\n\n  private readonly getCurrentNetworkLegacyGasAPICompatibility;\n\n  private readonly getCurrentAccountEIP1559Compatibility;\n\n  private currentChainId;\n\n  private ethQuery?: EthQuery;\n\n  private readonly clientId?: string;\n\n  #getProvider: () => ProviderProxy;\n\n  /**\n   * Creates a GasFeeController instance.\n   *\n   * @param options - The controller options.\n   * @param options.interval - The time in milliseconds to wait between polls.\n   * @param options.messenger - The controller messenger.\n   * @param options.state - The initial state.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Determines whether or not the current\n   * network is EIP-1559 compatible.\n   * @param options.getCurrentNetworkLegacyGasAPICompatibility - Determines whether or not the\n   * current network is compatible with the legacy gas price API.\n   * @param options.getCurrentAccountEIP1559Compatibility - Determines whether or not the current\n   * account is EIP-1559 compatible.\n   * @param options.getChainId - Returns the current chain ID.\n   * @param options.getProvider - Returns a network provider for the current network.\n   * @param options.onNetworkDidChange - A function for registering an event handler for the\n   * network state change event.\n   * @param options.legacyAPIEndpoint - The legacy gas price API URL. This option is primarily for\n   * testing purposes.\n   * @param options.EIP1559APIEndpoint - The EIP-1559 gas price API URL.\n   * @param options.clientId - The client ID used to identify to the gas estimation API who is\n   * asking for estimates.\n   */\n  constructor({\n    interval = 15000,\n    messenger,\n    state,\n    getCurrentNetworkEIP1559Compatibility,\n    getCurrentAccountEIP1559Compatibility,\n    getChainId,\n    getCurrentNetworkLegacyGasAPICompatibility,\n    getProvider,\n    onNetworkDidChange,\n    legacyAPIEndpoint = LEGACY_GAS_PRICES_API_URL,\n    EIP1559APIEndpoint,\n    clientId,\n  }: {\n    interval?: number;\n    messenger: GasFeeMessenger;\n    state?: GasFeeState;\n    getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n    getCurrentNetworkLegacyGasAPICompatibility: () => boolean;\n    getCurrentAccountEIP1559Compatibility?: () => boolean;\n    getChainId?: () => Hex;\n    getProvider: () => ProviderProxy;\n    onNetworkDidChange?: (listener: (state: NetworkState) => void) => void;\n    legacyAPIEndpoint?: string;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    EIP1559APIEndpoint: string;\n    clientId?: string;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    this.intervalDelay = interval;\n    this.setIntervalLength(interval);\n    this.pollTokens = new Set();\n    this.getCurrentNetworkEIP1559Compatibility =\n      getCurrentNetworkEIP1559Compatibility;\n    this.getCurrentNetworkLegacyGasAPICompatibility =\n      getCurrentNetworkLegacyGasAPICompatibility;\n    this.getCurrentAccountEIP1559Compatibility =\n      getCurrentAccountEIP1559Compatibility;\n    this.#getProvider = getProvider;\n    this.EIP1559APIEndpoint = EIP1559APIEndpoint;\n    this.legacyAPIEndpoint = legacyAPIEndpoint;\n    this.clientId = clientId;\n\n    this.ethQuery = new EthQuery(this.#getProvider());\n\n    if (onNetworkDidChange && getChainId) {\n      this.currentChainId = getChainId();\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      onNetworkDidChange(async (networkControllerState) => {\n        await this.#onNetworkControllerDidChange(networkControllerState);\n      });\n    } else {\n      const { selectedNetworkClientId } = this.messagingSystem.call(\n        'NetworkController:getState',\n      );\n      this.currentChainId = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        selectedNetworkClientId,\n      ).configuration.chainId;\n      this.messagingSystem.subscribe(\n        'NetworkController:networkDidChange',\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        async (networkControllerState) => {\n          await this.#onNetworkControllerDidChange(networkControllerState);\n        },\n      );\n    }\n  }\n\n  async resetPolling() {\n    if (this.pollTokens.size !== 0) {\n      const tokens = Array.from(this.pollTokens);\n      this.stopPolling();\n      await this.getGasFeeEstimatesAndStartPolling(tokens[0]);\n      tokens.slice(1).forEach((token) => {\n        this.pollTokens.add(token);\n      });\n    }\n  }\n\n  async fetchGasFeeEstimates(options?: FetchGasFeeEstimateOptions) {\n    return await this._fetchGasFeeEstimateData(options);\n  }\n\n  async getGasFeeEstimatesAndStartPolling(\n    pollToken: string | undefined,\n  ): Promise<string> {\n    const _pollToken = pollToken || random();\n\n    this.pollTokens.add(_pollToken);\n\n    if (this.pollTokens.size === 1) {\n      await this._fetchGasFeeEstimateData();\n      this._poll();\n    }\n\n    return _pollToken;\n  }\n\n  /**\n   * Gets and sets gasFeeEstimates in state.\n   *\n   * @param options - The gas fee estimate options.\n   * @param options.shouldUpdateState - Determines whether the state should be updated with the\n   * updated gas estimates.\n   * @returns The gas fee estimates.\n   */\n  async _fetchGasFeeEstimateData(\n    options: FetchGasFeeEstimateOptions = {},\n  ): Promise<GasFeeState> {\n    const { shouldUpdateState = true, networkClientId } = options;\n\n    let ethQuery,\n      isEIP1559Compatible,\n      isLegacyGasAPICompatible,\n      decimalChainId: number;\n\n    if (networkClientId !== undefined) {\n      const networkClient = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        networkClientId,\n      );\n      isLegacyGasAPICompatible = networkClient.configuration.chainId === '0x38';\n\n      decimalChainId = convertHexToDecimal(networkClient.configuration.chainId);\n\n      try {\n        const result = await this.messagingSystem.call(\n          'NetworkController:getEIP1559Compatibility',\n          networkClientId,\n        );\n        isEIP1559Compatible = result || false;\n      } catch {\n        isEIP1559Compatible = false;\n      }\n      ethQuery = new EthQuery(networkClient.provider);\n    }\n\n    ethQuery ??= this.ethQuery;\n\n    isLegacyGasAPICompatible ??=\n      this.getCurrentNetworkLegacyGasAPICompatibility();\n\n    decimalChainId ??= convertHexToDecimal(this.currentChainId);\n\n    try {\n      isEIP1559Compatible ??= await this.getEIP1559Compatibility();\n    } catch (e) {\n      console.error(e);\n      isEIP1559Compatible ??= false;\n    }\n\n    const gasFeeCalculations = await determineGasFeeCalculations({\n      isEIP1559Compatible,\n      isLegacyGasAPICompatible,\n      fetchGasEstimates,\n      fetchGasEstimatesUrl: this.EIP1559APIEndpoint.replace(\n        '<chain_id>',\n        `${decimalChainId}`,\n      ),\n      fetchLegacyGasPriceEstimates,\n      fetchLegacyGasPriceEstimatesUrl: this.legacyAPIEndpoint.replace(\n        '<chain_id>',\n        `${decimalChainId}`,\n      ),\n      fetchEthGasPriceEstimate,\n      calculateTimeEstimate,\n      clientId: this.clientId,\n      ethQuery,\n      nonRPCGasFeeApisDisabled: this.state.nonRPCGasFeeApisDisabled,\n    });\n\n    if (shouldUpdateState) {\n      const chainId = toHex(decimalChainId);\n      this.update((state) => {\n        if (this.currentChainId === chainId) {\n          state.gasFeeEstimates = gasFeeCalculations.gasFeeEstimates;\n          state.estimatedGasFeeTimeBounds =\n            gasFeeCalculations.estimatedGasFeeTimeBounds;\n          state.gasEstimateType = gasFeeCalculations.gasEstimateType;\n        }\n        state.gasFeeEstimatesByChainId ??= {};\n        state.gasFeeEstimatesByChainId[chainId] = {\n          gasFeeEstimates: gasFeeCalculations.gasFeeEstimates,\n          estimatedGasFeeTimeBounds:\n            gasFeeCalculations.estimatedGasFeeTimeBounds,\n          gasEstimateType: gasFeeCalculations.gasEstimateType,\n        } as SingleChainGasFeeState;\n      });\n    }\n\n    return gasFeeCalculations;\n  }\n\n  /**\n   * Remove the poll token, and stop polling if the set of poll tokens is empty.\n   *\n   * @param pollToken - The poll token to disconnect.\n   */\n  disconnectPoller(pollToken: string) {\n    this.pollTokens.delete(pollToken);\n    if (this.pollTokens.size === 0) {\n      this.stopPolling();\n    }\n  }\n\n  stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n    this.pollTokens.clear();\n    this.resetState();\n  }\n\n  /**\n   * Prepare to discard this controller.\n   *\n   * This stops any active polling.\n   */\n  override destroy() {\n    super.destroy();\n    this.stopPolling();\n  }\n\n  private _poll() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.intervalId = setInterval(async () => {\n      await safelyExecute(() => this._fetchGasFeeEstimateData());\n    }, this.intervalDelay);\n  }\n\n  /**\n   * Fetching token list from the Token Service API.\n   *\n   * @private\n   * @param input - The input for the poll.\n   * @param input.networkClientId - The ID of the network client triggering the fetch.\n   * @returns A promise that resolves when this operation completes.\n   */\n  async _executePoll({ networkClientId }: GasFeePollingInput): Promise<void> {\n    await this._fetchGasFeeEstimateData({ networkClientId });\n  }\n\n  private resetState() {\n    this.update(() => {\n      return defaultState;\n    });\n  }\n\n  private async getEIP1559Compatibility() {\n    const currentNetworkIsEIP1559Compatible =\n      await this.getCurrentNetworkEIP1559Compatibility();\n    const currentAccountIsEIP1559Compatible =\n      this.getCurrentAccountEIP1559Compatibility?.() ?? true;\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n\n  getTimeEstimate(\n    maxPriorityFeePerGas: string,\n    maxFeePerGas: string,\n  ): EstimatedGasFeeTimeBounds | Record<string, never> {\n    if (\n      !this.state.gasFeeEstimates ||\n      this.state.gasEstimateType !== GAS_ESTIMATE_TYPES.FEE_MARKET\n    ) {\n      return {};\n    }\n    return calculateTimeEstimate(\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      this.state.gasFeeEstimates,\n    );\n  }\n\n  async #onNetworkControllerDidChange({\n    selectedNetworkClientId,\n  }: NetworkState) {\n    const newChainId = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    ).configuration.chainId;\n\n    if (newChainId !== this.currentChainId) {\n      this.ethQuery = new EthQuery(this.#getProvider());\n      await this.resetPolling();\n\n      this.currentChainId = newChainId;\n    }\n  }\n\n  enableNonRPCGasFeeApis() {\n    this.update((state) => {\n      state.nonRPCGasFeeApisDisabled = false;\n    });\n  }\n\n  disableNonRPCGasFeeApis() {\n    this.update((state) => {\n      state.nonRPCGasFeeApisDisabled = true;\n    });\n  }\n}\n\nexport default GasFeeController;\n"]}
\ No newline at end of file
+{"version":3,"file":"GasFeeController.cjs","sourceRoot":"","sources":["../src/GasFeeController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport {\n  convertHexToDecimal,\n  safelyExecute,\n  toHex,\n} from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetEIP1559CompatibilityAction,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerNetworkDidChangeEvent,\n  NetworkState,\n  ProviderProxy,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { Hex } from '@metamask/utils';\nimport { v1 as random } from 'uuid';\n\nimport determineGasFeeCalculations from './determineGasFeeCalculations';\nimport { fetchEthGasPriceEstimate, calculateTimeEstimate } from './gas-util';\n\n// TODO: Either fix this lint violation or explain why it's necessary to ignore.\n\nexport type unknownString = 'unknown';\n\n// Fee Market describes the way gas is set after the london hardfork, and was\n// defined by EIP-1559.\nexport type FeeMarketEstimateType = 'fee-market';\n// Legacy describes gasPrice estimates from before london hardfork, when the\n// user is connected to mainnet and are presented with fast/average/slow\n// estimate levels to choose from.\nexport type LegacyEstimateType = 'legacy';\n// EthGasPrice describes a gasPrice estimate received from eth_gasPrice. Post\n// london this value should only be used for legacy type transactions when on\n// networks that support EIP-1559. This type of estimate is the most accurate\n// to display on custom networks that don't support EIP-1559.\nexport type EthGasPriceEstimateType = 'eth_gasPrice';\n// NoEstimate describes the state of the controller before receiving its first\n// estimate.\nexport type NoEstimateType = 'none';\n\n/**\n * Indicates which type of gasEstimate the controller is currently returning.\n * This is useful as a way of asserting that the shape of gasEstimates matches\n * expectations. NONE is a special case indicating that no previous gasEstimate\n * has been fetched.\n */\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: 'fee-market' as FeeMarketEstimateType,\n  LEGACY: 'legacy' as LegacyEstimateType,\n  ETH_GASPRICE: 'eth_gasPrice' as EthGasPriceEstimateType,\n  NONE: 'none' as NoEstimateType,\n};\n\nexport type GasEstimateType =\n  | FeeMarketEstimateType\n  | EthGasPriceEstimateType\n  | LegacyEstimateType\n  | NoEstimateType;\n\nexport type EstimatedGasFeeTimeBounds = {\n  lowerTimeBound: number | null;\n  upperTimeBound: number | unknownString;\n};\n\n/**\n * @type EthGasPriceEstimate\n *\n * A single gas price estimate for networks and accounts that don't support EIP-1559\n * This estimate comes from eth_gasPrice but is converted to dec gwei to match other\n * return values\n * @property gasPrice - A GWEI dec string\n */\n\nexport type EthGasPriceEstimate = {\n  gasPrice: string;\n};\n\n/**\n * @type LegacyGasPriceEstimate\n *\n * A set of gas price estimates for networks and accounts that don't support EIP-1559\n * These estimates include low, medium and high all as strings representing gwei in\n * decimal format.\n * @property high - gasPrice, in decimal gwei string format, suggested for fast inclusion\n * @property medium - gasPrice, in decimal gwei string format, suggested for avg inclusion\n * @property low - gasPrice, in decimal gwei string format, suggested for slow inclusion\n */\nexport type LegacyGasPriceEstimate = {\n  high: string;\n  medium: string;\n  low: string;\n};\n\n/**\n * @type Eip1559GasFee\n *\n * Data necessary to provide an estimate of a gas fee with a specific tip\n * @property minWaitTimeEstimate - The fastest the transaction will take, in milliseconds\n * @property maxWaitTimeEstimate - The slowest the transaction will take, in milliseconds\n * @property suggestedMaxPriorityFeePerGas - A suggested \"tip\", a GWEI hex number\n * @property suggestedMaxFeePerGas - A suggested max fee, the most a user will pay. a GWEI hex number\n */\nexport type Eip1559GasFee = {\n  minWaitTimeEstimate: number; // a time duration in milliseconds\n  maxWaitTimeEstimate: number; // a time duration in milliseconds\n  suggestedMaxPriorityFeePerGas: string; // a GWEI decimal number\n  suggestedMaxFeePerGas: string; // a GWEI decimal number\n};\n\n/**\n * @type GasFeeEstimates\n *\n * Data necessary to provide multiple GasFee estimates, and supporting information, to the user\n * @property low - A GasFee for a minimum necessary combination of tip and maxFee\n * @property medium - A GasFee for a recommended combination of tip and maxFee\n * @property high - A GasFee for a high combination of tip and maxFee\n * @property estimatedBaseFee - An estimate of what the base fee will be for the pending/next block. A GWEI dec number\n * @property networkCongestion - A normalized number that can be used to gauge the congestion\n * level of the network, with 0 meaning not congested and 1 meaning extremely congested\n */\nexport type GasFeeEstimates = SourcedGasFeeEstimates | FallbackGasFeeEstimates;\n\ntype SourcedGasFeeEstimates = {\n  low: Eip1559GasFee;\n  medium: Eip1559GasFee;\n  high: Eip1559GasFee;\n  estimatedBaseFee: string;\n  historicalBaseFeeRange: [string, string];\n  baseFeeTrend: 'up' | 'down' | 'level';\n  latestPriorityFeeRange: [string, string];\n  historicalPriorityFeeRange: [string, string];\n  priorityFeeTrend: 'up' | 'down' | 'level';\n  networkCongestion: number;\n};\n\ntype FallbackGasFeeEstimates = {\n  low: Eip1559GasFee;\n  medium: Eip1559GasFee;\n  high: Eip1559GasFee;\n  estimatedBaseFee: string;\n  historicalBaseFeeRange: null;\n  baseFeeTrend: null;\n  latestPriorityFeeRange: null;\n  historicalPriorityFeeRange: null;\n  priorityFeeTrend: null;\n  networkCongestion: null;\n};\n\nconst metadata = {\n  gasFeeEstimatesByChainId: {\n    persist: true,\n    anonymous: false,\n  },\n  gasFeeEstimates: { persist: true, anonymous: false },\n  estimatedGasFeeTimeBounds: { persist: true, anonymous: false },\n  gasEstimateType: { persist: true, anonymous: false },\n  nonRPCGasFeeApisDisabled: { persist: true, anonymous: false },\n};\n\nexport type GasFeeStateEthGasPrice = {\n  gasFeeEstimates: EthGasPriceEstimate;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: EthGasPriceEstimateType;\n};\n\nexport type GasFeeStateFeeMarket = {\n  gasFeeEstimates: GasFeeEstimates;\n  estimatedGasFeeTimeBounds: EstimatedGasFeeTimeBounds | Record<string, never>;\n  gasEstimateType: FeeMarketEstimateType;\n};\n\nexport type GasFeeStateLegacy = {\n  gasFeeEstimates: LegacyGasPriceEstimate;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: LegacyEstimateType;\n};\n\nexport type GasFeeStateNoEstimates = {\n  gasFeeEstimates: Record<string, never>;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: NoEstimateType;\n};\n\nexport type FetchGasFeeEstimateOptions = {\n  shouldUpdateState?: boolean;\n  networkClientId?: NetworkClientId;\n};\n\n/**\n * @type GasFeeState\n *\n * Gas Fee controller state\n * @property gasFeeEstimates - Gas fee estimate data based on new EIP-1559 properties\n * @property estimatedGasFeeTimeBounds - Estimates representing the minimum and maximum\n */\nexport type SingleChainGasFeeState =\n  | GasFeeStateEthGasPrice\n  | GasFeeStateFeeMarket\n  | GasFeeStateLegacy\n  | GasFeeStateNoEstimates;\n\nexport type GasFeeEstimatesByChainId = {\n  gasFeeEstimatesByChainId?: Record<string, SingleChainGasFeeState>;\n};\n\nexport type GasFeeState = GasFeeEstimatesByChainId &\n  SingleChainGasFeeState & {\n    nonRPCGasFeeApisDisabled?: boolean;\n  };\n\nconst name = 'GasFeeController';\n\nexport type GasFeeStateChange = ControllerStateChangeEvent<\n  typeof name,\n  GasFeeState\n>;\n\nexport type GetGasFeeState = ControllerGetStateAction<typeof name, GasFeeState>;\n\nexport type GasFeeControllerActions = GetGasFeeState;\n\nexport type GasFeeControllerEvents = GasFeeStateChange;\n\ntype AllowedActions =\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetEIP1559CompatibilityAction;\n\ntype GasFeeMessenger = RestrictedMessenger<\n  typeof name,\n  GasFeeControllerActions | AllowedActions,\n  GasFeeControllerEvents | NetworkControllerNetworkDidChangeEvent,\n  AllowedActions['type'],\n  NetworkControllerNetworkDidChangeEvent['type']\n>;\n\nconst defaultState: GasFeeState = {\n  gasFeeEstimatesByChainId: {},\n  gasFeeEstimates: {},\n  estimatedGasFeeTimeBounds: {},\n  gasEstimateType: GAS_ESTIMATE_TYPES.NONE,\n  nonRPCGasFeeApisDisabled: false,\n};\n\n/** The input to start polling for the {@link GasFeeController} */\ntype GasFeePollingInput = {\n  networkClientId: NetworkClientId;\n};\n\n/**\n * Controller that retrieves gas fee estimate data and polls for updated data on a set interval\n */\nexport class GasFeeController extends StaticIntervalPollingController<GasFeePollingInput>()<\n  typeof name,\n  GasFeeState,\n  GasFeeMessenger\n> {\n  private intervalId?: ReturnType<typeof setTimeout>;\n\n  private readonly intervalDelay;\n\n  private readonly pollTokens: Set<string>;\n\n  private readonly getCurrentNetworkEIP1559Compatibility;\n\n  private readonly getCurrentNetworkLegacyGasAPICompatibility;\n\n  private readonly getCurrentAccountEIP1559Compatibility;\n\n  private currentChainId;\n\n  private ethQuery?: EthQuery;\n\n  readonly #getProvider: () => ProviderProxy;\n\n  /**\n   * Creates a GasFeeController instance.\n   *\n   * @param options - The controller options.\n   * @param options.interval - The time in milliseconds to wait between polls.\n   * @param options.messenger - The controller messenger.\n   * @param options.state - The initial state.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Determines whether or not the current\n   * network is EIP-1559 compatible.\n   * @param options.getCurrentNetworkLegacyGasAPICompatibility - Determines whether or not the\n   * current network is compatible with the legacy gas price API.\n   * @param options.getCurrentAccountEIP1559Compatibility - Determines whether or not the current\n   * account is EIP-1559 compatible.\n   * @param options.getChainId - Returns the current chain ID.\n   * @param options.getProvider - Returns a network provider for the current network.\n   * @param options.onNetworkDidChange - A function for registering an event handler for the\n   * network state change event.\n   */\n  constructor({\n    interval = 15000,\n    messenger,\n    state,\n    getCurrentNetworkEIP1559Compatibility,\n    getCurrentAccountEIP1559Compatibility,\n    getChainId,\n    getCurrentNetworkLegacyGasAPICompatibility,\n    getProvider,\n    onNetworkDidChange,\n  }: {\n    interval?: number;\n    messenger: GasFeeMessenger;\n    state?: GasFeeState;\n    getCurrentNetworkEIP1559Compatibility?: () => Promise<boolean>;\n    getCurrentNetworkLegacyGasAPICompatibility?: () => boolean;\n    getCurrentAccountEIP1559Compatibility?: () => boolean;\n    getChainId?: () => Hex;\n    getProvider: () => ProviderProxy;\n    onNetworkDidChange?: (listener: (state: NetworkState) => void) => void;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    this.intervalDelay = interval;\n    this.setIntervalLength(interval);\n    this.pollTokens = new Set();\n    this.getCurrentNetworkEIP1559Compatibility =\n      getCurrentNetworkEIP1559Compatibility;\n    this.getCurrentNetworkLegacyGasAPICompatibility =\n      getCurrentNetworkLegacyGasAPICompatibility;\n    this.getCurrentAccountEIP1559Compatibility =\n      getCurrentAccountEIP1559Compatibility;\n    this.#getProvider = getProvider;\n\n    this.ethQuery = new EthQuery(this.#getProvider());\n\n    if (onNetworkDidChange && getChainId) {\n      this.currentChainId = getChainId();\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      onNetworkDidChange(async (networkControllerState) => {\n        await this.#onNetworkControllerDidChange(networkControllerState);\n      });\n    } else {\n      const { selectedNetworkClientId } = this.messagingSystem.call(\n        'NetworkController:getState',\n      );\n      this.currentChainId = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        selectedNetworkClientId,\n      ).configuration.chainId;\n      this.messagingSystem.subscribe(\n        'NetworkController:networkDidChange',\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        async (networkControllerState) => {\n          await this.#onNetworkControllerDidChange(networkControllerState);\n        },\n      );\n    }\n  }\n\n  async resetPolling() {\n    if (this.pollTokens.size !== 0) {\n      const tokens = Array.from(this.pollTokens);\n      this.stopPolling();\n      await this.getGasFeeEstimatesAndStartPolling(tokens[0]);\n      tokens.slice(1).forEach((token) => {\n        this.pollTokens.add(token);\n      });\n    }\n  }\n\n  async fetchGasFeeEstimates(options?: FetchGasFeeEstimateOptions) {\n    return await this._fetchGasFeeEstimateData(options);\n  }\n\n  async getGasFeeEstimatesAndStartPolling(\n    pollToken: string | undefined,\n  ): Promise<string> {\n    const _pollToken = pollToken || random();\n\n    this.pollTokens.add(_pollToken);\n\n    if (this.pollTokens.size === 1) {\n      await this._fetchGasFeeEstimateData();\n      this._poll();\n    }\n\n    return _pollToken;\n  }\n\n  /**\n   * Gets and sets gasFeeEstimates in state.\n   *\n   * @param options - The gas fee estimate options.\n   * @param options.shouldUpdateState - Determines whether the state should be updated with the\n   * updated gas estimates.\n   * @returns The gas fee estimates.\n   */\n  async _fetchGasFeeEstimateData(\n    options: FetchGasFeeEstimateOptions = {},\n  ): Promise<GasFeeState> {\n    const { shouldUpdateState = true, networkClientId } = options;\n\n    let ethQuery,\n      isEIP1559Compatible,\n      isLegacyGasAPICompatible,\n      decimalChainId: number;\n\n    if (networkClientId !== undefined) {\n      const networkClient = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        networkClientId,\n      );\n      isLegacyGasAPICompatible = networkClient.configuration.chainId === '0x38';\n\n      decimalChainId = convertHexToDecimal(networkClient.configuration.chainId);\n\n      try {\n        const result = await this.messagingSystem.call(\n          'NetworkController:getEIP1559Compatibility',\n          networkClientId,\n        );\n        isEIP1559Compatible = result || false;\n      } catch {\n        isEIP1559Compatible = false;\n      }\n      ethQuery = new EthQuery(networkClient.provider);\n    }\n\n    ethQuery ??= this.ethQuery;\n\n    isLegacyGasAPICompatible ??=\n      this.getCurrentNetworkLegacyGasAPICompatibility?.() ?? true;\n\n    decimalChainId ??= convertHexToDecimal(this.currentChainId);\n\n    try {\n      isEIP1559Compatible ??= await this.getEIP1559Compatibility();\n    } catch (e) {\n      console.error(e);\n      isEIP1559Compatible ??= false;\n    }\n\n    const gasFeeCalculations = await determineGasFeeCalculations({\n      isEIP1559Compatible,\n      isLegacyGasAPICompatible,\n      fetchEthGasPriceEstimate,\n      calculateTimeEstimate,\n      ethQuery,\n    });\n\n    if (shouldUpdateState) {\n      const chainId = toHex(decimalChainId);\n      this.update((state) => {\n        if (this.currentChainId === chainId) {\n          state.gasFeeEstimates = gasFeeCalculations.gasFeeEstimates;\n          state.estimatedGasFeeTimeBounds =\n            gasFeeCalculations.estimatedGasFeeTimeBounds;\n          state.gasEstimateType = gasFeeCalculations.gasEstimateType;\n        }\n        state.gasFeeEstimatesByChainId ??= {};\n        state.gasFeeEstimatesByChainId[chainId] = {\n          gasFeeEstimates: gasFeeCalculations.gasFeeEstimates,\n          estimatedGasFeeTimeBounds:\n            gasFeeCalculations.estimatedGasFeeTimeBounds,\n          gasEstimateType: gasFeeCalculations.gasEstimateType,\n        } as SingleChainGasFeeState;\n      });\n    }\n\n    return gasFeeCalculations;\n  }\n\n  /**\n   * Remove the poll token, and stop polling if the set of poll tokens is empty.\n   *\n   * @param pollToken - The poll token to disconnect.\n   */\n  disconnectPoller(pollToken: string) {\n    this.pollTokens.delete(pollToken);\n    if (this.pollTokens.size === 0) {\n      this.stopPolling();\n    }\n  }\n\n  stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n    this.pollTokens.clear();\n    this.resetState();\n  }\n\n  /**\n   * Prepare to discard this controller.\n   *\n   * This stops any active polling.\n   */\n  override destroy() {\n    super.destroy();\n    this.stopPolling();\n  }\n\n  private _poll() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.intervalId = setInterval(async () => {\n      await safelyExecute(() => this._fetchGasFeeEstimateData());\n    }, this.intervalDelay);\n  }\n\n  /**\n   * Fetching token list from the Token Service API.\n   *\n   * @private\n   * @param input - The input for the poll.\n   * @param input.networkClientId - The ID of the network client triggering the fetch.\n   * @returns A promise that resolves when this operation completes.\n   */\n  async _executePoll({ networkClientId }: GasFeePollingInput): Promise<void> {\n    await this._fetchGasFeeEstimateData({ networkClientId });\n  }\n\n  private resetState() {\n    this.update(() => {\n      return defaultState;\n    });\n  }\n\n  private async getEIP1559Compatibility() {\n    const currentNetworkIsEIP1559Compatible =\n      (await this.getCurrentNetworkEIP1559Compatibility?.()) ?? true;\n    const currentAccountIsEIP1559Compatible =\n      this.getCurrentAccountEIP1559Compatibility?.() ?? true;\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n\n  getTimeEstimate(\n    maxPriorityFeePerGas: string,\n    maxFeePerGas: string,\n  ): EstimatedGasFeeTimeBounds | Record<string, never> {\n    if (\n      !this.state.gasFeeEstimates ||\n      this.state.gasEstimateType !== GAS_ESTIMATE_TYPES.FEE_MARKET\n    ) {\n      return {};\n    }\n    return calculateTimeEstimate(\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      this.state.gasFeeEstimates,\n    );\n  }\n\n  async #onNetworkControllerDidChange({\n    selectedNetworkClientId,\n  }: NetworkState) {\n    const newChainId = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    ).configuration.chainId;\n\n    if (newChainId !== this.currentChainId) {\n      this.ethQuery = new EthQuery(this.#getProvider());\n      await this.resetPolling();\n\n      this.currentChainId = newChainId;\n    }\n  }\n\n  // Note: This seems to never have been working as intended\n  enableNonRPCGasFeeApis() {\n    this.update((state) => {\n      state.nonRPCGasFeeApisDisabled = false;\n    });\n  }\n\n  disableNonRPCGasFeeApis() {\n    this.update((state) => {\n      state.nonRPCGasFeeApisDisabled = true;\n    });\n  }\n}\n\nexport default GasFeeController;\n"]}
\ No newline at end of file
diff --git a/dist/GasFeeController.d.cts b/dist/GasFeeController.d.cts
index 588472335aa79222a14188fa1ea1501576f110a2..97a57b06a4aea92b0f2db72c7f6b6773a50c4373 100644
--- a/dist/GasFeeController.d.cts
+++ b/dist/GasFeeController.d.cts
@@ -1,7 +1,6 @@
 import type { ControllerGetStateAction, ControllerStateChangeEvent, RestrictedMessenger } from "@metamask/base-controller";
 import type { NetworkClientId, NetworkControllerGetEIP1559CompatibilityAction, NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetStateAction, NetworkControllerNetworkDidChangeEvent, NetworkState, ProviderProxy } from "@metamask/network-controller";
 import type { Hex } from "@metamask/utils";
-export declare const LEGACY_GAS_PRICES_API_URL = "https://api.metaswap.codefi.network/gasPrices";
 export type unknownString = 'unknown';
 export type FeeMarketEstimateType = 'fee-market';
 export type LegacyEstimateType = 'legacy';
@@ -173,14 +172,11 @@ export declare class GasFeeController extends GasFeeController_base<typeof name,
     private intervalId?;
     private readonly intervalDelay;
     private readonly pollTokens;
-    private readonly legacyAPIEndpoint;
-    private readonly EIP1559APIEndpoint;
     private readonly getCurrentNetworkEIP1559Compatibility;
     private readonly getCurrentNetworkLegacyGasAPICompatibility;
     private readonly getCurrentAccountEIP1559Compatibility;
     private currentChainId;
     private ethQuery?;
-    private readonly clientId?;
     /**
      * Creates a GasFeeController instance.
      *
@@ -198,25 +194,17 @@ export declare class GasFeeController extends GasFeeController_base<typeof name,
      * @param options.getProvider - Returns a network provider for the current network.
      * @param options.onNetworkDidChange - A function for registering an event handler for the
      * network state change event.
-     * @param options.legacyAPIEndpoint - The legacy gas price API URL. This option is primarily for
-     * testing purposes.
-     * @param options.EIP1559APIEndpoint - The EIP-1559 gas price API URL.
-     * @param options.clientId - The client ID used to identify to the gas estimation API who is
-     * asking for estimates.
      */
-    constructor({ interval, messenger, state, getCurrentNetworkEIP1559Compatibility, getCurrentAccountEIP1559Compatibility, getChainId, getCurrentNetworkLegacyGasAPICompatibility, getProvider, onNetworkDidChange, legacyAPIEndpoint, EIP1559APIEndpoint, clientId, }: {
+    constructor({ interval, messenger, state, getCurrentNetworkEIP1559Compatibility, getCurrentAccountEIP1559Compatibility, getChainId, getCurrentNetworkLegacyGasAPICompatibility, getProvider, onNetworkDidChange, }: {
         interval?: number;
         messenger: GasFeeMessenger;
         state?: GasFeeState;
-        getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;
-        getCurrentNetworkLegacyGasAPICompatibility: () => boolean;
+        getCurrentNetworkEIP1559Compatibility?: () => Promise<boolean>;
+        getCurrentNetworkLegacyGasAPICompatibility?: () => boolean;
         getCurrentAccountEIP1559Compatibility?: () => boolean;
         getChainId?: () => Hex;
         getProvider: () => ProviderProxy;
         onNetworkDidChange?: (listener: (state: NetworkState) => void) => void;
-        legacyAPIEndpoint?: string;
-        EIP1559APIEndpoint: string;
-        clientId?: string;
     });
     resetPolling(): Promise<void>;
     fetchGasFeeEstimates(options?: FetchGasFeeEstimateOptions): Promise<GasFeeState>;
diff --git a/dist/GasFeeController.d.cts.map b/dist/GasFeeController.d.cts.map
index 3cccf4c3f3d2fa2e4bb93a5e1ec8166f845ac4cb..6f6603f332ad139741197ee507cb10f6871945eb 100644
--- a/dist/GasFeeController.d.cts.map
+++ b/dist/GasFeeController.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"GasFeeController.d.cts","sourceRoot":"","sources":["../src/GasFeeController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"GasFeeController.d.cts","sourceRoot":"","sources":["../src/GasFeeController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/GasFeeController.d.mts b/dist/GasFeeController.d.mts
index 7ed8b2dff0c46ed5261d30474f3251b57322963d..52103eef770fccb4f08b98761f02e6aa0547a54d 100644
--- a/dist/GasFeeController.d.mts
+++ b/dist/GasFeeController.d.mts
@@ -1,7 +1,6 @@
 import type { ControllerGetStateAction, ControllerStateChangeEvent, RestrictedMessenger } from "@metamask/base-controller";
 import type { NetworkClientId, NetworkControllerGetEIP1559CompatibilityAction, NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetStateAction, NetworkControllerNetworkDidChangeEvent, NetworkState, ProviderProxy } from "@metamask/network-controller";
 import type { Hex } from "@metamask/utils";
-export declare const LEGACY_GAS_PRICES_API_URL = "https://api.metaswap.codefi.network/gasPrices";
 export type unknownString = 'unknown';
 export type FeeMarketEstimateType = 'fee-market';
 export type LegacyEstimateType = 'legacy';
@@ -173,14 +172,11 @@ export declare class GasFeeController extends GasFeeController_base<typeof name,
     private intervalId?;
     private readonly intervalDelay;
     private readonly pollTokens;
-    private readonly legacyAPIEndpoint;
-    private readonly EIP1559APIEndpoint;
     private readonly getCurrentNetworkEIP1559Compatibility;
     private readonly getCurrentNetworkLegacyGasAPICompatibility;
     private readonly getCurrentAccountEIP1559Compatibility;
     private currentChainId;
     private ethQuery?;
-    private readonly clientId?;
     /**
      * Creates a GasFeeController instance.
      *
@@ -198,25 +194,17 @@ export declare class GasFeeController extends GasFeeController_base<typeof name,
      * @param options.getProvider - Returns a network provider for the current network.
      * @param options.onNetworkDidChange - A function for registering an event handler for the
      * network state change event.
-     * @param options.legacyAPIEndpoint - The legacy gas price API URL. This option is primarily for
-     * testing purposes.
-     * @param options.EIP1559APIEndpoint - The EIP-1559 gas price API URL.
-     * @param options.clientId - The client ID used to identify to the gas estimation API who is
-     * asking for estimates.
      */
-    constructor({ interval, messenger, state, getCurrentNetworkEIP1559Compatibility, getCurrentAccountEIP1559Compatibility, getChainId, getCurrentNetworkLegacyGasAPICompatibility, getProvider, onNetworkDidChange, legacyAPIEndpoint, EIP1559APIEndpoint, clientId, }: {
+    constructor({ interval, messenger, state, getCurrentNetworkEIP1559Compatibility, getCurrentAccountEIP1559Compatibility, getChainId, getCurrentNetworkLegacyGasAPICompatibility, getProvider, onNetworkDidChange, }: {
         interval?: number;
         messenger: GasFeeMessenger;
         state?: GasFeeState;
-        getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;
-        getCurrentNetworkLegacyGasAPICompatibility: () => boolean;
+        getCurrentNetworkEIP1559Compatibility?: () => Promise<boolean>;
+        getCurrentNetworkLegacyGasAPICompatibility?: () => boolean;
         getCurrentAccountEIP1559Compatibility?: () => boolean;
         getChainId?: () => Hex;
         getProvider: () => ProviderProxy;
         onNetworkDidChange?: (listener: (state: NetworkState) => void) => void;
-        legacyAPIEndpoint?: string;
-        EIP1559APIEndpoint: string;
-        clientId?: string;
     });
     resetPolling(): Promise<void>;
     fetchGasFeeEstimates(options?: FetchGasFeeEstimateOptions): Promise<GasFeeState>;
diff --git a/dist/GasFeeController.d.mts.map b/dist/GasFeeController.d.mts.map
index dca425e322114ba29b4c87c9c72e21bd54e42f5f..2e1648191e3178e6bee901ae704d23c85687e5ff 100644
--- a/dist/GasFeeController.d.mts.map
+++ b/dist/GasFeeController.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"GasFeeController.d.mts","sourceRoot":"","sources":["../src/GasFeeController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"GasFeeController.d.mts","sourceRoot":"","sources":["../src/GasFeeController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/GasFeeController.mjs b/dist/GasFeeController.mjs
index e876c15f967c99267640823f48ae712d0b0b2b08..8e43e812237938b2d649192dac4a6e6a74d38c10 100644
--- a/dist/GasFeeController.mjs
+++ b/dist/GasFeeController.mjs
@@ -22,8 +22,7 @@ const EthQuery = $importDefault($EthQuery);
 import { StaticIntervalPollingController } from "@metamask/polling-controller";
 import { v1 as random } from "uuid";
 import determineGasFeeCalculations from "./determineGasFeeCalculations.mjs";
-import { fetchGasEstimates, fetchLegacyGasPriceEstimates, fetchEthGasPriceEstimate, calculateTimeEstimate } from "./gas-util.mjs";
-export const LEGACY_GAS_PRICES_API_URL = `https://api.metaswap.codefi.network/gasPrices`;
+import { fetchEthGasPriceEstimate, calculateTimeEstimate } from "./gas-util.mjs";
 /**
  * Indicates which type of gasEstimate the controller is currently returning.
  * This is useful as a way of asserting that the shape of gasEstimates matches
@@ -75,13 +74,8 @@ export class GasFeeController extends StaticIntervalPollingController() {
      * @param options.getProvider - Returns a network provider for the current network.
      * @param options.onNetworkDidChange - A function for registering an event handler for the
      * network state change event.
-     * @param options.legacyAPIEndpoint - The legacy gas price API URL. This option is primarily for
-     * testing purposes.
-     * @param options.EIP1559APIEndpoint - The EIP-1559 gas price API URL.
-     * @param options.clientId - The client ID used to identify to the gas estimation API who is
-     * asking for estimates.
      */
-    constructor({ interval = 15000, messenger, state, getCurrentNetworkEIP1559Compatibility, getCurrentAccountEIP1559Compatibility, getChainId, getCurrentNetworkLegacyGasAPICompatibility, getProvider, onNetworkDidChange, legacyAPIEndpoint = LEGACY_GAS_PRICES_API_URL, EIP1559APIEndpoint, clientId, }) {
+    constructor({ interval = 15000, messenger, state, getCurrentNetworkEIP1559Compatibility, getCurrentAccountEIP1559Compatibility, getChainId, getCurrentNetworkLegacyGasAPICompatibility, getProvider, onNetworkDidChange, }) {
         super({
             name,
             metadata,
@@ -100,9 +94,6 @@ export class GasFeeController extends StaticIntervalPollingController() {
         this.getCurrentAccountEIP1559Compatibility =
             getCurrentAccountEIP1559Compatibility;
         __classPrivateFieldSet(this, _GasFeeController_getProvider, getProvider, "f");
-        this.EIP1559APIEndpoint = EIP1559APIEndpoint;
-        this.legacyAPIEndpoint = legacyAPIEndpoint;
-        this.clientId = clientId;
         this.ethQuery = new EthQuery(__classPrivateFieldGet(this, _GasFeeController_getProvider, "f").call(this));
         if (onNetworkDidChange && getChainId) {
             this.currentChainId = getChainId();
@@ -170,7 +161,7 @@ export class GasFeeController extends StaticIntervalPollingController() {
             ethQuery = new EthQuery(networkClient.provider);
         }
         ethQuery ?? (ethQuery = this.ethQuery);
-        isLegacyGasAPICompatible ?? (isLegacyGasAPICompatible = this.getCurrentNetworkLegacyGasAPICompatibility());
+        isLegacyGasAPICompatible ?? (isLegacyGasAPICompatible = this.getCurrentNetworkLegacyGasAPICompatibility?.() ?? true);
         decimalChainId ?? (decimalChainId = convertHexToDecimal(this.currentChainId));
         try {
             isEIP1559Compatible ?? (isEIP1559Compatible = await this.getEIP1559Compatibility());
@@ -182,15 +173,9 @@ export class GasFeeController extends StaticIntervalPollingController() {
         const gasFeeCalculations = await determineGasFeeCalculations({
             isEIP1559Compatible,
             isLegacyGasAPICompatible,
-            fetchGasEstimates,
-            fetchGasEstimatesUrl: this.EIP1559APIEndpoint.replace('<chain_id>', `${decimalChainId}`),
-            fetchLegacyGasPriceEstimates,
-            fetchLegacyGasPriceEstimatesUrl: this.legacyAPIEndpoint.replace('<chain_id>', `${decimalChainId}`),
             fetchEthGasPriceEstimate,
             calculateTimeEstimate,
-            clientId: this.clientId,
             ethQuery,
-            nonRPCGasFeeApisDisabled: this.state.nonRPCGasFeeApisDisabled,
         });
         if (shouldUpdateState) {
             const chainId = toHex(decimalChainId);
@@ -265,7 +250,7 @@ export class GasFeeController extends StaticIntervalPollingController() {
         });
     }
     async getEIP1559Compatibility() {
-        const currentNetworkIsEIP1559Compatible = await this.getCurrentNetworkEIP1559Compatibility();
+        const currentNetworkIsEIP1559Compatible = (await this.getCurrentNetworkEIP1559Compatibility?.()) ?? true;
         const currentAccountIsEIP1559Compatible = this.getCurrentAccountEIP1559Compatibility?.() ?? true;
         return (currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible);
     }
@@ -276,6 +261,7 @@ export class GasFeeController extends StaticIntervalPollingController() {
         }
         return calculateTimeEstimate(maxPriorityFeePerGas, maxFeePerGas, this.state.gasFeeEstimates);
     }
+    // Note: This seems to never have been working as intended
     enableNonRPCGasFeeApis() {
         this.update((state) => {
             state.nonRPCGasFeeApisDisabled = false;
diff --git a/dist/GasFeeController.mjs.map b/dist/GasFeeController.mjs.map
index 479186c5e2685c813a65246425102802ab0f575e..29e52d039061c98dbf4997d92c77eb76a3c54e9f 100644
--- a/dist/GasFeeController.mjs.map
+++ b/dist/GasFeeController.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"GasFeeController.mjs","sourceRoot":"","sources":["../src/GasFeeController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport {\n  convertHexToDecimal,\n  safelyExecute,\n  toHex,\n} from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetEIP1559CompatibilityAction,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerNetworkDidChangeEvent,\n  NetworkState,\n  ProviderProxy,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { Hex } from '@metamask/utils';\nimport { v1 as random } from 'uuid';\n\nimport determineGasFeeCalculations from './determineGasFeeCalculations';\nimport {\n  fetchGasEstimates,\n  fetchLegacyGasPriceEstimates,\n  fetchEthGasPriceEstimate,\n  calculateTimeEstimate,\n} from './gas-util';\n\nexport const LEGACY_GAS_PRICES_API_URL = `https://api.metaswap.codefi.network/gasPrices`;\n\n// TODO: Either fix this lint violation or explain why it's necessary to ignore.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport type unknownString = 'unknown';\n\n// Fee Market describes the way gas is set after the london hardfork, and was\n// defined by EIP-1559.\nexport type FeeMarketEstimateType = 'fee-market';\n// Legacy describes gasPrice estimates from before london hardfork, when the\n// user is connected to mainnet and are presented with fast/average/slow\n// estimate levels to choose from.\nexport type LegacyEstimateType = 'legacy';\n// EthGasPrice describes a gasPrice estimate received from eth_gasPrice. Post\n// london this value should only be used for legacy type transactions when on\n// networks that support EIP-1559. This type of estimate is the most accurate\n// to display on custom networks that don't support EIP-1559.\nexport type EthGasPriceEstimateType = 'eth_gasPrice';\n// NoEstimate describes the state of the controller before receiving its first\n// estimate.\nexport type NoEstimateType = 'none';\n\n/**\n * Indicates which type of gasEstimate the controller is currently returning.\n * This is useful as a way of asserting that the shape of gasEstimates matches\n * expectations. NONE is a special case indicating that no previous gasEstimate\n * has been fetched.\n */\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: 'fee-market' as FeeMarketEstimateType,\n  LEGACY: 'legacy' as LegacyEstimateType,\n  ETH_GASPRICE: 'eth_gasPrice' as EthGasPriceEstimateType,\n  NONE: 'none' as NoEstimateType,\n};\n\nexport type GasEstimateType =\n  | FeeMarketEstimateType\n  | EthGasPriceEstimateType\n  | LegacyEstimateType\n  | NoEstimateType;\n\nexport type EstimatedGasFeeTimeBounds = {\n  lowerTimeBound: number | null;\n  upperTimeBound: number | unknownString;\n};\n\n/**\n * @type EthGasPriceEstimate\n *\n * A single gas price estimate for networks and accounts that don't support EIP-1559\n * This estimate comes from eth_gasPrice but is converted to dec gwei to match other\n * return values\n * @property gasPrice - A GWEI dec string\n */\n\nexport type EthGasPriceEstimate = {\n  gasPrice: string;\n};\n\n/**\n * @type LegacyGasPriceEstimate\n *\n * A set of gas price estimates for networks and accounts that don't support EIP-1559\n * These estimates include low, medium and high all as strings representing gwei in\n * decimal format.\n * @property high - gasPrice, in decimal gwei string format, suggested for fast inclusion\n * @property medium - gasPrice, in decimal gwei string format, suggested for avg inclusion\n * @property low - gasPrice, in decimal gwei string format, suggested for slow inclusion\n */\nexport type LegacyGasPriceEstimate = {\n  high: string;\n  medium: string;\n  low: string;\n};\n\n/**\n * @type Eip1559GasFee\n *\n * Data necessary to provide an estimate of a gas fee with a specific tip\n * @property minWaitTimeEstimate - The fastest the transaction will take, in milliseconds\n * @property maxWaitTimeEstimate - The slowest the transaction will take, in milliseconds\n * @property suggestedMaxPriorityFeePerGas - A suggested \"tip\", a GWEI hex number\n * @property suggestedMaxFeePerGas - A suggested max fee, the most a user will pay. a GWEI hex number\n */\nexport type Eip1559GasFee = {\n  minWaitTimeEstimate: number; // a time duration in milliseconds\n  maxWaitTimeEstimate: number; // a time duration in milliseconds\n  suggestedMaxPriorityFeePerGas: string; // a GWEI decimal number\n  suggestedMaxFeePerGas: string; // a GWEI decimal number\n};\n\n/**\n * @type GasFeeEstimates\n *\n * Data necessary to provide multiple GasFee estimates, and supporting information, to the user\n * @property low - A GasFee for a minimum necessary combination of tip and maxFee\n * @property medium - A GasFee for a recommended combination of tip and maxFee\n * @property high - A GasFee for a high combination of tip and maxFee\n * @property estimatedBaseFee - An estimate of what the base fee will be for the pending/next block. A GWEI dec number\n * @property networkCongestion - A normalized number that can be used to gauge the congestion\n * level of the network, with 0 meaning not congested and 1 meaning extremely congested\n */\nexport type GasFeeEstimates = SourcedGasFeeEstimates | FallbackGasFeeEstimates;\n\ntype SourcedGasFeeEstimates = {\n  low: Eip1559GasFee;\n  medium: Eip1559GasFee;\n  high: Eip1559GasFee;\n  estimatedBaseFee: string;\n  historicalBaseFeeRange: [string, string];\n  baseFeeTrend: 'up' | 'down' | 'level';\n  latestPriorityFeeRange: [string, string];\n  historicalPriorityFeeRange: [string, string];\n  priorityFeeTrend: 'up' | 'down' | 'level';\n  networkCongestion: number;\n};\n\ntype FallbackGasFeeEstimates = {\n  low: Eip1559GasFee;\n  medium: Eip1559GasFee;\n  high: Eip1559GasFee;\n  estimatedBaseFee: string;\n  historicalBaseFeeRange: null;\n  baseFeeTrend: null;\n  latestPriorityFeeRange: null;\n  historicalPriorityFeeRange: null;\n  priorityFeeTrend: null;\n  networkCongestion: null;\n};\n\nconst metadata = {\n  gasFeeEstimatesByChainId: {\n    persist: true,\n    anonymous: false,\n  },\n  gasFeeEstimates: { persist: true, anonymous: false },\n  estimatedGasFeeTimeBounds: { persist: true, anonymous: false },\n  gasEstimateType: { persist: true, anonymous: false },\n  nonRPCGasFeeApisDisabled: { persist: true, anonymous: false },\n};\n\nexport type GasFeeStateEthGasPrice = {\n  gasFeeEstimates: EthGasPriceEstimate;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: EthGasPriceEstimateType;\n};\n\nexport type GasFeeStateFeeMarket = {\n  gasFeeEstimates: GasFeeEstimates;\n  estimatedGasFeeTimeBounds: EstimatedGasFeeTimeBounds | Record<string, never>;\n  gasEstimateType: FeeMarketEstimateType;\n};\n\nexport type GasFeeStateLegacy = {\n  gasFeeEstimates: LegacyGasPriceEstimate;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: LegacyEstimateType;\n};\n\nexport type GasFeeStateNoEstimates = {\n  gasFeeEstimates: Record<string, never>;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: NoEstimateType;\n};\n\nexport type FetchGasFeeEstimateOptions = {\n  shouldUpdateState?: boolean;\n  networkClientId?: NetworkClientId;\n};\n\n/**\n * @type GasFeeState\n *\n * Gas Fee controller state\n * @property gasFeeEstimates - Gas fee estimate data based on new EIP-1559 properties\n * @property estimatedGasFeeTimeBounds - Estimates representing the minimum and maximum\n */\nexport type SingleChainGasFeeState =\n  | GasFeeStateEthGasPrice\n  | GasFeeStateFeeMarket\n  | GasFeeStateLegacy\n  | GasFeeStateNoEstimates;\n\nexport type GasFeeEstimatesByChainId = {\n  gasFeeEstimatesByChainId?: Record<string, SingleChainGasFeeState>;\n};\n\nexport type GasFeeState = GasFeeEstimatesByChainId &\n  SingleChainGasFeeState & {\n    nonRPCGasFeeApisDisabled?: boolean;\n  };\n\nconst name = 'GasFeeController';\n\nexport type GasFeeStateChange = ControllerStateChangeEvent<\n  typeof name,\n  GasFeeState\n>;\n\nexport type GetGasFeeState = ControllerGetStateAction<typeof name, GasFeeState>;\n\nexport type GasFeeControllerActions = GetGasFeeState;\n\nexport type GasFeeControllerEvents = GasFeeStateChange;\n\ntype AllowedActions =\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetEIP1559CompatibilityAction;\n\ntype GasFeeMessenger = RestrictedMessenger<\n  typeof name,\n  GasFeeControllerActions | AllowedActions,\n  GasFeeControllerEvents | NetworkControllerNetworkDidChangeEvent,\n  AllowedActions['type'],\n  NetworkControllerNetworkDidChangeEvent['type']\n>;\n\nconst defaultState: GasFeeState = {\n  gasFeeEstimatesByChainId: {},\n  gasFeeEstimates: {},\n  estimatedGasFeeTimeBounds: {},\n  gasEstimateType: GAS_ESTIMATE_TYPES.NONE,\n  nonRPCGasFeeApisDisabled: false,\n};\n\n/** The input to start polling for the {@link GasFeeController} */\ntype GasFeePollingInput = {\n  networkClientId: NetworkClientId;\n};\n\n/**\n * Controller that retrieves gas fee estimate data and polls for updated data on a set interval\n */\nexport class GasFeeController extends StaticIntervalPollingController<GasFeePollingInput>()<\n  typeof name,\n  GasFeeState,\n  GasFeeMessenger\n> {\n  private intervalId?: ReturnType<typeof setTimeout>;\n\n  private readonly intervalDelay;\n\n  private readonly pollTokens: Set<string>;\n\n  private readonly legacyAPIEndpoint: string;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private readonly EIP1559APIEndpoint: string;\n\n  private readonly getCurrentNetworkEIP1559Compatibility;\n\n  private readonly getCurrentNetworkLegacyGasAPICompatibility;\n\n  private readonly getCurrentAccountEIP1559Compatibility;\n\n  private currentChainId;\n\n  private ethQuery?: EthQuery;\n\n  private readonly clientId?: string;\n\n  #getProvider: () => ProviderProxy;\n\n  /**\n   * Creates a GasFeeController instance.\n   *\n   * @param options - The controller options.\n   * @param options.interval - The time in milliseconds to wait between polls.\n   * @param options.messenger - The controller messenger.\n   * @param options.state - The initial state.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Determines whether or not the current\n   * network is EIP-1559 compatible.\n   * @param options.getCurrentNetworkLegacyGasAPICompatibility - Determines whether or not the\n   * current network is compatible with the legacy gas price API.\n   * @param options.getCurrentAccountEIP1559Compatibility - Determines whether or not the current\n   * account is EIP-1559 compatible.\n   * @param options.getChainId - Returns the current chain ID.\n   * @param options.getProvider - Returns a network provider for the current network.\n   * @param options.onNetworkDidChange - A function for registering an event handler for the\n   * network state change event.\n   * @param options.legacyAPIEndpoint - The legacy gas price API URL. This option is primarily for\n   * testing purposes.\n   * @param options.EIP1559APIEndpoint - The EIP-1559 gas price API URL.\n   * @param options.clientId - The client ID used to identify to the gas estimation API who is\n   * asking for estimates.\n   */\n  constructor({\n    interval = 15000,\n    messenger,\n    state,\n    getCurrentNetworkEIP1559Compatibility,\n    getCurrentAccountEIP1559Compatibility,\n    getChainId,\n    getCurrentNetworkLegacyGasAPICompatibility,\n    getProvider,\n    onNetworkDidChange,\n    legacyAPIEndpoint = LEGACY_GAS_PRICES_API_URL,\n    EIP1559APIEndpoint,\n    clientId,\n  }: {\n    interval?: number;\n    messenger: GasFeeMessenger;\n    state?: GasFeeState;\n    getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n    getCurrentNetworkLegacyGasAPICompatibility: () => boolean;\n    getCurrentAccountEIP1559Compatibility?: () => boolean;\n    getChainId?: () => Hex;\n    getProvider: () => ProviderProxy;\n    onNetworkDidChange?: (listener: (state: NetworkState) => void) => void;\n    legacyAPIEndpoint?: string;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    EIP1559APIEndpoint: string;\n    clientId?: string;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    this.intervalDelay = interval;\n    this.setIntervalLength(interval);\n    this.pollTokens = new Set();\n    this.getCurrentNetworkEIP1559Compatibility =\n      getCurrentNetworkEIP1559Compatibility;\n    this.getCurrentNetworkLegacyGasAPICompatibility =\n      getCurrentNetworkLegacyGasAPICompatibility;\n    this.getCurrentAccountEIP1559Compatibility =\n      getCurrentAccountEIP1559Compatibility;\n    this.#getProvider = getProvider;\n    this.EIP1559APIEndpoint = EIP1559APIEndpoint;\n    this.legacyAPIEndpoint = legacyAPIEndpoint;\n    this.clientId = clientId;\n\n    this.ethQuery = new EthQuery(this.#getProvider());\n\n    if (onNetworkDidChange && getChainId) {\n      this.currentChainId = getChainId();\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      onNetworkDidChange(async (networkControllerState) => {\n        await this.#onNetworkControllerDidChange(networkControllerState);\n      });\n    } else {\n      const { selectedNetworkClientId } = this.messagingSystem.call(\n        'NetworkController:getState',\n      );\n      this.currentChainId = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        selectedNetworkClientId,\n      ).configuration.chainId;\n      this.messagingSystem.subscribe(\n        'NetworkController:networkDidChange',\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        async (networkControllerState) => {\n          await this.#onNetworkControllerDidChange(networkControllerState);\n        },\n      );\n    }\n  }\n\n  async resetPolling() {\n    if (this.pollTokens.size !== 0) {\n      const tokens = Array.from(this.pollTokens);\n      this.stopPolling();\n      await this.getGasFeeEstimatesAndStartPolling(tokens[0]);\n      tokens.slice(1).forEach((token) => {\n        this.pollTokens.add(token);\n      });\n    }\n  }\n\n  async fetchGasFeeEstimates(options?: FetchGasFeeEstimateOptions) {\n    return await this._fetchGasFeeEstimateData(options);\n  }\n\n  async getGasFeeEstimatesAndStartPolling(\n    pollToken: string | undefined,\n  ): Promise<string> {\n    const _pollToken = pollToken || random();\n\n    this.pollTokens.add(_pollToken);\n\n    if (this.pollTokens.size === 1) {\n      await this._fetchGasFeeEstimateData();\n      this._poll();\n    }\n\n    return _pollToken;\n  }\n\n  /**\n   * Gets and sets gasFeeEstimates in state.\n   *\n   * @param options - The gas fee estimate options.\n   * @param options.shouldUpdateState - Determines whether the state should be updated with the\n   * updated gas estimates.\n   * @returns The gas fee estimates.\n   */\n  async _fetchGasFeeEstimateData(\n    options: FetchGasFeeEstimateOptions = {},\n  ): Promise<GasFeeState> {\n    const { shouldUpdateState = true, networkClientId } = options;\n\n    let ethQuery,\n      isEIP1559Compatible,\n      isLegacyGasAPICompatible,\n      decimalChainId: number;\n\n    if (networkClientId !== undefined) {\n      const networkClient = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        networkClientId,\n      );\n      isLegacyGasAPICompatible = networkClient.configuration.chainId === '0x38';\n\n      decimalChainId = convertHexToDecimal(networkClient.configuration.chainId);\n\n      try {\n        const result = await this.messagingSystem.call(\n          'NetworkController:getEIP1559Compatibility',\n          networkClientId,\n        );\n        isEIP1559Compatible = result || false;\n      } catch {\n        isEIP1559Compatible = false;\n      }\n      ethQuery = new EthQuery(networkClient.provider);\n    }\n\n    ethQuery ??= this.ethQuery;\n\n    isLegacyGasAPICompatible ??=\n      this.getCurrentNetworkLegacyGasAPICompatibility();\n\n    decimalChainId ??= convertHexToDecimal(this.currentChainId);\n\n    try {\n      isEIP1559Compatible ??= await this.getEIP1559Compatibility();\n    } catch (e) {\n      console.error(e);\n      isEIP1559Compatible ??= false;\n    }\n\n    const gasFeeCalculations = await determineGasFeeCalculations({\n      isEIP1559Compatible,\n      isLegacyGasAPICompatible,\n      fetchGasEstimates,\n      fetchGasEstimatesUrl: this.EIP1559APIEndpoint.replace(\n        '<chain_id>',\n        `${decimalChainId}`,\n      ),\n      fetchLegacyGasPriceEstimates,\n      fetchLegacyGasPriceEstimatesUrl: this.legacyAPIEndpoint.replace(\n        '<chain_id>',\n        `${decimalChainId}`,\n      ),\n      fetchEthGasPriceEstimate,\n      calculateTimeEstimate,\n      clientId: this.clientId,\n      ethQuery,\n      nonRPCGasFeeApisDisabled: this.state.nonRPCGasFeeApisDisabled,\n    });\n\n    if (shouldUpdateState) {\n      const chainId = toHex(decimalChainId);\n      this.update((state) => {\n        if (this.currentChainId === chainId) {\n          state.gasFeeEstimates = gasFeeCalculations.gasFeeEstimates;\n          state.estimatedGasFeeTimeBounds =\n            gasFeeCalculations.estimatedGasFeeTimeBounds;\n          state.gasEstimateType = gasFeeCalculations.gasEstimateType;\n        }\n        state.gasFeeEstimatesByChainId ??= {};\n        state.gasFeeEstimatesByChainId[chainId] = {\n          gasFeeEstimates: gasFeeCalculations.gasFeeEstimates,\n          estimatedGasFeeTimeBounds:\n            gasFeeCalculations.estimatedGasFeeTimeBounds,\n          gasEstimateType: gasFeeCalculations.gasEstimateType,\n        } as SingleChainGasFeeState;\n      });\n    }\n\n    return gasFeeCalculations;\n  }\n\n  /**\n   * Remove the poll token, and stop polling if the set of poll tokens is empty.\n   *\n   * @param pollToken - The poll token to disconnect.\n   */\n  disconnectPoller(pollToken: string) {\n    this.pollTokens.delete(pollToken);\n    if (this.pollTokens.size === 0) {\n      this.stopPolling();\n    }\n  }\n\n  stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n    this.pollTokens.clear();\n    this.resetState();\n  }\n\n  /**\n   * Prepare to discard this controller.\n   *\n   * This stops any active polling.\n   */\n  override destroy() {\n    super.destroy();\n    this.stopPolling();\n  }\n\n  private _poll() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.intervalId = setInterval(async () => {\n      await safelyExecute(() => this._fetchGasFeeEstimateData());\n    }, this.intervalDelay);\n  }\n\n  /**\n   * Fetching token list from the Token Service API.\n   *\n   * @private\n   * @param input - The input for the poll.\n   * @param input.networkClientId - The ID of the network client triggering the fetch.\n   * @returns A promise that resolves when this operation completes.\n   */\n  async _executePoll({ networkClientId }: GasFeePollingInput): Promise<void> {\n    await this._fetchGasFeeEstimateData({ networkClientId });\n  }\n\n  private resetState() {\n    this.update(() => {\n      return defaultState;\n    });\n  }\n\n  private async getEIP1559Compatibility() {\n    const currentNetworkIsEIP1559Compatible =\n      await this.getCurrentNetworkEIP1559Compatibility();\n    const currentAccountIsEIP1559Compatible =\n      this.getCurrentAccountEIP1559Compatibility?.() ?? true;\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n\n  getTimeEstimate(\n    maxPriorityFeePerGas: string,\n    maxFeePerGas: string,\n  ): EstimatedGasFeeTimeBounds | Record<string, never> {\n    if (\n      !this.state.gasFeeEstimates ||\n      this.state.gasEstimateType !== GAS_ESTIMATE_TYPES.FEE_MARKET\n    ) {\n      return {};\n    }\n    return calculateTimeEstimate(\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      this.state.gasFeeEstimates,\n    );\n  }\n\n  async #onNetworkControllerDidChange({\n    selectedNetworkClientId,\n  }: NetworkState) {\n    const newChainId = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    ).configuration.chainId;\n\n    if (newChainId !== this.currentChainId) {\n      this.ethQuery = new EthQuery(this.#getProvider());\n      await this.resetPolling();\n\n      this.currentChainId = newChainId;\n    }\n  }\n\n  enableNonRPCGasFeeApis() {\n    this.update((state) => {\n      state.nonRPCGasFeeApisDisabled = false;\n    });\n  }\n\n  disableNonRPCGasFeeApis() {\n    this.update((state) => {\n      state.nonRPCGasFeeApisDisabled = true;\n    });\n  }\n}\n\nexport default GasFeeController;\n"]}
\ No newline at end of file
+{"version":3,"file":"GasFeeController.mjs","sourceRoot":"","sources":["../src/GasFeeController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport {\n  convertHexToDecimal,\n  safelyExecute,\n  toHex,\n} from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetEIP1559CompatibilityAction,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerNetworkDidChangeEvent,\n  NetworkState,\n  ProviderProxy,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { Hex } from '@metamask/utils';\nimport { v1 as random } from 'uuid';\n\nimport determineGasFeeCalculations from './determineGasFeeCalculations';\nimport { fetchEthGasPriceEstimate, calculateTimeEstimate } from './gas-util';\n\n// TODO: Either fix this lint violation or explain why it's necessary to ignore.\n\nexport type unknownString = 'unknown';\n\n// Fee Market describes the way gas is set after the london hardfork, and was\n// defined by EIP-1559.\nexport type FeeMarketEstimateType = 'fee-market';\n// Legacy describes gasPrice estimates from before london hardfork, when the\n// user is connected to mainnet and are presented with fast/average/slow\n// estimate levels to choose from.\nexport type LegacyEstimateType = 'legacy';\n// EthGasPrice describes a gasPrice estimate received from eth_gasPrice. Post\n// london this value should only be used for legacy type transactions when on\n// networks that support EIP-1559. This type of estimate is the most accurate\n// to display on custom networks that don't support EIP-1559.\nexport type EthGasPriceEstimateType = 'eth_gasPrice';\n// NoEstimate describes the state of the controller before receiving its first\n// estimate.\nexport type NoEstimateType = 'none';\n\n/**\n * Indicates which type of gasEstimate the controller is currently returning.\n * This is useful as a way of asserting that the shape of gasEstimates matches\n * expectations. NONE is a special case indicating that no previous gasEstimate\n * has been fetched.\n */\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: 'fee-market' as FeeMarketEstimateType,\n  LEGACY: 'legacy' as LegacyEstimateType,\n  ETH_GASPRICE: 'eth_gasPrice' as EthGasPriceEstimateType,\n  NONE: 'none' as NoEstimateType,\n};\n\nexport type GasEstimateType =\n  | FeeMarketEstimateType\n  | EthGasPriceEstimateType\n  | LegacyEstimateType\n  | NoEstimateType;\n\nexport type EstimatedGasFeeTimeBounds = {\n  lowerTimeBound: number | null;\n  upperTimeBound: number | unknownString;\n};\n\n/**\n * @type EthGasPriceEstimate\n *\n * A single gas price estimate for networks and accounts that don't support EIP-1559\n * This estimate comes from eth_gasPrice but is converted to dec gwei to match other\n * return values\n * @property gasPrice - A GWEI dec string\n */\n\nexport type EthGasPriceEstimate = {\n  gasPrice: string;\n};\n\n/**\n * @type LegacyGasPriceEstimate\n *\n * A set of gas price estimates for networks and accounts that don't support EIP-1559\n * These estimates include low, medium and high all as strings representing gwei in\n * decimal format.\n * @property high - gasPrice, in decimal gwei string format, suggested for fast inclusion\n * @property medium - gasPrice, in decimal gwei string format, suggested for avg inclusion\n * @property low - gasPrice, in decimal gwei string format, suggested for slow inclusion\n */\nexport type LegacyGasPriceEstimate = {\n  high: string;\n  medium: string;\n  low: string;\n};\n\n/**\n * @type Eip1559GasFee\n *\n * Data necessary to provide an estimate of a gas fee with a specific tip\n * @property minWaitTimeEstimate - The fastest the transaction will take, in milliseconds\n * @property maxWaitTimeEstimate - The slowest the transaction will take, in milliseconds\n * @property suggestedMaxPriorityFeePerGas - A suggested \"tip\", a GWEI hex number\n * @property suggestedMaxFeePerGas - A suggested max fee, the most a user will pay. a GWEI hex number\n */\nexport type Eip1559GasFee = {\n  minWaitTimeEstimate: number; // a time duration in milliseconds\n  maxWaitTimeEstimate: number; // a time duration in milliseconds\n  suggestedMaxPriorityFeePerGas: string; // a GWEI decimal number\n  suggestedMaxFeePerGas: string; // a GWEI decimal number\n};\n\n/**\n * @type GasFeeEstimates\n *\n * Data necessary to provide multiple GasFee estimates, and supporting information, to the user\n * @property low - A GasFee for a minimum necessary combination of tip and maxFee\n * @property medium - A GasFee for a recommended combination of tip and maxFee\n * @property high - A GasFee for a high combination of tip and maxFee\n * @property estimatedBaseFee - An estimate of what the base fee will be for the pending/next block. A GWEI dec number\n * @property networkCongestion - A normalized number that can be used to gauge the congestion\n * level of the network, with 0 meaning not congested and 1 meaning extremely congested\n */\nexport type GasFeeEstimates = SourcedGasFeeEstimates | FallbackGasFeeEstimates;\n\ntype SourcedGasFeeEstimates = {\n  low: Eip1559GasFee;\n  medium: Eip1559GasFee;\n  high: Eip1559GasFee;\n  estimatedBaseFee: string;\n  historicalBaseFeeRange: [string, string];\n  baseFeeTrend: 'up' | 'down' | 'level';\n  latestPriorityFeeRange: [string, string];\n  historicalPriorityFeeRange: [string, string];\n  priorityFeeTrend: 'up' | 'down' | 'level';\n  networkCongestion: number;\n};\n\ntype FallbackGasFeeEstimates = {\n  low: Eip1559GasFee;\n  medium: Eip1559GasFee;\n  high: Eip1559GasFee;\n  estimatedBaseFee: string;\n  historicalBaseFeeRange: null;\n  baseFeeTrend: null;\n  latestPriorityFeeRange: null;\n  historicalPriorityFeeRange: null;\n  priorityFeeTrend: null;\n  networkCongestion: null;\n};\n\nconst metadata = {\n  gasFeeEstimatesByChainId: {\n    persist: true,\n    anonymous: false,\n  },\n  gasFeeEstimates: { persist: true, anonymous: false },\n  estimatedGasFeeTimeBounds: { persist: true, anonymous: false },\n  gasEstimateType: { persist: true, anonymous: false },\n  nonRPCGasFeeApisDisabled: { persist: true, anonymous: false },\n};\n\nexport type GasFeeStateEthGasPrice = {\n  gasFeeEstimates: EthGasPriceEstimate;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: EthGasPriceEstimateType;\n};\n\nexport type GasFeeStateFeeMarket = {\n  gasFeeEstimates: GasFeeEstimates;\n  estimatedGasFeeTimeBounds: EstimatedGasFeeTimeBounds | Record<string, never>;\n  gasEstimateType: FeeMarketEstimateType;\n};\n\nexport type GasFeeStateLegacy = {\n  gasFeeEstimates: LegacyGasPriceEstimate;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: LegacyEstimateType;\n};\n\nexport type GasFeeStateNoEstimates = {\n  gasFeeEstimates: Record<string, never>;\n  estimatedGasFeeTimeBounds: Record<string, never>;\n  gasEstimateType: NoEstimateType;\n};\n\nexport type FetchGasFeeEstimateOptions = {\n  shouldUpdateState?: boolean;\n  networkClientId?: NetworkClientId;\n};\n\n/**\n * @type GasFeeState\n *\n * Gas Fee controller state\n * @property gasFeeEstimates - Gas fee estimate data based on new EIP-1559 properties\n * @property estimatedGasFeeTimeBounds - Estimates representing the minimum and maximum\n */\nexport type SingleChainGasFeeState =\n  | GasFeeStateEthGasPrice\n  | GasFeeStateFeeMarket\n  | GasFeeStateLegacy\n  | GasFeeStateNoEstimates;\n\nexport type GasFeeEstimatesByChainId = {\n  gasFeeEstimatesByChainId?: Record<string, SingleChainGasFeeState>;\n};\n\nexport type GasFeeState = GasFeeEstimatesByChainId &\n  SingleChainGasFeeState & {\n    nonRPCGasFeeApisDisabled?: boolean;\n  };\n\nconst name = 'GasFeeController';\n\nexport type GasFeeStateChange = ControllerStateChangeEvent<\n  typeof name,\n  GasFeeState\n>;\n\nexport type GetGasFeeState = ControllerGetStateAction<typeof name, GasFeeState>;\n\nexport type GasFeeControllerActions = GetGasFeeState;\n\nexport type GasFeeControllerEvents = GasFeeStateChange;\n\ntype AllowedActions =\n  | NetworkControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetEIP1559CompatibilityAction;\n\ntype GasFeeMessenger = RestrictedMessenger<\n  typeof name,\n  GasFeeControllerActions | AllowedActions,\n  GasFeeControllerEvents | NetworkControllerNetworkDidChangeEvent,\n  AllowedActions['type'],\n  NetworkControllerNetworkDidChangeEvent['type']\n>;\n\nconst defaultState: GasFeeState = {\n  gasFeeEstimatesByChainId: {},\n  gasFeeEstimates: {},\n  estimatedGasFeeTimeBounds: {},\n  gasEstimateType: GAS_ESTIMATE_TYPES.NONE,\n  nonRPCGasFeeApisDisabled: false,\n};\n\n/** The input to start polling for the {@link GasFeeController} */\ntype GasFeePollingInput = {\n  networkClientId: NetworkClientId;\n};\n\n/**\n * Controller that retrieves gas fee estimate data and polls for updated data on a set interval\n */\nexport class GasFeeController extends StaticIntervalPollingController<GasFeePollingInput>()<\n  typeof name,\n  GasFeeState,\n  GasFeeMessenger\n> {\n  private intervalId?: ReturnType<typeof setTimeout>;\n\n  private readonly intervalDelay;\n\n  private readonly pollTokens: Set<string>;\n\n  private readonly getCurrentNetworkEIP1559Compatibility;\n\n  private readonly getCurrentNetworkLegacyGasAPICompatibility;\n\n  private readonly getCurrentAccountEIP1559Compatibility;\n\n  private currentChainId;\n\n  private ethQuery?: EthQuery;\n\n  readonly #getProvider: () => ProviderProxy;\n\n  /**\n   * Creates a GasFeeController instance.\n   *\n   * @param options - The controller options.\n   * @param options.interval - The time in milliseconds to wait between polls.\n   * @param options.messenger - The controller messenger.\n   * @param options.state - The initial state.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Determines whether or not the current\n   * network is EIP-1559 compatible.\n   * @param options.getCurrentNetworkLegacyGasAPICompatibility - Determines whether or not the\n   * current network is compatible with the legacy gas price API.\n   * @param options.getCurrentAccountEIP1559Compatibility - Determines whether or not the current\n   * account is EIP-1559 compatible.\n   * @param options.getChainId - Returns the current chain ID.\n   * @param options.getProvider - Returns a network provider for the current network.\n   * @param options.onNetworkDidChange - A function for registering an event handler for the\n   * network state change event.\n   */\n  constructor({\n    interval = 15000,\n    messenger,\n    state,\n    getCurrentNetworkEIP1559Compatibility,\n    getCurrentAccountEIP1559Compatibility,\n    getChainId,\n    getCurrentNetworkLegacyGasAPICompatibility,\n    getProvider,\n    onNetworkDidChange,\n  }: {\n    interval?: number;\n    messenger: GasFeeMessenger;\n    state?: GasFeeState;\n    getCurrentNetworkEIP1559Compatibility?: () => Promise<boolean>;\n    getCurrentNetworkLegacyGasAPICompatibility?: () => boolean;\n    getCurrentAccountEIP1559Compatibility?: () => boolean;\n    getChainId?: () => Hex;\n    getProvider: () => ProviderProxy;\n    onNetworkDidChange?: (listener: (state: NetworkState) => void) => void;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    this.intervalDelay = interval;\n    this.setIntervalLength(interval);\n    this.pollTokens = new Set();\n    this.getCurrentNetworkEIP1559Compatibility =\n      getCurrentNetworkEIP1559Compatibility;\n    this.getCurrentNetworkLegacyGasAPICompatibility =\n      getCurrentNetworkLegacyGasAPICompatibility;\n    this.getCurrentAccountEIP1559Compatibility =\n      getCurrentAccountEIP1559Compatibility;\n    this.#getProvider = getProvider;\n\n    this.ethQuery = new EthQuery(this.#getProvider());\n\n    if (onNetworkDidChange && getChainId) {\n      this.currentChainId = getChainId();\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      onNetworkDidChange(async (networkControllerState) => {\n        await this.#onNetworkControllerDidChange(networkControllerState);\n      });\n    } else {\n      const { selectedNetworkClientId } = this.messagingSystem.call(\n        'NetworkController:getState',\n      );\n      this.currentChainId = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        selectedNetworkClientId,\n      ).configuration.chainId;\n      this.messagingSystem.subscribe(\n        'NetworkController:networkDidChange',\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        async (networkControllerState) => {\n          await this.#onNetworkControllerDidChange(networkControllerState);\n        },\n      );\n    }\n  }\n\n  async resetPolling() {\n    if (this.pollTokens.size !== 0) {\n      const tokens = Array.from(this.pollTokens);\n      this.stopPolling();\n      await this.getGasFeeEstimatesAndStartPolling(tokens[0]);\n      tokens.slice(1).forEach((token) => {\n        this.pollTokens.add(token);\n      });\n    }\n  }\n\n  async fetchGasFeeEstimates(options?: FetchGasFeeEstimateOptions) {\n    return await this._fetchGasFeeEstimateData(options);\n  }\n\n  async getGasFeeEstimatesAndStartPolling(\n    pollToken: string | undefined,\n  ): Promise<string> {\n    const _pollToken = pollToken || random();\n\n    this.pollTokens.add(_pollToken);\n\n    if (this.pollTokens.size === 1) {\n      await this._fetchGasFeeEstimateData();\n      this._poll();\n    }\n\n    return _pollToken;\n  }\n\n  /**\n   * Gets and sets gasFeeEstimates in state.\n   *\n   * @param options - The gas fee estimate options.\n   * @param options.shouldUpdateState - Determines whether the state should be updated with the\n   * updated gas estimates.\n   * @returns The gas fee estimates.\n   */\n  async _fetchGasFeeEstimateData(\n    options: FetchGasFeeEstimateOptions = {},\n  ): Promise<GasFeeState> {\n    const { shouldUpdateState = true, networkClientId } = options;\n\n    let ethQuery,\n      isEIP1559Compatible,\n      isLegacyGasAPICompatible,\n      decimalChainId: number;\n\n    if (networkClientId !== undefined) {\n      const networkClient = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        networkClientId,\n      );\n      isLegacyGasAPICompatible = networkClient.configuration.chainId === '0x38';\n\n      decimalChainId = convertHexToDecimal(networkClient.configuration.chainId);\n\n      try {\n        const result = await this.messagingSystem.call(\n          'NetworkController:getEIP1559Compatibility',\n          networkClientId,\n        );\n        isEIP1559Compatible = result || false;\n      } catch {\n        isEIP1559Compatible = false;\n      }\n      ethQuery = new EthQuery(networkClient.provider);\n    }\n\n    ethQuery ??= this.ethQuery;\n\n    isLegacyGasAPICompatible ??=\n      this.getCurrentNetworkLegacyGasAPICompatibility?.() ?? true;\n\n    decimalChainId ??= convertHexToDecimal(this.currentChainId);\n\n    try {\n      isEIP1559Compatible ??= await this.getEIP1559Compatibility();\n    } catch (e) {\n      console.error(e);\n      isEIP1559Compatible ??= false;\n    }\n\n    const gasFeeCalculations = await determineGasFeeCalculations({\n      isEIP1559Compatible,\n      isLegacyGasAPICompatible,\n      fetchEthGasPriceEstimate,\n      calculateTimeEstimate,\n      ethQuery,\n    });\n\n    if (shouldUpdateState) {\n      const chainId = toHex(decimalChainId);\n      this.update((state) => {\n        if (this.currentChainId === chainId) {\n          state.gasFeeEstimates = gasFeeCalculations.gasFeeEstimates;\n          state.estimatedGasFeeTimeBounds =\n            gasFeeCalculations.estimatedGasFeeTimeBounds;\n          state.gasEstimateType = gasFeeCalculations.gasEstimateType;\n        }\n        state.gasFeeEstimatesByChainId ??= {};\n        state.gasFeeEstimatesByChainId[chainId] = {\n          gasFeeEstimates: gasFeeCalculations.gasFeeEstimates,\n          estimatedGasFeeTimeBounds:\n            gasFeeCalculations.estimatedGasFeeTimeBounds,\n          gasEstimateType: gasFeeCalculations.gasEstimateType,\n        } as SingleChainGasFeeState;\n      });\n    }\n\n    return gasFeeCalculations;\n  }\n\n  /**\n   * Remove the poll token, and stop polling if the set of poll tokens is empty.\n   *\n   * @param pollToken - The poll token to disconnect.\n   */\n  disconnectPoller(pollToken: string) {\n    this.pollTokens.delete(pollToken);\n    if (this.pollTokens.size === 0) {\n      this.stopPolling();\n    }\n  }\n\n  stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n    this.pollTokens.clear();\n    this.resetState();\n  }\n\n  /**\n   * Prepare to discard this controller.\n   *\n   * This stops any active polling.\n   */\n  override destroy() {\n    super.destroy();\n    this.stopPolling();\n  }\n\n  private _poll() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.intervalId = setInterval(async () => {\n      await safelyExecute(() => this._fetchGasFeeEstimateData());\n    }, this.intervalDelay);\n  }\n\n  /**\n   * Fetching token list from the Token Service API.\n   *\n   * @private\n   * @param input - The input for the poll.\n   * @param input.networkClientId - The ID of the network client triggering the fetch.\n   * @returns A promise that resolves when this operation completes.\n   */\n  async _executePoll({ networkClientId }: GasFeePollingInput): Promise<void> {\n    await this._fetchGasFeeEstimateData({ networkClientId });\n  }\n\n  private resetState() {\n    this.update(() => {\n      return defaultState;\n    });\n  }\n\n  private async getEIP1559Compatibility() {\n    const currentNetworkIsEIP1559Compatible =\n      (await this.getCurrentNetworkEIP1559Compatibility?.()) ?? true;\n    const currentAccountIsEIP1559Compatible =\n      this.getCurrentAccountEIP1559Compatibility?.() ?? true;\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n\n  getTimeEstimate(\n    maxPriorityFeePerGas: string,\n    maxFeePerGas: string,\n  ): EstimatedGasFeeTimeBounds | Record<string, never> {\n    if (\n      !this.state.gasFeeEstimates ||\n      this.state.gasEstimateType !== GAS_ESTIMATE_TYPES.FEE_MARKET\n    ) {\n      return {};\n    }\n    return calculateTimeEstimate(\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      this.state.gasFeeEstimates,\n    );\n  }\n\n  async #onNetworkControllerDidChange({\n    selectedNetworkClientId,\n  }: NetworkState) {\n    const newChainId = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    ).configuration.chainId;\n\n    if (newChainId !== this.currentChainId) {\n      this.ethQuery = new EthQuery(this.#getProvider());\n      await this.resetPolling();\n\n      this.currentChainId = newChainId;\n    }\n  }\n\n  // Note: This seems to never have been working as intended\n  enableNonRPCGasFeeApis() {\n    this.update((state) => {\n      state.nonRPCGasFeeApisDisabled = false;\n    });\n  }\n\n  disableNonRPCGasFeeApis() {\n    this.update((state) => {\n      state.nonRPCGasFeeApisDisabled = true;\n    });\n  }\n}\n\nexport default GasFeeController;\n"]}
\ No newline at end of file
diff --git a/dist/determineGasFeeCalculations.cjs b/dist/determineGasFeeCalculations.cjs
index 986f78c207bfe549c4908764fdd1fe34a2ee81ac..bab85e24cde6b61b0ac8cbd6675f11299327c24d 100644
--- a/dist/determineGasFeeCalculations.cjs
+++ b/dist/determineGasFeeCalculations.cjs
@@ -10,25 +10,15 @@ const GasFeeController_1 = require("./GasFeeController.cjs");
  * produce estimates.
  * @param args.isLegacyGasAPICompatible - Governs whether or not we can use a non-EIP-1559 method to
  * produce estimates (for instance, testnets do not support estimates altogether).
- * @param args.fetchGasEstimates - A function that fetches gas estimates using an EIP-1559-specific
- * API.
- * @param args.fetchGasEstimatesUrl - The URL for the API we can use to obtain EIP-1559-specific
- * estimates.
- * @param args.fetchLegacyGasPriceEstimates - A function that fetches gas estimates using an
- * non-EIP-1559-specific API.
- * @param args.fetchLegacyGasPriceEstimatesUrl - The URL for the API we can use to obtain
- * non-EIP-1559-specific estimates.
  * @param args.fetchEthGasPriceEstimate - A function that fetches gas estimates using
  * `eth_gasPrice`.
  * @param args.calculateTimeEstimate - A function that determine time estimate bounds.
- * @param args.clientId - An identifier that an API can use to know who is asking for estimates.
  * @param args.ethQuery - An EthQuery instance we can use to talk to Ethereum directly.
- * @param args.nonRPCGasFeeApisDisabled - Whether to disable requests to the legacyAPIEndpoint and the EIP1559APIEndpoint
  * @returns The gas fee calculations.
  */
 async function determineGasFeeCalculations(args) {
     try {
-        return await getEstimatesUsingFallbacks(args);
+        return await getEstimatesUsingProvider(args);
     }
     catch (error) {
         if (error instanceof Error) {
@@ -38,56 +28,6 @@ async function determineGasFeeCalculations(args) {
     }
 }
 exports.default = determineGasFeeCalculations;
-/**
- * Retrieve the gas fee estimates using a series of fallback mechanisms.
- * @param request - The request object.
- * @returns The gas fee estimates.
- */
-async function getEstimatesUsingFallbacks(request) {
-    const { isEIP1559Compatible, isLegacyGasAPICompatible, nonRPCGasFeeApisDisabled, } = request;
-    try {
-        if (isEIP1559Compatible && !nonRPCGasFeeApisDisabled) {
-            return await getEstimatesUsingFeeMarketEndpoint(request);
-        }
-        if (isLegacyGasAPICompatible && !nonRPCGasFeeApisDisabled) {
-            return await getEstimatesUsingLegacyEndpoint(request);
-        }
-        throw new Error('Main gas fee/price estimation failed. Use fallback');
-    }
-    catch {
-        return await getEstimatesUsingProvider(request);
-    }
-}
-/**
- * Retrieve gas fee estimates using the EIP-1559 endpoint of the gas API.
- * @param request - The request object.
- * @returns The gas fee estimates.
- */
-async function getEstimatesUsingFeeMarketEndpoint(request) {
-    const { fetchGasEstimates, fetchGasEstimatesUrl, clientId, calculateTimeEstimate, } = request;
-    const estimates = await fetchGasEstimates(fetchGasEstimatesUrl, clientId);
-    const { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = estimates.medium;
-    const estimatedGasFeeTimeBounds = calculateTimeEstimate(suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas, estimates);
-    return {
-        gasFeeEstimates: estimates,
-        estimatedGasFeeTimeBounds,
-        gasEstimateType: GasFeeController_1.GAS_ESTIMATE_TYPES.FEE_MARKET,
-    };
-}
-/**
- * Retrieve gas fee estimates using the legacy endpoint of the gas API.
- * @param request - The request object.
- * @returns The gas fee estimates.
- */
-async function getEstimatesUsingLegacyEndpoint(request) {
-    const { fetchLegacyGasPriceEstimates, fetchLegacyGasPriceEstimatesUrl, clientId, } = request;
-    const estimates = await fetchLegacyGasPriceEstimates(fetchLegacyGasPriceEstimatesUrl, clientId);
-    return {
-        gasFeeEstimates: estimates,
-        estimatedGasFeeTimeBounds: {},
-        gasEstimateType: GasFeeController_1.GAS_ESTIMATE_TYPES.LEGACY,
-    };
-}
 /**
  * Retrieve gas fee estimates using an `eth_gasPrice` call to the RPC provider.
  * @param request - The request object.
diff --git a/dist/determineGasFeeCalculations.cjs.map b/dist/determineGasFeeCalculations.cjs.map
index d26dba4eabaa83f22464aff0fe43b8d7d2130555..3b963c5ce39b8602d363bf6c72485295754629ab 100644
--- a/dist/determineGasFeeCalculations.cjs.map
+++ b/dist/determineGasFeeCalculations.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"determineGasFeeCalculations.cjs","sourceRoot":"","sources":["../src/determineGasFeeCalculations.ts"],"names":[],"mappings":";;AAOA,6DAAwD;AA8BxD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACY,KAAK,UAAU,2BAA2B,CACvD,IAAwC;IAExC,IAAI;QACF,OAAO,MAAM,0BAA0B,CAAC,IAAI,CAAC,CAAC;KAC/C;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,KAAK,YAAY,KAAK,EAAE;YAC1B,MAAM,IAAI,KAAK,CACb,6CAA6C,KAAK,CAAC,OAAO,EAAE,CAC7D,CAAC;SACH;QAED,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AAdD,8CAcC;AAED;;;;GAIG;AACH,KAAK,UAAU,0BAA0B,CACvC,OAA2C;IAE3C,MAAM,EACJ,mBAAmB,EACnB,wBAAwB,EACxB,wBAAwB,GACzB,GAAG,OAAO,CAAC;IAEZ,IAAI;QACF,IAAI,mBAAmB,IAAI,CAAC,wBAAwB,EAAE;YACpD,OAAO,MAAM,kCAAkC,CAAC,OAAO,CAAC,CAAC;SAC1D;QAED,IAAI,wBAAwB,IAAI,CAAC,wBAAwB,EAAE;YACzD,OAAO,MAAM,+BAA+B,CAAC,OAAO,CAAC,CAAC;SACvD;QAED,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;KACvE;IAAC,MAAM;QACN,OAAO,MAAM,yBAAyB,CAAC,OAAO,CAAC,CAAC;KACjD;AACH,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,kCAAkC,CAC/C,OAA2C;IAE3C,MAAM,EACJ,iBAAiB,EACjB,oBAAoB,EACpB,QAAQ,EACR,qBAAqB,GACtB,GAAG,OAAO,CAAC;IAEZ,MAAM,SAAS,GAAG,MAAM,iBAAiB,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;IAE1E,MAAM,EAAE,6BAA6B,EAAE,qBAAqB,EAAE,GAC5D,SAAS,CAAC,MAAM,CAAC;IAEnB,MAAM,yBAAyB,GAAG,qBAAqB,CACrD,6BAA6B,EAC7B,qBAAqB,EACrB,SAAS,CACV,CAAC;IAEF,OAAO;QACL,eAAe,EAAE,SAAS;QAC1B,yBAAyB;QACzB,eAAe,EAAE,qCAAkB,CAAC,UAAU;KAC/C,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,+BAA+B,CAC5C,OAA2C;IAE3C,MAAM,EACJ,4BAA4B,EAC5B,+BAA+B,EAC/B,QAAQ,GACT,GAAG,OAAO,CAAC;IAEZ,MAAM,SAAS,GAAG,MAAM,4BAA4B,CAClD,+BAA+B,EAC/B,QAAQ,CACT,CAAC;IAEF,OAAO;QACL,eAAe,EAAE,SAAS;QAC1B,yBAAyB,EAAE,EAAE;QAC7B,eAAe,EAAE,qCAAkB,CAAC,MAAM;KAC3C,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,yBAAyB,CACtC,OAA2C;IAE3C,MAAM,EAAE,QAAQ,EAAE,wBAAwB,EAAE,GAAG,OAAO,CAAC;IAEvD,MAAM,SAAS,GAAG,MAAM,wBAAwB,CAAC,QAAQ,CAAC,CAAC;IAE3D,OAAO;QACL,eAAe,EAAE,SAAS;QAC1B,yBAAyB,EAAE,EAAE;QAC7B,eAAe,EAAE,qCAAkB,CAAC,YAAY;KACjD,CAAC;AACJ,CAAC","sourcesContent":["import type {\n  EstimatedGasFeeTimeBounds,\n  EthGasPriceEstimate,\n  GasFeeEstimates,\n  GasFeeState as GasFeeCalculations,\n  LegacyGasPriceEstimate,\n} from './GasFeeController';\nimport { GAS_ESTIMATE_TYPES } from './GasFeeController';\n\ntype DetermineGasFeeCalculationsRequest = {\n  isEIP1559Compatible: boolean;\n  isLegacyGasAPICompatible: boolean;\n  fetchGasEstimates: (\n    url: string,\n    clientId?: string,\n  ) => Promise<GasFeeEstimates>;\n  fetchGasEstimatesUrl: string;\n  fetchLegacyGasPriceEstimates: (\n    url: string,\n    clientId?: string,\n  ) => Promise<LegacyGasPriceEstimate>;\n  fetchLegacyGasPriceEstimatesUrl: string;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  fetchEthGasPriceEstimate: (ethQuery: any) => Promise<EthGasPriceEstimate>;\n  calculateTimeEstimate: (\n    maxPriorityFeePerGas: string,\n    maxFeePerGas: string,\n    gasFeeEstimates: GasFeeEstimates,\n  ) => EstimatedGasFeeTimeBounds;\n  clientId: string | undefined;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ethQuery: any;\n  nonRPCGasFeeApisDisabled?: boolean;\n};\n\n/**\n * Obtains a set of max base and priority fee estimates along with time estimates so that we\n * can present them to users when they are sending transactions or making swaps.\n *\n * @param args - The arguments.\n * @param args.isEIP1559Compatible - Governs whether or not we can use an EIP-1559-only method to\n * produce estimates.\n * @param args.isLegacyGasAPICompatible - Governs whether or not we can use a non-EIP-1559 method to\n * produce estimates (for instance, testnets do not support estimates altogether).\n * @param args.fetchGasEstimates - A function that fetches gas estimates using an EIP-1559-specific\n * API.\n * @param args.fetchGasEstimatesUrl - The URL for the API we can use to obtain EIP-1559-specific\n * estimates.\n * @param args.fetchLegacyGasPriceEstimates - A function that fetches gas estimates using an\n * non-EIP-1559-specific API.\n * @param args.fetchLegacyGasPriceEstimatesUrl - The URL for the API we can use to obtain\n * non-EIP-1559-specific estimates.\n * @param args.fetchEthGasPriceEstimate - A function that fetches gas estimates using\n * `eth_gasPrice`.\n * @param args.calculateTimeEstimate - A function that determine time estimate bounds.\n * @param args.clientId - An identifier that an API can use to know who is asking for estimates.\n * @param args.ethQuery - An EthQuery instance we can use to talk to Ethereum directly.\n * @param args.nonRPCGasFeeApisDisabled - Whether to disable requests to the legacyAPIEndpoint and the EIP1559APIEndpoint\n * @returns The gas fee calculations.\n */\nexport default async function determineGasFeeCalculations(\n  args: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  try {\n    return await getEstimatesUsingFallbacks(args);\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new Error(\n        `Gas fee/price estimation failed. Message: ${error.message}`,\n      );\n    }\n\n    throw error;\n  }\n}\n\n/**\n * Retrieve the gas fee estimates using a series of fallback mechanisms.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingFallbacks(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const {\n    isEIP1559Compatible,\n    isLegacyGasAPICompatible,\n    nonRPCGasFeeApisDisabled,\n  } = request;\n\n  try {\n    if (isEIP1559Compatible && !nonRPCGasFeeApisDisabled) {\n      return await getEstimatesUsingFeeMarketEndpoint(request);\n    }\n\n    if (isLegacyGasAPICompatible && !nonRPCGasFeeApisDisabled) {\n      return await getEstimatesUsingLegacyEndpoint(request);\n    }\n\n    throw new Error('Main gas fee/price estimation failed. Use fallback');\n  } catch {\n    return await getEstimatesUsingProvider(request);\n  }\n}\n\n/**\n * Retrieve gas fee estimates using the EIP-1559 endpoint of the gas API.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingFeeMarketEndpoint(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const {\n    fetchGasEstimates,\n    fetchGasEstimatesUrl,\n    clientId,\n    calculateTimeEstimate,\n  } = request;\n\n  const estimates = await fetchGasEstimates(fetchGasEstimatesUrl, clientId);\n\n  const { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } =\n    estimates.medium;\n\n  const estimatedGasFeeTimeBounds = calculateTimeEstimate(\n    suggestedMaxPriorityFeePerGas,\n    suggestedMaxFeePerGas,\n    estimates,\n  );\n\n  return {\n    gasFeeEstimates: estimates,\n    estimatedGasFeeTimeBounds,\n    gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n  };\n}\n\n/**\n * Retrieve gas fee estimates using the legacy endpoint of the gas API.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingLegacyEndpoint(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const {\n    fetchLegacyGasPriceEstimates,\n    fetchLegacyGasPriceEstimatesUrl,\n    clientId,\n  } = request;\n\n  const estimates = await fetchLegacyGasPriceEstimates(\n    fetchLegacyGasPriceEstimatesUrl,\n    clientId,\n  );\n\n  return {\n    gasFeeEstimates: estimates,\n    estimatedGasFeeTimeBounds: {},\n    gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n  };\n}\n\n/**\n * Retrieve gas fee estimates using an `eth_gasPrice` call to the RPC provider.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingProvider(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const { ethQuery, fetchEthGasPriceEstimate } = request;\n\n  const estimates = await fetchEthGasPriceEstimate(ethQuery);\n\n  return {\n    gasFeeEstimates: estimates,\n    estimatedGasFeeTimeBounds: {},\n    gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"determineGasFeeCalculations.cjs","sourceRoot":"","sources":["../src/determineGasFeeCalculations.ts"],"names":[],"mappings":";;AAOA,6DAAwD;AAkBxD;;;;;;;;;;;;;;GAcG;AACY,KAAK,UAAU,2BAA2B,CACvD,IAAwC;IAExC,IAAI;QACF,OAAO,MAAM,yBAAyB,CAAC,IAAI,CAAC,CAAC;KAC9C;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,KAAK,YAAY,KAAK,EAAE;YAC1B,MAAM,IAAI,KAAK,CACb,6CAA6C,KAAK,CAAC,OAAO,EAAE,CAC7D,CAAC;SACH;QAED,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AAdD,8CAcC;AAED;;;;GAIG;AACH,KAAK,UAAU,yBAAyB,CACtC,OAA2C;IAE3C,MAAM,EAAE,QAAQ,EAAE,wBAAwB,EAAE,GAAG,OAAO,CAAC;IAEvD,MAAM,SAAS,GAAG,MAAM,wBAAwB,CAAC,QAAQ,CAAC,CAAC;IAE3D,OAAO;QACL,eAAe,EAAE,SAAS;QAC1B,yBAAyB,EAAE,EAAE;QAC7B,eAAe,EAAE,qCAAkB,CAAC,YAAY;KACjD,CAAC;AACJ,CAAC","sourcesContent":["import type {\n  EstimatedGasFeeTimeBounds,\n  EthGasPriceEstimate,\n  GasFeeEstimates,\n  GasFeeState as GasFeeCalculations,\n  LegacyGasPriceEstimate,\n} from './GasFeeController';\nimport { GAS_ESTIMATE_TYPES } from './GasFeeController';\n\ntype DetermineGasFeeCalculationsRequest = {\n  isEIP1559Compatible: boolean;\n  isLegacyGasAPICompatible: boolean;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  fetchEthGasPriceEstimate: (ethQuery: any) => Promise<EthGasPriceEstimate>;\n  calculateTimeEstimate: (\n    maxPriorityFeePerGas: string,\n    maxFeePerGas: string,\n    gasFeeEstimates: GasFeeEstimates,\n  ) => EstimatedGasFeeTimeBounds;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ethQuery: any;\n};\n\n/**\n * Obtains a set of max base and priority fee estimates along with time estimates so that we\n * can present them to users when they are sending transactions or making swaps.\n *\n * @param args - The arguments.\n * @param args.isEIP1559Compatible - Governs whether or not we can use an EIP-1559-only method to\n * produce estimates.\n * @param args.isLegacyGasAPICompatible - Governs whether or not we can use a non-EIP-1559 method to\n * produce estimates (for instance, testnets do not support estimates altogether).\n * @param args.fetchEthGasPriceEstimate - A function that fetches gas estimates using\n * `eth_gasPrice`.\n * @param args.calculateTimeEstimate - A function that determine time estimate bounds.\n * @param args.ethQuery - An EthQuery instance we can use to talk to Ethereum directly.\n * @returns The gas fee calculations.\n */\nexport default async function determineGasFeeCalculations(\n  args: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  try {\n    return await getEstimatesUsingProvider(args);\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new Error(\n        `Gas fee/price estimation failed. Message: ${error.message}`,\n      );\n    }\n\n    throw error;\n  }\n}\n\n/**\n * Retrieve gas fee estimates using an `eth_gasPrice` call to the RPC provider.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingProvider(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const { ethQuery, fetchEthGasPriceEstimate } = request;\n\n  const estimates = await fetchEthGasPriceEstimate(ethQuery);\n\n  return {\n    gasFeeEstimates: estimates,\n    estimatedGasFeeTimeBounds: {},\n    gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/determineGasFeeCalculations.d.cts b/dist/determineGasFeeCalculations.d.cts
index d57b65f1cae5e8b2028121b5c5a5cb6c3cf01783..3e323eea45f905b3c1cb62ef7dc71bdb7ef3f402 100644
--- a/dist/determineGasFeeCalculations.d.cts
+++ b/dist/determineGasFeeCalculations.d.cts
@@ -1,16 +1,10 @@
-import type { EstimatedGasFeeTimeBounds, EthGasPriceEstimate, GasFeeEstimates, GasFeeState as GasFeeCalculations, LegacyGasPriceEstimate } from "./GasFeeController.cjs";
+import type { EstimatedGasFeeTimeBounds, EthGasPriceEstimate, GasFeeEstimates, GasFeeState as GasFeeCalculations } from "./GasFeeController.cjs";
 type DetermineGasFeeCalculationsRequest = {
     isEIP1559Compatible: boolean;
     isLegacyGasAPICompatible: boolean;
-    fetchGasEstimates: (url: string, clientId?: string) => Promise<GasFeeEstimates>;
-    fetchGasEstimatesUrl: string;
-    fetchLegacyGasPriceEstimates: (url: string, clientId?: string) => Promise<LegacyGasPriceEstimate>;
-    fetchLegacyGasPriceEstimatesUrl: string;
     fetchEthGasPriceEstimate: (ethQuery: any) => Promise<EthGasPriceEstimate>;
     calculateTimeEstimate: (maxPriorityFeePerGas: string, maxFeePerGas: string, gasFeeEstimates: GasFeeEstimates) => EstimatedGasFeeTimeBounds;
-    clientId: string | undefined;
     ethQuery: any;
-    nonRPCGasFeeApisDisabled?: boolean;
 };
 /**
  * Obtains a set of max base and priority fee estimates along with time estimates so that we
@@ -21,20 +15,10 @@ type DetermineGasFeeCalculationsRequest = {
  * produce estimates.
  * @param args.isLegacyGasAPICompatible - Governs whether or not we can use a non-EIP-1559 method to
  * produce estimates (for instance, testnets do not support estimates altogether).
- * @param args.fetchGasEstimates - A function that fetches gas estimates using an EIP-1559-specific
- * API.
- * @param args.fetchGasEstimatesUrl - The URL for the API we can use to obtain EIP-1559-specific
- * estimates.
- * @param args.fetchLegacyGasPriceEstimates - A function that fetches gas estimates using an
- * non-EIP-1559-specific API.
- * @param args.fetchLegacyGasPriceEstimatesUrl - The URL for the API we can use to obtain
- * non-EIP-1559-specific estimates.
  * @param args.fetchEthGasPriceEstimate - A function that fetches gas estimates using
  * `eth_gasPrice`.
  * @param args.calculateTimeEstimate - A function that determine time estimate bounds.
- * @param args.clientId - An identifier that an API can use to know who is asking for estimates.
  * @param args.ethQuery - An EthQuery instance we can use to talk to Ethereum directly.
- * @param args.nonRPCGasFeeApisDisabled - Whether to disable requests to the legacyAPIEndpoint and the EIP1559APIEndpoint
  * @returns The gas fee calculations.
  */
 export default function determineGasFeeCalculations(args: DetermineGasFeeCalculationsRequest): Promise<GasFeeCalculations>;
diff --git a/dist/determineGasFeeCalculations.d.cts.map b/dist/determineGasFeeCalculations.d.cts.map
index 6bb02aa92153b08bab5302576f64208cfcf1bbbc..5fe0e8816d8bc00e8af708b86fdda458700d2491 100644
--- a/dist/determineGasFeeCalculations.d.cts.map
+++ b/dist/determineGasFeeCalculations.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"determineGasFeeCalculations.d.cts","sourceRoot":"","sources":["../src/determineGasFeeCalculations.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,yBAAyB,EACzB,mBAAmB,EACnB,eAAe,EACf,WAAW,IAAI,kBAAkB,EACjC,sBAAsB,EACvB,+BAA2B;AAG5B,KAAK,kCAAkC,GAAG;IACxC,mBAAmB,EAAE,OAAO,CAAC;IAC7B,wBAAwB,EAAE,OAAO,CAAC;IAClC,iBAAiB,EAAE,CACjB,GAAG,EAAE,MAAM,EACX,QAAQ,CAAC,EAAE,MAAM,KACd,OAAO,CAAC,eAAe,CAAC,CAAC;IAC9B,oBAAoB,EAAE,MAAM,CAAC;IAC7B,4BAA4B,EAAE,CAC5B,GAAG,EAAE,MAAM,EACX,QAAQ,CAAC,EAAE,MAAM,KACd,OAAO,CAAC,sBAAsB,CAAC,CAAC;IACrC,+BAA+B,EAAE,MAAM,CAAC;IAGxC,wBAAwB,EAAE,CAAC,QAAQ,EAAE,GAAG,KAAK,OAAO,CAAC,mBAAmB,CAAC,CAAC;IAC1E,qBAAqB,EAAE,CACrB,oBAAoB,EAAE,MAAM,EAC5B,YAAY,EAAE,MAAM,EACpB,eAAe,EAAE,eAAe,KAC7B,yBAAyB,CAAC;IAC/B,QAAQ,EAAE,MAAM,GAAG,SAAS,CAAC;IAG7B,QAAQ,EAAE,GAAG,CAAC;IACd,wBAAwB,CAAC,EAAE,OAAO,CAAC;CACpC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,wBAA8B,2BAA2B,CACvD,IAAI,EAAE,kCAAkC,GACvC,OAAO,CAAC,kBAAkB,CAAC,CAY7B"}
\ No newline at end of file
+{"version":3,"file":"determineGasFeeCalculations.d.cts","sourceRoot":"","sources":["../src/determineGasFeeCalculations.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,yBAAyB,EACzB,mBAAmB,EACnB,eAAe,EACf,WAAW,IAAI,kBAAkB,EAElC,+BAA2B;AAG5B,KAAK,kCAAkC,GAAG;IACxC,mBAAmB,EAAE,OAAO,CAAC;IAC7B,wBAAwB,EAAE,OAAO,CAAC;IAGlC,wBAAwB,EAAE,CAAC,QAAQ,EAAE,GAAG,KAAK,OAAO,CAAC,mBAAmB,CAAC,CAAC;IAC1E,qBAAqB,EAAE,CACrB,oBAAoB,EAAE,MAAM,EAC5B,YAAY,EAAE,MAAM,EACpB,eAAe,EAAE,eAAe,KAC7B,yBAAyB,CAAC;IAG/B,QAAQ,EAAE,GAAG,CAAC;CACf,CAAC;AAEF;;;;;;;;;;;;;;GAcG;AACH,wBAA8B,2BAA2B,CACvD,IAAI,EAAE,kCAAkC,GACvC,OAAO,CAAC,kBAAkB,CAAC,CAY7B"}
\ No newline at end of file
diff --git a/dist/determineGasFeeCalculations.d.mts b/dist/determineGasFeeCalculations.d.mts
index 2772ca74c7780ff3d326371ffc6276c18efc2342..11a4f48ae72cd4dba82d1b89db3094949ac311da 100644
--- a/dist/determineGasFeeCalculations.d.mts
+++ b/dist/determineGasFeeCalculations.d.mts
@@ -1,16 +1,10 @@
-import type { EstimatedGasFeeTimeBounds, EthGasPriceEstimate, GasFeeEstimates, GasFeeState as GasFeeCalculations, LegacyGasPriceEstimate } from "./GasFeeController.mjs";
+import type { EstimatedGasFeeTimeBounds, EthGasPriceEstimate, GasFeeEstimates, GasFeeState as GasFeeCalculations } from "./GasFeeController.mjs";
 type DetermineGasFeeCalculationsRequest = {
     isEIP1559Compatible: boolean;
     isLegacyGasAPICompatible: boolean;
-    fetchGasEstimates: (url: string, clientId?: string) => Promise<GasFeeEstimates>;
-    fetchGasEstimatesUrl: string;
-    fetchLegacyGasPriceEstimates: (url: string, clientId?: string) => Promise<LegacyGasPriceEstimate>;
-    fetchLegacyGasPriceEstimatesUrl: string;
     fetchEthGasPriceEstimate: (ethQuery: any) => Promise<EthGasPriceEstimate>;
     calculateTimeEstimate: (maxPriorityFeePerGas: string, maxFeePerGas: string, gasFeeEstimates: GasFeeEstimates) => EstimatedGasFeeTimeBounds;
-    clientId: string | undefined;
     ethQuery: any;
-    nonRPCGasFeeApisDisabled?: boolean;
 };
 /**
  * Obtains a set of max base and priority fee estimates along with time estimates so that we
@@ -21,20 +15,10 @@ type DetermineGasFeeCalculationsRequest = {
  * produce estimates.
  * @param args.isLegacyGasAPICompatible - Governs whether or not we can use a non-EIP-1559 method to
  * produce estimates (for instance, testnets do not support estimates altogether).
- * @param args.fetchGasEstimates - A function that fetches gas estimates using an EIP-1559-specific
- * API.
- * @param args.fetchGasEstimatesUrl - The URL for the API we can use to obtain EIP-1559-specific
- * estimates.
- * @param args.fetchLegacyGasPriceEstimates - A function that fetches gas estimates using an
- * non-EIP-1559-specific API.
- * @param args.fetchLegacyGasPriceEstimatesUrl - The URL for the API we can use to obtain
- * non-EIP-1559-specific estimates.
  * @param args.fetchEthGasPriceEstimate - A function that fetches gas estimates using
  * `eth_gasPrice`.
  * @param args.calculateTimeEstimate - A function that determine time estimate bounds.
- * @param args.clientId - An identifier that an API can use to know who is asking for estimates.
  * @param args.ethQuery - An EthQuery instance we can use to talk to Ethereum directly.
- * @param args.nonRPCGasFeeApisDisabled - Whether to disable requests to the legacyAPIEndpoint and the EIP1559APIEndpoint
  * @returns The gas fee calculations.
  */
 export default function determineGasFeeCalculations(args: DetermineGasFeeCalculationsRequest): Promise<GasFeeCalculations>;
diff --git a/dist/determineGasFeeCalculations.d.mts.map b/dist/determineGasFeeCalculations.d.mts.map
index 4e581f43777ecd567b69338e38fb01b670c6a97d..b37f3a51c4040dce0546a01c5139948905bcf180 100644
--- a/dist/determineGasFeeCalculations.d.mts.map
+++ b/dist/determineGasFeeCalculations.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"determineGasFeeCalculations.d.mts","sourceRoot":"","sources":["../src/determineGasFeeCalculations.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,yBAAyB,EACzB,mBAAmB,EACnB,eAAe,EACf,WAAW,IAAI,kBAAkB,EACjC,sBAAsB,EACvB,+BAA2B;AAG5B,KAAK,kCAAkC,GAAG;IACxC,mBAAmB,EAAE,OAAO,CAAC;IAC7B,wBAAwB,EAAE,OAAO,CAAC;IAClC,iBAAiB,EAAE,CACjB,GAAG,EAAE,MAAM,EACX,QAAQ,CAAC,EAAE,MAAM,KACd,OAAO,CAAC,eAAe,CAAC,CAAC;IAC9B,oBAAoB,EAAE,MAAM,CAAC;IAC7B,4BAA4B,EAAE,CAC5B,GAAG,EAAE,MAAM,EACX,QAAQ,CAAC,EAAE,MAAM,KACd,OAAO,CAAC,sBAAsB,CAAC,CAAC;IACrC,+BAA+B,EAAE,MAAM,CAAC;IAGxC,wBAAwB,EAAE,CAAC,QAAQ,EAAE,GAAG,KAAK,OAAO,CAAC,mBAAmB,CAAC,CAAC;IAC1E,qBAAqB,EAAE,CACrB,oBAAoB,EAAE,MAAM,EAC5B,YAAY,EAAE,MAAM,EACpB,eAAe,EAAE,eAAe,KAC7B,yBAAyB,CAAC;IAC/B,QAAQ,EAAE,MAAM,GAAG,SAAS,CAAC;IAG7B,QAAQ,EAAE,GAAG,CAAC;IACd,wBAAwB,CAAC,EAAE,OAAO,CAAC;CACpC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,wBAA8B,2BAA2B,CACvD,IAAI,EAAE,kCAAkC,GACvC,OAAO,CAAC,kBAAkB,CAAC,CAY7B"}
\ No newline at end of file
+{"version":3,"file":"determineGasFeeCalculations.d.mts","sourceRoot":"","sources":["../src/determineGasFeeCalculations.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,yBAAyB,EACzB,mBAAmB,EACnB,eAAe,EACf,WAAW,IAAI,kBAAkB,EAElC,+BAA2B;AAG5B,KAAK,kCAAkC,GAAG;IACxC,mBAAmB,EAAE,OAAO,CAAC;IAC7B,wBAAwB,EAAE,OAAO,CAAC;IAGlC,wBAAwB,EAAE,CAAC,QAAQ,EAAE,GAAG,KAAK,OAAO,CAAC,mBAAmB,CAAC,CAAC;IAC1E,qBAAqB,EAAE,CACrB,oBAAoB,EAAE,MAAM,EAC5B,YAAY,EAAE,MAAM,EACpB,eAAe,EAAE,eAAe,KAC7B,yBAAyB,CAAC;IAG/B,QAAQ,EAAE,GAAG,CAAC;CACf,CAAC;AAEF;;;;;;;;;;;;;;GAcG;AACH,wBAA8B,2BAA2B,CACvD,IAAI,EAAE,kCAAkC,GACvC,OAAO,CAAC,kBAAkB,CAAC,CAY7B"}
\ No newline at end of file
diff --git a/dist/determineGasFeeCalculations.mjs b/dist/determineGasFeeCalculations.mjs
index 67cf43bbbe8ff7dc48807e513d1ae5fbc16b2f21..d10f71171d9158cd6c4b4c9fb0ae3a3454e57671 100644
--- a/dist/determineGasFeeCalculations.mjs
+++ b/dist/determineGasFeeCalculations.mjs
@@ -8,25 +8,15 @@ import { GAS_ESTIMATE_TYPES } from "./GasFeeController.mjs";
  * produce estimates.
  * @param args.isLegacyGasAPICompatible - Governs whether or not we can use a non-EIP-1559 method to
  * produce estimates (for instance, testnets do not support estimates altogether).
- * @param args.fetchGasEstimates - A function that fetches gas estimates using an EIP-1559-specific
- * API.
- * @param args.fetchGasEstimatesUrl - The URL for the API we can use to obtain EIP-1559-specific
- * estimates.
- * @param args.fetchLegacyGasPriceEstimates - A function that fetches gas estimates using an
- * non-EIP-1559-specific API.
- * @param args.fetchLegacyGasPriceEstimatesUrl - The URL for the API we can use to obtain
- * non-EIP-1559-specific estimates.
  * @param args.fetchEthGasPriceEstimate - A function that fetches gas estimates using
  * `eth_gasPrice`.
  * @param args.calculateTimeEstimate - A function that determine time estimate bounds.
- * @param args.clientId - An identifier that an API can use to know who is asking for estimates.
  * @param args.ethQuery - An EthQuery instance we can use to talk to Ethereum directly.
- * @param args.nonRPCGasFeeApisDisabled - Whether to disable requests to the legacyAPIEndpoint and the EIP1559APIEndpoint
  * @returns The gas fee calculations.
  */
 export default async function determineGasFeeCalculations(args) {
     try {
-        return await getEstimatesUsingFallbacks(args);
+        return await getEstimatesUsingProvider(args);
     }
     catch (error) {
         if (error instanceof Error) {
@@ -35,56 +25,6 @@ export default async function determineGasFeeCalculations(args) {
         throw error;
     }
 }
-/**
- * Retrieve the gas fee estimates using a series of fallback mechanisms.
- * @param request - The request object.
- * @returns The gas fee estimates.
- */
-async function getEstimatesUsingFallbacks(request) {
-    const { isEIP1559Compatible, isLegacyGasAPICompatible, nonRPCGasFeeApisDisabled, } = request;
-    try {
-        if (isEIP1559Compatible && !nonRPCGasFeeApisDisabled) {
-            return await getEstimatesUsingFeeMarketEndpoint(request);
-        }
-        if (isLegacyGasAPICompatible && !nonRPCGasFeeApisDisabled) {
-            return await getEstimatesUsingLegacyEndpoint(request);
-        }
-        throw new Error('Main gas fee/price estimation failed. Use fallback');
-    }
-    catch {
-        return await getEstimatesUsingProvider(request);
-    }
-}
-/**
- * Retrieve gas fee estimates using the EIP-1559 endpoint of the gas API.
- * @param request - The request object.
- * @returns The gas fee estimates.
- */
-async function getEstimatesUsingFeeMarketEndpoint(request) {
-    const { fetchGasEstimates, fetchGasEstimatesUrl, clientId, calculateTimeEstimate, } = request;
-    const estimates = await fetchGasEstimates(fetchGasEstimatesUrl, clientId);
-    const { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = estimates.medium;
-    const estimatedGasFeeTimeBounds = calculateTimeEstimate(suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas, estimates);
-    return {
-        gasFeeEstimates: estimates,
-        estimatedGasFeeTimeBounds,
-        gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,
-    };
-}
-/**
- * Retrieve gas fee estimates using the legacy endpoint of the gas API.
- * @param request - The request object.
- * @returns The gas fee estimates.
- */
-async function getEstimatesUsingLegacyEndpoint(request) {
-    const { fetchLegacyGasPriceEstimates, fetchLegacyGasPriceEstimatesUrl, clientId, } = request;
-    const estimates = await fetchLegacyGasPriceEstimates(fetchLegacyGasPriceEstimatesUrl, clientId);
-    return {
-        gasFeeEstimates: estimates,
-        estimatedGasFeeTimeBounds: {},
-        gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,
-    };
-}
 /**
  * Retrieve gas fee estimates using an `eth_gasPrice` call to the RPC provider.
  * @param request - The request object.
diff --git a/dist/determineGasFeeCalculations.mjs.map b/dist/determineGasFeeCalculations.mjs.map
index d25941e66f94184c09e5ae9ae990dd2ed2b26bb1..89d7a4d5dbf59a5de3a711dcf7211540615a7987 100644
--- a/dist/determineGasFeeCalculations.mjs.map
+++ b/dist/determineGasFeeCalculations.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"determineGasFeeCalculations.mjs","sourceRoot":"","sources":["../src/determineGasFeeCalculations.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,kBAAkB,EAAE,+BAA2B;AA8BxD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,2BAA2B,CACvD,IAAwC;IAExC,IAAI;QACF,OAAO,MAAM,0BAA0B,CAAC,IAAI,CAAC,CAAC;KAC/C;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,KAAK,YAAY,KAAK,EAAE;YAC1B,MAAM,IAAI,KAAK,CACb,6CAA6C,KAAK,CAAC,OAAO,EAAE,CAC7D,CAAC;SACH;QAED,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,0BAA0B,CACvC,OAA2C;IAE3C,MAAM,EACJ,mBAAmB,EACnB,wBAAwB,EACxB,wBAAwB,GACzB,GAAG,OAAO,CAAC;IAEZ,IAAI;QACF,IAAI,mBAAmB,IAAI,CAAC,wBAAwB,EAAE;YACpD,OAAO,MAAM,kCAAkC,CAAC,OAAO,CAAC,CAAC;SAC1D;QAED,IAAI,wBAAwB,IAAI,CAAC,wBAAwB,EAAE;YACzD,OAAO,MAAM,+BAA+B,CAAC,OAAO,CAAC,CAAC;SACvD;QAED,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;KACvE;IAAC,MAAM;QACN,OAAO,MAAM,yBAAyB,CAAC,OAAO,CAAC,CAAC;KACjD;AACH,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,kCAAkC,CAC/C,OAA2C;IAE3C,MAAM,EACJ,iBAAiB,EACjB,oBAAoB,EACpB,QAAQ,EACR,qBAAqB,GACtB,GAAG,OAAO,CAAC;IAEZ,MAAM,SAAS,GAAG,MAAM,iBAAiB,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;IAE1E,MAAM,EAAE,6BAA6B,EAAE,qBAAqB,EAAE,GAC5D,SAAS,CAAC,MAAM,CAAC;IAEnB,MAAM,yBAAyB,GAAG,qBAAqB,CACrD,6BAA6B,EAC7B,qBAAqB,EACrB,SAAS,CACV,CAAC;IAEF,OAAO;QACL,eAAe,EAAE,SAAS;QAC1B,yBAAyB;QACzB,eAAe,EAAE,kBAAkB,CAAC,UAAU;KAC/C,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,+BAA+B,CAC5C,OAA2C;IAE3C,MAAM,EACJ,4BAA4B,EAC5B,+BAA+B,EAC/B,QAAQ,GACT,GAAG,OAAO,CAAC;IAEZ,MAAM,SAAS,GAAG,MAAM,4BAA4B,CAClD,+BAA+B,EAC/B,QAAQ,CACT,CAAC;IAEF,OAAO;QACL,eAAe,EAAE,SAAS;QAC1B,yBAAyB,EAAE,EAAE;QAC7B,eAAe,EAAE,kBAAkB,CAAC,MAAM;KAC3C,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,yBAAyB,CACtC,OAA2C;IAE3C,MAAM,EAAE,QAAQ,EAAE,wBAAwB,EAAE,GAAG,OAAO,CAAC;IAEvD,MAAM,SAAS,GAAG,MAAM,wBAAwB,CAAC,QAAQ,CAAC,CAAC;IAE3D,OAAO;QACL,eAAe,EAAE,SAAS;QAC1B,yBAAyB,EAAE,EAAE;QAC7B,eAAe,EAAE,kBAAkB,CAAC,YAAY;KACjD,CAAC;AACJ,CAAC","sourcesContent":["import type {\n  EstimatedGasFeeTimeBounds,\n  EthGasPriceEstimate,\n  GasFeeEstimates,\n  GasFeeState as GasFeeCalculations,\n  LegacyGasPriceEstimate,\n} from './GasFeeController';\nimport { GAS_ESTIMATE_TYPES } from './GasFeeController';\n\ntype DetermineGasFeeCalculationsRequest = {\n  isEIP1559Compatible: boolean;\n  isLegacyGasAPICompatible: boolean;\n  fetchGasEstimates: (\n    url: string,\n    clientId?: string,\n  ) => Promise<GasFeeEstimates>;\n  fetchGasEstimatesUrl: string;\n  fetchLegacyGasPriceEstimates: (\n    url: string,\n    clientId?: string,\n  ) => Promise<LegacyGasPriceEstimate>;\n  fetchLegacyGasPriceEstimatesUrl: string;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  fetchEthGasPriceEstimate: (ethQuery: any) => Promise<EthGasPriceEstimate>;\n  calculateTimeEstimate: (\n    maxPriorityFeePerGas: string,\n    maxFeePerGas: string,\n    gasFeeEstimates: GasFeeEstimates,\n  ) => EstimatedGasFeeTimeBounds;\n  clientId: string | undefined;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ethQuery: any;\n  nonRPCGasFeeApisDisabled?: boolean;\n};\n\n/**\n * Obtains a set of max base and priority fee estimates along with time estimates so that we\n * can present them to users when they are sending transactions or making swaps.\n *\n * @param args - The arguments.\n * @param args.isEIP1559Compatible - Governs whether or not we can use an EIP-1559-only method to\n * produce estimates.\n * @param args.isLegacyGasAPICompatible - Governs whether or not we can use a non-EIP-1559 method to\n * produce estimates (for instance, testnets do not support estimates altogether).\n * @param args.fetchGasEstimates - A function that fetches gas estimates using an EIP-1559-specific\n * API.\n * @param args.fetchGasEstimatesUrl - The URL for the API we can use to obtain EIP-1559-specific\n * estimates.\n * @param args.fetchLegacyGasPriceEstimates - A function that fetches gas estimates using an\n * non-EIP-1559-specific API.\n * @param args.fetchLegacyGasPriceEstimatesUrl - The URL for the API we can use to obtain\n * non-EIP-1559-specific estimates.\n * @param args.fetchEthGasPriceEstimate - A function that fetches gas estimates using\n * `eth_gasPrice`.\n * @param args.calculateTimeEstimate - A function that determine time estimate bounds.\n * @param args.clientId - An identifier that an API can use to know who is asking for estimates.\n * @param args.ethQuery - An EthQuery instance we can use to talk to Ethereum directly.\n * @param args.nonRPCGasFeeApisDisabled - Whether to disable requests to the legacyAPIEndpoint and the EIP1559APIEndpoint\n * @returns The gas fee calculations.\n */\nexport default async function determineGasFeeCalculations(\n  args: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  try {\n    return await getEstimatesUsingFallbacks(args);\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new Error(\n        `Gas fee/price estimation failed. Message: ${error.message}`,\n      );\n    }\n\n    throw error;\n  }\n}\n\n/**\n * Retrieve the gas fee estimates using a series of fallback mechanisms.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingFallbacks(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const {\n    isEIP1559Compatible,\n    isLegacyGasAPICompatible,\n    nonRPCGasFeeApisDisabled,\n  } = request;\n\n  try {\n    if (isEIP1559Compatible && !nonRPCGasFeeApisDisabled) {\n      return await getEstimatesUsingFeeMarketEndpoint(request);\n    }\n\n    if (isLegacyGasAPICompatible && !nonRPCGasFeeApisDisabled) {\n      return await getEstimatesUsingLegacyEndpoint(request);\n    }\n\n    throw new Error('Main gas fee/price estimation failed. Use fallback');\n  } catch {\n    return await getEstimatesUsingProvider(request);\n  }\n}\n\n/**\n * Retrieve gas fee estimates using the EIP-1559 endpoint of the gas API.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingFeeMarketEndpoint(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const {\n    fetchGasEstimates,\n    fetchGasEstimatesUrl,\n    clientId,\n    calculateTimeEstimate,\n  } = request;\n\n  const estimates = await fetchGasEstimates(fetchGasEstimatesUrl, clientId);\n\n  const { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } =\n    estimates.medium;\n\n  const estimatedGasFeeTimeBounds = calculateTimeEstimate(\n    suggestedMaxPriorityFeePerGas,\n    suggestedMaxFeePerGas,\n    estimates,\n  );\n\n  return {\n    gasFeeEstimates: estimates,\n    estimatedGasFeeTimeBounds,\n    gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n  };\n}\n\n/**\n * Retrieve gas fee estimates using the legacy endpoint of the gas API.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingLegacyEndpoint(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const {\n    fetchLegacyGasPriceEstimates,\n    fetchLegacyGasPriceEstimatesUrl,\n    clientId,\n  } = request;\n\n  const estimates = await fetchLegacyGasPriceEstimates(\n    fetchLegacyGasPriceEstimatesUrl,\n    clientId,\n  );\n\n  return {\n    gasFeeEstimates: estimates,\n    estimatedGasFeeTimeBounds: {},\n    gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n  };\n}\n\n/**\n * Retrieve gas fee estimates using an `eth_gasPrice` call to the RPC provider.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingProvider(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const { ethQuery, fetchEthGasPriceEstimate } = request;\n\n  const estimates = await fetchEthGasPriceEstimate(ethQuery);\n\n  return {\n    gasFeeEstimates: estimates,\n    estimatedGasFeeTimeBounds: {},\n    gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"determineGasFeeCalculations.mjs","sourceRoot":"","sources":["../src/determineGasFeeCalculations.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,kBAAkB,EAAE,+BAA2B;AAkBxD;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,2BAA2B,CACvD,IAAwC;IAExC,IAAI;QACF,OAAO,MAAM,yBAAyB,CAAC,IAAI,CAAC,CAAC;KAC9C;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,KAAK,YAAY,KAAK,EAAE;YAC1B,MAAM,IAAI,KAAK,CACb,6CAA6C,KAAK,CAAC,OAAO,EAAE,CAC7D,CAAC;SACH;QAED,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,yBAAyB,CACtC,OAA2C;IAE3C,MAAM,EAAE,QAAQ,EAAE,wBAAwB,EAAE,GAAG,OAAO,CAAC;IAEvD,MAAM,SAAS,GAAG,MAAM,wBAAwB,CAAC,QAAQ,CAAC,CAAC;IAE3D,OAAO;QACL,eAAe,EAAE,SAAS;QAC1B,yBAAyB,EAAE,EAAE;QAC7B,eAAe,EAAE,kBAAkB,CAAC,YAAY;KACjD,CAAC;AACJ,CAAC","sourcesContent":["import type {\n  EstimatedGasFeeTimeBounds,\n  EthGasPriceEstimate,\n  GasFeeEstimates,\n  GasFeeState as GasFeeCalculations,\n  LegacyGasPriceEstimate,\n} from './GasFeeController';\nimport { GAS_ESTIMATE_TYPES } from './GasFeeController';\n\ntype DetermineGasFeeCalculationsRequest = {\n  isEIP1559Compatible: boolean;\n  isLegacyGasAPICompatible: boolean;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  fetchEthGasPriceEstimate: (ethQuery: any) => Promise<EthGasPriceEstimate>;\n  calculateTimeEstimate: (\n    maxPriorityFeePerGas: string,\n    maxFeePerGas: string,\n    gasFeeEstimates: GasFeeEstimates,\n  ) => EstimatedGasFeeTimeBounds;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ethQuery: any;\n};\n\n/**\n * Obtains a set of max base and priority fee estimates along with time estimates so that we\n * can present them to users when they are sending transactions or making swaps.\n *\n * @param args - The arguments.\n * @param args.isEIP1559Compatible - Governs whether or not we can use an EIP-1559-only method to\n * produce estimates.\n * @param args.isLegacyGasAPICompatible - Governs whether or not we can use a non-EIP-1559 method to\n * produce estimates (for instance, testnets do not support estimates altogether).\n * @param args.fetchEthGasPriceEstimate - A function that fetches gas estimates using\n * `eth_gasPrice`.\n * @param args.calculateTimeEstimate - A function that determine time estimate bounds.\n * @param args.ethQuery - An EthQuery instance we can use to talk to Ethereum directly.\n * @returns The gas fee calculations.\n */\nexport default async function determineGasFeeCalculations(\n  args: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  try {\n    return await getEstimatesUsingProvider(args);\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new Error(\n        `Gas fee/price estimation failed. Message: ${error.message}`,\n      );\n    }\n\n    throw error;\n  }\n}\n\n/**\n * Retrieve gas fee estimates using an `eth_gasPrice` call to the RPC provider.\n * @param request - The request object.\n * @returns The gas fee estimates.\n */\nasync function getEstimatesUsingProvider(\n  request: DetermineGasFeeCalculationsRequest,\n): Promise<GasFeeCalculations> {\n  const { ethQuery, fetchEthGasPriceEstimate } = request;\n\n  const estimates = await fetchEthGasPriceEstimate(ethQuery);\n\n  return {\n    gasFeeEstimates: estimates,\n    estimatedGasFeeTimeBounds: {},\n    gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/gas-util.cjs b/dist/gas-util.cjs
index 9909d7240f0cf778d340a16511e31349c9dbf2bd..c70fa135e7509ce9bae0ebb9ad957cb0afef8e43 100644
--- a/dist/gas-util.cjs
+++ b/dist/gas-util.cjs
@@ -3,7 +3,7 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.calculateTimeEstimate = exports.fetchEthGasPriceEstimate = exports.fetchLegacyGasPriceEstimates = exports.fetchGasEstimates = exports.normalizeGWEIDecimalNumbers = void 0;
+exports.calculateTimeEstimate = exports.fetchEthGasPriceEstimate = exports.normalizeGWEIDecimalNumbers = void 0;
 const controller_utils_1 = require("@metamask/controller-utils");
 const bn_js_1 = __importDefault(require("bn.js"));
 const makeClientIdHeader = (clientId) => ({ 'X-Client-Id': clientId });
@@ -19,67 +19,6 @@ function normalizeGWEIDecimalNumbers(n) {
     return numberAsGWEI;
 }
 exports.normalizeGWEIDecimalNumbers = normalizeGWEIDecimalNumbers;
-/**
- * Fetch gas estimates from the given URL.
- *
- * @param url - The gas estimate URL.
- * @param clientId - The client ID used to identify to the API who is asking for estimates.
- * @returns The gas estimates.
- */
-async function fetchGasEstimates(url, clientId) {
-    const estimates = await (0, controller_utils_1.handleFetch)(url, clientId ? { headers: makeClientIdHeader(clientId) } : undefined);
-    return {
-        low: {
-            ...estimates.low,
-            suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),
-            suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),
-        },
-        medium: {
-            ...estimates.medium,
-            suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),
-            suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),
-        },
-        high: {
-            ...estimates.high,
-            suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),
-            suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),
-        },
-        estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),
-        historicalBaseFeeRange: estimates.historicalBaseFeeRange,
-        baseFeeTrend: estimates.baseFeeTrend,
-        latestPriorityFeeRange: estimates.latestPriorityFeeRange,
-        historicalPriorityFeeRange: estimates.historicalPriorityFeeRange,
-        priorityFeeTrend: estimates.priorityFeeTrend,
-        networkCongestion: estimates.networkCongestion,
-    };
-}
-exports.fetchGasEstimates = fetchGasEstimates;
-/**
- * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium
- * high values from that API.
- *
- * @param url - The URL to fetch gas price estimates from.
- * @param clientId - The client ID used to identify to the API who is asking for estimates.
- * @returns The gas price estimates.
- */
-async function fetchLegacyGasPriceEstimates(url, clientId) {
-    const result = await (0, controller_utils_1.handleFetch)(url, {
-        referrer: url,
-        referrerPolicy: 'no-referrer-when-downgrade',
-        method: 'GET',
-        mode: 'cors',
-        headers: {
-            'Content-Type': 'application/json',
-            ...(clientId && makeClientIdHeader(clientId)),
-        },
-    });
-    return {
-        low: result.SafeGasPrice,
-        medium: result.ProposeGasPrice,
-        high: result.FastGasPrice,
-    };
-}
-exports.fetchLegacyGasPriceEstimates = fetchLegacyGasPriceEstimates;
 /**
  * Get a gas price estimate from the network using the `eth_gasPrice` method.
  *
diff --git a/dist/gas-util.cjs.map b/dist/gas-util.cjs.map
index e6bf8cfbfe0d9319c67eea7fff54300b6a3e849f..e7130aa609a667303c651812a36e813cf6fc6c32 100644
--- a/dist/gas-util.cjs.map
+++ b/dist/gas-util.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"gas-util.cjs","sourceRoot":"","sources":["../src/gas-util.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  query,\n  handleFetch,\n  gweiDecToWEIBN,\n  weiHexToGweiDec,\n} from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport BN from 'bn.js';\n\nimport type {\n  GasFeeEstimates,\n  EthGasPriceEstimate,\n  EstimatedGasFeeTimeBounds,\n  unknownString,\n  LegacyGasPriceEstimate,\n} from './GasFeeController';\n\nconst makeClientIdHeader = (clientId: string) => ({ 'X-Client-Id': clientId });\n\n/**\n * Convert a decimal GWEI value to a decimal string rounded to the nearest WEI.\n *\n * @param n - The input GWEI amount, as a decimal string or a number.\n * @returns The decimal string GWEI amount.\n */\nexport function normalizeGWEIDecimalNumbers(n: string | number) {\n  const numberAsWEIHex = gweiDecToWEIBN(n).toString(16);\n  const numberAsGWEI = weiHexToGweiDec(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\n/**\n * Fetch gas estimates from the given URL.\n *\n * @param url - The gas estimate URL.\n * @param clientId - The client ID used to identify to the API who is asking for estimates.\n * @returns The gas estimates.\n */\nexport async function fetchGasEstimates(\n  url: string,\n  clientId?: string,\n): Promise<GasFeeEstimates> {\n  const estimates = await handleFetch(\n    url,\n    clientId ? { headers: makeClientIdHeader(clientId) } : undefined,\n  );\n  return {\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.low.suggestedMaxPriorityFeePerGas,\n      ),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.low.suggestedMaxFeePerGas,\n      ),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.medium.suggestedMaxPriorityFeePerGas,\n      ),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.medium.suggestedMaxFeePerGas,\n      ),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.high.suggestedMaxPriorityFeePerGas,\n      ),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.high.suggestedMaxFeePerGas,\n      ),\n    },\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    historicalBaseFeeRange: estimates.historicalBaseFeeRange,\n    baseFeeTrend: estimates.baseFeeTrend,\n    latestPriorityFeeRange: estimates.latestPriorityFeeRange,\n    historicalPriorityFeeRange: estimates.historicalPriorityFeeRange,\n    priorityFeeTrend: estimates.priorityFeeTrend,\n    networkCongestion: estimates.networkCongestion,\n  };\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n *\n * @param url - The URL to fetch gas price estimates from.\n * @param clientId - The client ID used to identify to the API who is asking for estimates.\n * @returns The gas price estimates.\n */\nexport async function fetchLegacyGasPriceEstimates(\n  url: string,\n  clientId?: string,\n): Promise<LegacyGasPriceEstimate> {\n  const result = await handleFetch(url, {\n    referrer: url,\n    referrerPolicy: 'no-referrer-when-downgrade',\n    method: 'GET',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json',\n      ...(clientId && makeClientIdHeader(clientId)),\n    },\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\n/**\n * Get a gas price estimate from the network using the `eth_gasPrice` method.\n *\n * @param ethQuery - The EthQuery instance to call the network with.\n * @returns A gas price estimate.\n */\nexport async function fetchEthGasPriceEstimate(\n  ethQuery: EthQuery,\n): Promise<EthGasPriceEstimate> {\n  const gasPrice = await query(ethQuery, 'gasPrice');\n  return {\n    gasPrice: weiHexToGweiDec(gasPrice).toString(),\n  };\n}\n\n/**\n * Estimate the time it will take for a transaction to be confirmed.\n *\n * @param maxPriorityFeePerGas - The max priority fee per gas.\n * @param maxFeePerGas - The max fee per gas.\n * @param gasFeeEstimates - The gas fee estimates.\n * @returns The estimated lower and upper bounds for when this transaction will be confirmed.\n */\nexport function calculateTimeEstimate(\n  maxPriorityFeePerGas: string,\n  maxFeePerGas: string,\n  gasFeeEstimates: GasFeeEstimates,\n): EstimatedGasFeeTimeBounds {\n  const { low, medium, high, estimatedBaseFee } = gasFeeEstimates;\n\n  const maxPriorityFeePerGasInWEI = gweiDecToWEIBN(maxPriorityFeePerGas);\n  const maxFeePerGasInWEI = gweiDecToWEIBN(maxFeePerGas);\n  const estimatedBaseFeeInWEI = gweiDecToWEIBN(estimatedBaseFee);\n\n  const effectiveMaxPriorityFee = BN.min(\n    maxPriorityFeePerGasInWEI,\n    maxFeePerGasInWEI.sub(estimatedBaseFeeInWEI),\n  );\n\n  const lowMaxPriorityFeeInWEI = gweiDecToWEIBN(\n    low.suggestedMaxPriorityFeePerGas,\n  );\n  const mediumMaxPriorityFeeInWEI = gweiDecToWEIBN(\n    medium.suggestedMaxPriorityFeePerGas,\n  );\n  const highMaxPriorityFeeInWEI = gweiDecToWEIBN(\n    high.suggestedMaxPriorityFeePerGas,\n  );\n\n  let lowerTimeBound;\n  let upperTimeBound;\n\n  if (effectiveMaxPriorityFee.lt(lowMaxPriorityFeeInWEI)) {\n    lowerTimeBound = null;\n    upperTimeBound = 'unknown' as unknownString;\n  } else if (\n    effectiveMaxPriorityFee.gte(lowMaxPriorityFeeInWEI) &&\n    effectiveMaxPriorityFee.lt(mediumMaxPriorityFeeInWEI)\n  ) {\n    lowerTimeBound = low.minWaitTimeEstimate;\n    upperTimeBound = low.maxWaitTimeEstimate;\n  } else if (\n    effectiveMaxPriorityFee.gte(mediumMaxPriorityFeeInWEI) &&\n    effectiveMaxPriorityFee.lt(highMaxPriorityFeeInWEI)\n  ) {\n    lowerTimeBound = medium.minWaitTimeEstimate;\n    upperTimeBound = medium.maxWaitTimeEstimate;\n  } else if (effectiveMaxPriorityFee.eq(highMaxPriorityFeeInWEI)) {\n    lowerTimeBound = high.minWaitTimeEstimate;\n    upperTimeBound = high.maxWaitTimeEstimate;\n  } else {\n    lowerTimeBound = 0;\n    upperTimeBound = high.maxWaitTimeEstimate;\n  }\n\n  return {\n    lowerTimeBound,\n    upperTimeBound,\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"gas-util.cjs","sourceRoot":"","sources":["../src/gas-util.ts"],"names":[],"mappings":";;;;;;AAAA,iEAKoC;AAEpC,kDAAuB;AAUvB,MAAM,kBAAkB,GAAG,CAAC,QAAgB,EAAE,EAAE,CAAC,CAAC,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC;AAE/E;;;;;GAKG;AACH,SAAgB,2BAA2B,CAAC,CAAkB;IAC5D,MAAM,cAAc,GAAG,IAAA,iCAAc,EAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACtD,MAAM,YAAY,GAAG,IAAA,kCAAe,EAAC,cAAc,CAAC,CAAC;IACrD,OAAO,YAAY,CAAC;AACtB,CAAC;AAJD,kEAIC;AAED;;;;;GAKG;AACI,KAAK,UAAU,wBAAwB,CAC5C,QAAkB;IAElB,MAAM,QAAQ,GAAG,MAAM,IAAA,wBAAK,EAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACnD,OAAO;QACL,QAAQ,EAAE,IAAA,kCAAe,EAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE;KAC/C,CAAC;AACJ,CAAC;AAPD,4DAOC;AAED;;;;;;;GAOG;AACH,SAAgB,qBAAqB,CACnC,oBAA4B,EAC5B,YAAoB,EACpB,eAAgC;IAEhC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,gBAAgB,EAAE,GAAG,eAAe,CAAC;IAEhE,MAAM,yBAAyB,GAAG,IAAA,iCAAc,EAAC,oBAAoB,CAAC,CAAC;IACvE,MAAM,iBAAiB,GAAG,IAAA,iCAAc,EAAC,YAAY,CAAC,CAAC;IACvD,MAAM,qBAAqB,GAAG,IAAA,iCAAc,EAAC,gBAAgB,CAAC,CAAC;IAE/D,MAAM,uBAAuB,GAAG,eAAE,CAAC,GAAG,CACpC,yBAAyB,EACzB,iBAAiB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAC7C,CAAC;IAEF,MAAM,sBAAsB,GAAG,IAAA,iCAAc,EAC3C,GAAG,CAAC,6BAA6B,CAClC,CAAC;IACF,MAAM,yBAAyB,GAAG,IAAA,iCAAc,EAC9C,MAAM,CAAC,6BAA6B,CACrC,CAAC;IACF,MAAM,uBAAuB,GAAG,IAAA,iCAAc,EAC5C,IAAI,CAAC,6BAA6B,CACnC,CAAC;IAEF,IAAI,cAAc,CAAC;IACnB,IAAI,cAAc,CAAC;IAEnB,IAAI,uBAAuB,CAAC,EAAE,CAAC,sBAAsB,CAAC,EAAE;QACtD,cAAc,GAAG,IAAI,CAAC;QACtB,cAAc,GAAG,SAA0B,CAAC;KAC7C;SAAM,IACL,uBAAuB,CAAC,GAAG,CAAC,sBAAsB,CAAC;QACnD,uBAAuB,CAAC,EAAE,CAAC,yBAAyB,CAAC,EACrD;QACA,cAAc,GAAG,GAAG,CAAC,mBAAmB,CAAC;QACzC,cAAc,GAAG,GAAG,CAAC,mBAAmB,CAAC;KAC1C;SAAM,IACL,uBAAuB,CAAC,GAAG,CAAC,yBAAyB,CAAC;QACtD,uBAAuB,CAAC,EAAE,CAAC,uBAAuB,CAAC,EACnD;QACA,cAAc,GAAG,MAAM,CAAC,mBAAmB,CAAC;QAC5C,cAAc,GAAG,MAAM,CAAC,mBAAmB,CAAC;KAC7C;SAAM,IAAI,uBAAuB,CAAC,EAAE,CAAC,uBAAuB,CAAC,EAAE;QAC9D,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAC1C,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;KAC3C;SAAM;QACL,cAAc,GAAG,CAAC,CAAC;QACnB,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;KAC3C;IAED,OAAO;QACL,cAAc;QACd,cAAc;KACf,CAAC;AACJ,CAAC;AAxDD,sDAwDC","sourcesContent":["import {\n  query,\n  handleFetch,\n  gweiDecToWEIBN,\n  weiHexToGweiDec,\n} from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport BN from 'bn.js';\n\nimport type {\n  GasFeeEstimates,\n  EthGasPriceEstimate,\n  EstimatedGasFeeTimeBounds,\n  unknownString,\n  LegacyGasPriceEstimate,\n} from './GasFeeController';\n\nconst makeClientIdHeader = (clientId: string) => ({ 'X-Client-Id': clientId });\n\n/**\n * Convert a decimal GWEI value to a decimal string rounded to the nearest WEI.\n *\n * @param n - The input GWEI amount, as a decimal string or a number.\n * @returns The decimal string GWEI amount.\n */\nexport function normalizeGWEIDecimalNumbers(n: string | number) {\n  const numberAsWEIHex = gweiDecToWEIBN(n).toString(16);\n  const numberAsGWEI = weiHexToGweiDec(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\n/**\n * Get a gas price estimate from the network using the `eth_gasPrice` method.\n *\n * @param ethQuery - The EthQuery instance to call the network with.\n * @returns A gas price estimate.\n */\nexport async function fetchEthGasPriceEstimate(\n  ethQuery: EthQuery,\n): Promise<EthGasPriceEstimate> {\n  const gasPrice = await query(ethQuery, 'gasPrice');\n  return {\n    gasPrice: weiHexToGweiDec(gasPrice).toString(),\n  };\n}\n\n/**\n * Estimate the time it will take for a transaction to be confirmed.\n *\n * @param maxPriorityFeePerGas - The max priority fee per gas.\n * @param maxFeePerGas - The max fee per gas.\n * @param gasFeeEstimates - The gas fee estimates.\n * @returns The estimated lower and upper bounds for when this transaction will be confirmed.\n */\nexport function calculateTimeEstimate(\n  maxPriorityFeePerGas: string,\n  maxFeePerGas: string,\n  gasFeeEstimates: GasFeeEstimates,\n): EstimatedGasFeeTimeBounds {\n  const { low, medium, high, estimatedBaseFee } = gasFeeEstimates;\n\n  const maxPriorityFeePerGasInWEI = gweiDecToWEIBN(maxPriorityFeePerGas);\n  const maxFeePerGasInWEI = gweiDecToWEIBN(maxFeePerGas);\n  const estimatedBaseFeeInWEI = gweiDecToWEIBN(estimatedBaseFee);\n\n  const effectiveMaxPriorityFee = BN.min(\n    maxPriorityFeePerGasInWEI,\n    maxFeePerGasInWEI.sub(estimatedBaseFeeInWEI),\n  );\n\n  const lowMaxPriorityFeeInWEI = gweiDecToWEIBN(\n    low.suggestedMaxPriorityFeePerGas,\n  );\n  const mediumMaxPriorityFeeInWEI = gweiDecToWEIBN(\n    medium.suggestedMaxPriorityFeePerGas,\n  );\n  const highMaxPriorityFeeInWEI = gweiDecToWEIBN(\n    high.suggestedMaxPriorityFeePerGas,\n  );\n\n  let lowerTimeBound;\n  let upperTimeBound;\n\n  if (effectiveMaxPriorityFee.lt(lowMaxPriorityFeeInWEI)) {\n    lowerTimeBound = null;\n    upperTimeBound = 'unknown' as unknownString;\n  } else if (\n    effectiveMaxPriorityFee.gte(lowMaxPriorityFeeInWEI) &&\n    effectiveMaxPriorityFee.lt(mediumMaxPriorityFeeInWEI)\n  ) {\n    lowerTimeBound = low.minWaitTimeEstimate;\n    upperTimeBound = low.maxWaitTimeEstimate;\n  } else if (\n    effectiveMaxPriorityFee.gte(mediumMaxPriorityFeeInWEI) &&\n    effectiveMaxPriorityFee.lt(highMaxPriorityFeeInWEI)\n  ) {\n    lowerTimeBound = medium.minWaitTimeEstimate;\n    upperTimeBound = medium.maxWaitTimeEstimate;\n  } else if (effectiveMaxPriorityFee.eq(highMaxPriorityFeeInWEI)) {\n    lowerTimeBound = high.minWaitTimeEstimate;\n    upperTimeBound = high.maxWaitTimeEstimate;\n  } else {\n    lowerTimeBound = 0;\n    upperTimeBound = high.maxWaitTimeEstimate;\n  }\n\n  return {\n    lowerTimeBound,\n    upperTimeBound,\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/gas-util.d.cts b/dist/gas-util.d.cts
index fe52eca21d2f168297d7c86db235350b08b2f0e2..ff7d5384972a946459c2a4656f461d712bf1c1e8 100644
--- a/dist/gas-util.d.cts
+++ b/dist/gas-util.d.cts
@@ -1,5 +1,5 @@
 import type EthQuery from "@metamask/eth-query";
-import type { GasFeeEstimates, EthGasPriceEstimate, EstimatedGasFeeTimeBounds, LegacyGasPriceEstimate } from "./GasFeeController.cjs";
+import type { GasFeeEstimates, EthGasPriceEstimate, EstimatedGasFeeTimeBounds } from "./GasFeeController.cjs";
 /**
  * Convert a decimal GWEI value to a decimal string rounded to the nearest WEI.
  *
@@ -7,23 +7,6 @@ import type { GasFeeEstimates, EthGasPriceEstimate, EstimatedGasFeeTimeBounds, L
  * @returns The decimal string GWEI amount.
  */
 export declare function normalizeGWEIDecimalNumbers(n: string | number): any;
-/**
- * Fetch gas estimates from the given URL.
- *
- * @param url - The gas estimate URL.
- * @param clientId - The client ID used to identify to the API who is asking for estimates.
- * @returns The gas estimates.
- */
-export declare function fetchGasEstimates(url: string, clientId?: string): Promise<GasFeeEstimates>;
-/**
- * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium
- * high values from that API.
- *
- * @param url - The URL to fetch gas price estimates from.
- * @param clientId - The client ID used to identify to the API who is asking for estimates.
- * @returns The gas price estimates.
- */
-export declare function fetchLegacyGasPriceEstimates(url: string, clientId?: string): Promise<LegacyGasPriceEstimate>;
 /**
  * Get a gas price estimate from the network using the `eth_gasPrice` method.
  *
diff --git a/dist/gas-util.d.cts.map b/dist/gas-util.d.cts.map
index 01d81281862820d463dc3f27f1de70a0050fcd25..d82f81be3e5f81fe386b4795ca2bbfef2d21a566 100644
--- a/dist/gas-util.d.cts.map
+++ b/dist/gas-util.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"gas-util.d.cts","sourceRoot":"","sources":["../src/gas-util.ts"],"names":[],"mappings":"AAMA,OAAO,KAAK,QAAQ,4BAA4B;AAGhD,OAAO,KAAK,EACV,eAAe,EACf,mBAAmB,EACnB,yBAAyB,EAEzB,sBAAsB,EACvB,+BAA2B;AAI5B;;;;;GAKG;AACH,wBAAgB,2BAA2B,CAAC,CAAC,EAAE,MAAM,GAAG,MAAM,OAI7D;AAED;;;;;;GAMG;AACH,wBAAsB,iBAAiB,CACrC,GAAG,EAAE,MAAM,EACX,QAAQ,CAAC,EAAE,MAAM,GAChB,OAAO,CAAC,eAAe,CAAC,CAyC1B;AAED;;;;;;;GAOG;AACH,wBAAsB,4BAA4B,CAChD,GAAG,EAAE,MAAM,EACX,QAAQ,CAAC,EAAE,MAAM,GAChB,OAAO,CAAC,sBAAsB,CAAC,CAgBjC;AAED;;;;;GAKG;AACH,wBAAsB,wBAAwB,CAC5C,QAAQ,EAAE,QAAQ,GACjB,OAAO,CAAC,mBAAmB,CAAC,CAK9B;AAED;;;;;;;GAOG;AACH,wBAAgB,qBAAqB,CACnC,oBAAoB,EAAE,MAAM,EAC5B,YAAY,EAAE,MAAM,EACpB,eAAe,EAAE,eAAe,GAC/B,yBAAyB,CAoD3B"}
\ No newline at end of file
+{"version":3,"file":"gas-util.d.cts","sourceRoot":"","sources":["../src/gas-util.ts"],"names":[],"mappings":"AAMA,OAAO,KAAK,QAAQ,4BAA4B;AAGhD,OAAO,KAAK,EACV,eAAe,EACf,mBAAmB,EACnB,yBAAyB,EAG1B,+BAA2B;AAI5B;;;;;GAKG;AACH,wBAAgB,2BAA2B,CAAC,CAAC,EAAE,MAAM,GAAG,MAAM,OAI7D;AAED;;;;;GAKG;AACH,wBAAsB,wBAAwB,CAC5C,QAAQ,EAAE,QAAQ,GACjB,OAAO,CAAC,mBAAmB,CAAC,CAK9B;AAED;;;;;;;GAOG;AACH,wBAAgB,qBAAqB,CACnC,oBAAoB,EAAE,MAAM,EAC5B,YAAY,EAAE,MAAM,EACpB,eAAe,EAAE,eAAe,GAC/B,yBAAyB,CAoD3B"}
\ No newline at end of file
diff --git a/dist/gas-util.d.mts b/dist/gas-util.d.mts
index e53211ae983ff8ab28a05bf0b29db30bc5f906c2..e76a4b773550b8cc07d472d42754fba85cf0d4f3 100644
--- a/dist/gas-util.d.mts
+++ b/dist/gas-util.d.mts
@@ -1,5 +1,5 @@
 import type EthQuery from "@metamask/eth-query";
-import type { GasFeeEstimates, EthGasPriceEstimate, EstimatedGasFeeTimeBounds, LegacyGasPriceEstimate } from "./GasFeeController.mjs";
+import type { GasFeeEstimates, EthGasPriceEstimate, EstimatedGasFeeTimeBounds } from "./GasFeeController.mjs";
 /**
  * Convert a decimal GWEI value to a decimal string rounded to the nearest WEI.
  *
@@ -7,23 +7,6 @@ import type { GasFeeEstimates, EthGasPriceEstimate, EstimatedGasFeeTimeBounds, L
  * @returns The decimal string GWEI amount.
  */
 export declare function normalizeGWEIDecimalNumbers(n: string | number): any;
-/**
- * Fetch gas estimates from the given URL.
- *
- * @param url - The gas estimate URL.
- * @param clientId - The client ID used to identify to the API who is asking for estimates.
- * @returns The gas estimates.
- */
-export declare function fetchGasEstimates(url: string, clientId?: string): Promise<GasFeeEstimates>;
-/**
- * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium
- * high values from that API.
- *
- * @param url - The URL to fetch gas price estimates from.
- * @param clientId - The client ID used to identify to the API who is asking for estimates.
- * @returns The gas price estimates.
- */
-export declare function fetchLegacyGasPriceEstimates(url: string, clientId?: string): Promise<LegacyGasPriceEstimate>;
 /**
  * Get a gas price estimate from the network using the `eth_gasPrice` method.
  *
diff --git a/dist/gas-util.d.mts.map b/dist/gas-util.d.mts.map
index 63d8cc0e520851d99cfd260a815f6442e9cf8a6d..2882e675eb8dbdb94d6def113989d78fbec0e622 100644
--- a/dist/gas-util.d.mts.map
+++ b/dist/gas-util.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"gas-util.d.mts","sourceRoot":"","sources":["../src/gas-util.ts"],"names":[],"mappings":"AAMA,OAAO,KAAK,QAAQ,4BAA4B;AAGhD,OAAO,KAAK,EACV,eAAe,EACf,mBAAmB,EACnB,yBAAyB,EAEzB,sBAAsB,EACvB,+BAA2B;AAI5B;;;;;GAKG;AACH,wBAAgB,2BAA2B,CAAC,CAAC,EAAE,MAAM,GAAG,MAAM,OAI7D;AAED;;;;;;GAMG;AACH,wBAAsB,iBAAiB,CACrC,GAAG,EAAE,MAAM,EACX,QAAQ,CAAC,EAAE,MAAM,GAChB,OAAO,CAAC,eAAe,CAAC,CAyC1B;AAED;;;;;;;GAOG;AACH,wBAAsB,4BAA4B,CAChD,GAAG,EAAE,MAAM,EACX,QAAQ,CAAC,EAAE,MAAM,GAChB,OAAO,CAAC,sBAAsB,CAAC,CAgBjC;AAED;;;;;GAKG;AACH,wBAAsB,wBAAwB,CAC5C,QAAQ,EAAE,QAAQ,GACjB,OAAO,CAAC,mBAAmB,CAAC,CAK9B;AAED;;;;;;;GAOG;AACH,wBAAgB,qBAAqB,CACnC,oBAAoB,EAAE,MAAM,EAC5B,YAAY,EAAE,MAAM,EACpB,eAAe,EAAE,eAAe,GAC/B,yBAAyB,CAoD3B"}
\ No newline at end of file
+{"version":3,"file":"gas-util.d.mts","sourceRoot":"","sources":["../src/gas-util.ts"],"names":[],"mappings":"AAMA,OAAO,KAAK,QAAQ,4BAA4B;AAGhD,OAAO,KAAK,EACV,eAAe,EACf,mBAAmB,EACnB,yBAAyB,EAG1B,+BAA2B;AAI5B;;;;;GAKG;AACH,wBAAgB,2BAA2B,CAAC,CAAC,EAAE,MAAM,GAAG,MAAM,OAI7D;AAED;;;;;GAKG;AACH,wBAAsB,wBAAwB,CAC5C,QAAQ,EAAE,QAAQ,GACjB,OAAO,CAAC,mBAAmB,CAAC,CAK9B;AAED;;;;;;;GAOG;AACH,wBAAgB,qBAAqB,CACnC,oBAAoB,EAAE,MAAM,EAC5B,YAAY,EAAE,MAAM,EACpB,eAAe,EAAE,eAAe,GAC/B,yBAAyB,CAoD3B"}
\ No newline at end of file
diff --git a/dist/gas-util.mjs b/dist/gas-util.mjs
index c6a8d033e9c2217145803d6f76e01c0c83c62742..64cffc670982e9c1fb8b875aabecf2c87d2ac4ea 100644
--- a/dist/gas-util.mjs
+++ b/dist/gas-util.mjs
@@ -19,65 +19,6 @@ export function normalizeGWEIDecimalNumbers(n) {
     const numberAsGWEI = weiHexToGweiDec(numberAsWEIHex);
     return numberAsGWEI;
 }
-/**
- * Fetch gas estimates from the given URL.
- *
- * @param url - The gas estimate URL.
- * @param clientId - The client ID used to identify to the API who is asking for estimates.
- * @returns The gas estimates.
- */
-export async function fetchGasEstimates(url, clientId) {
-    const estimates = await handleFetch(url, clientId ? { headers: makeClientIdHeader(clientId) } : undefined);
-    return {
-        low: {
-            ...estimates.low,
-            suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),
-            suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),
-        },
-        medium: {
-            ...estimates.medium,
-            suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),
-            suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),
-        },
-        high: {
-            ...estimates.high,
-            suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),
-            suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),
-        },
-        estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),
-        historicalBaseFeeRange: estimates.historicalBaseFeeRange,
-        baseFeeTrend: estimates.baseFeeTrend,
-        latestPriorityFeeRange: estimates.latestPriorityFeeRange,
-        historicalPriorityFeeRange: estimates.historicalPriorityFeeRange,
-        priorityFeeTrend: estimates.priorityFeeTrend,
-        networkCongestion: estimates.networkCongestion,
-    };
-}
-/**
- * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium
- * high values from that API.
- *
- * @param url - The URL to fetch gas price estimates from.
- * @param clientId - The client ID used to identify to the API who is asking for estimates.
- * @returns The gas price estimates.
- */
-export async function fetchLegacyGasPriceEstimates(url, clientId) {
-    const result = await handleFetch(url, {
-        referrer: url,
-        referrerPolicy: 'no-referrer-when-downgrade',
-        method: 'GET',
-        mode: 'cors',
-        headers: {
-            'Content-Type': 'application/json',
-            ...(clientId && makeClientIdHeader(clientId)),
-        },
-    });
-    return {
-        low: result.SafeGasPrice,
-        medium: result.ProposeGasPrice,
-        high: result.FastGasPrice,
-    };
-}
 /**
  * Get a gas price estimate from the network using the `eth_gasPrice` method.
  *
diff --git a/dist/gas-util.mjs.map b/dist/gas-util.mjs.map
index c9469ba0846721c4e2f1278207f7a53e860e45b2..0c09c95ceb16c5b5d22c3c2f0463555e2018c3e8 100644
--- a/dist/gas-util.mjs.map
+++ b/dist/gas-util.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"gas-util.mjs","sourceRoot":"","sources":["../src/gas-util.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  query,\n  handleFetch,\n  gweiDecToWEIBN,\n  weiHexToGweiDec,\n} from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport BN from 'bn.js';\n\nimport type {\n  GasFeeEstimates,\n  EthGasPriceEstimate,\n  EstimatedGasFeeTimeBounds,\n  unknownString,\n  LegacyGasPriceEstimate,\n} from './GasFeeController';\n\nconst makeClientIdHeader = (clientId: string) => ({ 'X-Client-Id': clientId });\n\n/**\n * Convert a decimal GWEI value to a decimal string rounded to the nearest WEI.\n *\n * @param n - The input GWEI amount, as a decimal string or a number.\n * @returns The decimal string GWEI amount.\n */\nexport function normalizeGWEIDecimalNumbers(n: string | number) {\n  const numberAsWEIHex = gweiDecToWEIBN(n).toString(16);\n  const numberAsGWEI = weiHexToGweiDec(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\n/**\n * Fetch gas estimates from the given URL.\n *\n * @param url - The gas estimate URL.\n * @param clientId - The client ID used to identify to the API who is asking for estimates.\n * @returns The gas estimates.\n */\nexport async function fetchGasEstimates(\n  url: string,\n  clientId?: string,\n): Promise<GasFeeEstimates> {\n  const estimates = await handleFetch(\n    url,\n    clientId ? { headers: makeClientIdHeader(clientId) } : undefined,\n  );\n  return {\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.low.suggestedMaxPriorityFeePerGas,\n      ),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.low.suggestedMaxFeePerGas,\n      ),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.medium.suggestedMaxPriorityFeePerGas,\n      ),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.medium.suggestedMaxFeePerGas,\n      ),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.high.suggestedMaxPriorityFeePerGas,\n      ),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(\n        estimates.high.suggestedMaxFeePerGas,\n      ),\n    },\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    historicalBaseFeeRange: estimates.historicalBaseFeeRange,\n    baseFeeTrend: estimates.baseFeeTrend,\n    latestPriorityFeeRange: estimates.latestPriorityFeeRange,\n    historicalPriorityFeeRange: estimates.historicalPriorityFeeRange,\n    priorityFeeTrend: estimates.priorityFeeTrend,\n    networkCongestion: estimates.networkCongestion,\n  };\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n *\n * @param url - The URL to fetch gas price estimates from.\n * @param clientId - The client ID used to identify to the API who is asking for estimates.\n * @returns The gas price estimates.\n */\nexport async function fetchLegacyGasPriceEstimates(\n  url: string,\n  clientId?: string,\n): Promise<LegacyGasPriceEstimate> {\n  const result = await handleFetch(url, {\n    referrer: url,\n    referrerPolicy: 'no-referrer-when-downgrade',\n    method: 'GET',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json',\n      ...(clientId && makeClientIdHeader(clientId)),\n    },\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\n/**\n * Get a gas price estimate from the network using the `eth_gasPrice` method.\n *\n * @param ethQuery - The EthQuery instance to call the network with.\n * @returns A gas price estimate.\n */\nexport async function fetchEthGasPriceEstimate(\n  ethQuery: EthQuery,\n): Promise<EthGasPriceEstimate> {\n  const gasPrice = await query(ethQuery, 'gasPrice');\n  return {\n    gasPrice: weiHexToGweiDec(gasPrice).toString(),\n  };\n}\n\n/**\n * Estimate the time it will take for a transaction to be confirmed.\n *\n * @param maxPriorityFeePerGas - The max priority fee per gas.\n * @param maxFeePerGas - The max fee per gas.\n * @param gasFeeEstimates - The gas fee estimates.\n * @returns The estimated lower and upper bounds for when this transaction will be confirmed.\n */\nexport function calculateTimeEstimate(\n  maxPriorityFeePerGas: string,\n  maxFeePerGas: string,\n  gasFeeEstimates: GasFeeEstimates,\n): EstimatedGasFeeTimeBounds {\n  const { low, medium, high, estimatedBaseFee } = gasFeeEstimates;\n\n  const maxPriorityFeePerGasInWEI = gweiDecToWEIBN(maxPriorityFeePerGas);\n  const maxFeePerGasInWEI = gweiDecToWEIBN(maxFeePerGas);\n  const estimatedBaseFeeInWEI = gweiDecToWEIBN(estimatedBaseFee);\n\n  const effectiveMaxPriorityFee = BN.min(\n    maxPriorityFeePerGasInWEI,\n    maxFeePerGasInWEI.sub(estimatedBaseFeeInWEI),\n  );\n\n  const lowMaxPriorityFeeInWEI = gweiDecToWEIBN(\n    low.suggestedMaxPriorityFeePerGas,\n  );\n  const mediumMaxPriorityFeeInWEI = gweiDecToWEIBN(\n    medium.suggestedMaxPriorityFeePerGas,\n  );\n  const highMaxPriorityFeeInWEI = gweiDecToWEIBN(\n    high.suggestedMaxPriorityFeePerGas,\n  );\n\n  let lowerTimeBound;\n  let upperTimeBound;\n\n  if (effectiveMaxPriorityFee.lt(lowMaxPriorityFeeInWEI)) {\n    lowerTimeBound = null;\n    upperTimeBound = 'unknown' as unknownString;\n  } else if (\n    effectiveMaxPriorityFee.gte(lowMaxPriorityFeeInWEI) &&\n    effectiveMaxPriorityFee.lt(mediumMaxPriorityFeeInWEI)\n  ) {\n    lowerTimeBound = low.minWaitTimeEstimate;\n    upperTimeBound = low.maxWaitTimeEstimate;\n  } else if (\n    effectiveMaxPriorityFee.gte(mediumMaxPriorityFeeInWEI) &&\n    effectiveMaxPriorityFee.lt(highMaxPriorityFeeInWEI)\n  ) {\n    lowerTimeBound = medium.minWaitTimeEstimate;\n    upperTimeBound = medium.maxWaitTimeEstimate;\n  } else if (effectiveMaxPriorityFee.eq(highMaxPriorityFeeInWEI)) {\n    lowerTimeBound = high.minWaitTimeEstimate;\n    upperTimeBound = high.maxWaitTimeEstimate;\n  } else {\n    lowerTimeBound = 0;\n    upperTimeBound = high.maxWaitTimeEstimate;\n  }\n\n  return {\n    lowerTimeBound,\n    upperTimeBound,\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"gas-util.mjs","sourceRoot":"","sources":["../src/gas-util.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EACL,KAAK,EACL,WAAW,EACX,cAAc,EACd,eAAe,EAChB,mCAAmC;AAEpC,OAAO,GAAE,cAAc;;AAUvB,MAAM,kBAAkB,GAAG,CAAC,QAAgB,EAAE,EAAE,CAAC,CAAC,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC;AAE/E;;;;;GAKG;AACH,MAAM,UAAU,2BAA2B,CAAC,CAAkB;IAC5D,MAAM,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACtD,MAAM,YAAY,GAAG,eAAe,CAAC,cAAc,CAAC,CAAC;IACrD,OAAO,YAAY,CAAC;AACtB,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAC5C,QAAkB;IAElB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACnD,OAAO;QACL,QAAQ,EAAE,eAAe,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE;KAC/C,CAAC;AACJ,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,qBAAqB,CACnC,oBAA4B,EAC5B,YAAoB,EACpB,eAAgC;IAEhC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,gBAAgB,EAAE,GAAG,eAAe,CAAC;IAEhE,MAAM,yBAAyB,GAAG,cAAc,CAAC,oBAAoB,CAAC,CAAC;IACvE,MAAM,iBAAiB,GAAG,cAAc,CAAC,YAAY,CAAC,CAAC;IACvD,MAAM,qBAAqB,GAAG,cAAc,CAAC,gBAAgB,CAAC,CAAC;IAE/D,MAAM,uBAAuB,GAAG,EAAE,CAAC,GAAG,CACpC,yBAAyB,EACzB,iBAAiB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAC7C,CAAC;IAEF,MAAM,sBAAsB,GAAG,cAAc,CAC3C,GAAG,CAAC,6BAA6B,CAClC,CAAC;IACF,MAAM,yBAAyB,GAAG,cAAc,CAC9C,MAAM,CAAC,6BAA6B,CACrC,CAAC;IACF,MAAM,uBAAuB,GAAG,cAAc,CAC5C,IAAI,CAAC,6BAA6B,CACnC,CAAC;IAEF,IAAI,cAAc,CAAC;IACnB,IAAI,cAAc,CAAC;IAEnB,IAAI,uBAAuB,CAAC,EAAE,CAAC,sBAAsB,CAAC,EAAE;QACtD,cAAc,GAAG,IAAI,CAAC;QACtB,cAAc,GAAG,SAA0B,CAAC;KAC7C;SAAM,IACL,uBAAuB,CAAC,GAAG,CAAC,sBAAsB,CAAC;QACnD,uBAAuB,CAAC,EAAE,CAAC,yBAAyB,CAAC,EACrD;QACA,cAAc,GAAG,GAAG,CAAC,mBAAmB,CAAC;QACzC,cAAc,GAAG,GAAG,CAAC,mBAAmB,CAAC;KAC1C;SAAM,IACL,uBAAuB,CAAC,GAAG,CAAC,yBAAyB,CAAC;QACtD,uBAAuB,CAAC,EAAE,CAAC,uBAAuB,CAAC,EACnD;QACA,cAAc,GAAG,MAAM,CAAC,mBAAmB,CAAC;QAC5C,cAAc,GAAG,MAAM,CAAC,mBAAmB,CAAC;KAC7C;SAAM,IAAI,uBAAuB,CAAC,EAAE,CAAC,uBAAuB,CAAC,EAAE;QAC9D,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAC1C,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;KAC3C;SAAM;QACL,cAAc,GAAG,CAAC,CAAC;QACnB,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;KAC3C;IAED,OAAO;QACL,cAAc;QACd,cAAc;KACf,CAAC;AACJ,CAAC","sourcesContent":["import {\n  query,\n  handleFetch,\n  gweiDecToWEIBN,\n  weiHexToGweiDec,\n} from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport BN from 'bn.js';\n\nimport type {\n  GasFeeEstimates,\n  EthGasPriceEstimate,\n  EstimatedGasFeeTimeBounds,\n  unknownString,\n  LegacyGasPriceEstimate,\n} from './GasFeeController';\n\nconst makeClientIdHeader = (clientId: string) => ({ 'X-Client-Id': clientId });\n\n/**\n * Convert a decimal GWEI value to a decimal string rounded to the nearest WEI.\n *\n * @param n - The input GWEI amount, as a decimal string or a number.\n * @returns The decimal string GWEI amount.\n */\nexport function normalizeGWEIDecimalNumbers(n: string | number) {\n  const numberAsWEIHex = gweiDecToWEIBN(n).toString(16);\n  const numberAsGWEI = weiHexToGweiDec(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\n/**\n * Get a gas price estimate from the network using the `eth_gasPrice` method.\n *\n * @param ethQuery - The EthQuery instance to call the network with.\n * @returns A gas price estimate.\n */\nexport async function fetchEthGasPriceEstimate(\n  ethQuery: EthQuery,\n): Promise<EthGasPriceEstimate> {\n  const gasPrice = await query(ethQuery, 'gasPrice');\n  return {\n    gasPrice: weiHexToGweiDec(gasPrice).toString(),\n  };\n}\n\n/**\n * Estimate the time it will take for a transaction to be confirmed.\n *\n * @param maxPriorityFeePerGas - The max priority fee per gas.\n * @param maxFeePerGas - The max fee per gas.\n * @param gasFeeEstimates - The gas fee estimates.\n * @returns The estimated lower and upper bounds for when this transaction will be confirmed.\n */\nexport function calculateTimeEstimate(\n  maxPriorityFeePerGas: string,\n  maxFeePerGas: string,\n  gasFeeEstimates: GasFeeEstimates,\n): EstimatedGasFeeTimeBounds {\n  const { low, medium, high, estimatedBaseFee } = gasFeeEstimates;\n\n  const maxPriorityFeePerGasInWEI = gweiDecToWEIBN(maxPriorityFeePerGas);\n  const maxFeePerGasInWEI = gweiDecToWEIBN(maxFeePerGas);\n  const estimatedBaseFeeInWEI = gweiDecToWEIBN(estimatedBaseFee);\n\n  const effectiveMaxPriorityFee = BN.min(\n    maxPriorityFeePerGasInWEI,\n    maxFeePerGasInWEI.sub(estimatedBaseFeeInWEI),\n  );\n\n  const lowMaxPriorityFeeInWEI = gweiDecToWEIBN(\n    low.suggestedMaxPriorityFeePerGas,\n  );\n  const mediumMaxPriorityFeeInWEI = gweiDecToWEIBN(\n    medium.suggestedMaxPriorityFeePerGas,\n  );\n  const highMaxPriorityFeeInWEI = gweiDecToWEIBN(\n    high.suggestedMaxPriorityFeePerGas,\n  );\n\n  let lowerTimeBound;\n  let upperTimeBound;\n\n  if (effectiveMaxPriorityFee.lt(lowMaxPriorityFeeInWEI)) {\n    lowerTimeBound = null;\n    upperTimeBound = 'unknown' as unknownString;\n  } else if (\n    effectiveMaxPriorityFee.gte(lowMaxPriorityFeeInWEI) &&\n    effectiveMaxPriorityFee.lt(mediumMaxPriorityFeeInWEI)\n  ) {\n    lowerTimeBound = low.minWaitTimeEstimate;\n    upperTimeBound = low.maxWaitTimeEstimate;\n  } else if (\n    effectiveMaxPriorityFee.gte(mediumMaxPriorityFeeInWEI) &&\n    effectiveMaxPriorityFee.lt(highMaxPriorityFeeInWEI)\n  ) {\n    lowerTimeBound = medium.minWaitTimeEstimate;\n    upperTimeBound = medium.maxWaitTimeEstimate;\n  } else if (effectiveMaxPriorityFee.eq(highMaxPriorityFeeInWEI)) {\n    lowerTimeBound = high.minWaitTimeEstimate;\n    upperTimeBound = high.maxWaitTimeEstimate;\n  } else {\n    lowerTimeBound = 0;\n    upperTimeBound = high.maxWaitTimeEstimate;\n  }\n\n  return {\n    lowerTimeBound,\n    upperTimeBound,\n  };\n}\n"]}
\ No newline at end of file
